
DuelDraw_interrupt.elf:     file format elf32-littlenios2
DuelDraw_interrupt.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001549c memsz 0x0001549c flags r-x
    LOAD off    0x000164bc vaddr 0x010154bc paddr 0x010173e4 align 2**12
         filesz 0x00001f28 memsz 0x00001f28 flags rw-
    LOAD off    0x0001930c vaddr 0x0101930c paddr 0x0101930c align 2**12
         filesz 0x00000000 memsz 0x00001b64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014748  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bbc  01014900  01014900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f28  010154bc  010173e4  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001b64  0101930c  0101930c  0001930c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000183e4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001058  00000000  00000000  00018410  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002b37  00000000  00000000  00019468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000341a0  00000000  00000000  0001bf9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a1e5  00000000  00000000  0005013f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001bf2a  00000000  00000000  0005a324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f74  00000000  00000000  00076250  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029d1  00000000  00000000  000791c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f70b  00000000  00000000  0007bb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0008b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0008b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009125c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009125f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009126b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009126c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0009126d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00091271  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00091275  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00091279  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  00091285  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000af7e8  00000000  00000000  000912bf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01014900 l    d  .rodata	00000000 .rodata
010154bc l    d  .rwdata	00000000 .rwdata
0101930c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 usb.c
01014988 l     O .rodata	00000013 __func__.3416
010149b4 l     O .rodata	00000013 __func__.3433
010149c8 l     O .rodata	00000010 __func__.3452
00000000 l    df *ABS*	00000000 usb_ISO.c
00000000 l    df *ABS*	00000000 usb_chap_9.c
00000000 l    df *ABS*	00000000 usb_config.c
00000000 l    df *ABS*	00000000 usb_device_bus.c
00000000 l    df *ABS*	00000000 usb_device_hal.c
00000000 l    df *ABS*	00000000 usb_isr.c
01014fb4 l     O .rodata	0000000f __func__.4024
00000000 l    df *ABS*	00000000 usb_queue.c
01014fe0 l     O .rodata	0000000e __func__.1882
00000000 l    df *ABS*	00000000 usbio.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
01015770 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
01006558 l     F .text	00000058 __sprint_r
010150c2 l     O .rodata	00000010 blanks.3452
010150b2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010085bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
01008788 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100a184 l     F .text	00000058 std
0100a290 l     F .text	00000008 __fp_lock
0100a298 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
010173b8 l     O .rwdata	00000004 charset
010150f4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0101523c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100cf9c l     F .text	00000058 __sprint_r
01015258 l     O .rodata	00000010 blanks.3391
01015248 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100f174 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010102a0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01010b14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01010b74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
01010ba0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01010cd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01010fd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
01011174 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01011254 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010113b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
010115dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010173d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
010118a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101612c l     O .rwdata	00001060 JTAG
0101718c l     O .rwdata	00000030 audio_and_video_config_0
010171bc l     O .rwdata	00000030 audio_0
010171ec l     O .rwdata	0000002c character_lcd_0
01017218 l     O .rwdata	0000002c parallel_port_0
01017244 l     O .rwdata	00000038 ps2_0
0101727c l     O .rwdata	00000034 usb_0
010172b0 l     O .rwdata	00000048 video_character_buffer_with_dma_0
010172f8 l     O .rwdata	00000054 video_pixel_buffer_dma
0101734c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01011cd8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01011f10 l     F .text	0000022c altera_avalon_jtag_uart_irq
0101213c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010127b8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_usb.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01013d28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01013f14 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
01014050 l     F .text	000000dc alt_file_locked
010142b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
01002ca0 g     F .text	00000210 read_write_register
01006238 g     F .text	0000001c putchar
0100b6c8 g     F .text	00000094 _mprec_log10
01004228 g     F .text	00000068 Hal4D13_GetErrorCode
01002288 g     F .text	00000064 Chap9_StallEP0InControlRead
0100b7b4 g     F .text	00000088 __any_on
0100e488 g     F .text	00000070 _isatty_r
01015214 g     O .rodata	00000028 __mprec_tinytens
01011410 g     F .text	0000006c alt_main
0100643c g     F .text	0000008c strcpy
010043d8 g     F .text	00000168 Hal4D13_RegAccess
01004164 g     F .text	00000070 Hal4D13_LockDevice
0101931c g     O .bss	00000004 ISP1362_BASE
0100625c g     F .text	000000a0 _puts_r
01013198 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
0101abe0 g     O .bss	00000100 alt_irq
0100e4f8 g     F .text	00000078 _lseek_r
01003ca8 g     F .text	00000094 Hal4D13_SetIntEnable
01003f18 g     F .text	00000054 Hal4D13_SetDMAConfig
010173e4 g       *ABS*	00000000 __flash_rwdata_start
010154bc g     O .rwdata	00000012 DeviceDescr
01012a98 g     F .text	00000034 alt_up_character_lcd_send_cmd
0100fc94 g     F .text	00000088 __eqdf2
01002fd8 g     F .text	00000028 D13Bus_StallEP0
01015730 g     O .rwdata	00000040 _NAME_USB_VENDOR_REQUEST
0100529c g     F .text	000000d8 usb_fifo_push
0101ae70 g       *ABS*	00000000 __alt_heap_start
01001918 g     F .text	00000230 Chap9_SetAddress
0100cddc g     F .text	00000074 _kill_r
01002224 g     F .text	00000064 Chap9_StallEP0InControlWrite
010061c0 g     F .text	00000044 printf
01000b90 g     F .text	0000002c usb_send_queue_is_empty
0100cd1c g     F .text	000000a0 _signal_r
01005250 g     F .text	0000001c Isr_Ep0EDone
01002b8c g     F .text	0000002c ML_Reserved
0100ce58 g     F .text	00000068 __sseek
0100a1ec g     F .text	000000a4 __sinit
01013820 g     F .text	00000114 alt_up_char_buffer_string
0100e0bc g     F .text	00000130 __swbuf_r
01012fb0 g     F .text	00000034 read_CE_bit
0100aec4 g     F .text	00000084 _setlocale_r
0101934c g     O .bss	00000002 IsoInPktLen
0100a2ec g     F .text	00000068 __sfmoreglue
010155d2 g     O .rwdata	0000001a strSerialNum
0101149c g     F .text	00000020 __malloc_unlock
01002c78 g     F .text	00000028 reserved
010005a0 g     F .text	00000090 findChallengeIndex
01013344 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0101739c g     O .rwdata	00000004 rb_wr_ptr
01013750 g     F .text	000000d0 alt_up_char_buffer_draw
01019388 g     O .bss	00000004 altera_avalon_timer_ts_freq
0100b1dc g     F .text	000000e0 memmove
0100a2dc g     F .text	00000010 _cleanup
0100b83c g     F .text	000000bc _Balloc
01000cd0 g     F .text	000000f0 usb_device_poll
0101364c g     F .text	00000040 alt_up_usb_open_dev
0100fda4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01012a1c g     F .text	0000007c get_DDRAM_addr
01003fc0 g     F .text	00000054 Hal4D13_SetDMACounter
01004068 g     F .text	00000054 Hal4D13_GetDataFromChipRam
01000000 g     F .entry	0000001c __reset
01019320 g     O .bss	00000004 bD13flags
010050a0 g     F .text	00000030 Isr_Ep03Done
010050d0 g     F .text	00000030 Isr_Ep04Done
01000020 g       *ABS*	00000000 __flash_exceptions_start
010029f4 g     F .text	000000f4 config_endpoint
0100e414 g     F .text	00000074 _fstat_r
01019364 g     O .bss	00000004 errno
0101937c g     O .bss	00000004 alt_argv
0101f378 g       *ABS*	00000000 _gp
01002bb8 g     F .text	00000098 CHECK_CHIP_ID
01011758 g     F .text	00000030 usleep
01003770 g     F .text	00000124 Hal4D13_ReadBulkEndpoint
01010d34 g     F .text	00000020 getpid
01004694 g     F .text	00000050 usb_disable_all_interrupts
01015fac g     O .rwdata	00000180 alt_fd_list
01002c50 g     F .text	00000028 D13Bus_ControlEntry
01001050 g     F .text	000000e4 Hal4D13_ReadISOEndpoint
010007b8 g     F .text	0000009c usb_recv_queue_pop
01006254 g     F .text	00000008 _putchar_r
010051e0 g     F .text	0000001c Isr_Ep0ADone
01000be8 g     F .text	000000e8 usb_device_init
01013e50 g     F .text	00000094 alt_find_dev
01006088 g     F .text	000000a0 memcpy
01012c30 g     F .text	0000004c alt_up_character_lcd_write_fd
01019318 g     O .bss	00000004 usb_send_cb
01013934 g     F .text	0000005c alt_up_char_buffer_clear
0100a2d0 g     F .text	0000000c _cleanup_r
0100ff3c g     F .text	000000f8 __floatsidf
01013fd8 g     F .text	00000078 alt_io_redirect
0100feb4 g     F .text	00000088 __ltdf2
01014900 g       *ABS*	00000000 __DTOR_END__
010051c4 g     F .text	0000001c Isr_Ep09Done
010062fc g     F .text	00000014 puts
01002b14 g     F .text	0000001c suspend_change
0100b618 g     F .text	000000b0 __ratio
01004374 g     F .text	0000001c Hal4D13_ConfigDevice
0100e098 g     F .text	00000024 __vfiprintf_internal
0100526c g     F .text	00000030 usb_fifo_init
01012354 g     F .text	00000224 altera_avalon_jtag_uart_read
01005934 g     F .text	00000014 malloc
01006204 g     F .text	00000034 _printf_r
010103dc g     F .text	00000008 __udivsi3
01010f14 g     F .text	000000c0 isatty
01003f6c g     F .text	00000054 Hal4D13_GetDMAConfig
0100cb00 g     F .text	000000cc _raise_r
01005734 g     F .text	00000064 __assert_func
01015124 g     O .rodata	000000c8 __mprec_tens
0100aea0 g     F .text	00000008 __locale_charset
010014b8 g     F .text	00000238 Chap9_ClearFeature
01005218 g     F .text	0000001c Isr_Ep0CDone
010146b0 g     F .text	00000090 alt_icache_flush
01001b48 g     F .text	000001dc Chap9_GetDescriptor
01015576 g     O .rwdata	00000032 REPORT_DESCRIPTOR
01019358 g     O .bss	00000004 __malloc_top_pad
0100cdd8 g     F .text	00000004 _getpid_r
0101737c g     O .rwdata	00000001 IsoDisable
010156ac g     O .rwdata	00000010 _NAME_USB_REQUEST_TYPE
01004110 g     F .text	00000054 Hal4D13_ReadCurrentFrameNumber
0101934e g     O .bss	00000001 ALTERNATIVE_SETTING
010173b4 g     O .rwdata	00000004 __mb_cur_max
0100aea8 g     F .text	0000000c _localeconv_r
0100bf34 g     F .text	0000003c __i2b
0100a884 g     F .text	0000049c __sfvwrite_r
01019324 g     O .bss	00000008 usb_send_queue
01002b30 g     F .text	0000005c ML_AcknowledgeSETUP
0100cc54 g     F .text	000000b4 __sigtramp_r
01004358 g     F .text	0000001c Hal4D13_UnconfigDevice
010022ec g     F .text	0000009c Chap9_SingleTransmitEP0
01006310 g     F .text	00000070 _sbrk_r
01000fa8 g     F .text	00000030 Wait4Ns
01000dc0 g     F .text	000001e8 EnableIsoMode
01000984 g     F .text	00000188 usb_device_recv
0100e570 g     F .text	00000078 _read_r
01002ae8 g     F .text	0000002c reconnect_USB
0100518c g     F .text	0000001c Isr_Ep07Done
01015f78 g     O .rwdata	0000000c __lc_ctype
0100325c g     F .text	00000038 Hal4D13_ResetDevice
010173cc g     O .rwdata	00000004 alt_max_fd
01010818 g     F .text	00000138 __unpack_d
0100e2f0 g     F .text	00000110 _fclose_r
01012fe4 g     F .text	00000034 read_num_bytes_available
01017388 g     O .rwdata	00000008 _NAME_USB_REQUEST_DIRECTION
0100a150 g     F .text	00000034 fflush
0101935c g     O .bss	00000004 __malloc_max_sbrked_mem
01000bbc g     F .text	0000002c usb_recv_queue_is_empty
01010d54 g     F .text	000001c0 alt_irq_register
01012f4c g     F .text	00000034 read_RI_bit
01002094 g     F .text	00000100 Chap9_SetInterface
01003d3c g     F .text	0000008c Hal4D13_ReadInterruptRegister
0101562e g     O .rwdata	00000038 strManufacturer
0100f604 g     F .text	00000074 __adddf3
0100b4f8 g     F .text	00000120 __b2d
0101934a g     O .bss	00000002 IsoOutPktLen
0100ebc4 g     F .text	000005b0 __umoddi3
010112c0 g     F .text	000000f0 lseek
0100515c g     F .text	00000030 Isr_Ep06Done
010173a8 g     O .rwdata	00000004 _global_impure_ptr
01002388 g     F .text	0000017c Chap9_BurstTransmitEP0
0100c49c g     F .text	000005f4 _realloc_r
0101ae70 g       *ABS*	00000000 __bss_end
010173a0 g     O .rwdata	00000004 rb_rd_ptr
010143ac g     F .text	0000010c alt_tick
01002504 g     F .text	00000274 SetupToken_Handler
01000fd8 g     F .text	00000078 ISOLOOP
0100e5e8 g     F .text	000005dc __udivdi3
010151ec g     O .rodata	00000028 __mprec_bigtens
0100c190 g     F .text	00000120 __s2b
01008770 g     F .text	00000018 abort
0101010c g     F .text	00000194 __floatunsidf
0100b418 g     F .text	00000060 __mcmp
0101304c g     F .text	0000002c read_data_byte
01015668 g     O .rwdata	00000034 StandardDeviceRequest
0101932c g     O .bss	00000008 usb_recv_queue
010155ec g     O .rwdata	00000042 strProduct
0100a2b8 g     F .text	00000018 __fp_lock_all
01002964 g     F .text	00000034 disconnect_USB
01014314 g     F .text	00000098 alt_alarm_stop
01012f80 g     F .text	00000030 read_RE_bit
01019374 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
01015f84 g     O .rwdata	00000028 alt_dev_null
01012f18 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100364c g     F .text	00000124 Hal4D13_ReadEndpoint
010131f0 g     F .text	00000078 alt_up_ps2_write_data_byte
01013c30 g     F .text	00000044 alt_dcache_flush_all
0100b2e4 g     F .text	00000070 __hi0bits
01010034 g     F .text	000000d8 __fixdfsi
010057ac g     F .text	0000001c calloc
0100309c g     F .text	00000184 D13Bus_BurstTransmitEP0
010193e0 g     O .bss	00000400 IsoOutDataBuff
010173e4 g       *ABS*	00000000 __ram_rwdata_end
010173c4 g     O .rwdata	00000008 alt_dev_list
01011788 g     F .text	00000120 write
0100c3b4 g     F .text	000000e8 _putc_r
010129f4 g     F .text	00000028 alt_timestamp_freq
01000630 g     F .text	00000034 usb_register_recv_callback
010034d4 g     F .text	000000c0 Hal4D13_SoftConnect
010154bc g       *ABS*	00000000 __ram_rodata_end
01010c00 g     F .text	000000d4 fstat
01019334 g     O .bss	00000008 ioRequest
01011034 g     F .text	00000140 kill
0100c070 g     F .text	00000120 __pow5mult
01019368 g     O .bss	00000004 __nlocale_changed
0100cff4 g     F .text	000010a4 ___vfiprintf_internal_r
010103e4 g     F .text	00000008 __umodsi3
010035cc g     F .text	00000040 Hal4D13_ClearBuffer
01005374 g     F .text	00000044 usb_fifo_is_empty
01017380 g     O .rwdata	00000002 IsoInPattern
0101ae70 g       *ABS*	00000000 end
01013564 g     F .text	000000a8 alt_up_ps2_write_fd
01003c30 g     F .text	00000078 Hal4D13_GetIntEnable
0101368c g     F .text	00000084 alt_up_char_buffer_init
010155a8 g     O .rwdata	00000018 strInterface
01011e58 g     F .text	000000b8 altera_avalon_jtag_uart_init
01003390 g     F .text	00000060 Hal4D13_GetMode
010148fc g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0101282c g     F .text	00000088 alt_avalon_timer_sc_init
01010484 g     F .text	00000080 __clzsi2
010049b8 g     F .text	00000030 Isr_SuspendChange
01012578 g     F .text	00000240 altera_avalon_jtag_uart_write
0100a1dc g     F .text	00000004 __sfp_lock_acquire
01000438 g     F .text	000000d8 makeNewPlayer
0100b0f8 g     F .text	000000e4 memchr
01012b40 g     F .text	00000078 alt_up_character_lcd_write
010065b0 g     F .text	00001eac ___vfprintf_internal_r
0100a570 g     F .text	00000314 _free_r
01015556 g     O .rwdata	00000020 EP_Descr
0100283c g     F .text	00000128 help_devreq
010085c0 g     F .text	000001b0 __call_exitprocs
01019350 g     O .bss	00000004 inflight
0101936c g     O .bss	00000004 __mlocale_changed
010173b0 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0101938c g     O .bss	00000004 _alt_tick_rate
01004f1c g     F .text	000000bc usb_check_send
010051a8 g     F .text	0000001c Isr_Ep08Done
0100bc00 g     F .text	0000014c __lshift
01019390 g     O .bss	00000004 _alt_nticks
010039b8 g     F .text	0000015c Hal4D13_WriteEndpoint
0100cdbc g     F .text	0000001c signal
010114bc g     F .text	00000120 read
0101193c g     F .text	0000039c alt_sys_init
01012da4 g     F .text	000000b0 alt_up_character_lcd_shift_display
01004390 g     F .text	00000048 Hal4D13_SingleTransmitEP0
0100071c g     F .text	0000009c usb_send_queue_pop
010147c8 g     F .text	00000134 __register_exitproc
01013470 g     F .text	00000058 alt_up_ps2_clear_fifo
010049e8 g     F .text	00000030 Isr_SHORT_PACKET
0100bd4c g     F .text	000001e8 __multiply
01012e54 g     F .text	00000090 alt_up_character_lcd_erase_pos
01003e98 g     F .text	00000080 Hal4D13_SetEndpointStatus
010121ec g     F .text	00000074 altera_avalon_jtag_uart_close
010154bc g       *ABS*	00000000 __ram_rwdata_start
010156f0 g     O .rwdata	00000040 VendorDeviceRequest
01014900 g       *ABS*	00000000 __ram_rodata_start
01019394 g     O .bss	00000028 __malloc_current_mallinfo
0100b8f8 g     F .text	0000017c __d2b
01019314 g     O .bss	00000004 usb_recv_cb
01002998 g     F .text	0000005c connect_USB
01017398 g     O .rwdata	00000001 INT_Enabled
01011d10 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
010145f8 g     F .text	000000b8 alt_get_fd
0101933c g     O .bss	00000004 usb_send_cb_context
0100475c g     F .text	000001b8 usb_isr
01013ae4 g     F .text	0000014c alt_busy_sleep
01010950 g     F .text	000000c8 __fpcmp_parts_d
0100e280 g     F .text	00000070 _close_r
010051fc g     F .text	0000001c Isr_Ep0BDone
01005490 g     F .text	00000028 usb_fifo_peek
0100457c g     F .text	0000003c Hal4D13_StallEP0InControlRead
01014754 g     F .text	00000074 memcmp
01011dc0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0101ae70 g       *ABS*	00000000 __alt_stack_base
01011e08 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01008480 g     F .text	0000013c __swsetup_r
0101569c g     O .rwdata	00000010 _NAME_USB_REQUEST_RECIPIENT
01004d04 g     F .text	00000218 Isr_Ep00TxDone
0100fa3c g     F .text	00000258 __divdf3
0100a354 g     F .text	000000f0 __sfp
01017394 g     O .rwdata	00000004 _NAME_USB_CLASS_REQUEST
0100b75c g     F .text	00000058 __copybits
01015b70 g     O .rwdata	00000408 __malloc_av_
010016f0 g     F .text	00000228 Chap9_SetFeature
0100a1e8 g     F .text	00000004 __sinit_lock_release
0100f678 g     F .text	000003c4 __muldf3
0100cf3c g     F .text	00000060 __sread
010144d8 g     F .text	00000120 alt_find_file
01005234 g     F .text	0000001c Isr_Ep0DDone
01013c74 g     F .text	000000b4 alt_dev_llist_insert
0101147c g     F .text	00000020 __malloc_lock
0101169c g     F .text	000000bc sbrk
01004b00 g     F .text	00000204 Isr_Ep00RxDone
01004914 g     F .text	000000a4 Isr_BusReset
01017378 g     O .rwdata	00000004 packet_size
01009f54 g     F .text	000001fc _fflush_r
010057c8 g     F .text	000000b4 _calloc_r
010197e0 g     O .bss	00000400 IsoInDataBuff
01003dc8 g     F .text	00000068 Hal4D13_GetEndpointStatusWInteruptClear
01002194 g     F .text	00000090 Chap9_StallEP0
0101930c g       *ABS*	00000000 __bss_start
01006128 g     F .text	00000098 memset
0100333c g     F .text	00000054 Hal4D13_SetMode
01000260 g     F .text	000001d8 main
01019380 g     O .bss	00000004 alt_envp
01019360 g     O .bss	00000004 __malloc_max_total_mem
01013710 g     F .text	00000040 alt_up_char_buffer_open_dev
01011d68 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01019340 g     O .bss	00000004 usb_recv_cb_context
0100e1ec g     F .text	0000001c __swbuf
01005038 g     F .text	00000068 Isr_Ep02Done
01012cf4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01000698 g     F .text	00000084 usb_recv_queue_push
0100ce50 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01004290 g     F .text	00000068 Hal4D13_GetEndpointConfig
010053b8 g     F .text	000000d8 usb_fifo_pop
0100e400 g     F .text	00000014 fclose
010133f4 g     F .text	0000007c alt_up_ps2_read_data_byte
01002eb0 g     F .text	000000f0 setup_dma_request
010128b4 g     F .text	000000a4 alt_timestamp_start
0101ace0 g     O .bss	00000190 _atexit0
010089a0 g     F .text	000015b4 _dtoa_r
01005948 g     F .text	00000740 _malloc_r
01015544 g     O .rwdata	00000009 InterfaceDescr0
010173d0 g     O .rwdata	00000004 alt_errno
010033f0 g     F .text	00000060 Hal4D13_GetAddress
010058f8 g     F .text	00000028 _fiprintf_r
0100cc44 g     F .text	00000010 _init_signal
0100ade8 g     F .text	000000b8 _fwalk
01019348 g     O .bss	00000001 IsoMode
0101360c g     F .text	00000040 alt_up_ps2_open_dev
0100c2b0 g     F .text	00000104 putc
0101031c g     F .text	00000060 __divsi3
01015268 g     O .rodata	00000014 __thenan_df
01004540 g     F .text	0000003c Hal4D13_StallEP0InControlWrite
01012b00 g     F .text	00000040 alt_up_character_lcd_open_dev
0100a444 g     F .text	0000012c _malloc_trim_r
01013144 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
01014900 g       *ABS*	00000000 __CTOR_END__
0101554d g     O .rwdata	00000009 InterfaceDescr1
01012acc g     F .text	00000034 alt_up_character_lcd_init
01006380 g     F .text	000000bc strcmp
01004a18 g     F .text	000000cc Isr_DmaEot
01014900 g       *ABS*	00000000 __flash_rodata_start
01014900 g       *ABS*	00000000 __DTOR_LIST__
01004648 g     F .text	0000004c Read_HC_Config_Reg
0100360c g     F .text	00000040 Hal4D13_ValidBuffer
010041d4 g     F .text	00000054 Hal4D13_ReadChipID
01002778 g     F .text	000000c4 DeviceRequest_Handler
0101930c g     O .bss	00000004 count
01003b14 g     F .text	0000011c Hal4D13_WriteBulkEndpoint
0100fd1c g     F .text	00000088 __nedf2
01011908 g     F .text	00000034 alt_irq_init
0101163c g     F .text	00000060 alt_release_fd
01013018 g     F .text	00000034 read_data_valid
01012ee4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0101527c g     O .rodata	00000100 __clz_tab
01019370 g     O .bss	00000004 _PathLocale
010132d8 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
01014740 g     F .text	00000014 atexit
010032e8 g     F .text	00000054 Hal4D13_SetDevConfig
0100e208 g     F .text	00000078 _write_r
01003294 g     F .text	00000054 Hal4D13_GetDevConfig
0100af48 g     F .text	0000001c setlocale
010045b8 g     F .text	00000040 Hal4D13_IsSetupPktInvalid
01004fd8 g     F .text	00000060 Isr_Ep01Done
010055f4 g     F .text	00000140 usb_recv
010193bc g     O .bss	00000024 ControlData
010173a4 g     O .rwdata	00000004 _impure_ptr
01019378 g     O .bss	00000004 alt_argc
01019384 g     O .bss	00000004 altera_avalon_timer_ts_base
01013dec g     F .text	00000064 _do_dtors
01005100 g     F .text	0000005c Isr_Ep05Done
01001d24 g     F .text	000000c0 Chap9_GetConfiguration
01000020 g       .exceptions	00000000 alt_irq_entry
01001134 g     F .text	000000f4 Hal4D13_WriteISOEndpoint
0100b478 g     F .text	00000080 __ulp
0100ca90 g     F .text	00000040 __isinfd
0100a2a0 g     F .text	00000018 __fp_unlock_all
010173bc g     O .rwdata	00000008 alt_fs_list
010154ce g     O .rwdata	0000002e ConfigDescr_a
010155c0 g     O .rwdata	00000012 strConfiguration
01000854 g     F .text	00000130 usb_device_send
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100aeb4 g     F .text	00000010 localeconv
01012958 g     F .text	0000009c alt_timestamp
010156bc g     O .rwdata	00000034 _NAME_USB_STANDARD_REQUEST
010042f8 g     F .text	00000060 Hal4D13_SetEndpointConfig
010173e4 g       *ABS*	00000000 _edata
010046e4 g     F .text	00000044 usb_reenable_all_interrupts
0101ae70 g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01012260 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010045f8 g     F .text	00000050 Write_HC_Config_Reg
01000b0c g     F .text	00000084 usb_send_queue_push
01003450 g     F .text	00000084 Hal4D13_SetAddressEnable
01000510 g     F .text	00000090 isNewPlayer
0100cec0 g     F .text	0000007c __swrite
01019344 g     O .bss	00000003 bUSBCheck_Device_State
010173ac g     O .rwdata	00000004 __malloc_trim_threshold
010040bc g     F .text	00000054 Hal4D13_SetDataToChipRam
010144b8 g     F .text	00000020 altera_nios2_qsys_irq_init
01001ff0 g     F .text	000000a4 Chap9_GetInterface
00000000 g       *ABS*	00000000 __alt_mem_onchip
0100587c g     F .text	00000038 exit
010058b4 g     F .text	00000044 fiprintf
01005530 g     F .text	000000c4 usb_send
0100653c g     F .text	0000001c _vfiprintf_r
0100ad20 g     F .text	000000c8 _fwalk_reent
01013078 g     F .text	000000cc alt_up_ps2_init
0100ba74 g     F .text	0000018c __mdiff
0101037c g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100a1e0 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
010054b8 g     F .text	00000078 make_packet
01012bb8 g     F .text	00000078 alt_up_character_lcd_string
01003594 g     F .text	00000038 Hal4D13_AcknowledgeSETUP
01003000 g     F .text	0000009c D13Bus_SingleTransmitEP0
01004014 g     F .text	00000054 Hal4D13_GetDMACounter
0100cad0 g     F .text	00000030 __isnand
01010be0 g     F .text	00000020 _exit
01000204 g     F .text	0000005c timer_isr
01013990 g     F .text	00000154 alt_alarm_start
01003e30 g     F .text	00000068 Hal4D13_GetEndpointStatusWOInteruptClear
010103ec g     F .text	00000098 __muldi3
0101737e g     O .rwdata	00000002 IsoOutPattern
0100af64 g     F .text	00000194 __smakebuf_r
01000664 g     F .text	00000034 usb_register_send_callback
01013268 g     F .text	00000070 alt_up_ps2_wait_for_ack
010064c8 g     F .text	00000074 strlen
0100cbe0 g     F .text	00000064 _init_signal_r
0101412c g     F .text	00000188 open
0100fe2c g     F .text	00000088 __gedf2
01001228 g     F .text	00000290 Chap9_GetStatus
01005798 g     F .text	00000014 __assert
01013ee4 g     F .text	00000030 alt_icache_flush_all
01012c7c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
010173d4 g     O .rwdata	00000004 alt_priority_mask
010154fc g     O .rwdata	00000048 ConfigDescr
0100845c g     F .text	00000024 __vfprintf_internal
010134c8 g     F .text	0000009c alt_up_ps2_read_fd
0100f584 g     F .text	00000080 __subdf3
01019be0 g     O .bss	00001000 return_buf
0100b354 g     F .text	000000c4 __lo0bits
010173dc g     O .rwdata	00000008 alt_alarm_list
01013d88 g     F .text	00000064 _do_ctors
0100cd08 g     F .text	00000014 __sigtramp
01019354 g     O .bss	00000004 status
01003894 g     F .text	00000124 Hal4D13_ReadEndpointWOClearBuffer
01004ae4 g     F .text	0000001c Isr_SOF
01010a18 g     F .text	000000fc close
01003220 g     F .text	0000003c Hal4D13_AcquireD13
01001de4 g     F .text	0000020c Chap9_SetConfiguration
010111d4 g     F .text	00000080 alt_load
01010504 g     F .text	00000314 __pack_d
01004728 g     F .text	00000034 fn_usb_isr
01017382 g     O .rwdata	00000004 strLanguage
01017390 g     O .rwdata	00000004 ClassDeviceRequest
0100cbcc g     F .text	00000014 raise
01005920 g     F .text	00000014 free
0100a1e4 g     F .text	00000004 __sinit_lock_acquire
0100bf70 g     F .text	00000100 __multadd
0100b2bc g     F .text	00000028 _Bfree
01019310 g     O .bss	00000004 usb_initialized
01002fa0 g     F .text	00000038 get_firmware_version



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c040b4 	movhi	r3,258
 1000134:	18eaf804 	addi	r3,r3,-21536
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c040b4 	movhi	r3,258
 100014c:	18eaf804 	addi	r3,r3,-21536
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6bcde14 	ori	gp,gp,62328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	10a4c314 	ori	r2,r2,37644

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18eb9c14 	ori	r3,r3,44656

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10111d40 	call	10111d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10114100 	call	1011410 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <timer_isr>:

#include <assert.h>

volatile int count = 0;
// runs every 25ms
void timer_isr(void * context, unsigned int irq_id) {
 1000204:	defffc04 	addi	sp,sp,-16
 1000208:	dfc00315 	stw	ra,12(sp)
 100020c:	df000215 	stw	fp,8(sp)
 1000210:	df000204 	addi	fp,sp,8
 1000214:	e13ffe15 	stw	r4,-8(fp)
 1000218:	e17fff15 	stw	r5,-4(fp)
	// receive from middleman
//	if (!usb_recv_queue_is_empty()) {
//
//	}

	count++;
 100021c:	d0a7e517 	ldw	r2,-24684(gp)
 1000220:	10800044 	addi	r2,r2,1
 1000224:	d0a7e515 	stw	r2,-24684(gp)
	if (count == 40){
 1000228:	d0a7e517 	ldw	r2,-24684(gp)
 100022c:	10800a18 	cmpnei	r2,r2,40
 1000230:	1000041e 	bne	r2,zero,1000244 <timer_isr+0x40>
		printf("check.\n");
 1000234:	01004074 	movhi	r4,257
 1000238:	21124004 	addi	r4,r4,18688
 100023c:	10062fc0 	call	10062fc <puts>
		count = 0;
 1000240:	d027e515 	stw	zero,-24684(gp)
	}

	IOWR_32DIRECT(TIMER_0_BASE, 0, 0);
 1000244:	00920804 	movi	r2,18464
 1000248:	10000035 	stwio	zero,0(r2)
}
 100024c:	e037883a 	mov	sp,fp
 1000250:	dfc00117 	ldw	ra,4(sp)
 1000254:	df000017 	ldw	fp,0(sp)
 1000258:	dec00204 	addi	sp,sp,8
 100025c:	f800283a 	ret

01000260 <main>:

int main() {
 1000260:	deffd904 	addi	sp,sp,-156
 1000264:	dfc02615 	stw	ra,152(sp)
 1000268:	df002515 	stw	fp,148(sp)
 100026c:	df002504 	addi	fp,sp,148
	int i, index;
	int targetID;
	int numOfPlayers = 0;
 1000270:	e03fe815 	stw	zero,-96(fp)
	unsigned char protocol;
	char* androidID = (char*) malloc(sizeof(char) * 17);
 1000274:	01000444 	movi	r4,17
 1000278:	10059340 	call	1005934 <malloc>
 100027c:	e0bfe615 	stw	r2,-104(fp)

	player_t player_list[10];
	packet* p = (packet*) malloc(sizeof(packet));
 1000280:	01000204 	movi	r4,8
 1000284:	10059340 	call	1005934 <malloc>
 1000288:	e0bfe515 	stw	r2,-108(fp)
	p->data = (char*) malloc(sizeof(char) * 100);
 100028c:	01001904 	movi	r4,100
 1000290:	10059340 	call	1005934 <malloc>
 1000294:	1007883a 	mov	r3,r2
 1000298:	e0bfe517 	ldw	r2,-108(fp)
 100029c:	10c00115 	stw	r3,4(r2)
	i = 0;
 10002a0:	e03feb15 	stw	zero,-84(fp)

	printf("USB Initialization\n");
 10002a4:	01004074 	movhi	r4,257
 10002a8:	21124204 	addi	r4,r4,18696
 10002ac:	10062fc0 	call	10062fc <puts>
	alt_up_usb_dev * usb_dev;
	usb_dev = alt_up_usb_open_dev(USB_0_NAME);
 10002b0:	01004074 	movhi	r4,257
 10002b4:	21124704 	addi	r4,r4,18716
 10002b8:	101364c0 	call	101364c <alt_up_usb_open_dev>
 10002bc:	e0bfe415 	stw	r2,-112(fp)
	usb_device_init(usb_dev, USB_0_IRQ);
 10002c0:	e13fe417 	ldw	r4,-112(fp)
 10002c4:	01400104 	movi	r5,4
 10002c8:	1000be80 	call	1000be8 <usb_device_init>

	printf("Polling USB device.  Run middleman now!\n");
 10002cc:	01004074 	movhi	r4,257
 10002d0:	21124a04 	addi	r4,r4,18728
 10002d4:	10062fc0 	call	10062fc <puts>
	alt_timestamp_start();
 10002d8:	10128b40 	call	10128b4 <alt_timestamp_start>
	int clocks = 0;
 10002dc:	e03fe315 	stw	zero,-116(fp)
	while (clocks < 50000000 * 5) {
 10002e0:	00000306 	br	10002f0 <main+0x90>
		clocks = alt_timestamp();
 10002e4:	10129580 	call	1012958 <alt_timestamp>
 10002e8:	e0bfe315 	stw	r2,-116(fp)
		usb_device_poll();
 10002ec:	1000cd00 	call	1000cd0 <usb_device_poll>
	usb_device_init(usb_dev, USB_0_IRQ);

	printf("Polling USB device.  Run middleman now!\n");
	alt_timestamp_start();
	int clocks = 0;
	while (clocks < 50000000 * 5) {
 10002f0:	e0ffe317 	ldw	r3,-116(fp)
 10002f4:	0083b9f4 	movhi	r2,3815
 10002f8:	10ac9fc4 	addi	r2,r2,-19841
 10002fc:	10fff90e 	bge	r2,r3,10002e4 <main+0x84>
		clocks = alt_timestamp();
		usb_device_poll();
	}
	printf("Done polling USB\n");
 1000300:	01004074 	movhi	r4,257
 1000304:	21125404 	addi	r4,r4,18768
 1000308:	10062fc0 	call	10062fc <puts>

	printf("Initialize IRQ\n");
 100030c:	01004074 	movhi	r4,257
 1000310:	21125904 	addi	r4,r4,18788
 1000314:	10062fc0 	call	10062fc <puts>
	alt_irq_register(TIMER_0_IRQ, NULL, timer_isr);
 1000318:	01804034 	movhi	r6,256
 100031c:	31808104 	addi	r6,r6,516
 1000320:	01000144 	movi	r4,5
 1000324:	000b883a 	mov	r5,zero
 1000328:	1010d540 	call	1010d54 <alt_irq_register>
 100032c:	00800144 	movi	r2,5
 1000330:	e0bfe115 	stw	r2,-124(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000334:	0005303a 	rdctl	r2,status
 1000338:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100033c:	e0ffe017 	ldw	r3,-128(fp)
 1000340:	00bfff84 	movi	r2,-2
 1000344:	1884703a 	and	r2,r3,r2
 1000348:	1001703a 	wrctl	status,r2
  
  return context;
 100034c:	e0bfe017 	ldw	r2,-128(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1000350:	e0bfe215 	stw	r2,-120(fp)

  alt_irq_active &= ~(1 << id);
 1000354:	e0ffe117 	ldw	r3,-124(fp)
 1000358:	00800044 	movi	r2,1
 100035c:	10c4983a 	sll	r2,r2,r3
 1000360:	0084303a 	nor	r2,zero,r2
 1000364:	1007883a 	mov	r3,r2
 1000368:	008040b4 	movhi	r2,258
 100036c:	10a4dd04 	addi	r2,r2,-27788
 1000370:	10800017 	ldw	r2,0(r2)
 1000374:	1886703a 	and	r3,r3,r2
 1000378:	008040b4 	movhi	r2,258
 100037c:	10a4dd04 	addi	r2,r2,-27788
 1000380:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1000384:	008040b4 	movhi	r2,258
 1000388:	10a4dd04 	addi	r2,r2,-27788
 100038c:	10800017 	ldw	r2,0(r2)
 1000390:	100170fa 	wrctl	ienable,r2
 1000394:	e0bfe217 	ldw	r2,-120(fp)
 1000398:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100039c:	e0bfdf17 	ldw	r2,-132(fp)
 10003a0:	1001703a 	wrctl	status,r2
	alt_irq_disable(TIMER_0_IRQ);
	IOWR_16DIRECT(TIMER_0_BASE, 1, 0x07);
 10003a4:	00d20844 	movi	r3,18465
 10003a8:	008001c4 	movi	r2,7
 10003ac:	1880002d 	sthio	r2,0(r3)
 10003b0:	00800144 	movi	r2,5
 10003b4:	e0bfdd15 	stw	r2,-140(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10003b8:	0005303a 	rdctl	r2,status
 10003bc:	e0bfdc15 	stw	r2,-144(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10003c0:	e0ffdc17 	ldw	r3,-144(fp)
 10003c4:	00bfff84 	movi	r2,-2
 10003c8:	1884703a 	and	r2,r3,r2
 10003cc:	1001703a 	wrctl	status,r2
  
  return context;
 10003d0:	e0bfdc17 	ldw	r2,-144(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10003d4:	e0bfde15 	stw	r2,-136(fp)

  alt_irq_active |= (1 << id);
 10003d8:	e0ffdd17 	ldw	r3,-140(fp)
 10003dc:	00800044 	movi	r2,1
 10003e0:	10c4983a 	sll	r2,r2,r3
 10003e4:	1007883a 	mov	r3,r2
 10003e8:	008040b4 	movhi	r2,258
 10003ec:	10a4dd04 	addi	r2,r2,-27788
 10003f0:	10800017 	ldw	r2,0(r2)
 10003f4:	1886b03a 	or	r3,r3,r2
 10003f8:	008040b4 	movhi	r2,258
 10003fc:	10a4dd04 	addi	r2,r2,-27788
 1000400:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1000404:	008040b4 	movhi	r2,258
 1000408:	10a4dd04 	addi	r2,r2,-27788
 100040c:	10800017 	ldw	r2,0(r2)
 1000410:	100170fa 	wrctl	ienable,r2
 1000414:	e0bfde17 	ldw	r2,-136(fp)
 1000418:	e0bfdb15 	stw	r2,-148(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100041c:	e0bfdb17 	ldw	r2,-148(fp)
 1000420:	1001703a 	wrctl	status,r2
	alt_irq_enable(TIMER_0_IRQ);

	printf("Initializing loop\n");
 1000424:	01004074 	movhi	r4,257
 1000428:	21125d04 	addi	r4,r4,18804
 100042c:	10062fc0 	call	10062fc <puts>

	while (1) {
		// send to middle man
		if (!usb_send_queue_is_empty()) {
 1000430:	1000b900 	call	1000b90 <usb_send_queue_is_empty>

		}
	}
 1000434:	003ffe06 	br	1000430 <main+0x1d0>

01000438 <makeNewPlayer>:
 */

#include "player.h"

void makeNewPlayer(player_t list[], int* numberOfPlayers, int clientID,
		char* androidID) {
 1000438:	defff704 	addi	sp,sp,-36
 100043c:	dfc00815 	stw	ra,32(sp)
 1000440:	df000715 	stw	fp,28(sp)
 1000444:	df000704 	addi	fp,sp,28
 1000448:	e13ffc15 	stw	r4,-16(fp)
 100044c:	e17ffd15 	stw	r5,-12(fp)
 1000450:	e1bffe15 	stw	r6,-8(fp)
 1000454:	e1ffff15 	stw	r7,-4(fp)
	int i = isNewPlayer(list, *numberOfPlayers, androidID);
 1000458:	e0bffd17 	ldw	r2,-12(fp)
 100045c:	11400017 	ldw	r5,0(r2)
 1000460:	e13ffc17 	ldw	r4,-16(fp)
 1000464:	e1bfff17 	ldw	r6,-4(fp)
 1000468:	10005100 	call	1000510 <isNewPlayer>
 100046c:	e0bff915 	stw	r2,-28(fp)
	if (i == -1) {
 1000470:	e0bff917 	ldw	r2,-28(fp)
 1000474:	10bfffd8 	cmpnei	r2,r2,-1
 1000478:	1000191e 	bne	r2,zero,10004e0 <makeNewPlayer+0xa8>
		player_t player = { clientID, 0 };
 100047c:	e0bffe17 	ldw	r2,-8(fp)
 1000480:	e0bffa05 	stb	r2,-24(fp)
 1000484:	e03ffb15 	stw	zero,-20(fp)
		player.android_id = (char*) malloc(sizeof(char) * 17);
 1000488:	01000444 	movi	r4,17
 100048c:	10059340 	call	1005934 <malloc>
 1000490:	e0bffb15 	stw	r2,-20(fp)
		strcpy(player.android_id, androidID);
 1000494:	e13ffb17 	ldw	r4,-20(fp)
 1000498:	e17fff17 	ldw	r5,-4(fp)
 100049c:	100643c0 	call	100643c <strcpy>
		list[*numberOfPlayers] = player;
 10004a0:	e0bffd17 	ldw	r2,-12(fp)
 10004a4:	10800017 	ldw	r2,0(r2)
 10004a8:	100490fa 	slli	r2,r2,3
 10004ac:	1007883a 	mov	r3,r2
 10004b0:	e0bffc17 	ldw	r2,-16(fp)
 10004b4:	1887883a 	add	r3,r3,r2
 10004b8:	e0bffa17 	ldw	r2,-24(fp)
 10004bc:	18800015 	stw	r2,0(r3)
 10004c0:	e0bffb17 	ldw	r2,-20(fp)
 10004c4:	18800115 	stw	r2,4(r3)
		(*numberOfPlayers)++;
 10004c8:	e0bffd17 	ldw	r2,-12(fp)
 10004cc:	10800017 	ldw	r2,0(r2)
 10004d0:	10c00044 	addi	r3,r2,1
 10004d4:	e0bffd17 	ldw	r2,-12(fp)
 10004d8:	10c00015 	stw	r3,0(r2)
 10004dc:	00000706 	br	10004fc <makeNewPlayer+0xc4>
	} else {
		list[i].client_id = clientID;
 10004e0:	e0bff917 	ldw	r2,-28(fp)
 10004e4:	100490fa 	slli	r2,r2,3
 10004e8:	1007883a 	mov	r3,r2
 10004ec:	e0bffc17 	ldw	r2,-16(fp)
 10004f0:	1887883a 	add	r3,r3,r2
 10004f4:	e0bffe17 	ldw	r2,-8(fp)
 10004f8:	18800005 	stb	r2,0(r3)
	}
}
 10004fc:	e037883a 	mov	sp,fp
 1000500:	dfc00117 	ldw	ra,4(sp)
 1000504:	df000017 	ldw	fp,0(sp)
 1000508:	dec00204 	addi	sp,sp,8
 100050c:	f800283a 	ret

01000510 <isNewPlayer>:

int isNewPlayer(player_t list[], int numberOfPlayers, char* androidID) {
 1000510:	defff904 	addi	sp,sp,-28
 1000514:	dfc00615 	stw	ra,24(sp)
 1000518:	df000515 	stw	fp,20(sp)
 100051c:	df000504 	addi	fp,sp,20
 1000520:	e13ffc15 	stw	r4,-16(fp)
 1000524:	e17ffd15 	stw	r5,-12(fp)
 1000528:	e1bffe15 	stw	r6,-8(fp)
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 100052c:	e03ffb15 	stw	zero,-20(fp)
 1000530:	00001006 	br	1000574 <isNewPlayer+0x64>
		if (strcmp(list[i].android_id, androidID) == 0)
 1000534:	e0bffb17 	ldw	r2,-20(fp)
 1000538:	100490fa 	slli	r2,r2,3
 100053c:	1007883a 	mov	r3,r2
 1000540:	e0bffc17 	ldw	r2,-16(fp)
 1000544:	1885883a 	add	r2,r3,r2
 1000548:	11000117 	ldw	r4,4(r2)
 100054c:	e17ffe17 	ldw	r5,-8(fp)
 1000550:	10063800 	call	1006380 <strcmp>
 1000554:	1004c03a 	cmpne	r2,r2,zero
 1000558:	1000031e 	bne	r2,zero,1000568 <isNewPlayer+0x58>
			return i;
 100055c:	e0bffb17 	ldw	r2,-20(fp)
 1000560:	e0bfff15 	stw	r2,-4(fp)
 1000564:	00000806 	br	1000588 <isNewPlayer+0x78>
	}
}

int isNewPlayer(player_t list[], int numberOfPlayers, char* androidID) {
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 1000568:	e0bffb17 	ldw	r2,-20(fp)
 100056c:	10800044 	addi	r2,r2,1
 1000570:	e0bffb15 	stw	r2,-20(fp)
 1000574:	e0fffb17 	ldw	r3,-20(fp)
 1000578:	e0bffd17 	ldw	r2,-12(fp)
 100057c:	18bfed16 	blt	r3,r2,1000534 <isNewPlayer+0x24>
		if (strcmp(list[i].android_id, androidID) == 0)
			return i;
	}
	return -1;
 1000580:	00bfffc4 	movi	r2,-1
 1000584:	e0bfff15 	stw	r2,-4(fp)
 1000588:	e0bfff17 	ldw	r2,-4(fp)
}
 100058c:	e037883a 	mov	sp,fp
 1000590:	dfc00117 	ldw	ra,4(sp)
 1000594:	df000017 	ldw	fp,0(sp)
 1000598:	dec00204 	addi	sp,sp,8
 100059c:	f800283a 	ret

010005a0 <findChallengeIndex>:

int findChallengeIndex(player_t list[], int numberOfPlayers, char* androidID) {
 10005a0:	defff904 	addi	sp,sp,-28
 10005a4:	dfc00615 	stw	ra,24(sp)
 10005a8:	df000515 	stw	fp,20(sp)
 10005ac:	df000504 	addi	fp,sp,20
 10005b0:	e13ffc15 	stw	r4,-16(fp)
 10005b4:	e17ffd15 	stw	r5,-12(fp)
 10005b8:	e1bffe15 	stw	r6,-8(fp)
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 10005bc:	e03ffb15 	stw	zero,-20(fp)
 10005c0:	00001006 	br	1000604 <findChallengeIndex+0x64>
		if (strcpy(list[i].android_id, androidID) == 0)
 10005c4:	e0bffb17 	ldw	r2,-20(fp)
 10005c8:	100490fa 	slli	r2,r2,3
 10005cc:	1007883a 	mov	r3,r2
 10005d0:	e0bffc17 	ldw	r2,-16(fp)
 10005d4:	1885883a 	add	r2,r3,r2
 10005d8:	11000117 	ldw	r4,4(r2)
 10005dc:	e17ffe17 	ldw	r5,-8(fp)
 10005e0:	100643c0 	call	100643c <strcpy>
 10005e4:	1004c03a 	cmpne	r2,r2,zero
 10005e8:	1000031e 	bne	r2,zero,10005f8 <findChallengeIndex+0x58>
			return i;
 10005ec:	e0bffb17 	ldw	r2,-20(fp)
 10005f0:	e0bfff15 	stw	r2,-4(fp)
 10005f4:	00000806 	br	1000618 <findChallengeIndex+0x78>
	return -1;
}

int findChallengeIndex(player_t list[], int numberOfPlayers, char* androidID) {
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 10005f8:	e0bffb17 	ldw	r2,-20(fp)
 10005fc:	10800044 	addi	r2,r2,1
 1000600:	e0bffb15 	stw	r2,-20(fp)
 1000604:	e0fffb17 	ldw	r3,-20(fp)
 1000608:	e0bffd17 	ldw	r2,-12(fp)
 100060c:	18bfed16 	blt	r3,r2,10005c4 <findChallengeIndex+0x24>
		if (strcpy(list[i].android_id, androidID) == 0)
			return i;
	}
	return -1;
 1000610:	00bfffc4 	movi	r2,-1
 1000614:	e0bfff15 	stw	r2,-4(fp)
 1000618:	e0bfff17 	ldw	r2,-4(fp)
}
 100061c:	e037883a 	mov	sp,fp
 1000620:	dfc00117 	ldw	ra,4(sp)
 1000624:	df000017 	ldw	fp,0(sp)
 1000628:	dec00204 	addi	sp,sp,8
 100062c:	f800283a 	ret

01000630 <usb_register_recv_callback>:
void (*usb_send_cb)(void*) = NULL;
void * usb_send_cb_context;

const int packet_size = 64;

void usb_register_recv_callback(void (*fcn)(void*), void * context) {
 1000630:	defffd04 	addi	sp,sp,-12
 1000634:	df000215 	stw	fp,8(sp)
 1000638:	df000204 	addi	fp,sp,8
 100063c:	e13ffe15 	stw	r4,-8(fp)
 1000640:	e17fff15 	stw	r5,-4(fp)
	usb_recv_cb = fcn;
 1000644:	e0bffe17 	ldw	r2,-8(fp)
 1000648:	d0a7e715 	stw	r2,-24676(gp)
	usb_recv_cb_context = context;
 100064c:	e0bfff17 	ldw	r2,-4(fp)
 1000650:	d0a7f215 	stw	r2,-24632(gp)
}
 1000654:	e037883a 	mov	sp,fp
 1000658:	df000017 	ldw	fp,0(sp)
 100065c:	dec00104 	addi	sp,sp,4
 1000660:	f800283a 	ret

01000664 <usb_register_send_callback>:

void usb_register_send_callback(void (*fcn)(void*), void * context) {
 1000664:	defffd04 	addi	sp,sp,-12
 1000668:	df000215 	stw	fp,8(sp)
 100066c:	df000204 	addi	fp,sp,8
 1000670:	e13ffe15 	stw	r4,-8(fp)
 1000674:	e17fff15 	stw	r5,-4(fp)
	usb_send_cb = fcn;
 1000678:	e0bffe17 	ldw	r2,-8(fp)
 100067c:	d0a7e815 	stw	r2,-24672(gp)
	usb_send_cb_context = context;
 1000680:	e0bfff17 	ldw	r2,-4(fp)
 1000684:	d0a7f115 	stw	r2,-24636(gp)
}
 1000688:	e037883a 	mov	sp,fp
 100068c:	df000017 	ldw	fp,0(sp)
 1000690:	dec00104 	addi	sp,sp,4
 1000694:	f800283a 	ret

01000698 <usb_recv_queue_push>:

void usb_recv_queue_push(unsigned char * data, unsigned int len) {
 1000698:	defff904 	addi	sp,sp,-28
 100069c:	dfc00615 	stw	ra,24(sp)
 10006a0:	df000515 	stw	fp,20(sp)
 10006a4:	df000504 	addi	fp,sp,20
 10006a8:	e13ffe15 	stw	r4,-8(fp)
 10006ac:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10006b0:	0005303a 	rdctl	r2,status
 10006b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10006b8:	e0fffc17 	ldw	r3,-16(fp)
 10006bc:	00bfff84 	movi	r2,-2
 10006c0:	1884703a 	and	r2,r3,r2
 10006c4:	1001703a 	wrctl	status,r2
  
  return context;
 10006c8:	e0bffc17 	ldw	r2,-16(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 10006cc:	e0bffd15 	stw	r2,-12(fp)
	usb_fifo_push(&usb_recv_queue, data, len);
 10006d0:	d127ed04 	addi	r4,gp,-24652
 10006d4:	e17ffe17 	ldw	r5,-8(fp)
 10006d8:	e1bfff17 	ldw	r6,-4(fp)
 10006dc:	100529c0 	call	100529c <usb_fifo_push>
	alt_irq_enable_all(c);
 10006e0:	e0bffd17 	ldw	r2,-12(fp)
 10006e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10006e8:	e0bffb17 	ldw	r2,-20(fp)
 10006ec:	1001703a 	wrctl	status,r2
	if (usb_recv_cb)
 10006f0:	d0a7e717 	ldw	r2,-24676(gp)
 10006f4:	1005003a 	cmpeq	r2,r2,zero
 10006f8:	1000031e 	bne	r2,zero,1000708 <usb_recv_queue_push+0x70>
		usb_recv_cb(usb_recv_cb_context);
 10006fc:	d0a7e717 	ldw	r2,-24676(gp)
 1000700:	d127f217 	ldw	r4,-24632(gp)
 1000704:	103ee83a 	callr	r2
}
 1000708:	e037883a 	mov	sp,fp
 100070c:	dfc00117 	ldw	ra,4(sp)
 1000710:	df000017 	ldw	fp,0(sp)
 1000714:	dec00204 	addi	sp,sp,8
 1000718:	f800283a 	ret

0100071c <usb_send_queue_pop>:

void usb_send_queue_pop(unsigned char ** data, unsigned int * len) {
 100071c:	defff804 	addi	sp,sp,-32
 1000720:	dfc00715 	stw	ra,28(sp)
 1000724:	df000615 	stw	fp,24(sp)
 1000728:	df000604 	addi	fp,sp,24
 100072c:	e13ffe15 	stw	r4,-8(fp)
 1000730:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000734:	0005303a 	rdctl	r2,status
 1000738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100073c:	e0fffb17 	ldw	r3,-20(fp)
 1000740:	00bfff84 	movi	r2,-2
 1000744:	1884703a 	and	r2,r3,r2
 1000748:	1001703a 	wrctl	status,r2
  
  return context;
 100074c:	e0bffb17 	ldw	r2,-20(fp)
	unsigned int c;
	unsigned int offset;

	c = alt_irq_disable_all();
 1000750:	e0bffc15 	stw	r2,-16(fp)
	usb_fifo_pop(&usb_send_queue, data, len, &offset);
 1000754:	e1fffd04 	addi	r7,fp,-12
 1000758:	d127eb04 	addi	r4,gp,-24660
 100075c:	e17ffe17 	ldw	r5,-8(fp)
 1000760:	e1bfff17 	ldw	r6,-4(fp)
 1000764:	10053b80 	call	10053b8 <usb_fifo_pop>
	alt_irq_enable_all(c);
 1000768:	e0bffc17 	ldw	r2,-16(fp)
 100076c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000770:	e0bffa17 	ldw	r2,-24(fp)
 1000774:	1001703a 	wrctl	status,r2

	assert(! offset);
 1000778:	e0bffd17 	ldw	r2,-12(fp)
 100077c:	1005003a 	cmpeq	r2,r2,zero
 1000780:	1000081e 	bne	r2,zero,10007a4 <usb_send_queue_pop+0x88>
 1000784:	01004074 	movhi	r4,257
 1000788:	21126704 	addi	r4,r4,18844
 100078c:	01401104 	movi	r5,68
 1000790:	01804074 	movhi	r6,257
 1000794:	31926204 	addi	r6,r6,18824
 1000798:	01c04074 	movhi	r7,257
 100079c:	39d26a04 	addi	r7,r7,18856
 10007a0:	10057340 	call	1005734 <__assert_func>
}
 10007a4:	e037883a 	mov	sp,fp
 10007a8:	dfc00117 	ldw	ra,4(sp)
 10007ac:	df000017 	ldw	fp,0(sp)
 10007b0:	dec00204 	addi	sp,sp,8
 10007b4:	f800283a 	ret

010007b8 <usb_recv_queue_pop>:

void usb_recv_queue_pop(unsigned char ** data, unsigned int * len) {
 10007b8:	defff804 	addi	sp,sp,-32
 10007bc:	dfc00715 	stw	ra,28(sp)
 10007c0:	df000615 	stw	fp,24(sp)
 10007c4:	df000604 	addi	fp,sp,24
 10007c8:	e13ffe15 	stw	r4,-8(fp)
 10007cc:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10007d0:	0005303a 	rdctl	r2,status
 10007d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10007d8:	e0fffb17 	ldw	r3,-20(fp)
 10007dc:	00bfff84 	movi	r2,-2
 10007e0:	1884703a 	and	r2,r3,r2
 10007e4:	1001703a 	wrctl	status,r2
  
  return context;
 10007e8:	e0bffb17 	ldw	r2,-20(fp)
	unsigned int c;
	unsigned int offset;

	c = alt_irq_disable_all();
 10007ec:	e0bffc15 	stw	r2,-16(fp)
	usb_fifo_pop(&usb_recv_queue, data, len, &offset);
 10007f0:	e1fffd04 	addi	r7,fp,-12
 10007f4:	d127ed04 	addi	r4,gp,-24652
 10007f8:	e17ffe17 	ldw	r5,-8(fp)
 10007fc:	e1bfff17 	ldw	r6,-4(fp)
 1000800:	10053b80 	call	10053b8 <usb_fifo_pop>
	alt_irq_enable_all(c);
 1000804:	e0bffc17 	ldw	r2,-16(fp)
 1000808:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100080c:	e0bffa17 	ldw	r2,-24(fp)
 1000810:	1001703a 	wrctl	status,r2

	assert(! offset);
 1000814:	e0bffd17 	ldw	r2,-12(fp)
 1000818:	1005003a 	cmpeq	r2,r2,zero
 100081c:	1000081e 	bne	r2,zero,1000840 <usb_recv_queue_pop+0x88>
 1000820:	01004074 	movhi	r4,257
 1000824:	21126704 	addi	r4,r4,18844
 1000828:	014013c4 	movi	r5,79
 100082c:	01804074 	movhi	r6,257
 1000830:	31926d04 	addi	r6,r6,18868
 1000834:	01c04074 	movhi	r7,257
 1000838:	39d26a04 	addi	r7,r7,18856
 100083c:	10057340 	call	1005734 <__assert_func>
}
 1000840:	e037883a 	mov	sp,fp
 1000844:	dfc00117 	ldw	ra,4(sp)
 1000848:	df000017 	ldw	fp,0(sp)
 100084c:	dec00204 	addi	sp,sp,8
 1000850:	f800283a 	ret

01000854 <usb_device_send>:

void usb_device_send(unsigned char * buf, unsigned int len) {
 1000854:	defff604 	addi	sp,sp,-40
 1000858:	dfc00915 	stw	ra,36(sp)
 100085c:	df000815 	stw	fp,32(sp)
 1000860:	df000804 	addi	fp,sp,32
 1000864:	e13ffe15 	stw	r4,-8(fp)
 1000868:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100086c:	0005303a 	rdctl	r2,status
 1000870:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000874:	e0fff917 	ldw	r3,-28(fp)
 1000878:	00bfff84 	movi	r2,-2
 100087c:	1884703a 	and	r2,r3,r2
 1000880:	1001703a 	wrctl	status,r2
  
  return context;
 1000884:	e0bff917 	ldw	r2,-28(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 1000888:	e0bffd15 	stw	r2,-12(fp)

	unsigned int remaining = len;
 100088c:	e0bfff17 	ldw	r2,-4(fp)
 1000890:	e0bffc15 	stw	r2,-16(fp)
	while (remaining) {
 1000894:	00002f06 	br	1000954 <usb_device_send+0x100>
		// This packet size
		int size = packet_size;
 1000898:	d0a00017 	ldw	r2,-32768(gp)
 100089c:	e0bffb15 	stw	r2,-20(fp)
		if (remaining < size)
 10008a0:	e0fffb17 	ldw	r3,-20(fp)
 10008a4:	e0bffc17 	ldw	r2,-16(fp)
 10008a8:	10c0022e 	bgeu	r2,r3,10008b4 <usb_device_send+0x60>
			size = remaining;
 10008ac:	e0bffc17 	ldw	r2,-16(fp)
 10008b0:	e0bffb15 	stw	r2,-20(fp)

		unsigned char * new_buf = calloc(sizeof(unsigned char), size);
 10008b4:	e17ffb17 	ldw	r5,-20(fp)
 10008b8:	01000044 	movi	r4,1
 10008bc:	10057ac0 	call	10057ac <calloc>
 10008c0:	e0bffa15 	stw	r2,-24(fp)
		assert(new_buf);
 10008c4:	e0bffa17 	ldw	r2,-24(fp)
 10008c8:	1004c03a 	cmpne	r2,r2,zero
 10008cc:	1000081e 	bne	r2,zero,10008f0 <usb_device_send+0x9c>
 10008d0:	01004074 	movhi	r4,257
 10008d4:	21126704 	addi	r4,r4,18844
 10008d8:	01401784 	movi	r5,94
 10008dc:	01804074 	movhi	r6,257
 10008e0:	31927204 	addi	r6,r6,18888
 10008e4:	01c04074 	movhi	r7,257
 10008e8:	39d27604 	addi	r7,r7,18904
 10008ec:	10057340 	call	1005734 <__assert_func>
		memcpy(new_buf, buf + (len - remaining), size);
 10008f0:	e0ffff17 	ldw	r3,-4(fp)
 10008f4:	e0bffc17 	ldw	r2,-16(fp)
 10008f8:	1885c83a 	sub	r2,r3,r2
 10008fc:	1007883a 	mov	r3,r2
 1000900:	e0bffe17 	ldw	r2,-8(fp)
 1000904:	1887883a 	add	r3,r3,r2
 1000908:	e1bffb17 	ldw	r6,-20(fp)
 100090c:	e0bffa17 	ldw	r2,-24(fp)
 1000910:	1009883a 	mov	r4,r2
 1000914:	180b883a 	mov	r5,r3
 1000918:	10060880 	call	1006088 <memcpy>
		usb_send_queue_push(new_buf, size);
 100091c:	e17ffb17 	ldw	r5,-20(fp)
 1000920:	e13ffa17 	ldw	r4,-24(fp)
 1000924:	1000b0c0 	call	1000b0c <usb_send_queue_push>

		if (remaining == packet_size)
 1000928:	d0a00017 	ldw	r2,-32768(gp)
 100092c:	1007883a 	mov	r3,r2
 1000930:	e0bffc17 	ldw	r2,-16(fp)
 1000934:	1880031e 	bne	r3,r2,1000944 <usb_device_send+0xf0>
			usb_send_queue_push(NULL, 0);
 1000938:	0009883a 	mov	r4,zero
 100093c:	000b883a 	mov	r5,zero
 1000940:	1000b0c0 	call	1000b0c <usb_send_queue_push>

		remaining -= size;
 1000944:	e0bffb17 	ldw	r2,-20(fp)
 1000948:	e0fffc17 	ldw	r3,-16(fp)
 100094c:	1885c83a 	sub	r2,r3,r2
 1000950:	e0bffc15 	stw	r2,-16(fp)
void usb_device_send(unsigned char * buf, unsigned int len) {
	unsigned int c;
	c = alt_irq_disable_all();

	unsigned int remaining = len;
	while (remaining) {
 1000954:	e0bffc17 	ldw	r2,-16(fp)
 1000958:	1004c03a 	cmpne	r2,r2,zero
 100095c:	103fce1e 	bne	r2,zero,1000898 <usb_device_send+0x44>
		if (remaining == packet_size)
			usb_send_queue_push(NULL, 0);

		remaining -= size;
	}
	alt_irq_enable_all(c);
 1000960:	e0bffd17 	ldw	r2,-12(fp)
 1000964:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	1001703a 	wrctl	status,r2
}
 1000970:	e037883a 	mov	sp,fp
 1000974:	dfc00117 	ldw	ra,4(sp)
 1000978:	df000017 	ldw	fp,0(sp)
 100097c:	dec00204 	addi	sp,sp,8
 1000980:	f800283a 	ret

01000984 <usb_device_recv>:

int usb_device_recv(unsigned char * buf, unsigned int len) {
 1000984:	defff304 	addi	sp,sp,-52
 1000988:	dfc00c15 	stw	ra,48(sp)
 100098c:	df000b15 	stw	fp,44(sp)
 1000990:	df000b04 	addi	fp,sp,44
 1000994:	e13ffe15 	stw	r4,-8(fp)
 1000998:	e17fff15 	stw	r5,-4(fp)
	unsigned int remaining = len;
 100099c:	e0bfff17 	ldw	r2,-4(fp)
 10009a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10009a4:	0005303a 	rdctl	r2,status
 10009a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10009ac:	e0fff617 	ldw	r3,-40(fp)
 10009b0:	00bfff84 	movi	r2,-2
 10009b4:	1884703a 	and	r2,r3,r2
 10009b8:	1001703a 	wrctl	status,r2
  
  return context;
 10009bc:	e0bff617 	ldw	r2,-40(fp)

	unsigned int c;
	c = alt_irq_disable_all();
 10009c0:	e0bff915 	stw	r2,-28(fp)
	while (remaining) {
 10009c4:	00004206 	br	1000ad0 <usb_device_recv+0x14c>
		// Get pointer to next packet
		usb_packet * packet = usb_fifo_peek(&usb_recv_queue);
 10009c8:	d127ed04 	addi	r4,gp,-24652
 10009cc:	10054900 	call	1005490 <usb_fifo_peek>
 10009d0:	e0bff815 	stw	r2,-32(fp)

		if (!packet)
 10009d4:	e0bff817 	ldw	r2,-32(fp)
 10009d8:	1005003a 	cmpeq	r2,r2,zero
 10009dc:	10003f1e 	bne	r2,zero,1000adc <usb_device_recv+0x158>
			break;

		unsigned int left_in_packet = packet->len - packet->offset;
 10009e0:	e0bff817 	ldw	r2,-32(fp)
 10009e4:	10c00017 	ldw	r3,0(r2)
 10009e8:	e0bff817 	ldw	r2,-32(fp)
 10009ec:	10800117 	ldw	r2,4(r2)
 10009f0:	1885c83a 	sub	r2,r3,r2
 10009f4:	e0bff715 	stw	r2,-36(fp)

		if (left_in_packet <= remaining) {
 10009f8:	e0fff717 	ldw	r3,-36(fp)
 10009fc:	e0bffa17 	ldw	r2,-24(fp)
 1000a00:	10c01c36 	bltu	r2,r3,1000a74 <usb_device_recv+0xf0>
			// Pop packet
			unsigned char * packet_data;
			unsigned int packet_len;
			unsigned int packet_offset;
			usb_fifo_pop(&usb_recv_queue, &packet_data, &packet_len,
 1000a04:	e17ffb04 	addi	r5,fp,-20
 1000a08:	e1bffc04 	addi	r6,fp,-16
 1000a0c:	e1fffd04 	addi	r7,fp,-12
 1000a10:	d127ed04 	addi	r4,gp,-24652
 1000a14:	10053b80 	call	10053b8 <usb_fifo_pop>
					&packet_offset);
			memcpy(buf + (len - remaining), packet_data + packet_offset,
 1000a18:	e0ffff17 	ldw	r3,-4(fp)
 1000a1c:	e0bffa17 	ldw	r2,-24(fp)
 1000a20:	1885c83a 	sub	r2,r3,r2
 1000a24:	1007883a 	mov	r3,r2
 1000a28:	e0bffe17 	ldw	r2,-8(fp)
 1000a2c:	1889883a 	add	r4,r3,r2
 1000a30:	e0fffb17 	ldw	r3,-20(fp)
 1000a34:	e0bffd17 	ldw	r2,-12(fp)
 1000a38:	188b883a 	add	r5,r3,r2
 1000a3c:	e0fffc17 	ldw	r3,-16(fp)
 1000a40:	e0bffd17 	ldw	r2,-12(fp)
 1000a44:	1885c83a 	sub	r2,r3,r2
 1000a48:	100d883a 	mov	r6,r2
 1000a4c:	10060880 	call	1006088 <memcpy>
					packet_len - packet_offset);
			free(packet_data);
 1000a50:	e13ffb17 	ldw	r4,-20(fp)
 1000a54:	10059200 	call	1005920 <free>
			remaining -= packet_len - packet_offset;
 1000a58:	e0fffc17 	ldw	r3,-16(fp)
 1000a5c:	e0bffd17 	ldw	r2,-12(fp)
 1000a60:	1887c83a 	sub	r3,r3,r2
 1000a64:	e0bffa17 	ldw	r2,-24(fp)
 1000a68:	10c5c83a 	sub	r2,r2,r3
 1000a6c:	e0bffa15 	stw	r2,-24(fp)
 1000a70:	00001706 	br	1000ad0 <usb_device_recv+0x14c>
		} else {
			// Take partial packet
			memcpy(buf + (len - remaining), packet->data + packet->offset,
 1000a74:	e0ffff17 	ldw	r3,-4(fp)
 1000a78:	e0bffa17 	ldw	r2,-24(fp)
 1000a7c:	1885c83a 	sub	r2,r3,r2
 1000a80:	1007883a 	mov	r3,r2
 1000a84:	e0bffe17 	ldw	r2,-8(fp)
 1000a88:	1889883a 	add	r4,r3,r2
 1000a8c:	e0bff817 	ldw	r2,-32(fp)
 1000a90:	10c00217 	ldw	r3,8(r2)
 1000a94:	e0bff817 	ldw	r2,-32(fp)
 1000a98:	10800117 	ldw	r2,4(r2)
 1000a9c:	1885883a 	add	r2,r3,r2
 1000aa0:	100b883a 	mov	r5,r2
 1000aa4:	e1bffa17 	ldw	r6,-24(fp)
 1000aa8:	10060880 	call	1006088 <memcpy>
					remaining);
			packet->offset += remaining;
 1000aac:	e0bff817 	ldw	r2,-32(fp)
 1000ab0:	10800117 	ldw	r2,4(r2)
 1000ab4:	1007883a 	mov	r3,r2
 1000ab8:	e0bffa17 	ldw	r2,-24(fp)
 1000abc:	1885883a 	add	r2,r3,r2
 1000ac0:	1007883a 	mov	r3,r2
 1000ac4:	e0bff817 	ldw	r2,-32(fp)
 1000ac8:	10c00115 	stw	r3,4(r2)
			remaining = 0;
 1000acc:	e03ffa15 	stw	zero,-24(fp)
int usb_device_recv(unsigned char * buf, unsigned int len) {
	unsigned int remaining = len;

	unsigned int c;
	c = alt_irq_disable_all();
	while (remaining) {
 1000ad0:	e0bffa17 	ldw	r2,-24(fp)
 1000ad4:	1004c03a 	cmpne	r2,r2,zero
 1000ad8:	103fbb1e 	bne	r2,zero,10009c8 <usb_device_recv+0x44>
			packet->offset += remaining;
			remaining = 0;
		}
	}

	alt_irq_enable_all(c);
 1000adc:	e0bff917 	ldw	r2,-28(fp)
 1000ae0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000ae4:	e0bff517 	ldw	r2,-44(fp)
 1000ae8:	1001703a 	wrctl	status,r2
	return len - remaining;
 1000aec:	e0ffff17 	ldw	r3,-4(fp)
 1000af0:	e0bffa17 	ldw	r2,-24(fp)
 1000af4:	1885c83a 	sub	r2,r3,r2
}
 1000af8:	e037883a 	mov	sp,fp
 1000afc:	dfc00117 	ldw	ra,4(sp)
 1000b00:	df000017 	ldw	fp,0(sp)
 1000b04:	dec00204 	addi	sp,sp,8
 1000b08:	f800283a 	ret

01000b0c <usb_send_queue_push>:

void usb_send_queue_push(unsigned char * data, unsigned int len) {
 1000b0c:	defff904 	addi	sp,sp,-28
 1000b10:	dfc00615 	stw	ra,24(sp)
 1000b14:	df000515 	stw	fp,20(sp)
 1000b18:	df000504 	addi	fp,sp,20
 1000b1c:	e13ffe15 	stw	r4,-8(fp)
 1000b20:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000b24:	0005303a 	rdctl	r2,status
 1000b28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000b2c:	e0fffc17 	ldw	r3,-16(fp)
 1000b30:	00bfff84 	movi	r2,-2
 1000b34:	1884703a 	and	r2,r3,r2
 1000b38:	1001703a 	wrctl	status,r2
  
  return context;
 1000b3c:	e0bffc17 	ldw	r2,-16(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 1000b40:	e0bffd15 	stw	r2,-12(fp)
	usb_fifo_push(&usb_send_queue, data, len);
 1000b44:	d127eb04 	addi	r4,gp,-24660
 1000b48:	e17ffe17 	ldw	r5,-8(fp)
 1000b4c:	e1bfff17 	ldw	r6,-4(fp)
 1000b50:	100529c0 	call	100529c <usb_fifo_push>
	alt_irq_enable_all(c);
 1000b54:	e0bffd17 	ldw	r2,-12(fp)
 1000b58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000b5c:	e0bffb17 	ldw	r2,-20(fp)
 1000b60:	1001703a 	wrctl	status,r2
	if (usb_send_cb)
 1000b64:	d0a7e817 	ldw	r2,-24672(gp)
 1000b68:	1005003a 	cmpeq	r2,r2,zero
 1000b6c:	1000031e 	bne	r2,zero,1000b7c <usb_send_queue_push+0x70>
		usb_send_cb(usb_send_cb_context);
 1000b70:	d0a7e817 	ldw	r2,-24672(gp)
 1000b74:	d127f117 	ldw	r4,-24636(gp)
 1000b78:	103ee83a 	callr	r2
}
 1000b7c:	e037883a 	mov	sp,fp
 1000b80:	dfc00117 	ldw	ra,4(sp)
 1000b84:	df000017 	ldw	fp,0(sp)
 1000b88:	dec00204 	addi	sp,sp,8
 1000b8c:	f800283a 	ret

01000b90 <usb_send_queue_is_empty>:

int usb_send_queue_is_empty() {
 1000b90:	defffe04 	addi	sp,sp,-8
 1000b94:	dfc00115 	stw	ra,4(sp)
 1000b98:	df000015 	stw	fp,0(sp)
 1000b9c:	d839883a 	mov	fp,sp
	return usb_fifo_is_empty(&usb_send_queue);
 1000ba0:	d127eb04 	addi	r4,gp,-24660
 1000ba4:	10053740 	call	1005374 <usb_fifo_is_empty>
}
 1000ba8:	e037883a 	mov	sp,fp
 1000bac:	dfc00117 	ldw	ra,4(sp)
 1000bb0:	df000017 	ldw	fp,0(sp)
 1000bb4:	dec00204 	addi	sp,sp,8
 1000bb8:	f800283a 	ret

01000bbc <usb_recv_queue_is_empty>:
int usb_recv_queue_is_empty() {
 1000bbc:	defffe04 	addi	sp,sp,-8
 1000bc0:	dfc00115 	stw	ra,4(sp)
 1000bc4:	df000015 	stw	fp,0(sp)
 1000bc8:	d839883a 	mov	fp,sp
	return usb_fifo_is_empty(&usb_recv_queue);
 1000bcc:	d127ed04 	addi	r4,gp,-24652
 1000bd0:	10053740 	call	1005374 <usb_fifo_is_empty>
}
 1000bd4:	e037883a 	mov	sp,fp
 1000bd8:	dfc00117 	ldw	ra,4(sp)
 1000bdc:	df000017 	ldw	fp,0(sp)
 1000be0:	dec00204 	addi	sp,sp,8
 1000be4:	f800283a 	ret

01000be8 <usb_device_init>:

void usb_device_init(alt_up_usb_dev * usb_dev, alt_u32 usb_irq_id) {
 1000be8:	defffc04 	addi	sp,sp,-16
 1000bec:	dfc00315 	stw	ra,12(sp)
 1000bf0:	df000215 	stw	fp,8(sp)
 1000bf4:	df000204 	addi	fp,sp,8
 1000bf8:	e13ffe15 	stw	r4,-8(fp)
 1000bfc:	e17fff15 	stw	r5,-4(fp)
	ISP1362_BASE = usb_dev->base;
 1000c00:	e0bffe17 	ldw	r2,-8(fp)
 1000c04:	10800a17 	ldw	r2,40(r2)
 1000c08:	d0a7e915 	stw	r2,-24668(gp)

	usb_fifo_init(&usb_recv_queue);
 1000c0c:	d127ed04 	addi	r4,gp,-24652
 1000c10:	100526c0 	call	100526c <usb_fifo_init>
	usb_fifo_init(&usb_send_queue);
 1000c14:	d127eb04 	addi	r4,gp,-24660
 1000c18:	100526c0 	call	100526c <usb_fifo_init>

	usb_disable_all_interrupts();
 1000c1c:	10046940 	call	1004694 <usb_disable_all_interrupts>
	disconnect_USB();
 1000c20:	10029640 	call	1002964 <disconnect_USB>
	usleep(1000000);
 1000c24:	010003f4 	movhi	r4,15
 1000c28:	21109004 	addi	r4,r4,16960
 1000c2c:	10117580 	call	1011758 <usleep>
	Hal4D13_ResetDevice();
 1000c30:	100325c0 	call	100325c <Hal4D13_ResetDevice>
	bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1000c34:	d0a7f303 	ldbu	r2,-24628(gp)
 1000c38:	10800054 	ori	r2,r2,1
 1000c3c:	d0a7f305 	stb	r2,-24628(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1000c40:	d0e7f303 	ldbu	r3,-24628(gp)
 1000c44:	00bfff44 	movi	r2,-3
 1000c48:	1884703a 	and	r2,r3,r2
 1000c4c:	d0a7f305 	stb	r2,-24628(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1000c50:	d0e7f303 	ldbu	r3,-24628(gp)
 1000c54:	00bffec4 	movi	r2,-5
 1000c58:	1884703a 	and	r2,r3,r2
 1000c5c:	d0a7f305 	stb	r2,-24628(gp)
	bUSBCheck_Device_State.State_bits.RESET_BITS = 0;
 1000c60:	008040b4 	movhi	r2,258
 1000c64:	10a4d184 	addi	r2,r2,-27834
 1000c68:	10000005 	stb	zero,0(r2)
	usleep(1000000);
 1000c6c:	010003f4 	movhi	r4,15
 1000c70:	21109004 	addi	r4,r4,16960
 1000c74:	10117580 	call	1011758 <usleep>
	reconnect_USB();
 1000c78:	1002ae80 	call	1002ae8 <reconnect_USB>
	CHECK_CHIP_ID();
 1000c7c:	1002bb80 	call	1002bb8 <CHECK_CHIP_ID>
	Hal4D13_AcquireD13(usb_irq_id, (void*) usb_isr);
 1000c80:	e0bfff17 	ldw	r2,-4(fp)
 1000c84:	11003fcc 	andi	r4,r2,255
 1000c88:	01404034 	movhi	r5,256
 1000c8c:	2951d704 	addi	r5,r5,18268
 1000c90:	10032200 	call	1003220 <Hal4D13_AcquireD13>
	usb_reenable_all_interrupts();
 1000c94:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
	bD13flags.bits.verbose = 1;
 1000c98:	d0a7ea17 	ldw	r2,-24664(gp)
 1000c9c:	10804034 	orhi	r2,r2,256
 1000ca0:	d0a7ea15 	stw	r2,-24664(gp)
	usb_register_send_callback(usb_check_send, NULL);
 1000ca4:	01004034 	movhi	r4,256
 1000ca8:	2113c704 	addi	r4,r4,20252
 1000cac:	000b883a 	mov	r5,zero
 1000cb0:	10006640 	call	1000664 <usb_register_send_callback>
	usb_initialized = 1;
 1000cb4:	00800044 	movi	r2,1
 1000cb8:	d0a7e615 	stw	r2,-24680(gp)
}
 1000cbc:	e037883a 	mov	sp,fp
 1000cc0:	dfc00117 	ldw	ra,4(sp)
 1000cc4:	df000017 	ldw	fp,0(sp)
 1000cc8:	dec00204 	addi	sp,sp,8
 1000ccc:	f800283a 	ret

01000cd0 <usb_device_poll>:

void usb_device_poll() {
 1000cd0:	defffe04 	addi	sp,sp,-8
 1000cd4:	dfc00115 	stw	ra,4(sp)
 1000cd8:	df000015 	stw	fp,0(sp)
 1000cdc:	d839883a 	mov	fp,sp
	if (!usb_initialized) {
 1000ce0:	d0a7e617 	ldw	r2,-24680(gp)
 1000ce4:	1004c03a 	cmpne	r2,r2,zero
 1000ce8:	1000051e 	bne	r2,zero,1000d00 <usb_device_poll+0x30>
		printf("You called usb_device_poll before calling usb_device_init().  Exiting program.\n");
 1000cec:	01004074 	movhi	r4,257
 1000cf0:	21127804 	addi	r4,r4,18912
 1000cf4:	10062fc0 	call	10062fc <puts>
		exit(-1);
 1000cf8:	013fffc4 	movi	r4,-1
 1000cfc:	100587c0 	call	100587c <exit>
	}
	if (bUSBCheck_Device_State.State_bits.RESET_BITS == 1) {
 1000d00:	008040b4 	movhi	r2,258
 1000d04:	10a4d184 	addi	r2,r2,-27834
 1000d08:	10800003 	ldbu	r2,0(r2)
 1000d0c:	10803fcc 	andi	r2,r2,255
 1000d10:	10800058 	cmpnei	r2,r2,1
 1000d14:	1000021e 	bne	r2,zero,1000d20 <usb_device_poll+0x50>
		usb_disable_all_interrupts();
 1000d18:	10046940 	call	1004694 <usb_disable_all_interrupts>
		return;
 1000d1c:	00002306 	br	1000dac <usb_device_poll+0xdc>
	}
	if (bD13flags.bits.suspend) {
 1000d20:	d0a7ea17 	ldw	r2,-24664(gp)
 1000d24:	1080008c 	andi	r2,r2,2
 1000d28:	1005003a 	cmpeq	r2,r2,zero
 1000d2c:	1000071e 	bne	r2,zero,1000d4c <usb_device_poll+0x7c>
		usb_disable_all_interrupts();
 1000d30:	10046940 	call	1004694 <usb_disable_all_interrupts>
		bD13flags.bits.suspend = 0;
 1000d34:	d0a7ea17 	ldw	r2,-24664(gp)
 1000d38:	00ffff44 	movi	r3,-3
 1000d3c:	10c4703a 	and	r2,r2,r3
 1000d40:	d0a7ea15 	stw	r2,-24664(gp)
		usb_reenable_all_interrupts();
 1000d44:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
		suspend_change();
 1000d48:	1002b140 	call	1002b14 <suspend_change>
	} // Suspend Change Handler
	if (bD13flags.bits.DCP_state == USBFSM4DCP_SETUPPROC) {
 1000d4c:	d0a7ea17 	ldw	r2,-24664(gp)
 1000d50:	1083c00c 	andi	r2,r2,3840
 1000d54:	10814018 	cmpnei	r2,r2,1280
 1000d58:	1000031e 	bne	r2,zero,1000d68 <usb_device_poll+0x98>
		usb_disable_all_interrupts();
 1000d5c:	10046940 	call	1004694 <usb_disable_all_interrupts>
		SetupToken_Handler();
 1000d60:	10025040 	call	1002504 <SetupToken_Handler>
		usb_reenable_all_interrupts();
 1000d64:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
	} // Setup Token Handler
	if ((bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC)
 1000d68:	d0a7ea17 	ldw	r2,-24664(gp)
 1000d6c:	1083c00c 	andi	r2,r2,3840
 1000d70:	1080c018 	cmpnei	r2,r2,768
 1000d74:	10000d1e 	bne	r2,zero,1000dac <usb_device_poll+0xdc>
 1000d78:	008040b4 	movhi	r2,258
 1000d7c:	10a4ef04 	addi	r2,r2,-27716
 1000d80:	10800003 	ldbu	r2,0(r2)
 1000d84:	10803fcc 	andi	r2,r2,255
 1000d88:	1004c03a 	cmpne	r2,r2,zero
 1000d8c:	1000071e 	bne	r2,zero,1000dac <usb_device_poll+0xdc>
			&& !ControlData.Abort) {
		usb_disable_all_interrupts();
 1000d90:	10046940 	call	1004694 <usb_disable_all_interrupts>
		bD13flags.bits.DCP_state = 0x00;
 1000d94:	d0a7ea17 	ldw	r2,-24664(gp)
 1000d98:	00fc3fc4 	movi	r3,-3841
 1000d9c:	10c4703a 	and	r2,r2,r3
 1000da0:	d0a7ea15 	stw	r2,-24664(gp)
		DeviceRequest_Handler();
 1000da4:	10027780 	call	1002778 <DeviceRequest_Handler>
		usb_reenable_all_interrupts();
 1000da8:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
	} // Device Request Handler
}
 1000dac:	e037883a 	mov	sp,fp
 1000db0:	dfc00117 	ldw	ra,4(sp)
 1000db4:	df000017 	ldw	fp,0(sp)
 1000db8:	dec00204 	addi	sp,sp,8
 1000dbc:	f800283a 	ret

01000dc0 <EnableIsoMode>:
unsigned short IsoInPattern=0xF8;
unsigned short IsoInPktLen=0;
unsigned short IsoInDataBuff[ISO_FIFOSIZE_512];

void EnableIsoMode()
{
 1000dc0:	defffe04 	addi	sp,sp,-8
 1000dc4:	dfc00115 	stw	ra,4(sp)
 1000dc8:	df000015 	stw	fp,0(sp)
 1000dcc:	d839883a 	mov	fp,sp
    IsoMode = 0;
 1000dd0:	d027f405 	stb	zero,-24624(gp)
    if( ControlData.DeviceRequest.wLength == 0)
 1000dd4:	008040b4 	movhi	r2,258
 1000dd8:	10a4ef04 	addi	r2,r2,-27716
 1000ddc:	1080020b 	ldhu	r2,8(r2)
 1000de0:	10bfffcc 	andi	r2,r2,65535
 1000de4:	1004c03a 	cmpne	r2,r2,zero
 1000de8:	1000691e 	bne	r2,zero,1000f90 <EnableIsoMode+0x1d0>
    {
        IsoMode &= ~ControlData.DeviceRequest.wIndex;
 1000dec:	008040b4 	movhi	r2,258
 1000df0:	10a4ef04 	addi	r2,r2,-27716
 1000df4:	1080018b 	ldhu	r2,6(r2)
 1000df8:	0084303a 	nor	r2,zero,r2
 1000dfc:	1007883a 	mov	r3,r2
 1000e00:	d0a7f403 	ldbu	r2,-24624(gp)
 1000e04:	1884703a 	and	r2,r3,r2
 1000e08:	d0a7f405 	stb	r2,-24624(gp)
        IsoMode |= ControlData.DeviceRequest.wValue;
 1000e0c:	008040b4 	movhi	r2,258
 1000e10:	10a4ef04 	addi	r2,r2,-27716
 1000e14:	1080010b 	ldhu	r2,4(r2)
 1000e18:	1007883a 	mov	r3,r2
 1000e1c:	d0a7f403 	ldbu	r2,-24624(gp)
 1000e20:	1884b03a 	or	r2,r3,r2
 1000e24:	d0a7f405 	stb	r2,-24624(gp)

        printf("IsoMode %x\n",IsoMode );
 1000e28:	d0a7f403 	ldbu	r2,-24624(gp)
 1000e2c:	11403fcc 	andi	r5,r2,255
 1000e30:	01004074 	movhi	r4,257
 1000e34:	21128c04 	addi	r4,r4,18992
 1000e38:	10061c00 	call	10061c0 <printf>

        if(IsoMode&ISO_LOOP)
 1000e3c:	d0a7f403 	ldbu	r2,-24624(gp)
 1000e40:	10803fcc 	andi	r2,r2,255
 1000e44:	1080010c 	andi	r2,r2,4
 1000e48:	1005003a 	cmpeq	r2,r2,zero
 1000e4c:	1000121e 	bne	r2,zero,1000e98 <EnableIsoMode+0xd8>
        {

           RaiseIRQL();
 1000e50:	10046940 	call	1004694 <usb_disable_all_interrupts>
           bD13flags.bits.ISO_state = ISO_LOOP;
 1000e54:	010040b4 	movhi	r4,258
 1000e58:	2124c804 	addi	r4,r4,-27872
 1000e5c:	20c00017 	ldw	r3,0(r4)
 1000e60:	00bffff4 	movhi	r2,65535
 1000e64:	1087ffc4 	addi	r2,r2,8191
 1000e68:	1884703a 	and	r2,r3,r2
 1000e6c:	10a00014 	ori	r2,r2,32768
 1000e70:	20800015 	stw	r2,0(r4)
           LowerIRQL();
 1000e74:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

           IsoDisable =0;
 1000e78:	d0200105 	stb	zero,-32764(gp)
           IsoInPattern = 0;
 1000e7c:	d020020d 	sth	zero,-32760(gp)
           IsoInPktLen = ISO_FIFOSIZE_512;
 1000e80:	00808004 	movi	r2,512
 1000e84:	d0a7f50d 	sth	r2,-24620(gp)
           IsoOutPattern = 0;
 1000e88:	d020018d 	sth	zero,-32762(gp)
           IsoOutPktLen = ISO_FIFOSIZE_512;
 1000e8c:	00808004 	movi	r2,512
 1000e90:	d0a7f48d 	sth	r2,-24622(gp)
 1000e94:	00003a06 	br	1000f80 <EnableIsoMode+0x1c0>

        }
        else
        {

             if(IsoMode&ISO_OUT)
 1000e98:	d0a7f403 	ldbu	r2,-24624(gp)
 1000e9c:	10803fcc 	andi	r2,r2,255
 1000ea0:	1080008c 	andi	r2,r2,2
 1000ea4:	1005003a 	cmpeq	r2,r2,zero
 1000ea8:	1000151e 	bne	r2,zero,1000f00 <EnableIsoMode+0x140>
             {

               RaiseIRQL();
 1000eac:	10046940 	call	1004694 <usb_disable_all_interrupts>
               bD13flags.bits.ISO_state = ISO_OUT;
 1000eb0:	010040b4 	movhi	r4,258
 1000eb4:	2124c804 	addi	r4,r4,-27872
 1000eb8:	20c00017 	ldw	r3,0(r4)
 1000ebc:	00bffff4 	movhi	r2,65535
 1000ec0:	1087ffc4 	addi	r2,r2,8191
 1000ec4:	1884703a 	and	r2,r3,r2
 1000ec8:	10900014 	ori	r2,r2,16384
 1000ecc:	20800015 	stw	r2,0(r4)
               LowerIRQL();
 1000ed0:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

               IsoDisable =0;
 1000ed4:	d0200105 	stb	zero,-32764(gp)
               IsoOutPattern = 0;
 1000ed8:	d020018d 	sth	zero,-32762(gp)
               IsoOutPktLen = ISO_FIFOSIZE_512;
 1000edc:	00808004 	movi	r2,512
 1000ee0:	d0a7f48d 	sth	r2,-24622(gp)
               printf("Iso-Out Pattern %x, PktLen %u bytes\n",IsoInPattern,IsoOutPktLen);
 1000ee4:	d0a0020b 	ldhu	r2,-32760(gp)
 1000ee8:	117fffcc 	andi	r5,r2,65535
 1000eec:	d0a7f48b 	ldhu	r2,-24622(gp)
 1000ef0:	11bfffcc 	andi	r6,r2,65535
 1000ef4:	01004074 	movhi	r4,257
 1000ef8:	21128f04 	addi	r4,r4,19004
 1000efc:	10061c00 	call	10061c0 <printf>

             }
             if(IsoMode&ISO_IN)
 1000f00:	d0a7f403 	ldbu	r2,-24624(gp)
 1000f04:	10803fcc 	andi	r2,r2,255
 1000f08:	1080004c 	andi	r2,r2,1
 1000f0c:	10803fcc 	andi	r2,r2,255
 1000f10:	1005003a 	cmpeq	r2,r2,zero
 1000f14:	10001a1e 	bne	r2,zero,1000f80 <EnableIsoMode+0x1c0>
             {
                bD13flags.bits.ISO_state = ISO_IN;
 1000f18:	010040b4 	movhi	r4,258
 1000f1c:	2124c804 	addi	r4,r4,-27872
 1000f20:	20c00017 	ldw	r3,0(r4)
 1000f24:	00bffff4 	movhi	r2,65535
 1000f28:	1087ffc4 	addi	r2,r2,8191
 1000f2c:	1884703a 	and	r2,r3,r2
 1000f30:	10880014 	ori	r2,r2,8192
 1000f34:	20800015 	stw	r2,0(r4)

               IsoDisable =0;
 1000f38:	d0200105 	stb	zero,-32764(gp)
               IsoInPattern = 0;
 1000f3c:	d020020d 	sth	zero,-32760(gp)
               IsoInPktLen = ISO_FIFOSIZE_512;
 1000f40:	00808004 	movi	r2,512
 1000f44:	d0a7f50d 	sth	r2,-24620(gp)

                IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+EPINDEX4EP06);
 1000f48:	008040b4 	movhi	r2,258
 1000f4c:	10a4c704 	addi	r2,r2,-27876
 1000f50:	10800017 	ldw	r2,0(r2)
 1000f54:	10800304 	addi	r2,r2,12
 1000f58:	1007883a 	mov	r3,r2
 1000f5c:	008019c4 	movi	r2,103
 1000f60:	18800035 	stwio	r2,0(r3)
                printf("Iso-IN  Pattern %x, PktLen %u bytes\n",IsoInPattern,IsoInPktLen);
 1000f64:	d0a0020b 	ldhu	r2,-32760(gp)
 1000f68:	117fffcc 	andi	r5,r2,65535
 1000f6c:	d0a7f50b 	ldhu	r2,-24620(gp)
 1000f70:	11bfffcc 	andi	r6,r2,65535
 1000f74:	01004074 	movhi	r4,257
 1000f78:	21129904 	addi	r4,r4,19044
 1000f7c:	10061c00 	call	10061c0 <printf>
             }

        }

        Chap9_SingleTransmitEP0(0, 0);
 1000f80:	0009883a 	mov	r4,zero
 1000f84:	000b883a 	mov	r5,zero
 1000f88:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1000f8c:	00000106 	br	1000f94 <EnableIsoMode+0x1d4>
    }
    else
    {
        Chap9_StallEP0();
 1000f90:	10021940 	call	1002194 <Chap9_StallEP0>
    }
}
 1000f94:	e037883a 	mov	sp,fp
 1000f98:	dfc00117 	ldw	ra,4(sp)
 1000f9c:	df000017 	ldw	fp,0(sp)
 1000fa0:	dec00204 	addi	sp,sp,8
 1000fa4:	f800283a 	ret

01000fa8 <Wait4Ns>:


void Wait4Ns( unsigned long timeNs)
{
 1000fa8:	defffd04 	addi	sp,sp,-12
 1000fac:	dfc00215 	stw	ra,8(sp)
 1000fb0:	df000115 	stw	fp,4(sp)
 1000fb4:	df000104 	addi	fp,sp,4
 1000fb8:	e13fff15 	stw	r4,-4(fp)
    usleep(timeNs);
 1000fbc:	e13fff17 	ldw	r4,-4(fp)
 1000fc0:	10117580 	call	1011758 <usleep>
}
 1000fc4:	e037883a 	mov	sp,fp
 1000fc8:	dfc00117 	ldw	ra,4(sp)
 1000fcc:	df000017 	ldw	fp,0(sp)
 1000fd0:	dec00204 	addi	sp,sp,8
 1000fd4:	f800283a 	ret

01000fd8 <ISOLOOP>:

USHORT ISOLOOP(UCHAR bOUTEPIndex, UCHAR bINEPIndex, USHORT len)
{
 1000fd8:	defefa04 	addi	sp,sp,-1048
 1000fdc:	dfc10515 	stw	ra,1044(sp)
 1000fe0:	df010415 	stw	fp,1040(sp)
 1000fe4:	df010404 	addi	fp,sp,1040
 1000fe8:	e13ffd05 	stb	r4,-12(fp)
 1000fec:	e17ffe05 	stb	r5,-8(fp)
 1000ff0:	e1bfff0d 	sth	r6,-4(fp)
    USHORT  ISOBuffer[512];
    UCHAR   ep_last;
    USHORT  j=0;
 1000ff4:	e03efc0d 	sth	zero,-1040(fp)

    ep_last = (UCHAR)Hal4D13_GetEndpointStatusWInteruptClear(bOUTEPIndex);
 1000ff8:	e13ffd03 	ldbu	r4,-12(fp)
 1000ffc:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1001000:	e0befc85 	stb	r2,-1038(fp)
    if(ep_last & 0x60)
 1001004:	e0befc83 	ldbu	r2,-1038(fp)
 1001008:	1080180c 	andi	r2,r2,96
 100100c:	1005003a 	cmpeq	r2,r2,zero
 1001010:	1000091e 	bne	r2,zero,1001038 <ISOLOOP+0x60>
    {
        j = Hal4D13_ReadISOEndpoint(bOUTEPIndex, ISOBuffer, len);
 1001014:	e13ffd03 	ldbu	r4,-12(fp)
 1001018:	e1bfff0b 	ldhu	r6,-4(fp)
 100101c:	e17efd04 	addi	r5,fp,-1036
 1001020:	10010500 	call	1001050 <Hal4D13_ReadISOEndpoint>
 1001024:	e0befc0d 	sth	r2,-1040(fp)
        Hal4D13_WriteISOEndpoint(bINEPIndex, ISOBuffer, j);
 1001028:	e13ffe03 	ldbu	r4,-8(fp)
 100102c:	e1befc0b 	ldhu	r6,-1040(fp)
 1001030:	e17efd04 	addi	r5,fp,-1036
 1001034:	10011340 	call	1001134 <Hal4D13_WriteISOEndpoint>
    }

    return j;
 1001038:	e0befc0b 	ldhu	r2,-1040(fp)
}
 100103c:	e037883a 	mov	sp,fp
 1001040:	dfc00117 	ldw	ra,4(sp)
 1001044:	df000017 	ldw	fp,0(sp)
 1001048:	dec00204 	addi	sp,sp,8
 100104c:	f800283a 	ret

01001050 <Hal4D13_ReadISOEndpoint>:

USHORT Hal4D13_ReadISOEndpoint(UCHAR bEPIndex, USHORT ISOBuffer[512], USHORT len)
{
 1001050:	defffb04 	addi	sp,sp,-20
 1001054:	df000415 	stw	fp,16(sp)
 1001058:	df000404 	addi	fp,sp,16
 100105c:	e17ffe15 	stw	r5,-8(fp)
 1001060:	e13ffd05 	stb	r4,-12(fp)
 1001064:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, j;

    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1001068:	008040b4 	movhi	r2,258
 100106c:	10a4c704 	addi	r2,r2,-27876
 1001070:	10800017 	ldw	r2,0(r2)
 1001074:	11000304 	addi	r4,r2,12
 1001078:	e0bffd03 	ldbu	r2,-12(fp)
 100107c:	10c00404 	addi	r3,r2,16
 1001080:	2005883a 	mov	r2,r4
 1001084:	10c00035 	stwio	r3,0(r2)

    j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1001088:	008040b4 	movhi	r2,258
 100108c:	10a4c704 	addi	r2,r2,-27876
 1001090:	10800017 	ldw	r2,0(r2)
 1001094:	10800204 	addi	r2,r2,8
 1001098:	10800037 	ldwio	r2,0(r2)
 100109c:	e0bffc0d 	sth	r2,-16(fp)

    if(j != len)
 10010a0:	e0fffc0b 	ldhu	r3,-16(fp)
 10010a4:	e0bfff0b 	ldhu	r2,-4(fp)
 10010a8:	18800226 	beq	r3,r2,10010b4 <Hal4D13_ReadISOEndpoint+0x64>
        j = len;
 10010ac:	e0bfff0b 	ldhu	r2,-4(fp)
 10010b0:	e0bffc0d 	sth	r2,-16(fp)

    for(i=0; i<j; i++)
 10010b4:	e03ffc8d 	sth	zero,-14(fp)
 10010b8:	00000e06 	br	10010f4 <Hal4D13_ReadISOEndpoint+0xa4>
    {
        ISOBuffer[i] = IORD(ISP1362_BASE,D13_DATA_PORT);
 10010bc:	e0bffc8b 	ldhu	r2,-14(fp)
 10010c0:	1085883a 	add	r2,r2,r2
 10010c4:	1007883a 	mov	r3,r2
 10010c8:	e0bffe17 	ldw	r2,-8(fp)
 10010cc:	1887883a 	add	r3,r3,r2
 10010d0:	008040b4 	movhi	r2,258
 10010d4:	10a4c704 	addi	r2,r2,-27876
 10010d8:	10800017 	ldw	r2,0(r2)
 10010dc:	10800204 	addi	r2,r2,8
 10010e0:	10800037 	ldwio	r2,0(r2)
 10010e4:	1880000d 	sth	r2,0(r3)
    j = IORD(ISP1362_BASE,D13_DATA_PORT);

    if(j != len)
        j = len;

    for(i=0; i<j; i++)
 10010e8:	e0bffc8b 	ldhu	r2,-14(fp)
 10010ec:	10800044 	addi	r2,r2,1
 10010f0:	e0bffc8d 	sth	r2,-14(fp)
 10010f4:	e0fffc8b 	ldhu	r3,-14(fp)
 10010f8:	e0bffc0b 	ldhu	r2,-16(fp)
 10010fc:	18bfef36 	bltu	r3,r2,10010bc <Hal4D13_ReadISOEndpoint+0x6c>
        ISOBuffer[i] = IORD(ISP1362_BASE,D13_DATA_PORT);

    }

    /* Clear Buffer */
    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 1001100:	008040b4 	movhi	r2,258
 1001104:	10a4c704 	addi	r2,r2,-27876
 1001108:	10800017 	ldw	r2,0(r2)
 100110c:	11000304 	addi	r4,r2,12
 1001110:	e0bffd03 	ldbu	r2,-12(fp)
 1001114:	10c01c04 	addi	r3,r2,112
 1001118:	2005883a 	mov	r2,r4
 100111c:	10c00035 	stwio	r3,0(r2)

    return j;
 1001120:	e0bffc0b 	ldhu	r2,-16(fp)
}
 1001124:	e037883a 	mov	sp,fp
 1001128:	df000017 	ldw	fp,0(sp)
 100112c:	dec00104 	addi	sp,sp,4
 1001130:	f800283a 	ret

01001134 <Hal4D13_WriteISOEndpoint>:

USHORT Hal4D13_WriteISOEndpoint(UCHAR bEPIndex, USHORT ISOBuffer[512], USHORT len)
{
 1001134:	defffa04 	addi	sp,sp,-24
 1001138:	dfc00515 	stw	ra,20(sp)
 100113c:	df000415 	stw	fp,16(sp)
 1001140:	df000404 	addi	fp,sp,16
 1001144:	e17ffe15 	stw	r5,-8(fp)
 1001148:	e13ffd05 	stb	r4,-12(fp)
 100114c:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i;

    if(bD13flags.bits.At_IRQL1 == 0)
 1001150:	008040b4 	movhi	r2,258
 1001154:	10a4c804 	addi	r2,r2,-27872
 1001158:	10800017 	ldw	r2,0(r2)
 100115c:	1080010c 	andi	r2,r2,4
 1001160:	1004c03a 	cmpne	r2,r2,zero
 1001164:	1000011e 	bne	r2,zero,100116c <Hal4D13_WriteISOEndpoint+0x38>
        RaiseIRQL();
 1001168:	10046940 	call	1004694 <usb_disable_all_interrupts>

    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 100116c:	008040b4 	movhi	r2,258
 1001170:	10a4c704 	addi	r2,r2,-27876
 1001174:	10800017 	ldw	r2,0(r2)
 1001178:	10800304 	addi	r2,r2,12
 100117c:	e0fffd03 	ldbu	r3,-12(fp)
 1001180:	10c00035 	stwio	r3,0(r2)

    IOWR(ISP1362_BASE,D13_DATA_PORT, 512);
 1001184:	008040b4 	movhi	r2,258
 1001188:	10a4c704 	addi	r2,r2,-27876
 100118c:	10800017 	ldw	r2,0(r2)
 1001190:	10800204 	addi	r2,r2,8
 1001194:	1007883a 	mov	r3,r2
 1001198:	00808004 	movi	r2,512
 100119c:	18800035 	stwio	r2,0(r3)

    /* Write Buffer */

    for(i=0; i<len; i++)
 10011a0:	e03ffc0d 	sth	zero,-16(fp)
 10011a4:	00001006 	br	10011e8 <Hal4D13_WriteISOEndpoint+0xb4>
    {
        IOWR(ISP1362_BASE,D13_DATA_PORT, ISOBuffer[i]);
 10011a8:	008040b4 	movhi	r2,258
 10011ac:	10a4c704 	addi	r2,r2,-27876
 10011b0:	10800017 	ldw	r2,0(r2)
 10011b4:	11000204 	addi	r4,r2,8
 10011b8:	e0bffc0b 	ldhu	r2,-16(fp)
 10011bc:	1085883a 	add	r2,r2,r2
 10011c0:	1007883a 	mov	r3,r2
 10011c4:	e0bffe17 	ldw	r2,-8(fp)
 10011c8:	1885883a 	add	r2,r3,r2
 10011cc:	1080000b 	ldhu	r2,0(r2)
 10011d0:	10ffffcc 	andi	r3,r2,65535
 10011d4:	2005883a 	mov	r2,r4
 10011d8:	10c00035 	stwio	r3,0(r2)

    IOWR(ISP1362_BASE,D13_DATA_PORT, 512);

    /* Write Buffer */

    for(i=0; i<len; i++)
 10011dc:	e0bffc0b 	ldhu	r2,-16(fp)
 10011e0:	10800044 	addi	r2,r2,1
 10011e4:	e0bffc0d 	sth	r2,-16(fp)
 10011e8:	e0fffc0b 	ldhu	r3,-16(fp)
 10011ec:	e0bfff0b 	ldhu	r2,-4(fp)
 10011f0:	18bfed36 	bltu	r3,r2,10011a8 <Hal4D13_WriteISOEndpoint+0x74>
        IOWR(ISP1362_BASE,D13_DATA_PORT, ISOBuffer[i]);
    }



    if(bD13flags.bits.At_IRQL1 == 0)
 10011f4:	008040b4 	movhi	r2,258
 10011f8:	10a4c804 	addi	r2,r2,-27872
 10011fc:	10800017 	ldw	r2,0(r2)
 1001200:	1080010c 	andi	r2,r2,4
 1001204:	1004c03a 	cmpne	r2,r2,zero
 1001208:	1000011e 	bne	r2,zero,1001210 <Hal4D13_WriteISOEndpoint+0xdc>
        LowerIRQL();
 100120c:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

    return i;
 1001210:	e0bffc0b 	ldhu	r2,-16(fp)
}
 1001214:	e037883a 	mov	sp,fp
 1001218:	dfc00117 	ldw	ra,4(sp)
 100121c:	df000017 	ldw	fp,0(sp)
 1001220:	dec00204 	addi	sp,sp,8
 1001224:	f800283a 	ret

01001228 <Chap9_GetStatus>:
// *************************************************************************
// USB standard device requests
// *************************************************************************

void Chap9_GetStatus(void)
{
 1001228:	defffa04 	addi	sp,sp,-24
 100122c:	dfc00515 	stw	ra,20(sp)
 1001230:	df000415 	stw	fp,16(sp)
 1001234:	df000404 	addi	fp,sp,16
    UCHAR   endp, txdat[2];
    UCHAR   c;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 1001238:	008040b4 	movhi	r2,258
 100123c:	10a4ef04 	addi	r2,r2,-27716
 1001240:	10800083 	ldbu	r2,2(r2)
 1001244:	108007cc 	andi	r2,r2,31
 1001248:	e0bffc05 	stb	r2,-16(fp)


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 100124c:	008040b4 	movhi	r2,258
 1001250:	10a4d104 	addi	r2,r2,-27836
 1001254:	10800003 	ldbu	r2,0(r2)
 1001258:	1080008c 	andi	r2,r2,2
 100125c:	10803fcc 	andi	r2,r2,255
 1001260:	1005003a 	cmpeq	r2,r2,zero
 1001264:	10003e1e 	bne	r2,zero,1001360 <Chap9_GetStatus+0x138>
    {
    switch(bRecipient)
 1001268:	e0bffc03 	ldbu	r2,-16(fp)
 100126c:	e0bfff15 	stw	r2,-4(fp)
 1001270:	e0ffff17 	ldw	r3,-4(fp)
 1001274:	18800060 	cmpeqi	r2,r3,1
 1001278:	1000171e 	bne	r2,zero,10012d8 <Chap9_GetStatus+0xb0>
 100127c:	e0ffff17 	ldw	r3,-4(fp)
 1001280:	188000a0 	cmpeqi	r2,r3,2
 1001284:	1000161e 	bne	r2,zero,10012e0 <Chap9_GetStatus+0xb8>
 1001288:	e0ffff17 	ldw	r3,-4(fp)
 100128c:	1805003a 	cmpeq	r2,r3,zero
 1001290:	1000011e 	bne	r2,zero,1001298 <Chap9_GetStatus+0x70>
 1001294:	00003006 	br	1001358 <Chap9_GetStatus+0x130>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
 1001298:	008040b4 	movhi	r2,258
 100129c:	10a4c804 	addi	r2,r2,-27872
 10012a0:	10800017 	ldw	r2,0(r2)
 10012a4:	1080040c 	andi	r2,r2,16
 10012a8:	1005003a 	cmpeq	r2,r2,zero
 10012ac:	1000031e 	bne	r2,zero,10012bc <Chap9_GetStatus+0x94>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
 10012b0:	008000c4 	movi	r2,3
 10012b4:	e0bffcc5 	stb	r2,-13(fp)
 10012b8:	00000206 	br	10012c4 <Chap9_GetStatus+0x9c>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
 10012bc:	00800044 	movi	r2,1
 10012c0:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
 10012c4:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 10012c8:	e13ffcc4 	addi	r4,fp,-13
 10012cc:	01400084 	movi	r5,2
 10012d0:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
                    break;
 10012d4:	00007306 	br	10014a4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:

                    Chap9_StallEP0InControlRead();
 10012d8:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
                    break;
 10012dc:	00007106 	br	10014a4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 10012e0:	008040b4 	movhi	r2,258
 10012e4:	10a4ef04 	addi	r2,r2,-27716
 10012e8:	1080018b 	ldhu	r2,6(r2)
 10012ec:	10bfffcc 	andi	r2,r2,65535
 10012f0:	1004c03a 	cmpne	r2,r2,zero
 10012f4:	1000161e 	bne	r2,zero,1001350 <Chap9_GetStatus+0x128>
                    {
                        endp = -1;
 10012f8:	00bfffc4 	movi	r2,-1
 10012fc:	e0bffc85 	stb	r2,-14(fp)
                        c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
 1001300:	e0bffc83 	ldbu	r2,-14(fp)
 1001304:	10800044 	addi	r2,r2,1
 1001308:	11003fcc 	andi	r4,r2,255
 100130c:	1003e300 	call	1003e30 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1001310:	e0bffc45 	stb	r2,-15(fp)
                        if(c & D13REG_EPSTS_STALL)
 1001314:	e0bffc43 	ldbu	r2,-15(fp)
 1001318:	10803fcc 	andi	r2,r2,255
 100131c:	1080201c 	xori	r2,r2,128
 1001320:	10bfe004 	addi	r2,r2,-128
 1001324:	1004403a 	cmpge	r2,r2,zero
 1001328:	1000031e 	bne	r2,zero,1001338 <Chap9_GetStatus+0x110>
                            txdat[0] = ENDPSTS_HALT;   /* Halt */
 100132c:	00800044 	movi	r2,1
 1001330:	e0bffcc5 	stb	r2,-13(fp)
 1001334:	00000106 	br	100133c <Chap9_GetStatus+0x114>
                        else
                            txdat[0] = 0;
 1001338:	e03ffcc5 	stb	zero,-13(fp)

                        txdat[1] = 0;
 100133c:	e03ffd05 	stb	zero,-12(fp)

                        Chap9_SingleTransmitEP0(txdat, 2);
 1001340:	e13ffcc4 	addi	r4,fp,-13
 1001344:	01400084 	movi	r5,2
 1001348:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 100134c:	00005506 	br	10014a4 <Chap9_GetStatus+0x27c>
                    }
                    else
                        Chap9_StallEP0InControlRead();
 1001350:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>

                    break;
 1001354:	00005306 	br	10014a4 <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
 1001358:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
 100135c:	00005106 	br	10014a4 <Chap9_GetStatus+0x27c>
    }


    else
    {
        if(ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wLength == 2 )
 1001360:	008040b4 	movhi	r2,258
 1001364:	10a4ef04 	addi	r2,r2,-27716
 1001368:	1080010b 	ldhu	r2,4(r2)
 100136c:	10bfffcc 	andi	r2,r2,65535
 1001370:	1004c03a 	cmpne	r2,r2,zero
 1001374:	10004b1e 	bne	r2,zero,10014a4 <Chap9_GetStatus+0x27c>
 1001378:	008040b4 	movhi	r2,258
 100137c:	10a4ef04 	addi	r2,r2,-27716
 1001380:	1080020b 	ldhu	r2,8(r2)
 1001384:	10bfffcc 	andi	r2,r2,65535
 1001388:	10800098 	cmpnei	r2,r2,2
 100138c:	1000451e 	bne	r2,zero,10014a4 <Chap9_GetStatus+0x27c>
        {
            switch(bRecipient)
 1001390:	e0bffc03 	ldbu	r2,-16(fp)
 1001394:	e0bffe15 	stw	r2,-8(fp)
 1001398:	e0fffe17 	ldw	r3,-8(fp)
 100139c:	18800060 	cmpeqi	r2,r3,1
 10013a0:	1000171e 	bne	r2,zero,1001400 <Chap9_GetStatus+0x1d8>
 10013a4:	e0fffe17 	ldw	r3,-8(fp)
 10013a8:	188000a0 	cmpeqi	r2,r3,2
 10013ac:	10001a1e 	bne	r2,zero,1001418 <Chap9_GetStatus+0x1f0>
 10013b0:	e0fffe17 	ldw	r3,-8(fp)
 10013b4:	1805003a 	cmpeq	r2,r3,zero
 10013b8:	1000011e 	bne	r2,zero,10013c0 <Chap9_GetStatus+0x198>
 10013bc:	00003806 	br	10014a0 <Chap9_GetStatus+0x278>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
 10013c0:	008040b4 	movhi	r2,258
 10013c4:	10a4c804 	addi	r2,r2,-27872
 10013c8:	10800017 	ldw	r2,0(r2)
 10013cc:	1080040c 	andi	r2,r2,16
 10013d0:	1005003a 	cmpeq	r2,r2,zero
 10013d4:	1000031e 	bne	r2,zero,10013e4 <Chap9_GetStatus+0x1bc>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
 10013d8:	008000c4 	movi	r2,3
 10013dc:	e0bffcc5 	stb	r2,-13(fp)
 10013e0:	00000206 	br	10013ec <Chap9_GetStatus+0x1c4>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
 10013e4:	00800044 	movi	r2,1
 10013e8:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
 10013ec:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 10013f0:	e13ffcc4 	addi	r4,fp,-13
 10013f4:	01400084 	movi	r5,2
 10013f8:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
                    break;
 10013fc:	00002906 	br	10014a4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:
                    txdat[0]=0;
 1001400:	e03ffcc5 	stb	zero,-13(fp)
                    txdat[1]=0;
 1001404:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001408:	e13ffcc4 	addi	r4,fp,-13
 100140c:	01400084 	movi	r5,2
 1001410:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
                    break;
 1001414:	00002306 	br	10014a4 <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001418:	008040b4 	movhi	r2,258
 100141c:	10a4ef04 	addi	r2,r2,-27716
 1001420:	1080018b 	ldhu	r2,6(r2)
 1001424:	10bfffcc 	andi	r2,r2,65535
 1001428:	1004c03a 	cmpne	r2,r2,zero
 100142c:	1000031e 	bne	r2,zero,100143c <Chap9_GetStatus+0x214>
                        endp = -1;
 1001430:	00bfffc4 	movi	r2,-1
 1001434:	e0bffc85 	stb	r2,-14(fp)
 1001438:	00000506 	br	1001450 <Chap9_GetStatus+0x228>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 100143c:	008040b4 	movhi	r2,258
 1001440:	10a4ef04 	addi	r2,r2,-27716
 1001444:	1080018b 	ldhu	r2,6(r2)
 1001448:	108003cc 	andi	r2,r2,15
 100144c:	e0bffc85 	stb	r2,-14(fp)

                    c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
 1001450:	e0bffc83 	ldbu	r2,-14(fp)
 1001454:	10800044 	addi	r2,r2,1
 1001458:	11003fcc 	andi	r4,r2,255
 100145c:	1003e300 	call	1003e30 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1001460:	e0bffc45 	stb	r2,-15(fp)
                    if(c & D13REG_EPSTS_STALL)
 1001464:	e0bffc43 	ldbu	r2,-15(fp)
 1001468:	10803fcc 	andi	r2,r2,255
 100146c:	1080201c 	xori	r2,r2,128
 1001470:	10bfe004 	addi	r2,r2,-128
 1001474:	1004403a 	cmpge	r2,r2,zero
 1001478:	1000031e 	bne	r2,zero,1001488 <Chap9_GetStatus+0x260>
                        txdat[0] = ENDPSTS_HALT;   /* Halt */
 100147c:	00800044 	movi	r2,1
 1001480:	e0bffcc5 	stb	r2,-13(fp)
 1001484:	00000106 	br	100148c <Chap9_GetStatus+0x264>
                    else
                        txdat[0] = 0;
 1001488:	e03ffcc5 	stb	zero,-13(fp)

                    txdat[1] = 0;
 100148c:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001490:	e13ffcc4 	addi	r4,fp,-13
 1001494:	01400084 	movi	r5,2
 1001498:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
                    break;
 100149c:	00000106 	br	10014a4 <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
 10014a0:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
                    break;
            }
        }
    }

}
 10014a4:	e037883a 	mov	sp,fp
 10014a8:	dfc00117 	ldw	ra,4(sp)
 10014ac:	df000017 	ldw	fp,0(sp)
 10014b0:	dec00204 	addi	sp,sp,8
 10014b4:	f800283a 	ret

010014b8 <Chap9_ClearFeature>:

void Chap9_ClearFeature(void)
{
 10014b8:	defffb04 	addi	sp,sp,-20
 10014bc:	dfc00415 	stw	ra,16(sp)
 10014c0:	df000315 	stw	fp,12(sp)
 10014c4:	df000304 	addi	fp,sp,12
    UCHAR   endp;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 10014c8:	008040b4 	movhi	r2,258
 10014cc:	10a4ef04 	addi	r2,r2,-27716
 10014d0:	10800083 	ldbu	r2,2(r2)
 10014d4:	108007cc 	andi	r2,r2,31
 10014d8:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
 10014dc:	008040b4 	movhi	r2,258
 10014e0:	10a4ef04 	addi	r2,r2,-27716
 10014e4:	1080010b 	ldhu	r2,4(r2)
 10014e8:	e0bffd0d 	sth	r2,-12(fp)

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 10014ec:	008040b4 	movhi	r2,258
 10014f0:	10a4d104 	addi	r2,r2,-27836
 10014f4:	10800003 	ldbu	r2,0(r2)
 10014f8:	1080008c 	andi	r2,r2,2
 10014fc:	10803fcc 	andi	r2,r2,255
 1001500:	1005003a 	cmpeq	r2,r2,zero
 1001504:	1000351e 	bne	r2,zero,10015dc <Chap9_ClearFeature+0x124>
    {
        if( ControlData.DeviceRequest.wLength == 0 )
 1001508:	008040b4 	movhi	r2,258
 100150c:	10a4ef04 	addi	r2,r2,-27716
 1001510:	1080020b 	ldhu	r2,8(r2)
 1001514:	10bfffcc 	andi	r2,r2,65535
 1001518:	1004c03a 	cmpne	r2,r2,zero
 100151c:	10006f1e 	bne	r2,zero,10016dc <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
 1001520:	e0bffd83 	ldbu	r2,-10(fp)
 1001524:	e0bfff15 	stw	r2,-4(fp)
 1001528:	e0ffff17 	ldw	r3,-4(fp)
 100152c:	1805003a 	cmpeq	r2,r3,zero
 1001530:	1000041e 	bne	r2,zero,1001544 <Chap9_ClearFeature+0x8c>
 1001534:	e0ffff17 	ldw	r3,-4(fp)
 1001538:	188000a0 	cmpeqi	r2,r3,2
 100153c:	1000101e 	bne	r2,zero,1001580 <Chap9_ClearFeature+0xc8>
 1001540:	00002406 	br	10015d4 <Chap9_ClearFeature+0x11c>
            {
            case USB_RECIPIENT_DEVICE:
                        if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 1001544:	e0bffd0b 	ldhu	r2,-12(fp)
 1001548:	10800058 	cmpnei	r2,r2,1
 100154c:	10000a1e 	bne	r2,zero,1001578 <Chap9_ClearFeature+0xc0>
                        {
                        bD13flags.bits.remote_wakeup = 0;
 1001550:	010040b4 	movhi	r4,258
 1001554:	2124c804 	addi	r4,r4,-27872
 1001558:	20c00017 	ldw	r3,0(r4)
 100155c:	00bffbc4 	movi	r2,-17
 1001560:	1884703a 	and	r2,r3,r2
 1001564:	20800015 	stw	r2,0(r4)
                        Chap9_SingleTransmitEP0(0, 0);
 1001568:	0009883a 	mov	r4,zero
 100156c:	000b883a 	mov	r5,zero
 1001570:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001574:	00005906 	br	10016dc <Chap9_ClearFeature+0x224>
                        }
                        else
                            Chap9_StallEP0InControlWrite();
 1001578:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>

                        break;
 100157c:	00005706 	br	10016dc <Chap9_ClearFeature+0x224>



            case USB_RECIPIENT_ENDPOINT:

                        if(wFeature == USB_FEATURE_ENDPOINT_STALL)
 1001580:	e0bffd0b 	ldhu	r2,-12(fp)
 1001584:	1004c03a 	cmpne	r2,r2,zero
 1001588:	1000101e 	bne	r2,zero,10015cc <Chap9_ClearFeature+0x114>
                        {
                            if( ControlData.DeviceRequest.wIndex == 0x00 )
 100158c:	008040b4 	movhi	r2,258
 1001590:	10a4ef04 	addi	r2,r2,-27716
 1001594:	1080018b 	ldhu	r2,6(r2)
 1001598:	10bfffcc 	andi	r2,r2,65535
 100159c:	1004c03a 	cmpne	r2,r2,zero
 10015a0:	1000081e 	bne	r2,zero,10015c4 <Chap9_ClearFeature+0x10c>
                            {
                                endp = 0;
 10015a4:	e03ffdc5 	stb	zero,-9(fp)
                                Hal4D13_SetEndpointStatus(endp, 0);
 10015a8:	e13ffdc3 	ldbu	r4,-9(fp)
 10015ac:	000b883a 	mov	r5,zero
 10015b0:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>

                                Chap9_SingleTransmitEP0(0, 0);
 10015b4:	0009883a 	mov	r4,zero
 10015b8:	000b883a 	mov	r5,zero
 10015bc:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 10015c0:	00004606 	br	10016dc <Chap9_ClearFeature+0x224>
                            }
                            else
                            {
                                Chap9_StallEP0InControlWrite();
 10015c4:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
                                break;
 10015c8:	00004406 	br	10016dc <Chap9_ClearFeature+0x224>
                            }

                        }

                        else
                            Chap9_StallEP0InControlWrite();
 10015cc:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>

                        break;
 10015d0:	00004206 	br	10016dc <Chap9_ClearFeature+0x224>


            default:
                        Chap9_StallEP0InControlWrite();
 10015d4:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
 10015d8:	00004006 	br	10016dc <Chap9_ClearFeature+0x224>
    }

    else
    {

        if( ControlData.DeviceRequest.wLength == 0 )
 10015dc:	008040b4 	movhi	r2,258
 10015e0:	10a4ef04 	addi	r2,r2,-27716
 10015e4:	1080020b 	ldhu	r2,8(r2)
 10015e8:	10bfffcc 	andi	r2,r2,65535
 10015ec:	1004c03a 	cmpne	r2,r2,zero
 10015f0:	10003a1e 	bne	r2,zero,10016dc <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
 10015f4:	e0bffd83 	ldbu	r2,-10(fp)
 10015f8:	e0bffe15 	stw	r2,-8(fp)
 10015fc:	e0fffe17 	ldw	r3,-8(fp)
 1001600:	1805003a 	cmpeq	r2,r3,zero
 1001604:	1000041e 	bne	r2,zero,1001618 <Chap9_ClearFeature+0x160>
 1001608:	e0fffe17 	ldw	r3,-8(fp)
 100160c:	188000a0 	cmpeqi	r2,r3,2
 1001610:	1000101e 	bne	r2,zero,1001654 <Chap9_ClearFeature+0x19c>
 1001614:	00003006 	br	10016d8 <Chap9_ClearFeature+0x220>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 1001618:	e0bffd0b 	ldhu	r2,-12(fp)
 100161c:	10800058 	cmpnei	r2,r2,1
 1001620:	10000a1e 	bne	r2,zero,100164c <Chap9_ClearFeature+0x194>
                {
                    bD13flags.bits.remote_wakeup = 0;
 1001624:	010040b4 	movhi	r4,258
 1001628:	2124c804 	addi	r4,r4,-27872
 100162c:	20c00017 	ldw	r3,0(r4)
 1001630:	00bffbc4 	movi	r2,-17
 1001634:	1884703a 	and	r2,r3,r2
 1001638:	20800015 	stw	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
 100163c:	0009883a 	mov	r4,zero
 1001640:	000b883a 	mov	r5,zero
 1001644:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001648:	00002406 	br	10016dc <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 100164c:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
                }

                break;
 1001650:	00002206 	br	10016dc <Chap9_ClearFeature+0x224>

                case USB_RECIPIENT_ENDPOINT:

                if(wFeature == USB_FEATURE_ENDPOINT_STALL)
 1001654:	e0bffd0b 	ldhu	r2,-12(fp)
 1001658:	1004c03a 	cmpne	r2,r2,zero
 100165c:	10001c1e 	bne	r2,zero,10016d0 <Chap9_ClearFeature+0x218>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001660:	008040b4 	movhi	r2,258
 1001664:	10a4ef04 	addi	r2,r2,-27716
 1001668:	1080018b 	ldhu	r2,6(r2)
 100166c:	10bfffcc 	andi	r2,r2,65535
 1001670:	1004c03a 	cmpne	r2,r2,zero
 1001674:	1000031e 	bne	r2,zero,1001684 <Chap9_ClearFeature+0x1cc>
                            endp = -1;
 1001678:	00bfffc4 	movi	r2,-1
 100167c:	e0bffdc5 	stb	r2,-9(fp)
 1001680:	00000506 	br	1001698 <Chap9_ClearFeature+0x1e0>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 1001684:	008040b4 	movhi	r2,258
 1001688:	10a4ef04 	addi	r2,r2,-27716
 100168c:	1080018b 	ldhu	r2,6(r2)
 1001690:	108003cc 	andi	r2,r2,15
 1001694:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, 0);
 1001698:	e0bffdc3 	ldbu	r2,-9(fp)
 100169c:	10800044 	addi	r2,r2,1
 10016a0:	11003fcc 	andi	r4,r2,255
 10016a4:	000b883a 	mov	r5,zero
 10016a8:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
                    Hal4D13_SetEndpointStatus(endp+1, 0);
 10016ac:	e0bffdc3 	ldbu	r2,-9(fp)
 10016b0:	10800044 	addi	r2,r2,1
 10016b4:	11003fcc 	andi	r4,r2,255
 10016b8:	000b883a 	mov	r5,zero
 10016bc:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
 10016c0:	0009883a 	mov	r4,zero
 10016c4:	000b883a 	mov	r5,zero
 10016c8:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 10016cc:	00000306 	br	10016dc <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 10016d0:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
                }
                break;
 10016d4:	00000106 	br	10016dc <Chap9_ClearFeature+0x224>

            default:
                    Chap9_StallEP0InControlWrite();
 10016d8:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
                    break;
            }
      }
    }

}
 10016dc:	e037883a 	mov	sp,fp
 10016e0:	dfc00117 	ldw	ra,4(sp)
 10016e4:	df000017 	ldw	fp,0(sp)
 10016e8:	dec00204 	addi	sp,sp,8
 10016ec:	f800283a 	ret

010016f0 <Chap9_SetFeature>:

void Chap9_SetFeature(void)
{
 10016f0:	defffb04 	addi	sp,sp,-20
 10016f4:	dfc00415 	stw	ra,16(sp)
 10016f8:	df000315 	stw	fp,12(sp)
 10016fc:	df000304 	addi	fp,sp,12
  UCHAR   endp = 0;
 1001700:	e03ffdc5 	stb	zero,-9(fp)
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 1001704:	008040b4 	movhi	r2,258
 1001708:	10a4ef04 	addi	r2,r2,-27716
 100170c:	10800083 	ldbu	r2,2(r2)
 1001710:	108007cc 	andi	r2,r2,31
 1001714:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
 1001718:	008040b4 	movhi	r2,258
 100171c:	10a4ef04 	addi	r2,r2,-27716
 1001720:	1080010b 	ldhu	r2,4(r2)
 1001724:	e0bffd0d 	sth	r2,-12(fp)
  

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001728:	008040b4 	movhi	r2,258
 100172c:	10a4d104 	addi	r2,r2,-27836
 1001730:	10800003 	ldbu	r2,0(r2)
 1001734:	1080008c 	andi	r2,r2,2
 1001738:	10803fcc 	andi	r2,r2,255
 100173c:	1005003a 	cmpeq	r2,r2,zero
 1001740:	10002f1e 	bne	r2,zero,1001800 <Chap9_SetFeature+0x110>
    {
        switch(bRecipient)
 1001744:	e0bffd83 	ldbu	r2,-10(fp)
 1001748:	e0bfff15 	stw	r2,-4(fp)
 100174c:	e0ffff17 	ldw	r3,-4(fp)
 1001750:	1805003a 	cmpeq	r2,r3,zero
 1001754:	1000041e 	bne	r2,zero,1001768 <Chap9_SetFeature+0x78>
 1001758:	e0ffff17 	ldw	r3,-4(fp)
 100175c:	188000a0 	cmpeqi	r2,r3,2
 1001760:	10000f1e 	bne	r2,zero,10017a0 <Chap9_SetFeature+0xb0>
 1001764:	00002406 	br	10017f8 <Chap9_SetFeature+0x108>
        {
        case USB_RECIPIENT_DEVICE:
            if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 1001768:	e0bffd0b 	ldhu	r2,-12(fp)
 100176c:	10800058 	cmpnei	r2,r2,1
 1001770:	1000091e 	bne	r2,zero,1001798 <Chap9_SetFeature+0xa8>
            {
                bD13flags.bits.remote_wakeup = 1;
 1001774:	008040b4 	movhi	r2,258
 1001778:	10a4c804 	addi	r2,r2,-27872
 100177c:	10c00017 	ldw	r3,0(r2)
 1001780:	18c00414 	ori	r3,r3,16
 1001784:	10c00015 	stw	r3,0(r2)
                Chap9_SingleTransmitEP0(0, 0);
 1001788:	0009883a 	mov	r4,zero
 100178c:	000b883a 	mov	r5,zero
 1001790:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001794:	00005b06 	br	1001904 <Chap9_SetFeature+0x214>
            }
            else
            {
                Chap9_StallEP0InControlWrite();
 1001798:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
            }
            break;
 100179c:	00005906 	br	1001904 <Chap9_SetFeature+0x214>

        case USB_RECIPIENT_ENDPOINT:
            if( wFeature == USB_FEATURE_ENDPOINT_STALL)
 10017a0:	e0bffd0b 	ldhu	r2,-12(fp)
 10017a4:	1004c03a 	cmpne	r2,r2,zero
 10017a8:	1000111e 	bne	r2,zero,10017f0 <Chap9_SetFeature+0x100>
            {
                if( ControlData.DeviceRequest.wIndex == 0x00 )
 10017ac:	008040b4 	movhi	r2,258
 10017b0:	10a4ef04 	addi	r2,r2,-27716
 10017b4:	1080018b 	ldhu	r2,6(r2)
 10017b8:	10bfffcc 	andi	r2,r2,65535
 10017bc:	1004c03a 	cmpne	r2,r2,zero
 10017c0:	1000021e 	bne	r2,zero,10017cc <Chap9_SetFeature+0xdc>
                    endp = -1;
 10017c4:	00bfffc4 	movi	r2,-1
 10017c8:	e0bffdc5 	stb	r2,-9(fp)

                Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
 10017cc:	e0bffdc3 	ldbu	r2,-9(fp)
 10017d0:	10800044 	addi	r2,r2,1
 10017d4:	11003fcc 	andi	r4,r2,255
 10017d8:	01402004 	movi	r5,128
 10017dc:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
                Chap9_SingleTransmitEP0(0, 0);
 10017e0:	0009883a 	mov	r4,zero
 10017e4:	000b883a 	mov	r5,zero
 10017e8:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 10017ec:	00004506 	br	1001904 <Chap9_SetFeature+0x214>

            }
            else
                Chap9_StallEP0InControlWrite();
 10017f0:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>

            break;
 10017f4:	00004306 	br	1001904 <Chap9_SetFeature+0x214>
        default:
            Chap9_StallEP0InControlWrite();
 10017f8:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
 10017fc:	00004106 	br	1001904 <Chap9_SetFeature+0x214>
    }


    else
    {
        if( ControlData.DeviceRequest.wLength == 0 )
 1001800:	008040b4 	movhi	r2,258
 1001804:	10a4ef04 	addi	r2,r2,-27716
 1001808:	1080020b 	ldhu	r2,8(r2)
 100180c:	10bfffcc 	andi	r2,r2,65535
 1001810:	1004c03a 	cmpne	r2,r2,zero
 1001814:	10003b1e 	bne	r2,zero,1001904 <Chap9_SetFeature+0x214>
        {
            switch(bRecipient)
 1001818:	e0bffd83 	ldbu	r2,-10(fp)
 100181c:	e0bffe15 	stw	r2,-8(fp)
 1001820:	e0fffe17 	ldw	r3,-8(fp)
 1001824:	1805003a 	cmpeq	r2,r3,zero
 1001828:	1000041e 	bne	r2,zero,100183c <Chap9_SetFeature+0x14c>
 100182c:	e0fffe17 	ldw	r3,-8(fp)
 1001830:	188000a0 	cmpeqi	r2,r3,2
 1001834:	10000f1e 	bne	r2,zero,1001874 <Chap9_SetFeature+0x184>
 1001838:	00003106 	br	1001900 <Chap9_SetFeature+0x210>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 100183c:	e0bffd0b 	ldhu	r2,-12(fp)
 1001840:	10800058 	cmpnei	r2,r2,1
 1001844:	1000091e 	bne	r2,zero,100186c <Chap9_SetFeature+0x17c>
                {
                    bD13flags.bits.remote_wakeup = 1;
 1001848:	008040b4 	movhi	r2,258
 100184c:	10a4c804 	addi	r2,r2,-27872
 1001850:	10c00017 	ldw	r3,0(r2)
 1001854:	18c00414 	ori	r3,r3,16
 1001858:	10c00015 	stw	r3,0(r2)
                    Chap9_SingleTransmitEP0(0, 0);
 100185c:	0009883a 	mov	r4,zero
 1001860:	000b883a 	mov	r5,zero
 1001864:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001868:	00002606 	br	1001904 <Chap9_SetFeature+0x214>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 100186c:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
                }
                break;
 1001870:	00002406 	br	1001904 <Chap9_SetFeature+0x214>
            case USB_RECIPIENT_ENDPOINT:
                if( wFeature == USB_FEATURE_ENDPOINT_STALL)
 1001874:	e0bffd0b 	ldhu	r2,-12(fp)
 1001878:	1004c03a 	cmpne	r2,r2,zero
 100187c:	1000171e 	bne	r2,zero,10018dc <Chap9_SetFeature+0x1ec>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001880:	008040b4 	movhi	r2,258
 1001884:	10a4ef04 	addi	r2,r2,-27716
 1001888:	1080018b 	ldhu	r2,6(r2)
 100188c:	10bfffcc 	andi	r2,r2,65535
 1001890:	1004c03a 	cmpne	r2,r2,zero
 1001894:	1000031e 	bne	r2,zero,10018a4 <Chap9_SetFeature+0x1b4>
                        endp = -1;
 1001898:	00bfffc4 	movi	r2,-1
 100189c:	e0bffdc5 	stb	r2,-9(fp)
 10018a0:	00000506 	br	10018b8 <Chap9_SetFeature+0x1c8>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 10018a4:	008040b4 	movhi	r2,258
 10018a8:	10a4ef04 	addi	r2,r2,-27716
 10018ac:	1080018b 	ldhu	r2,6(r2)
 10018b0:	108003cc 	andi	r2,r2,15
 10018b4:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
 10018b8:	e0bffdc3 	ldbu	r2,-9(fp)
 10018bc:	10800044 	addi	r2,r2,1
 10018c0:	11003fcc 	andi	r4,r2,255
 10018c4:	01402004 	movi	r5,128
 10018c8:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
 10018cc:	0009883a 	mov	r4,zero
 10018d0:	000b883a 	mov	r5,zero
 10018d4:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 10018d8:	00000a06 	br	1001904 <Chap9_SetFeature+0x214>

                }
                else
                {
                    Hal4D13_SetEndpointStatus(endp+1, 0);
 10018dc:	e0bffdc3 	ldbu	r2,-9(fp)
 10018e0:	10800044 	addi	r2,r2,1
 10018e4:	11003fcc 	andi	r4,r2,255
 10018e8:	000b883a 	mov	r5,zero
 10018ec:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
                    Chap9_SingleTransmitEP0(0, 0);
 10018f0:	0009883a 	mov	r4,zero
 10018f4:	000b883a 	mov	r5,zero
 10018f8:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
                }
                break;
 10018fc:	00000106 	br	1001904 <Chap9_SetFeature+0x214>
            default:
                Chap9_StallEP0InControlWrite();
 1001900:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
        }
    }



}
 1001904:	e037883a 	mov	sp,fp
 1001908:	dfc00117 	ldw	ra,4(sp)
 100190c:	df000017 	ldw	fp,0(sp)
 1001910:	dec00204 	addi	sp,sp,8
 1001914:	f800283a 	ret

01001918 <Chap9_SetAddress>:

void Chap9_SetAddress(void)
{
 1001918:	defffd04 	addi	sp,sp,-12
 100191c:	dfc00215 	stw	ra,8(sp)
 1001920:	df000115 	stw	fp,4(sp)
 1001924:	df000104 	addi	fp,sp,4

    UCHAR   j;

    {
        RaiseIRQL();
 1001928:	10046940 	call	1004694 <usb_disable_all_interrupts>
        usb_disable_all_interrupts();
 100192c:	10046940 	call	1004694 <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 1001930:	008040b4 	movhi	r2,258
 1001934:	10a4ef04 	addi	r2,r2,-27716
 1001938:	10800003 	ldbu	r2,0(r2)
 100193c:	10803fcc 	andi	r2,r2,255
 1001940:	1004c03a 	cmpne	r2,r2,zero
 1001944:	1000791e 	bne	r2,zero,1001b2c <Chap9_SetAddress+0x214>
        {
            if(bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE)
 1001948:	008040b4 	movhi	r2,258
 100194c:	10a4d104 	addi	r2,r2,-27836
 1001950:	10800003 	ldbu	r2,0(r2)
 1001954:	1080004c 	andi	r2,r2,1
 1001958:	10803fcc 	andi	r2,r2,255
 100195c:	1005003a 	cmpeq	r2,r2,zero
 1001960:	1000231e 	bne	r2,zero,10019f0 <Chap9_SetAddress+0xd8>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) != 0 )
 1001964:	008040b4 	movhi	r2,258
 1001968:	10a4ef04 	addi	r2,r2,-27716
 100196c:	1080010b 	ldhu	r2,4(r2)
 1001970:	10bfffcc 	andi	r2,r2,65535
 1001974:	10801fcc 	andi	r2,r2,127
 1001978:	1005003a 	cmpeq	r2,r2,zero
 100197c:	1000161e 	bne	r2,zero,10019d8 <Chap9_SetAddress+0xc0>
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
 1001980:	010040b4 	movhi	r4,258
 1001984:	2124d104 	addi	r4,r4,-27836
 1001988:	20c00003 	ldbu	r3,0(r4)
 100198c:	00bfff84 	movi	r2,-2
 1001990:	1884703a 	and	r2,r3,r2
 1001994:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 1001998:	008040b4 	movhi	r2,258
 100199c:	10a4ef04 	addi	r2,r2,-27716
 10019a0:	1080010b 	ldhu	r2,4(r2)
 10019a4:	10803fcc 	andi	r2,r2,255
 10019a8:	11001fcc 	andi	r4,r2,127
 10019ac:	01400044 	movi	r5,1
 10019b0:	10034500 	call	1003450 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 10019b4:	00c040b4 	movhi	r3,258
 10019b8:	18e4d104 	addi	r3,r3,-27836
 10019bc:	18800003 	ldbu	r2,0(r3)
 10019c0:	10800094 	ori	r2,r2,2
 10019c4:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
 10019c8:	0009883a 	mov	r4,zero
 10019cc:	000b883a 	mov	r5,zero
 10019d0:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 10019d4:	00005506 	br	1001b2c <Chap9_SetAddress+0x214>

                }

                else
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 10019d8:	00c040b4 	movhi	r3,258
 10019dc:	18e4d104 	addi	r3,r3,-27836
 10019e0:	18800003 	ldbu	r2,0(r3)
 10019e4:	10800054 	ori	r2,r2,1
 10019e8:	18800005 	stb	r2,0(r3)
 10019ec:	00004f06 	br	1001b2c <Chap9_SetAddress+0x214>
            }

            else if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 10019f0:	008040b4 	movhi	r2,258
 10019f4:	10a4d104 	addi	r2,r2,-27836
 10019f8:	10800003 	ldbu	r2,0(r2)
 10019fc:	1080008c 	andi	r2,r2,2
 1001a00:	10803fcc 	andi	r2,r2,255
 1001a04:	1005003a 	cmpeq	r2,r2,zero
 1001a08:	1000331e 	bne	r2,zero,1001ad8 <Chap9_SetAddress+0x1c0>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) == 0 )
 1001a0c:	008040b4 	movhi	r2,258
 1001a10:	10a4ef04 	addi	r2,r2,-27716
 1001a14:	1080010b 	ldhu	r2,4(r2)
 1001a18:	10bfffcc 	andi	r2,r2,65535
 1001a1c:	10801fcc 	andi	r2,r2,127
 1001a20:	1004c03a 	cmpne	r2,r2,zero
 1001a24:	1000161e 	bne	r2,zero,1001a80 <Chap9_SetAddress+0x168>
                {
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 1001a28:	008040b4 	movhi	r2,258
 1001a2c:	10a4ef04 	addi	r2,r2,-27716
 1001a30:	1080010b 	ldhu	r2,4(r2)
 1001a34:	10803fcc 	andi	r2,r2,255
 1001a38:	11001fcc 	andi	r4,r2,127
 1001a3c:	01400044 	movi	r5,1
 1001a40:	10034500 	call	1003450 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1001a44:	00c040b4 	movhi	r3,258
 1001a48:	18e4d104 	addi	r3,r3,-27836
 1001a4c:	18800003 	ldbu	r2,0(r3)
 1001a50:	10800054 	ori	r2,r2,1
 1001a54:	18800005 	stb	r2,0(r3)
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001a58:	010040b4 	movhi	r4,258
 1001a5c:	2124d104 	addi	r4,r4,-27836
 1001a60:	20c00003 	ldbu	r3,0(r4)
 1001a64:	00bfff44 	movi	r2,-3
 1001a68:	1884703a 	and	r2,r3,r2
 1001a6c:	20800005 	stb	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
 1001a70:	0009883a 	mov	r4,zero
 1001a74:	000b883a 	mov	r5,zero
 1001a78:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001a7c:	00002b06 	br	1001b2c <Chap9_SetAddress+0x214>

                }

                else
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
 1001a80:	010040b4 	movhi	r4,258
 1001a84:	2124d104 	addi	r4,r4,-27836
 1001a88:	20c00003 	ldbu	r3,0(r4)
 1001a8c:	00bfff84 	movi	r2,-2
 1001a90:	1884703a 	and	r2,r3,r2
 1001a94:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 1001a98:	008040b4 	movhi	r2,258
 1001a9c:	10a4ef04 	addi	r2,r2,-27716
 1001aa0:	1080010b 	ldhu	r2,4(r2)
 1001aa4:	10803fcc 	andi	r2,r2,255
 1001aa8:	11001fcc 	andi	r4,r2,127
 1001aac:	01400044 	movi	r5,1
 1001ab0:	10034500 	call	1003450 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001ab4:	00c040b4 	movhi	r3,258
 1001ab8:	18e4d104 	addi	r3,r3,-27836
 1001abc:	18800003 	ldbu	r2,0(r3)
 1001ac0:	10800094 	ori	r2,r2,2
 1001ac4:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
 1001ac8:	0009883a 	mov	r4,zero
 1001acc:	000b883a 	mov	r5,zero
 1001ad0:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001ad4:	00001506 	br	1001b2c <Chap9_SetAddress+0x214>
            }

            else
            {

                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1001ad8:	010040b4 	movhi	r4,258
 1001adc:	2124d104 	addi	r4,r4,-27836
 1001ae0:	20c00003 	ldbu	r3,0(r4)
 1001ae4:	00bffec4 	movi	r2,-5
 1001ae8:	1884703a 	and	r2,r3,r2
 1001aec:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001af0:	010040b4 	movhi	r4,258
 1001af4:	2124d104 	addi	r4,r4,-27836
 1001af8:	20c00003 	ldbu	r3,0(r4)
 1001afc:	00bfff44 	movi	r2,-3
 1001b00:	1884703a 	and	r2,r3,r2
 1001b04:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1001b08:	00c040b4 	movhi	r3,258
 1001b0c:	18e4d104 	addi	r3,r3,-27836
 1001b10:	18800003 	ldbu	r2,0(r3)
 1001b14:	10800054 	ori	r2,r2,1
 1001b18:	18800005 	stb	r2,0(r3)
                j = DEV_BEHAVIOUR_NOT_SPECIFIED;
 1001b1c:	e03fff05 	stb	zero,-4(fp)
                Chap9_SingleTransmitEP0(&j, 0);
 1001b20:	e13fff04 	addi	r4,fp,-4
 1001b24:	000b883a 	mov	r5,zero
 1001b28:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
            }

        }
        LowerIRQL();
 1001b2c:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
        usb_reenable_all_interrupts();
 1001b30:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

    }
//    printf("USB Addr %x\n",Hal4D13_GetAddress());
}
 1001b34:	e037883a 	mov	sp,fp
 1001b38:	dfc00117 	ldw	ra,4(sp)
 1001b3c:	df000017 	ldw	fp,0(sp)
 1001b40:	dec00204 	addi	sp,sp,8
 1001b44:	f800283a 	ret

01001b48 <Chap9_GetDescriptor>:


void Chap9_GetDescriptor(void)
{
 1001b48:	defffb04 	addi	sp,sp,-20
 1001b4c:	dfc00415 	stw	ra,16(sp)
 1001b50:	df000315 	stw	fp,12(sp)
 1001b54:	df000304 	addi	fp,sp,12
    UCHAR   bDescriptor =      MSB(ControlData.DeviceRequest.wValue);
 1001b58:	008040b4 	movhi	r2,258
 1001b5c:	10a4ef04 	addi	r2,r2,-27716
 1001b60:	1080010b 	ldhu	r2,4(r2)
 1001b64:	10bfffcc 	andi	r2,r2,65535
 1001b68:	1004d23a 	srli	r2,r2,8
 1001b6c:	1007883a 	mov	r3,r2
 1001b70:	00bfffc4 	movi	r2,-1
 1001b74:	1884703a 	and	r2,r3,r2
 1001b78:	e0bffd45 	stb	r2,-11(fp)
    UCHAR   bDescriptorIndex = LSB(ControlData.DeviceRequest.wValue);
 1001b7c:	008040b4 	movhi	r2,258
 1001b80:	10a4ef04 	addi	r2,r2,-27716
 1001b84:	1080010b 	ldhu	r2,4(r2)
 1001b88:	1007883a 	mov	r3,r2
 1001b8c:	00bfffc4 	movi	r2,-1
 1001b90:	1884703a 	and	r2,r3,r2
 1001b94:	e0bffd05 	stb	r2,-12(fp)
  //printf("bDescri %d",bDescriptor);
 // printf("Index %d\n",bDescriptorIndex);
//  printf("USB_DEVICE_DESCRIPTORsize %d\n",sizeof(USB_DEVICE_DESCRIPTOR));
 // printf("CONFIGURATIONsize %d\n",sizeof(USB_CONFIGURATION_DESCRIPTOR_a));
    switch(bDescriptor)
 1001b98:	e0bffd43 	ldbu	r2,-11(fp)
 1001b9c:	e0bfff15 	stw	r2,-4(fp)
 1001ba0:	e0ffff17 	ldw	r3,-4(fp)
 1001ba4:	188000a0 	cmpeqi	r2,r3,2
 1001ba8:	10000c1e 	bne	r2,zero,1001bdc <Chap9_GetDescriptor+0x94>
 1001bac:	e13fff17 	ldw	r4,-4(fp)
 1001bb0:	208000e0 	cmpeqi	r2,r4,3
 1001bb4:	10000e1e 	bne	r2,zero,1001bf0 <Chap9_GetDescriptor+0xa8>
 1001bb8:	e0ffff17 	ldw	r3,-4(fp)
 1001bbc:	18800060 	cmpeqi	r2,r3,1
 1001bc0:	1000011e 	bne	r2,zero,1001bc8 <Chap9_GetDescriptor+0x80>
 1001bc4:	00005106 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
    //sDevice sConfiguration
    //sizeof(struct CONFIGURATION)
//sizeof( struct DEVICE)

    case USB_DEVICE_DESCRIPTOR_TYPE:{//1
        Chap9_BurstTransmitEP0( (PUCHAR)&DeviceDescr , sizeof(USB_DEVICE_DESCRIPTOR));
 1001bc8:	01004074 	movhi	r4,257
 1001bcc:	21152f04 	addi	r4,r4,21692
 1001bd0:	01400484 	movi	r5,18
 1001bd4:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
//      Chap9_BurstTransmitEP0((PUCHAR)&sDevice,sizeof(struct DEVICE));
        break;}
 1001bd8:	00004d06 	br	1001d10 <Chap9_GetDescriptor+0x1c8>
    case USB_CONFIGURATION_DESCRIPTOR_TYPE:{//2
//      Chap9_BurstTransmitEP0((PUCHAR)&ConfigDescr, CONFIG_DESCRIPTOR_LENGTH);

      
            //printf("\nConfigDescr     \n");  
          Chap9_BurstTransmitEP0((PUCHAR)&ConfigDescr_a, sizeof(USB_CONFIGURATION_DESCRIPTOR_a));//sizeof(USB_CONFIGURATION_DESCRIPTOR));
 1001bdc:	01004074 	movhi	r4,257
 1001be0:	21153384 	addi	r4,r4,21710
 1001be4:	01400b84 	movi	r5,46
 1001be8:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
   //       printf("\nInterfaceDescr0  ");    Chap9_BurstTransmitEP0((PUCHAR)&InterfaceDescr0, sizeof(USB_INTERFACE_DESCRIPTOR));
//          printf("\nEP1_TXDesc       ");     Chap9_BurstTransmitEP0((PUCHAR)&EP1_TXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
  //        printf("\nEP1_RXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP1_RXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
    //      printf("\nEP2_TXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP2_TXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
      //    printf("\nEP2_RXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP2_RXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
        break;}
 1001bec:	00004806 	br	1001d10 <Chap9_GetDescriptor+0x1c8>
    case USB_STRING_DESCRIPTOR_TYPE://3
        switch(bDescriptorIndex)
 1001bf0:	e13ffd03 	ldbu	r4,-12(fp)
 1001bf4:	e13ffe15 	stw	r4,-8(fp)
 1001bf8:	e0fffe17 	ldw	r3,-8(fp)
 1001bfc:	188001a8 	cmpgeui	r2,r3,6
 1001c00:	10003e1e 	bne	r2,zero,1001cfc <Chap9_GetDescriptor+0x1b4>
 1001c04:	e13ffe17 	ldw	r4,-8(fp)
 1001c08:	e13ffe17 	ldw	r4,-8(fp)
 1001c0c:	2105883a 	add	r2,r4,r4
 1001c10:	1087883a 	add	r3,r2,r2
 1001c14:	00804034 	movhi	r2,256
 1001c18:	10870a04 	addi	r2,r2,7208
 1001c1c:	1885883a 	add	r2,r3,r2
 1001c20:	10800017 	ldw	r2,0(r2)
 1001c24:	1000683a 	jmp	r2
 1001c28:	01001c40 	call	1001c4 <__alt_mem_onchip+0x1001c4>
 1001c2c:	01001c5c 	xori	r4,zero,113
 1001c30:	01001c7c 	xorhi	r4,zero,113
 1001c34:	01001c9c 	xori	r4,zero,114
 1001c38:	01001cbc 	xorhi	r4,zero,114
 1001c3c:	01001cdc 	xori	r4,zero,115
        {
        case STR_INDEX_LANGUAGE:
            printf("\n str1     \n");
 1001c40:	01004074 	movhi	r4,257
 1001c44:	2112a304 	addi	r4,r4,19084
 1001c48:	10062fc0 	call	10062fc <puts>
      Chap9_BurstTransmitEP0((PUCHAR)&strLanguage, sizeof(USB_STRING_LANGUAGE_DESCRIPTOR));
 1001c4c:	d1200284 	addi	r4,gp,-32758
 1001c50:	01400104 	movi	r5,4
 1001c54:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001c58:	00002c06 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_MANUFACTURER:
            printf("\n str2     \n");Chap9_BurstTransmitEP0((PUCHAR)&strManufacturer, sizeof(USB_STRING_MANUFACTURER_DESCRIPTOR));
 1001c5c:	01004074 	movhi	r4,257
 1001c60:	2112a604 	addi	r4,r4,19096
 1001c64:	10062fc0 	call	10062fc <puts>
 1001c68:	01004074 	movhi	r4,257
 1001c6c:	21158b84 	addi	r4,r4,22062
 1001c70:	01400e04 	movi	r5,56
 1001c74:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001c78:	00002406 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_PRODUCT:
            printf("\n str3     \n");Chap9_BurstTransmitEP0((PUCHAR)&strProduct, sizeof(USB_STRING_PRODUCT_DESCRIPTOR));
 1001c7c:	01004074 	movhi	r4,257
 1001c80:	2112a904 	addi	r4,r4,19108
 1001c84:	10062fc0 	call	10062fc <puts>
 1001c88:	01004074 	movhi	r4,257
 1001c8c:	21157b04 	addi	r4,r4,21996
 1001c90:	01401084 	movi	r5,66
 1001c94:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001c98:	00001c06 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_SERIALNUMBER:
            printf("\n str4     \n");Chap9_BurstTransmitEP0((PUCHAR)&strSerialNum, sizeof(USB_STRING_SERIALNUMBER_DESCRIPTOR));
 1001c9c:	01004074 	movhi	r4,257
 1001ca0:	2112ac04 	addi	r4,r4,19120
 1001ca4:	10062fc0 	call	10062fc <puts>
 1001ca8:	01004074 	movhi	r4,257
 1001cac:	21157484 	addi	r4,r4,21970
 1001cb0:	01400684 	movi	r5,26
 1001cb4:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001cb8:	00001406 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_CONFIGURATION:
            printf("\n str5     \n");Chap9_BurstTransmitEP0((PUCHAR)&strConfiguration, sizeof(USB_STRING_CONFIGURATION_DESCRIPTOR) );
 1001cbc:	01004074 	movhi	r4,257
 1001cc0:	2112af04 	addi	r4,r4,19132
 1001cc4:	10062fc0 	call	10062fc <puts>
 1001cc8:	01004074 	movhi	r4,257
 1001ccc:	21157004 	addi	r4,r4,21952
 1001cd0:	01400484 	movi	r5,18
 1001cd4:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001cd8:	00000c06 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_INTERFACE:
            printf("\n str6     \n");Chap9_BurstTransmitEP0((PUCHAR)&strInterface, sizeof(USB_STRING_INTERFACE_DESCRIPTOR) );
 1001cdc:	01004074 	movhi	r4,257
 1001ce0:	2112b204 	addi	r4,r4,19144
 1001ce4:	10062fc0 	call	10062fc <puts>
 1001ce8:	01004074 	movhi	r4,257
 1001cec:	21156a04 	addi	r4,r4,21928
 1001cf0:	01400604 	movi	r5,24
 1001cf4:	10023880 	call	1002388 <Chap9_BurstTransmitEP0>
            break;
 1001cf8:	00000406 	br	1001d0c <Chap9_GetDescriptor+0x1c4>
        default:
            printf("\n str7     \n");Chap9_StallEP0InControlRead();
 1001cfc:	01004074 	movhi	r4,257
 1001d00:	2112b504 	addi	r4,r4,19156
 1001d04:	10062fc0 	call	10062fc <puts>
 1001d08:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
        }
    case USB_INTERFACE_DESCRIPTOR_TYPE:
    case USB_ENDPOINT_DESCRIPTOR_TYPE:
    case USB_POWER_DESCRIPTOR_TYPE:
    default:
        Chap9_StallEP0InControlRead();
 1001d0c:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
        break;
    }
}
 1001d10:	e037883a 	mov	sp,fp
 1001d14:	dfc00117 	ldw	ra,4(sp)
 1001d18:	df000017 	ldw	fp,0(sp)
 1001d1c:	dec00204 	addi	sp,sp,8
 1001d20:	f800283a 	ret

01001d24 <Chap9_GetConfiguration>:

void Chap9_GetConfiguration(void)
{
 1001d24:	defffd04 	addi	sp,sp,-12
 1001d28:	dfc00215 	stw	ra,8(sp)
 1001d2c:	df000115 	stw	fp,4(sp)
 1001d30:	df000104 	addi	fp,sp,4
    UCHAR   c = bD13flags.bits.configuration;
 1001d34:	008040b4 	movhi	r2,258
 1001d38:	10a4c804 	addi	r2,r2,-27872
 1001d3c:	10800017 	ldw	r2,0(r2)
 1001d40:	1004d0fa 	srli	r2,r2,3
 1001d44:	1080004c 	andi	r2,r2,1
 1001d48:	e0bfff05 	stb	r2,-4(fp)
    UCHAR   j;

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001d4c:	008040b4 	movhi	r2,258
 1001d50:	10a4d104 	addi	r2,r2,-27836
 1001d54:	10800003 	ldbu	r2,0(r2)
 1001d58:	1080008c 	andi	r2,r2,2
 1001d5c:	10803fcc 	andi	r2,r2,255
 1001d60:	1005003a 	cmpeq	r2,r2,zero
 1001d64:	1000051e 	bne	r2,zero,1001d7c <Chap9_GetConfiguration+0x58>
    {
        j = 0;
 1001d68:	e03fff45 	stb	zero,-3(fp)
        Chap9_SingleTransmitEP0(&j, 1);
 1001d6c:	e13fff44 	addi	r4,fp,-3
 1001d70:	01400044 	movi	r5,1
 1001d74:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001d78:	00001506 	br	1001dd0 <Chap9_GetConfiguration+0xac>
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1)
 1001d7c:	008040b4 	movhi	r2,258
 1001d80:	10a4ef04 	addi	r2,r2,-27716
 1001d84:	1080010b 	ldhu	r2,4(r2)
 1001d88:	10bfffcc 	andi	r2,r2,65535
 1001d8c:	1004c03a 	cmpne	r2,r2,zero
 1001d90:	10000f1e 	bne	r2,zero,1001dd0 <Chap9_GetConfiguration+0xac>
 1001d94:	008040b4 	movhi	r2,258
 1001d98:	10a4ef04 	addi	r2,r2,-27716
 1001d9c:	1080018b 	ldhu	r2,6(r2)
 1001da0:	10bfffcc 	andi	r2,r2,65535
 1001da4:	1004c03a 	cmpne	r2,r2,zero
 1001da8:	1000091e 	bne	r2,zero,1001dd0 <Chap9_GetConfiguration+0xac>
 1001dac:	008040b4 	movhi	r2,258
 1001db0:	10a4ef04 	addi	r2,r2,-27716
 1001db4:	1080020b 	ldhu	r2,8(r2)
 1001db8:	10bfffcc 	andi	r2,r2,65535
 1001dbc:	10800058 	cmpnei	r2,r2,1
 1001dc0:	1000031e 	bne	r2,zero,1001dd0 <Chap9_GetConfiguration+0xac>
        {

        Chap9_SingleTransmitEP0(&c, 1);
 1001dc4:	e13fff04 	addi	r4,fp,-4
 1001dc8:	01400044 	movi	r5,1
 1001dcc:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
        }
    }

}
 1001dd0:	e037883a 	mov	sp,fp
 1001dd4:	dfc00117 	ldw	ra,4(sp)
 1001dd8:	df000017 	ldw	fp,0(sp)
 1001ddc:	dec00204 	addi	sp,sp,8
 1001de0:	f800283a 	ret

01001de4 <Chap9_SetConfiguration>:

void Chap9_SetConfiguration(void)
{
 1001de4:	defffe04 	addi	sp,sp,-8
 1001de8:	dfc00115 	stw	ra,4(sp)
 1001dec:	df000015 	stw	fp,0(sp)
 1001df0:	d839883a 	mov	fp,sp
  
    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001df4:	008040b4 	movhi	r2,258
 1001df8:	10a4d104 	addi	r2,r2,-27836
 1001dfc:	10800003 	ldbu	r2,0(r2)
 1001e00:	1080008c 	andi	r2,r2,2
 1001e04:	10803fcc 	andi	r2,r2,255
 1001e08:	1005003a 	cmpeq	r2,r2,zero
 1001e0c:	10003d1e 	bne	r2,zero,1001f04 <Chap9_SetConfiguration+0x120>
    {
        if(ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 0)
 1001e10:	008040b4 	movhi	r2,258
 1001e14:	10a4ef04 	addi	r2,r2,-27716
 1001e18:	1080018b 	ldhu	r2,6(r2)
 1001e1c:	10bfffcc 	andi	r2,r2,65535
 1001e20:	1004c03a 	cmpne	r2,r2,zero
 1001e24:	10006d1e 	bne	r2,zero,1001fdc <Chap9_SetConfiguration+0x1f8>
 1001e28:	008040b4 	movhi	r2,258
 1001e2c:	10a4ef04 	addi	r2,r2,-27716
 1001e30:	1080020b 	ldhu	r2,8(r2)
 1001e34:	10bfffcc 	andi	r2,r2,65535
 1001e38:	1004c03a 	cmpne	r2,r2,zero
 1001e3c:	1000671e 	bne	r2,zero,1001fdc <Chap9_SetConfiguration+0x1f8>
        {
            if (ControlData.DeviceRequest.wValue == 0)
 1001e40:	008040b4 	movhi	r2,258
 1001e44:	10a4ef04 	addi	r2,r2,-27716
 1001e48:	1080010b 	ldhu	r2,4(r2)
 1001e4c:	10bfffcc 	andi	r2,r2,65535
 1001e50:	1004c03a 	cmpne	r2,r2,zero
 1001e54:	10000f1e 	bne	r2,zero,1001e94 <Chap9_SetConfiguration+0xb0>
            {
                /* put device in unconfigured state */
                bD13flags.bits.configuration = 0;
 1001e58:	010040b4 	movhi	r4,258
 1001e5c:	2124c804 	addi	r4,r4,-27872
 1001e60:	20c00017 	ldw	r3,0(r4)
 1001e64:	00bffdc4 	movi	r2,-9
 1001e68:	1884703a 	and	r2,r3,r2
 1001e6c:	20800015 	stw	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001e70:	00c040b4 	movhi	r3,258
 1001e74:	18e4d104 	addi	r3,r3,-27836
 1001e78:	18800003 	ldbu	r2,0(r3)
 1001e7c:	10800094 	ori	r2,r2,2
 1001e80:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
 1001e84:	0009883a 	mov	r4,zero
 1001e88:	000b883a 	mov	r5,zero
 1001e8c:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001e90:	00005206 	br	1001fdc <Chap9_SetConfiguration+0x1f8>
            }
            else if (ControlData.DeviceRequest.wValue == 1)
 1001e94:	008040b4 	movhi	r2,258
 1001e98:	10a4ef04 	addi	r2,r2,-27716
 1001e9c:	1080010b 	ldhu	r2,4(r2)
 1001ea0:	10bfffcc 	andi	r2,r2,65535
 1001ea4:	10800058 	cmpnei	r2,r2,1
 1001ea8:	1000141e 	bne	r2,zero,1001efc <Chap9_SetConfiguration+0x118>
            {
                /* Configure device */
                bD13flags.bits.configuration = 1;
 1001eac:	00c040b4 	movhi	r3,258
 1001eb0:	18e4c804 	addi	r3,r3,-27872
 1001eb4:	18800017 	ldw	r2,0(r3)
 1001eb8:	10800214 	ori	r2,r2,8
 1001ebc:	18800015 	stw	r2,0(r3)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001ec0:	010040b4 	movhi	r4,258
 1001ec4:	2124d104 	addi	r4,r4,-27836
 1001ec8:	20c00003 	ldbu	r3,0(r4)
 1001ecc:	00bfff44 	movi	r2,-3
 1001ed0:	1884703a 	and	r2,r3,r2
 1001ed4:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
 1001ed8:	00c040b4 	movhi	r3,258
 1001edc:	18e4d104 	addi	r3,r3,-27836
 1001ee0:	18800003 	ldbu	r2,0(r3)
 1001ee4:	10800114 	ori	r2,r2,4
 1001ee8:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
 1001eec:	0009883a 	mov	r4,zero
 1001ef0:	000b883a 	mov	r5,zero
 1001ef4:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001ef8:	00003806 	br	1001fdc <Chap9_SetConfiguration+0x1f8>
            }

            else
                Chap9_StallEP0InControlWrite();
 1001efc:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
 1001f00:	00003606 	br	1001fdc <Chap9_SetConfiguration+0x1f8>
        }
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0)
 1001f04:	008040b4 	movhi	r2,258
 1001f08:	10a4ef04 	addi	r2,r2,-27716
 1001f0c:	1080010b 	ldhu	r2,4(r2)
 1001f10:	10bfffcc 	andi	r2,r2,65535
 1001f14:	1004c03a 	cmpne	r2,r2,zero
 1001f18:	1000151e 	bne	r2,zero,1001f70 <Chap9_SetConfiguration+0x18c>
        {
            /* put device in unconfigured state */
            bD13flags.bits.configuration = 0;
 1001f1c:	010040b4 	movhi	r4,258
 1001f20:	2124c804 	addi	r4,r4,-27872
 1001f24:	20c00017 	ldw	r3,0(r4)
 1001f28:	00bffdc4 	movi	r2,-9
 1001f2c:	1884703a 	and	r2,r3,r2
 1001f30:	20800015 	stw	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001f34:	00c040b4 	movhi	r3,258
 1001f38:	18e4d104 	addi	r3,r3,-27836
 1001f3c:	18800003 	ldbu	r2,0(r3)
 1001f40:	10800094 	ori	r2,r2,2
 1001f44:	18800005 	stb	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1001f48:	010040b4 	movhi	r4,258
 1001f4c:	2124d104 	addi	r4,r4,-27836
 1001f50:	20c00003 	ldbu	r3,0(r4)
 1001f54:	00bffec4 	movi	r2,-5
 1001f58:	1884703a 	and	r2,r3,r2
 1001f5c:	20800005 	stb	r2,0(r4)
            Chap9_SingleTransmitEP0(0, 0);
 1001f60:	0009883a 	mov	r4,zero
 1001f64:	000b883a 	mov	r5,zero
 1001f68:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001f6c:	00001b06 	br	1001fdc <Chap9_SetConfiguration+0x1f8>

        }

        else if (ControlData.DeviceRequest.wValue == 1)
 1001f70:	008040b4 	movhi	r2,258
 1001f74:	10a4ef04 	addi	r2,r2,-27716
 1001f78:	1080010b 	ldhu	r2,4(r2)
 1001f7c:	10bfffcc 	andi	r2,r2,65535
 1001f80:	10800058 	cmpnei	r2,r2,1
 1001f84:	1000141e 	bne	r2,zero,1001fd8 <Chap9_SetConfiguration+0x1f4>
        {
            /* Configure device */
            bD13flags.bits.configuration = 1;
 1001f88:	00c040b4 	movhi	r3,258
 1001f8c:	18e4c804 	addi	r3,r3,-27872
 1001f90:	18800017 	ldw	r2,0(r3)
 1001f94:	10800214 	ori	r2,r2,8
 1001f98:	18800015 	stw	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001f9c:	010040b4 	movhi	r4,258
 1001fa0:	2124d104 	addi	r4,r4,-27836
 1001fa4:	20c00003 	ldbu	r3,0(r4)
 1001fa8:	00bfff44 	movi	r2,-3
 1001fac:	1884703a 	and	r2,r3,r2
 1001fb0:	20800005 	stb	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
 1001fb4:	00c040b4 	movhi	r3,258
 1001fb8:	18e4d104 	addi	r3,r3,-27836
 1001fbc:	18800003 	ldbu	r2,0(r3)
 1001fc0:	10800114 	ori	r2,r2,4
 1001fc4:	18800005 	stb	r2,0(r3)
            Chap9_SingleTransmitEP0(0, 0);
 1001fc8:	0009883a 	mov	r4,zero
 1001fcc:	000b883a 	mov	r5,zero
 1001fd0:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
 1001fd4:	00000106 	br	1001fdc <Chap9_SetConfiguration+0x1f8>
        }
        else
            Chap9_StallEP0InControlWrite();
 1001fd8:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
    }

}
 1001fdc:	e037883a 	mov	sp,fp
 1001fe0:	dfc00117 	ldw	ra,4(sp)
 1001fe4:	df000017 	ldw	fp,0(sp)
 1001fe8:	dec00204 	addi	sp,sp,8
 1001fec:	f800283a 	ret

01001ff0 <Chap9_GetInterface>:

void Chap9_GetInterface(void)
{
 1001ff0:	defffe04 	addi	sp,sp,-8
 1001ff4:	dfc00115 	stw	ra,4(sp)
 1001ff8:	df000015 	stw	fp,0(sp)
 1001ffc:	d839883a 	mov	fp,sp

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1002000:	008040b4 	movhi	r2,258
 1002004:	10a4d104 	addi	r2,r2,-27836
 1002008:	10800003 	ldbu	r2,0(r2)
 100200c:	1080008c 	andi	r2,r2,2
 1002010:	10803fcc 	andi	r2,r2,255
 1002014:	1005003a 	cmpeq	r2,r2,zero
 1002018:	1000021e 	bne	r2,zero,1002024 <Chap9_GetInterface+0x34>
        Chap9_StallEP0InControlRead();
 100201c:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
 1002020:	00001706 	br	1002080 <Chap9_GetInterface+0x90>


    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
 1002024:	008040b4 	movhi	r2,258
 1002028:	10a4ef04 	addi	r2,r2,-27716
 100202c:	1080010b 	ldhu	r2,4(r2)
 1002030:	10bfffcc 	andi	r2,r2,65535
 1002034:	1004c03a 	cmpne	r2,r2,zero
 1002038:	1000101e 	bne	r2,zero,100207c <Chap9_GetInterface+0x8c>
 100203c:	008040b4 	movhi	r2,258
 1002040:	10a4ef04 	addi	r2,r2,-27716
 1002044:	1080018b 	ldhu	r2,6(r2)
 1002048:	10bfffcc 	andi	r2,r2,65535
 100204c:	1004c03a 	cmpne	r2,r2,zero
 1002050:	10000a1e 	bne	r2,zero,100207c <Chap9_GetInterface+0x8c>
 1002054:	008040b4 	movhi	r2,258
 1002058:	10a4ef04 	addi	r2,r2,-27716
 100205c:	1080020b 	ldhu	r2,8(r2)
 1002060:	10bfffcc 	andi	r2,r2,65535
 1002064:	10800058 	cmpnei	r2,r2,1
 1002068:	1000041e 	bne	r2,zero,100207c <Chap9_GetInterface+0x8c>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
 100206c:	d127f584 	addi	r4,gp,-24618
 1002070:	01400044 	movi	r5,1
 1002074:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>


    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
 1002078:	00000106 	br	1002080 <Chap9_GetInterface+0x90>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
        else
            Chap9_StallEP0InControlRead();
 100207c:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
    }

}
 1002080:	e037883a 	mov	sp,fp
 1002084:	dfc00117 	ldw	ra,4(sp)
 1002088:	df000017 	ldw	fp,0(sp)
 100208c:	dec00204 	addi	sp,sp,8
 1002090:	f800283a 	ret

01002094 <Chap9_SetInterface>:

void Chap9_SetInterface(void)
{
 1002094:	defffd04 	addi	sp,sp,-12
 1002098:	dfc00215 	stw	ra,8(sp)
 100209c:	df000115 	stw	fp,4(sp)
 10020a0:	df000104 	addi	fp,sp,4
    UCHAR   dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
 10020a4:	008040b4 	movhi	r2,258
 10020a8:	10a4ef04 	addi	r2,r2,-27716
 10020ac:	10c00083 	ldbu	r3,2(r2)
 10020b0:	00bfe004 	movi	r2,-128
 10020b4:	1884703a 	and	r2,r3,r2
 10020b8:	e0bfff05 	stb	r2,-4(fp)

    if(dir)
 10020bc:	e0bfff03 	ldbu	r2,-4(fp)
 10020c0:	1005003a 	cmpeq	r2,r2,zero
 10020c4:	1000011e 	bne	r2,zero,10020cc <Chap9_SetInterface+0x38>
        Chap9_StallEP0InControlRead();
 10020c8:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 10020cc:	008040b4 	movhi	r2,258
 10020d0:	10a4d104 	addi	r2,r2,-27836
 10020d4:	10800003 	ldbu	r2,0(r2)
 10020d8:	1080008c 	andi	r2,r2,2
 10020dc:	10803fcc 	andi	r2,r2,255
 10020e0:	1005003a 	cmpeq	r2,r2,zero
 10020e4:	1000021e 	bne	r2,zero,10020f0 <Chap9_SetInterface+0x5c>
        Chap9_StallEP0InControlRead();
 10020e8:	10022880 	call	1002288 <Chap9_StallEP0InControlRead>
 10020ec:	00002406 	br	1002180 <Chap9_SetInterface+0xec>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
 10020f0:	008040b4 	movhi	r2,258
 10020f4:	10a4ef04 	addi	r2,r2,-27716
 10020f8:	1080010b 	ldhu	r2,4(r2)
 10020fc:	10bfffcc 	andi	r2,r2,65535
 1002100:	1004c03a 	cmpne	r2,r2,zero
 1002104:	10000b1e 	bne	r2,zero,1002134 <Chap9_SetInterface+0xa0>
 1002108:	008040b4 	movhi	r2,258
 100210c:	10a4ef04 	addi	r2,r2,-27716
 1002110:	1080018b 	ldhu	r2,6(r2)
 1002114:	10bfffcc 	andi	r2,r2,65535
 1002118:	1004c03a 	cmpne	r2,r2,zero
 100211c:	1000051e 	bne	r2,zero,1002134 <Chap9_SetInterface+0xa0>
        {
            ALTERNATIVE_SETTING = 0;
 1002120:	d027f585 	stb	zero,-24618(gp)
            Chap9_SingleTransmitEP0(0,0);
 1002124:	0009883a 	mov	r4,zero
 1002128:	000b883a 	mov	r5,zero
 100212c:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
 1002130:	00001306 	br	1002180 <Chap9_SetInterface+0xec>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
 1002134:	008040b4 	movhi	r2,258
 1002138:	10a4ef04 	addi	r2,r2,-27716
 100213c:	1080010b 	ldhu	r2,4(r2)
 1002140:	10bfffcc 	andi	r2,r2,65535
 1002144:	10800058 	cmpnei	r2,r2,1
 1002148:	10000c1e 	bne	r2,zero,100217c <Chap9_SetInterface+0xe8>
 100214c:	008040b4 	movhi	r2,258
 1002150:	10a4ef04 	addi	r2,r2,-27716
 1002154:	1080018b 	ldhu	r2,6(r2)
 1002158:	10bfffcc 	andi	r2,r2,65535
 100215c:	1004c03a 	cmpne	r2,r2,zero
 1002160:	1000061e 	bne	r2,zero,100217c <Chap9_SetInterface+0xe8>
        {
            ALTERNATIVE_SETTING = 1;
 1002164:	00800044 	movi	r2,1
 1002168:	d0a7f585 	stb	r2,-24618(gp)
            Chap9_SingleTransmitEP0(0,0);
 100216c:	0009883a 	mov	r4,zero
 1002170:	000b883a 	mov	r5,zero
 1002174:	10022ec0 	call	10022ec <Chap9_SingleTransmitEP0>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
 1002178:	00000106 	br	1002180 <Chap9_SetInterface+0xec>
            ALTERNATIVE_SETTING = 1;
            Chap9_SingleTransmitEP0(0,0);
        }
        else
        {
            Chap9_StallEP0InControlWrite();
 100217c:	10022240 	call	1002224 <Chap9_StallEP0InControlWrite>
        }
    }

}
 1002180:	e037883a 	mov	sp,fp
 1002184:	dfc00117 	ldw	ra,4(sp)
 1002188:	df000017 	ldw	fp,0(sp)
 100218c:	dec00204 	addi	sp,sp,8
 1002190:	f800283a 	ret

01002194 <Chap9_StallEP0>:
// *************************************************************************
// Chap9 support functions
// *************************************************************************

void Chap9_StallEP0(void)
{
 1002194:	defffd04 	addi	sp,sp,-12
 1002198:	dfc00215 	stw	ra,8(sp)
 100219c:	df000115 	stw	fp,4(sp)
 10021a0:	df000104 	addi	fp,sp,4
    UCHAR dir;
    dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
 10021a4:	008040b4 	movhi	r2,258
 10021a8:	10a4ef04 	addi	r2,r2,-27716
 10021ac:	10c00083 	ldbu	r3,2(r2)
 10021b0:	00bfe004 	movi	r2,-128
 10021b4:	1884703a 	and	r2,r3,r2
 10021b8:	e0bfff05 	stb	r2,-4(fp)
    if(dir)
 10021bc:	e0bfff03 	ldbu	r2,-4(fp)
 10021c0:	1005003a 	cmpeq	r2,r2,zero
 10021c4:	1000021e 	bne	r2,zero,10021d0 <Chap9_StallEP0+0x3c>
    {
        Hal4D13_StallEP0InControlRead();
 10021c8:	100457c0 	call	100457c <Hal4D13_StallEP0InControlRead>
 10021cc:	00000106 	br	10021d4 <Chap9_StallEP0+0x40>
    }
    else
    {
        Hal4D13_StallEP0InControlWrite();
 10021d0:	10045400 	call	1004540 <Hal4D13_StallEP0InControlWrite>
    }

    RaiseIRQL();
 10021d4:	10046940 	call	1004694 <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 10021d8:	008040b4 	movhi	r2,258
 10021dc:	10a4ef04 	addi	r2,r2,-27716
 10021e0:	10800003 	ldbu	r2,0(r2)
 10021e4:	10803fcc 	andi	r2,r2,255
 10021e8:	1004c03a 	cmpne	r2,r2,zero
 10021ec:	1000071e 	bne	r2,zero,100220c <Chap9_StallEP0+0x78>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 10021f0:	010040b4 	movhi	r4,258
 10021f4:	2124c804 	addi	r4,r4,-27872
 10021f8:	20c00017 	ldw	r3,0(r4)
 10021fc:	00bc3fc4 	movi	r2,-3841
 1002200:	1884703a 	and	r2,r3,r2
 1002204:	1081c014 	ori	r2,r2,1792
 1002208:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 100220c:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
}
 1002210:	e037883a 	mov	sp,fp
 1002214:	dfc00117 	ldw	ra,4(sp)
 1002218:	df000017 	ldw	fp,0(sp)
 100221c:	dec00204 	addi	sp,sp,8
 1002220:	f800283a 	ret

01002224 <Chap9_StallEP0InControlWrite>:
void Chap9_StallEP0InControlWrite(void)
{
 1002224:	defffe04 	addi	sp,sp,-8
 1002228:	dfc00115 	stw	ra,4(sp)
 100222c:	df000015 	stw	fp,0(sp)
 1002230:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlWrite();
 1002234:	10045400 	call	1004540 <Hal4D13_StallEP0InControlWrite>

    RaiseIRQL();
 1002238:	10046940 	call	1004694 <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 100223c:	008040b4 	movhi	r2,258
 1002240:	10a4ef04 	addi	r2,r2,-27716
 1002244:	10800003 	ldbu	r2,0(r2)
 1002248:	10803fcc 	andi	r2,r2,255
 100224c:	1004c03a 	cmpne	r2,r2,zero
 1002250:	1000071e 	bne	r2,zero,1002270 <Chap9_StallEP0InControlWrite+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1002254:	010040b4 	movhi	r4,258
 1002258:	2124c804 	addi	r4,r4,-27872
 100225c:	20c00017 	ldw	r3,0(r4)
 1002260:	00bc3fc4 	movi	r2,-3841
 1002264:	1884703a 	and	r2,r3,r2
 1002268:	1081c014 	ori	r2,r2,1792
 100226c:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 1002270:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
}
 1002274:	e037883a 	mov	sp,fp
 1002278:	dfc00117 	ldw	ra,4(sp)
 100227c:	df000017 	ldw	fp,0(sp)
 1002280:	dec00204 	addi	sp,sp,8
 1002284:	f800283a 	ret

01002288 <Chap9_StallEP0InControlRead>:

void Chap9_StallEP0InControlRead(void)
{
 1002288:	defffe04 	addi	sp,sp,-8
 100228c:	dfc00115 	stw	ra,4(sp)
 1002290:	df000015 	stw	fp,0(sp)
 1002294:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlRead();
 1002298:	100457c0 	call	100457c <Hal4D13_StallEP0InControlRead>
    RaiseIRQL();
 100229c:	10046940 	call	1004694 <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 10022a0:	008040b4 	movhi	r2,258
 10022a4:	10a4ef04 	addi	r2,r2,-27716
 10022a8:	10800003 	ldbu	r2,0(r2)
 10022ac:	10803fcc 	andi	r2,r2,255
 10022b0:	1004c03a 	cmpne	r2,r2,zero
 10022b4:	1000071e 	bne	r2,zero,10022d4 <Chap9_StallEP0InControlRead+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 10022b8:	010040b4 	movhi	r4,258
 10022bc:	2124c804 	addi	r4,r4,-27872
 10022c0:	20c00017 	ldw	r3,0(r4)
 10022c4:	00bc3fc4 	movi	r2,-3841
 10022c8:	1884703a 	and	r2,r3,r2
 10022cc:	1081c014 	ori	r2,r2,1792
 10022d0:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 10022d4:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
}
 10022d8:	e037883a 	mov	sp,fp
 10022dc:	dfc00117 	ldw	ra,4(sp)
 10022e0:	df000017 	ldw	fp,0(sp)
 10022e4:	dec00204 	addi	sp,sp,8
 10022e8:	f800283a 	ret

010022ec <Chap9_SingleTransmitEP0>:

void Chap9_SingleTransmitEP0(PUCHAR buf, USHORT len)
{
 10022ec:	defffc04 	addi	sp,sp,-16
 10022f0:	dfc00315 	stw	ra,12(sp)
 10022f4:	df000215 	stw	fp,8(sp)
 10022f8:	df000204 	addi	fp,sp,8
 10022fc:	e13ffe15 	stw	r4,-8(fp)
 1002300:	e17fff0d 	sth	r5,-4(fp)

    Hal4D13_SingleTransmitEP0(buf, len);
 1002304:	e17fff0b 	ldhu	r5,-4(fp)
 1002308:	e13ffe17 	ldw	r4,-8(fp)
 100230c:	10043900 	call	1004390 <Hal4D13_SingleTransmitEP0>

    RaiseIRQL();
 1002310:	10046940 	call	1004694 <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 1002314:	008040b4 	movhi	r2,258
 1002318:	10a4ef04 	addi	r2,r2,-27716
 100231c:	10800003 	ldbu	r2,0(r2)
 1002320:	10803fcc 	andi	r2,r2,255
 1002324:	1004c03a 	cmpne	r2,r2,zero
 1002328:	1000111e 	bne	r2,zero,1002370 <Chap9_SingleTransmitEP0+0x84>
    {
        ControlData.wLength = ControlData.wCount = len;
 100232c:	00c040b4 	movhi	r3,258
 1002330:	18e4ef04 	addi	r3,r3,-27716
 1002334:	e0bfff0b 	ldhu	r2,-4(fp)
 1002338:	1880030d 	sth	r2,12(r3)
 100233c:	008040b4 	movhi	r2,258
 1002340:	10a4ef04 	addi	r2,r2,-27716
 1002344:	10c0030b 	ldhu	r3,12(r2)
 1002348:	008040b4 	movhi	r2,258
 100234c:	10a4ef04 	addi	r2,r2,-27716
 1002350:	10c0028d 	sth	r3,10(r2)
        bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1002354:	010040b4 	movhi	r4,258
 1002358:	2124c804 	addi	r4,r4,-27872
 100235c:	20c00017 	ldw	r3,0(r4)
 1002360:	00bc3fc4 	movi	r2,-3841
 1002364:	1884703a 	and	r2,r3,r2
 1002368:	10810014 	ori	r2,r2,1024
 100236c:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 1002370:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
}
 1002374:	e037883a 	mov	sp,fp
 1002378:	dfc00117 	ldw	ra,4(sp)
 100237c:	df000017 	ldw	fp,0(sp)
 1002380:	dec00204 	addi	sp,sp,8
 1002384:	f800283a 	ret

01002388 <Chap9_BurstTransmitEP0>:

void Chap9_BurstTransmitEP0(PUCHAR pData, USHORT len)
{
 1002388:	defffc04 	addi	sp,sp,-16
 100238c:	dfc00315 	stw	ra,12(sp)
 1002390:	df000215 	stw	fp,8(sp)
 1002394:	df000204 	addi	fp,sp,8
 1002398:	e13ffe15 	stw	r4,-8(fp)
 100239c:	e17fff0d 	sth	r5,-4(fp)
    ControlData.wCount = 0;
 10023a0:	008040b4 	movhi	r2,258
 10023a4:	10a4ef04 	addi	r2,r2,-27716
 10023a8:	1000030d 	sth	zero,12(r2)
    if(ControlData.wLength > len)
 10023ac:	008040b4 	movhi	r2,258
 10023b0:	10a4ef04 	addi	r2,r2,-27716
 10023b4:	1080028b 	ldhu	r2,10(r2)
 10023b8:	10ffffcc 	andi	r3,r2,65535
 10023bc:	e0bfff0b 	ldhu	r2,-4(fp)
 10023c0:	10c0042e 	bgeu	r2,r3,10023d4 <Chap9_BurstTransmitEP0+0x4c>
        ControlData.wLength = len;
 10023c4:	00c040b4 	movhi	r3,258
 10023c8:	18e4ef04 	addi	r3,r3,-27716
 10023cc:	e0bfff0b 	ldhu	r2,-4(fp)
 10023d0:	1880028d 	sth	r2,10(r3)

    ControlData.Addr.pData = pData;
 10023d4:	00c040b4 	movhi	r3,258
 10023d8:	18e4ef04 	addi	r3,r3,-27716
 10023dc:	e0bffe17 	ldw	r2,-8(fp)
 10023e0:	18800415 	stw	r2,16(r3)

        if( ControlData.wLength >= EP0_PACKET_SIZE)
 10023e4:	008040b4 	movhi	r2,258
 10023e8:	10a4ef04 	addi	r2,r2,-27716
 10023ec:	1080028b 	ldhu	r2,10(r2)
 10023f0:	10bfffcc 	andi	r2,r2,65535
 10023f4:	10801030 	cmpltui	r2,r2,64
 10023f8:	10001c1e 	bne	r2,zero,100246c <Chap9_BurstTransmitEP0+0xe4>
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, EP0_PACKET_SIZE);
 10023fc:	01000044 	movi	r4,1
 1002400:	e17ffe17 	ldw	r5,-8(fp)
 1002404:	01801004 	movi	r6,64
 1002408:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
 100240c:	10046940 	call	1004694 <usb_disable_all_interrupts>
            if(!ControlData.Abort)
 1002410:	008040b4 	movhi	r2,258
 1002414:	10a4ef04 	addi	r2,r2,-27716
 1002418:	10800003 	ldbu	r2,0(r2)
 100241c:	10803fcc 	andi	r2,r2,255
 1002420:	1004c03a 	cmpne	r2,r2,zero
 1002424:	10000f1e 	bne	r2,zero,1002464 <Chap9_BurstTransmitEP0+0xdc>
            {
                ControlData.wCount += EP0_PACKET_SIZE;
 1002428:	008040b4 	movhi	r2,258
 100242c:	10a4ef04 	addi	r2,r2,-27716
 1002430:	1080030b 	ldhu	r2,12(r2)
 1002434:	10801004 	addi	r2,r2,64
 1002438:	1007883a 	mov	r3,r2
 100243c:	008040b4 	movhi	r2,258
 1002440:	10a4ef04 	addi	r2,r2,-27716
 1002444:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 1002448:	010040b4 	movhi	r4,258
 100244c:	2124c804 	addi	r4,r4,-27872
 1002450:	20c00017 	ldw	r3,0(r4)
 1002454:	00bc3fc4 	movi	r2,-3841
 1002458:	1884703a 	and	r2,r3,r2
 100245c:	10804014 	ori	r2,r2,256
 1002460:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
 1002464:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
 1002468:	00002106 	br	10024f0 <Chap9_BurstTransmitEP0+0x168>
        }
        else
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, ControlData.wLength);
 100246c:	008040b4 	movhi	r2,258
 1002470:	10a4ef04 	addi	r2,r2,-27716
 1002474:	1080028b 	ldhu	r2,10(r2)
 1002478:	11bfffcc 	andi	r6,r2,65535
 100247c:	01000044 	movi	r4,1
 1002480:	e17ffe17 	ldw	r5,-8(fp)
 1002484:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
 1002488:	10046940 	call	1004694 <usb_disable_all_interrupts>
            if(!ControlData.Abort)
 100248c:	008040b4 	movhi	r2,258
 1002490:	10a4ef04 	addi	r2,r2,-27716
 1002494:	10800003 	ldbu	r2,0(r2)
 1002498:	10803fcc 	andi	r2,r2,255
 100249c:	1004c03a 	cmpne	r2,r2,zero
 10024a0:	1000121e 	bne	r2,zero,10024ec <Chap9_BurstTransmitEP0+0x164>
            {
                ControlData.wCount += ControlData.wLength;
 10024a4:	008040b4 	movhi	r2,258
 10024a8:	10a4ef04 	addi	r2,r2,-27716
 10024ac:	10c0030b 	ldhu	r3,12(r2)
 10024b0:	008040b4 	movhi	r2,258
 10024b4:	10a4ef04 	addi	r2,r2,-27716
 10024b8:	1080028b 	ldhu	r2,10(r2)
 10024bc:	1885883a 	add	r2,r3,r2
 10024c0:	1007883a 	mov	r3,r2
 10024c4:	008040b4 	movhi	r2,258
 10024c8:	10a4ef04 	addi	r2,r2,-27716
 10024cc:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 10024d0:	010040b4 	movhi	r4,258
 10024d4:	2124c804 	addi	r4,r4,-27872
 10024d8:	20c00017 	ldw	r3,0(r4)
 10024dc:	00bc3fc4 	movi	r2,-3841
 10024e0:	1884703a 	and	r2,r3,r2
 10024e4:	10810014 	ori	r2,r2,1024
 10024e8:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
 10024ec:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
        }
}
 10024f0:	e037883a 	mov	sp,fp
 10024f4:	dfc00117 	ldw	ra,4(sp)
 10024f8:	df000017 	ldw	fp,0(sp)
 10024fc:	dec00204 	addi	sp,sp,8
 1002500:	f800283a 	ret

01002504 <SetupToken_Handler>:
		{ "Iso mode enable", "Philips D13bus handler", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "read Firmware version ",
				"RESERVED", "RESERVED", "RESERVED", };

void SetupToken_Handler(void) {
 1002504:	defffd04 	addi	sp,sp,-12
 1002508:	dfc00215 	stw	ra,8(sp)
 100250c:	df000115 	stw	fp,4(sp)
 1002510:	df000104 	addi	fp,sp,4
	unsigned short j;
	RaiseIRQL();
 1002514:	10046940 	call	1004694 <usb_disable_all_interrupts>
	bD13flags.bits.At_IRQL1 = 1;
 1002518:	00c040b4 	movhi	r3,258
 100251c:	18e4c804 	addi	r3,r3,-27872
 1002520:	18800017 	ldw	r2,0(r3)
 1002524:	10800114 	ori	r2,r2,4
 1002528:	18800015 	stw	r2,0(r3)
	ControlData.Abort = FALSE;
 100252c:	008040b4 	movhi	r2,258
 1002530:	10a4ef04 	addi	r2,r2,-27716
 1002534:	10000005 	stb	zero,0(r2)

	ControlData.wLength = 0;
 1002538:	008040b4 	movhi	r2,258
 100253c:	10a4ef04 	addi	r2,r2,-27716
 1002540:	1000028d 	sth	zero,10(r2)
	ControlData.wCount = 0;
 1002544:	008040b4 	movhi	r2,258
 1002548:	10a4ef04 	addi	r2,r2,-27716
 100254c:	1000030d 	sth	zero,12(r2)

	j = Hal4D13_ReadEndpointWOClearBuffer(EPINDEX4EP0_CONTROL_OUT,
 1002550:	014040b4 	movhi	r5,258
 1002554:	2964ef84 	addi	r5,r5,-27714
 1002558:	0009883a 	mov	r4,zero
 100255c:	01800204 	movi	r6,8
 1002560:	10038940 	call	1003894 <Hal4D13_ReadEndpointWOClearBuffer>
 1002564:	e0bfff0d 	sth	r2,-4(fp)
	 ControlData.DeviceRequest.bRequest,
	 ControlData.DeviceRequest.wValue,
	 ControlData.DeviceRequest.wIndex,
	 ControlData.DeviceRequest.wLength);
	 */
	if (j == sizeof(DEVICE_REQUEST))
 1002568:	e0bfff0b 	ldhu	r2,-4(fp)
 100256c:	10800218 	cmpnei	r2,r2,8
 1002570:	1000711e 	bne	r2,zero,1002738 <SetupToken_Handler+0x234>
		//printf("ControlData.DeviceRequest.bRequest:0x%X\n",ControlData.DeviceRequest.bRequest);//1BYTE
		//printf("ControlData.DeviceRequest.wValue:0x%X\n",ControlData.DeviceRequest.wValue); //2BYTE
		//printf("ControlData.DeviceRequest.wIndex:0x%X\n",ControlData.DeviceRequest.wIndex); //2BYTE
		//printf("ControlData.DeviceRequest.wLength:0x%X\n",ControlData.DeviceRequest.wLength);//2BYTE

		bD13flags.bits.At_IRQL1 = 0;
 1002574:	010040b4 	movhi	r4,258
 1002578:	2124c804 	addi	r4,r4,-27872
 100257c:	20c00017 	ldw	r3,0(r4)
 1002580:	00bffec4 	movi	r2,-5
 1002584:	1884703a 	and	r2,r3,r2
 1002588:	20800015 	stw	r2,0(r4)
		LowerIRQL();
 100258c:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
		ControlData.wLength = ControlData.DeviceRequest.wLength;
 1002590:	008040b4 	movhi	r2,258
 1002594:	10a4ef04 	addi	r2,r2,-27716
 1002598:	10c0020b 	ldhu	r3,8(r2)
 100259c:	008040b4 	movhi	r2,258
 10025a0:	10a4ef04 	addi	r2,r2,-27716
 10025a4:	10c0028d 	sth	r3,10(r2)
		ControlData.wCount = 0;
 10025a8:	008040b4 	movhi	r2,258
 10025ac:	10a4ef04 	addi	r2,r2,-27716
 10025b0:	1000030d 	sth	zero,12(r2)

		if (ControlData.DeviceRequest.bmRequestType
 10025b4:	008040b4 	movhi	r2,258
 10025b8:	10a4ef04 	addi	r2,r2,-27716
 10025bc:	10800083 	ldbu	r2,2(r2)
 10025c0:	10803fcc 	andi	r2,r2,255
 10025c4:	1080201c 	xori	r2,r2,128
 10025c8:	10bfe004 	addi	r2,r2,-128
 10025cc:	1004403a 	cmpge	r2,r2,zero
 10025d0:	1000221e 	bne	r2,zero,100265c <SetupToken_Handler+0x158>
				& (UCHAR) USB_ENDPOINT_DIRECTION_MASK) {
			/* get command */
			RaiseIRQL();
 10025d4:	10046940 	call	1004694 <usb_disable_all_interrupts>
			ML_AcknowledgeSETUP();
 10025d8:	1002b300 	call	1002b30 <ML_AcknowledgeSETUP>
			if ((ControlData.DeviceRequest.bRequest == 0)
 10025dc:	008040b4 	movhi	r2,258
 10025e0:	10a4ef04 	addi	r2,r2,-27716
 10025e4:	108000c3 	ldbu	r2,3(r2)
 10025e8:	10803fcc 	andi	r2,r2,255
 10025ec:	1005003a 	cmpeq	r2,r2,zero
 10025f0:	1007883a 	mov	r3,r2
 10025f4:	008040b4 	movhi	r2,258
 10025f8:	10a4ef04 	addi	r2,r2,-27716
 10025fc:	10800083 	ldbu	r2,2(r2)
 1002600:	10803fcc 	andi	r2,r2,255
 1002604:	10803020 	cmpeqi	r2,r2,192
 1002608:	1884703a 	and	r2,r3,r2
 100260c:	10803fcc 	andi	r2,r2,255
 1002610:	1005003a 	cmpeq	r2,r2,zero
 1002614:	1000081e 	bne	r2,zero,1002638 <SetupToken_Handler+0x134>
					& (ControlData.DeviceRequest.bmRequestType == 0xc0))
				bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1002618:	010040b4 	movhi	r4,258
 100261c:	2124c804 	addi	r4,r4,-27872
 1002620:	20c00017 	ldw	r3,0(r4)
 1002624:	00bc3fc4 	movi	r2,-3841
 1002628:	1884703a 	and	r2,r3,r2
 100262c:	10810014 	ori	r2,r2,1024
 1002630:	20800015 	stw	r2,0(r4)
 1002634:	00000706 	br	1002654 <SetupToken_Handler+0x150>
			else
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 1002638:	010040b4 	movhi	r4,258
 100263c:	2124c804 	addi	r4,r4,-27872
 1002640:	20c00017 	ldw	r3,0(r4)
 1002644:	00bc3fc4 	movi	r2,-3841
 1002648:	1884703a 	and	r2,r3,r2
 100264c:	1080c014 	ori	r2,r2,768
 1002650:	20800015 	stw	r2,0(r4)

			LowerIRQL();
 1002654:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
 1002658:	00004206 	br	1002764 <SetupToken_Handler+0x260>
		} else {
			/* set command */

			if (ControlData.DeviceRequest.wLength == 0) {
 100265c:	008040b4 	movhi	r2,258
 1002660:	10a4ef04 	addi	r2,r2,-27716
 1002664:	1080020b 	ldhu	r2,8(r2)
 1002668:	10bfffcc 	andi	r2,r2,65535
 100266c:	1004c03a 	cmpne	r2,r2,zero
 1002670:	10000b1e 	bne	r2,zero,10026a0 <SetupToken_Handler+0x19c>
				/* Set command  without Data stage*/
				RaiseIRQL();
 1002674:	10046940 	call	1004694 <usb_disable_all_interrupts>
				ML_AcknowledgeSETUP();
 1002678:	1002b300 	call	1002b30 <ML_AcknowledgeSETUP>
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 100267c:	010040b4 	movhi	r4,258
 1002680:	2124c804 	addi	r4,r4,-27872
 1002684:	20c00017 	ldw	r3,0(r4)
 1002688:	00bc3fc4 	movi	r2,-3841
 100268c:	1884703a 	and	r2,r3,r2
 1002690:	1080c014 	ori	r2,r2,768
 1002694:	20800015 	stw	r2,0(r4)
				LowerIRQL();
 1002698:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
 100269c:	00003106 	br	1002764 <SetupToken_Handler+0x260>
			} else {
				/*
				 // Set command  with Data stage
				 // get Data Buffer
				 */
				if (ControlData.DeviceRequest.wLength <= MAX_CONTROLDATA_SIZE) {
 10026a0:	008040b4 	movhi	r2,258
 10026a4:	10a4ef04 	addi	r2,r2,-27716
 10026a8:	1080020b 	ldhu	r2,8(r2)
 10026ac:	10bfffcc 	andi	r2,r2,65535
 10026b0:	10800468 	cmpgeui	r2,r2,17
 10026b4:	10000b1e 	bne	r2,zero,10026e4 <SetupToken_Handler+0x1e0>
					/* set command with OUT token */
					RaiseIRQL();
 10026b8:	10046940 	call	1004694 <usb_disable_all_interrupts>
					bD13flags.bits.DCP_state = USBFSM4DCP_DATAOUT;
 10026bc:	010040b4 	movhi	r4,258
 10026c0:	2124c804 	addi	r4,r4,-27872
 10026c4:	20c00017 	ldw	r3,0(r4)
 10026c8:	00bc3fc4 	movi	r2,-3841
 10026cc:	1884703a 	and	r2,r3,r2
 10026d0:	10808014 	ori	r2,r2,512
 10026d4:	20800015 	stw	r2,0(r4)
					LowerIRQL();
 10026d8:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
					ML_AcknowledgeSETUP();
 10026dc:	1002b300 	call	1002b30 <ML_AcknowledgeSETUP>
 10026e0:	00002006 	br	1002764 <SetupToken_Handler+0x260>

				} else {
					RaiseIRQL();
 10026e4:	10046940 	call	1004694 <usb_disable_all_interrupts>
					ML_AcknowledgeSETUP();
 10026e8:	1002b300 	call	1002b30 <ML_AcknowledgeSETUP>
					Hal4D13_StallEP0InControlWrite();
 10026ec:	10045400 	call	1004540 <Hal4D13_StallEP0InControlWrite>
					bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 10026f0:	010040b4 	movhi	r4,258
 10026f4:	2124c804 	addi	r4,r4,-27872
 10026f8:	20c00017 	ldw	r3,0(r4)
 10026fc:	00bc3fc4 	movi	r2,-3841
 1002700:	1884703a 	and	r2,r3,r2
 1002704:	1081c014 	ori	r2,r2,1792
 1002708:	20800015 	stw	r2,0(r4)
					printf(
 100270c:	008040b4 	movhi	r2,258
 1002710:	10a4c804 	addi	r2,r2,-27872
 1002714:	10800017 	ldw	r2,0(r2)
 1002718:	1004d23a 	srli	r2,r2,8
 100271c:	108003cc 	andi	r2,r2,15
 1002720:	11403fcc 	andi	r5,r2,255
 1002724:	01004074 	movhi	r4,257
 1002728:	21131504 	addi	r4,r4,19540
 100272c:	10061c00 	call	10061c0 <printf>
							"bD13flags.bits.DCP_state = x%hx\n Unknow set up command\n",
							bD13flags.bits.DCP_state);
					LowerIRQL();
 1002730:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
 1002734:	00000b06 	br	1002764 <SetupToken_Handler+0x260>
				}
			}
		}
	} else {
		printf("wrong setup command\n");
 1002738:	01004074 	movhi	r4,257
 100273c:	21132304 	addi	r4,r4,19596
 1002740:	10062fc0 	call	10062fc <puts>
		bD13flags.bits.At_IRQL1 = 0;
 1002744:	010040b4 	movhi	r4,258
 1002748:	2124c804 	addi	r4,r4,-27872
 100274c:	20c00017 	ldw	r3,0(r4)
 1002750:	00bffec4 	movi	r2,-5
 1002754:	1884703a 	and	r2,r3,r2
 1002758:	20800015 	stw	r2,0(r4)
		LowerIRQL();
 100275c:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
		Chap9_StallEP0();
 1002760:	10021940 	call	1002194 <Chap9_StallEP0>
	}

	// printf("To_Ha_end\n");
}
 1002764:	e037883a 	mov	sp,fp
 1002768:	dfc00117 	ldw	ra,4(sp)
 100276c:	df000017 	ldw	fp,0(sp)
 1002770:	dec00204 	addi	sp,sp,8
 1002774:	f800283a 	ret

01002778 <DeviceRequest_Handler>:

void DeviceRequest_Handler(void) {
 1002778:	defffd04 	addi	sp,sp,-12
 100277c:	dfc00215 	stw	ra,8(sp)
 1002780:	df000115 	stw	fp,4(sp)
 1002784:	df000104 	addi	fp,sp,4
	UCHAR type, req;

	type = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_TYPE_MASK;
 1002788:	008040b4 	movhi	r2,258
 100278c:	10a4ef04 	addi	r2,r2,-27716
 1002790:	10800083 	ldbu	r2,2(r2)
 1002794:	1080180c 	andi	r2,r2,96
 1002798:	e0bfff45 	stb	r2,-3(fp)
	req = ControlData.DeviceRequest.bRequest & USB_REQUEST_MASK;
 100279c:	008040b4 	movhi	r2,258
 10027a0:	10a4ef04 	addi	r2,r2,-27716
 10027a4:	108000c3 	ldbu	r2,3(r2)
 10027a8:	e0bfff05 	stb	r2,-4(fp)
	//if (bD13flags.bits.verbose==1)
	//   printf("type = 0x%02x, req = 0x%02x\n", type, req);

	// help_devreq(type, req); /* print out device request */

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
 10027ac:	e0bfff43 	ldbu	r2,-3(fp)
 10027b0:	1004c03a 	cmpne	r2,r2,zero
 10027b4:	10000c1e 	bne	r2,zero,10027e8 <DeviceRequest_Handler+0x70>
 10027b8:	e0bfff03 	ldbu	r2,-4(fp)
 10027bc:	10800368 	cmpgeui	r2,r2,13
 10027c0:	1000091e 	bne	r2,zero,10027e8 <DeviceRequest_Handler+0x70>
		(*StandardDeviceRequest[req])();
 10027c4:	e0bfff03 	ldbu	r2,-4(fp)
 10027c8:	00c04074 	movhi	r3,257
 10027cc:	18d59a04 	addi	r3,r3,22120
 10027d0:	1085883a 	add	r2,r2,r2
 10027d4:	1085883a 	add	r2,r2,r2
 10027d8:	10c5883a 	add	r2,r2,r3
 10027dc:	10800017 	ldw	r2,0(r2)
 10027e0:	103ee83a 	callr	r2
	//if (bD13flags.bits.verbose==1)
	//   printf("type = 0x%02x, req = 0x%02x\n", type, req);

	// help_devreq(type, req); /* print out device request */

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
 10027e4:	00001006 	br	1002828 <DeviceRequest_Handler+0xb0>
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST))
		(*ClassDeviceRequest[req])();
	else if ((type == USB_VENDOR_REQUEST) && (req < MAX_VENDOR_REQUEST))
 10027e8:	e0bfff43 	ldbu	r2,-3(fp)
 10027ec:	10801018 	cmpnei	r2,r2,64
 10027f0:	10000c1e 	bne	r2,zero,1002824 <DeviceRequest_Handler+0xac>
 10027f4:	e0bfff03 	ldbu	r2,-4(fp)
 10027f8:	108003e8 	cmpgeui	r2,r2,15
 10027fc:	1000091e 	bne	r2,zero,1002824 <DeviceRequest_Handler+0xac>
		(*VendorDeviceRequest[req])();
 1002800:	e0bfff03 	ldbu	r2,-4(fp)
 1002804:	00c04074 	movhi	r3,257
 1002808:	18d5bc04 	addi	r3,r3,22256
 100280c:	1085883a 	add	r2,r2,r2
 1002810:	1085883a 	add	r2,r2,r2
 1002814:	10c5883a 	add	r2,r2,r3
 1002818:	10800017 	ldw	r2,0(r2)
 100281c:	103ee83a 	callr	r2

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST))
		(*ClassDeviceRequest[req])();
	else if ((type == USB_VENDOR_REQUEST) && (req < MAX_VENDOR_REQUEST))
 1002820:	00000106 	br	1002828 <DeviceRequest_Handler+0xb0>
		(*VendorDeviceRequest[req])();
	else {
		Chap9_StallEP0();
 1002824:	10021940 	call	1002194 <Chap9_StallEP0>
	}
}
 1002828:	e037883a 	mov	sp,fp
 100282c:	dfc00117 	ldw	ra,4(sp)
 1002830:	df000017 	ldw	fp,0(sp)
 1002834:	dec00204 	addi	sp,sp,8
 1002838:	f800283a 	ret

0100283c <help_devreq>:

void help_devreq(UCHAR type, UCHAR req) {
 100283c:	defffb04 	addi	sp,sp,-20
 1002840:	dfc00415 	stw	ra,16(sp)
 1002844:	df000315 	stw	fp,12(sp)
 1002848:	df000304 	addi	fp,sp,12
 100284c:	e13ffe05 	stb	r4,-8(fp)
 1002850:	e17fff05 	stb	r5,-4(fp)
	UCHAR typ = type;
 1002854:	e0bffe03 	ldbu	r2,-8(fp)
 1002858:	e0bffd05 	stb	r2,-12(fp)
	typ >>= 5;
 100285c:	e0bffd03 	ldbu	r2,-12(fp)
 1002860:	1004d17a 	srli	r2,r2,5
 1002864:	e0bffd05 	stb	r2,-12(fp)

	if (type == USB_STANDARD_REQUEST) {
 1002868:	e0bffe03 	ldbu	r2,-8(fp)
 100286c:	1004c03a 	cmpne	r2,r2,zero
 1002870:	1000121e 	bne	r2,zero,10028bc <help_devreq+0x80>
		printf("Request Type = %s, Request = %s.\n",
 1002874:	e0bffd03 	ldbu	r2,-12(fp)
 1002878:	00c04074 	movhi	r3,257
 100287c:	18d5ab04 	addi	r3,r3,22188
 1002880:	1085883a 	add	r2,r2,r2
 1002884:	1085883a 	add	r2,r2,r2
 1002888:	10c5883a 	add	r2,r2,r3
 100288c:	11400017 	ldw	r5,0(r2)
 1002890:	e0bfff03 	ldbu	r2,-4(fp)
 1002894:	00c04074 	movhi	r3,257
 1002898:	18d5af04 	addi	r3,r3,22204
 100289c:	1085883a 	add	r2,r2,r2
 10028a0:	1085883a 	add	r2,r2,r2
 10028a4:	10c5883a 	add	r2,r2,r3
 10028a8:	11800017 	ldw	r6,0(r2)
 10028ac:	01004074 	movhi	r4,257
 10028b0:	21132804 	addi	r4,r4,19616
 10028b4:	10061c00 	call	10061c0 <printf>
 10028b8:	00002506 	br	1002950 <help_devreq+0x114>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_STANDARD_REQUEST[req]);
	} else if (type == USB_CLASS_REQUEST) {
 10028bc:	e0bffe03 	ldbu	r2,-8(fp)
 10028c0:	10800818 	cmpnei	r2,r2,32
 10028c4:	1000111e 	bne	r2,zero,100290c <help_devreq+0xd0>
		printf("Request Type = %s, Request = %s.\n",
 10028c8:	e0bffd03 	ldbu	r2,-12(fp)
 10028cc:	00c04074 	movhi	r3,257
 10028d0:	18d5ab04 	addi	r3,r3,22188
 10028d4:	1085883a 	add	r2,r2,r2
 10028d8:	1085883a 	add	r2,r2,r2
 10028dc:	10c5883a 	add	r2,r2,r3
 10028e0:	11400017 	ldw	r5,0(r2)
 10028e4:	e0bfff03 	ldbu	r2,-4(fp)
 10028e8:	1085883a 	add	r2,r2,r2
 10028ec:	1087883a 	add	r3,r2,r2
 10028f0:	d0a00704 	addi	r2,gp,-32740
 10028f4:	1885883a 	add	r2,r3,r2
 10028f8:	11800017 	ldw	r6,0(r2)
 10028fc:	01004074 	movhi	r4,257
 1002900:	21132804 	addi	r4,r4,19616
 1002904:	10061c00 	call	10061c0 <printf>
 1002908:	00001106 	br	1002950 <help_devreq+0x114>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_CLASS_REQUEST[req]);
	} else {
		if (bD13flags.bits.verbose)
 100290c:	008040b4 	movhi	r2,258
 1002910:	10a4c804 	addi	r2,r2,-27872
 1002914:	10800017 	ldw	r2,0(r2)
 1002918:	1080402c 	andhi	r2,r2,256
 100291c:	1005003a 	cmpeq	r2,r2,zero
 1002920:	10000b1e 	bne	r2,zero,1002950 <help_devreq+0x114>
			printf("Request Type = %s, bRequest = 0x%x.\n",
 1002924:	e0bffd03 	ldbu	r2,-12(fp)
 1002928:	00c04074 	movhi	r3,257
 100292c:	18d5ab04 	addi	r3,r3,22188
 1002930:	1085883a 	add	r2,r2,r2
 1002934:	1085883a 	add	r2,r2,r2
 1002938:	10c5883a 	add	r2,r2,r3
 100293c:	11400017 	ldw	r5,0(r2)
 1002940:	e1bfff03 	ldbu	r6,-4(fp)
 1002944:	01004074 	movhi	r4,257
 1002948:	21133104 	addi	r4,r4,19652
 100294c:	10061c00 	call	10061c0 <printf>
					_NAME_USB_REQUEST_TYPE[typ], req);
	}
}
 1002950:	e037883a 	mov	sp,fp
 1002954:	dfc00117 	ldw	ra,4(sp)
 1002958:	df000017 	ldw	fp,0(sp)
 100295c:	dec00204 	addi	sp,sp,8
 1002960:	f800283a 	ret

01002964 <disconnect_USB>:

void disconnect_USB(void) {
 1002964:	defffe04 	addi	sp,sp,-8
 1002968:	dfc00115 	stw	ra,4(sp)
 100296c:	df000015 	stw	fp,0(sp)
 1002970:	d839883a 	mov	fp,sp
//	printf("USB disconnect\n");
	Hal4D13_SetDevConfig(
 1002974:	010c0104 	movi	r4,12292
 1002978:	10032e80 	call	10032e8 <Hal4D13_SetDevConfig>
			D13REG_DEVCNFG_NOLAZYCLOCK | D13REG_DEVCNFG_PWROFF
					| D13REG_DEVCNFG_CLOCKRUNNING);
	Hal4D13_SetMode(
 100297c:	01000204 	movi	r4,8
 1002980:	100333c0 	call	100333c <Hal4D13_SetMode>

	D13REG_MODE_INT_EN);

}
 1002984:	e037883a 	mov	sp,fp
 1002988:	dfc00117 	ldw	ra,4(sp)
 100298c:	df000017 	ldw	fp,0(sp)
 1002990:	dec00204 	addi	sp,sp,8
 1002994:	f800283a 	ret

01002998 <connect_USB>:

void connect_USB(void) {
 1002998:	defffe04 	addi	sp,sp,-8
 100299c:	dfc00115 	stw	ra,4(sp)
 10029a0:	df000015 	stw	fp,0(sp)
 10029a4:	d839883a 	mov	fp,sp

	RaiseIRQL();
 10029a8:	10046940 	call	1004694 <usb_disable_all_interrupts>
//	printf("USB connect\n");
	bD13flags.value = 0; /* reset event flags*/
 10029ac:	008040b4 	movhi	r2,258
 10029b0:	10a4c804 	addi	r2,r2,-27872
 10029b4:	10000015 	stw	zero,0(r2)
	bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
 10029b8:	010040b4 	movhi	r4,258
 10029bc:	2124c804 	addi	r4,r4,-27872
 10029c0:	20c00017 	ldw	r3,0(r4)
 10029c4:	00bc3fc4 	movi	r2,-3841
 10029c8:	1884703a 	and	r2,r3,r2
 10029cc:	20800015 	stw	r2,0(r4)
	config_endpoint();
 10029d0:	10029f40 	call	10029f4 <config_endpoint>

	LowerIRQL();
 10029d4:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

	Hal4D13_SetMode(D13REG_MODE_SOFTCONNECT | D13REG_MODE_DMA16 |
 10029d8:	01002244 	movi	r4,137
 10029dc:	100333c0 	call	100333c <Hal4D13_SetMode>
			D13REG_MODE_INT_EN
//| D13REG_MODE_SUSPND            

			);

}
 10029e0:	e037883a 	mov	sp,fp
 10029e4:	dfc00117 	ldw	ra,4(sp)
 10029e8:	df000017 	ldw	fp,0(sp)
 10029ec:	dec00204 	addi	sp,sp,8
 10029f0:	f800283a 	ret

010029f4 <config_endpoint>:

void config_endpoint(void) {
 10029f4:	defffe04 	addi	sp,sp,-8
 10029f8:	dfc00115 	stw	ra,4(sp)
 10029fc:	df000015 	stw	fp,0(sp)
 1002a00:	d839883a 	mov	fp,sp
	/*Control Endpoint*/
//	printf("USB config\n");
	Hal4D13_SetEndpointConfig(D13REG_EPCNFG_FIFO_EN | D13REG_EPCNFG_NONISOSZ_64,
 1002a04:	010020c4 	movi	r4,131
 1002a08:	000b883a 	mov	r5,zero
 1002a0c:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			EPINDEX4EP0_CONTROL_OUT);
	Hal4D13_SetEndpointConfig(
 1002a10:	010030c4 	movi	r4,195
 1002a14:	01400044 	movi	r5,1
 1002a18:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_FIFO_EN | D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_NONISOSZ_64, EPINDEX4EP0_CONTROL_IN);
	/*Control Endpoint*/

	/*port1 is OUT*/
	Hal4D13_SetEndpointConfig(
 1002a1c:	010028c4 	movi	r4,163
 1002a20:	01400084 	movi	r5,2
 1002a24:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_DBLBUF_EN |
			D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP01);

	/*port2 is IN*/
	Hal4D13_SetEndpointConfig(
 1002a28:	010038c4 	movi	r4,227
 1002a2c:	014000c4 	movi	r5,3
 1002a30:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP02);
	/*DISABLED*/

	/*Bulk Enpoints Double Buffered*/
	Hal4D13_SetEndpointConfig(
 1002a34:	010008c4 	movi	r4,35
 1002a38:	01400104 	movi	r5,4
 1002a3c:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_NONISOSZ_64, EPINDEX4EP03);
	Hal4D13_SetEndpointConfig(
 1002a40:	010018c4 	movi	r4,99
 1002a44:	01400144 	movi	r5,5
 1002a48:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_IN_EN | D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP04);
	/*Bulk Enpoints Double Buffered*/

	/*Isochronous Endpoints*/
	Hal4D13_SetEndpointConfig(
 1002a4c:	01000c04 	movi	r4,48
 1002a50:	01400184 	movi	r5,6
 1002a54:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP05);
	Hal4D13_SetEndpointConfig(
 1002a58:	01001c04 	movi	r4,112
 1002a5c:	014001c4 	movi	r5,7
 1002a60:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN
					| D13REG_EPCNFG_IN_EN, EPINDEX4EP06);
	/*Isochronous Endpoints*/

	/*DISABLED*/
	Hal4D13_SetEndpointConfig(
 1002a64:	01000c04 	movi	r4,48
 1002a68:	01400204 	movi	r5,8
 1002a6c:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP07);
	Hal4D13_SetEndpointConfig(
 1002a70:	01001c04 	movi	r4,112
 1002a74:	01400244 	movi	r5,9
 1002a78:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_16
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP08);
	Hal4D13_SetEndpointConfig(
 1002a7c:	01000c04 	movi	r4,48
 1002a80:	01400284 	movi	r5,10
 1002a84:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP09);
	Hal4D13_SetEndpointConfig(
 1002a88:	01001c04 	movi	r4,112
 1002a8c:	014002c4 	movi	r5,11
 1002a90:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_16
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0A);
	Hal4D13_SetEndpointConfig(
 1002a94:	01000cc4 	movi	r4,51
 1002a98:	01400304 	movi	r5,12
 1002a9c:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_64 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP0B);
	Hal4D13_SetEndpointConfig(
 1002aa0:	01001cc4 	movi	r4,115
 1002aa4:	01400344 	movi	r5,13
 1002aa8:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_64
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0C);
	Hal4D13_SetEndpointConfig(
 1002aac:	01000cc4 	movi	r4,51
 1002ab0:	01400384 	movi	r5,14
 1002ab4:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_64 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP0D);
	Hal4D13_SetEndpointConfig(
 1002ab8:	01001cc4 	movi	r4,115
 1002abc:	014003c4 	movi	r5,15
 1002ac0:	10042f80 	call	10042f8 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_64
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0E);
	/*DISABLED*/

	/*Set interrupt configuration*/
	Hal4D13_SetIntEnable(
 1002ac4:	0103c1c4 	movi	r4,3847
 1002ac8:	1003ca80 	call	1003ca8 <Hal4D13_SetIntEnable>
					//          |D13REG_INTSRC_EP06
					| D13REG_INTSRC_SUSPEND | D13REG_INTSRC_RESUME
					| D13REG_INTSRC_BUSRESET);

	/*Set Hardware Configuration*/
	Hal4D13_SetDevConfig(
 1002acc:	0108d004 	movi	r4,9024
 1002ad0:	10032e80 	call	10032e8 <Hal4D13_SetDevConfig>
			D13REG_DEVCNFG_NOLAZYCLOCK | D13REG_DEVCNFG_CLOCKDIV_120M
					| D13REG_DEVCNFG_DMARQPOL
//            |D13REG_DEVCNFG_EXPULLUP
			);

}
 1002ad4:	e037883a 	mov	sp,fp
 1002ad8:	dfc00117 	ldw	ra,4(sp)
 1002adc:	df000017 	ldw	fp,0(sp)
 1002ae0:	dec00204 	addi	sp,sp,8
 1002ae4:	f800283a 	ret

01002ae8 <reconnect_USB>:

void reconnect_USB(void) {
 1002ae8:	defffe04 	addi	sp,sp,-8
 1002aec:	dfc00115 	stw	ra,4(sp)
 1002af0:	df000015 	stw	fp,0(sp)
 1002af4:	d839883a 	mov	fp,sp
	disconnect_USB();
 1002af8:	10029640 	call	1002964 <disconnect_USB>
	connect_USB();
 1002afc:	10029980 	call	1002998 <connect_USB>
}
 1002b00:	e037883a 	mov	sp,fp
 1002b04:	dfc00117 	ldw	ra,4(sp)
 1002b08:	df000017 	ldw	fp,0(sp)
 1002b0c:	dec00204 	addi	sp,sp,8
 1002b10:	f800283a 	ret

01002b14 <suspend_change>:

void suspend_change(void) {
 1002b14:	deffff04 	addi	sp,sp,-4
 1002b18:	df000015 	stw	fp,0(sp)
 1002b1c:	d839883a 	mov	fp,sp
//    printf("SUSPEND CHANGE \n");
	// disconnect_USB();
//  Suspend_Device_Controller();
}
 1002b20:	e037883a 	mov	sp,fp
 1002b24:	df000017 	ldw	fp,0(sp)
 1002b28:	dec00104 	addi	sp,sp,4
 1002b2c:	f800283a 	ret

01002b30 <ML_AcknowledgeSETUP>:

void ML_AcknowledgeSETUP(void) {
 1002b30:	defffe04 	addi	sp,sp,-8
 1002b34:	dfc00115 	stw	ra,4(sp)
 1002b38:	df000015 	stw	fp,0(sp)
 1002b3c:	d839883a 	mov	fp,sp

	if (Hal4D13_IsSetupPktInvalid() || ControlData.Abort) {
 1002b40:	10045b80 	call	10045b8 <Hal4D13_IsSetupPktInvalid>
 1002b44:	10803fcc 	andi	r2,r2,255
 1002b48:	1004c03a 	cmpne	r2,r2,zero
 1002b4c:	10000a1e 	bne	r2,zero,1002b78 <ML_AcknowledgeSETUP+0x48>
 1002b50:	008040b4 	movhi	r2,258
 1002b54:	10a4ef04 	addi	r2,r2,-27716
 1002b58:	10800003 	ldbu	r2,0(r2)
 1002b5c:	10803fcc 	andi	r2,r2,255
 1002b60:	1005003a 	cmpeq	r2,r2,zero
 1002b64:	1000011e 	bne	r2,zero,1002b6c <ML_AcknowledgeSETUP+0x3c>
		return;
 1002b68:	00000306 	br	1002b78 <ML_AcknowledgeSETUP+0x48>
	}

	Hal4D13_AcknowledgeSETUP();
 1002b6c:	10035940 	call	1003594 <Hal4D13_AcknowledgeSETUP>
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
 1002b70:	0009883a 	mov	r4,zero
 1002b74:	10035cc0 	call	10035cc <Hal4D13_ClearBuffer>
}
 1002b78:	e037883a 	mov	sp,fp
 1002b7c:	dfc00117 	ldw	ra,4(sp)
 1002b80:	df000017 	ldw	fp,0(sp)
 1002b84:	dec00204 	addi	sp,sp,8
 1002b88:	f800283a 	ret

01002b8c <ML_Reserved>:

void ML_Reserved(void) {
 1002b8c:	defffe04 	addi	sp,sp,-8
 1002b90:	dfc00115 	stw	ra,4(sp)
 1002b94:	df000015 	stw	fp,0(sp)
 1002b98:	d839883a 	mov	fp,sp
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
 1002b9c:	0009883a 	mov	r4,zero
 1002ba0:	10035cc0 	call	10035cc <Hal4D13_ClearBuffer>
}
 1002ba4:	e037883a 	mov	sp,fp
 1002ba8:	dfc00117 	ldw	ra,4(sp)
 1002bac:	df000017 	ldw	fp,0(sp)
 1002bb0:	dec00204 	addi	sp,sp,8
 1002bb4:	f800283a 	ret

01002bb8 <CHECK_CHIP_ID>:

unsigned short CHECK_CHIP_ID(void) {
 1002bb8:	defffb04 	addi	sp,sp,-20
 1002bbc:	dfc00415 	stw	ra,16(sp)
 1002bc0:	df000315 	stw	fp,12(sp)
 1002bc4:	df000304 	addi	fp,sp,12
	unsigned short CHIP_ID;
	unsigned char LOW_ID, HIGH_ID;

	CHIP_ID = Hal4D13_ReadChipID();
 1002bc8:	10041d40 	call	10041d4 <Hal4D13_ReadChipID>
 1002bcc:	e0bffd8d 	sth	r2,-10(fp)
	LOW_ID = (unsigned char) CHIP_ID;
 1002bd0:	e0bffd8b 	ldhu	r2,-10(fp)
 1002bd4:	e0bffd45 	stb	r2,-11(fp)
	HIGH_ID = (unsigned char) (CHIP_ID >> 8);
 1002bd8:	e0bffd8b 	ldhu	r2,-10(fp)
 1002bdc:	1004d23a 	srli	r2,r2,8
 1002be0:	e0bffd05 	stb	r2,-12(fp)

	switch (HIGH_ID) {
 1002be4:	e0bffd03 	ldbu	r2,-12(fp)
 1002be8:	e0bfff15 	stw	r2,-4(fp)
 1002bec:	e0ffff17 	ldw	r3,-4(fp)
 1002bf0:	18800da0 	cmpeqi	r2,r3,54
 1002bf4:	1000091e 	bne	r2,zero,1002c1c <CHECK_CHIP_ID+0x64>
 1002bf8:	e0ffff17 	ldw	r3,-4(fp)
 1002bfc:	18801860 	cmpeqi	r2,r3,97
 1002c00:	1000011e 	bne	r2,zero,1002c08 <CHECK_CHIP_ID+0x50>
 1002c04:	00000a06 	br	1002c30 <CHECK_CHIP_ID+0x78>
	case 0x61: {
//		printf("USB ChipID=0x%04x\n", CHIP_ID);
		CHIP_ID = 0x1161;
 1002c08:	00845844 	movi	r2,4449
 1002c0c:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
 1002c10:	e0bffd8b 	ldhu	r2,-10(fp)
 1002c14:	e0bffe15 	stw	r2,-8(fp)
 1002c18:	00000706 	br	1002c38 <CHECK_CHIP_ID+0x80>
		break;
	}

	case 0x36: {
//		printf("USB ChipID=0x%04x\n", CHIP_ID);
		CHIP_ID = 0x1362;
 1002c1c:	0084d884 	movi	r2,4962
 1002c20:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
 1002c24:	e0fffd8b 	ldhu	r3,-10(fp)
 1002c28:	e0fffe15 	stw	r3,-8(fp)
 1002c2c:	00000206 	br	1002c38 <CHECK_CHIP_ID+0x80>
		break;
	}

	default: {
//		printf("USB Unknown ChipID=0x%04x\n", CHIP_ID);
		return CHIP_ID;
 1002c30:	e0bffd8b 	ldhu	r2,-10(fp)
 1002c34:	e0bffe15 	stw	r2,-8(fp)
 1002c38:	e0bffe17 	ldw	r2,-8(fp)
		break;
	}

	}

}
 1002c3c:	e037883a 	mov	sp,fp
 1002c40:	dfc00117 	ldw	ra,4(sp)
 1002c44:	df000017 	ldw	fp,0(sp)
 1002c48:	dec00204 	addi	sp,sp,8
 1002c4c:	f800283a 	ret

01002c50 <D13Bus_ControlEntry>:
// *************************************************************************
// Subroutines
// *************************************************************************

void D13Bus_ControlEntry(void)
{
 1002c50:	defffe04 	addi	sp,sp,-8
 1002c54:	dfc00115 	stw	ra,4(sp)
 1002c58:	df000015 	stw	fp,0(sp)
 1002c5c:	d839883a 	mov	fp,sp
    // No support now, just stall it.
    D13Bus_StallEP0();
 1002c60:	1002fd80 	call	1002fd8 <D13Bus_StallEP0>
}
 1002c64:	e037883a 	mov	sp,fp
 1002c68:	dfc00117 	ldw	ra,4(sp)
 1002c6c:	df000017 	ldw	fp,0(sp)
 1002c70:	dec00204 	addi	sp,sp,8
 1002c74:	f800283a 	ret

01002c78 <reserved>:

void reserved(void)
{
 1002c78:	defffe04 	addi	sp,sp,-8
 1002c7c:	dfc00115 	stw	ra,4(sp)
 1002c80:	df000015 	stw	fp,0(sp)
 1002c84:	d839883a 	mov	fp,sp
    // Undefined commands, stall them
    D13Bus_StallEP0();
 1002c88:	1002fd80 	call	1002fd8 <D13Bus_StallEP0>
}
 1002c8c:	e037883a 	mov	sp,fp
 1002c90:	dfc00117 	ldw	ra,4(sp)
 1002c94:	df000017 	ldw	fp,0(sp)
 1002c98:	dec00204 	addi	sp,sp,8
 1002c9c:	f800283a 	ret

01002ca0 <read_write_register>:

void read_write_register(void)
{
 1002ca0:	defffd04 	addi	sp,sp,-12
 1002ca4:	dfc00215 	stw	ra,8(sp)
 1002ca8:	df000115 	stw	fp,4(sp)
 1002cac:	df000104 	addi	fp,sp,4
    unsigned char i;

    if(ControlData.DeviceRequest.bmRequestType & (unsigned char)USB_ENDPOINT_DIRECTION_MASK)
 1002cb0:	008040b4 	movhi	r2,258
 1002cb4:	10a4ef04 	addi	r2,r2,-27716
 1002cb8:	10800083 	ldbu	r2,2(r2)
 1002cbc:	10803fcc 	andi	r2,r2,255
 1002cc0:	1080201c 	xori	r2,r2,128
 1002cc4:	10bfe004 	addi	r2,r2,-128
 1002cc8:	1004403a 	cmpge	r2,r2,zero
 1002ccc:	10002e1e 	bne	r2,zero,1002d88 <read_write_register+0xe8>
    {
        if(bD13flags.bits.verbose)
 1002cd0:	008040b4 	movhi	r2,258
 1002cd4:	10a4c804 	addi	r2,r2,-27872
 1002cd8:	10800017 	ldw	r2,0(r2)
 1002cdc:	1080402c 	andhi	r2,r2,256
 1002ce0:	1005003a 	cmpeq	r2,r2,zero
 1002ce4:	10000f1e 	bne	r2,zero,1002d24 <read_write_register+0x84>
        {
            printf("Read Registers: Offset = 0x%x, Length = 0x%x, Index = 0x%x.\n",
 1002ce8:	008040b4 	movhi	r2,258
 1002cec:	10a4ef04 	addi	r2,r2,-27716
 1002cf0:	1080010b 	ldhu	r2,4(r2)
 1002cf4:	117fffcc 	andi	r5,r2,65535
 1002cf8:	008040b4 	movhi	r2,258
 1002cfc:	10a4ef04 	addi	r2,r2,-27716
 1002d00:	1080020b 	ldhu	r2,8(r2)
 1002d04:	11bfffcc 	andi	r6,r2,65535
 1002d08:	008040b4 	movhi	r2,258
 1002d0c:	10a4ef04 	addi	r2,r2,-27716
 1002d10:	1080018b 	ldhu	r2,6(r2)
 1002d14:	11ffffcc 	andi	r7,r2,65535
 1002d18:	01004074 	movhi	r4,257
 1002d1c:	21133b04 	addi	r4,r4,19692
 1002d20:	10061c00 	call	10061c0 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);
        }

        if(ControlData.DeviceRequest.wIndex == GET_FIRMWARE_VERSION &&
 1002d24:	008040b4 	movhi	r2,258
 1002d28:	10a4ef04 	addi	r2,r2,-27716
 1002d2c:	1080018b 	ldhu	r2,6(r2)
 1002d30:	10bfffcc 	andi	r2,r2,65535
 1002d34:	10811c98 	cmpnei	r2,r2,1138
 1002d38:	10000e1e 	bne	r2,zero,1002d74 <read_write_register+0xd4>
 1002d3c:	008040b4 	movhi	r2,258
 1002d40:	10a4ef04 	addi	r2,r2,-27716
 1002d44:	1080010b 	ldhu	r2,4(r2)
 1002d48:	10bfffcc 	andi	r2,r2,65535
 1002d4c:	1004c03a 	cmpne	r2,r2,zero
 1002d50:	1000081e 	bne	r2,zero,1002d74 <read_write_register+0xd4>
 1002d54:	008040b4 	movhi	r2,258
 1002d58:	10a4ef04 	addi	r2,r2,-27716
 1002d5c:	1080020b 	ldhu	r2,8(r2)
 1002d60:	10bfffcc 	andi	r2,r2,65535
 1002d64:	10800058 	cmpnei	r2,r2,1
 1002d68:	1000021e 	bne	r2,zero,1002d74 <read_write_register+0xd4>
            ControlData.DeviceRequest.wValue == 0 &&
            ControlData.DeviceRequest.wLength == 1)
            {
                get_firmware_version();
 1002d6c:	1002fa00 	call	1002fa0 <get_firmware_version>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);
        }

        if(ControlData.DeviceRequest.wIndex == GET_FIRMWARE_VERSION &&
 1002d70:	00004a06 	br	1002e9c <read_write_register+0x1fc>
            {
                get_firmware_version();
            }
        else
        {
            Chap9_StallEP0();
 1002d74:	10021940 	call	1002194 <Chap9_StallEP0>
            printf("stall: get firmware version\n");
 1002d78:	01004074 	movhi	r4,257
 1002d7c:	21134b04 	addi	r4,r4,19756
 1002d80:	10062fc0 	call	10062fc <puts>
 1002d84:	00004506 	br	1002e9c <read_write_register+0x1fc>
        }

    }
    else
    {
        if(bD13flags.bits.verbose)
 1002d88:	008040b4 	movhi	r2,258
 1002d8c:	10a4c804 	addi	r2,r2,-27872
 1002d90:	10800017 	ldw	r2,0(r2)
 1002d94:	1080402c 	andhi	r2,r2,256
 1002d98:	1005003a 	cmpeq	r2,r2,zero
 1002d9c:	10002a1e 	bne	r2,zero,1002e48 <read_write_register+0x1a8>
        {

            printf("Write Registers: Offset = 0x%x, Length = 0x%x, Index = 0x%x.\n",
 1002da0:	008040b4 	movhi	r2,258
 1002da4:	10a4ef04 	addi	r2,r2,-27716
 1002da8:	1080010b 	ldhu	r2,4(r2)
 1002dac:	117fffcc 	andi	r5,r2,65535
 1002db0:	008040b4 	movhi	r2,258
 1002db4:	10a4ef04 	addi	r2,r2,-27716
 1002db8:	1080020b 	ldhu	r2,8(r2)
 1002dbc:	11bfffcc 	andi	r6,r2,65535
 1002dc0:	008040b4 	movhi	r2,258
 1002dc4:	10a4ef04 	addi	r2,r2,-27716
 1002dc8:	1080018b 	ldhu	r2,6(r2)
 1002dcc:	11ffffcc 	andi	r7,r2,65535
 1002dd0:	01004074 	movhi	r4,257
 1002dd4:	21135204 	addi	r4,r4,19784
 1002dd8:	10061c00 	call	10061c0 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);

            printf("Data: ");
 1002ddc:	01004074 	movhi	r4,257
 1002de0:	21136204 	addi	r4,r4,19848
 1002de4:	10061c00 	call	10061c0 <printf>
            for(i = 0; i < ControlData.DeviceRequest.wLength; i ++)
 1002de8:	e03fff05 	stb	zero,-4(fp)
 1002dec:	00000d06 	br	1002e24 <read_write_register+0x184>
                printf("0x%x, ", *((ControlData.dataBuffer)+i));
 1002df0:	e0bfff03 	ldbu	r2,-4(fp)
 1002df4:	1007883a 	mov	r3,r2
 1002df8:	008040b4 	movhi	r2,258
 1002dfc:	10a4f404 	addi	r2,r2,-27696
 1002e00:	1885883a 	add	r2,r3,r2
 1002e04:	10800003 	ldbu	r2,0(r2)
 1002e08:	11403fcc 	andi	r5,r2,255
 1002e0c:	01004074 	movhi	r4,257
 1002e10:	21136404 	addi	r4,r4,19856
 1002e14:	10061c00 	call	10061c0 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);

            printf("Data: ");
            for(i = 0; i < ControlData.DeviceRequest.wLength; i ++)
 1002e18:	e0bfff03 	ldbu	r2,-4(fp)
 1002e1c:	10800044 	addi	r2,r2,1
 1002e20:	e0bfff05 	stb	r2,-4(fp)
 1002e24:	e0ffff03 	ldbu	r3,-4(fp)
 1002e28:	008040b4 	movhi	r2,258
 1002e2c:	10a4ef04 	addi	r2,r2,-27716
 1002e30:	1080020b 	ldhu	r2,8(r2)
 1002e34:	18ffffcc 	andi	r3,r3,65535
 1002e38:	10bfffcc 	andi	r2,r2,65535
 1002e3c:	18bfec36 	bltu	r3,r2,1002df0 <read_write_register+0x150>
                printf("0x%x, ", *((ControlData.dataBuffer)+i));
            printf("\n");
 1002e40:	01000284 	movi	r4,10
 1002e44:	10062380 	call	1006238 <putchar>
        }

        if(ControlData.DeviceRequest.wIndex == SETUP_DMA_REQUEST &&
 1002e48:	008040b4 	movhi	r2,258
 1002e4c:	10a4ef04 	addi	r2,r2,-27716
 1002e50:	1080018b 	ldhu	r2,6(r2)
 1002e54:	10bfffcc 	andi	r2,r2,65535
 1002e58:	10811c58 	cmpnei	r2,r2,1137
 1002e5c:	10000f1e 	bne	r2,zero,1002e9c <read_write_register+0x1fc>
 1002e60:	008040b4 	movhi	r2,258
 1002e64:	10a4ef04 	addi	r2,r2,-27716
 1002e68:	1080010b 	ldhu	r2,4(r2)
 1002e6c:	10bfffcc 	andi	r2,r2,65535
 1002e70:	1004c03a 	cmpne	r2,r2,zero
 1002e74:	1000091e 	bne	r2,zero,1002e9c <read_write_register+0x1fc>
 1002e78:	008040b4 	movhi	r2,258
 1002e7c:	10a4ef04 	addi	r2,r2,-27716
 1002e80:	1080020b 	ldhu	r2,8(r2)
 1002e84:	10bfffcc 	andi	r2,r2,65535
 1002e88:	10800198 	cmpnei	r2,r2,6
 1002e8c:	1000031e 	bne	r2,zero,1002e9c <read_write_register+0x1fc>
            ControlData.DeviceRequest.wValue == 0 &&
            ControlData.DeviceRequest.wLength == 6)
            {
                RaiseIRQL();
 1002e90:	10046940 	call	1004694 <usb_disable_all_interrupts>
                setup_dma_request();
 1002e94:	1002eb00 	call	1002eb0 <setup_dma_request>
                LowerIRQL();
 1002e98:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
            }

    }
}
 1002e9c:	e037883a 	mov	sp,fp
 1002ea0:	dfc00117 	ldw	ra,4(sp)
 1002ea4:	df000017 	ldw	fp,0(sp)
 1002ea8:	dec00204 	addi	sp,sp,8
 1002eac:	f800283a 	ret

01002eb0 <setup_dma_request>:

void setup_dma_request()
{
 1002eb0:	defffe04 	addi	sp,sp,-8
 1002eb4:	dfc00115 	stw	ra,4(sp)
 1002eb8:	df000015 	stw	fp,0(sp)
 1002ebc:	d839883a 	mov	fp,sp
    memcpy((unsigned char *)&ioRequest + ControlData.DeviceRequest.wValue,
 1002ec0:	008040b4 	movhi	r2,258
 1002ec4:	10a4ef04 	addi	r2,r2,-27716
 1002ec8:	1080010b 	ldhu	r2,4(r2)
 1002ecc:	10bfffcc 	andi	r2,r2,65535
 1002ed0:	1007883a 	mov	r3,r2
 1002ed4:	008040b4 	movhi	r2,258
 1002ed8:	10a4cd04 	addi	r2,r2,-27852
 1002edc:	1887883a 	add	r3,r3,r2
 1002ee0:	008040b4 	movhi	r2,258
 1002ee4:	10a4ef04 	addi	r2,r2,-27716
 1002ee8:	1080020b 	ldhu	r2,8(r2)
 1002eec:	11bfffcc 	andi	r6,r2,65535
 1002ef0:	008040b4 	movhi	r2,258
 1002ef4:	10a4f404 	addi	r2,r2,-27696
 1002ef8:	1809883a 	mov	r4,r3
 1002efc:	100b883a 	mov	r5,r2
 1002f00:	10060880 	call	1006088 <memcpy>
        ControlData.dataBuffer,
        ControlData.DeviceRequest.wLength);

    ioRequest.uSize = SWAP(ioRequest.uSize);
 1002f04:	008040b4 	movhi	r2,258
 1002f08:	10a4cd04 	addi	r2,r2,-27852
 1002f0c:	10c0010b 	ldhu	r3,4(r2)
 1002f10:	008040b4 	movhi	r2,258
 1002f14:	10a4cd04 	addi	r2,r2,-27852
 1002f18:	10c0010d 	sth	r3,4(r2)
    ioRequest.uAddressL = SWAP(ioRequest.uAddressL);
 1002f1c:	008040b4 	movhi	r2,258
 1002f20:	10a4cd04 	addi	r2,r2,-27852
 1002f24:	10c0000b 	ldhu	r3,0(r2)
 1002f28:	008040b4 	movhi	r2,258
 1002f2c:	10a4cd04 	addi	r2,r2,-27852
 1002f30:	10c0000d 	sth	r3,0(r2)
    printf("Setup Data: addL, addH, uSize =%x, %x, %x \n", \
 1002f34:	008040b4 	movhi	r2,258
 1002f38:	10a4cd04 	addi	r2,r2,-27852
 1002f3c:	1080000b 	ldhu	r2,0(r2)
 1002f40:	117fffcc 	andi	r5,r2,65535
 1002f44:	008040b4 	movhi	r2,258
 1002f48:	10a4cd04 	addi	r2,r2,-27852
 1002f4c:	10800083 	ldbu	r2,2(r2)
 1002f50:	11803fcc 	andi	r6,r2,255
 1002f54:	008040b4 	movhi	r2,258
 1002f58:	10a4cd04 	addi	r2,r2,-27852
 1002f5c:	1080010b 	ldhu	r2,4(r2)
 1002f60:	11ffffcc 	andi	r7,r2,65535
 1002f64:	01004074 	movhi	r4,257
 1002f68:	21136604 	addi	r4,r4,19864
 1002f6c:	10061c00 	call	10061c0 <printf>
        Chap9_StallEP0();
        printf("stall: ioRequest.uSize > DMA_BUFFER_SIZE.\n");
    }
    else
    {
        RaiseIRQL();
 1002f70:	10046940 	call	1004694 <usb_disable_all_interrupts>
        bD13flags.bits.setup_dma = 1;
 1002f74:	00c040b4 	movhi	r3,258
 1002f78:	18e4c804 	addi	r3,r3,-27872
 1002f7c:	18800017 	ldw	r2,0(r3)
 1002f80:	10800074 	orhi	r2,r2,1
 1002f84:	18800015 	stw	r2,0(r3)
        LowerIRQL();
 1002f88:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
    }
}
 1002f8c:	e037883a 	mov	sp,fp
 1002f90:	dfc00117 	ldw	ra,4(sp)
 1002f94:	df000017 	ldw	fp,0(sp)
 1002f98:	dec00204 	addi	sp,sp,8
 1002f9c:	f800283a 	ret

01002fa0 <get_firmware_version>:

void get_firmware_version()
{
 1002fa0:	defffd04 	addi	sp,sp,-12
 1002fa4:	dfc00215 	stw	ra,8(sp)
 1002fa8:	df000115 	stw	fp,4(sp)
 1002fac:	df000104 	addi	fp,sp,4
    unsigned char i;

    i = 0x01; 
 1002fb0:	00800044 	movi	r2,1
 1002fb4:	e0bfff05 	stb	r2,-4(fp)
    D13Bus_SingleTransmitEP0(&i, 1);
 1002fb8:	e13fff04 	addi	r4,fp,-4
 1002fbc:	01400044 	movi	r5,1
 1002fc0:	10030000 	call	1003000 <D13Bus_SingleTransmitEP0>
}
 1002fc4:	e037883a 	mov	sp,fp
 1002fc8:	dfc00117 	ldw	ra,4(sp)
 1002fcc:	df000017 	ldw	fp,0(sp)
 1002fd0:	dec00204 	addi	sp,sp,8
 1002fd4:	f800283a 	ret

01002fd8 <D13Bus_StallEP0>:
// *************************************************************************
// D13Bus support functions
// *************************************************************************

void D13Bus_StallEP0(void)
{
 1002fd8:	defffe04 	addi	sp,sp,-8
 1002fdc:	dfc00115 	stw	ra,4(sp)
 1002fe0:	df000015 	stw	fp,0(sp)
 1002fe4:	d839883a 	mov	fp,sp
    Chap9_StallEP0();
 1002fe8:	10021940 	call	1002194 <Chap9_StallEP0>
}
 1002fec:	e037883a 	mov	sp,fp
 1002ff0:	dfc00117 	ldw	ra,4(sp)
 1002ff4:	df000017 	ldw	fp,0(sp)
 1002ff8:	dec00204 	addi	sp,sp,8
 1002ffc:	f800283a 	ret

01003000 <D13Bus_SingleTransmitEP0>:

void D13Bus_SingleTransmitEP0(UCHAR * buf, UCHAR len)
{
 1003000:	defffc04 	addi	sp,sp,-16
 1003004:	dfc00315 	stw	ra,12(sp)
 1003008:	df000215 	stw	fp,8(sp)
 100300c:	df000204 	addi	fp,sp,8
 1003010:	e13ffe15 	stw	r4,-8(fp)
 1003014:	e17fff05 	stb	r5,-4(fp)
    Hal4D13_SingleTransmitEP0(buf, len);
 1003018:	e17fff03 	ldbu	r5,-4(fp)
 100301c:	e13ffe17 	ldw	r4,-8(fp)
 1003020:	10043900 	call	1004390 <Hal4D13_SingleTransmitEP0>

    RaiseIRQL();
 1003024:	10046940 	call	1004694 <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 1003028:	008040b4 	movhi	r2,258
 100302c:	10a4ef04 	addi	r2,r2,-27716
 1003030:	10800003 	ldbu	r2,0(r2)
 1003034:	10803fcc 	andi	r2,r2,255
 1003038:	1004c03a 	cmpne	r2,r2,zero
 100303c:	1000111e 	bne	r2,zero,1003084 <D13Bus_SingleTransmitEP0+0x84>
    {
        ControlData.wLength = ControlData.wCount = len;
 1003040:	e0ffff03 	ldbu	r3,-4(fp)
 1003044:	008040b4 	movhi	r2,258
 1003048:	10a4ef04 	addi	r2,r2,-27716
 100304c:	10c0030d 	sth	r3,12(r2)
 1003050:	008040b4 	movhi	r2,258
 1003054:	10a4ef04 	addi	r2,r2,-27716
 1003058:	10c0030b 	ldhu	r3,12(r2)
 100305c:	008040b4 	movhi	r2,258
 1003060:	10a4ef04 	addi	r2,r2,-27716
 1003064:	10c0028d 	sth	r3,10(r2)
        bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1003068:	010040b4 	movhi	r4,258
 100306c:	2124c804 	addi	r4,r4,-27872
 1003070:	20c00017 	ldw	r3,0(r4)
 1003074:	00bc3fc4 	movi	r2,-3841
 1003078:	1884703a 	and	r2,r3,r2
 100307c:	10810014 	ori	r2,r2,1024
 1003080:	20800015 	stw	r2,0(r4)
    }
    LowerIRQL();
 1003084:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>

}
 1003088:	e037883a 	mov	sp,fp
 100308c:	dfc00117 	ldw	ra,4(sp)
 1003090:	df000017 	ldw	fp,0(sp)
 1003094:	dec00204 	addi	sp,sp,8
 1003098:	f800283a 	ret

0100309c <D13Bus_BurstTransmitEP0>:

void D13Bus_BurstTransmitEP0(UCHAR * pData, USHORT len)
{
 100309c:	defffc04 	addi	sp,sp,-16
 10030a0:	dfc00315 	stw	ra,12(sp)
 10030a4:	df000215 	stw	fp,8(sp)
 10030a8:	df000204 	addi	fp,sp,8
 10030ac:	e13ffe15 	stw	r4,-8(fp)
 10030b0:	e17fff0d 	sth	r5,-4(fp)
    ControlData.wCount = 0;
 10030b4:	008040b4 	movhi	r2,258
 10030b8:	10a4ef04 	addi	r2,r2,-27716
 10030bc:	1000030d 	sth	zero,12(r2)
    if(ControlData.wLength > len)
 10030c0:	008040b4 	movhi	r2,258
 10030c4:	10a4ef04 	addi	r2,r2,-27716
 10030c8:	1080028b 	ldhu	r2,10(r2)
 10030cc:	10ffffcc 	andi	r3,r2,65535
 10030d0:	e0bfff0b 	ldhu	r2,-4(fp)
 10030d4:	10c0042e 	bgeu	r2,r3,10030e8 <D13Bus_BurstTransmitEP0+0x4c>
        ControlData.wLength = len;
 10030d8:	00c040b4 	movhi	r3,258
 10030dc:	18e4ef04 	addi	r3,r3,-27716
 10030e0:	e0bfff0b 	ldhu	r2,-4(fp)
 10030e4:	1880028d 	sth	r2,10(r3)

    ControlData.Addr.pData = pData;
 10030e8:	00c040b4 	movhi	r3,258
 10030ec:	18e4ef04 	addi	r3,r3,-27716
 10030f0:	e0bffe17 	ldw	r2,-8(fp)
 10030f4:	18800415 	stw	r2,16(r3)
    if( ControlData.wLength >= EP0_PACKET_SIZE)
 10030f8:	008040b4 	movhi	r2,258
 10030fc:	10a4ef04 	addi	r2,r2,-27716
 1003100:	1080028b 	ldhu	r2,10(r2)
 1003104:	10bfffcc 	andi	r2,r2,65535
 1003108:	10801030 	cmpltui	r2,r2,64
 100310c:	10001e1e 	bne	r2,zero,1003188 <D13Bus_BurstTransmitEP0+0xec>
    {
        Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, ControlData.Addr.pData, EP0_PACKET_SIZE);
 1003110:	008040b4 	movhi	r2,258
 1003114:	10a4ef04 	addi	r2,r2,-27716
 1003118:	11400417 	ldw	r5,16(r2)
 100311c:	01000044 	movi	r4,1
 1003120:	01801004 	movi	r6,64
 1003124:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>
        RaiseIRQL();
 1003128:	10046940 	call	1004694 <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 100312c:	008040b4 	movhi	r2,258
 1003130:	10a4ef04 	addi	r2,r2,-27716
 1003134:	10800003 	ldbu	r2,0(r2)
 1003138:	10803fcc 	andi	r2,r2,255
 100313c:	1004c03a 	cmpne	r2,r2,zero
 1003140:	10000f1e 	bne	r2,zero,1003180 <D13Bus_BurstTransmitEP0+0xe4>
        {
            ControlData.wCount += EP0_PACKET_SIZE;
 1003144:	008040b4 	movhi	r2,258
 1003148:	10a4ef04 	addi	r2,r2,-27716
 100314c:	1080030b 	ldhu	r2,12(r2)
 1003150:	10801004 	addi	r2,r2,64
 1003154:	1007883a 	mov	r3,r2
 1003158:	008040b4 	movhi	r2,258
 100315c:	10a4ef04 	addi	r2,r2,-27716
 1003160:	10c0030d 	sth	r3,12(r2)
            bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 1003164:	010040b4 	movhi	r4,258
 1003168:	2124c804 	addi	r4,r4,-27872
 100316c:	20c00017 	ldw	r3,0(r4)
 1003170:	00bc3fc4 	movi	r2,-3841
 1003174:	1884703a 	and	r2,r3,r2
 1003178:	10804014 	ori	r2,r2,256
 100317c:	20800015 	stw	r2,0(r4)
        }

        LowerIRQL();
 1003180:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
 1003184:	00002106 	br	100320c <D13Bus_BurstTransmitEP0+0x170>

    }
    else
    {
        Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, ControlData.wLength);
 1003188:	008040b4 	movhi	r2,258
 100318c:	10a4ef04 	addi	r2,r2,-27716
 1003190:	1080028b 	ldhu	r2,10(r2)
 1003194:	11bfffcc 	andi	r6,r2,65535
 1003198:	01000044 	movi	r4,1
 100319c:	e17ffe17 	ldw	r5,-8(fp)
 10031a0:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>
        RaiseIRQL();
 10031a4:	10046940 	call	1004694 <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 10031a8:	008040b4 	movhi	r2,258
 10031ac:	10a4ef04 	addi	r2,r2,-27716
 10031b0:	10800003 	ldbu	r2,0(r2)
 10031b4:	10803fcc 	andi	r2,r2,255
 10031b8:	1004c03a 	cmpne	r2,r2,zero
 10031bc:	1000121e 	bne	r2,zero,1003208 <D13Bus_BurstTransmitEP0+0x16c>
        {
            ControlData.wCount += ControlData.wLength;
 10031c0:	008040b4 	movhi	r2,258
 10031c4:	10a4ef04 	addi	r2,r2,-27716
 10031c8:	10c0030b 	ldhu	r3,12(r2)
 10031cc:	008040b4 	movhi	r2,258
 10031d0:	10a4ef04 	addi	r2,r2,-27716
 10031d4:	1080028b 	ldhu	r2,10(r2)
 10031d8:	1885883a 	add	r2,r3,r2
 10031dc:	1007883a 	mov	r3,r2
 10031e0:	008040b4 	movhi	r2,258
 10031e4:	10a4ef04 	addi	r2,r2,-27716
 10031e8:	10c0030d 	sth	r3,12(r2)
            bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 10031ec:	010040b4 	movhi	r4,258
 10031f0:	2124c804 	addi	r4,r4,-27872
 10031f4:	20c00017 	ldw	r3,0(r4)
 10031f8:	00bc3fc4 	movi	r2,-3841
 10031fc:	1884703a 	and	r2,r3,r2
 1003200:	10804014 	ori	r2,r2,256
 1003204:	20800015 	stw	r2,0(r4)
        }
        LowerIRQL();
 1003208:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
    }
}
 100320c:	e037883a 	mov	sp,fp
 1003210:	dfc00117 	ldw	ra,4(sp)
 1003214:	df000017 	ldw	fp,0(sp)
 1003218:	dec00204 	addi	sp,sp,8
 100321c:	f800283a 	ret

01003220 <Hal4D13_AcquireD13>:
 // ************************************************************************
 // Subroutines -- 1
 // ************************************************************************
 */

void Hal4D13_AcquireD13(unsigned char g_host_IRQ_num, void *usb_isr) {
 1003220:	defffc04 	addi	sp,sp,-16
 1003224:	dfc00315 	stw	ra,12(sp)
 1003228:	df000215 	stw	fp,8(sp)
 100322c:	df000204 	addi	fp,sp,8
 1003230:	e17fff15 	stw	r5,-4(fp)
 1003234:	e13ffe05 	stb	r4,-8(fp)
	alt_irq_register(g_host_IRQ_num, NULL, usb_isr);
 1003238:	e13ffe03 	ldbu	r4,-8(fp)
 100323c:	e1bfff17 	ldw	r6,-4(fp)
 1003240:	000b883a 	mov	r5,zero
 1003244:	1010d540 	call	1010d54 <alt_irq_register>
}
 1003248:	e037883a 	mov	sp,fp
 100324c:	dfc00117 	ldw	ra,4(sp)
 1003250:	df000017 	ldw	fp,0(sp)
 1003254:	dec00204 	addi	sp,sp,8
 1003258:	f800283a 	ret

0100325c <Hal4D13_ResetDevice>:

void Hal4D13_ResetDevice(void) {
 100325c:	deffff04 	addi	sp,sp,-4
 1003260:	df000015 	stw	fp,0(sp)
 1003264:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RESET);
 1003268:	008040b4 	movhi	r2,258
 100326c:	10a4c704 	addi	r2,r2,-27876
 1003270:	10800017 	ldw	r2,0(r2)
 1003274:	10800304 	addi	r2,r2,12
 1003278:	1007883a 	mov	r3,r2
 100327c:	00803d84 	movi	r2,246
 1003280:	18800035 	stwio	r2,0(r3)
}
 1003284:	e037883a 	mov	sp,fp
 1003288:	df000017 	ldw	fp,0(sp)
 100328c:	dec00104 	addi	sp,sp,4
 1003290:	f800283a 	ret

01003294 <Hal4D13_GetDevConfig>:

USHORT Hal4D13_GetDevConfig(void) {
 1003294:	defffe04 	addi	sp,sp,-8
 1003298:	df000115 	stw	fp,4(sp)
 100329c:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_CNFG);
 10032a0:	008040b4 	movhi	r2,258
 10032a4:	10a4c704 	addi	r2,r2,-27876
 10032a8:	10800017 	ldw	r2,0(r2)
 10032ac:	10800304 	addi	r2,r2,12
 10032b0:	1007883a 	mov	r3,r2
 10032b4:	00802ec4 	movi	r2,187
 10032b8:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 10032bc:	008040b4 	movhi	r2,258
 10032c0:	10a4c704 	addi	r2,r2,-27876
 10032c4:	10800017 	ldw	r2,0(r2)
 10032c8:	10800204 	addi	r2,r2,8
 10032cc:	10800037 	ldwio	r2,0(r2)
 10032d0:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 10032d4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10032d8:	e037883a 	mov	sp,fp
 10032dc:	df000017 	ldw	fp,0(sp)
 10032e0:	dec00104 	addi	sp,sp,4
 10032e4:	f800283a 	ret

010032e8 <Hal4D13_SetDevConfig>:

void Hal4D13_SetDevConfig(USHORT wDevCnfg) {
 10032e8:	defffe04 	addi	sp,sp,-8
 10032ec:	df000115 	stw	fp,4(sp)
 10032f0:	df000104 	addi	fp,sp,4
 10032f4:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_CNFG);
 10032f8:	008040b4 	movhi	r2,258
 10032fc:	10a4c704 	addi	r2,r2,-27876
 1003300:	10800017 	ldw	r2,0(r2)
 1003304:	10800304 	addi	r2,r2,12
 1003308:	1007883a 	mov	r3,r2
 100330c:	00802e84 	movi	r2,186
 1003310:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDevCnfg);
 1003314:	008040b4 	movhi	r2,258
 1003318:	10a4c704 	addi	r2,r2,-27876
 100331c:	10800017 	ldw	r2,0(r2)
 1003320:	10800204 	addi	r2,r2,8
 1003324:	e0ffff0b 	ldhu	r3,-4(fp)
 1003328:	10c00035 	stwio	r3,0(r2)
}
 100332c:	e037883a 	mov	sp,fp
 1003330:	df000017 	ldw	fp,0(sp)
 1003334:	dec00104 	addi	sp,sp,4
 1003338:	f800283a 	ret

0100333c <Hal4D13_SetMode>:

void Hal4D13_SetMode(UCHAR bMode) {
 100333c:	defffe04 	addi	sp,sp,-8
 1003340:	df000115 	stw	fp,4(sp)
 1003344:	df000104 	addi	fp,sp,4
 1003348:	e13fff05 	stb	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
 100334c:	008040b4 	movhi	r2,258
 1003350:	10a4c704 	addi	r2,r2,-27876
 1003354:	10800017 	ldw	r2,0(r2)
 1003358:	10800304 	addi	r2,r2,12
 100335c:	1007883a 	mov	r3,r2
 1003360:	00802e04 	movi	r2,184
 1003364:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, bMode);
 1003368:	008040b4 	movhi	r2,258
 100336c:	10a4c704 	addi	r2,r2,-27876
 1003370:	10800017 	ldw	r2,0(r2)
 1003374:	10800204 	addi	r2,r2,8
 1003378:	e0ffff03 	ldbu	r3,-4(fp)
 100337c:	10c00035 	stwio	r3,0(r2)
}
 1003380:	e037883a 	mov	sp,fp
 1003384:	df000017 	ldw	fp,0(sp)
 1003388:	dec00104 	addi	sp,sp,4
 100338c:	f800283a 	ret

01003390 <Hal4D13_GetMode>:

UCHAR Hal4D13_GetMode(void) {
 1003390:	defffe04 	addi	sp,sp,-8
 1003394:	df000115 	stw	fp,4(sp)
 1003398:	df000104 	addi	fp,sp,4
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
 100339c:	008040b4 	movhi	r2,258
 10033a0:	10a4c704 	addi	r2,r2,-27876
 10033a4:	10800017 	ldw	r2,0(r2)
 10033a8:	10800304 	addi	r2,r2,12
 10033ac:	1007883a 	mov	r3,r2
 10033b0:	00802e44 	movi	r2,185
 10033b4:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 10033b8:	008040b4 	movhi	r2,258
 10033bc:	10a4c704 	addi	r2,r2,-27876
 10033c0:	10800017 	ldw	r2,0(r2)
 10033c4:	10800204 	addi	r2,r2,8
 10033c8:	10800037 	ldwio	r2,0(r2)
 10033cc:	1007883a 	mov	r3,r2
 10033d0:	00bfffc4 	movi	r2,-1
 10033d4:	1884703a 	and	r2,r3,r2
 10033d8:	e0bfff05 	stb	r2,-4(fp)
	return c;
 10033dc:	e0bfff03 	ldbu	r2,-4(fp)
}
 10033e0:	e037883a 	mov	sp,fp
 10033e4:	df000017 	ldw	fp,0(sp)
 10033e8:	dec00104 	addi	sp,sp,4
 10033ec:	f800283a 	ret

010033f0 <Hal4D13_GetAddress>:

UCHAR Hal4D13_GetAddress(void) {
 10033f0:	defffe04 	addi	sp,sp,-8
 10033f4:	df000115 	stw	fp,4(sp)
 10033f8:	df000104 	addi	fp,sp,4
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_ADDR);
 10033fc:	008040b4 	movhi	r2,258
 1003400:	10a4c704 	addi	r2,r2,-27876
 1003404:	10800017 	ldw	r2,0(r2)
 1003408:	10800304 	addi	r2,r2,12
 100340c:	1007883a 	mov	r3,r2
 1003410:	00802dc4 	movi	r2,183
 1003414:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003418:	008040b4 	movhi	r2,258
 100341c:	10a4c704 	addi	r2,r2,-27876
 1003420:	10800017 	ldw	r2,0(r2)
 1003424:	10800204 	addi	r2,r2,8
 1003428:	10800037 	ldwio	r2,0(r2)
 100342c:	1007883a 	mov	r3,r2
 1003430:	00bfffc4 	movi	r2,-1
 1003434:	1884703a 	and	r2,r3,r2
 1003438:	e0bfff05 	stb	r2,-4(fp)
	return c;
 100343c:	e0bfff03 	ldbu	r2,-4(fp)
}
 1003440:	e037883a 	mov	sp,fp
 1003444:	df000017 	ldw	fp,0(sp)
 1003448:	dec00104 	addi	sp,sp,4
 100344c:	f800283a 	ret

01003450 <Hal4D13_SetAddressEnable>:

void Hal4D13_SetAddressEnable(UCHAR bAddress, UCHAR bEnable) {
 1003450:	defffd04 	addi	sp,sp,-12
 1003454:	df000215 	stw	fp,8(sp)
 1003458:	df000204 	addi	fp,sp,8
 100345c:	e13ffe05 	stb	r4,-8(fp)
 1003460:	e17fff05 	stb	r5,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_ADDR);
 1003464:	008040b4 	movhi	r2,258
 1003468:	10a4c704 	addi	r2,r2,-27876
 100346c:	10800017 	ldw	r2,0(r2)
 1003470:	10800304 	addi	r2,r2,12
 1003474:	1007883a 	mov	r3,r2
 1003478:	00802d84 	movi	r2,182
 100347c:	18800035 	stwio	r2,0(r3)
	if (bEnable)
 1003480:	e0bfff03 	ldbu	r2,-4(fp)
 1003484:	1005003a 	cmpeq	r2,r2,zero
 1003488:	1000051e 	bne	r2,zero,10034a0 <Hal4D13_SetAddressEnable+0x50>
		bAddress |= D13REG_DEVADDR_EN;
 100348c:	e0bffe03 	ldbu	r2,-8(fp)
 1003490:	00ffe004 	movi	r3,-128
 1003494:	10c4b03a 	or	r2,r2,r3
 1003498:	e0bffe05 	stb	r2,-8(fp)
 100349c:	00000306 	br	10034ac <Hal4D13_SetAddressEnable+0x5c>
	else
		bAddress &= D13REG_DEVADDR_MASK;
 10034a0:	e0bffe03 	ldbu	r2,-8(fp)
 10034a4:	10801fcc 	andi	r2,r2,127
 10034a8:	e0bffe05 	stb	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_DATA_PORT, bAddress);
 10034ac:	008040b4 	movhi	r2,258
 10034b0:	10a4c704 	addi	r2,r2,-27876
 10034b4:	10800017 	ldw	r2,0(r2)
 10034b8:	10800204 	addi	r2,r2,8
 10034bc:	e0fffe03 	ldbu	r3,-8(fp)
 10034c0:	10c00035 	stwio	r3,0(r2)
}
 10034c4:	e037883a 	mov	sp,fp
 10034c8:	df000017 	ldw	fp,0(sp)
 10034cc:	dec00104 	addi	sp,sp,4
 10034d0:	f800283a 	ret

010034d4 <Hal4D13_SoftConnect>:

void Hal4D13_SoftConnect(UCHAR bEnable) {
 10034d4:	defffd04 	addi	sp,sp,-12
 10034d8:	df000215 	stw	fp,8(sp)
 10034dc:	df000204 	addi	fp,sp,8
 10034e0:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
 10034e4:	008040b4 	movhi	r2,258
 10034e8:	10a4c704 	addi	r2,r2,-27876
 10034ec:	10800017 	ldw	r2,0(r2)
 10034f0:	10800304 	addi	r2,r2,12
 10034f4:	1007883a 	mov	r3,r2
 10034f8:	00802e44 	movi	r2,185
 10034fc:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003500:	008040b4 	movhi	r2,258
 1003504:	10a4c704 	addi	r2,r2,-27876
 1003508:	10800017 	ldw	r2,0(r2)
 100350c:	10800204 	addi	r2,r2,8
 1003510:	10800037 	ldwio	r2,0(r2)
 1003514:	1007883a 	mov	r3,r2
 1003518:	00bfffc4 	movi	r2,-1
 100351c:	1884703a 	and	r2,r3,r2
 1003520:	e0bffe05 	stb	r2,-8(fp)
	if (bEnable)
 1003524:	e0bfff03 	ldbu	r2,-4(fp)
 1003528:	1005003a 	cmpeq	r2,r2,zero
 100352c:	1000041e 	bne	r2,zero,1003540 <Hal4D13_SoftConnect+0x6c>
		c |= D13REG_MODE_SOFTCONNECT;
 1003530:	e0bffe03 	ldbu	r2,-8(fp)
 1003534:	10800054 	ori	r2,r2,1
 1003538:	e0bffe05 	stb	r2,-8(fp)
 100353c:	00000406 	br	1003550 <Hal4D13_SoftConnect+0x7c>
	else
		c &= ~D13REG_MODE_SOFTCONNECT;
 1003540:	e0bffe03 	ldbu	r2,-8(fp)
 1003544:	00ffff84 	movi	r3,-2
 1003548:	10c4703a 	and	r2,r2,r3
 100354c:	e0bffe05 	stb	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
 1003550:	008040b4 	movhi	r2,258
 1003554:	10a4c704 	addi	r2,r2,-27876
 1003558:	10800017 	ldw	r2,0(r2)
 100355c:	10800304 	addi	r2,r2,12
 1003560:	1007883a 	mov	r3,r2
 1003564:	00802e04 	movi	r2,184
 1003568:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 100356c:	008040b4 	movhi	r2,258
 1003570:	10a4c704 	addi	r2,r2,-27876
 1003574:	10800017 	ldw	r2,0(r2)
 1003578:	10800204 	addi	r2,r2,8
 100357c:	e0fffe03 	ldbu	r3,-8(fp)
 1003580:	10c00035 	stwio	r3,0(r2)
}
 1003584:	e037883a 	mov	sp,fp
 1003588:	df000017 	ldw	fp,0(sp)
 100358c:	dec00104 	addi	sp,sp,4
 1003590:	f800283a 	ret

01003594 <Hal4D13_AcknowledgeSETUP>:

void Hal4D13_AcknowledgeSETUP(void) {
 1003594:	deffff04 	addi	sp,sp,-4
 1003598:	df000015 	stw	fp,0(sp)
 100359c:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_ACK_SETUP);
 10035a0:	008040b4 	movhi	r2,258
 10035a4:	10a4c704 	addi	r2,r2,-27876
 10035a8:	10800017 	ldw	r2,0(r2)
 10035ac:	10800304 	addi	r2,r2,12
 10035b0:	1007883a 	mov	r3,r2
 10035b4:	00803d04 	movi	r2,244
 10035b8:	18800035 	stwio	r2,0(r3)
}
 10035bc:	e037883a 	mov	sp,fp
 10035c0:	df000017 	ldw	fp,0(sp)
 10035c4:	dec00104 	addi	sp,sp,4
 10035c8:	f800283a 	ret

010035cc <Hal4D13_ClearBuffer>:

void Hal4D13_ClearBuffer(UCHAR bEPIndex) {
 10035cc:	defffe04 	addi	sp,sp,-8
 10035d0:	df000115 	stw	fp,4(sp)
 10035d4:	df000104 	addi	fp,sp,4
 10035d8:	e13fff05 	stb	r4,-4(fp)
	/* Select Endpoint */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF + bEPIndex);
 10035dc:	008040b4 	movhi	r2,258
 10035e0:	10a4c704 	addi	r2,r2,-27876
 10035e4:	10800017 	ldw	r2,0(r2)
 10035e8:	11000304 	addi	r4,r2,12
 10035ec:	e0bfff03 	ldbu	r2,-4(fp)
 10035f0:	10c01c04 	addi	r3,r2,112
 10035f4:	2005883a 	mov	r2,r4
 10035f8:	10c00035 	stwio	r3,0(r2)
}
 10035fc:	e037883a 	mov	sp,fp
 1003600:	df000017 	ldw	fp,0(sp)
 1003604:	dec00104 	addi	sp,sp,4
 1003608:	f800283a 	ret

0100360c <Hal4D13_ValidBuffer>:

void Hal4D13_ValidBuffer(UCHAR bEPIndex) {
 100360c:	defffe04 	addi	sp,sp,-8
 1003610:	df000115 	stw	fp,4(sp)
 1003614:	df000104 	addi	fp,sp,4
 1003618:	e13fff05 	stb	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF + bEPIndex);
 100361c:	008040b4 	movhi	r2,258
 1003620:	10a4c704 	addi	r2,r2,-27876
 1003624:	10800017 	ldw	r2,0(r2)
 1003628:	11000304 	addi	r4,r2,12
 100362c:	e0bfff03 	ldbu	r2,-4(fp)
 1003630:	10c01804 	addi	r3,r2,96
 1003634:	2005883a 	mov	r2,r4
 1003638:	10c00035 	stwio	r3,0(r2)
}
 100363c:	e037883a 	mov	sp,fp
 1003640:	df000017 	ldw	fp,0(sp)
 1003644:	dec00104 	addi	sp,sp,4
 1003648:	f800283a 	ret

0100364c <Hal4D13_ReadEndpoint>:

USHORT Hal4D13_ReadEndpoint(UCHAR bEPIndex, UCHAR *buf, USHORT len) {
 100364c:	defffa04 	addi	sp,sp,-24
 1003650:	df000515 	stw	fp,20(sp)
 1003654:	df000504 	addi	fp,sp,20
 1003658:	e17ffe15 	stw	r5,-8(fp)
 100365c:	e13ffd05 	stb	r4,-12(fp)
 1003660:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1003664:	008040b4 	movhi	r2,258
 1003668:	10a4c704 	addi	r2,r2,-27876
 100366c:	10800017 	ldw	r2,0(r2)
 1003670:	11000304 	addi	r4,r2,12
 1003674:	e0bffd03 	ldbu	r2,-12(fp)
 1003678:	10c00404 	addi	r3,r2,16
 100367c:	2005883a 	mov	r2,r4
 1003680:	10c00035 	stwio	r3,0(r2)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003684:	008040b4 	movhi	r2,258
 1003688:	10a4c704 	addi	r2,r2,-27876
 100368c:	10800017 	ldw	r2,0(r2)
 1003690:	10800204 	addi	r2,r2,8
 1003694:	10800037 	ldwio	r2,0(r2)
 1003698:	e0bffb8d 	sth	r2,-18(fp)
//	printf("Endpoint has %d bytes available\n", j);
	if (j > len)
 100369c:	e0fffb8b 	ldhu	r3,-18(fp)
 10036a0:	e0bfff0b 	ldhu	r2,-4(fp)
 10036a4:	10c0022e 	bgeu	r2,r3,10036b0 <Hal4D13_ReadEndpoint+0x64>
		j = len;
 10036a8:	e0bfff0b 	ldhu	r2,-4(fp)
 10036ac:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 10036b0:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 10036b4:	00001e06 	br	1003730 <Hal4D13_ReadEndpoint+0xe4>
	//for(i=0; i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 10036b8:	008040b4 	movhi	r2,258
 10036bc:	10a4c704 	addi	r2,r2,-27876
 10036c0:	10800017 	ldw	r2,0(r2)
 10036c4:	10800204 	addi	r2,r2,8
 10036c8:	10800037 	ldwio	r2,0(r2)
 10036cc:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c;
 10036d0:	e0bffb0b 	ldhu	r2,-20(fp)
 10036d4:	1007883a 	mov	r3,r2
 10036d8:	e0bffe17 	ldw	r2,-8(fp)
 10036dc:	10c00005 	stb	r3,0(r2)
		i++; //<<
 10036e0:	e0bffc0b 	ldhu	r2,-16(fp)
 10036e4:	10800044 	addi	r2,r2,1
 10036e8:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 10036ec:	e0fffc0b 	ldhu	r3,-16(fp)
 10036f0:	e0bffb8b 	ldhu	r2,-18(fp)
 10036f4:	1880112e 	bgeu	r3,r2,100373c <Hal4D13_ReadEndpoint+0xf0>
			break; //<<
		buf++;
 10036f8:	e0bffe17 	ldw	r2,-8(fp)
 10036fc:	10800044 	addi	r2,r2,1
 1003700:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8);
 1003704:	e0bffb0b 	ldhu	r2,-20(fp)
 1003708:	1004d23a 	srli	r2,r2,8
 100370c:	1007883a 	mov	r3,r2
 1003710:	e0bffe17 	ldw	r2,-8(fp)
 1003714:	10c00005 	stb	r3,0(r2)
		i++; //<<
 1003718:	e0bffc0b 	ldhu	r2,-16(fp)
 100371c:	10800044 	addi	r2,r2,1
 1003720:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003724:	e0bffe17 	ldw	r2,-8(fp)
 1003728:	10800044 	addi	r2,r2,1
 100372c:	e0bffe15 	stw	r2,-8(fp)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
//	printf("Endpoint has %d bytes available\n", j);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 1003730:	e0fffc0b 	ldhu	r3,-16(fp)
 1003734:	e0bffb8b 	ldhu	r2,-18(fp)
 1003738:	18bfdf36 	bltu	r3,r2,10036b8 <Hal4D13_ReadEndpoint+0x6c>
		*buf = (UCHAR) (c >> 8);
		i++; //<<
		buf++;
	}
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 100373c:	008040b4 	movhi	r2,258
 1003740:	10a4c704 	addi	r2,r2,-27876
 1003744:	10800017 	ldw	r2,0(r2)
 1003748:	11000304 	addi	r4,r2,12
 100374c:	e0bffd03 	ldbu	r2,-12(fp)
 1003750:	10c01c04 	addi	r3,r2,112
 1003754:	2005883a 	mov	r2,r4
 1003758:	10c00035 	stwio	r3,0(r2)

//	printf("We read %d bytes from the endpoint\n", j);
	return j;
 100375c:	e0bffb8b 	ldhu	r2,-18(fp)

}
 1003760:	e037883a 	mov	sp,fp
 1003764:	df000017 	ldw	fp,0(sp)
 1003768:	dec00104 	addi	sp,sp,4
 100376c:	f800283a 	ret

01003770 <Hal4D13_ReadBulkEndpoint>:

USHORT Hal4D13_ReadBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 1003770:	defffa04 	addi	sp,sp,-24
 1003774:	df000515 	stw	fp,20(sp)
 1003778:	df000504 	addi	fp,sp,20
 100377c:	e17ffe15 	stw	r5,-8(fp)
 1003780:	e13ffd05 	stb	r4,-12(fp)
 1003784:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1003788:	008040b4 	movhi	r2,258
 100378c:	10a4c704 	addi	r2,r2,-27876
 1003790:	10800017 	ldw	r2,0(r2)
 1003794:	11000304 	addi	r4,r2,12
 1003798:	e0bffd03 	ldbu	r2,-12(fp)
 100379c:	10c00404 	addi	r3,r2,16
 10037a0:	2005883a 	mov	r2,r4
 10037a4:	10c00035 	stwio	r3,0(r2)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 10037a8:	008040b4 	movhi	r2,258
 10037ac:	10a4c704 	addi	r2,r2,-27876
 10037b0:	10800017 	ldw	r2,0(r2)
 10037b4:	10800204 	addi	r2,r2,8
 10037b8:	10800037 	ldwio	r2,0(r2)
 10037bc:	e0bffb8d 	sth	r2,-18(fp)
	if (j > len)
 10037c0:	e0fffb8b 	ldhu	r3,-18(fp)
 10037c4:	e0bfff0b 	ldhu	r2,-4(fp)
 10037c8:	10c0022e 	bgeu	r2,r3,10037d4 <Hal4D13_ReadBulkEndpoint+0x64>
		j = len;
 10037cc:	e0bfff0b 	ldhu	r2,-4(fp)
 10037d0:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 10037d4:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 10037d8:	00001e06 	br	1003854 <Hal4D13_ReadBulkEndpoint+0xe4>
//  for(i=0; i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 10037dc:	008040b4 	movhi	r2,258
 10037e0:	10a4c704 	addi	r2,r2,-27876
 10037e4:	10800017 	ldw	r2,0(r2)
 10037e8:	10800204 	addi	r2,r2,8
 10037ec:	10800037 	ldwio	r2,0(r2)
 10037f0:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c;
 10037f4:	e0bffb0b 	ldhu	r2,-20(fp)
 10037f8:	1007883a 	mov	r3,r2
 10037fc:	e0bffe17 	ldw	r2,-8(fp)
 1003800:	10c00005 	stb	r3,0(r2)
		i++; //<<
 1003804:	e0bffc0b 	ldhu	r2,-16(fp)
 1003808:	10800044 	addi	r2,r2,1
 100380c:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 1003810:	e0fffc0b 	ldhu	r3,-16(fp)
 1003814:	e0bffb8b 	ldhu	r2,-18(fp)
 1003818:	1880112e 	bgeu	r3,r2,1003860 <Hal4D13_ReadBulkEndpoint+0xf0>
			break; //<<
		buf++;
 100381c:	e0bffe17 	ldw	r2,-8(fp)
 1003820:	10800044 	addi	r2,r2,1
 1003824:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8);
 1003828:	e0bffb0b 	ldhu	r2,-20(fp)
 100382c:	1004d23a 	srli	r2,r2,8
 1003830:	1007883a 	mov	r3,r2
 1003834:	e0bffe17 	ldw	r2,-8(fp)
 1003838:	10c00005 	stb	r3,0(r2)

		i++; //<<
 100383c:	e0bffc0b 	ldhu	r2,-16(fp)
 1003840:	10800044 	addi	r2,r2,1
 1003844:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003848:	e0bffe17 	ldw	r2,-8(fp)
 100384c:	10800044 	addi	r2,r2,1
 1003850:	e0bffe15 	stw	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 1003854:	e0fffc0b 	ldhu	r3,-16(fp)
 1003858:	e0bffb8b 	ldhu	r2,-18(fp)
 100385c:	18bfdf36 	bltu	r3,r2,10037dc <Hal4D13_ReadBulkEndpoint+0x6c>

		i++; //<<
		buf++;
	}
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 1003860:	008040b4 	movhi	r2,258
 1003864:	10a4c704 	addi	r2,r2,-27876
 1003868:	10800017 	ldw	r2,0(r2)
 100386c:	11000304 	addi	r4,r2,12
 1003870:	e0bffd03 	ldbu	r2,-12(fp)
 1003874:	10c01c04 	addi	r3,r2,112
 1003878:	2005883a 	mov	r2,r4
 100387c:	10c00035 	stwio	r3,0(r2)

	return j;
 1003880:	e0bffb8b 	ldhu	r2,-18(fp)
}
 1003884:	e037883a 	mov	sp,fp
 1003888:	df000017 	ldw	fp,0(sp)
 100388c:	dec00104 	addi	sp,sp,4
 1003890:	f800283a 	ret

01003894 <Hal4D13_ReadEndpointWOClearBuffer>:

USHORT Hal4D13_ReadEndpointWOClearBuffer(UCHAR bEPIndex, UCHAR * buf,
		USHORT len) {
 1003894:	defffa04 	addi	sp,sp,-24
 1003898:	df000515 	stw	fp,20(sp)
 100389c:	df000504 	addi	fp,sp,20
 10038a0:	e17ffe15 	stw	r5,-8(fp)
 10038a4:	e13ffd05 	stb	r4,-12(fp)
 10038a8:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 10038ac:	008040b4 	movhi	r2,258
 10038b0:	10a4c704 	addi	r2,r2,-27876
 10038b4:	10800017 	ldw	r2,0(r2)
 10038b8:	11000304 	addi	r4,r2,12
 10038bc:	e0bffd03 	ldbu	r2,-12(fp)
 10038c0:	10c00404 	addi	r3,r2,16
 10038c4:	2005883a 	mov	r2,r4
 10038c8:	10c00035 	stwio	r3,0(r2)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 10038cc:	008040b4 	movhi	r2,258
 10038d0:	10a4c704 	addi	r2,r2,-27876
 10038d4:	10800017 	ldw	r2,0(r2)
 10038d8:	10800204 	addi	r2,r2,8
 10038dc:	10800037 	ldwio	r2,0(r2)
 10038e0:	e0bffb8d 	sth	r2,-18(fp)
	if (j > len)
 10038e4:	e0fffb8b 	ldhu	r3,-18(fp)
 10038e8:	e0bfff0b 	ldhu	r2,-4(fp)
 10038ec:	10c0022e 	bgeu	r2,r3,10038f8 <Hal4D13_ReadEndpointWOClearBuffer+0x64>
		j = len;
 10038f0:	e0bfff0b 	ldhu	r2,-4(fp)
 10038f4:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 10038f8:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 10038fc:	00001e06 	br	1003978 <Hal4D13_ReadEndpointWOClearBuffer+0xe4>
	//for(i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003900:	008040b4 	movhi	r2,258
 1003904:	10a4c704 	addi	r2,r2,-27876
 1003908:	10800017 	ldw	r2,0(r2)
 100390c:	10800204 	addi	r2,r2,8
 1003910:	10800037 	ldwio	r2,0(r2)
 1003914:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c; //printf("WOC= %02X ",*buf);//<<
 1003918:	e0bffb0b 	ldhu	r2,-20(fp)
 100391c:	1007883a 	mov	r3,r2
 1003920:	e0bffe17 	ldw	r2,-8(fp)
 1003924:	10c00005 	stb	r3,0(r2)
		i++; //<<
 1003928:	e0bffc0b 	ldhu	r2,-16(fp)
 100392c:	10800044 	addi	r2,r2,1
 1003930:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 1003934:	e0fffc0b 	ldhu	r3,-16(fp)
 1003938:	e0bffb8b 	ldhu	r2,-18(fp)
 100393c:	1880112e 	bgeu	r3,r2,1003984 <Hal4D13_ReadEndpointWOClearBuffer+0xf0>
			break; //<<
		buf++;
 1003940:	e0bffe17 	ldw	r2,-8(fp)
 1003944:	10800044 	addi	r2,r2,1
 1003948:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8); //printf("WOC= %02X ",*buf);//<<
 100394c:	e0bffb0b 	ldhu	r2,-20(fp)
 1003950:	1004d23a 	srli	r2,r2,8
 1003954:	1007883a 	mov	r3,r2
 1003958:	e0bffe17 	ldw	r2,-8(fp)
 100395c:	10c00005 	stb	r3,0(r2)
		i++; //<<
 1003960:	e0bffc0b 	ldhu	r2,-16(fp)
 1003964:	10800044 	addi	r2,r2,1
 1003968:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 100396c:	e0bffe17 	ldw	r2,-8(fp)
 1003970:	10800044 	addi	r2,r2,1
 1003974:	e0bffe15 	stw	r2,-8(fp)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 1003978:	e0fffc0b 	ldhu	r3,-16(fp)
 100397c:	e0bffb8b 	ldhu	r2,-18(fp)
 1003980:	18bfdf36 	bltu	r3,r2,1003900 <Hal4D13_ReadEndpointWOClearBuffer+0x6c>
		i++; //<<
		buf++;
	}
	// printf("\n",c);
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 1003984:	008040b4 	movhi	r2,258
 1003988:	10a4c704 	addi	r2,r2,-27876
 100398c:	10800017 	ldw	r2,0(r2)
 1003990:	11000304 	addi	r4,r2,12
 1003994:	e0bffd03 	ldbu	r2,-12(fp)
 1003998:	10c01c04 	addi	r3,r2,112
 100399c:	2005883a 	mov	r2,r4
 10039a0:	10c00035 	stwio	r3,0(r2)

	return j;
 10039a4:	e0bffb8b 	ldhu	r2,-18(fp)
}
 10039a8:	e037883a 	mov	sp,fp
 10039ac:	df000017 	ldw	fp,0(sp)
 10039b0:	dec00104 	addi	sp,sp,4
 10039b4:	f800283a 	ret

010039b8 <Hal4D13_WriteEndpoint>:

USHORT Hal4D13_WriteEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 10039b8:	defffb04 	addi	sp,sp,-20
 10039bc:	df000415 	stw	fp,16(sp)
 10039c0:	df000404 	addi	fp,sp,16
 10039c4:	e17ffe15 	stw	r5,-8(fp)
 10039c8:	e13ffd05 	stb	r4,-12(fp)
 10039cc:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, c;
	/* Select Endpoint */

	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 10039d0:	008040b4 	movhi	r2,258
 10039d4:	10a4c704 	addi	r2,r2,-27876
 10039d8:	10800017 	ldw	r2,0(r2)
 10039dc:	10800304 	addi	r2,r2,12
 10039e0:	e0fffd03 	ldbu	r3,-12(fp)
 10039e4:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
 10039e8:	008040b4 	movhi	r2,258
 10039ec:	10a4c704 	addi	r2,r2,-27876
 10039f0:	10800017 	ldw	r2,0(r2)
 10039f4:	10800204 	addi	r2,r2,8
 10039f8:	e0ffff0b 	ldhu	r3,-4(fp)
 10039fc:	10c00035 	stwio	r3,0(r2)
	if (len == 0)
 1003a00:	e0bfff0b 	ldhu	r2,-4(fp)
 1003a04:	1004c03a 	cmpne	r2,r2,zero
 1003a08:	1000051e 	bne	r2,zero,1003a20 <Hal4D13_WriteEndpoint+0x68>
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
 1003a0c:	008040b4 	movhi	r2,258
 1003a10:	10a4c704 	addi	r2,r2,-27876
 1003a14:	10800017 	ldw	r2,0(r2)
 1003a18:	10800204 	addi	r2,r2,8
 1003a1c:	10000035 	stwio	zero,0(r2)
	/* Write Buffer */

	//for(i=0; i<len; i=i+2, buf++ )
	i = 0;
 1003a20:	e03ffc8d 	sth	zero,-14(fp)
	while (i < len) {
 1003a24:	00002b06 	br	1003ad4 <Hal4D13_WriteEndpoint+0x11c>
		c = *buf;
 1003a28:	e0bffe17 	ldw	r2,-8(fp)
 1003a2c:	10800003 	ldbu	r2,0(r2)
 1003a30:	10803fcc 	andi	r2,r2,255
 1003a34:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003a38:	e0bffe17 	ldw	r2,-8(fp)
 1003a3c:	10800044 	addi	r2,r2,1
 1003a40:	e0bffe15 	stw	r2,-8(fp)
		i++;
 1003a44:	e0bffc8b 	ldhu	r2,-14(fp)
 1003a48:	10800044 	addi	r2,r2,1
 1003a4c:	e0bffc8d 	sth	r2,-14(fp)
		if (i >= len) {
 1003a50:	e0fffc8b 	ldhu	r3,-14(fp)
 1003a54:	e0bfff0b 	ldhu	r2,-4(fp)
 1003a58:	18800636 	bltu	r3,r2,1003a74 <Hal4D13_WriteEndpoint+0xbc>
			IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1003a5c:	008040b4 	movhi	r2,258
 1003a60:	10a4c704 	addi	r2,r2,-27876
 1003a64:	10800017 	ldw	r2,0(r2)
 1003a68:	10800204 	addi	r2,r2,8
 1003a6c:	e0fffc0b 	ldhu	r3,-16(fp)
 1003a70:	10c00035 	stwio	r3,0(r2)
		} //printf("w=%04x  ",c);break; }
		c = (c & 0xff) + (*buf << 8 & 0xff00);
 1003a74:	e0bffc0b 	ldhu	r2,-16(fp)
 1003a78:	10803fcc 	andi	r2,r2,255
 1003a7c:	1009883a 	mov	r4,r2
 1003a80:	e0bffe17 	ldw	r2,-8(fp)
 1003a84:	10800003 	ldbu	r2,0(r2)
 1003a88:	10803fcc 	andi	r2,r2,255
 1003a8c:	1004923a 	slli	r2,r2,8
 1003a90:	1007883a 	mov	r3,r2
 1003a94:	00bfc004 	movi	r2,-256
 1003a98:	1884703a 	and	r2,r3,r2
 1003a9c:	2085883a 	add	r2,r4,r2
 1003aa0:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003aa4:	e0bffe17 	ldw	r2,-8(fp)
 1003aa8:	10800044 	addi	r2,r2,1
 1003aac:	e0bffe15 	stw	r2,-8(fp)
		i++;
 1003ab0:	e0bffc8b 	ldhu	r2,-14(fp)
 1003ab4:	10800044 	addi	r2,r2,1
 1003ab8:	e0bffc8d 	sth	r2,-14(fp)
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1003abc:	008040b4 	movhi	r2,258
 1003ac0:	10a4c704 	addi	r2,r2,-27876
 1003ac4:	10800017 	ldw	r2,0(r2)
 1003ac8:	10800204 	addi	r2,r2,8
 1003acc:	e0fffc0b 	ldhu	r3,-16(fp)
 1003ad0:	10c00035 	stwio	r3,0(r2)
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
	/* Write Buffer */

	//for(i=0; i<len; i=i+2, buf++ )
	i = 0;
	while (i < len) {
 1003ad4:	e0fffc8b 	ldhu	r3,-14(fp)
 1003ad8:	e0bfff0b 	ldhu	r2,-4(fp)
 1003adc:	18bfd236 	bltu	r3,r2,1003a28 <Hal4D13_WriteEndpoint+0x70>
//    printf("w=%04x  ",c);
	}
//  printf("\nlen=%d i=%d\n",len,i);

	/* Validate Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
 1003ae0:	008040b4 	movhi	r2,258
 1003ae4:	10a4c704 	addi	r2,r2,-27876
 1003ae8:	10800017 	ldw	r2,0(r2)
 1003aec:	11000304 	addi	r4,r2,12
 1003af0:	e0bffd03 	ldbu	r2,-12(fp)
 1003af4:	10c01804 	addi	r3,r2,96
 1003af8:	2005883a 	mov	r2,r4
 1003afc:	10c00035 	stwio	r3,0(r2)
	// printf("\n");
	return i;
 1003b00:	e0bffc8b 	ldhu	r2,-14(fp)
}
 1003b04:	e037883a 	mov	sp,fp
 1003b08:	df000017 	ldw	fp,0(sp)
 1003b0c:	dec00104 	addi	sp,sp,4
 1003b10:	f800283a 	ret

01003b14 <Hal4D13_WriteBulkEndpoint>:

USHORT Hal4D13_WriteBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 1003b14:	defffb04 	addi	sp,sp,-20
 1003b18:	df000415 	stw	fp,16(sp)
 1003b1c:	df000404 	addi	fp,sp,16
 1003b20:	e17ffe15 	stw	r5,-8(fp)
 1003b24:	e13ffd05 	stb	r4,-12(fp)
 1003b28:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, c;
	/* Select Endpoint */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 1003b2c:	008040b4 	movhi	r2,258
 1003b30:	10a4c704 	addi	r2,r2,-27876
 1003b34:	10800017 	ldw	r2,0(r2)
 1003b38:	10800304 	addi	r2,r2,12
 1003b3c:	e0fffd03 	ldbu	r3,-12(fp)
 1003b40:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
 1003b44:	008040b4 	movhi	r2,258
 1003b48:	10a4c704 	addi	r2,r2,-27876
 1003b4c:	10800017 	ldw	r2,0(r2)
 1003b50:	10800204 	addi	r2,r2,8
 1003b54:	e0ffff0b 	ldhu	r3,-4(fp)
 1003b58:	10c00035 	stwio	r3,0(r2)
	if (len == 0)
 1003b5c:	e0bfff0b 	ldhu	r2,-4(fp)
 1003b60:	1004c03a 	cmpne	r2,r2,zero
 1003b64:	1000051e 	bne	r2,zero,1003b7c <Hal4D13_WriteBulkEndpoint+0x68>
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
 1003b68:	008040b4 	movhi	r2,258
 1003b6c:	10a4c704 	addi	r2,r2,-27876
 1003b70:	10800017 	ldw	r2,0(r2)
 1003b74:	10800204 	addi	r2,r2,8
 1003b78:	10000035 	stwio	zero,0(r2)

	/* Write Buffer */
	for (i = 0; i < len; i = i + 2, buf++) {
 1003b7c:	e03ffc8d 	sth	zero,-14(fp)
 1003b80:	00001b06 	br	1003bf0 <Hal4D13_WriteBulkEndpoint+0xdc>
		c = *buf;
 1003b84:	e0bffe17 	ldw	r2,-8(fp)
 1003b88:	10800003 	ldbu	r2,0(r2)
 1003b8c:	10803fcc 	andi	r2,r2,255
 1003b90:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003b94:	e0bffe17 	ldw	r2,-8(fp)
 1003b98:	10800044 	addi	r2,r2,1
 1003b9c:	e0bffe15 	stw	r2,-8(fp)
		c += (USHORT) (*buf << 8);
 1003ba0:	e0bffe17 	ldw	r2,-8(fp)
 1003ba4:	10800003 	ldbu	r2,0(r2)
 1003ba8:	10803fcc 	andi	r2,r2,255
 1003bac:	1004923a 	slli	r2,r2,8
 1003bb0:	1007883a 	mov	r3,r2
 1003bb4:	e0bffc0b 	ldhu	r2,-16(fp)
 1003bb8:	10c5883a 	add	r2,r2,r3
 1003bbc:	e0bffc0d 	sth	r2,-16(fp)
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1003bc0:	008040b4 	movhi	r2,258
 1003bc4:	10a4c704 	addi	r2,r2,-27876
 1003bc8:	10800017 	ldw	r2,0(r2)
 1003bcc:	10800204 	addi	r2,r2,8
 1003bd0:	e0fffc0b 	ldhu	r3,-16(fp)
 1003bd4:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
	if (len == 0)
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);

	/* Write Buffer */
	for (i = 0; i < len; i = i + 2, buf++) {
 1003bd8:	e0bffc8b 	ldhu	r2,-14(fp)
 1003bdc:	10800084 	addi	r2,r2,2
 1003be0:	e0bffc8d 	sth	r2,-14(fp)
 1003be4:	e0bffe17 	ldw	r2,-8(fp)
 1003be8:	10800044 	addi	r2,r2,1
 1003bec:	e0bffe15 	stw	r2,-8(fp)
 1003bf0:	e0fffc8b 	ldhu	r3,-14(fp)
 1003bf4:	e0bfff0b 	ldhu	r2,-4(fp)
 1003bf8:	18bfe236 	bltu	r3,r2,1003b84 <Hal4D13_WriteBulkEndpoint+0x70>
		buf++;
		c += (USHORT) (*buf << 8);
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
	}
	/* Validate Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
 1003bfc:	008040b4 	movhi	r2,258
 1003c00:	10a4c704 	addi	r2,r2,-27876
 1003c04:	10800017 	ldw	r2,0(r2)
 1003c08:	11000304 	addi	r4,r2,12
 1003c0c:	e0bffd03 	ldbu	r2,-12(fp)
 1003c10:	10c01804 	addi	r3,r2,96
 1003c14:	2005883a 	mov	r2,r4
 1003c18:	10c00035 	stwio	r3,0(r2)
	return len;
 1003c1c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003c20:	e037883a 	mov	sp,fp
 1003c24:	df000017 	ldw	fp,0(sp)
 1003c28:	dec00104 	addi	sp,sp,4
 1003c2c:	f800283a 	ret

01003c30 <Hal4D13_GetIntEnable>:

ULONG Hal4D13_GetIntEnable(void) {
 1003c30:	defffe04 	addi	sp,sp,-8
 1003c34:	df000115 	stw	fp,4(sp)
 1003c38:	df000104 	addi	fp,sp,4
	ULONG i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_INTEN);
 1003c3c:	008040b4 	movhi	r2,258
 1003c40:	10a4c704 	addi	r2,r2,-27876
 1003c44:	10800017 	ldw	r2,0(r2)
 1003c48:	10800304 	addi	r2,r2,12
 1003c4c:	1007883a 	mov	r3,r2
 1003c50:	008030c4 	movi	r2,195
 1003c54:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003c58:	008040b4 	movhi	r2,258
 1003c5c:	10a4c704 	addi	r2,r2,-27876
 1003c60:	10800017 	ldw	r2,0(r2)
 1003c64:	10800204 	addi	r2,r2,8
 1003c68:	10800037 	ldwio	r2,0(r2)
 1003c6c:	e0bfff15 	stw	r2,-4(fp)
	i += (((ULONG) IORD(ISP1362_BASE,D13_DATA_PORT)) << 16);
 1003c70:	008040b4 	movhi	r2,258
 1003c74:	10a4c704 	addi	r2,r2,-27876
 1003c78:	10800017 	ldw	r2,0(r2)
 1003c7c:	10800204 	addi	r2,r2,8
 1003c80:	10800037 	ldwio	r2,0(r2)
 1003c84:	1006943a 	slli	r3,r2,16
 1003c88:	e0bfff17 	ldw	r2,-4(fp)
 1003c8c:	10c5883a 	add	r2,r2,r3
 1003c90:	e0bfff15 	stw	r2,-4(fp)
	return i;
 1003c94:	e0bfff17 	ldw	r2,-4(fp)
}
 1003c98:	e037883a 	mov	sp,fp
 1003c9c:	df000017 	ldw	fp,0(sp)
 1003ca0:	dec00104 	addi	sp,sp,4
 1003ca4:	f800283a 	ret

01003ca8 <Hal4D13_SetIntEnable>:

void Hal4D13_SetIntEnable(ULONG dIntEn) {
 1003ca8:	defffe04 	addi	sp,sp,-8
 1003cac:	df000115 	stw	fp,4(sp)
 1003cb0:	df000104 	addi	fp,sp,4
 1003cb4:	e13fff15 	stw	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_INTEN);
 1003cb8:	008040b4 	movhi	r2,258
 1003cbc:	10a4c704 	addi	r2,r2,-27876
 1003cc0:	10800017 	ldw	r2,0(r2)
 1003cc4:	10800304 	addi	r2,r2,12
 1003cc8:	1007883a 	mov	r3,r2
 1003ccc:	00803084 	movi	r2,194
 1003cd0:	18800035 	stwio	r2,0(r3)
	dIntEn = (dIntEn & 0x0FFFFFF);
 1003cd4:	e0ffff17 	ldw	r3,-4(fp)
 1003cd8:	00804034 	movhi	r2,256
 1003cdc:	10bfffc4 	addi	r2,r2,-1
 1003ce0:	1884703a 	and	r2,r3,r2
 1003ce4:	e0bfff15 	stw	r2,-4(fp)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)dIntEn);
 1003ce8:	008040b4 	movhi	r2,258
 1003cec:	10a4c704 	addi	r2,r2,-27876
 1003cf0:	10800017 	ldw	r2,0(r2)
 1003cf4:	11000204 	addi	r4,r2,8
 1003cf8:	e0bfff17 	ldw	r2,-4(fp)
 1003cfc:	10ffffcc 	andi	r3,r2,65535
 1003d00:	2005883a 	mov	r2,r4
 1003d04:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)(dIntEn >> 16));
 1003d08:	008040b4 	movhi	r2,258
 1003d0c:	10a4c704 	addi	r2,r2,-27876
 1003d10:	10800017 	ldw	r2,0(r2)
 1003d14:	11000204 	addi	r4,r2,8
 1003d18:	e0bfff17 	ldw	r2,-4(fp)
 1003d1c:	1004d43a 	srli	r2,r2,16
 1003d20:	10ffffcc 	andi	r3,r2,65535
 1003d24:	2005883a 	mov	r2,r4
 1003d28:	10c00035 	stwio	r3,0(r2)
}
 1003d2c:	e037883a 	mov	sp,fp
 1003d30:	df000017 	ldw	fp,0(sp)
 1003d34:	dec00104 	addi	sp,sp,4
 1003d38:	f800283a 	ret

01003d3c <Hal4D13_ReadInterruptRegister>:

ULONG Hal4D13_ReadInterruptRegister(void) {
 1003d3c:	defffd04 	addi	sp,sp,-12
 1003d40:	df000215 	stw	fp,8(sp)
 1003d44:	df000204 	addi	fp,sp,8
	ULONG j, i = 0;
 1003d48:	e03ffe15 	stw	zero,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_INT_SRC);
 1003d4c:	008040b4 	movhi	r2,258
 1003d50:	10a4c704 	addi	r2,r2,-27876
 1003d54:	10800017 	ldw	r2,0(r2)
 1003d58:	10800304 	addi	r2,r2,12
 1003d5c:	1007883a 	mov	r3,r2
 1003d60:	00803004 	movi	r2,192
 1003d64:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003d68:	008040b4 	movhi	r2,258
 1003d6c:	10a4c704 	addi	r2,r2,-27876
 1003d70:	10800017 	ldw	r2,0(r2)
 1003d74:	10800204 	addi	r2,r2,8
 1003d78:	10800037 	ldwio	r2,0(r2)
 1003d7c:	e0bffe15 	stw	r2,-8(fp)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003d80:	008040b4 	movhi	r2,258
 1003d84:	10a4c704 	addi	r2,r2,-27876
 1003d88:	10800017 	ldw	r2,0(r2)
 1003d8c:	10800204 	addi	r2,r2,8
 1003d90:	10800037 	ldwio	r2,0(r2)
 1003d94:	e0bfff15 	stw	r2,-4(fp)
	j = ((j << 16) & 0xffff0000) + (i & 0xffff);
 1003d98:	e0bfff17 	ldw	r2,-4(fp)
 1003d9c:	1004943a 	slli	r2,r2,16
 1003da0:	10ffffec 	andhi	r3,r2,65535
 1003da4:	e0bffe17 	ldw	r2,-8(fp)
 1003da8:	10bfffcc 	andi	r2,r2,65535
 1003dac:	1885883a 	add	r2,r3,r2
 1003db0:	e0bfff15 	stw	r2,-4(fp)
	return i;
 1003db4:	e0bffe17 	ldw	r2,-8(fp)
}
 1003db8:	e037883a 	mov	sp,fp
 1003dbc:	df000017 	ldw	fp,0(sp)
 1003dc0:	dec00104 	addi	sp,sp,4
 1003dc4:	f800283a 	ret

01003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWInteruptClear(UCHAR bEPIndex) {
 1003dc8:	defffd04 	addi	sp,sp,-12
 1003dcc:	df000215 	stw	fp,8(sp)
 1003dd0:	df000204 	addi	fp,sp,8
 1003dd4:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RDSTS_CLRINT + bEPIndex);
 1003dd8:	008040b4 	movhi	r2,258
 1003ddc:	10a4c704 	addi	r2,r2,-27876
 1003de0:	10800017 	ldw	r2,0(r2)
 1003de4:	11000304 	addi	r4,r2,12
 1003de8:	e0bfff03 	ldbu	r2,-4(fp)
 1003dec:	10c01404 	addi	r3,r2,80
 1003df0:	2005883a 	mov	r2,r4
 1003df4:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003df8:	008040b4 	movhi	r2,258
 1003dfc:	10a4c704 	addi	r2,r2,-27876
 1003e00:	10800017 	ldw	r2,0(r2)
 1003e04:	10800204 	addi	r2,r2,8
 1003e08:	10800037 	ldwio	r2,0(r2)
 1003e0c:	1007883a 	mov	r3,r2
 1003e10:	00bfffc4 	movi	r2,-1
 1003e14:	1884703a 	and	r2,r3,r2
 1003e18:	e0bffe05 	stb	r2,-8(fp)
	return c;
 1003e1c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1003e20:	e037883a 	mov	sp,fp
 1003e24:	df000017 	ldw	fp,0(sp)
 1003e28:	dec00104 	addi	sp,sp,4
 1003e2c:	f800283a 	ret

01003e30 <Hal4D13_GetEndpointStatusWOInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWOInteruptClear(UCHAR bEPIndex) {
 1003e30:	defffd04 	addi	sp,sp,-12
 1003e34:	df000215 	stw	fp,8(sp)
 1003e38:	df000204 	addi	fp,sp,8
 1003e3c:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RDSTS + bEPIndex);
 1003e40:	008040b4 	movhi	r2,258
 1003e44:	10a4c704 	addi	r2,r2,-27876
 1003e48:	10800017 	ldw	r2,0(r2)
 1003e4c:	11000304 	addi	r4,r2,12
 1003e50:	e0bfff03 	ldbu	r2,-4(fp)
 1003e54:	10c03404 	addi	r3,r2,208
 1003e58:	2005883a 	mov	r2,r4
 1003e5c:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003e60:	008040b4 	movhi	r2,258
 1003e64:	10a4c704 	addi	r2,r2,-27876
 1003e68:	10800017 	ldw	r2,0(r2)
 1003e6c:	10800204 	addi	r2,r2,8
 1003e70:	10800037 	ldwio	r2,0(r2)
 1003e74:	1007883a 	mov	r3,r2
 1003e78:	00bfffc4 	movi	r2,-1
 1003e7c:	1884703a 	and	r2,r3,r2
 1003e80:	e0bffe05 	stb	r2,-8(fp)
	return c;
 1003e84:	e0bffe03 	ldbu	r2,-8(fp)
}
 1003e88:	e037883a 	mov	sp,fp
 1003e8c:	df000017 	ldw	fp,0(sp)
 1003e90:	dec00104 	addi	sp,sp,4
 1003e94:	f800283a 	ret

01003e98 <Hal4D13_SetEndpointStatus>:

void Hal4D13_SetEndpointStatus(UCHAR bEPIndex, UCHAR bStalled) {
 1003e98:	defffd04 	addi	sp,sp,-12
 1003e9c:	df000215 	stw	fp,8(sp)
 1003ea0:	df000204 	addi	fp,sp,8
 1003ea4:	e13ffe05 	stb	r4,-8(fp)
 1003ea8:	e17fff05 	stb	r5,-4(fp)
	if (bStalled & 0x80) {
 1003eac:	e0bfff03 	ldbu	r2,-4(fp)
 1003eb0:	10803fcc 	andi	r2,r2,255
 1003eb4:	1080201c 	xori	r2,r2,128
 1003eb8:	10bfe004 	addi	r2,r2,-128
 1003ebc:	1004403a 	cmpge	r2,r2,zero
 1003ec0:	1000091e 	bne	r2,zero,1003ee8 <Hal4D13_SetEndpointStatus+0x50>
		IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_STS + bEPIndex);
 1003ec4:	008040b4 	movhi	r2,258
 1003ec8:	10a4c704 	addi	r2,r2,-27876
 1003ecc:	10800017 	ldw	r2,0(r2)
 1003ed0:	11000304 	addi	r4,r2,12
 1003ed4:	e0bffe03 	ldbu	r2,-8(fp)
 1003ed8:	10c01004 	addi	r3,r2,64
 1003edc:	2005883a 	mov	r2,r4
 1003ee0:	10c00035 	stwio	r3,0(r2)
 1003ee4:	00000806 	br	1003f08 <Hal4D13_SetEndpointStatus+0x70>
	} else {
		// clear endpoint stall.
		IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLR_STALL + bEPIndex);
 1003ee8:	008040b4 	movhi	r2,258
 1003eec:	10a4c704 	addi	r2,r2,-27876
 1003ef0:	10800017 	ldw	r2,0(r2)
 1003ef4:	11000304 	addi	r4,r2,12
 1003ef8:	e0bffe03 	ldbu	r2,-8(fp)
 1003efc:	10c02004 	addi	r3,r2,128
 1003f00:	2005883a 	mov	r2,r4
 1003f04:	10c00035 	stwio	r3,0(r2)
	}
}
 1003f08:	e037883a 	mov	sp,fp
 1003f0c:	df000017 	ldw	fp,0(sp)
 1003f10:	dec00104 	addi	sp,sp,4
 1003f14:	f800283a 	ret

01003f18 <Hal4D13_SetDMAConfig>:

void Hal4D13_SetDMAConfig(USHORT wDMACnfg) {
 1003f18:	defffe04 	addi	sp,sp,-8
 1003f1c:	df000115 	stw	fp,4(sp)
 1003f20:	df000104 	addi	fp,sp,4
 1003f24:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_WR_CNFG);
 1003f28:	008040b4 	movhi	r2,258
 1003f2c:	10a4c704 	addi	r2,r2,-27876
 1003f30:	10800017 	ldw	r2,0(r2)
 1003f34:	10800304 	addi	r2,r2,12
 1003f38:	1007883a 	mov	r3,r2
 1003f3c:	00803c04 	movi	r2,240
 1003f40:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDMACnfg);
 1003f44:	008040b4 	movhi	r2,258
 1003f48:	10a4c704 	addi	r2,r2,-27876
 1003f4c:	10800017 	ldw	r2,0(r2)
 1003f50:	10800204 	addi	r2,r2,8
 1003f54:	e0ffff0b 	ldhu	r3,-4(fp)
 1003f58:	10c00035 	stwio	r3,0(r2)
}
 1003f5c:	e037883a 	mov	sp,fp
 1003f60:	df000017 	ldw	fp,0(sp)
 1003f64:	dec00104 	addi	sp,sp,4
 1003f68:	f800283a 	ret

01003f6c <Hal4D13_GetDMAConfig>:

USHORT Hal4D13_GetDMAConfig(void) {
 1003f6c:	defffe04 	addi	sp,sp,-8
 1003f70:	df000115 	stw	fp,4(sp)
 1003f74:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_RD_CNFG);
 1003f78:	008040b4 	movhi	r2,258
 1003f7c:	10a4c704 	addi	r2,r2,-27876
 1003f80:	10800017 	ldw	r2,0(r2)
 1003f84:	10800304 	addi	r2,r2,12
 1003f88:	1007883a 	mov	r3,r2
 1003f8c:	00803c44 	movi	r2,241
 1003f90:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003f94:	008040b4 	movhi	r2,258
 1003f98:	10a4c704 	addi	r2,r2,-27876
 1003f9c:	10800017 	ldw	r2,0(r2)
 1003fa0:	10800204 	addi	r2,r2,8
 1003fa4:	10800037 	ldwio	r2,0(r2)
 1003fa8:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1003fac:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003fb0:	e037883a 	mov	sp,fp
 1003fb4:	df000017 	ldw	fp,0(sp)
 1003fb8:	dec00104 	addi	sp,sp,4
 1003fbc:	f800283a 	ret

01003fc0 <Hal4D13_SetDMACounter>:

void Hal4D13_SetDMACounter(USHORT wDMACounter) {
 1003fc0:	defffe04 	addi	sp,sp,-8
 1003fc4:	df000115 	stw	fp,4(sp)
 1003fc8:	df000104 	addi	fp,sp,4
 1003fcc:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_WR_COUNT);
 1003fd0:	008040b4 	movhi	r2,258
 1003fd4:	10a4c704 	addi	r2,r2,-27876
 1003fd8:	10800017 	ldw	r2,0(r2)
 1003fdc:	10800304 	addi	r2,r2,12
 1003fe0:	1007883a 	mov	r3,r2
 1003fe4:	00803c84 	movi	r2,242
 1003fe8:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDMACounter);
 1003fec:	008040b4 	movhi	r2,258
 1003ff0:	10a4c704 	addi	r2,r2,-27876
 1003ff4:	10800017 	ldw	r2,0(r2)
 1003ff8:	10800204 	addi	r2,r2,8
 1003ffc:	e0ffff0b 	ldhu	r3,-4(fp)
 1004000:	10c00035 	stwio	r3,0(r2)
}
 1004004:	e037883a 	mov	sp,fp
 1004008:	df000017 	ldw	fp,0(sp)
 100400c:	dec00104 	addi	sp,sp,4
 1004010:	f800283a 	ret

01004014 <Hal4D13_GetDMACounter>:

USHORT Hal4D13_GetDMACounter(void) {
 1004014:	defffe04 	addi	sp,sp,-8
 1004018:	df000115 	stw	fp,4(sp)
 100401c:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_RD_COUNT);
 1004020:	008040b4 	movhi	r2,258
 1004024:	10a4c704 	addi	r2,r2,-27876
 1004028:	10800017 	ldw	r2,0(r2)
 100402c:	10800304 	addi	r2,r2,12
 1004030:	1007883a 	mov	r3,r2
 1004034:	00803cc4 	movi	r2,243
 1004038:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 100403c:	008040b4 	movhi	r2,258
 1004040:	10a4c704 	addi	r2,r2,-27876
 1004044:	10800017 	ldw	r2,0(r2)
 1004048:	10800204 	addi	r2,r2,8
 100404c:	10800037 	ldwio	r2,0(r2)
 1004050:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1004054:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1004058:	e037883a 	mov	sp,fp
 100405c:	df000017 	ldw	fp,0(sp)
 1004060:	dec00104 	addi	sp,sp,4
 1004064:	f800283a 	ret

01004068 <Hal4D13_GetDataFromChipRam>:

USHORT Hal4D13_GetDataFromChipRam(void) {
 1004068:	defffe04 	addi	sp,sp,-8
 100406c:	df000115 	stw	fp,4(sp)
 1004070:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_RAM);
 1004074:	008040b4 	movhi	r2,258
 1004078:	10a4c704 	addi	r2,r2,-27876
 100407c:	10800017 	ldw	r2,0(r2)
 1004080:	10800304 	addi	r2,r2,12
 1004084:	1007883a 	mov	r3,r2
 1004088:	00802cc4 	movi	r2,179
 100408c:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1004090:	008040b4 	movhi	r2,258
 1004094:	10a4c704 	addi	r2,r2,-27876
 1004098:	10800017 	ldw	r2,0(r2)
 100409c:	10800204 	addi	r2,r2,8
 10040a0:	10800037 	ldwio	r2,0(r2)
 10040a4:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 10040a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10040ac:	e037883a 	mov	sp,fp
 10040b0:	df000017 	ldw	fp,0(sp)
 10040b4:	dec00104 	addi	sp,sp,4
 10040b8:	f800283a 	ret

010040bc <Hal4D13_SetDataToChipRam>:

void Hal4D13_SetDataToChipRam(USHORT wData) {
 10040bc:	defffe04 	addi	sp,sp,-8
 10040c0:	df000115 	stw	fp,4(sp)
 10040c4:	df000104 	addi	fp,sp,4
 10040c8:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_RAM);
 10040cc:	008040b4 	movhi	r2,258
 10040d0:	10a4c704 	addi	r2,r2,-27876
 10040d4:	10800017 	ldw	r2,0(r2)
 10040d8:	10800304 	addi	r2,r2,12
 10040dc:	1007883a 	mov	r3,r2
 10040e0:	00802c84 	movi	r2,178
 10040e4:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wData);
 10040e8:	008040b4 	movhi	r2,258
 10040ec:	10a4c704 	addi	r2,r2,-27876
 10040f0:	10800017 	ldw	r2,0(r2)
 10040f4:	10800204 	addi	r2,r2,8
 10040f8:	e0ffff0b 	ldhu	r3,-4(fp)
 10040fc:	10c00035 	stwio	r3,0(r2)
}
 1004100:	e037883a 	mov	sp,fp
 1004104:	df000017 	ldw	fp,0(sp)
 1004108:	dec00104 	addi	sp,sp,4
 100410c:	f800283a 	ret

01004110 <Hal4D13_ReadCurrentFrameNumber>:

USHORT Hal4D13_ReadCurrentFrameNumber(void) {
 1004110:	defffe04 	addi	sp,sp,-8
 1004114:	df000115 	stw	fp,4(sp)
 1004118:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_RD_FRMNUM);
 100411c:	008040b4 	movhi	r2,258
 1004120:	10a4c704 	addi	r2,r2,-27876
 1004124:	10800017 	ldw	r2,0(r2)
 1004128:	10800304 	addi	r2,r2,12
 100412c:	1007883a 	mov	r3,r2
 1004130:	00802d04 	movi	r2,180
 1004134:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1004138:	008040b4 	movhi	r2,258
 100413c:	10a4c704 	addi	r2,r2,-27876
 1004140:	10800017 	ldw	r2,0(r2)
 1004144:	10800204 	addi	r2,r2,8
 1004148:	10800037 	ldwio	r2,0(r2)
 100414c:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1004150:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1004154:	e037883a 	mov	sp,fp
 1004158:	df000017 	ldw	fp,0(sp)
 100415c:	dec00104 	addi	sp,sp,4
 1004160:	f800283a 	ret

01004164 <Hal4D13_LockDevice>:

void Hal4D13_LockDevice(UCHAR bTrue) {
 1004164:	defffd04 	addi	sp,sp,-12
 1004168:	df000215 	stw	fp,8(sp)
 100416c:	df000204 	addi	fp,sp,8
 1004170:	e13fff05 	stb	r4,-4(fp)
	USHORT c;
	if (bTrue)
 1004174:	e0bfff03 	ldbu	r2,-4(fp)
 1004178:	1005003a 	cmpeq	r2,r2,zero
 100417c:	1000021e 	bne	r2,zero,1004188 <Hal4D13_LockDevice+0x24>
		c = 0;
 1004180:	e03ffe0d 	sth	zero,-8(fp)
 1004184:	00000206 	br	1004190 <Hal4D13_LockDevice+0x2c>
	else
		c = 0xAA37;
 1004188:	00aa8dc4 	movi	r2,-21961
 100418c:	e0bffe0d 	sth	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_LOCK);
 1004190:	008040b4 	movhi	r2,258
 1004194:	10a4c704 	addi	r2,r2,-27876
 1004198:	10800017 	ldw	r2,0(r2)
 100419c:	10800304 	addi	r2,r2,12
 10041a0:	1007883a 	mov	r3,r2
 10041a4:	00802c04 	movi	r2,176
 10041a8:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 10041ac:	008040b4 	movhi	r2,258
 10041b0:	10a4c704 	addi	r2,r2,-27876
 10041b4:	10800017 	ldw	r2,0(r2)
 10041b8:	10800204 	addi	r2,r2,8
 10041bc:	e0fffe0b 	ldhu	r3,-8(fp)
 10041c0:	10c00035 	stwio	r3,0(r2)
}
 10041c4:	e037883a 	mov	sp,fp
 10041c8:	df000017 	ldw	fp,0(sp)
 10041cc:	dec00104 	addi	sp,sp,4
 10041d0:	f800283a 	ret

010041d4 <Hal4D13_ReadChipID>:

USHORT Hal4D13_ReadChipID(void) {
 10041d4:	defffe04 	addi	sp,sp,-8
 10041d8:	df000115 	stw	fp,4(sp)
 10041dc:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_CHIPID);
 10041e0:	008040b4 	movhi	r2,258
 10041e4:	10a4c704 	addi	r2,r2,-27876
 10041e8:	10800017 	ldw	r2,0(r2)
 10041ec:	10800304 	addi	r2,r2,12
 10041f0:	1007883a 	mov	r3,r2
 10041f4:	00802d44 	movi	r2,181
 10041f8:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 10041fc:	008040b4 	movhi	r2,258
 1004200:	10a4c704 	addi	r2,r2,-27876
 1004204:	10800017 	ldw	r2,0(r2)
 1004208:	10800204 	addi	r2,r2,8
 100420c:	10800037 	ldwio	r2,0(r2)
 1004210:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1004214:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1004218:	e037883a 	mov	sp,fp
 100421c:	df000017 	ldw	fp,0(sp)
 1004220:	dec00104 	addi	sp,sp,4
 1004224:	f800283a 	ret

01004228 <Hal4D13_GetErrorCode>:

UCHAR Hal4D13_GetErrorCode(UCHAR bEPIndex) {
 1004228:	defffd04 	addi	sp,sp,-12
 100422c:	df000215 	stw	fp,8(sp)
 1004230:	df000204 	addi	fp,sp,8
 1004234:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_ERR+bEPIndex);
 1004238:	008040b4 	movhi	r2,258
 100423c:	10a4c704 	addi	r2,r2,-27876
 1004240:	10800017 	ldw	r2,0(r2)
 1004244:	11000304 	addi	r4,r2,12
 1004248:	e0bfff03 	ldbu	r2,-4(fp)
 100424c:	10c02804 	addi	r3,r2,160
 1004250:	2005883a 	mov	r2,r4
 1004254:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1004258:	008040b4 	movhi	r2,258
 100425c:	10a4c704 	addi	r2,r2,-27876
 1004260:	10800017 	ldw	r2,0(r2)
 1004264:	10800204 	addi	r2,r2,8
 1004268:	10800037 	ldwio	r2,0(r2)
 100426c:	1007883a 	mov	r3,r2
 1004270:	00bfffc4 	movi	r2,-1
 1004274:	1884703a 	and	r2,r3,r2
 1004278:	e0bffe05 	stb	r2,-8(fp)
	return c;
 100427c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004280:	e037883a 	mov	sp,fp
 1004284:	df000017 	ldw	fp,0(sp)
 1004288:	dec00104 	addi	sp,sp,4
 100428c:	f800283a 	ret

01004290 <Hal4D13_GetEndpointConfig>:

UCHAR Hal4D13_GetEndpointConfig(UCHAR bEPIndex) {
 1004290:	defffd04 	addi	sp,sp,-12
 1004294:	df000215 	stw	fp,8(sp)
 1004298:	df000204 	addi	fp,sp,8
 100429c:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_CNFG+bEPIndex);
 10042a0:	008040b4 	movhi	r2,258
 10042a4:	10a4c704 	addi	r2,r2,-27876
 10042a8:	10800017 	ldw	r2,0(r2)
 10042ac:	11000304 	addi	r4,r2,12
 10042b0:	e0bfff03 	ldbu	r2,-4(fp)
 10042b4:	10c00c04 	addi	r3,r2,48
 10042b8:	2005883a 	mov	r2,r4
 10042bc:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 10042c0:	008040b4 	movhi	r2,258
 10042c4:	10a4c704 	addi	r2,r2,-27876
 10042c8:	10800017 	ldw	r2,0(r2)
 10042cc:	10800204 	addi	r2,r2,8
 10042d0:	10800037 	ldwio	r2,0(r2)
 10042d4:	1007883a 	mov	r3,r2
 10042d8:	00bfffc4 	movi	r2,-1
 10042dc:	1884703a 	and	r2,r3,r2
 10042e0:	e0bffe05 	stb	r2,-8(fp)
	return c;
 10042e4:	e0bffe03 	ldbu	r2,-8(fp)
}
 10042e8:	e037883a 	mov	sp,fp
 10042ec:	df000017 	ldw	fp,0(sp)
 10042f0:	dec00104 	addi	sp,sp,4
 10042f4:	f800283a 	ret

010042f8 <Hal4D13_SetEndpointConfig>:

void Hal4D13_SetEndpointConfig(UCHAR bEPConfig, UCHAR bEPIndex) {
 10042f8:	defffd04 	addi	sp,sp,-12
 10042fc:	df000215 	stw	fp,8(sp)
 1004300:	df000204 	addi	fp,sp,8
 1004304:	e13ffe05 	stb	r4,-8(fp)
 1004308:	e17fff05 	stb	r5,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, (USHORT)(D13CMD_EP_WR_CNFG+bEPIndex));
 100430c:	008040b4 	movhi	r2,258
 1004310:	10a4c704 	addi	r2,r2,-27876
 1004314:	10800017 	ldw	r2,0(r2)
 1004318:	11000304 	addi	r4,r2,12
 100431c:	e0bfff03 	ldbu	r2,-4(fp)
 1004320:	10800804 	addi	r2,r2,32
 1004324:	10ffffcc 	andi	r3,r2,65535
 1004328:	2005883a 	mov	r2,r4
 100432c:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)bEPConfig);
 1004330:	008040b4 	movhi	r2,258
 1004334:	10a4c704 	addi	r2,r2,-27876
 1004338:	10800017 	ldw	r2,0(r2)
 100433c:	10800204 	addi	r2,r2,8
 1004340:	e0fffe03 	ldbu	r3,-8(fp)
 1004344:	10c00035 	stwio	r3,0(r2)
}
 1004348:	e037883a 	mov	sp,fp
 100434c:	df000017 	ldw	fp,0(sp)
 1004350:	dec00104 	addi	sp,sp,4
 1004354:	f800283a 	ret

01004358 <Hal4D13_UnconfigDevice>:
/*
 // ************************************************************************
 // Subroutines -- 3
 // ************************************************************************
 */
void Hal4D13_UnconfigDevice(void) {
 1004358:	deffff04 	addi	sp,sp,-4
 100435c:	df000015 	stw	fp,0(sp)
 1004360:	d839883a 	mov	fp,sp
}
 1004364:	e037883a 	mov	sp,fp
 1004368:	df000017 	ldw	fp,0(sp)
 100436c:	dec00104 	addi	sp,sp,4
 1004370:	f800283a 	ret

01004374 <Hal4D13_ConfigDevice>:

void Hal4D13_ConfigDevice(void) {
 1004374:	deffff04 	addi	sp,sp,-4
 1004378:	df000015 	stw	fp,0(sp)
 100437c:	d839883a 	mov	fp,sp
}
 1004380:	e037883a 	mov	sp,fp
 1004384:	df000017 	ldw	fp,0(sp)
 1004388:	dec00104 	addi	sp,sp,4
 100438c:	f800283a 	ret

01004390 <Hal4D13_SingleTransmitEP0>:

void Hal4D13_SingleTransmitEP0(UCHAR * buf, USHORT len) {
 1004390:	defffc04 	addi	sp,sp,-16
 1004394:	dfc00315 	stw	ra,12(sp)
 1004398:	df000215 	stw	fp,8(sp)
 100439c:	df000204 	addi	fp,sp,8
 10043a0:	e13ffe15 	stw	r4,-8(fp)
 10043a4:	e17fff0d 	sth	r5,-4(fp)
	if (len <= EP0_PACKET_SIZE) {
 10043a8:	e0bfff0b 	ldhu	r2,-4(fp)
 10043ac:	10801068 	cmpgeui	r2,r2,65
 10043b0:	1000041e 	bne	r2,zero,10043c4 <Hal4D13_SingleTransmitEP0+0x34>
		Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, buf, len);
 10043b4:	e1bfff0b 	ldhu	r6,-4(fp)
 10043b8:	01000044 	movi	r4,1
 10043bc:	e17ffe17 	ldw	r5,-8(fp)
 10043c0:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>
	}
}
 10043c4:	e037883a 	mov	sp,fp
 10043c8:	dfc00117 	ldw	ra,4(sp)
 10043cc:	df000017 	ldw	fp,0(sp)
 10043d0:	dec00204 	addi	sp,sp,8
 10043d4:	f800283a 	ret

010043d8 <Hal4D13_RegAccess>:

void Hal4D13_RegAccess(void) {
 10043d8:	defffc04 	addi	sp,sp,-16
 10043dc:	dfc00315 	stw	ra,12(sp)
 10043e0:	df000215 	stw	fp,8(sp)
 10043e4:	df000204 	addi	fp,sp,8
	USHORT c;
	USHORT i;
	ULONG l;

	Hal4D13_ResetDevice();
 10043e8:	100325c0 	call	100325c <Hal4D13_ResetDevice>
	printf("Reseting\n");
 10043ec:	01004074 	movhi	r4,257
 10043f0:	21137104 	addi	r4,r4,19908
 10043f4:	10062fc0 	call	10062fc <puts>

	i = Hal4D13_ReadChipID();
 10043f8:	10041d40 	call	10041d4 <Hal4D13_ReadChipID>
 10043fc:	e0bfff0d 	sth	r2,-4(fp)
	printf(" ChipId = %hx\n", i);
 1004400:	e17fff0b 	ldhu	r5,-4(fp)
 1004404:	01004074 	movhi	r4,257
 1004408:	21137404 	addi	r4,r4,19920
 100440c:	10061c00 	call	10061c0 <printf>

	i = Hal4D13_GetDataFromChipRam();
 1004410:	10040680 	call	1004068 <Hal4D13_GetDataFromChipRam>
 1004414:	e0bfff0d 	sth	r2,-4(fp)
	printf(" Chip RAM = %hx\n", i);
 1004418:	e17fff0b 	ldhu	r5,-4(fp)
 100441c:	01004074 	movhi	r4,257
 1004420:	21137804 	addi	r4,r4,19936
 1004424:	10061c00 	call	10061c0 <printf>

	printf("Writing 0x55AA,");
 1004428:	01004074 	movhi	r4,257
 100442c:	21137d04 	addi	r4,r4,19956
 1004430:	10061c00 	call	10061c0 <printf>
	Hal4D13_SetDataToChipRam(0x55AA);
 1004434:	01156a84 	movi	r4,21930
 1004438:	10040bc0 	call	10040bc <Hal4D13_SetDataToChipRam>
	i = Hal4D13_GetDataFromChipRam();
 100443c:	10040680 	call	1004068 <Hal4D13_GetDataFromChipRam>
 1004440:	e0bfff0d 	sth	r2,-4(fp)
	printf(" Chip RAM = %hx\n", i);
 1004444:	e17fff0b 	ldhu	r5,-4(fp)
 1004448:	01004074 	movhi	r4,257
 100444c:	21137804 	addi	r4,r4,19936
 1004450:	10061c00 	call	10061c0 <printf>

	l = Hal4D13_GetIntEnable();
 1004454:	1003c300 	call	1003c30 <Hal4D13_GetIntEnable>
 1004458:	e0bffe15 	stw	r2,-8(fp)
	printf("Hal4D13_GetIntEnable = %lx\n", l);
 100445c:	01004074 	movhi	r4,257
 1004460:	21138104 	addi	r4,r4,19972
 1004464:	e17ffe17 	ldw	r5,-8(fp)
 1004468:	10061c00 	call	10061c0 <printf>

	l = Hal4D13_ReadInterruptRegister();
 100446c:	1003d3c0 	call	1003d3c <Hal4D13_ReadInterruptRegister>
 1004470:	e0bffe15 	stw	r2,-8(fp)
	printf("Hal4D13_ReadInterruptRegister = %lx\n", l);
 1004474:	01004074 	movhi	r4,257
 1004478:	21138804 	addi	r4,r4,20000
 100447c:	e17ffe17 	ldw	r5,-8(fp)
 1004480:	10061c00 	call	10061c0 <printf>

	i = Hal4D13_GetDevConfig();
 1004484:	10032940 	call	1003294 <Hal4D13_GetDevConfig>
 1004488:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDevConfig = %hx\n", i);
 100448c:	e17fff0b 	ldhu	r5,-4(fp)
 1004490:	01004074 	movhi	r4,257
 1004494:	21139204 	addi	r4,r4,20040
 1004498:	10061c00 	call	10061c0 <printf>

	i = Hal4D13_GetDMAConfig();
 100449c:	1003f6c0 	call	1003f6c <Hal4D13_GetDMAConfig>
 10044a0:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDMAConfig = %hx\n", i);
 10044a4:	e17fff0b 	ldhu	r5,-4(fp)
 10044a8:	01004074 	movhi	r4,257
 10044ac:	21139904 	addi	r4,r4,20068
 10044b0:	10061c00 	call	10061c0 <printf>

	i = Hal4D13_GetDMACounter();
 10044b4:	10040140 	call	1004014 <Hal4D13_GetDMACounter>
 10044b8:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDMACounter = %hx\n", i);
 10044bc:	e17fff0b 	ldhu	r5,-4(fp)
 10044c0:	01004074 	movhi	r4,257
 10044c4:	2113a004 	addi	r4,r4,20096
 10044c8:	10061c00 	call	10061c0 <printf>

	i = Hal4D13_ReadCurrentFrameNumber();
 10044cc:	10041100 	call	1004110 <Hal4D13_ReadCurrentFrameNumber>
 10044d0:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_ReadCurrentFrameNumber = %hx\n", i);
 10044d4:	e17fff0b 	ldhu	r5,-4(fp)
 10044d8:	01004074 	movhi	r4,257
 10044dc:	2113a804 	addi	r4,r4,20128
 10044e0:	10061c00 	call	10061c0 <printf>

	c = Hal4D13_GetMode();
 10044e4:	10033900 	call	1003390 <Hal4D13_GetMode>
 10044e8:	10803fcc 	andi	r2,r2,255
 10044ec:	e0bfff8d 	sth	r2,-2(fp)
	printf("Hal4D13_GetMode = %x\n", c);
 10044f0:	e17fff8b 	ldhu	r5,-2(fp)
 10044f4:	01004074 	movhi	r4,257
 10044f8:	2113b204 	addi	r4,r4,20168
 10044fc:	10061c00 	call	10061c0 <printf>

	c = Hal4D13_GetEndpointStatusWOInteruptClear(EPINDEX4EP0_CONTROL_OUT);
 1004500:	0009883a 	mov	r4,zero
 1004504:	1003e300 	call	1003e30 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1004508:	10803fcc 	andi	r2,r2,255
 100450c:	e0bfff8d 	sth	r2,-2(fp)
	printf("Hal4D13_GetEndpointStatus EP0 = %x\n", c);
 1004510:	e17fff8b 	ldhu	r5,-2(fp)
 1004514:	01004074 	movhi	r4,257
 1004518:	2113b804 	addi	r4,r4,20192
 100451c:	10061c00 	call	10061c0 <printf>

	c = Hal4D13_GetAddress();
 1004520:	10033f00 	call	10033f0 <Hal4D13_GetAddress>
 1004524:	10803fcc 	andi	r2,r2,255
 1004528:	e0bfff8d 	sth	r2,-2(fp)
//  printf("Hal4D13_GetAddress = %x\n",c);
}
 100452c:	e037883a 	mov	sp,fp
 1004530:	dfc00117 	ldw	ra,4(sp)
 1004534:	df000017 	ldw	fp,0(sp)
 1004538:	dec00204 	addi	sp,sp,8
 100453c:	f800283a 	ret

01004540 <Hal4D13_StallEP0InControlWrite>:

void Hal4D13_StallEP0InControlWrite(void) {
 1004540:	defffe04 	addi	sp,sp,-8
 1004544:	dfc00115 	stw	ra,4(sp)
 1004548:	df000015 	stw	fp,0(sp)
 100454c:	d839883a 	mov	fp,sp
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
 1004550:	01000044 	movi	r4,1
 1004554:	01402004 	movi	r5,128
 1004558:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
 100455c:	0009883a 	mov	r4,zero
 1004560:	01402004 	movi	r5,128
 1004564:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
}
 1004568:	e037883a 	mov	sp,fp
 100456c:	dfc00117 	ldw	ra,4(sp)
 1004570:	df000017 	ldw	fp,0(sp)
 1004574:	dec00204 	addi	sp,sp,8
 1004578:	f800283a 	ret

0100457c <Hal4D13_StallEP0InControlRead>:

void Hal4D13_StallEP0InControlRead(void) {
 100457c:	defffe04 	addi	sp,sp,-8
 1004580:	dfc00115 	stw	ra,4(sp)
 1004584:	df000015 	stw	fp,0(sp)
 1004588:	d839883a 	mov	fp,sp
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
 100458c:	0009883a 	mov	r4,zero
 1004590:	01402004 	movi	r5,128
 1004594:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
 1004598:	01000044 	movi	r4,1
 100459c:	01402004 	movi	r5,128
 10045a0:	1003e980 	call	1003e98 <Hal4D13_SetEndpointStatus>
}
 10045a4:	e037883a 	mov	sp,fp
 10045a8:	dfc00117 	ldw	ra,4(sp)
 10045ac:	df000017 	ldw	fp,0(sp)
 10045b0:	dec00204 	addi	sp,sp,8
 10045b4:	f800283a 	ret

010045b8 <Hal4D13_IsSetupPktInvalid>:

BOOLEAN Hal4D13_IsSetupPktInvalid(void) {
 10045b8:	defffd04 	addi	sp,sp,-12
 10045bc:	dfc00215 	stw	ra,8(sp)
 10045c0:	df000115 	stw	fp,4(sp)
 10045c4:	df000104 	addi	fp,sp,4
	USHORT SetupPacketInvalid;
	SetupPacketInvalid = Hal4D13_GetEndpointStatusWOInteruptClear(
 10045c8:	0009883a 	mov	r4,zero
 10045cc:	1003e300 	call	1003e30 <Hal4D13_GetEndpointStatusWOInteruptClear>
 10045d0:	10803fcc 	andi	r2,r2,255
 10045d4:	1080020c 	andi	r2,r2,8
 10045d8:	e0bfff0d 	sth	r2,-4(fp)
			EPINDEX4EP0_CONTROL_OUT) & D13REG_EPSTS_OVWR;
	return SetupPacketInvalid;
 10045dc:	e0bfff0b 	ldhu	r2,-4(fp)
 10045e0:	10803fcc 	andi	r2,r2,255
}
 10045e4:	e037883a 	mov	sp,fp
 10045e8:	dfc00117 	ldw	ra,4(sp)
 10045ec:	df000017 	ldw	fp,0(sp)
 10045f0:	dec00204 	addi	sp,sp,8
 10045f4:	f800283a 	ret

010045f8 <Write_HC_Config_Reg>:

void Write_HC_Config_Reg(unsigned short Config) {
 10045f8:	defffe04 	addi	sp,sp,-8
 10045fc:	df000115 	stw	fp,4(sp)
 1004600:	df000104 	addi	fp,sp,4
 1004604:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, HC_COMMAND_PORT, HCCMD_WR_CNFG_REG);
 1004608:	008040b4 	movhi	r2,258
 100460c:	10a4c704 	addi	r2,r2,-27876
 1004610:	10800017 	ldw	r2,0(r2)
 1004614:	10800104 	addi	r2,r2,4
 1004618:	1007883a 	mov	r3,r2
 100461c:	00802804 	movi	r2,160
 1004620:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, HC_DATA_PORT, Config);
 1004624:	008040b4 	movhi	r2,258
 1004628:	10a4c704 	addi	r2,r2,-27876
 100462c:	10800017 	ldw	r2,0(r2)
 1004630:	e0ffff0b 	ldhu	r3,-4(fp)
 1004634:	10c00035 	stwio	r3,0(r2)
}
 1004638:	e037883a 	mov	sp,fp
 100463c:	df000017 	ldw	fp,0(sp)
 1004640:	dec00104 	addi	sp,sp,4
 1004644:	f800283a 	ret

01004648 <Read_HC_Config_Reg>:

unsigned short Read_HC_Config_Reg(void) {
 1004648:	deffff04 	addi	sp,sp,-4
 100464c:	df000015 	stw	fp,0(sp)
 1004650:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, HC_COMMAND_PORT, HCCMD_RD_CNFG_REG);
 1004654:	008040b4 	movhi	r2,258
 1004658:	10a4c704 	addi	r2,r2,-27876
 100465c:	10800017 	ldw	r2,0(r2)
 1004660:	10800104 	addi	r2,r2,4
 1004664:	1007883a 	mov	r3,r2
 1004668:	00800804 	movi	r2,32
 100466c:	18800035 	stwio	r2,0(r3)
	return IORD(ISP1362_BASE,HC_DATA_PORT);
 1004670:	008040b4 	movhi	r2,258
 1004674:	10a4c704 	addi	r2,r2,-27876
 1004678:	10800017 	ldw	r2,0(r2)
 100467c:	10800037 	ldwio	r2,0(r2)
 1004680:	10bfffcc 	andi	r2,r2,65535
}
 1004684:	e037883a 	mov	sp,fp
 1004688:	df000017 	ldw	fp,0(sp)
 100468c:	dec00104 	addi	sp,sp,4
 1004690:	f800283a 	ret

01004694 <usb_disable_all_interrupts>:

alt_irq_context status;
unsigned char INT_Enabled=1;

void usb_disable_all_interrupts(void)
{
 1004694:	defffe04 	addi	sp,sp,-8
 1004698:	df000115 	stw	fp,4(sp)
 100469c:	df000104 	addi	fp,sp,4
  if(INT_Enabled)
 10046a0:	d0a00803 	ldbu	r2,-32736(gp)
 10046a4:	10803fcc 	andi	r2,r2,255
 10046a8:	1005003a 	cmpeq	r2,r2,zero
 10046ac:	1000091e 	bne	r2,zero,10046d4 <usb_disable_all_interrupts+0x40>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10046b0:	0005303a 	rdctl	r2,status
 10046b4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10046b8:	e0ffff17 	ldw	r3,-4(fp)
 10046bc:	00bfff84 	movi	r2,-2
 10046c0:	1884703a 	and	r2,r3,r2
 10046c4:	1001703a 	wrctl	status,r2
  
  return context;
 10046c8:	e0bfff17 	ldw	r2,-4(fp)
  {
    status=alt_irq_disable_all();
 10046cc:	d0a7f715 	stw	r2,-24612(gp)
    INT_Enabled=0;
 10046d0:	d0200805 	stb	zero,-32736(gp)
  }
}
 10046d4:	e037883a 	mov	sp,fp
 10046d8:	df000017 	ldw	fp,0(sp)
 10046dc:	dec00104 	addi	sp,sp,4
 10046e0:	f800283a 	ret

010046e4 <usb_reenable_all_interrupts>:

void usb_reenable_all_interrupts(void)
{
 10046e4:	defffe04 	addi	sp,sp,-8
 10046e8:	df000115 	stw	fp,4(sp)
 10046ec:	df000104 	addi	fp,sp,4
  if(!INT_Enabled)
 10046f0:	d0a00803 	ldbu	r2,-32736(gp)
 10046f4:	10803fcc 	andi	r2,r2,255
 10046f8:	1004c03a 	cmpne	r2,r2,zero
 10046fc:	1000061e 	bne	r2,zero,1004718 <usb_reenable_all_interrupts+0x34>
  {
    alt_irq_enable_all(status);
 1004700:	d0a7f717 	ldw	r2,-24612(gp)
 1004704:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004708:	e0bfff17 	ldw	r2,-4(fp)
 100470c:	1001703a 	wrctl	status,r2
    INT_Enabled=1;
 1004710:	00800044 	movi	r2,1
 1004714:	d0a00805 	stb	r2,-32736(gp)
  }
}
 1004718:	e037883a 	mov	sp,fp
 100471c:	df000017 	ldw	fp,0(sp)
 1004720:	dec00104 	addi	sp,sp,4
 1004724:	f800283a 	ret

01004728 <fn_usb_isr>:



void fn_usb_isr(void) {
 1004728:	defffe04 	addi	sp,sp,-8
 100472c:	dfc00115 	stw	ra,4(sp)
 1004730:	df000015 	stw	fp,0(sp)
 1004734:	d839883a 	mov	fp,sp
	usb_disable_all_interrupts();
 1004738:	10046940 	call	1004694 <usb_disable_all_interrupts>
	Hal4D13_LockDevice(0);
 100473c:	0009883a 	mov	r4,zero
 1004740:	10041640 	call	1004164 <Hal4D13_LockDevice>
	usb_reenable_all_interrupts();
 1004744:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
}
 1004748:	e037883a 	mov	sp,fp
 100474c:	dfc00117 	ldw	ra,4(sp)
 1004750:	df000017 	ldw	fp,0(sp)
 1004754:	dec00204 	addi	sp,sp,8
 1004758:	f800283a 	ret

0100475c <usb_isr>:

void usb_isr(void) {
 100475c:	defffd04 	addi	sp,sp,-12
 1004760:	dfc00215 	stw	ra,8(sp)
 1004764:	df000115 	stw	fp,4(sp)
 1004768:	df000104 	addi	fp,sp,4
//	printf("USB ISR\n");
	ULONG i_st;
	usb_disable_all_interrupts();
 100476c:	10046940 	call	1004694 <usb_disable_all_interrupts>
	Hal4D13_LockDevice(0);
 1004770:	0009883a 	mov	r4,zero
 1004774:	10041640 	call	1004164 <Hal4D13_LockDevice>
	bD13flags.bits.At_IRQL1 = 1;
 1004778:	00c040b4 	movhi	r3,258
 100477c:	18e4c804 	addi	r3,r3,-27872
 1004780:	18800017 	ldw	r2,0(r3)
 1004784:	10800114 	ori	r2,r2,4
 1004788:	18800015 	stw	r2,0(r3)
	i_st = Hal4D13_ReadInterruptRegister();
 100478c:	1003d3c0 	call	1003d3c <Hal4D13_ReadInterruptRegister>
 1004790:	e0bfff15 	stw	r2,-4(fp)
	if (i_st != 0) {
 1004794:	e0bfff17 	ldw	r2,-4(fp)
 1004798:	1005003a 	cmpeq	r2,r2,zero
 100479c:	1000511e 	bne	r2,zero,10048e4 <usb_isr+0x188>
		if (i_st & D13REG_INTSRC_BUSRESET)
 10047a0:	e0bfff17 	ldw	r2,-4(fp)
 10047a4:	1080004c 	andi	r2,r2,1
 10047a8:	10803fcc 	andi	r2,r2,255
 10047ac:	1005003a 	cmpeq	r2,r2,zero
 10047b0:	1000021e 	bne	r2,zero,10047bc <usb_isr+0x60>
			Isr_BusReset();
 10047b4:	10049140 	call	1004914 <Isr_BusReset>
 10047b8:	00004a06 	br	10048e4 <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_SUSPEND)
 10047bc:	e0bfff17 	ldw	r2,-4(fp)
 10047c0:	1080010c 	andi	r2,r2,4
 10047c4:	1005003a 	cmpeq	r2,r2,zero
 10047c8:	1000021e 	bne	r2,zero,10047d4 <usb_isr+0x78>
			Isr_SuspendChange();
 10047cc:	10049b80 	call	10049b8 <Isr_SuspendChange>
 10047d0:	00004406 	br	10048e4 <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_EOT)
 10047d4:	e0bfff17 	ldw	r2,-4(fp)
 10047d8:	1080020c 	andi	r2,r2,8
 10047dc:	1005003a 	cmpeq	r2,r2,zero
 10047e0:	1000021e 	bne	r2,zero,10047ec <usb_isr+0x90>
			Isr_DmaEot();
 10047e4:	1004a180 	call	1004a18 <Isr_DmaEot>
 10047e8:	00003e06 	br	10048e4 <usb_isr+0x188>
		else if (i_st & (D13REG_INTSRC_SOF | D13REG_INTSRC_PSEUDO_SOF))
 10047ec:	e0bfff17 	ldw	r2,-4(fp)
 10047f0:	10800c0c 	andi	r2,r2,48
 10047f4:	1005003a 	cmpeq	r2,r2,zero
 10047f8:	1000021e 	bne	r2,zero,1004804 <usb_isr+0xa8>
			Isr_SOF();
 10047fc:	1004ae40 	call	1004ae4 <Isr_SOF>
 1004800:	00003806 	br	10048e4 <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_SHORT_PACKET)
 1004804:	e0bfff17 	ldw	r2,-4(fp)
 1004808:	1080100c 	andi	r2,r2,64
 100480c:	1005003a 	cmpeq	r2,r2,zero
 1004810:	1000021e 	bne	r2,zero,100481c <usb_isr+0xc0>
			Isr_SHORT_PACKET();
 1004814:	10049e80 	call	10049e8 <Isr_SHORT_PACKET>
 1004818:	00003206 	br	10048e4 <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_RESUME) {
 100481c:	e0bfff17 	ldw	r2,-4(fp)
 1004820:	1080008c 	andi	r2,r2,2
 1004824:	1005003a 	cmpeq	r2,r2,zero
 1004828:	1000061e 	bne	r2,zero,1004844 <usb_isr+0xe8>
			printf("RESUME\n");
 100482c:	01004074 	movhi	r4,257
 1004830:	2113c104 	addi	r4,r4,20228
 1004834:	10062fc0 	call	10062fc <puts>
			Hal4D13_LockDevice(0);
 1004838:	0009883a 	mov	r4,zero
 100483c:	10041640 	call	1004164 <Hal4D13_LockDevice>
 1004840:	00002806 	br	10048e4 <usb_isr+0x188>
		} else {
			if (i_st & D13REG_INTSRC_EP0OUT)
 1004844:	e0bfff17 	ldw	r2,-4(fp)
 1004848:	1080400c 	andi	r2,r2,256
 100484c:	1005003a 	cmpeq	r2,r2,zero
 1004850:	1000011e 	bne	r2,zero,1004858 <usb_isr+0xfc>
				Isr_Ep00RxDone();
 1004854:	1004b000 	call	1004b00 <Isr_Ep00RxDone>
			if (i_st & D13REG_INTSRC_EP0IN)
 1004858:	e0bfff17 	ldw	r2,-4(fp)
 100485c:	1080800c 	andi	r2,r2,512
 1004860:	1005003a 	cmpeq	r2,r2,zero
 1004864:	1000011e 	bne	r2,zero,100486c <usb_isr+0x110>
				Isr_Ep00TxDone();
 1004868:	1004d040 	call	1004d04 <Isr_Ep00TxDone>
			if (i_st & D13REG_INTSRC_EP01) {
 100486c:	e0bfff17 	ldw	r2,-4(fp)
 1004870:	1081000c 	andi	r2,r2,1024
 1004874:	1005003a 	cmpeq	r2,r2,zero
 1004878:	1000011e 	bne	r2,zero,1004880 <usb_isr+0x124>
//				printf("ISR EP1\n");
				Isr_Ep01Done();
 100487c:	1004fd80 	call	1004fd8 <Isr_Ep01Done>
			}
			if (i_st & D13REG_INTSRC_EP02) {
 1004880:	e0bfff17 	ldw	r2,-4(fp)
 1004884:	1082000c 	andi	r2,r2,2048
 1004888:	1005003a 	cmpeq	r2,r2,zero
 100488c:	1000011e 	bne	r2,zero,1004894 <usb_isr+0x138>
//				printf("ISR IP2\n");
				Isr_Ep02Done();
 1004890:	10050380 	call	1005038 <Isr_Ep02Done>
			}
			if (i_st & D13REG_INTSRC_EP03)
 1004894:	e0bfff17 	ldw	r2,-4(fp)
 1004898:	1084000c 	andi	r2,r2,4096
 100489c:	1005003a 	cmpeq	r2,r2,zero
 10048a0:	1000011e 	bne	r2,zero,10048a8 <usb_isr+0x14c>
				Isr_Ep03Done();
 10048a4:	10050a00 	call	10050a0 <Isr_Ep03Done>
			if (i_st & D13REG_INTSRC_EP04)
 10048a8:	e0bfff17 	ldw	r2,-4(fp)
 10048ac:	1088000c 	andi	r2,r2,8192
 10048b0:	1005003a 	cmpeq	r2,r2,zero
 10048b4:	1000011e 	bne	r2,zero,10048bc <usb_isr+0x160>
				Isr_Ep04Done();
 10048b8:	10050d00 	call	10050d0 <Isr_Ep04Done>
			if (i_st & D13REG_INTSRC_EP05)
 10048bc:	e0bfff17 	ldw	r2,-4(fp)
 10048c0:	1090000c 	andi	r2,r2,16384
 10048c4:	1005003a 	cmpeq	r2,r2,zero
 10048c8:	1000011e 	bne	r2,zero,10048d0 <usb_isr+0x174>
				Isr_Ep05Done();
 10048cc:	10051000 	call	1005100 <Isr_Ep05Done>
			if (i_st & D13REG_INTSRC_EP06)
 10048d0:	e0bfff17 	ldw	r2,-4(fp)
 10048d4:	10a0000c 	andi	r2,r2,32768
 10048d8:	1005003a 	cmpeq	r2,r2,zero
 10048dc:	1000011e 	bne	r2,zero,10048e4 <usb_isr+0x188>
				Isr_Ep06Done();
 10048e0:	100515c0 	call	100515c <Isr_Ep06Done>
		}
	}
	usb_reenable_all_interrupts();
 10048e4:	10046e40 	call	10046e4 <usb_reenable_all_interrupts>
	bD13flags.bits.At_IRQL1 = 0;
 10048e8:	010040b4 	movhi	r4,258
 10048ec:	2124c804 	addi	r4,r4,-27872
 10048f0:	20c00017 	ldw	r3,0(r4)
 10048f4:	00bffec4 	movi	r2,-5
 10048f8:	1884703a 	and	r2,r3,r2
 10048fc:	20800015 	stw	r2,0(r4)
}
 1004900:	e037883a 	mov	sp,fp
 1004904:	dfc00117 	ldw	ra,4(sp)
 1004908:	df000017 	ldw	fp,0(sp)
 100490c:	dec00204 	addi	sp,sp,8
 1004910:	f800283a 	ret

01004914 <Isr_BusReset>:

void Isr_BusReset(void) {
 1004914:	defffe04 	addi	sp,sp,-8
 1004918:	dfc00115 	stw	ra,4(sp)
 100491c:	df000015 	stw	fp,0(sp)
 1004920:	d839883a 	mov	fp,sp
//	printf("USB Bus Reset\n");
	reconnect_USB();
 1004924:	1002ae80 	call	1002ae8 <reconnect_USB>
	bD13flags.bits.DCP_state = 0x00;
 1004928:	010040b4 	movhi	r4,258
 100492c:	2124c804 	addi	r4,r4,-27872
 1004930:	20c00017 	ldw	r3,0(r4)
 1004934:	00bc3fc4 	movi	r2,-3841
 1004938:	1884703a 	and	r2,r3,r2
 100493c:	20800015 	stw	r2,0(r4)
	bD13flags.bits.dma_disable = 0x00;
 1004940:	010040b4 	movhi	r4,258
 1004944:	2124c804 	addi	r4,r4,-27872
 1004948:	20c00017 	ldw	r3,0(r4)
 100494c:	00bfff34 	movhi	r2,65532
 1004950:	10bfffc4 	addi	r2,r2,-1
 1004954:	1884703a 	and	r2,r3,r2
 1004958:	20800015 	stw	r2,0(r4)

	bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 100495c:	00c040b4 	movhi	r3,258
 1004960:	18e4d104 	addi	r3,r3,-27836
 1004964:	18800003 	ldbu	r2,0(r3)
 1004968:	10800054 	ori	r2,r2,1
 100496c:	18800005 	stb	r2,0(r3)
	bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1004970:	010040b4 	movhi	r4,258
 1004974:	2124d104 	addi	r4,r4,-27836
 1004978:	20c00003 	ldbu	r3,0(r4)
 100497c:	00bfff44 	movi	r2,-3
 1004980:	1884703a 	and	r2,r3,r2
 1004984:	20800005 	stb	r2,0(r4)
	bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1004988:	010040b4 	movhi	r4,258
 100498c:	2124d104 	addi	r4,r4,-27836
 1004990:	20c00003 	ldbu	r3,0(r4)
 1004994:	00bffec4 	movi	r2,-5
 1004998:	1884703a 	and	r2,r3,r2
 100499c:	20800005 	stb	r2,0(r4)
	config_endpoint();
 10049a0:	10029f40 	call	10029f4 <config_endpoint>
}
 10049a4:	e037883a 	mov	sp,fp
 10049a8:	dfc00117 	ldw	ra,4(sp)
 10049ac:	df000017 	ldw	fp,0(sp)
 10049b0:	dec00204 	addi	sp,sp,8
 10049b4:	f800283a 	ret

010049b8 <Isr_SuspendChange>:

void Isr_SuspendChange(void) {
 10049b8:	deffff04 	addi	sp,sp,-4
 10049bc:	df000015 	stw	fp,0(sp)
 10049c0:	d839883a 	mov	fp,sp
	bD13flags.bits.suspend = 1;
 10049c4:	008040b4 	movhi	r2,258
 10049c8:	10a4c804 	addi	r2,r2,-27872
 10049cc:	10c00017 	ldw	r3,0(r2)
 10049d0:	18c00094 	ori	r3,r3,2
 10049d4:	10c00015 	stw	r3,0(r2)
}
 10049d8:	e037883a 	mov	sp,fp
 10049dc:	df000017 	ldw	fp,0(sp)
 10049e0:	dec00104 	addi	sp,sp,4
 10049e4:	f800283a 	ret

010049e8 <Isr_SHORT_PACKET>:

void Isr_SHORT_PACKET(void) {
 10049e8:	defffe04 	addi	sp,sp,-8
 10049ec:	dfc00115 	stw	ra,4(sp)
 10049f0:	df000015 	stw	fp,0(sp)
 10049f4:	d839883a 	mov	fp,sp
	printf("SHORT PACKET INTERRUPT\n");
 10049f8:	01004074 	movhi	r4,257
 10049fc:	2113c304 	addi	r4,r4,20236
 1004a00:	10062fc0 	call	10062fc <puts>
}
 1004a04:	e037883a 	mov	sp,fp
 1004a08:	dfc00117 	ldw	ra,4(sp)
 1004a0c:	df000017 	ldw	fp,0(sp)
 1004a10:	dec00204 	addi	sp,sp,8
 1004a14:	f800283a 	ret

01004a18 <Isr_DmaEot>:

void Isr_DmaEot(void) {
 1004a18:	defffe04 	addi	sp,sp,-8
 1004a1c:	dfc00115 	stw	ra,4(sp)
 1004a20:	df000015 	stw	fp,0(sp)
 1004a24:	d839883a 	mov	fp,sp
	bD13flags.bits.dma_disable = 0;
 1004a28:	010040b4 	movhi	r4,258
 1004a2c:	2124c804 	addi	r4,r4,-27872
 1004a30:	20c00017 	ldw	r3,0(r4)
 1004a34:	00bfff34 	movhi	r2,65532
 1004a38:	10bfffc4 	addi	r2,r2,-1
 1004a3c:	1884703a 	and	r2,r3,r2
 1004a40:	20800015 	stw	r2,0(r4)

	if (bD13flags.bits.dma_state == DMA_PENDING)
 1004a44:	008040b4 	movhi	r2,258
 1004a48:	10a4c804 	addi	r2,r2,-27872
 1004a4c:	10800017 	ldw	r2,0(r2)
 1004a50:	10c0062c 	andhi	r3,r2,24
 1004a54:	00800434 	movhi	r2,16
 1004a58:	1880061e 	bne	r3,r2,1004a74 <Isr_DmaEot+0x5c>
		bD13flags.bits.setup_dma = 1;
 1004a5c:	008040b4 	movhi	r2,258
 1004a60:	10a4c804 	addi	r2,r2,-27872
 1004a64:	10c00017 	ldw	r3,0(r2)
 1004a68:	18c00074 	orhi	r3,r3,1
 1004a6c:	10c00015 	stw	r3,0(r2)
 1004a70:	00000706 	br	1004a90 <Isr_DmaEot+0x78>
	else
		bD13flags.bits.dma_state = DMA_IDLE;
 1004a74:	010040b4 	movhi	r4,258
 1004a78:	2124c804 	addi	r4,r4,-27872
 1004a7c:	20c00017 	ldw	r3,0(r4)
 1004a80:	00bffa34 	movhi	r2,65512
 1004a84:	10bfffc4 	addi	r2,r2,-1
 1004a88:	1884703a 	and	r2,r3,r2
 1004a8c:	20800015 	stw	r2,0(r4)
	printf("EOT reached!!!\n");
 1004a90:	01004074 	movhi	r4,257
 1004a94:	2113c904 	addi	r4,r4,20260
 1004a98:	10062fc0 	call	10062fc <puts>
	if (bD13flags.bits.verbose == 1)
 1004a9c:	008040b4 	movhi	r2,258
 1004aa0:	10a4c804 	addi	r2,r2,-27872
 1004aa4:	10800017 	ldw	r2,0(r2)
 1004aa8:	1080402c 	andhi	r2,r2,256
 1004aac:	1005003a 	cmpeq	r2,r2,zero
 1004ab0:	1000051e 	bne	r2,zero,1004ac8 <Isr_DmaEot+0xb0>
		printf("dma_counter = %x\n", Hal4D13_GetDMACounter());
 1004ab4:	10040140 	call	1004014 <Hal4D13_GetDMACounter>
 1004ab8:	117fffcc 	andi	r5,r2,65535
 1004abc:	01004074 	movhi	r4,257
 1004ac0:	2113cd04 	addi	r4,r4,20276
 1004ac4:	10061c00 	call	10061c0 <printf>
	printf("\n");
 1004ac8:	01000284 	movi	r4,10
 1004acc:	10062380 	call	1006238 <putchar>
}
 1004ad0:	e037883a 	mov	sp,fp
 1004ad4:	dfc00117 	ldw	ra,4(sp)
 1004ad8:	df000017 	ldw	fp,0(sp)
 1004adc:	dec00204 	addi	sp,sp,8
 1004ae0:	f800283a 	ret

01004ae4 <Isr_SOF>:

void Isr_SOF(void) {
 1004ae4:	deffff04 	addi	sp,sp,-4
 1004ae8:	df000015 	stw	fp,0(sp)
 1004aec:	d839883a 	mov	fp,sp

}
 1004af0:	e037883a 	mov	sp,fp
 1004af4:	df000017 	ldw	fp,0(sp)
 1004af8:	dec00104 	addi	sp,sp,4
 1004afc:	f800283a 	ret

01004b00 <Isr_Ep00RxDone>:

void Isr_Ep00RxDone(void) {
 1004b00:	defffc04 	addi	sp,sp,-16
 1004b04:	dfc00315 	stw	ra,12(sp)
 1004b08:	df000215 	stw	fp,8(sp)
 1004b0c:	df000204 	addi	fp,sp,8
	UCHAR ep_last, i;
//	printf("RX %d\n", bUSBCheck_Device_State.State_bits.FOUR_RESERVED_BITS++);
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_OUT); /* Clear interrupt flag */
 1004b10:	0009883a 	mov	r4,zero
 1004b14:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004b18:	e0bffe45 	stb	r2,-7(fp)

	if (ep_last & D13REG_EPSTS_SETUP) {
 1004b1c:	e0bffe43 	ldbu	r2,-7(fp)
 1004b20:	1080010c 	andi	r2,r2,4
 1004b24:	1005003a 	cmpeq	r2,r2,zero
 1004b28:	10001a1e 	bne	r2,zero,1004b94 <Isr_Ep00RxDone+0x94>
		if (bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC) {
 1004b2c:	008040b4 	movhi	r2,258
 1004b30:	10a4c804 	addi	r2,r2,-27872
 1004b34:	10800017 	ldw	r2,0(r2)
 1004b38:	1083c00c 	andi	r2,r2,3840
 1004b3c:	1080c018 	cmpnei	r2,r2,768
 1004b40:	10000c1e 	bne	r2,zero,1004b74 <Isr_Ep00RxDone+0x74>
			ControlData.Abort = 1;
 1004b44:	00c040b4 	movhi	r3,258
 1004b48:	18e4ef04 	addi	r3,r3,-27716
 1004b4c:	00800044 	movi	r2,1
 1004b50:	18800005 	stb	r2,0(r3)
			bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
 1004b54:	010040b4 	movhi	r4,258
 1004b58:	2124c804 	addi	r4,r4,-27872
 1004b5c:	20c00017 	ldw	r3,0(r4)
 1004b60:	00bc3fc4 	movi	r2,-3841
 1004b64:	1884703a 	and	r2,r3,r2
 1004b68:	10814014 	ori	r2,r2,1280
 1004b6c:	20800015 	stw	r2,0(r4)
 1004b70:	00005f06 	br	1004cf0 <Isr_Ep00RxDone+0x1f0>
		} else
			bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
 1004b74:	010040b4 	movhi	r4,258
 1004b78:	2124c804 	addi	r4,r4,-27872
 1004b7c:	20c00017 	ldw	r3,0(r4)
 1004b80:	00bc3fc4 	movi	r2,-3841
 1004b84:	1884703a 	and	r2,r3,r2
 1004b88:	10814014 	ori	r2,r2,1280
 1004b8c:	20800015 	stw	r2,0(r4)
 1004b90:	00005706 	br	1004cf0 <Isr_Ep00RxDone+0x1f0>
	} else /* not a setup packet, just a Data Out Packet */
	{
		switch (bD13flags.bits.DCP_state) {
 1004b94:	008040b4 	movhi	r2,258
 1004b98:	10a4c804 	addi	r2,r2,-27872
 1004b9c:	10800017 	ldw	r2,0(r2)
 1004ba0:	1004d23a 	srli	r2,r2,8
 1004ba4:	108003cc 	andi	r2,r2,15
 1004ba8:	10803fcc 	andi	r2,r2,255
 1004bac:	e0bfff15 	stw	r2,-4(fp)
 1004bb0:	e0ffff17 	ldw	r3,-4(fp)
 1004bb4:	18800228 	cmpgeui	r2,r3,8
 1004bb8:	1000411e 	bne	r2,zero,1004cc0 <Isr_Ep00RxDone+0x1c0>
 1004bbc:	e13fff17 	ldw	r4,-4(fp)
 1004bc0:	e13fff17 	ldw	r4,-4(fp)
 1004bc4:	2105883a 	add	r2,r4,r4
 1004bc8:	1087883a 	add	r3,r2,r2
 1004bcc:	00804034 	movhi	r2,256
 1004bd0:	1092f804 	addi	r2,r2,19424
 1004bd4:	1885883a 	add	r2,r3,r2
 1004bd8:	10800017 	ldw	r2,0(r2)
 1004bdc:	1000683a 	jmp	r2
 1004be0:	01004cc0 	call	1004cc <__alt_mem_onchip+0x1004cc>
 1004be4:	01004cf0 	cmpltui	r4,zero,307
 1004be8:	01004c00 	call	1004c0 <__alt_mem_onchip+0x1004c0>
 1004bec:	01004cf0 	cmpltui	r4,zero,307
 1004bf0:	01004ca4 	muli	r4,zero,306
 1004bf4:	01004cf0 	cmpltui	r4,zero,307
 1004bf8:	01004cc0 	call	1004cc <__alt_mem_onchip+0x1004cc>
 1004bfc:	01004cf0 	cmpltui	r4,zero,307
		case USBFSM4DCP_DATAOUT:

			i = Hal4D13_ReadEndpoint(EPINDEX4EP0_CONTROL_OUT,
 1004c00:	008040b4 	movhi	r2,258
 1004c04:	10a4ef04 	addi	r2,r2,-27716
 1004c08:	1080030b 	ldhu	r2,12(r2)
 1004c0c:	10bfffcc 	andi	r2,r2,65535
 1004c10:	1007883a 	mov	r3,r2
 1004c14:	008040b4 	movhi	r2,258
 1004c18:	10a4f404 	addi	r2,r2,-27696
 1004c1c:	188b883a 	add	r5,r3,r2
 1004c20:	0009883a 	mov	r4,zero
 1004c24:	01801004 	movi	r6,64
 1004c28:	100364c0 	call	100364c <Hal4D13_ReadEndpoint>
 1004c2c:	e0bffe05 	stb	r2,-8(fp)
					ControlData.dataBuffer + ControlData.wCount,
					EP0_PACKET_SIZE);

			ControlData.wCount += i;
 1004c30:	008040b4 	movhi	r2,258
 1004c34:	10a4ef04 	addi	r2,r2,-27716
 1004c38:	10c0030b 	ldhu	r3,12(r2)
 1004c3c:	e0bffe03 	ldbu	r2,-8(fp)
 1004c40:	1885883a 	add	r2,r3,r2
 1004c44:	1007883a 	mov	r3,r2
 1004c48:	008040b4 	movhi	r2,258
 1004c4c:	10a4ef04 	addi	r2,r2,-27716
 1004c50:	10c0030d 	sth	r3,12(r2)
			if (i != EP0_PACKET_SIZE
 1004c54:	e0bffe03 	ldbu	r2,-8(fp)
 1004c58:	10801018 	cmpnei	r2,r2,64
 1004c5c:	1000091e 	bne	r2,zero,1004c84 <Isr_Ep00RxDone+0x184>
 1004c60:	008040b4 	movhi	r2,258
 1004c64:	10a4ef04 	addi	r2,r2,-27716
 1004c68:	10c0030b 	ldhu	r3,12(r2)
 1004c6c:	008040b4 	movhi	r2,258
 1004c70:	10a4ef04 	addi	r2,r2,-27716
 1004c74:	1080028b 	ldhu	r2,10(r2)
 1004c78:	18ffffcc 	andi	r3,r3,65535
 1004c7c:	10bfffcc 	andi	r2,r2,65535
 1004c80:	18801b36 	bltu	r3,r2,1004cf0 <Isr_Ep00RxDone+0x1f0>
					|| ControlData.wCount >= ControlData.wLength) {
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 1004c84:	010040b4 	movhi	r4,258
 1004c88:	2124c804 	addi	r4,r4,-27872
 1004c8c:	20c00017 	ldw	r3,0(r4)
 1004c90:	00bc3fc4 	movi	r2,-3841
 1004c94:	1884703a 	and	r2,r3,r2
 1004c98:	1080c014 	ori	r2,r2,768
 1004c9c:	20800015 	stw	r2,0(r4)

			}
			break;
 1004ca0:	00001306 	br	1004cf0 <Isr_Ep00RxDone+0x1f0>
		case USBFSM4DCP_HANDSHAKE:

			bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
 1004ca4:	010040b4 	movhi	r4,258
 1004ca8:	2124c804 	addi	r4,r4,-27872
 1004cac:	20c00017 	ldw	r3,0(r4)
 1004cb0:	00bc3fc4 	movi	r2,-3841
 1004cb4:	1884703a 	and	r2,r3,r2
 1004cb8:	20800015 	stw	r2,0(r4)
			break;
 1004cbc:	00000c06 	br	1004cf0 <Isr_Ep00RxDone+0x1f0>

		case USBFSM4DCP_DATAIN:
			break;

		default:
			printf("Fatal Error: Isr_Ep0RxDone ReadLastTranactionStatus=%x\n",
 1004cc0:	e17ffe43 	ldbu	r5,-7(fp)
 1004cc4:	01004074 	movhi	r4,257
 1004cc8:	2113d204 	addi	r4,r4,20296
 1004ccc:	10061c00 	call	10061c0 <printf>
					ep_last);
			bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1004cd0:	010040b4 	movhi	r4,258
 1004cd4:	2124c804 	addi	r4,r4,-27872
 1004cd8:	20c00017 	ldw	r3,0(r4)
 1004cdc:	00bc3fc4 	movi	r2,-3841
 1004ce0:	1884703a 	and	r2,r3,r2
 1004ce4:	1081c014 	ori	r2,r2,1792
 1004ce8:	20800015 	stw	r2,0(r4)
			Hal4D13_StallEP0InControlWrite();
 1004cec:	10045400 	call	1004540 <Hal4D13_StallEP0InControlWrite>
			break;
		}
	}
	return;
}
 1004cf0:	e037883a 	mov	sp,fp
 1004cf4:	dfc00117 	ldw	ra,4(sp)
 1004cf8:	df000017 	ldw	fp,0(sp)
 1004cfc:	dec00204 	addi	sp,sp,8
 1004d00:	f800283a 	ret

01004d04 <Isr_Ep00TxDone>:

void Isr_Ep00TxDone(void) {
 1004d04:	defffc04 	addi	sp,sp,-16
 1004d08:	dfc00315 	stw	ra,12(sp)
 1004d0c:	df000215 	stw	fp,8(sp)
 1004d10:	df000204 	addi	fp,sp,8
	short i = ControlData.wLength - ControlData.wCount;
 1004d14:	008040b4 	movhi	r2,258
 1004d18:	10a4ef04 	addi	r2,r2,-27716
 1004d1c:	10c0028b 	ldhu	r3,10(r2)
 1004d20:	008040b4 	movhi	r2,258
 1004d24:	10a4ef04 	addi	r2,r2,-27716
 1004d28:	1080030b 	ldhu	r2,12(r2)
 1004d2c:	1885c83a 	sub	r2,r3,r2
 1004d30:	e0bffe8d 	sth	r2,-6(fp)
	UCHAR ep_last;
	Hal4D13_ReadInterruptRegister();
 1004d34:	1003d3c0 	call	1003d3c <Hal4D13_ReadInterruptRegister>
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_IN); /* Clear interrupt flag */
 1004d38:	01000044 	movi	r4,1
 1004d3c:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004d40:	e0bffe05 	stb	r2,-8(fp)

	switch (bD13flags.bits.DCP_state) {
 1004d44:	008040b4 	movhi	r2,258
 1004d48:	10a4c804 	addi	r2,r2,-27872
 1004d4c:	10800017 	ldw	r2,0(r2)
 1004d50:	1004d23a 	srli	r2,r2,8
 1004d54:	108003cc 	andi	r2,r2,15
 1004d58:	10803fcc 	andi	r2,r2,255
 1004d5c:	e0bfff15 	stw	r2,-4(fp)
 1004d60:	e0ffff17 	ldw	r3,-4(fp)
 1004d64:	18800228 	cmpgeui	r2,r3,8
 1004d68:	1000561e 	bne	r2,zero,1004ec4 <Isr_Ep00TxDone+0x1c0>
 1004d6c:	e13fff17 	ldw	r4,-4(fp)
 1004d70:	e13fff17 	ldw	r4,-4(fp)
 1004d74:	2105883a 	add	r2,r4,r4
 1004d78:	1087883a 	add	r3,r2,r2
 1004d7c:	00804034 	movhi	r2,256
 1004d80:	10936404 	addi	r2,r2,19856
 1004d84:	1885883a 	add	r2,r3,r2
 1004d88:	10800017 	ldw	r2,0(r2)
 1004d8c:	1000683a 	jmp	r2
 1004d90:	01004f08 	cmpgei	r4,zero,316
 1004d94:	01004db0 	cmpltui	r4,zero,310
 1004d98:	01004f08 	cmpgei	r4,zero,316
 1004d9c:	01004f08 	cmpgei	r4,zero,316
 1004da0:	01004f08 	cmpgei	r4,zero,316
 1004da4:	01004f08 	cmpgei	r4,zero,316
 1004da8:	01004ec4 	movi	r4,315
 1004dac:	01004f08 	cmpgei	r4,zero,316
	case USBFSM4DCP_HANDSHAKE:
		break;
	case USBFSM4DCP_DATAIN:
		if (i >= EP0_PACKET_SIZE) {
 1004db0:	e0bffe8f 	ldh	r2,-6(fp)
 1004db4:	10801010 	cmplti	r2,r2,64
 1004db8:	1000141e 	bne	r2,zero,1004e0c <Isr_Ep00TxDone+0x108>
			Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN,
 1004dbc:	008040b4 	movhi	r2,258
 1004dc0:	10a4ef04 	addi	r2,r2,-27716
 1004dc4:	10c00417 	ldw	r3,16(r2)
 1004dc8:	008040b4 	movhi	r2,258
 1004dcc:	10a4ef04 	addi	r2,r2,-27716
 1004dd0:	1080030b 	ldhu	r2,12(r2)
 1004dd4:	10bfffcc 	andi	r2,r2,65535
 1004dd8:	188b883a 	add	r5,r3,r2
 1004ddc:	01000044 	movi	r4,1
 1004de0:	01801004 	movi	r6,64
 1004de4:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>
					ControlData.Addr.pData + ControlData.wCount,
					EP0_PACKET_SIZE);
			ControlData.wCount += EP0_PACKET_SIZE;
 1004de8:	008040b4 	movhi	r2,258
 1004dec:	10a4ef04 	addi	r2,r2,-27716
 1004df0:	1080030b 	ldhu	r2,12(r2)
 1004df4:	10801004 	addi	r2,r2,64
 1004df8:	1007883a 	mov	r3,r2
 1004dfc:	008040b4 	movhi	r2,258
 1004e00:	10a4ef04 	addi	r2,r2,-27716
 1004e04:	10c0030d 	sth	r3,12(r2)
 1004e08:	00003f06 	br	1004f08 <Isr_Ep00TxDone+0x204>
			// State remains at USBFSM4DCP_DATAIN
		} else if (i != 0) {
 1004e0c:	e0bffe8f 	ldh	r2,-6(fp)
 1004e10:	1005003a 	cmpeq	r2,r2,zero
 1004e14:	10001d1e 	bne	r2,zero,1004e8c <Isr_Ep00TxDone+0x188>
			Hal4D13_WriteEndpoint(1,
 1004e18:	008040b4 	movhi	r2,258
 1004e1c:	10a4ef04 	addi	r2,r2,-27716
 1004e20:	10c00417 	ldw	r3,16(r2)
 1004e24:	008040b4 	movhi	r2,258
 1004e28:	10a4ef04 	addi	r2,r2,-27716
 1004e2c:	1080030b 	ldhu	r2,12(r2)
 1004e30:	10bfffcc 	andi	r2,r2,65535
 1004e34:	188b883a 	add	r5,r3,r2
 1004e38:	e0bffe8b 	ldhu	r2,-6(fp)
 1004e3c:	11bfffcc 	andi	r6,r2,65535
 1004e40:	01000044 	movi	r4,1
 1004e44:	10039b80 	call	10039b8 <Hal4D13_WriteEndpoint>
					ControlData.Addr.pData + ControlData.wCount, i);
			ControlData.wCount += i;
 1004e48:	008040b4 	movhi	r2,258
 1004e4c:	10a4ef04 	addi	r2,r2,-27716
 1004e50:	10c0030b 	ldhu	r3,12(r2)
 1004e54:	e0bffe8b 	ldhu	r2,-6(fp)
 1004e58:	1885883a 	add	r2,r3,r2
 1004e5c:	1007883a 	mov	r3,r2
 1004e60:	008040b4 	movhi	r2,258
 1004e64:	10a4ef04 	addi	r2,r2,-27716
 1004e68:	10c0030d 	sth	r3,12(r2)
			bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1004e6c:	010040b4 	movhi	r4,258
 1004e70:	2124c804 	addi	r4,r4,-27872
 1004e74:	20c00017 	ldw	r3,0(r4)
 1004e78:	00bc3fc4 	movi	r2,-3841
 1004e7c:	1884703a 	and	r2,r3,r2
 1004e80:	10810014 	ori	r2,r2,1024
 1004e84:	20800015 	stw	r2,0(r4)
 1004e88:	00001f06 	br	1004f08 <Isr_Ep00TxDone+0x204>
		} else if (i == 0) {
 1004e8c:	e0bffe8f 	ldh	r2,-6(fp)
 1004e90:	1004c03a 	cmpne	r2,r2,zero
 1004e94:	10001c1e 	bne	r2,zero,1004f08 <Isr_Ep00TxDone+0x204>
			bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1004e98:	010040b4 	movhi	r4,258
 1004e9c:	2124c804 	addi	r4,r4,-27872
 1004ea0:	20c00017 	ldw	r3,0(r4)
 1004ea4:	00bc3fc4 	movi	r2,-3841
 1004ea8:	1884703a 	and	r2,r3,r2
 1004eac:	10810014 	ori	r2,r2,1024
 1004eb0:	20800015 	stw	r2,0(r4)
			Hal4D13_SingleTransmitEP0(0, 0);
 1004eb4:	0009883a 	mov	r4,zero
 1004eb8:	000b883a 	mov	r5,zero
 1004ebc:	10043900 	call	1004390 <Hal4D13_SingleTransmitEP0>
		}
		break;
 1004ec0:	00001106 	br	1004f08 <Isr_Ep00TxDone+0x204>
	case USBFSM4DCP_STALL:
		break;
	case USBFSM4DCP_DATAOUT:
		break;
	default:
		printf("Fatal Error: Isr_Ep0TxDone Unexpected FSMState=%x\n",
 1004ec4:	008040b4 	movhi	r2,258
 1004ec8:	10a4c804 	addi	r2,r2,-27872
 1004ecc:	10800017 	ldw	r2,0(r2)
 1004ed0:	1004d23a 	srli	r2,r2,8
 1004ed4:	108003cc 	andi	r2,r2,15
 1004ed8:	11403fcc 	andi	r5,r2,255
 1004edc:	01004074 	movhi	r4,257
 1004ee0:	2113e004 	addi	r4,r4,20352
 1004ee4:	10061c00 	call	10061c0 <printf>
				bD13flags.bits.DCP_state);
		bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1004ee8:	010040b4 	movhi	r4,258
 1004eec:	2124c804 	addi	r4,r4,-27872
 1004ef0:	20c00017 	ldw	r3,0(r4)
 1004ef4:	00bc3fc4 	movi	r2,-3841
 1004ef8:	1884703a 	and	r2,r3,r2
 1004efc:	1081c014 	ori	r2,r2,1792
 1004f00:	20800015 	stw	r2,0(r4)
		Hal4D13_StallEP0InControlRead();
 1004f04:	100457c0 	call	100457c <Hal4D13_StallEP0InControlRead>
		break;
	}
}
 1004f08:	e037883a 	mov	sp,fp
 1004f0c:	dfc00117 	ldw	ra,4(sp)
 1004f10:	df000017 	ldw	fp,0(sp)
 1004f14:	dec00204 	addi	sp,sp,8
 1004f18:	f800283a 	ret

01004f1c <usb_check_send>:
volatile unsigned char return_buf[4096];
volatile unsigned char * rb_wr_ptr = return_buf;
volatile unsigned char * rb_rd_ptr = return_buf;
volatile int inflight = 0;

void usb_check_send(void * context) {
 1004f1c:	defffa04 	addi	sp,sp,-24
 1004f20:	dfc00515 	stw	ra,20(sp)
 1004f24:	df000415 	stw	fp,16(sp)
 1004f28:	df000404 	addi	fp,sp,16
 1004f2c:	e13fff15 	stw	r4,-4(fp)
	while (inflight < 2 && !usb_send_queue_is_empty()) {
 1004f30:	00001e06 	br	1004fac <usb_check_send+0x90>
		unsigned char * data;
		unsigned int len;
		usb_send_queue_pop(&data, &len);
 1004f34:	e13ffd04 	addi	r4,fp,-12
 1004f38:	e17ffe04 	addi	r5,fp,-8
 1004f3c:	100071c0 	call	100071c <usb_send_queue_pop>

		assert(len <= 64);
 1004f40:	e0bffe17 	ldw	r2,-8(fp)
 1004f44:	10801070 	cmpltui	r2,r2,65
 1004f48:	1000081e 	bne	r2,zero,1004f6c <usb_check_send+0x50>
 1004f4c:	01004074 	movhi	r4,257
 1004f50:	2113f104 	addi	r4,r4,20420
 1004f54:	01403f04 	movi	r5,252
 1004f58:	01804074 	movhi	r6,257
 1004f5c:	3193ed04 	addi	r6,r6,20404
 1004f60:	01c04074 	movhi	r7,257
 1004f64:	39d3f504 	addi	r7,r7,20436
 1004f68:	10057340 	call	1005734 <__assert_func>

		inflight++;
 1004f6c:	d0a7f617 	ldw	r2,-24616(gp)
 1004f70:	10800044 	addi	r2,r2,1
 1004f74:	d0a7f615 	stw	r2,-24616(gp)
//		printf("EP 2 sending %d bytes\n", len);
		Hal4D13_WriteBulkEndpoint(EPINDEX4EP02, data, len);
 1004f78:	e17ffd17 	ldw	r5,-12(fp)
 1004f7c:	e0bffe17 	ldw	r2,-8(fp)
 1004f80:	11bfffcc 	andi	r6,r2,65535
 1004f84:	010000c4 	movi	r4,3
 1004f88:	1003b140 	call	1003b14 <Hal4D13_WriteBulkEndpoint>
		if (data)
 1004f8c:	e0bffd17 	ldw	r2,-12(fp)
 1004f90:	1005003a 	cmpeq	r2,r2,zero
 1004f94:	1000021e 	bne	r2,zero,1004fa0 <usb_check_send+0x84>
			free(data);
 1004f98:	e13ffd17 	ldw	r4,-12(fp)
 1004f9c:	10059200 	call	1005920 <free>

		unsigned char c;
		c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
 1004fa0:	010000c4 	movi	r4,3
 1004fa4:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004fa8:	e0bffc05 	stb	r2,-16(fp)
volatile unsigned char * rb_wr_ptr = return_buf;
volatile unsigned char * rb_rd_ptr = return_buf;
volatile int inflight = 0;

void usb_check_send(void * context) {
	while (inflight < 2 && !usb_send_queue_is_empty()) {
 1004fac:	d0a7f617 	ldw	r2,-24616(gp)
 1004fb0:	10800088 	cmpgei	r2,r2,2
 1004fb4:	1000031e 	bne	r2,zero,1004fc4 <usb_check_send+0xa8>
 1004fb8:	1000b900 	call	1000b90 <usb_send_queue_is_empty>
 1004fbc:	1005003a 	cmpeq	r2,r2,zero
 1004fc0:	103fdc1e 	bne	r2,zero,1004f34 <usb_check_send+0x18>

//		printf("cc = %02hhx\n", c);
//		Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
	}
//	printf("Inflight %d, Empty %d\n", inflight, usb_send_queue_is_empty());
}
 1004fc4:	e037883a 	mov	sp,fp
 1004fc8:	dfc00117 	ldw	ra,4(sp)
 1004fcc:	df000017 	ldw	fp,0(sp)
 1004fd0:	dec00204 	addi	sp,sp,8
 1004fd4:	f800283a 	ret

01004fd8 <Isr_Ep01Done>:

void Isr_Ep01Done(void) {
 1004fd8:	defffc04 	addi	sp,sp,-16
 1004fdc:	dfc00315 	stw	ra,12(sp)
 1004fe0:	df000215 	stw	fp,8(sp)
 1004fe4:	df000204 	addi	fp,sp,8
//	UCHAR c;
//	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP01);

	unsigned char * buf = calloc(sizeof(unsigned char), 64);
 1004fe8:	01000044 	movi	r4,1
 1004fec:	01401004 	movi	r5,64
 1004ff0:	10057ac0 	call	10057ac <calloc>
 1004ff4:	e0bfff15 	stw	r2,-4(fp)

	int recvd = Hal4D13_ReadEndpoint(EPINDEX4EP01, buf, 64);
 1004ff8:	01000084 	movi	r4,2
 1004ffc:	e17fff17 	ldw	r5,-4(fp)
 1005000:	01801004 	movi	r6,64
 1005004:	100364c0 	call	100364c <Hal4D13_ReadEndpoint>
 1005008:	10bfffcc 	andi	r2,r2,65535
 100500c:	e0bffe15 	stw	r2,-8(fp)
//	printf("EP 1 received %d bytes\n", recvd);
//	printf("%02hhx %02hhx %02hhx\n", buf[0], buf[1], buf[2]);
//	usleep(10000);
	usb_recv_queue_push(buf, recvd);
 1005010:	e17ffe17 	ldw	r5,-8(fp)
 1005014:	e13fff17 	ldw	r4,-4(fp)
 1005018:	10006980 	call	1000698 <usb_recv_queue_push>

	Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP01); /* Clear interrupt flag*/
 100501c:	01000084 	movi	r4,2
 1005020:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
}
 1005024:	e037883a 	mov	sp,fp
 1005028:	dfc00117 	ldw	ra,4(sp)
 100502c:	df000017 	ldw	fp,0(sp)
 1005030:	dec00204 	addi	sp,sp,8
 1005034:	f800283a 	ret

01005038 <Isr_Ep02Done>:

void Isr_Ep02Done(void) {
 1005038:	defffd04 	addi	sp,sp,-12
 100503c:	dfc00215 	stw	ra,8(sp)
 1005040:	df000115 	stw	fp,4(sp)
 1005044:	df000104 	addi	fp,sp,4
//	printf("EP 2 sent message\n");
	unsigned char c;
	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
 1005048:	010000c4 	movi	r4,3
 100504c:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1005050:	e0bfff05 	stb	r2,-4(fp)

//	printf("c = %02hhx\n", c);
	if ((c & 0x40) || (c & 0x20))
 1005054:	e0bfff03 	ldbu	r2,-4(fp)
 1005058:	1080100c 	andi	r2,r2,64
 100505c:	1004c03a 	cmpne	r2,r2,zero
 1005060:	1000041e 	bne	r2,zero,1005074 <Isr_Ep02Done+0x3c>
 1005064:	e0bfff03 	ldbu	r2,-4(fp)
 1005068:	1080080c 	andi	r2,r2,32
 100506c:	1005003a 	cmpeq	r2,r2,zero
 1005070:	1000031e 	bne	r2,zero,1005080 <Isr_Ep02Done+0x48>
		inflight = 1;
 1005074:	00800044 	movi	r2,1
 1005078:	d0a7f615 	stw	r2,-24616(gp)
//	printf("EP 2 sent message\n");
	unsigned char c;
	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);

//	printf("c = %02hhx\n", c);
	if ((c & 0x40) || (c & 0x20))
 100507c:	00000106 	br	1005084 <Isr_Ep02Done+0x4c>
		inflight = 1;
	else
		inflight = 0;
 1005080:	d027f615 	stw	zero,-24616(gp)

//	printf("Now inflight: %d\n", inflight);
	usb_check_send(NULL);
 1005084:	0009883a 	mov	r4,zero
 1005088:	1004f1c0 	call	1004f1c <usb_check_send>
}
 100508c:	e037883a 	mov	sp,fp
 1005090:	dfc00117 	ldw	ra,4(sp)
 1005094:	df000017 	ldw	fp,0(sp)
 1005098:	dec00204 	addi	sp,sp,8
 100509c:	f800283a 	ret

010050a0 <Isr_Ep03Done>:

void Isr_Ep03Done(void) {
 10050a0:	defffd04 	addi	sp,sp,-12
 10050a4:	dfc00215 	stw	ra,8(sp)
 10050a8:	df000115 	stw	fp,4(sp)
 10050ac:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP03); /* Clear interrupt flag*/
 10050b0:	01000104 	movi	r4,4
 10050b4:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 10050b8:	e0bfff05 	stb	r2,-4(fp)
}
 10050bc:	e037883a 	mov	sp,fp
 10050c0:	dfc00117 	ldw	ra,4(sp)
 10050c4:	df000017 	ldw	fp,0(sp)
 10050c8:	dec00204 	addi	sp,sp,8
 10050cc:	f800283a 	ret

010050d0 <Isr_Ep04Done>:

void Isr_Ep04Done(void) {
 10050d0:	defffd04 	addi	sp,sp,-12
 10050d4:	dfc00215 	stw	ra,8(sp)
 10050d8:	df000115 	stw	fp,4(sp)
 10050dc:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP04); /* Clear interrupt flag*/
 10050e0:	01000144 	movi	r4,5
 10050e4:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 10050e8:	e0bfff05 	stb	r2,-4(fp)
}
 10050ec:	e037883a 	mov	sp,fp
 10050f0:	dfc00117 	ldw	ra,4(sp)
 10050f4:	df000017 	ldw	fp,0(sp)
 10050f8:	dec00204 	addi	sp,sp,8
 10050fc:	f800283a 	ret

01005100 <Isr_Ep05Done>:

void Isr_Ep05Done(void) {
 1005100:	defefd04 	addi	sp,sp,-1036
 1005104:	dfc10215 	stw	ra,1032(sp)
 1005108:	df010115 	stw	fp,1028(sp)
 100510c:	df010104 	addi	fp,sp,1028
	UCHAR ep_last, DoubleBuff = 1;
 1005110:	00800044 	movi	r2,1
 1005114:	e0beff85 	stb	r2,-1026(fp)
	USHORT ISO_Buffer[512], len;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP05); // Clear interrupt flag
 1005118:	01000184 	movi	r4,6
 100511c:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1005120:	e0beffc5 	stb	r2,-1025(fp)
	if ((ep_last & (D13REG_EPSTS_DBF0 | D13REG_EPSTS_DBF1)) == 0x00)
 1005124:	e0beffc3 	ldbu	r2,-1025(fp)
 1005128:	1080180c 	andi	r2,r2,96
 100512c:	1004c03a 	cmpne	r2,r2,zero
 1005130:	1000031e 	bne	r2,zero,1005140 <Isr_Ep05Done+0x40>
		DoubleBuff = 2;
 1005134:	00800084 	movi	r2,2
 1005138:	e0beff85 	stb	r2,-1026(fp)
 100513c:	00000206 	br	1005148 <Isr_Ep05Done+0x48>
	else
		DoubleBuff = 1;
 1005140:	00800044 	movi	r2,1
 1005144:	e0beff85 	stb	r2,-1026(fp)
				len = Hal4D13_ReadISOEndpoint(EPINDEX4EP05, ISO_Buffer, 512);
				Hal4D13_WriteISOEndpoint(EPINDEX4EP06, ISO_Buffer, len);
			}
		}
	}
}
 1005148:	e037883a 	mov	sp,fp
 100514c:	dfc00117 	ldw	ra,4(sp)
 1005150:	df000017 	ldw	fp,0(sp)
 1005154:	dec00204 	addi	sp,sp,8
 1005158:	f800283a 	ret

0100515c <Isr_Ep06Done>:

void Isr_Ep06Done(void) {
 100515c:	defffd04 	addi	sp,sp,-12
 1005160:	dfc00215 	stw	ra,8(sp)
 1005164:	df000115 	stw	fp,4(sp)
 1005168:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP06); /* Clear interrupt flag*/
 100516c:	010001c4 	movi	r4,7
 1005170:	1003dc80 	call	1003dc8 <Hal4D13_GetEndpointStatusWInteruptClear>
 1005174:	e0bfff05 	stb	r2,-4(fp)
}
 1005178:	e037883a 	mov	sp,fp
 100517c:	dfc00117 	ldw	ra,4(sp)
 1005180:	df000017 	ldw	fp,0(sp)
 1005184:	dec00204 	addi	sp,sp,8
 1005188:	f800283a 	ret

0100518c <Isr_Ep07Done>:

void Isr_Ep07Done(void) {
 100518c:	deffff04 	addi	sp,sp,-4
 1005190:	df000015 	stw	fp,0(sp)
 1005194:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP07); /* Clear interrupt flag */
}
 1005198:	e037883a 	mov	sp,fp
 100519c:	df000017 	ldw	fp,0(sp)
 10051a0:	dec00104 	addi	sp,sp,4
 10051a4:	f800283a 	ret

010051a8 <Isr_Ep08Done>:
void Isr_Ep08Done(void) {
 10051a8:	deffff04 	addi	sp,sp,-4
 10051ac:	df000015 	stw	fp,0(sp)
 10051b0:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP08); /* Clear interrupt flag */
}
 10051b4:	e037883a 	mov	sp,fp
 10051b8:	df000017 	ldw	fp,0(sp)
 10051bc:	dec00104 	addi	sp,sp,4
 10051c0:	f800283a 	ret

010051c4 <Isr_Ep09Done>:
void Isr_Ep09Done(void) {
 10051c4:	deffff04 	addi	sp,sp,-4
 10051c8:	df000015 	stw	fp,0(sp)
 10051cc:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP09); /* Clear interrupt flag */
}
 10051d0:	e037883a 	mov	sp,fp
 10051d4:	df000017 	ldw	fp,0(sp)
 10051d8:	dec00104 	addi	sp,sp,4
 10051dc:	f800283a 	ret

010051e0 <Isr_Ep0ADone>:
void Isr_Ep0ADone(void) {
 10051e0:	deffff04 	addi	sp,sp,-4
 10051e4:	df000015 	stw	fp,0(sp)
 10051e8:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0A); /* Clear interrupt flag */
}
 10051ec:	e037883a 	mov	sp,fp
 10051f0:	df000017 	ldw	fp,0(sp)
 10051f4:	dec00104 	addi	sp,sp,4
 10051f8:	f800283a 	ret

010051fc <Isr_Ep0BDone>:
void Isr_Ep0BDone(void) {
 10051fc:	deffff04 	addi	sp,sp,-4
 1005200:	df000015 	stw	fp,0(sp)
 1005204:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0B); /* Clear interrupt flag */
}
 1005208:	e037883a 	mov	sp,fp
 100520c:	df000017 	ldw	fp,0(sp)
 1005210:	dec00104 	addi	sp,sp,4
 1005214:	f800283a 	ret

01005218 <Isr_Ep0CDone>:
void Isr_Ep0CDone(void) {
 1005218:	deffff04 	addi	sp,sp,-4
 100521c:	df000015 	stw	fp,0(sp)
 1005220:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0C); /* Clear interrupt flag */
}
 1005224:	e037883a 	mov	sp,fp
 1005228:	df000017 	ldw	fp,0(sp)
 100522c:	dec00104 	addi	sp,sp,4
 1005230:	f800283a 	ret

01005234 <Isr_Ep0DDone>:
void Isr_Ep0DDone(void) {
 1005234:	deffff04 	addi	sp,sp,-4
 1005238:	df000015 	stw	fp,0(sp)
 100523c:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0D); /* Clear interrupt flag */
}
 1005240:	e037883a 	mov	sp,fp
 1005244:	df000017 	ldw	fp,0(sp)
 1005248:	dec00104 	addi	sp,sp,4
 100524c:	f800283a 	ret

01005250 <Isr_Ep0EDone>:
void Isr_Ep0EDone(void) {
 1005250:	deffff04 	addi	sp,sp,-4
 1005254:	df000015 	stw	fp,0(sp)
 1005258:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0E); /* Clear interrupt flag */
}
 100525c:	e037883a 	mov	sp,fp
 1005260:	df000017 	ldw	fp,0(sp)
 1005264:	dec00104 	addi	sp,sp,4
 1005268:	f800283a 	ret

0100526c <usb_fifo_init>:
#include <stdlib.h>
#include <assert.h>



void usb_fifo_init(usb_fifo * fifo) {
 100526c:	defffe04 	addi	sp,sp,-8
 1005270:	df000115 	stw	fp,4(sp)
 1005274:	df000104 	addi	fp,sp,4
 1005278:	e13fff15 	stw	r4,-4(fp)
	fifo->head = NULL;
 100527c:	e0bfff17 	ldw	r2,-4(fp)
 1005280:	10000015 	stw	zero,0(r2)
	fifo->tail = NULL;
 1005284:	e0bfff17 	ldw	r2,-4(fp)
 1005288:	10000115 	stw	zero,4(r2)
}
 100528c:	e037883a 	mov	sp,fp
 1005290:	df000017 	ldw	fp,0(sp)
 1005294:	dec00104 	addi	sp,sp,4
 1005298:	f800283a 	ret

0100529c <usb_fifo_push>:

void usb_fifo_push(usb_fifo * fifo, unsigned char * data, unsigned int len) {
 100529c:	defffa04 	addi	sp,sp,-24
 10052a0:	dfc00515 	stw	ra,20(sp)
 10052a4:	df000415 	stw	fp,16(sp)
 10052a8:	df000404 	addi	fp,sp,16
 10052ac:	e13ffd15 	stw	r4,-12(fp)
 10052b0:	e17ffe15 	stw	r5,-8(fp)
 10052b4:	e1bfff15 	stw	r6,-4(fp)
	usb_packet * new_packet = malloc(sizeof(usb_packet));
 10052b8:	01000404 	movi	r4,16
 10052bc:	10059340 	call	1005934 <malloc>
 10052c0:	e0bffc15 	stw	r2,-16(fp)
	assert(new_packet);
 10052c4:	e0bffc17 	ldw	r2,-16(fp)
 10052c8:	1004c03a 	cmpne	r2,r2,zero
 10052cc:	1000081e 	bne	r2,zero,10052f0 <usb_fifo_push+0x54>
 10052d0:	01004074 	movhi	r4,257
 10052d4:	2113fc04 	addi	r4,r4,20464
 10052d8:	014003c4 	movi	r5,15
 10052dc:	01804074 	movhi	r6,257
 10052e0:	3193f804 	addi	r6,r6,20448
 10052e4:	01c04074 	movhi	r7,257
 10052e8:	39d40004 	addi	r7,r7,20480
 10052ec:	10057340 	call	1005734 <__assert_func>
	new_packet->len = len;
 10052f0:	e0ffff17 	ldw	r3,-4(fp)
 10052f4:	e0bffc17 	ldw	r2,-16(fp)
 10052f8:	10c00015 	stw	r3,0(r2)
	new_packet->offset = 0;
 10052fc:	e0bffc17 	ldw	r2,-16(fp)
 1005300:	10000115 	stw	zero,4(r2)
	new_packet->data = data;
 1005304:	e0fffc17 	ldw	r3,-16(fp)
 1005308:	e0bffe17 	ldw	r2,-8(fp)
 100530c:	18800215 	stw	r2,8(r3)

	new_packet->next = NULL;
 1005310:	e0bffc17 	ldw	r2,-16(fp)
 1005314:	10000315 	stw	zero,12(r2)
	if (! fifo->head)
 1005318:	e0bffd17 	ldw	r2,-12(fp)
 100531c:	10800017 	ldw	r2,0(r2)
 1005320:	1004c03a 	cmpne	r2,r2,zero
 1005324:	1000031e 	bne	r2,zero,1005334 <usb_fifo_push+0x98>
		fifo->head = new_packet;
 1005328:	e0fffd17 	ldw	r3,-12(fp)
 100532c:	e0bffc17 	ldw	r2,-16(fp)
 1005330:	18800015 	stw	r2,0(r3)
	if (fifo->tail)
 1005334:	e0bffd17 	ldw	r2,-12(fp)
 1005338:	10800117 	ldw	r2,4(r2)
 100533c:	1005003a 	cmpeq	r2,r2,zero
 1005340:	1000041e 	bne	r2,zero,1005354 <usb_fifo_push+0xb8>
		fifo->tail->next = new_packet;
 1005344:	e0bffd17 	ldw	r2,-12(fp)
 1005348:	10c00117 	ldw	r3,4(r2)
 100534c:	e0bffc17 	ldw	r2,-16(fp)
 1005350:	18800315 	stw	r2,12(r3)
	fifo->tail = new_packet;
 1005354:	e0fffd17 	ldw	r3,-12(fp)
 1005358:	e0bffc17 	ldw	r2,-16(fp)
 100535c:	18800115 	stw	r2,4(r3)
}
 1005360:	e037883a 	mov	sp,fp
 1005364:	dfc00117 	ldw	ra,4(sp)
 1005368:	df000017 	ldw	fp,0(sp)
 100536c:	dec00204 	addi	sp,sp,8
 1005370:	f800283a 	ret

01005374 <usb_fifo_is_empty>:

int usb_fifo_is_empty(usb_fifo * fifo) {
 1005374:	defffd04 	addi	sp,sp,-12
 1005378:	df000215 	stw	fp,8(sp)
 100537c:	df000204 	addi	fp,sp,8
 1005380:	e13ffe15 	stw	r4,-8(fp)
	if (fifo->head == NULL)
 1005384:	e0bffe17 	ldw	r2,-8(fp)
 1005388:	10800017 	ldw	r2,0(r2)
 100538c:	1004c03a 	cmpne	r2,r2,zero
 1005390:	1000031e 	bne	r2,zero,10053a0 <usb_fifo_is_empty+0x2c>
		return 1;
 1005394:	00800044 	movi	r2,1
 1005398:	e0bfff15 	stw	r2,-4(fp)
 100539c:	00000106 	br	10053a4 <usb_fifo_is_empty+0x30>
	else
		return 0;
 10053a0:	e03fff15 	stw	zero,-4(fp)
 10053a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10053a8:	e037883a 	mov	sp,fp
 10053ac:	df000017 	ldw	fp,0(sp)
 10053b0:	dec00104 	addi	sp,sp,4
 10053b4:	f800283a 	ret

010053b8 <usb_fifo_pop>:

void usb_fifo_pop(usb_fifo * fifo, unsigned char ** data, unsigned int * len, unsigned int * offset) {
 10053b8:	defff904 	addi	sp,sp,-28
 10053bc:	dfc00615 	stw	ra,24(sp)
 10053c0:	df000515 	stw	fp,20(sp)
 10053c4:	df000504 	addi	fp,sp,20
 10053c8:	e13ffc15 	stw	r4,-16(fp)
 10053cc:	e17ffd15 	stw	r5,-12(fp)
 10053d0:	e1bffe15 	stw	r6,-8(fp)
 10053d4:	e1ffff15 	stw	r7,-4(fp)
	if (usb_fifo_is_empty(fifo)) {
 10053d8:	e13ffc17 	ldw	r4,-16(fp)
 10053dc:	10053740 	call	1005374 <usb_fifo_is_empty>
 10053e0:	1005003a 	cmpeq	r2,r2,zero
 10053e4:	1000071e 	bne	r2,zero,1005404 <usb_fifo_pop+0x4c>
		*data = NULL;
 10053e8:	e0bffd17 	ldw	r2,-12(fp)
 10053ec:	10000015 	stw	zero,0(r2)
		*len = 0;
 10053f0:	e0bffe17 	ldw	r2,-8(fp)
 10053f4:	10000015 	stw	zero,0(r2)
		*offset = 0;
 10053f8:	e0bfff17 	ldw	r2,-4(fp)
 10053fc:	10000015 	stw	zero,0(r2)
		return;
 1005400:	00001e06 	br	100547c <usb_fifo_pop+0xc4>
	}

	usb_packet * packet_removed = fifo->head;
 1005404:	e0bffc17 	ldw	r2,-16(fp)
 1005408:	10800017 	ldw	r2,0(r2)
 100540c:	e0bffb15 	stw	r2,-20(fp)
	fifo->head = fifo->head->next;
 1005410:	e0bffc17 	ldw	r2,-16(fp)
 1005414:	10800017 	ldw	r2,0(r2)
 1005418:	10c00317 	ldw	r3,12(r2)
 100541c:	e0bffc17 	ldw	r2,-16(fp)
 1005420:	10c00015 	stw	r3,0(r2)
	if (! fifo->head)
 1005424:	e0bffc17 	ldw	r2,-16(fp)
 1005428:	10800017 	ldw	r2,0(r2)
 100542c:	1004c03a 	cmpne	r2,r2,zero
 1005430:	1000021e 	bne	r2,zero,100543c <usb_fifo_pop+0x84>
		fifo->tail = NULL;
 1005434:	e0bffc17 	ldw	r2,-16(fp)
 1005438:	10000115 	stw	zero,4(r2)

	*data = packet_removed->data;
 100543c:	e0bffb17 	ldw	r2,-20(fp)
 1005440:	10c00217 	ldw	r3,8(r2)
 1005444:	e0bffd17 	ldw	r2,-12(fp)
 1005448:	10c00015 	stw	r3,0(r2)
	*len = packet_removed->len;
 100544c:	e0bffb17 	ldw	r2,-20(fp)
 1005450:	10800017 	ldw	r2,0(r2)
 1005454:	1007883a 	mov	r3,r2
 1005458:	e0bffe17 	ldw	r2,-8(fp)
 100545c:	10c00015 	stw	r3,0(r2)
	*offset = packet_removed->offset;
 1005460:	e0bffb17 	ldw	r2,-20(fp)
 1005464:	10800117 	ldw	r2,4(r2)
 1005468:	1007883a 	mov	r3,r2
 100546c:	e0bfff17 	ldw	r2,-4(fp)
 1005470:	10c00015 	stw	r3,0(r2)
	free(packet_removed);
 1005474:	e13ffb17 	ldw	r4,-20(fp)
 1005478:	10059200 	call	1005920 <free>

}
 100547c:	e037883a 	mov	sp,fp
 1005480:	dfc00117 	ldw	ra,4(sp)
 1005484:	df000017 	ldw	fp,0(sp)
 1005488:	dec00204 	addi	sp,sp,8
 100548c:	f800283a 	ret

01005490 <usb_fifo_peek>:

usb_packet * usb_fifo_peek(usb_fifo * fifo) {
 1005490:	defffe04 	addi	sp,sp,-8
 1005494:	df000115 	stw	fp,4(sp)
 1005498:	df000104 	addi	fp,sp,4
 100549c:	e13fff15 	stw	r4,-4(fp)
	return fifo->head;
 10054a0:	e0bfff17 	ldw	r2,-4(fp)
 10054a4:	10800017 	ldw	r2,0(r2)
}
 10054a8:	e037883a 	mov	sp,fp
 10054ac:	df000017 	ldw	fp,0(sp)
 10054b0:	dec00104 	addi	sp,sp,4
 10054b4:	f800283a 	ret

010054b8 <make_packet>:
 *  Created on: 2014. 11. 11.
 *      Author: Harry
 */
#include "usbio.h"

packet* make_packet(char client_id, char* data) {
 10054b8:	defffb04 	addi	sp,sp,-20
 10054bc:	dfc00415 	stw	ra,16(sp)
 10054c0:	df000315 	stw	fp,12(sp)
 10054c4:	df000304 	addi	fp,sp,12
 10054c8:	e17fff15 	stw	r5,-4(fp)
 10054cc:	e13ffe05 	stb	r4,-8(fp)
	packet* p = (packet*) malloc(sizeof(packet));
 10054d0:	01000204 	movi	r4,8
 10054d4:	10059340 	call	1005934 <malloc>
 10054d8:	e0bffd15 	stw	r2,-12(fp)
	p->client_id = (unsigned char) (client_id & 0xff);
 10054dc:	e0fffe03 	ldbu	r3,-8(fp)
 10054e0:	00bfffc4 	movi	r2,-1
 10054e4:	1884703a 	and	r2,r3,r2
 10054e8:	1007883a 	mov	r3,r2
 10054ec:	e0bffd17 	ldw	r2,-12(fp)
 10054f0:	10c00005 	stb	r3,0(r2)
	p->byte_count = (unsigned char) strlen(data);
 10054f4:	e13fff17 	ldw	r4,-4(fp)
 10054f8:	10064c80 	call	10064c8 <strlen>
 10054fc:	1007883a 	mov	r3,r2
 1005500:	e0bffd17 	ldw	r2,-12(fp)
 1005504:	10c00045 	stb	r3,1(r2)
	strcpy(p->data, data);
 1005508:	e0bffd17 	ldw	r2,-12(fp)
 100550c:	11000117 	ldw	r4,4(r2)
 1005510:	e17fff17 	ldw	r5,-4(fp)
 1005514:	100643c0 	call	100643c <strcpy>
	return p;
 1005518:	e0bffd17 	ldw	r2,-12(fp)
}
 100551c:	e037883a 	mov	sp,fp
 1005520:	dfc00117 	ldw	ra,4(sp)
 1005524:	df000017 	ldw	fp,0(sp)
 1005528:	dec00204 	addi	sp,sp,8
 100552c:	f800283a 	ret

01005530 <usb_send>:

int usb_send(packet* p) {
 1005530:	defff904 	addi	sp,sp,-28
 1005534:	dfc00615 	stw	ra,24(sp)
 1005538:	df000515 	stw	fp,20(sp)
 100553c:	dc000415 	stw	r16,16(sp)
 1005540:	df000404 	addi	fp,sp,16
 1005544:	e13ffe15 	stw	r4,-8(fp)
	unsigned char length = p->byte_count;
 1005548:	e0bffe17 	ldw	r2,-8(fp)
 100554c:	10800043 	ldbu	r2,1(r2)
 1005550:	e0bffd05 	stb	r2,-12(fp)
	if (length > 100) {
 1005554:	e0bffd03 	ldbu	r2,-12(fp)
 1005558:	10801970 	cmpltui	r2,r2,101
 100555c:	1000031e 	bne	r2,zero,100556c <usb_send+0x3c>
		return -1;
 1005560:	00bfffc4 	movi	r2,-1
 1005564:	e0bfff15 	stw	r2,-4(fp)
 1005568:	00001b06 	br	10055d8 <usb_send+0xa8>
	}
	usb_device_send(&(p->client_id), 1);
 100556c:	e13ffe17 	ldw	r4,-8(fp)
 1005570:	01400044 	movi	r5,1
 1005574:	10008540 	call	1000854 <usb_device_send>
	char* data = calloc(sizeof(unsigned char), length + 1);
 1005578:	e0bffd03 	ldbu	r2,-12(fp)
 100557c:	10800044 	addi	r2,r2,1
 1005580:	100b883a 	mov	r5,r2
 1005584:	01000044 	movi	r4,1
 1005588:	10057ac0 	call	10057ac <calloc>
 100558c:	e0bffc15 	stw	r2,-16(fp)
	data[0] = length;
 1005590:	e0fffd03 	ldbu	r3,-12(fp)
 1005594:	e0bffc17 	ldw	r2,-16(fp)
 1005598:	10c00005 	stb	r3,0(r2)
	strcpy(data + 1, p->data);
 100559c:	e0bffc17 	ldw	r2,-16(fp)
 10055a0:	11000044 	addi	r4,r2,1
 10055a4:	e0bffe17 	ldw	r2,-8(fp)
 10055a8:	11400117 	ldw	r5,4(r2)
 10055ac:	100643c0 	call	100643c <strcpy>
	usb_device_send((unsigned char *) data, (unsigned int) strlen(data));
 10055b0:	e43ffc17 	ldw	r16,-16(fp)
 10055b4:	e13ffc17 	ldw	r4,-16(fp)
 10055b8:	10064c80 	call	10064c8 <strlen>
 10055bc:	100b883a 	mov	r5,r2
 10055c0:	8009883a 	mov	r4,r16
 10055c4:	10008540 	call	1000854 <usb_device_send>

	while(!usb_send_queue_is_empty());
 10055c8:	1000b900 	call	1000b90 <usb_send_queue_is_empty>
 10055cc:	1005003a 	cmpeq	r2,r2,zero
 10055d0:	103ffd1e 	bne	r2,zero,10055c8 <usb_send+0x98>

//	printf("Sent \"%s\" to device ID %d.\n", p->data, p->client_id);

	return 0;
 10055d4:	e03fff15 	stw	zero,-4(fp)
 10055d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10055dc:	e037883a 	mov	sp,fp
 10055e0:	dfc00217 	ldw	ra,8(sp)
 10055e4:	df000117 	ldw	fp,4(sp)
 10055e8:	dc000017 	ldw	r16,0(sp)
 10055ec:	dec00304 	addi	sp,sp,12
 10055f0:	f800283a 	ret

010055f4 <usb_recv>:

packet* usb_recv() {
 10055f4:	defff904 	addi	sp,sp,-28
 10055f8:	dfc00615 	stw	ra,24(sp)
 10055fc:	df000515 	stw	fp,20(sp)
 1005600:	df000504 	addi	fp,sp,20
	if (usb_recv_queue_is_empty())
 1005604:	1000bbc0 	call	1000bbc <usb_recv_queue_is_empty>
 1005608:	1005003a 	cmpeq	r2,r2,zero
 100560c:	1000021e 	bne	r2,zero,1005618 <usb_recv+0x24>
		return NULL;
 1005610:	e03fff15 	stw	zero,-4(fp)
 1005614:	00004106 	br	100571c <usb_recv+0x128>
	packet* recv_packet = (packet*) malloc(sizeof(packet));
 1005618:	01000204 	movi	r4,8
 100561c:	10059340 	call	1005934 <malloc>
 1005620:	e0bffe15 	stw	r2,-8(fp)
//	recv_packet->client_id = 0;
//	recv_packet->byte_count = 0;
//	strcpy(recv_packet->data, "");
	int total_recvd = 0;
 1005624:	e03ffd15 	stw	zero,-12(fp)
	int byte_to_recv = 1;
 1005628:	00800044 	movi	r2,1
 100562c:	e0bffc15 	stw	r2,-16(fp)
	int bytes_recvd = 0;
 1005630:	e03ffb15 	stw	zero,-20(fp)

	/**
	 * Get client id.
	 */
	while (total_recvd < 1) {
 1005634:	00000b06 	br	1005664 <usb_recv+0x70>
		byte_to_recv = usb_device_recv(
 1005638:	e13ffe17 	ldw	r4,-8(fp)
 100563c:	01400044 	movi	r5,1
 1005640:	10009840 	call	1000984 <usb_device_recv>
 1005644:	e0bffc15 	stw	r2,-16(fp)
				(unsigned char*) &(recv_packet->client_id), 1);
		if (byte_to_recv > 0) {
 1005648:	e0bffc17 	ldw	r2,-16(fp)
 100564c:	10800050 	cmplti	r2,r2,1
 1005650:	1000041e 	bne	r2,zero,1005664 <usb_recv+0x70>
			total_recvd += byte_to_recv;
 1005654:	e0bffd17 	ldw	r2,-12(fp)
 1005658:	e0fffc17 	ldw	r3,-16(fp)
 100565c:	10c5883a 	add	r2,r2,r3
 1005660:	e0bffd15 	stw	r2,-12(fp)
	int bytes_recvd = 0;

	/**
	 * Get client id.
	 */
	while (total_recvd < 1) {
 1005664:	e0bffd17 	ldw	r2,-12(fp)
 1005668:	10800050 	cmplti	r2,r2,1
 100566c:	103ff21e 	bne	r2,zero,1005638 <usb_recv+0x44>
		if (byte_to_recv > 0) {
			total_recvd += byte_to_recv;
		}
	}

	total_recvd = 0;
 1005670:	e03ffd15 	stw	zero,-12(fp)

	/*
	 * Get byte count.
	 */
	while (total_recvd < 1) {
 1005674:	00000c06 	br	10056a8 <usb_recv+0xb4>
		byte_to_recv = usb_device_recv(
 1005678:	e0bffe17 	ldw	r2,-8(fp)
 100567c:	11000044 	addi	r4,r2,1
 1005680:	01400044 	movi	r5,1
 1005684:	10009840 	call	1000984 <usb_device_recv>
 1005688:	e0bffc15 	stw	r2,-16(fp)
				(unsigned char*) &(recv_packet->byte_count), 1);
		if (byte_to_recv > 0) {
 100568c:	e0bffc17 	ldw	r2,-16(fp)
 1005690:	10800050 	cmplti	r2,r2,1
 1005694:	1000041e 	bne	r2,zero,10056a8 <usb_recv+0xb4>
			total_recvd += byte_to_recv;
 1005698:	e0bffd17 	ldw	r2,-12(fp)
 100569c:	e0fffc17 	ldw	r3,-16(fp)
 10056a0:	10c5883a 	add	r2,r2,r3
 10056a4:	e0bffd15 	stw	r2,-12(fp)
	total_recvd = 0;

	/*
	 * Get byte count.
	 */
	while (total_recvd < 1) {
 10056a8:	e0bffd17 	ldw	r2,-12(fp)
 10056ac:	10800050 	cmplti	r2,r2,1
 10056b0:	103ff11e 	bne	r2,zero,1005678 <usb_recv+0x84>
	}

	/**
	 * Receive data via USB
	 */
	byte_to_recv = (int) recv_packet->byte_count;
 10056b4:	e0bffe17 	ldw	r2,-8(fp)
 10056b8:	10800043 	ldbu	r2,1(r2)
 10056bc:	10803fcc 	andi	r2,r2,255
 10056c0:	e0bffc15 	stw	r2,-16(fp)
	total_recvd = 0;
 10056c4:	e03ffd15 	stw	zero,-12(fp)

	while (total_recvd < byte_to_recv) {
 10056c8:	00000f06 	br	1005708 <usb_recv+0x114>
		bytes_recvd = usb_device_recv(
 10056cc:	e0bffe17 	ldw	r2,-8(fp)
 10056d0:	10c00117 	ldw	r3,4(r2)
 10056d4:	e0bffd17 	ldw	r2,-12(fp)
 10056d8:	1885883a 	add	r2,r3,r2
 10056dc:	1009883a 	mov	r4,r2
 10056e0:	01400044 	movi	r5,1
 10056e4:	10009840 	call	1000984 <usb_device_recv>
 10056e8:	e0bffb15 	stw	r2,-20(fp)
				(unsigned char*) (recv_packet->data + total_recvd), 1);
		if (bytes_recvd > 0)
 10056ec:	e0bffb17 	ldw	r2,-20(fp)
 10056f0:	10800050 	cmplti	r2,r2,1
 10056f4:	1000041e 	bne	r2,zero,1005708 <usb_recv+0x114>
			total_recvd += bytes_recvd;
 10056f8:	e0bffd17 	ldw	r2,-12(fp)
 10056fc:	e0fffb17 	ldw	r3,-20(fp)
 1005700:	10c5883a 	add	r2,r2,r3
 1005704:	e0bffd15 	stw	r2,-12(fp)
	 * Receive data via USB
	 */
	byte_to_recv = (int) recv_packet->byte_count;
	total_recvd = 0;

	while (total_recvd < byte_to_recv) {
 1005708:	e0fffd17 	ldw	r3,-12(fp)
 100570c:	e0bffc17 	ldw	r2,-16(fp)
 1005710:	18bfee16 	blt	r3,r2,10056cc <usb_recv+0xd8>
				(unsigned char*) (recv_packet->data + total_recvd), 1);
		if (bytes_recvd > 0)
			total_recvd += bytes_recvd;
	}

	return recv_packet;
 1005714:	e0bffe17 	ldw	r2,-8(fp)
 1005718:	e0bfff15 	stw	r2,-4(fp)
 100571c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005720:	e037883a 	mov	sp,fp
 1005724:	dfc00117 	ldw	ra,4(sp)
 1005728:	df000017 	ldw	fp,0(sp)
 100572c:	dec00204 	addi	sp,sp,8
 1005730:	f800283a 	ret

01005734 <__assert_func>:
 1005734:	00804074 	movhi	r2,257
 1005738:	109ce904 	addi	r2,r2,29604
 100573c:	10c00017 	ldw	r3,0(r2)
 1005740:	defffc04 	addi	sp,sp,-16
 1005744:	2011883a 	mov	r8,r4
 1005748:	dfc00315 	stw	ra,12(sp)
 100574c:	3005883a 	mov	r2,r6
 1005750:	2813883a 	mov	r9,r5
 1005754:	19000317 	ldw	r4,12(r3)
 1005758:	30000b26 	beq	r6,zero,1005788 <__assert_func+0x54>
 100575c:	00c04074 	movhi	r3,257
 1005760:	18d40f04 	addi	r3,r3,20540
 1005764:	380d883a 	mov	r6,r7
 1005768:	01404074 	movhi	r5,257
 100576c:	29540304 	addi	r5,r5,20492
 1005770:	400f883a 	mov	r7,r8
 1005774:	da400015 	stw	r9,0(sp)
 1005778:	d8c00115 	stw	r3,4(sp)
 100577c:	d8800215 	stw	r2,8(sp)
 1005780:	10058b40 	call	10058b4 <fiprintf>
 1005784:	10087700 	call	1008770 <abort>
 1005788:	00804074 	movhi	r2,257
 100578c:	10941204 	addi	r2,r2,20552
 1005790:	1007883a 	mov	r3,r2
 1005794:	003ff306 	br	1005764 <__assert_func+0x30>

01005798 <__assert>:
 1005798:	deffff04 	addi	sp,sp,-4
 100579c:	300f883a 	mov	r7,r6
 10057a0:	000d883a 	mov	r6,zero
 10057a4:	dfc00015 	stw	ra,0(sp)
 10057a8:	10057340 	call	1005734 <__assert_func>

010057ac <calloc>:
 10057ac:	01804074 	movhi	r6,257
 10057b0:	319ce904 	addi	r6,r6,29604
 10057b4:	2007883a 	mov	r3,r4
 10057b8:	31000017 	ldw	r4,0(r6)
 10057bc:	280d883a 	mov	r6,r5
 10057c0:	180b883a 	mov	r5,r3
 10057c4:	10057c81 	jmpi	10057c8 <_calloc_r>

010057c8 <_calloc_r>:
 10057c8:	298b383a 	mul	r5,r5,r6
 10057cc:	defffe04 	addi	sp,sp,-8
 10057d0:	dc000015 	stw	r16,0(sp)
 10057d4:	dfc00115 	stw	ra,4(sp)
 10057d8:	10059480 	call	1005948 <_malloc_r>
 10057dc:	1021883a 	mov	r16,r2
 10057e0:	01c00904 	movi	r7,36
 10057e4:	10000d26 	beq	r2,zero,100581c <_calloc_r+0x54>
 10057e8:	10ffff17 	ldw	r3,-4(r2)
 10057ec:	1009883a 	mov	r4,r2
 10057f0:	00bfff04 	movi	r2,-4
 10057f4:	1886703a 	and	r3,r3,r2
 10057f8:	1887883a 	add	r3,r3,r2
 10057fc:	180d883a 	mov	r6,r3
 1005800:	000b883a 	mov	r5,zero
 1005804:	38c01736 	bltu	r7,r3,1005864 <_calloc_r+0x9c>
 1005808:	008004c4 	movi	r2,19
 100580c:	10c00836 	bltu	r2,r3,1005830 <_calloc_r+0x68>
 1005810:	20000215 	stw	zero,8(r4)
 1005814:	20000015 	stw	zero,0(r4)
 1005818:	20000115 	stw	zero,4(r4)
 100581c:	8005883a 	mov	r2,r16
 1005820:	dfc00117 	ldw	ra,4(sp)
 1005824:	dc000017 	ldw	r16,0(sp)
 1005828:	dec00204 	addi	sp,sp,8
 100582c:	f800283a 	ret
 1005830:	008006c4 	movi	r2,27
 1005834:	80000015 	stw	zero,0(r16)
 1005838:	80000115 	stw	zero,4(r16)
 100583c:	81000204 	addi	r4,r16,8
 1005840:	10fff32e 	bgeu	r2,r3,1005810 <_calloc_r+0x48>
 1005844:	80000215 	stw	zero,8(r16)
 1005848:	80000315 	stw	zero,12(r16)
 100584c:	81000404 	addi	r4,r16,16
 1005850:	19ffef1e 	bne	r3,r7,1005810 <_calloc_r+0x48>
 1005854:	81000604 	addi	r4,r16,24
 1005858:	80000415 	stw	zero,16(r16)
 100585c:	80000515 	stw	zero,20(r16)
 1005860:	003feb06 	br	1005810 <_calloc_r+0x48>
 1005864:	10061280 	call	1006128 <memset>
 1005868:	8005883a 	mov	r2,r16
 100586c:	dfc00117 	ldw	ra,4(sp)
 1005870:	dc000017 	ldw	r16,0(sp)
 1005874:	dec00204 	addi	sp,sp,8
 1005878:	f800283a 	ret

0100587c <exit>:
 100587c:	defffe04 	addi	sp,sp,-8
 1005880:	000b883a 	mov	r5,zero
 1005884:	dc000015 	stw	r16,0(sp)
 1005888:	dfc00115 	stw	ra,4(sp)
 100588c:	2021883a 	mov	r16,r4
 1005890:	10085c00 	call	10085c0 <__call_exitprocs>
 1005894:	00804074 	movhi	r2,257
 1005898:	109cea04 	addi	r2,r2,29608
 100589c:	11000017 	ldw	r4,0(r2)
 10058a0:	20800f17 	ldw	r2,60(r4)
 10058a4:	10000126 	beq	r2,zero,10058ac <exit+0x30>
 10058a8:	103ee83a 	callr	r2
 10058ac:	8009883a 	mov	r4,r16
 10058b0:	1010be00 	call	1010be0 <_exit>

010058b4 <fiprintf>:
 10058b4:	defffc04 	addi	sp,sp,-16
 10058b8:	2007883a 	mov	r3,r4
 10058bc:	dfc00115 	stw	ra,4(sp)
 10058c0:	d9800215 	stw	r6,8(sp)
 10058c4:	d9c00315 	stw	r7,12(sp)
 10058c8:	01804074 	movhi	r6,257
 10058cc:	319ce904 	addi	r6,r6,29604
 10058d0:	31000017 	ldw	r4,0(r6)
 10058d4:	d8800204 	addi	r2,sp,8
 10058d8:	280d883a 	mov	r6,r5
 10058dc:	100f883a 	mov	r7,r2
 10058e0:	180b883a 	mov	r5,r3
 10058e4:	d8800015 	stw	r2,0(sp)
 10058e8:	100653c0 	call	100653c <_vfiprintf_r>
 10058ec:	dfc00117 	ldw	ra,4(sp)
 10058f0:	dec00404 	addi	sp,sp,16
 10058f4:	f800283a 	ret

010058f8 <_fiprintf_r>:
 10058f8:	defffd04 	addi	sp,sp,-12
 10058fc:	dfc00115 	stw	ra,4(sp)
 1005900:	d9c00215 	stw	r7,8(sp)
 1005904:	d8800204 	addi	r2,sp,8
 1005908:	100f883a 	mov	r7,r2
 100590c:	d8800015 	stw	r2,0(sp)
 1005910:	100653c0 	call	100653c <_vfiprintf_r>
 1005914:	dfc00117 	ldw	ra,4(sp)
 1005918:	dec00304 	addi	sp,sp,12
 100591c:	f800283a 	ret

01005920 <free>:
 1005920:	00804074 	movhi	r2,257
 1005924:	109ce904 	addi	r2,r2,29604
 1005928:	200b883a 	mov	r5,r4
 100592c:	11000017 	ldw	r4,0(r2)
 1005930:	100a5701 	jmpi	100a570 <_free_r>

01005934 <malloc>:
 1005934:	00804074 	movhi	r2,257
 1005938:	109ce904 	addi	r2,r2,29604
 100593c:	200b883a 	mov	r5,r4
 1005940:	11000017 	ldw	r4,0(r2)
 1005944:	10059481 	jmpi	1005948 <_malloc_r>

01005948 <_malloc_r>:
 1005948:	defff604 	addi	sp,sp,-40
 100594c:	28c002c4 	addi	r3,r5,11
 1005950:	00800584 	movi	r2,22
 1005954:	dc800215 	stw	r18,8(sp)
 1005958:	dfc00915 	stw	ra,36(sp)
 100595c:	df000815 	stw	fp,32(sp)
 1005960:	ddc00715 	stw	r23,28(sp)
 1005964:	dd800615 	stw	r22,24(sp)
 1005968:	dd400515 	stw	r21,20(sp)
 100596c:	dd000415 	stw	r20,16(sp)
 1005970:	dcc00315 	stw	r19,12(sp)
 1005974:	dc400115 	stw	r17,4(sp)
 1005978:	dc000015 	stw	r16,0(sp)
 100597c:	2025883a 	mov	r18,r4
 1005980:	10c01236 	bltu	r2,r3,10059cc <_malloc_r+0x84>
 1005984:	04400404 	movi	r17,16
 1005988:	8940142e 	bgeu	r17,r5,10059dc <_malloc_r+0x94>
 100598c:	00800304 	movi	r2,12
 1005990:	0007883a 	mov	r3,zero
 1005994:	90800015 	stw	r2,0(r18)
 1005998:	1805883a 	mov	r2,r3
 100599c:	dfc00917 	ldw	ra,36(sp)
 10059a0:	df000817 	ldw	fp,32(sp)
 10059a4:	ddc00717 	ldw	r23,28(sp)
 10059a8:	dd800617 	ldw	r22,24(sp)
 10059ac:	dd400517 	ldw	r21,20(sp)
 10059b0:	dd000417 	ldw	r20,16(sp)
 10059b4:	dcc00317 	ldw	r19,12(sp)
 10059b8:	dc800217 	ldw	r18,8(sp)
 10059bc:	dc400117 	ldw	r17,4(sp)
 10059c0:	dc000017 	ldw	r16,0(sp)
 10059c4:	dec00a04 	addi	sp,sp,40
 10059c8:	f800283a 	ret
 10059cc:	00bffe04 	movi	r2,-8
 10059d0:	18a2703a 	and	r17,r3,r2
 10059d4:	883fed16 	blt	r17,zero,100598c <_malloc_r+0x44>
 10059d8:	897fec36 	bltu	r17,r5,100598c <_malloc_r+0x44>
 10059dc:	9009883a 	mov	r4,r18
 10059e0:	101147c0 	call	101147c <__malloc_lock>
 10059e4:	00807dc4 	movi	r2,503
 10059e8:	14402b2e 	bgeu	r2,r17,1005a98 <_malloc_r+0x150>
 10059ec:	8806d27a 	srli	r3,r17,9
 10059f0:	18003f1e 	bne	r3,zero,1005af0 <_malloc_r+0x1a8>
 10059f4:	880cd0fa 	srli	r6,r17,3
 10059f8:	300490fa 	slli	r2,r6,3
 10059fc:	02c04074 	movhi	r11,257
 1005a00:	5ad6dc04 	addi	r11,r11,23408
 1005a04:	12cb883a 	add	r5,r2,r11
 1005a08:	2c000317 	ldw	r16,12(r5)
 1005a0c:	580f883a 	mov	r7,r11
 1005a10:	2c00041e 	bne	r5,r16,1005a24 <_malloc_r+0xdc>
 1005a14:	00000a06 	br	1005a40 <_malloc_r+0xf8>
 1005a18:	1800860e 	bge	r3,zero,1005c34 <_malloc_r+0x2ec>
 1005a1c:	84000317 	ldw	r16,12(r16)
 1005a20:	2c000726 	beq	r5,r16,1005a40 <_malloc_r+0xf8>
 1005a24:	80800117 	ldw	r2,4(r16)
 1005a28:	00ffff04 	movi	r3,-4
 1005a2c:	10c8703a 	and	r4,r2,r3
 1005a30:	2447c83a 	sub	r3,r4,r17
 1005a34:	008003c4 	movi	r2,15
 1005a38:	10fff70e 	bge	r2,r3,1005a18 <_malloc_r+0xd0>
 1005a3c:	31bfffc4 	addi	r6,r6,-1
 1005a40:	32400044 	addi	r9,r6,1
 1005a44:	02804074 	movhi	r10,257
 1005a48:	5296de04 	addi	r10,r10,23416
 1005a4c:	54000217 	ldw	r16,8(r10)
 1005a50:	8280a026 	beq	r16,r10,1005cd4 <_malloc_r+0x38c>
 1005a54:	80800117 	ldw	r2,4(r16)
 1005a58:	00ffff04 	movi	r3,-4
 1005a5c:	10ca703a 	and	r5,r2,r3
 1005a60:	2c4dc83a 	sub	r6,r5,r17
 1005a64:	008003c4 	movi	r2,15
 1005a68:	11808316 	blt	r2,r6,1005c78 <_malloc_r+0x330>
 1005a6c:	52800315 	stw	r10,12(r10)
 1005a70:	52800215 	stw	r10,8(r10)
 1005a74:	30002916 	blt	r6,zero,1005b1c <_malloc_r+0x1d4>
 1005a78:	8147883a 	add	r3,r16,r5
 1005a7c:	18800117 	ldw	r2,4(r3)
 1005a80:	9009883a 	mov	r4,r18
 1005a84:	10800054 	ori	r2,r2,1
 1005a88:	18800115 	stw	r2,4(r3)
 1005a8c:	101149c0 	call	101149c <__malloc_unlock>
 1005a90:	80c00204 	addi	r3,r16,8
 1005a94:	003fc006 	br	1005998 <_malloc_r+0x50>
 1005a98:	02c04074 	movhi	r11,257
 1005a9c:	5ad6dc04 	addi	r11,r11,23408
 1005aa0:	8ac5883a 	add	r2,r17,r11
 1005aa4:	14000317 	ldw	r16,12(r2)
 1005aa8:	580f883a 	mov	r7,r11
 1005aac:	8806d0fa 	srli	r3,r17,3
 1005ab0:	14006c26 	beq	r2,r16,1005c64 <_malloc_r+0x31c>
 1005ab4:	80c00117 	ldw	r3,4(r16)
 1005ab8:	00bfff04 	movi	r2,-4
 1005abc:	81800317 	ldw	r6,12(r16)
 1005ac0:	1886703a 	and	r3,r3,r2
 1005ac4:	80c7883a 	add	r3,r16,r3
 1005ac8:	18800117 	ldw	r2,4(r3)
 1005acc:	81400217 	ldw	r5,8(r16)
 1005ad0:	9009883a 	mov	r4,r18
 1005ad4:	10800054 	ori	r2,r2,1
 1005ad8:	18800115 	stw	r2,4(r3)
 1005adc:	31400215 	stw	r5,8(r6)
 1005ae0:	29800315 	stw	r6,12(r5)
 1005ae4:	101149c0 	call	101149c <__malloc_unlock>
 1005ae8:	80c00204 	addi	r3,r16,8
 1005aec:	003faa06 	br	1005998 <_malloc_r+0x50>
 1005af0:	00800104 	movi	r2,4
 1005af4:	10c0052e 	bgeu	r2,r3,1005b0c <_malloc_r+0x1c4>
 1005af8:	00800504 	movi	r2,20
 1005afc:	10c07836 	bltu	r2,r3,1005ce0 <_malloc_r+0x398>
 1005b00:	198016c4 	addi	r6,r3,91
 1005b04:	300490fa 	slli	r2,r6,3
 1005b08:	003fbc06 	br	10059fc <_malloc_r+0xb4>
 1005b0c:	8804d1ba 	srli	r2,r17,6
 1005b10:	11800e04 	addi	r6,r2,56
 1005b14:	300490fa 	slli	r2,r6,3
 1005b18:	003fb806 	br	10059fc <_malloc_r+0xb4>
 1005b1c:	00807fc4 	movi	r2,511
 1005b20:	1140bb36 	bltu	r2,r5,1005e10 <_malloc_r+0x4c8>
 1005b24:	2806d0fa 	srli	r3,r5,3
 1005b28:	573ffe04 	addi	fp,r10,-8
 1005b2c:	00800044 	movi	r2,1
 1005b30:	180890fa 	slli	r4,r3,3
 1005b34:	1807d0ba 	srai	r3,r3,2
 1005b38:	e1c00117 	ldw	r7,4(fp)
 1005b3c:	5909883a 	add	r4,r11,r4
 1005b40:	21400217 	ldw	r5,8(r4)
 1005b44:	10c4983a 	sll	r2,r2,r3
 1005b48:	81000315 	stw	r4,12(r16)
 1005b4c:	81400215 	stw	r5,8(r16)
 1005b50:	388eb03a 	or	r7,r7,r2
 1005b54:	2c000315 	stw	r16,12(r5)
 1005b58:	24000215 	stw	r16,8(r4)
 1005b5c:	e1c00115 	stw	r7,4(fp)
 1005b60:	4807883a 	mov	r3,r9
 1005b64:	4800cd16 	blt	r9,zero,1005e9c <_malloc_r+0x554>
 1005b68:	1807d0ba 	srai	r3,r3,2
 1005b6c:	00800044 	movi	r2,1
 1005b70:	10c8983a 	sll	r4,r2,r3
 1005b74:	39004436 	bltu	r7,r4,1005c88 <_malloc_r+0x340>
 1005b78:	21c4703a 	and	r2,r4,r7
 1005b7c:	10000a1e 	bne	r2,zero,1005ba8 <_malloc_r+0x260>
 1005b80:	2109883a 	add	r4,r4,r4
 1005b84:	00bfff04 	movi	r2,-4
 1005b88:	4884703a 	and	r2,r9,r2
 1005b8c:	3906703a 	and	r3,r7,r4
 1005b90:	12400104 	addi	r9,r2,4
 1005b94:	1800041e 	bne	r3,zero,1005ba8 <_malloc_r+0x260>
 1005b98:	2109883a 	add	r4,r4,r4
 1005b9c:	3904703a 	and	r2,r7,r4
 1005ba0:	4a400104 	addi	r9,r9,4
 1005ba4:	103ffc26 	beq	r2,zero,1005b98 <_malloc_r+0x250>
 1005ba8:	480490fa 	slli	r2,r9,3
 1005bac:	4819883a 	mov	r12,r9
 1005bb0:	023fff04 	movi	r8,-4
 1005bb4:	589b883a 	add	r13,r11,r2
 1005bb8:	6807883a 	mov	r3,r13
 1005bbc:	014003c4 	movi	r5,15
 1005bc0:	1c000317 	ldw	r16,12(r3)
 1005bc4:	1c00041e 	bne	r3,r16,1005bd8 <_malloc_r+0x290>
 1005bc8:	0000a706 	br	1005e68 <_malloc_r+0x520>
 1005bcc:	3000ab0e 	bge	r6,zero,1005e7c <_malloc_r+0x534>
 1005bd0:	84000317 	ldw	r16,12(r16)
 1005bd4:	1c00a426 	beq	r3,r16,1005e68 <_malloc_r+0x520>
 1005bd8:	80800117 	ldw	r2,4(r16)
 1005bdc:	1204703a 	and	r2,r2,r8
 1005be0:	144dc83a 	sub	r6,r2,r17
 1005be4:	29bff90e 	bge	r5,r6,1005bcc <_malloc_r+0x284>
 1005be8:	81000317 	ldw	r4,12(r16)
 1005bec:	80c00217 	ldw	r3,8(r16)
 1005bf0:	89400054 	ori	r5,r17,1
 1005bf4:	8445883a 	add	r2,r16,r17
 1005bf8:	20c00215 	stw	r3,8(r4)
 1005bfc:	19000315 	stw	r4,12(r3)
 1005c00:	81400115 	stw	r5,4(r16)
 1005c04:	1187883a 	add	r3,r2,r6
 1005c08:	31000054 	ori	r4,r6,1
 1005c0c:	50800315 	stw	r2,12(r10)
 1005c10:	50800215 	stw	r2,8(r10)
 1005c14:	19800015 	stw	r6,0(r3)
 1005c18:	11000115 	stw	r4,4(r2)
 1005c1c:	12800215 	stw	r10,8(r2)
 1005c20:	12800315 	stw	r10,12(r2)
 1005c24:	9009883a 	mov	r4,r18
 1005c28:	101149c0 	call	101149c <__malloc_unlock>
 1005c2c:	80c00204 	addi	r3,r16,8
 1005c30:	003f5906 	br	1005998 <_malloc_r+0x50>
 1005c34:	8109883a 	add	r4,r16,r4
 1005c38:	20800117 	ldw	r2,4(r4)
 1005c3c:	80c00217 	ldw	r3,8(r16)
 1005c40:	81400317 	ldw	r5,12(r16)
 1005c44:	10800054 	ori	r2,r2,1
 1005c48:	20800115 	stw	r2,4(r4)
 1005c4c:	28c00215 	stw	r3,8(r5)
 1005c50:	19400315 	stw	r5,12(r3)
 1005c54:	9009883a 	mov	r4,r18
 1005c58:	101149c0 	call	101149c <__malloc_unlock>
 1005c5c:	80c00204 	addi	r3,r16,8
 1005c60:	003f4d06 	br	1005998 <_malloc_r+0x50>
 1005c64:	80800204 	addi	r2,r16,8
 1005c68:	14000317 	ldw	r16,12(r2)
 1005c6c:	143f911e 	bne	r2,r16,1005ab4 <_malloc_r+0x16c>
 1005c70:	1a400084 	addi	r9,r3,2
 1005c74:	003f7306 	br	1005a44 <_malloc_r+0xfc>
 1005c78:	88c00054 	ori	r3,r17,1
 1005c7c:	8445883a 	add	r2,r16,r17
 1005c80:	80c00115 	stw	r3,4(r16)
 1005c84:	003fdf06 	br	1005c04 <_malloc_r+0x2bc>
 1005c88:	e4000217 	ldw	r16,8(fp)
 1005c8c:	00bfff04 	movi	r2,-4
 1005c90:	80c00117 	ldw	r3,4(r16)
 1005c94:	802d883a 	mov	r22,r16
 1005c98:	18aa703a 	and	r21,r3,r2
 1005c9c:	ac401636 	bltu	r21,r17,1005cf8 <_malloc_r+0x3b0>
 1005ca0:	ac49c83a 	sub	r4,r21,r17
 1005ca4:	008003c4 	movi	r2,15
 1005ca8:	1100130e 	bge	r2,r4,1005cf8 <_malloc_r+0x3b0>
 1005cac:	88800054 	ori	r2,r17,1
 1005cb0:	8447883a 	add	r3,r16,r17
 1005cb4:	80800115 	stw	r2,4(r16)
 1005cb8:	20800054 	ori	r2,r4,1
 1005cbc:	18800115 	stw	r2,4(r3)
 1005cc0:	e0c00215 	stw	r3,8(fp)
 1005cc4:	9009883a 	mov	r4,r18
 1005cc8:	101149c0 	call	101149c <__malloc_unlock>
 1005ccc:	80c00204 	addi	r3,r16,8
 1005cd0:	003f3106 	br	1005998 <_malloc_r+0x50>
 1005cd4:	39c00117 	ldw	r7,4(r7)
 1005cd8:	573ffe04 	addi	fp,r10,-8
 1005cdc:	003fa006 	br	1005b60 <_malloc_r+0x218>
 1005ce0:	00801504 	movi	r2,84
 1005ce4:	10c06736 	bltu	r2,r3,1005e84 <_malloc_r+0x53c>
 1005ce8:	8804d33a 	srli	r2,r17,12
 1005cec:	11801b84 	addi	r6,r2,110
 1005cf0:	300490fa 	slli	r2,r6,3
 1005cf4:	003f4106 	br	10059fc <_malloc_r+0xb4>
 1005cf8:	d0a7f817 	ldw	r2,-24608(gp)
 1005cfc:	d0e00e17 	ldw	r3,-32712(gp)
 1005d00:	053fffc4 	movi	r20,-1
 1005d04:	10800404 	addi	r2,r2,16
 1005d08:	88a7883a 	add	r19,r17,r2
 1005d0c:	1d000326 	beq	r3,r20,1005d1c <_malloc_r+0x3d4>
 1005d10:	98c3ffc4 	addi	r3,r19,4095
 1005d14:	00bc0004 	movi	r2,-4096
 1005d18:	18a6703a 	and	r19,r3,r2
 1005d1c:	9009883a 	mov	r4,r18
 1005d20:	980b883a 	mov	r5,r19
 1005d24:	10063100 	call	1006310 <_sbrk_r>
 1005d28:	1009883a 	mov	r4,r2
 1005d2c:	15000426 	beq	r2,r20,1005d40 <_malloc_r+0x3f8>
 1005d30:	854b883a 	add	r5,r16,r21
 1005d34:	1029883a 	mov	r20,r2
 1005d38:	11405a2e 	bgeu	r2,r5,1005ea4 <_malloc_r+0x55c>
 1005d3c:	87000c26 	beq	r16,fp,1005d70 <_malloc_r+0x428>
 1005d40:	e4000217 	ldw	r16,8(fp)
 1005d44:	80c00117 	ldw	r3,4(r16)
 1005d48:	00bfff04 	movi	r2,-4
 1005d4c:	1884703a 	and	r2,r3,r2
 1005d50:	14400336 	bltu	r2,r17,1005d60 <_malloc_r+0x418>
 1005d54:	1449c83a 	sub	r4,r2,r17
 1005d58:	008003c4 	movi	r2,15
 1005d5c:	113fd316 	blt	r2,r4,1005cac <_malloc_r+0x364>
 1005d60:	9009883a 	mov	r4,r18
 1005d64:	101149c0 	call	101149c <__malloc_unlock>
 1005d68:	0007883a 	mov	r3,zero
 1005d6c:	003f0a06 	br	1005998 <_malloc_r+0x50>
 1005d70:	05c040b4 	movhi	r23,258
 1005d74:	bde4e504 	addi	r23,r23,-27756
 1005d78:	b8800017 	ldw	r2,0(r23)
 1005d7c:	988d883a 	add	r6,r19,r2
 1005d80:	b9800015 	stw	r6,0(r23)
 1005d84:	d0e00e17 	ldw	r3,-32712(gp)
 1005d88:	00bfffc4 	movi	r2,-1
 1005d8c:	18808e26 	beq	r3,r2,1005fc8 <_malloc_r+0x680>
 1005d90:	2145c83a 	sub	r2,r4,r5
 1005d94:	3085883a 	add	r2,r6,r2
 1005d98:	b8800015 	stw	r2,0(r23)
 1005d9c:	20c001cc 	andi	r3,r4,7
 1005da0:	18005f1e 	bne	r3,zero,1005f20 <_malloc_r+0x5d8>
 1005da4:	000b883a 	mov	r5,zero
 1005da8:	a4c5883a 	add	r2,r20,r19
 1005dac:	1083ffcc 	andi	r2,r2,4095
 1005db0:	00c40004 	movi	r3,4096
 1005db4:	1887c83a 	sub	r3,r3,r2
 1005db8:	28e7883a 	add	r19,r5,r3
 1005dbc:	9009883a 	mov	r4,r18
 1005dc0:	980b883a 	mov	r5,r19
 1005dc4:	10063100 	call	1006310 <_sbrk_r>
 1005dc8:	1007883a 	mov	r3,r2
 1005dcc:	00bfffc4 	movi	r2,-1
 1005dd0:	18807a26 	beq	r3,r2,1005fbc <_malloc_r+0x674>
 1005dd4:	1d05c83a 	sub	r2,r3,r20
 1005dd8:	9885883a 	add	r2,r19,r2
 1005ddc:	10c00054 	ori	r3,r2,1
 1005de0:	b8800017 	ldw	r2,0(r23)
 1005de4:	a021883a 	mov	r16,r20
 1005de8:	a0c00115 	stw	r3,4(r20)
 1005dec:	9885883a 	add	r2,r19,r2
 1005df0:	b8800015 	stw	r2,0(r23)
 1005df4:	e5000215 	stw	r20,8(fp)
 1005df8:	b7003626 	beq	r22,fp,1005ed4 <_malloc_r+0x58c>
 1005dfc:	018003c4 	movi	r6,15
 1005e00:	35404b36 	bltu	r6,r21,1005f30 <_malloc_r+0x5e8>
 1005e04:	00800044 	movi	r2,1
 1005e08:	a0800115 	stw	r2,4(r20)
 1005e0c:	003fcd06 	br	1005d44 <_malloc_r+0x3fc>
 1005e10:	2808d27a 	srli	r4,r5,9
 1005e14:	2000371e 	bne	r4,zero,1005ef4 <_malloc_r+0x5ac>
 1005e18:	2808d0fa 	srli	r4,r5,3
 1005e1c:	200690fa 	slli	r3,r4,3
 1005e20:	1ad1883a 	add	r8,r3,r11
 1005e24:	41800217 	ldw	r6,8(r8)
 1005e28:	41805b26 	beq	r8,r6,1005f98 <_malloc_r+0x650>
 1005e2c:	30800117 	ldw	r2,4(r6)
 1005e30:	00ffff04 	movi	r3,-4
 1005e34:	10c4703a 	and	r2,r2,r3
 1005e38:	2880022e 	bgeu	r5,r2,1005e44 <_malloc_r+0x4fc>
 1005e3c:	31800217 	ldw	r6,8(r6)
 1005e40:	41bffa1e 	bne	r8,r6,1005e2c <_malloc_r+0x4e4>
 1005e44:	32000317 	ldw	r8,12(r6)
 1005e48:	39c00117 	ldw	r7,4(r7)
 1005e4c:	82000315 	stw	r8,12(r16)
 1005e50:	81800215 	stw	r6,8(r16)
 1005e54:	07004074 	movhi	fp,257
 1005e58:	e716dc04 	addi	fp,fp,23408
 1005e5c:	34000315 	stw	r16,12(r6)
 1005e60:	44000215 	stw	r16,8(r8)
 1005e64:	003f3e06 	br	1005b60 <_malloc_r+0x218>
 1005e68:	63000044 	addi	r12,r12,1
 1005e6c:	608000cc 	andi	r2,r12,3
 1005e70:	10005d26 	beq	r2,zero,1005fe8 <_malloc_r+0x6a0>
 1005e74:	18c00204 	addi	r3,r3,8
 1005e78:	003f5106 	br	1005bc0 <_malloc_r+0x278>
 1005e7c:	8089883a 	add	r4,r16,r2
 1005e80:	003f6d06 	br	1005c38 <_malloc_r+0x2f0>
 1005e84:	00805504 	movi	r2,340
 1005e88:	10c02036 	bltu	r2,r3,1005f0c <_malloc_r+0x5c4>
 1005e8c:	8804d3fa 	srli	r2,r17,15
 1005e90:	11801dc4 	addi	r6,r2,119
 1005e94:	300490fa 	slli	r2,r6,3
 1005e98:	003ed806 	br	10059fc <_malloc_r+0xb4>
 1005e9c:	48c000c4 	addi	r3,r9,3
 1005ea0:	003f3106 	br	1005b68 <_malloc_r+0x220>
 1005ea4:	05c040b4 	movhi	r23,258
 1005ea8:	bde4e504 	addi	r23,r23,-27756
 1005eac:	b8800017 	ldw	r2,0(r23)
 1005eb0:	988d883a 	add	r6,r19,r2
 1005eb4:	b9800015 	stw	r6,0(r23)
 1005eb8:	293fb21e 	bne	r5,r4,1005d84 <_malloc_r+0x43c>
 1005ebc:	2083ffcc 	andi	r2,r4,4095
 1005ec0:	103fb01e 	bne	r2,zero,1005d84 <_malloc_r+0x43c>
 1005ec4:	e4000217 	ldw	r16,8(fp)
 1005ec8:	9d45883a 	add	r2,r19,r21
 1005ecc:	10800054 	ori	r2,r2,1
 1005ed0:	80800115 	stw	r2,4(r16)
 1005ed4:	b8c00017 	ldw	r3,0(r23)
 1005ed8:	d0a7f917 	ldw	r2,-24604(gp)
 1005edc:	10c0012e 	bgeu	r2,r3,1005ee4 <_malloc_r+0x59c>
 1005ee0:	d0e7f915 	stw	r3,-24604(gp)
 1005ee4:	d0a7fa17 	ldw	r2,-24600(gp)
 1005ee8:	10ff962e 	bgeu	r2,r3,1005d44 <_malloc_r+0x3fc>
 1005eec:	d0e7fa15 	stw	r3,-24600(gp)
 1005ef0:	003f9406 	br	1005d44 <_malloc_r+0x3fc>
 1005ef4:	00800104 	movi	r2,4
 1005ef8:	11001e36 	bltu	r2,r4,1005f74 <_malloc_r+0x62c>
 1005efc:	2804d1ba 	srli	r2,r5,6
 1005f00:	11000e04 	addi	r4,r2,56
 1005f04:	200690fa 	slli	r3,r4,3
 1005f08:	003fc506 	br	1005e20 <_malloc_r+0x4d8>
 1005f0c:	00815504 	movi	r2,1364
 1005f10:	10c01d2e 	bgeu	r2,r3,1005f88 <_malloc_r+0x640>
 1005f14:	01801f84 	movi	r6,126
 1005f18:	0080fc04 	movi	r2,1008
 1005f1c:	003eb706 	br	10059fc <_malloc_r+0xb4>
 1005f20:	00800204 	movi	r2,8
 1005f24:	10cbc83a 	sub	r5,r2,r3
 1005f28:	2169883a 	add	r20,r4,r5
 1005f2c:	003f9e06 	br	1005da8 <_malloc_r+0x460>
 1005f30:	00bffe04 	movi	r2,-8
 1005f34:	a93ffd04 	addi	r4,r21,-12
 1005f38:	2088703a 	and	r4,r4,r2
 1005f3c:	b10b883a 	add	r5,r22,r4
 1005f40:	00c00144 	movi	r3,5
 1005f44:	28c00215 	stw	r3,8(r5)
 1005f48:	28c00115 	stw	r3,4(r5)
 1005f4c:	b0800117 	ldw	r2,4(r22)
 1005f50:	1080004c 	andi	r2,r2,1
 1005f54:	2084b03a 	or	r2,r4,r2
 1005f58:	b0800115 	stw	r2,4(r22)
 1005f5c:	313fdd2e 	bgeu	r6,r4,1005ed4 <_malloc_r+0x58c>
 1005f60:	b1400204 	addi	r5,r22,8
 1005f64:	9009883a 	mov	r4,r18
 1005f68:	100a5700 	call	100a570 <_free_r>
 1005f6c:	e4000217 	ldw	r16,8(fp)
 1005f70:	003fd806 	br	1005ed4 <_malloc_r+0x58c>
 1005f74:	00800504 	movi	r2,20
 1005f78:	11001536 	bltu	r2,r4,1005fd0 <_malloc_r+0x688>
 1005f7c:	210016c4 	addi	r4,r4,91
 1005f80:	200690fa 	slli	r3,r4,3
 1005f84:	003fa606 	br	1005e20 <_malloc_r+0x4d8>
 1005f88:	8804d4ba 	srli	r2,r17,18
 1005f8c:	11801f04 	addi	r6,r2,124
 1005f90:	300490fa 	slli	r2,r6,3
 1005f94:	003e9906 	br	10059fc <_malloc_r+0xb4>
 1005f98:	2009d0ba 	srai	r4,r4,2
 1005f9c:	01404074 	movhi	r5,257
 1005fa0:	2956dc04 	addi	r5,r5,23408
 1005fa4:	00c00044 	movi	r3,1
 1005fa8:	28800117 	ldw	r2,4(r5)
 1005fac:	1906983a 	sll	r3,r3,r4
 1005fb0:	10c4b03a 	or	r2,r2,r3
 1005fb4:	28800115 	stw	r2,4(r5)
 1005fb8:	003fa306 	br	1005e48 <_malloc_r+0x500>
 1005fbc:	0027883a 	mov	r19,zero
 1005fc0:	00c00044 	movi	r3,1
 1005fc4:	003f8606 	br	1005de0 <_malloc_r+0x498>
 1005fc8:	d1200e15 	stw	r4,-32712(gp)
 1005fcc:	003f7306 	br	1005d9c <_malloc_r+0x454>
 1005fd0:	00801504 	movi	r2,84
 1005fd4:	11001936 	bltu	r2,r4,100603c <_malloc_r+0x6f4>
 1005fd8:	2804d33a 	srli	r2,r5,12
 1005fdc:	11001b84 	addi	r4,r2,110
 1005fe0:	200690fa 	slli	r3,r4,3
 1005fe4:	003f8e06 	br	1005e20 <_malloc_r+0x4d8>
 1005fe8:	480b883a 	mov	r5,r9
 1005fec:	6807883a 	mov	r3,r13
 1005ff0:	288000cc 	andi	r2,r5,3
 1005ff4:	18fffe04 	addi	r3,r3,-8
 1005ff8:	297fffc4 	addi	r5,r5,-1
 1005ffc:	10001526 	beq	r2,zero,1006054 <_malloc_r+0x70c>
 1006000:	18800217 	ldw	r2,8(r3)
 1006004:	10fffa26 	beq	r2,r3,1005ff0 <_malloc_r+0x6a8>
 1006008:	2109883a 	add	r4,r4,r4
 100600c:	393f1e36 	bltu	r7,r4,1005c88 <_malloc_r+0x340>
 1006010:	203f1d26 	beq	r4,zero,1005c88 <_malloc_r+0x340>
 1006014:	21c4703a 	and	r2,r4,r7
 1006018:	10000226 	beq	r2,zero,1006024 <_malloc_r+0x6dc>
 100601c:	6013883a 	mov	r9,r12
 1006020:	003ee106 	br	1005ba8 <_malloc_r+0x260>
 1006024:	2109883a 	add	r4,r4,r4
 1006028:	3904703a 	and	r2,r7,r4
 100602c:	63000104 	addi	r12,r12,4
 1006030:	103ffc26 	beq	r2,zero,1006024 <_malloc_r+0x6dc>
 1006034:	6013883a 	mov	r9,r12
 1006038:	003edb06 	br	1005ba8 <_malloc_r+0x260>
 100603c:	00805504 	movi	r2,340
 1006040:	11000836 	bltu	r2,r4,1006064 <_malloc_r+0x71c>
 1006044:	2804d3fa 	srli	r2,r5,15
 1006048:	11001dc4 	addi	r4,r2,119
 100604c:	200690fa 	slli	r3,r4,3
 1006050:	003f7306 	br	1005e20 <_malloc_r+0x4d8>
 1006054:	0104303a 	nor	r2,zero,r4
 1006058:	388e703a 	and	r7,r7,r2
 100605c:	e1c00115 	stw	r7,4(fp)
 1006060:	003fe906 	br	1006008 <_malloc_r+0x6c0>
 1006064:	00815504 	movi	r2,1364
 1006068:	1100032e 	bgeu	r2,r4,1006078 <_malloc_r+0x730>
 100606c:	01001f84 	movi	r4,126
 1006070:	00c0fc04 	movi	r3,1008
 1006074:	003f6a06 	br	1005e20 <_malloc_r+0x4d8>
 1006078:	2804d4ba 	srli	r2,r5,18
 100607c:	11001f04 	addi	r4,r2,124
 1006080:	200690fa 	slli	r3,r4,3
 1006084:	003f6606 	br	1005e20 <_malloc_r+0x4d8>

01006088 <memcpy>:
 1006088:	01c003c4 	movi	r7,15
 100608c:	2007883a 	mov	r3,r4
 1006090:	3980032e 	bgeu	r7,r6,10060a0 <memcpy+0x18>
 1006094:	2904b03a 	or	r2,r5,r4
 1006098:	108000cc 	andi	r2,r2,3
 100609c:	10000926 	beq	r2,zero,10060c4 <memcpy+0x3c>
 10060a0:	30000626 	beq	r6,zero,10060bc <memcpy+0x34>
 10060a4:	30cd883a 	add	r6,r6,r3
 10060a8:	28800003 	ldbu	r2,0(r5)
 10060ac:	29400044 	addi	r5,r5,1
 10060b0:	18800005 	stb	r2,0(r3)
 10060b4:	18c00044 	addi	r3,r3,1
 10060b8:	30fffb1e 	bne	r6,r3,10060a8 <memcpy+0x20>
 10060bc:	2005883a 	mov	r2,r4
 10060c0:	f800283a 	ret
 10060c4:	3811883a 	mov	r8,r7
 10060c8:	200f883a 	mov	r7,r4
 10060cc:	28c00017 	ldw	r3,0(r5)
 10060d0:	31bffc04 	addi	r6,r6,-16
 10060d4:	38c00015 	stw	r3,0(r7)
 10060d8:	28800117 	ldw	r2,4(r5)
 10060dc:	38800115 	stw	r2,4(r7)
 10060e0:	28c00217 	ldw	r3,8(r5)
 10060e4:	38c00215 	stw	r3,8(r7)
 10060e8:	28800317 	ldw	r2,12(r5)
 10060ec:	29400404 	addi	r5,r5,16
 10060f0:	38800315 	stw	r2,12(r7)
 10060f4:	39c00404 	addi	r7,r7,16
 10060f8:	41bff436 	bltu	r8,r6,10060cc <memcpy+0x44>
 10060fc:	008000c4 	movi	r2,3
 1006100:	1180072e 	bgeu	r2,r6,1006120 <memcpy+0x98>
 1006104:	1007883a 	mov	r3,r2
 1006108:	28800017 	ldw	r2,0(r5)
 100610c:	31bfff04 	addi	r6,r6,-4
 1006110:	29400104 	addi	r5,r5,4
 1006114:	38800015 	stw	r2,0(r7)
 1006118:	39c00104 	addi	r7,r7,4
 100611c:	19bffa36 	bltu	r3,r6,1006108 <memcpy+0x80>
 1006120:	3807883a 	mov	r3,r7
 1006124:	003fde06 	br	10060a0 <memcpy+0x18>

01006128 <memset>:
 1006128:	008000c4 	movi	r2,3
 100612c:	29403fcc 	andi	r5,r5,255
 1006130:	2007883a 	mov	r3,r4
 1006134:	1180022e 	bgeu	r2,r6,1006140 <memset+0x18>
 1006138:	2084703a 	and	r2,r4,r2
 100613c:	10000826 	beq	r2,zero,1006160 <memset+0x38>
 1006140:	30000526 	beq	r6,zero,1006158 <memset+0x30>
 1006144:	2805883a 	mov	r2,r5
 1006148:	30cd883a 	add	r6,r6,r3
 100614c:	18800005 	stb	r2,0(r3)
 1006150:	18c00044 	addi	r3,r3,1
 1006154:	19bffd1e 	bne	r3,r6,100614c <memset+0x24>
 1006158:	2005883a 	mov	r2,r4
 100615c:	f800283a 	ret
 1006160:	2804923a 	slli	r2,r5,8
 1006164:	020003c4 	movi	r8,15
 1006168:	200f883a 	mov	r7,r4
 100616c:	2884b03a 	or	r2,r5,r2
 1006170:	1006943a 	slli	r3,r2,16
 1006174:	10c6b03a 	or	r3,r2,r3
 1006178:	41800a2e 	bgeu	r8,r6,10061a4 <memset+0x7c>
 100617c:	4005883a 	mov	r2,r8
 1006180:	31bffc04 	addi	r6,r6,-16
 1006184:	38c00015 	stw	r3,0(r7)
 1006188:	38c00115 	stw	r3,4(r7)
 100618c:	38c00215 	stw	r3,8(r7)
 1006190:	38c00315 	stw	r3,12(r7)
 1006194:	39c00404 	addi	r7,r7,16
 1006198:	11bff936 	bltu	r2,r6,1006180 <memset+0x58>
 100619c:	008000c4 	movi	r2,3
 10061a0:	1180052e 	bgeu	r2,r6,10061b8 <memset+0x90>
 10061a4:	31bfff04 	addi	r6,r6,-4
 10061a8:	008000c4 	movi	r2,3
 10061ac:	38c00015 	stw	r3,0(r7)
 10061b0:	39c00104 	addi	r7,r7,4
 10061b4:	11bffb36 	bltu	r2,r6,10061a4 <memset+0x7c>
 10061b8:	3807883a 	mov	r3,r7
 10061bc:	003fe006 	br	1006140 <memset+0x18>

010061c0 <printf>:
 10061c0:	defffb04 	addi	sp,sp,-20
 10061c4:	dfc00115 	stw	ra,4(sp)
 10061c8:	d9400215 	stw	r5,8(sp)
 10061cc:	d9800315 	stw	r6,12(sp)
 10061d0:	d9c00415 	stw	r7,16(sp)
 10061d4:	00804074 	movhi	r2,257
 10061d8:	109ce904 	addi	r2,r2,29604
 10061dc:	10c00017 	ldw	r3,0(r2)
 10061e0:	200b883a 	mov	r5,r4
 10061e4:	d8800204 	addi	r2,sp,8
 10061e8:	19000217 	ldw	r4,8(r3)
 10061ec:	100d883a 	mov	r6,r2
 10061f0:	d8800015 	stw	r2,0(sp)
 10061f4:	100845c0 	call	100845c <__vfprintf_internal>
 10061f8:	dfc00117 	ldw	ra,4(sp)
 10061fc:	dec00504 	addi	sp,sp,20
 1006200:	f800283a 	ret

01006204 <_printf_r>:
 1006204:	defffc04 	addi	sp,sp,-16
 1006208:	dfc00115 	stw	ra,4(sp)
 100620c:	d9800215 	stw	r6,8(sp)
 1006210:	d9c00315 	stw	r7,12(sp)
 1006214:	280d883a 	mov	r6,r5
 1006218:	21400217 	ldw	r5,8(r4)
 100621c:	d8c00204 	addi	r3,sp,8
 1006220:	180f883a 	mov	r7,r3
 1006224:	d8c00015 	stw	r3,0(sp)
 1006228:	10065b00 	call	10065b0 <___vfprintf_internal_r>
 100622c:	dfc00117 	ldw	ra,4(sp)
 1006230:	dec00404 	addi	sp,sp,16
 1006234:	f800283a 	ret

01006238 <putchar>:
 1006238:	00804074 	movhi	r2,257
 100623c:	109ce904 	addi	r2,r2,29604
 1006240:	11800017 	ldw	r6,0(r2)
 1006244:	200b883a 	mov	r5,r4
 1006248:	3009883a 	mov	r4,r6
 100624c:	31800217 	ldw	r6,8(r6)
 1006250:	100c3b41 	jmpi	100c3b4 <_putc_r>

01006254 <_putchar_r>:
 1006254:	21800217 	ldw	r6,8(r4)
 1006258:	100c3b41 	jmpi	100c3b4 <_putc_r>

0100625c <_puts_r>:
 100625c:	defff604 	addi	sp,sp,-40
 1006260:	dc400715 	stw	r17,28(sp)
 1006264:	2023883a 	mov	r17,r4
 1006268:	2809883a 	mov	r4,r5
 100626c:	dfc00915 	stw	ra,36(sp)
 1006270:	dcc00815 	stw	r19,32(sp)
 1006274:	2827883a 	mov	r19,r5
 1006278:	10064c80 	call	10064c8 <strlen>
 100627c:	89400217 	ldw	r5,8(r17)
 1006280:	00c04074 	movhi	r3,257
 1006284:	18d41404 	addi	r3,r3,20560
 1006288:	01c00044 	movi	r7,1
 100628c:	12000044 	addi	r8,r2,1
 1006290:	d8c00515 	stw	r3,20(sp)
 1006294:	d9c00615 	stw	r7,24(sp)
 1006298:	d8c00304 	addi	r3,sp,12
 100629c:	01c00084 	movi	r7,2
 10062a0:	8809883a 	mov	r4,r17
 10062a4:	d80d883a 	mov	r6,sp
 10062a8:	d8c00015 	stw	r3,0(sp)
 10062ac:	dcc00315 	stw	r19,12(sp)
 10062b0:	da000215 	stw	r8,8(sp)
 10062b4:	d9c00115 	stw	r7,4(sp)
 10062b8:	d8800415 	stw	r2,16(sp)
 10062bc:	100a8840 	call	100a884 <__sfvwrite_r>
 10062c0:	00ffffc4 	movi	r3,-1
 10062c4:	10000626 	beq	r2,zero,10062e0 <_puts_r+0x84>
 10062c8:	1805883a 	mov	r2,r3
 10062cc:	dfc00917 	ldw	ra,36(sp)
 10062d0:	dcc00817 	ldw	r19,32(sp)
 10062d4:	dc400717 	ldw	r17,28(sp)
 10062d8:	dec00a04 	addi	sp,sp,40
 10062dc:	f800283a 	ret
 10062e0:	00c00284 	movi	r3,10
 10062e4:	1805883a 	mov	r2,r3
 10062e8:	dfc00917 	ldw	ra,36(sp)
 10062ec:	dcc00817 	ldw	r19,32(sp)
 10062f0:	dc400717 	ldw	r17,28(sp)
 10062f4:	dec00a04 	addi	sp,sp,40
 10062f8:	f800283a 	ret

010062fc <puts>:
 10062fc:	00804074 	movhi	r2,257
 1006300:	109ce904 	addi	r2,r2,29604
 1006304:	200b883a 	mov	r5,r4
 1006308:	11000017 	ldw	r4,0(r2)
 100630c:	100625c1 	jmpi	100625c <_puts_r>

01006310 <_sbrk_r>:
 1006310:	defffd04 	addi	sp,sp,-12
 1006314:	dc000015 	stw	r16,0(sp)
 1006318:	040040b4 	movhi	r16,258
 100631c:	8424d904 	addi	r16,r16,-27804
 1006320:	dc400115 	stw	r17,4(sp)
 1006324:	80000015 	stw	zero,0(r16)
 1006328:	2023883a 	mov	r17,r4
 100632c:	2809883a 	mov	r4,r5
 1006330:	dfc00215 	stw	ra,8(sp)
 1006334:	101169c0 	call	101169c <sbrk>
 1006338:	1007883a 	mov	r3,r2
 100633c:	00bfffc4 	movi	r2,-1
 1006340:	18800626 	beq	r3,r2,100635c <_sbrk_r+0x4c>
 1006344:	1805883a 	mov	r2,r3
 1006348:	dfc00217 	ldw	ra,8(sp)
 100634c:	dc400117 	ldw	r17,4(sp)
 1006350:	dc000017 	ldw	r16,0(sp)
 1006354:	dec00304 	addi	sp,sp,12
 1006358:	f800283a 	ret
 100635c:	80800017 	ldw	r2,0(r16)
 1006360:	103ff826 	beq	r2,zero,1006344 <_sbrk_r+0x34>
 1006364:	88800015 	stw	r2,0(r17)
 1006368:	1805883a 	mov	r2,r3
 100636c:	dfc00217 	ldw	ra,8(sp)
 1006370:	dc400117 	ldw	r17,4(sp)
 1006374:	dc000017 	ldw	r16,0(sp)
 1006378:	dec00304 	addi	sp,sp,12
 100637c:	f800283a 	ret

01006380 <strcmp>:
 1006380:	2144b03a 	or	r2,r4,r5
 1006384:	108000cc 	andi	r2,r2,3
 1006388:	10001d1e 	bne	r2,zero,1006400 <strcmp+0x80>
 100638c:	200f883a 	mov	r7,r4
 1006390:	28800017 	ldw	r2,0(r5)
 1006394:	21000017 	ldw	r4,0(r4)
 1006398:	280d883a 	mov	r6,r5
 100639c:	2080161e 	bne	r4,r2,10063f8 <strcmp+0x78>
 10063a0:	023fbff4 	movhi	r8,65279
 10063a4:	423fbfc4 	addi	r8,r8,-257
 10063a8:	2207883a 	add	r3,r4,r8
 10063ac:	01602074 	movhi	r5,32897
 10063b0:	29602004 	addi	r5,r5,-32640
 10063b4:	1946703a 	and	r3,r3,r5
 10063b8:	0104303a 	nor	r2,zero,r4
 10063bc:	10c4703a 	and	r2,r2,r3
 10063c0:	10001c1e 	bne	r2,zero,1006434 <strcmp+0xb4>
 10063c4:	4013883a 	mov	r9,r8
 10063c8:	2811883a 	mov	r8,r5
 10063cc:	00000106 	br	10063d4 <strcmp+0x54>
 10063d0:	1800181e 	bne	r3,zero,1006434 <strcmp+0xb4>
 10063d4:	39c00104 	addi	r7,r7,4
 10063d8:	39000017 	ldw	r4,0(r7)
 10063dc:	31800104 	addi	r6,r6,4
 10063e0:	31400017 	ldw	r5,0(r6)
 10063e4:	2245883a 	add	r2,r4,r9
 10063e8:	1204703a 	and	r2,r2,r8
 10063ec:	0106303a 	nor	r3,zero,r4
 10063f0:	1886703a 	and	r3,r3,r2
 10063f4:	217ff626 	beq	r4,r5,10063d0 <strcmp+0x50>
 10063f8:	3809883a 	mov	r4,r7
 10063fc:	300b883a 	mov	r5,r6
 1006400:	20c00007 	ldb	r3,0(r4)
 1006404:	1800051e 	bne	r3,zero,100641c <strcmp+0x9c>
 1006408:	00000606 	br	1006424 <strcmp+0xa4>
 100640c:	21000044 	addi	r4,r4,1
 1006410:	20c00007 	ldb	r3,0(r4)
 1006414:	29400044 	addi	r5,r5,1
 1006418:	18000226 	beq	r3,zero,1006424 <strcmp+0xa4>
 100641c:	28800007 	ldb	r2,0(r5)
 1006420:	18bffa26 	beq	r3,r2,100640c <strcmp+0x8c>
 1006424:	20c00003 	ldbu	r3,0(r4)
 1006428:	28800003 	ldbu	r2,0(r5)
 100642c:	1885c83a 	sub	r2,r3,r2
 1006430:	f800283a 	ret
 1006434:	0005883a 	mov	r2,zero
 1006438:	f800283a 	ret

0100643c <strcpy>:
 100643c:	2904b03a 	or	r2,r5,r4
 1006440:	108000cc 	andi	r2,r2,3
 1006444:	10000826 	beq	r2,zero,1006468 <strcpy+0x2c>
 1006448:	2007883a 	mov	r3,r4
 100644c:	28800003 	ldbu	r2,0(r5)
 1006450:	29400044 	addi	r5,r5,1
 1006454:	18800005 	stb	r2,0(r3)
 1006458:	18c00044 	addi	r3,r3,1
 100645c:	103ffb1e 	bne	r2,zero,100644c <strcpy+0x10>
 1006460:	2005883a 	mov	r2,r4
 1006464:	f800283a 	ret
 1006468:	29800017 	ldw	r6,0(r5)
 100646c:	023fbff4 	movhi	r8,65279
 1006470:	423fbfc4 	addi	r8,r8,-257
 1006474:	02a02074 	movhi	r10,32897
 1006478:	52a02004 	addi	r10,r10,-32640
 100647c:	3205883a 	add	r2,r6,r8
 1006480:	0186303a 	nor	r3,zero,r6
 1006484:	10c4703a 	and	r2,r2,r3
 1006488:	1284703a 	and	r2,r2,r10
 100648c:	200f883a 	mov	r7,r4
 1006490:	10000b1e 	bne	r2,zero,10064c0 <strcpy+0x84>
 1006494:	4013883a 	mov	r9,r8
 1006498:	5011883a 	mov	r8,r10
 100649c:	39800015 	stw	r6,0(r7)
 10064a0:	29400104 	addi	r5,r5,4
 10064a4:	29800017 	ldw	r6,0(r5)
 10064a8:	39c00104 	addi	r7,r7,4
 10064ac:	3245883a 	add	r2,r6,r9
 10064b0:	0186303a 	nor	r3,zero,r6
 10064b4:	10c4703a 	and	r2,r2,r3
 10064b8:	1204703a 	and	r2,r2,r8
 10064bc:	103ff726 	beq	r2,zero,100649c <strcpy+0x60>
 10064c0:	3807883a 	mov	r3,r7
 10064c4:	003fe106 	br	100644c <strcpy+0x10>

010064c8 <strlen>:
 10064c8:	208000cc 	andi	r2,r4,3
 10064cc:	2011883a 	mov	r8,r4
 10064d0:	1000161e 	bne	r2,zero,100652c <strlen+0x64>
 10064d4:	20c00017 	ldw	r3,0(r4)
 10064d8:	017fbff4 	movhi	r5,65279
 10064dc:	297fbfc4 	addi	r5,r5,-257
 10064e0:	01e02074 	movhi	r7,32897
 10064e4:	39e02004 	addi	r7,r7,-32640
 10064e8:	1945883a 	add	r2,r3,r5
 10064ec:	11c4703a 	and	r2,r2,r7
 10064f0:	00c6303a 	nor	r3,zero,r3
 10064f4:	1886703a 	and	r3,r3,r2
 10064f8:	18000c1e 	bne	r3,zero,100652c <strlen+0x64>
 10064fc:	280d883a 	mov	r6,r5
 1006500:	380b883a 	mov	r5,r7
 1006504:	21000104 	addi	r4,r4,4
 1006508:	20800017 	ldw	r2,0(r4)
 100650c:	1187883a 	add	r3,r2,r6
 1006510:	1946703a 	and	r3,r3,r5
 1006514:	0084303a 	nor	r2,zero,r2
 1006518:	10c4703a 	and	r2,r2,r3
 100651c:	103ff926 	beq	r2,zero,1006504 <strlen+0x3c>
 1006520:	20800007 	ldb	r2,0(r4)
 1006524:	10000326 	beq	r2,zero,1006534 <strlen+0x6c>
 1006528:	21000044 	addi	r4,r4,1
 100652c:	20800007 	ldb	r2,0(r4)
 1006530:	103ffd1e 	bne	r2,zero,1006528 <strlen+0x60>
 1006534:	2205c83a 	sub	r2,r4,r8
 1006538:	f800283a 	ret

0100653c <_vfiprintf_r>:
 100653c:	defffe04 	addi	sp,sp,-8
 1006540:	dfc00115 	stw	ra,4(sp)
 1006544:	d9c00015 	stw	r7,0(sp)
 1006548:	100cff40 	call	100cff4 <___vfiprintf_internal_r>
 100654c:	dfc00117 	ldw	ra,4(sp)
 1006550:	dec00204 	addi	sp,sp,8
 1006554:	f800283a 	ret

01006558 <__sprint_r>:
 1006558:	30800217 	ldw	r2,8(r6)
 100655c:	defffe04 	addi	sp,sp,-8
 1006560:	dc000015 	stw	r16,0(sp)
 1006564:	dfc00115 	stw	ra,4(sp)
 1006568:	3021883a 	mov	r16,r6
 100656c:	0007883a 	mov	r3,zero
 1006570:	1000061e 	bne	r2,zero,100658c <__sprint_r+0x34>
 1006574:	1805883a 	mov	r2,r3
 1006578:	30000115 	stw	zero,4(r6)
 100657c:	dfc00117 	ldw	ra,4(sp)
 1006580:	dc000017 	ldw	r16,0(sp)
 1006584:	dec00204 	addi	sp,sp,8
 1006588:	f800283a 	ret
 100658c:	100a8840 	call	100a884 <__sfvwrite_r>
 1006590:	1007883a 	mov	r3,r2
 1006594:	1805883a 	mov	r2,r3
 1006598:	80000115 	stw	zero,4(r16)
 100659c:	80000215 	stw	zero,8(r16)
 10065a0:	dfc00117 	ldw	ra,4(sp)
 10065a4:	dc000017 	ldw	r16,0(sp)
 10065a8:	dec00204 	addi	sp,sp,8
 10065ac:	f800283a 	ret

010065b0 <___vfprintf_internal_r>:
 10065b0:	defea404 	addi	sp,sp,-1392
 10065b4:	dd815815 	stw	r22,1376(sp)
 10065b8:	dc015215 	stw	r16,1352(sp)
 10065bc:	d9c15115 	stw	r7,1348(sp)
 10065c0:	dfc15b15 	stw	ra,1388(sp)
 10065c4:	df015a15 	stw	fp,1384(sp)
 10065c8:	ddc15915 	stw	r23,1380(sp)
 10065cc:	dd415715 	stw	r21,1372(sp)
 10065d0:	dd015615 	stw	r20,1368(sp)
 10065d4:	dcc15515 	stw	r19,1364(sp)
 10065d8:	dc815415 	stw	r18,1360(sp)
 10065dc:	dc415315 	stw	r17,1356(sp)
 10065e0:	282d883a 	mov	r22,r5
 10065e4:	3021883a 	mov	r16,r6
 10065e8:	d9014f15 	stw	r4,1340(sp)
 10065ec:	100aea80 	call	100aea8 <_localeconv_r>
 10065f0:	10800017 	ldw	r2,0(r2)
 10065f4:	d9c15117 	ldw	r7,1348(sp)
 10065f8:	d8814915 	stw	r2,1316(sp)
 10065fc:	d8814f17 	ldw	r2,1340(sp)
 1006600:	10000226 	beq	r2,zero,100660c <___vfprintf_internal_r+0x5c>
 1006604:	10800e17 	ldw	r2,56(r2)
 1006608:	10020d26 	beq	r2,zero,1006e40 <___vfprintf_internal_r+0x890>
 100660c:	b080030b 	ldhu	r2,12(r22)
 1006610:	1080020c 	andi	r2,r2,8
 1006614:	10020e26 	beq	r2,zero,1006e50 <___vfprintf_internal_r+0x8a0>
 1006618:	b0800417 	ldw	r2,16(r22)
 100661c:	10020c26 	beq	r2,zero,1006e50 <___vfprintf_internal_r+0x8a0>
 1006620:	b200030b 	ldhu	r8,12(r22)
 1006624:	00800284 	movi	r2,10
 1006628:	40c0068c 	andi	r3,r8,26
 100662c:	18802f1e 	bne	r3,r2,10066ec <___vfprintf_internal_r+0x13c>
 1006630:	b080038f 	ldh	r2,14(r22)
 1006634:	10002d16 	blt	r2,zero,10066ec <___vfprintf_internal_r+0x13c>
 1006638:	b240038b 	ldhu	r9,14(r22)
 100663c:	b2800717 	ldw	r10,28(r22)
 1006640:	b2c00917 	ldw	r11,36(r22)
 1006644:	d9014f17 	ldw	r4,1340(sp)
 1006648:	dc402904 	addi	r17,sp,164
 100664c:	d8804004 	addi	r2,sp,256
 1006650:	00c10004 	movi	r3,1024
 1006654:	423fff4c 	andi	r8,r8,65533
 1006658:	800d883a 	mov	r6,r16
 100665c:	880b883a 	mov	r5,r17
 1006660:	da002c0d 	sth	r8,176(sp)
 1006664:	da402c8d 	sth	r9,178(sp)
 1006668:	da803015 	stw	r10,192(sp)
 100666c:	dac03215 	stw	r11,200(sp)
 1006670:	d8802d15 	stw	r2,180(sp)
 1006674:	d8c02e15 	stw	r3,184(sp)
 1006678:	d8802915 	stw	r2,164(sp)
 100667c:	d8c02b15 	stw	r3,172(sp)
 1006680:	d8002f15 	stw	zero,188(sp)
 1006684:	10065b00 	call	10065b0 <___vfprintf_internal_r>
 1006688:	d8814b15 	stw	r2,1324(sp)
 100668c:	10000416 	blt	r2,zero,10066a0 <___vfprintf_internal_r+0xf0>
 1006690:	d9014f17 	ldw	r4,1340(sp)
 1006694:	880b883a 	mov	r5,r17
 1006698:	1009f540 	call	1009f54 <_fflush_r>
 100669c:	1002321e 	bne	r2,zero,1006f68 <___vfprintf_internal_r+0x9b8>
 10066a0:	d8802c0b 	ldhu	r2,176(sp)
 10066a4:	1080100c 	andi	r2,r2,64
 10066a8:	10000326 	beq	r2,zero,10066b8 <___vfprintf_internal_r+0x108>
 10066ac:	b080030b 	ldhu	r2,12(r22)
 10066b0:	10801014 	ori	r2,r2,64
 10066b4:	b080030d 	sth	r2,12(r22)
 10066b8:	d8814b17 	ldw	r2,1324(sp)
 10066bc:	dfc15b17 	ldw	ra,1388(sp)
 10066c0:	df015a17 	ldw	fp,1384(sp)
 10066c4:	ddc15917 	ldw	r23,1380(sp)
 10066c8:	dd815817 	ldw	r22,1376(sp)
 10066cc:	dd415717 	ldw	r21,1372(sp)
 10066d0:	dd015617 	ldw	r20,1368(sp)
 10066d4:	dcc15517 	ldw	r19,1364(sp)
 10066d8:	dc815417 	ldw	r18,1360(sp)
 10066dc:	dc415317 	ldw	r17,1356(sp)
 10066e0:	dc015217 	ldw	r16,1352(sp)
 10066e4:	dec15c04 	addi	sp,sp,1392
 10066e8:	f800283a 	ret
 10066ec:	0005883a 	mov	r2,zero
 10066f0:	0007883a 	mov	r3,zero
 10066f4:	dd401904 	addi	r21,sp,100
 10066f8:	d8814215 	stw	r2,1288(sp)
 10066fc:	802f883a 	mov	r23,r16
 1006700:	d8c14315 	stw	r3,1292(sp)
 1006704:	d8014b15 	stw	zero,1324(sp)
 1006708:	d8014815 	stw	zero,1312(sp)
 100670c:	d8014415 	stw	zero,1296(sp)
 1006710:	d8014715 	stw	zero,1308(sp)
 1006714:	dd400c15 	stw	r21,48(sp)
 1006718:	d8000e15 	stw	zero,56(sp)
 100671c:	d8000d15 	stw	zero,52(sp)
 1006720:	b8800007 	ldb	r2,0(r23)
 1006724:	10001926 	beq	r2,zero,100678c <___vfprintf_internal_r+0x1dc>
 1006728:	00c00944 	movi	r3,37
 100672c:	10c01726 	beq	r2,r3,100678c <___vfprintf_internal_r+0x1dc>
 1006730:	b821883a 	mov	r16,r23
 1006734:	00000106 	br	100673c <___vfprintf_internal_r+0x18c>
 1006738:	10c00326 	beq	r2,r3,1006748 <___vfprintf_internal_r+0x198>
 100673c:	84000044 	addi	r16,r16,1
 1006740:	80800007 	ldb	r2,0(r16)
 1006744:	103ffc1e 	bne	r2,zero,1006738 <___vfprintf_internal_r+0x188>
 1006748:	85e7c83a 	sub	r19,r16,r23
 100674c:	98000e26 	beq	r19,zero,1006788 <___vfprintf_internal_r+0x1d8>
 1006750:	dc800e17 	ldw	r18,56(sp)
 1006754:	dc400d17 	ldw	r17,52(sp)
 1006758:	008001c4 	movi	r2,7
 100675c:	94e5883a 	add	r18,r18,r19
 1006760:	8c400044 	addi	r17,r17,1
 1006764:	adc00015 	stw	r23,0(r21)
 1006768:	dc800e15 	stw	r18,56(sp)
 100676c:	acc00115 	stw	r19,4(r21)
 1006770:	dc400d15 	stw	r17,52(sp)
 1006774:	14428b16 	blt	r2,r17,10071a4 <___vfprintf_internal_r+0xbf4>
 1006778:	ad400204 	addi	r21,r21,8
 100677c:	d9014b17 	ldw	r4,1324(sp)
 1006780:	24c9883a 	add	r4,r4,r19
 1006784:	d9014b15 	stw	r4,1324(sp)
 1006788:	802f883a 	mov	r23,r16
 100678c:	b8800007 	ldb	r2,0(r23)
 1006790:	10013c26 	beq	r2,zero,1006c84 <___vfprintf_internal_r+0x6d4>
 1006794:	bdc00044 	addi	r23,r23,1
 1006798:	d8000405 	stb	zero,16(sp)
 100679c:	b8c00007 	ldb	r3,0(r23)
 10067a0:	04ffffc4 	movi	r19,-1
 10067a4:	d8014c15 	stw	zero,1328(sp)
 10067a8:	d8014a15 	stw	zero,1320(sp)
 10067ac:	d8c14d15 	stw	r3,1332(sp)
 10067b0:	bdc00044 	addi	r23,r23,1
 10067b4:	d9414d17 	ldw	r5,1332(sp)
 10067b8:	00801604 	movi	r2,88
 10067bc:	28fff804 	addi	r3,r5,-32
 10067c0:	10c06036 	bltu	r2,r3,1006944 <___vfprintf_internal_r+0x394>
 10067c4:	18c5883a 	add	r2,r3,r3
 10067c8:	1085883a 	add	r2,r2,r2
 10067cc:	00c04034 	movhi	r3,256
 10067d0:	18d9f804 	addi	r3,r3,26592
 10067d4:	10c5883a 	add	r2,r2,r3
 10067d8:	11000017 	ldw	r4,0(r2)
 10067dc:	2000683a 	jmp	r4
 10067e0:	01007754 	movui	r4,477
 10067e4:	01006944 	movi	r4,421
 10067e8:	01006944 	movi	r4,421
 10067ec:	01007740 	call	100774 <__alt_mem_onchip+0x100774>
 10067f0:	01006944 	movi	r4,421
 10067f4:	01006944 	movi	r4,421
 10067f8:	01006944 	movi	r4,421
 10067fc:	01006944 	movi	r4,421
 1006800:	01006944 	movi	r4,421
 1006804:	01006944 	movi	r4,421
 1006808:	01007520 	cmpeqi	r4,zero,468
 100680c:	01007730 	cmpltui	r4,zero,476
 1006810:	01006944 	movi	r4,421
 1006814:	01007538 	rdprs	r4,zero,468
 1006818:	010077cc 	andi	r4,zero,479
 100681c:	01006944 	movi	r4,421
 1006820:	010077b8 	rdprs	r4,zero,478
 1006824:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006828:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 100682c:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006830:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006834:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006838:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 100683c:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006840:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006844:	01007780 	call	100778 <__alt_mem_onchip+0x100778>
 1006848:	01006944 	movi	r4,421
 100684c:	01006944 	movi	r4,421
 1006850:	01006944 	movi	r4,421
 1006854:	01006944 	movi	r4,421
 1006858:	01006944 	movi	r4,421
 100685c:	01006944 	movi	r4,421
 1006860:	01006944 	movi	r4,421
 1006864:	01006944 	movi	r4,421
 1006868:	01006944 	movi	r4,421
 100686c:	01006944 	movi	r4,421
 1006870:	01006f9c 	xori	r4,zero,446
 1006874:	01007608 	cmpgei	r4,zero,472
 1006878:	01006944 	movi	r4,421
 100687c:	01007608 	cmpgei	r4,zero,472
 1006880:	01006944 	movi	r4,421
 1006884:	01006944 	movi	r4,421
 1006888:	01006944 	movi	r4,421
 100688c:	01006944 	movi	r4,421
 1006890:	0100776c 	andhi	r4,zero,477
 1006894:	01006944 	movi	r4,421
 1006898:	01006944 	movi	r4,421
 100689c:	01007050 	cmplti	r4,zero,449
 10068a0:	01006944 	movi	r4,421
 10068a4:	01006944 	movi	r4,421
 10068a8:	01006944 	movi	r4,421
 10068ac:	01006944 	movi	r4,421
 10068b0:	01006944 	movi	r4,421
 10068b4:	0100709c 	xori	r4,zero,450
 10068b8:	01006944 	movi	r4,421
 10068bc:	01006944 	movi	r4,421
 10068c0:	010076bc 	xorhi	r4,zero,474
 10068c4:	01006944 	movi	r4,421
 10068c8:	01006944 	movi	r4,421
 10068cc:	01006944 	movi	r4,421
 10068d0:	01006944 	movi	r4,421
 10068d4:	01006944 	movi	r4,421
 10068d8:	01006944 	movi	r4,421
 10068dc:	01006944 	movi	r4,421
 10068e0:	01006944 	movi	r4,421
 10068e4:	01006944 	movi	r4,421
 10068e8:	01006944 	movi	r4,421
 10068ec:	01007690 	cmplti	r4,zero,474
 10068f0:	01006fa8 	cmpgeui	r4,zero,446
 10068f4:	01007608 	cmpgei	r4,zero,472
 10068f8:	01007608 	cmpgei	r4,zero,472
 10068fc:	01007608 	cmpgei	r4,zero,472
 1006900:	010075f4 	movhi	r4,471
 1006904:	01006fa8 	cmpgeui	r4,zero,446
 1006908:	01006944 	movi	r4,421
 100690c:	01006944 	movi	r4,421
 1006910:	0100757c 	xorhi	r4,zero,469
 1006914:	01006944 	movi	r4,421
 1006918:	0100754c 	andi	r4,zero,469
 100691c:	0100705c 	xori	r4,zero,449
 1006920:	010075ac 	andhi	r4,zero,470
 1006924:	01007598 	cmpnei	r4,zero,470
 1006928:	01006944 	movi	r4,421
 100692c:	01007828 	cmpgeui	r4,zero,480
 1006930:	01006944 	movi	r4,421
 1006934:	010070a8 	cmpgeui	r4,zero,450
 1006938:	01006944 	movi	r4,421
 100693c:	01006944 	movi	r4,421
 1006940:	01007720 	cmpeqi	r4,zero,476
 1006944:	d9014d17 	ldw	r4,1332(sp)
 1006948:	2000ce26 	beq	r4,zero,1006c84 <___vfprintf_internal_r+0x6d4>
 100694c:	01400044 	movi	r5,1
 1006950:	d9800f04 	addi	r6,sp,60
 1006954:	d9c14015 	stw	r7,1280(sp)
 1006958:	d9414515 	stw	r5,1300(sp)
 100695c:	d9814115 	stw	r6,1284(sp)
 1006960:	280f883a 	mov	r7,r5
 1006964:	d9000f05 	stb	r4,60(sp)
 1006968:	d8000405 	stb	zero,16(sp)
 100696c:	d8014615 	stw	zero,1304(sp)
 1006970:	d8c14c17 	ldw	r3,1328(sp)
 1006974:	1880008c 	andi	r2,r3,2
 1006978:	1005003a 	cmpeq	r2,r2,zero
 100697c:	d8815015 	stw	r2,1344(sp)
 1006980:	1000031e 	bne	r2,zero,1006990 <___vfprintf_internal_r+0x3e0>
 1006984:	d9014517 	ldw	r4,1300(sp)
 1006988:	21000084 	addi	r4,r4,2
 100698c:	d9014515 	stw	r4,1300(sp)
 1006990:	d9414c17 	ldw	r5,1328(sp)
 1006994:	2940210c 	andi	r5,r5,132
 1006998:	d9414e15 	stw	r5,1336(sp)
 100699c:	28002d1e 	bne	r5,zero,1006a54 <___vfprintf_internal_r+0x4a4>
 10069a0:	d9814a17 	ldw	r6,1320(sp)
 10069a4:	d8814517 	ldw	r2,1300(sp)
 10069a8:	30a1c83a 	sub	r16,r6,r2
 10069ac:	0400290e 	bge	zero,r16,1006a54 <___vfprintf_internal_r+0x4a4>
 10069b0:	00800404 	movi	r2,16
 10069b4:	1404580e 	bge	r2,r16,1007b18 <___vfprintf_internal_r+0x1568>
 10069b8:	dc800e17 	ldw	r18,56(sp)
 10069bc:	dc400d17 	ldw	r17,52(sp)
 10069c0:	1027883a 	mov	r19,r2
 10069c4:	07004074 	movhi	fp,257
 10069c8:	e7143084 	addi	fp,fp,20674
 10069cc:	050001c4 	movi	r20,7
 10069d0:	00000306 	br	10069e0 <___vfprintf_internal_r+0x430>
 10069d4:	843ffc04 	addi	r16,r16,-16
 10069d8:	ad400204 	addi	r21,r21,8
 10069dc:	9c00130e 	bge	r19,r16,1006a2c <___vfprintf_internal_r+0x47c>
 10069e0:	94800404 	addi	r18,r18,16
 10069e4:	8c400044 	addi	r17,r17,1
 10069e8:	af000015 	stw	fp,0(r21)
 10069ec:	acc00115 	stw	r19,4(r21)
 10069f0:	dc800e15 	stw	r18,56(sp)
 10069f4:	dc400d15 	stw	r17,52(sp)
 10069f8:	a47ff60e 	bge	r20,r17,10069d4 <___vfprintf_internal_r+0x424>
 10069fc:	d9014f17 	ldw	r4,1340(sp)
 1006a00:	b00b883a 	mov	r5,r22
 1006a04:	d9800c04 	addi	r6,sp,48
 1006a08:	d9c15115 	stw	r7,1348(sp)
 1006a0c:	10065580 	call	1006558 <__sprint_r>
 1006a10:	d9c15117 	ldw	r7,1348(sp)
 1006a14:	10009e1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006a18:	843ffc04 	addi	r16,r16,-16
 1006a1c:	dc800e17 	ldw	r18,56(sp)
 1006a20:	dc400d17 	ldw	r17,52(sp)
 1006a24:	dd401904 	addi	r21,sp,100
 1006a28:	9c3fed16 	blt	r19,r16,10069e0 <___vfprintf_internal_r+0x430>
 1006a2c:	9425883a 	add	r18,r18,r16
 1006a30:	8c400044 	addi	r17,r17,1
 1006a34:	008001c4 	movi	r2,7
 1006a38:	af000015 	stw	fp,0(r21)
 1006a3c:	ac000115 	stw	r16,4(r21)
 1006a40:	dc800e15 	stw	r18,56(sp)
 1006a44:	dc400d15 	stw	r17,52(sp)
 1006a48:	1441f516 	blt	r2,r17,1007220 <___vfprintf_internal_r+0xc70>
 1006a4c:	ad400204 	addi	r21,r21,8
 1006a50:	00000206 	br	1006a5c <___vfprintf_internal_r+0x4ac>
 1006a54:	dc800e17 	ldw	r18,56(sp)
 1006a58:	dc400d17 	ldw	r17,52(sp)
 1006a5c:	d8800407 	ldb	r2,16(sp)
 1006a60:	10000b26 	beq	r2,zero,1006a90 <___vfprintf_internal_r+0x4e0>
 1006a64:	00800044 	movi	r2,1
 1006a68:	94800044 	addi	r18,r18,1
 1006a6c:	8c400044 	addi	r17,r17,1
 1006a70:	a8800115 	stw	r2,4(r21)
 1006a74:	d8c00404 	addi	r3,sp,16
 1006a78:	008001c4 	movi	r2,7
 1006a7c:	a8c00015 	stw	r3,0(r21)
 1006a80:	dc800e15 	stw	r18,56(sp)
 1006a84:	dc400d15 	stw	r17,52(sp)
 1006a88:	1441da16 	blt	r2,r17,10071f4 <___vfprintf_internal_r+0xc44>
 1006a8c:	ad400204 	addi	r21,r21,8
 1006a90:	d9015017 	ldw	r4,1344(sp)
 1006a94:	20000b1e 	bne	r4,zero,1006ac4 <___vfprintf_internal_r+0x514>
 1006a98:	d8800444 	addi	r2,sp,17
 1006a9c:	94800084 	addi	r18,r18,2
 1006aa0:	8c400044 	addi	r17,r17,1
 1006aa4:	a8800015 	stw	r2,0(r21)
 1006aa8:	00c00084 	movi	r3,2
 1006aac:	008001c4 	movi	r2,7
 1006ab0:	a8c00115 	stw	r3,4(r21)
 1006ab4:	dc800e15 	stw	r18,56(sp)
 1006ab8:	dc400d15 	stw	r17,52(sp)
 1006abc:	1441c216 	blt	r2,r17,10071c8 <___vfprintf_internal_r+0xc18>
 1006ac0:	ad400204 	addi	r21,r21,8
 1006ac4:	d9414e17 	ldw	r5,1336(sp)
 1006ac8:	00802004 	movi	r2,128
 1006acc:	2880b126 	beq	r5,r2,1006d94 <___vfprintf_internal_r+0x7e4>
 1006ad0:	d8c14617 	ldw	r3,1304(sp)
 1006ad4:	19e1c83a 	sub	r16,r3,r7
 1006ad8:	0400260e 	bge	zero,r16,1006b74 <___vfprintf_internal_r+0x5c4>
 1006adc:	00800404 	movi	r2,16
 1006ae0:	1403c90e 	bge	r2,r16,1007a08 <___vfprintf_internal_r+0x1458>
 1006ae4:	1027883a 	mov	r19,r2
 1006ae8:	07004074 	movhi	fp,257
 1006aec:	e7142c84 	addi	fp,fp,20658
 1006af0:	050001c4 	movi	r20,7
 1006af4:	00000306 	br	1006b04 <___vfprintf_internal_r+0x554>
 1006af8:	843ffc04 	addi	r16,r16,-16
 1006afc:	ad400204 	addi	r21,r21,8
 1006b00:	9c00130e 	bge	r19,r16,1006b50 <___vfprintf_internal_r+0x5a0>
 1006b04:	94800404 	addi	r18,r18,16
 1006b08:	8c400044 	addi	r17,r17,1
 1006b0c:	af000015 	stw	fp,0(r21)
 1006b10:	acc00115 	stw	r19,4(r21)
 1006b14:	dc800e15 	stw	r18,56(sp)
 1006b18:	dc400d15 	stw	r17,52(sp)
 1006b1c:	a47ff60e 	bge	r20,r17,1006af8 <___vfprintf_internal_r+0x548>
 1006b20:	d9014f17 	ldw	r4,1340(sp)
 1006b24:	b00b883a 	mov	r5,r22
 1006b28:	d9800c04 	addi	r6,sp,48
 1006b2c:	d9c15115 	stw	r7,1348(sp)
 1006b30:	10065580 	call	1006558 <__sprint_r>
 1006b34:	d9c15117 	ldw	r7,1348(sp)
 1006b38:	1000551e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006b3c:	843ffc04 	addi	r16,r16,-16
 1006b40:	dc800e17 	ldw	r18,56(sp)
 1006b44:	dc400d17 	ldw	r17,52(sp)
 1006b48:	dd401904 	addi	r21,sp,100
 1006b4c:	9c3fed16 	blt	r19,r16,1006b04 <___vfprintf_internal_r+0x554>
 1006b50:	9425883a 	add	r18,r18,r16
 1006b54:	8c400044 	addi	r17,r17,1
 1006b58:	008001c4 	movi	r2,7
 1006b5c:	af000015 	stw	fp,0(r21)
 1006b60:	ac000115 	stw	r16,4(r21)
 1006b64:	dc800e15 	stw	r18,56(sp)
 1006b68:	dc400d15 	stw	r17,52(sp)
 1006b6c:	14418216 	blt	r2,r17,1007178 <___vfprintf_internal_r+0xbc8>
 1006b70:	ad400204 	addi	r21,r21,8
 1006b74:	d9014c17 	ldw	r4,1328(sp)
 1006b78:	2080400c 	andi	r2,r4,256
 1006b7c:	10004a1e 	bne	r2,zero,1006ca8 <___vfprintf_internal_r+0x6f8>
 1006b80:	d9414117 	ldw	r5,1284(sp)
 1006b84:	91e5883a 	add	r18,r18,r7
 1006b88:	8c400044 	addi	r17,r17,1
 1006b8c:	008001c4 	movi	r2,7
 1006b90:	a9400015 	stw	r5,0(r21)
 1006b94:	a9c00115 	stw	r7,4(r21)
 1006b98:	dc800e15 	stw	r18,56(sp)
 1006b9c:	dc400d15 	stw	r17,52(sp)
 1006ba0:	14416716 	blt	r2,r17,1007140 <___vfprintf_internal_r+0xb90>
 1006ba4:	a8c00204 	addi	r3,r21,8
 1006ba8:	d9814c17 	ldw	r6,1328(sp)
 1006bac:	3080010c 	andi	r2,r6,4
 1006bb0:	10002826 	beq	r2,zero,1006c54 <___vfprintf_internal_r+0x6a4>
 1006bb4:	d8814a17 	ldw	r2,1320(sp)
 1006bb8:	d9014517 	ldw	r4,1300(sp)
 1006bbc:	1121c83a 	sub	r16,r2,r4
 1006bc0:	0400240e 	bge	zero,r16,1006c54 <___vfprintf_internal_r+0x6a4>
 1006bc4:	00800404 	movi	r2,16
 1006bc8:	14044f0e 	bge	r2,r16,1007d08 <___vfprintf_internal_r+0x1758>
 1006bcc:	dc400d17 	ldw	r17,52(sp)
 1006bd0:	1027883a 	mov	r19,r2
 1006bd4:	07004074 	movhi	fp,257
 1006bd8:	e7143084 	addi	fp,fp,20674
 1006bdc:	050001c4 	movi	r20,7
 1006be0:	00000306 	br	1006bf0 <___vfprintf_internal_r+0x640>
 1006be4:	843ffc04 	addi	r16,r16,-16
 1006be8:	18c00204 	addi	r3,r3,8
 1006bec:	9c00110e 	bge	r19,r16,1006c34 <___vfprintf_internal_r+0x684>
 1006bf0:	94800404 	addi	r18,r18,16
 1006bf4:	8c400044 	addi	r17,r17,1
 1006bf8:	1f000015 	stw	fp,0(r3)
 1006bfc:	1cc00115 	stw	r19,4(r3)
 1006c00:	dc800e15 	stw	r18,56(sp)
 1006c04:	dc400d15 	stw	r17,52(sp)
 1006c08:	a47ff60e 	bge	r20,r17,1006be4 <___vfprintf_internal_r+0x634>
 1006c0c:	d9014f17 	ldw	r4,1340(sp)
 1006c10:	b00b883a 	mov	r5,r22
 1006c14:	d9800c04 	addi	r6,sp,48
 1006c18:	10065580 	call	1006558 <__sprint_r>
 1006c1c:	10001c1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006c20:	843ffc04 	addi	r16,r16,-16
 1006c24:	dc800e17 	ldw	r18,56(sp)
 1006c28:	dc400d17 	ldw	r17,52(sp)
 1006c2c:	d8c01904 	addi	r3,sp,100
 1006c30:	9c3fef16 	blt	r19,r16,1006bf0 <___vfprintf_internal_r+0x640>
 1006c34:	9425883a 	add	r18,r18,r16
 1006c38:	8c400044 	addi	r17,r17,1
 1006c3c:	008001c4 	movi	r2,7
 1006c40:	1f000015 	stw	fp,0(r3)
 1006c44:	1c000115 	stw	r16,4(r3)
 1006c48:	dc800e15 	stw	r18,56(sp)
 1006c4c:	dc400d15 	stw	r17,52(sp)
 1006c50:	1440cb16 	blt	r2,r17,1006f80 <___vfprintf_internal_r+0x9d0>
 1006c54:	d8814a17 	ldw	r2,1320(sp)
 1006c58:	d9414517 	ldw	r5,1300(sp)
 1006c5c:	1140010e 	bge	r2,r5,1006c64 <___vfprintf_internal_r+0x6b4>
 1006c60:	2805883a 	mov	r2,r5
 1006c64:	d9814b17 	ldw	r6,1324(sp)
 1006c68:	308d883a 	add	r6,r6,r2
 1006c6c:	d9814b15 	stw	r6,1324(sp)
 1006c70:	90013b1e 	bne	r18,zero,1007160 <___vfprintf_internal_r+0xbb0>
 1006c74:	d9c14017 	ldw	r7,1280(sp)
 1006c78:	dd401904 	addi	r21,sp,100
 1006c7c:	d8000d15 	stw	zero,52(sp)
 1006c80:	003ea706 	br	1006720 <___vfprintf_internal_r+0x170>
 1006c84:	d8800e17 	ldw	r2,56(sp)
 1006c88:	10053f1e 	bne	r2,zero,1008188 <___vfprintf_internal_r+0x1bd8>
 1006c8c:	d8000d15 	stw	zero,52(sp)
 1006c90:	b080030b 	ldhu	r2,12(r22)
 1006c94:	1080100c 	andi	r2,r2,64
 1006c98:	103e8726 	beq	r2,zero,10066b8 <___vfprintf_internal_r+0x108>
 1006c9c:	00bfffc4 	movi	r2,-1
 1006ca0:	d8814b15 	stw	r2,1324(sp)
 1006ca4:	003e8406 	br	10066b8 <___vfprintf_internal_r+0x108>
 1006ca8:	d9814d17 	ldw	r6,1332(sp)
 1006cac:	00801944 	movi	r2,101
 1006cb0:	11806e16 	blt	r2,r6,1006e6c <___vfprintf_internal_r+0x8bc>
 1006cb4:	d9414717 	ldw	r5,1308(sp)
 1006cb8:	00c00044 	movi	r3,1
 1006cbc:	1943430e 	bge	r3,r5,10079cc <___vfprintf_internal_r+0x141c>
 1006cc0:	d8814117 	ldw	r2,1284(sp)
 1006cc4:	94800044 	addi	r18,r18,1
 1006cc8:	8c400044 	addi	r17,r17,1
 1006ccc:	a8800015 	stw	r2,0(r21)
 1006cd0:	008001c4 	movi	r2,7
 1006cd4:	a8c00115 	stw	r3,4(r21)
 1006cd8:	dc800e15 	stw	r18,56(sp)
 1006cdc:	dc400d15 	stw	r17,52(sp)
 1006ce0:	1441ca16 	blt	r2,r17,100740c <___vfprintf_internal_r+0xe5c>
 1006ce4:	a8c00204 	addi	r3,r21,8
 1006ce8:	d9014917 	ldw	r4,1316(sp)
 1006cec:	00800044 	movi	r2,1
 1006cf0:	94800044 	addi	r18,r18,1
 1006cf4:	8c400044 	addi	r17,r17,1
 1006cf8:	18800115 	stw	r2,4(r3)
 1006cfc:	008001c4 	movi	r2,7
 1006d00:	19000015 	stw	r4,0(r3)
 1006d04:	dc800e15 	stw	r18,56(sp)
 1006d08:	dc400d15 	stw	r17,52(sp)
 1006d0c:	1441b616 	blt	r2,r17,10073e8 <___vfprintf_internal_r+0xe38>
 1006d10:	1cc00204 	addi	r19,r3,8
 1006d14:	d9014217 	ldw	r4,1288(sp)
 1006d18:	d9414317 	ldw	r5,1292(sp)
 1006d1c:	000d883a 	mov	r6,zero
 1006d20:	000f883a 	mov	r7,zero
 1006d24:	100fd1c0 	call	100fd1c <__nedf2>
 1006d28:	10017426 	beq	r2,zero,10072fc <___vfprintf_internal_r+0xd4c>
 1006d2c:	d9414717 	ldw	r5,1308(sp)
 1006d30:	d9814117 	ldw	r6,1284(sp)
 1006d34:	8c400044 	addi	r17,r17,1
 1006d38:	2c85883a 	add	r2,r5,r18
 1006d3c:	14bfffc4 	addi	r18,r2,-1
 1006d40:	28bfffc4 	addi	r2,r5,-1
 1006d44:	30c00044 	addi	r3,r6,1
 1006d48:	98800115 	stw	r2,4(r19)
 1006d4c:	008001c4 	movi	r2,7
 1006d50:	98c00015 	stw	r3,0(r19)
 1006d54:	dc800e15 	stw	r18,56(sp)
 1006d58:	dc400d15 	stw	r17,52(sp)
 1006d5c:	14418e16 	blt	r2,r17,1007398 <___vfprintf_internal_r+0xde8>
 1006d60:	9cc00204 	addi	r19,r19,8
 1006d64:	d9414817 	ldw	r5,1312(sp)
 1006d68:	d8800804 	addi	r2,sp,32
 1006d6c:	8c400044 	addi	r17,r17,1
 1006d70:	9165883a 	add	r18,r18,r5
 1006d74:	98800015 	stw	r2,0(r19)
 1006d78:	008001c4 	movi	r2,7
 1006d7c:	99400115 	stw	r5,4(r19)
 1006d80:	dc800e15 	stw	r18,56(sp)
 1006d84:	dc400d15 	stw	r17,52(sp)
 1006d88:	1440ed16 	blt	r2,r17,1007140 <___vfprintf_internal_r+0xb90>
 1006d8c:	98c00204 	addi	r3,r19,8
 1006d90:	003f8506 	br	1006ba8 <___vfprintf_internal_r+0x5f8>
 1006d94:	d9814a17 	ldw	r6,1320(sp)
 1006d98:	d8814517 	ldw	r2,1300(sp)
 1006d9c:	30a1c83a 	sub	r16,r6,r2
 1006da0:	043f4b0e 	bge	zero,r16,1006ad0 <___vfprintf_internal_r+0x520>
 1006da4:	00800404 	movi	r2,16
 1006da8:	1404340e 	bge	r2,r16,1007e7c <___vfprintf_internal_r+0x18cc>
 1006dac:	1027883a 	mov	r19,r2
 1006db0:	07004074 	movhi	fp,257
 1006db4:	e7142c84 	addi	fp,fp,20658
 1006db8:	050001c4 	movi	r20,7
 1006dbc:	00000306 	br	1006dcc <___vfprintf_internal_r+0x81c>
 1006dc0:	843ffc04 	addi	r16,r16,-16
 1006dc4:	ad400204 	addi	r21,r21,8
 1006dc8:	9c00130e 	bge	r19,r16,1006e18 <___vfprintf_internal_r+0x868>
 1006dcc:	94800404 	addi	r18,r18,16
 1006dd0:	8c400044 	addi	r17,r17,1
 1006dd4:	af000015 	stw	fp,0(r21)
 1006dd8:	acc00115 	stw	r19,4(r21)
 1006ddc:	dc800e15 	stw	r18,56(sp)
 1006de0:	dc400d15 	stw	r17,52(sp)
 1006de4:	a47ff60e 	bge	r20,r17,1006dc0 <___vfprintf_internal_r+0x810>
 1006de8:	d9014f17 	ldw	r4,1340(sp)
 1006dec:	b00b883a 	mov	r5,r22
 1006df0:	d9800c04 	addi	r6,sp,48
 1006df4:	d9c15115 	stw	r7,1348(sp)
 1006df8:	10065580 	call	1006558 <__sprint_r>
 1006dfc:	d9c15117 	ldw	r7,1348(sp)
 1006e00:	103fa31e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006e04:	843ffc04 	addi	r16,r16,-16
 1006e08:	dc800e17 	ldw	r18,56(sp)
 1006e0c:	dc400d17 	ldw	r17,52(sp)
 1006e10:	dd401904 	addi	r21,sp,100
 1006e14:	9c3fed16 	blt	r19,r16,1006dcc <___vfprintf_internal_r+0x81c>
 1006e18:	9425883a 	add	r18,r18,r16
 1006e1c:	8c400044 	addi	r17,r17,1
 1006e20:	008001c4 	movi	r2,7
 1006e24:	af000015 	stw	fp,0(r21)
 1006e28:	ac000115 	stw	r16,4(r21)
 1006e2c:	dc800e15 	stw	r18,56(sp)
 1006e30:	dc400d15 	stw	r17,52(sp)
 1006e34:	14416116 	blt	r2,r17,10073bc <___vfprintf_internal_r+0xe0c>
 1006e38:	ad400204 	addi	r21,r21,8
 1006e3c:	003f2406 	br	1006ad0 <___vfprintf_internal_r+0x520>
 1006e40:	d9014f17 	ldw	r4,1340(sp)
 1006e44:	100a1ec0 	call	100a1ec <__sinit>
 1006e48:	d9c15117 	ldw	r7,1348(sp)
 1006e4c:	003def06 	br	100660c <___vfprintf_internal_r+0x5c>
 1006e50:	d9014f17 	ldw	r4,1340(sp)
 1006e54:	b00b883a 	mov	r5,r22
 1006e58:	d9c15115 	stw	r7,1348(sp)
 1006e5c:	10084800 	call	1008480 <__swsetup_r>
 1006e60:	d9c15117 	ldw	r7,1348(sp)
 1006e64:	103dee26 	beq	r2,zero,1006620 <___vfprintf_internal_r+0x70>
 1006e68:	003f8c06 	br	1006c9c <___vfprintf_internal_r+0x6ec>
 1006e6c:	d9014217 	ldw	r4,1288(sp)
 1006e70:	d9414317 	ldw	r5,1292(sp)
 1006e74:	000d883a 	mov	r6,zero
 1006e78:	000f883a 	mov	r7,zero
 1006e7c:	100fc940 	call	100fc94 <__eqdf2>
 1006e80:	1000f21e 	bne	r2,zero,100724c <___vfprintf_internal_r+0xc9c>
 1006e84:	00804074 	movhi	r2,257
 1006e88:	10942c04 	addi	r2,r2,20656
 1006e8c:	94800044 	addi	r18,r18,1
 1006e90:	8c400044 	addi	r17,r17,1
 1006e94:	a8800015 	stw	r2,0(r21)
 1006e98:	00c00044 	movi	r3,1
 1006e9c:	008001c4 	movi	r2,7
 1006ea0:	a8c00115 	stw	r3,4(r21)
 1006ea4:	dc800e15 	stw	r18,56(sp)
 1006ea8:	dc400d15 	stw	r17,52(sp)
 1006eac:	1442fa16 	blt	r2,r17,1007a98 <___vfprintf_internal_r+0x14e8>
 1006eb0:	a8c00204 	addi	r3,r21,8
 1006eb4:	d8800517 	ldw	r2,20(sp)
 1006eb8:	d9014717 	ldw	r4,1308(sp)
 1006ebc:	11015c0e 	bge	r2,r4,1007430 <___vfprintf_internal_r+0xe80>
 1006ec0:	dc400d17 	ldw	r17,52(sp)
 1006ec4:	d9814917 	ldw	r6,1316(sp)
 1006ec8:	00800044 	movi	r2,1
 1006ecc:	94800044 	addi	r18,r18,1
 1006ed0:	8c400044 	addi	r17,r17,1
 1006ed4:	18800115 	stw	r2,4(r3)
 1006ed8:	008001c4 	movi	r2,7
 1006edc:	19800015 	stw	r6,0(r3)
 1006ee0:	dc800e15 	stw	r18,56(sp)
 1006ee4:	dc400d15 	stw	r17,52(sp)
 1006ee8:	14431016 	blt	r2,r17,1007b2c <___vfprintf_internal_r+0x157c>
 1006eec:	18c00204 	addi	r3,r3,8
 1006ef0:	d8814717 	ldw	r2,1308(sp)
 1006ef4:	143fffc4 	addi	r16,r2,-1
 1006ef8:	043f2b0e 	bge	zero,r16,1006ba8 <___vfprintf_internal_r+0x5f8>
 1006efc:	00800404 	movi	r2,16
 1006f00:	1402a20e 	bge	r2,r16,100798c <___vfprintf_internal_r+0x13dc>
 1006f04:	dc400d17 	ldw	r17,52(sp)
 1006f08:	1027883a 	mov	r19,r2
 1006f0c:	07004074 	movhi	fp,257
 1006f10:	e7142c84 	addi	fp,fp,20658
 1006f14:	050001c4 	movi	r20,7
 1006f18:	00000306 	br	1006f28 <___vfprintf_internal_r+0x978>
 1006f1c:	18c00204 	addi	r3,r3,8
 1006f20:	843ffc04 	addi	r16,r16,-16
 1006f24:	9c029c0e 	bge	r19,r16,1007998 <___vfprintf_internal_r+0x13e8>
 1006f28:	94800404 	addi	r18,r18,16
 1006f2c:	8c400044 	addi	r17,r17,1
 1006f30:	1f000015 	stw	fp,0(r3)
 1006f34:	1cc00115 	stw	r19,4(r3)
 1006f38:	dc800e15 	stw	r18,56(sp)
 1006f3c:	dc400d15 	stw	r17,52(sp)
 1006f40:	a47ff60e 	bge	r20,r17,1006f1c <___vfprintf_internal_r+0x96c>
 1006f44:	d9014f17 	ldw	r4,1340(sp)
 1006f48:	b00b883a 	mov	r5,r22
 1006f4c:	d9800c04 	addi	r6,sp,48
 1006f50:	10065580 	call	1006558 <__sprint_r>
 1006f54:	103f4e1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006f58:	dc800e17 	ldw	r18,56(sp)
 1006f5c:	dc400d17 	ldw	r17,52(sp)
 1006f60:	d8c01904 	addi	r3,sp,100
 1006f64:	003fee06 	br	1006f20 <___vfprintf_internal_r+0x970>
 1006f68:	d8802c0b 	ldhu	r2,176(sp)
 1006f6c:	00ffffc4 	movi	r3,-1
 1006f70:	d8c14b15 	stw	r3,1324(sp)
 1006f74:	1080100c 	andi	r2,r2,64
 1006f78:	103dcc1e 	bne	r2,zero,10066ac <___vfprintf_internal_r+0xfc>
 1006f7c:	003dce06 	br	10066b8 <___vfprintf_internal_r+0x108>
 1006f80:	d9014f17 	ldw	r4,1340(sp)
 1006f84:	b00b883a 	mov	r5,r22
 1006f88:	d9800c04 	addi	r6,sp,48
 1006f8c:	10065580 	call	1006558 <__sprint_r>
 1006f90:	103f3f1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1006f94:	dc800e17 	ldw	r18,56(sp)
 1006f98:	003f2e06 	br	1006c54 <___vfprintf_internal_r+0x6a4>
 1006f9c:	d9414c17 	ldw	r5,1328(sp)
 1006fa0:	29400414 	ori	r5,r5,16
 1006fa4:	d9414c15 	stw	r5,1328(sp)
 1006fa8:	d9814c17 	ldw	r6,1328(sp)
 1006fac:	3080080c 	andi	r2,r6,32
 1006fb0:	10014f1e 	bne	r2,zero,10074f0 <___vfprintf_internal_r+0xf40>
 1006fb4:	d8c14c17 	ldw	r3,1328(sp)
 1006fb8:	1880040c 	andi	r2,r3,16
 1006fbc:	1002ea1e 	bne	r2,zero,1007b68 <___vfprintf_internal_r+0x15b8>
 1006fc0:	d9014c17 	ldw	r4,1328(sp)
 1006fc4:	2080100c 	andi	r2,r4,64
 1006fc8:	1002e726 	beq	r2,zero,1007b68 <___vfprintf_internal_r+0x15b8>
 1006fcc:	3880000f 	ldh	r2,0(r7)
 1006fd0:	39c00104 	addi	r7,r7,4
 1006fd4:	d9c14015 	stw	r7,1280(sp)
 1006fd8:	1023d7fa 	srai	r17,r2,31
 1006fdc:	1021883a 	mov	r16,r2
 1006fe0:	88037216 	blt	r17,zero,1007dac <___vfprintf_internal_r+0x17fc>
 1006fe4:	01000044 	movi	r4,1
 1006fe8:	98000416 	blt	r19,zero,1006ffc <___vfprintf_internal_r+0xa4c>
 1006fec:	d8c14c17 	ldw	r3,1328(sp)
 1006ff0:	00bfdfc4 	movi	r2,-129
 1006ff4:	1886703a 	and	r3,r3,r2
 1006ff8:	d8c14c15 	stw	r3,1328(sp)
 1006ffc:	8444b03a 	or	r2,r16,r17
 1007000:	1002261e 	bne	r2,zero,100789c <___vfprintf_internal_r+0x12ec>
 1007004:	9802251e 	bne	r19,zero,100789c <___vfprintf_internal_r+0x12ec>
 1007008:	20803fcc 	andi	r2,r4,255
 100700c:	10029b26 	beq	r2,zero,1007a7c <___vfprintf_internal_r+0x14cc>
 1007010:	d8c01904 	addi	r3,sp,100
 1007014:	dd000f04 	addi	r20,sp,60
 1007018:	d8c14115 	stw	r3,1284(sp)
 100701c:	d8c14117 	ldw	r3,1284(sp)
 1007020:	dcc14515 	stw	r19,1300(sp)
 1007024:	a0c5c83a 	sub	r2,r20,r3
 1007028:	11c00a04 	addi	r7,r2,40
 100702c:	99c0010e 	bge	r19,r7,1007034 <___vfprintf_internal_r+0xa84>
 1007030:	d9c14515 	stw	r7,1300(sp)
 1007034:	dcc14615 	stw	r19,1304(sp)
 1007038:	d8800407 	ldb	r2,16(sp)
 100703c:	103e4c26 	beq	r2,zero,1006970 <___vfprintf_internal_r+0x3c0>
 1007040:	d8814517 	ldw	r2,1300(sp)
 1007044:	10800044 	addi	r2,r2,1
 1007048:	d8814515 	stw	r2,1300(sp)
 100704c:	003e4806 	br	1006970 <___vfprintf_internal_r+0x3c0>
 1007050:	d9814c17 	ldw	r6,1328(sp)
 1007054:	31800414 	ori	r6,r6,16
 1007058:	d9814c15 	stw	r6,1328(sp)
 100705c:	d8c14c17 	ldw	r3,1328(sp)
 1007060:	1880080c 	andi	r2,r3,32
 1007064:	1001271e 	bne	r2,zero,1007504 <___vfprintf_internal_r+0xf54>
 1007068:	d9414c17 	ldw	r5,1328(sp)
 100706c:	2880040c 	andi	r2,r5,16
 1007070:	1002b61e 	bne	r2,zero,1007b4c <___vfprintf_internal_r+0x159c>
 1007074:	d9814c17 	ldw	r6,1328(sp)
 1007078:	3080100c 	andi	r2,r6,64
 100707c:	1002b326 	beq	r2,zero,1007b4c <___vfprintf_internal_r+0x159c>
 1007080:	3c00000b 	ldhu	r16,0(r7)
 1007084:	0009883a 	mov	r4,zero
 1007088:	39c00104 	addi	r7,r7,4
 100708c:	0023883a 	mov	r17,zero
 1007090:	d9c14015 	stw	r7,1280(sp)
 1007094:	d8000405 	stb	zero,16(sp)
 1007098:	003fd306 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 100709c:	d9014c17 	ldw	r4,1328(sp)
 10070a0:	21000414 	ori	r4,r4,16
 10070a4:	d9014c15 	stw	r4,1328(sp)
 10070a8:	d9414c17 	ldw	r5,1328(sp)
 10070ac:	2880080c 	andi	r2,r5,32
 10070b0:	1001081e 	bne	r2,zero,10074d4 <___vfprintf_internal_r+0xf24>
 10070b4:	d8c14c17 	ldw	r3,1328(sp)
 10070b8:	1880040c 	andi	r2,r3,16
 10070bc:	1002b01e 	bne	r2,zero,1007b80 <___vfprintf_internal_r+0x15d0>
 10070c0:	d9014c17 	ldw	r4,1328(sp)
 10070c4:	2080100c 	andi	r2,r4,64
 10070c8:	1002ad26 	beq	r2,zero,1007b80 <___vfprintf_internal_r+0x15d0>
 10070cc:	3c00000b 	ldhu	r16,0(r7)
 10070d0:	01000044 	movi	r4,1
 10070d4:	39c00104 	addi	r7,r7,4
 10070d8:	0023883a 	mov	r17,zero
 10070dc:	d9c14015 	stw	r7,1280(sp)
 10070e0:	d8000405 	stb	zero,16(sp)
 10070e4:	003fc006 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 10070e8:	d9014f17 	ldw	r4,1340(sp)
 10070ec:	b00b883a 	mov	r5,r22
 10070f0:	d9800c04 	addi	r6,sp,48
 10070f4:	10065580 	call	1006558 <__sprint_r>
 10070f8:	103ee51e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10070fc:	dc800e17 	ldw	r18,56(sp)
 1007100:	d8c01904 	addi	r3,sp,100
 1007104:	d9814c17 	ldw	r6,1328(sp)
 1007108:	3080004c 	andi	r2,r6,1
 100710c:	1005003a 	cmpeq	r2,r2,zero
 1007110:	103ea51e 	bne	r2,zero,1006ba8 <___vfprintf_internal_r+0x5f8>
 1007114:	00800044 	movi	r2,1
 1007118:	dc400d17 	ldw	r17,52(sp)
 100711c:	18800115 	stw	r2,4(r3)
 1007120:	d8814917 	ldw	r2,1316(sp)
 1007124:	94800044 	addi	r18,r18,1
 1007128:	8c400044 	addi	r17,r17,1
 100712c:	18800015 	stw	r2,0(r3)
 1007130:	008001c4 	movi	r2,7
 1007134:	dc800e15 	stw	r18,56(sp)
 1007138:	dc400d15 	stw	r17,52(sp)
 100713c:	14421e0e 	bge	r2,r17,10079b8 <___vfprintf_internal_r+0x1408>
 1007140:	d9014f17 	ldw	r4,1340(sp)
 1007144:	b00b883a 	mov	r5,r22
 1007148:	d9800c04 	addi	r6,sp,48
 100714c:	10065580 	call	1006558 <__sprint_r>
 1007150:	103ecf1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007154:	dc800e17 	ldw	r18,56(sp)
 1007158:	d8c01904 	addi	r3,sp,100
 100715c:	003e9206 	br	1006ba8 <___vfprintf_internal_r+0x5f8>
 1007160:	d9014f17 	ldw	r4,1340(sp)
 1007164:	b00b883a 	mov	r5,r22
 1007168:	d9800c04 	addi	r6,sp,48
 100716c:	10065580 	call	1006558 <__sprint_r>
 1007170:	103ec026 	beq	r2,zero,1006c74 <___vfprintf_internal_r+0x6c4>
 1007174:	003ec606 	br	1006c90 <___vfprintf_internal_r+0x6e0>
 1007178:	d9014f17 	ldw	r4,1340(sp)
 100717c:	b00b883a 	mov	r5,r22
 1007180:	d9800c04 	addi	r6,sp,48
 1007184:	d9c15115 	stw	r7,1348(sp)
 1007188:	10065580 	call	1006558 <__sprint_r>
 100718c:	d9c15117 	ldw	r7,1348(sp)
 1007190:	103ebf1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007194:	dc800e17 	ldw	r18,56(sp)
 1007198:	dc400d17 	ldw	r17,52(sp)
 100719c:	dd401904 	addi	r21,sp,100
 10071a0:	003e7406 	br	1006b74 <___vfprintf_internal_r+0x5c4>
 10071a4:	d9014f17 	ldw	r4,1340(sp)
 10071a8:	b00b883a 	mov	r5,r22
 10071ac:	d9800c04 	addi	r6,sp,48
 10071b0:	d9c15115 	stw	r7,1348(sp)
 10071b4:	10065580 	call	1006558 <__sprint_r>
 10071b8:	d9c15117 	ldw	r7,1348(sp)
 10071bc:	103eb41e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10071c0:	dd401904 	addi	r21,sp,100
 10071c4:	003d6d06 	br	100677c <___vfprintf_internal_r+0x1cc>
 10071c8:	d9014f17 	ldw	r4,1340(sp)
 10071cc:	b00b883a 	mov	r5,r22
 10071d0:	d9800c04 	addi	r6,sp,48
 10071d4:	d9c15115 	stw	r7,1348(sp)
 10071d8:	10065580 	call	1006558 <__sprint_r>
 10071dc:	d9c15117 	ldw	r7,1348(sp)
 10071e0:	103eab1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10071e4:	dc800e17 	ldw	r18,56(sp)
 10071e8:	dc400d17 	ldw	r17,52(sp)
 10071ec:	dd401904 	addi	r21,sp,100
 10071f0:	003e3406 	br	1006ac4 <___vfprintf_internal_r+0x514>
 10071f4:	d9014f17 	ldw	r4,1340(sp)
 10071f8:	b00b883a 	mov	r5,r22
 10071fc:	d9800c04 	addi	r6,sp,48
 1007200:	d9c15115 	stw	r7,1348(sp)
 1007204:	10065580 	call	1006558 <__sprint_r>
 1007208:	d9c15117 	ldw	r7,1348(sp)
 100720c:	103ea01e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007210:	dc800e17 	ldw	r18,56(sp)
 1007214:	dc400d17 	ldw	r17,52(sp)
 1007218:	dd401904 	addi	r21,sp,100
 100721c:	003e1c06 	br	1006a90 <___vfprintf_internal_r+0x4e0>
 1007220:	d9014f17 	ldw	r4,1340(sp)
 1007224:	b00b883a 	mov	r5,r22
 1007228:	d9800c04 	addi	r6,sp,48
 100722c:	d9c15115 	stw	r7,1348(sp)
 1007230:	10065580 	call	1006558 <__sprint_r>
 1007234:	d9c15117 	ldw	r7,1348(sp)
 1007238:	103e951e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 100723c:	dc800e17 	ldw	r18,56(sp)
 1007240:	dc400d17 	ldw	r17,52(sp)
 1007244:	dd401904 	addi	r21,sp,100
 1007248:	003e0406 	br	1006a5c <___vfprintf_internal_r+0x4ac>
 100724c:	d9000517 	ldw	r4,20(sp)
 1007250:	0102520e 	bge	zero,r4,1007b9c <___vfprintf_internal_r+0x15ec>
 1007254:	d9814717 	ldw	r6,1308(sp)
 1007258:	21807a16 	blt	r4,r6,1007444 <___vfprintf_internal_r+0xe94>
 100725c:	d8814117 	ldw	r2,1284(sp)
 1007260:	91a5883a 	add	r18,r18,r6
 1007264:	8c400044 	addi	r17,r17,1
 1007268:	a8800015 	stw	r2,0(r21)
 100726c:	008001c4 	movi	r2,7
 1007270:	a9800115 	stw	r6,4(r21)
 1007274:	dc800e15 	stw	r18,56(sp)
 1007278:	dc400d15 	stw	r17,52(sp)
 100727c:	1442f616 	blt	r2,r17,1007e58 <___vfprintf_internal_r+0x18a8>
 1007280:	a8c00204 	addi	r3,r21,8
 1007284:	d9414717 	ldw	r5,1308(sp)
 1007288:	2161c83a 	sub	r16,r4,r5
 100728c:	043f9d0e 	bge	zero,r16,1007104 <___vfprintf_internal_r+0xb54>
 1007290:	00800404 	movi	r2,16
 1007294:	1402130e 	bge	r2,r16,1007ae4 <___vfprintf_internal_r+0x1534>
 1007298:	dc400d17 	ldw	r17,52(sp)
 100729c:	1027883a 	mov	r19,r2
 10072a0:	07004074 	movhi	fp,257
 10072a4:	e7142c84 	addi	fp,fp,20658
 10072a8:	050001c4 	movi	r20,7
 10072ac:	00000306 	br	10072bc <___vfprintf_internal_r+0xd0c>
 10072b0:	18c00204 	addi	r3,r3,8
 10072b4:	843ffc04 	addi	r16,r16,-16
 10072b8:	9c020d0e 	bge	r19,r16,1007af0 <___vfprintf_internal_r+0x1540>
 10072bc:	94800404 	addi	r18,r18,16
 10072c0:	8c400044 	addi	r17,r17,1
 10072c4:	1f000015 	stw	fp,0(r3)
 10072c8:	1cc00115 	stw	r19,4(r3)
 10072cc:	dc800e15 	stw	r18,56(sp)
 10072d0:	dc400d15 	stw	r17,52(sp)
 10072d4:	a47ff60e 	bge	r20,r17,10072b0 <___vfprintf_internal_r+0xd00>
 10072d8:	d9014f17 	ldw	r4,1340(sp)
 10072dc:	b00b883a 	mov	r5,r22
 10072e0:	d9800c04 	addi	r6,sp,48
 10072e4:	10065580 	call	1006558 <__sprint_r>
 10072e8:	103e691e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10072ec:	dc800e17 	ldw	r18,56(sp)
 10072f0:	dc400d17 	ldw	r17,52(sp)
 10072f4:	d8c01904 	addi	r3,sp,100
 10072f8:	003fee06 	br	10072b4 <___vfprintf_internal_r+0xd04>
 10072fc:	d8814717 	ldw	r2,1308(sp)
 1007300:	143fffc4 	addi	r16,r2,-1
 1007304:	043e970e 	bge	zero,r16,1006d64 <___vfprintf_internal_r+0x7b4>
 1007308:	00800404 	movi	r2,16
 100730c:	1400180e 	bge	r2,r16,1007370 <___vfprintf_internal_r+0xdc0>
 1007310:	1029883a 	mov	r20,r2
 1007314:	07004074 	movhi	fp,257
 1007318:	e7142c84 	addi	fp,fp,20658
 100731c:	054001c4 	movi	r21,7
 1007320:	00000306 	br	1007330 <___vfprintf_internal_r+0xd80>
 1007324:	9cc00204 	addi	r19,r19,8
 1007328:	843ffc04 	addi	r16,r16,-16
 100732c:	a400120e 	bge	r20,r16,1007378 <___vfprintf_internal_r+0xdc8>
 1007330:	94800404 	addi	r18,r18,16
 1007334:	8c400044 	addi	r17,r17,1
 1007338:	9f000015 	stw	fp,0(r19)
 100733c:	9d000115 	stw	r20,4(r19)
 1007340:	dc800e15 	stw	r18,56(sp)
 1007344:	dc400d15 	stw	r17,52(sp)
 1007348:	ac7ff60e 	bge	r21,r17,1007324 <___vfprintf_internal_r+0xd74>
 100734c:	d9014f17 	ldw	r4,1340(sp)
 1007350:	b00b883a 	mov	r5,r22
 1007354:	d9800c04 	addi	r6,sp,48
 1007358:	10065580 	call	1006558 <__sprint_r>
 100735c:	103e4c1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007360:	dc800e17 	ldw	r18,56(sp)
 1007364:	dc400d17 	ldw	r17,52(sp)
 1007368:	dcc01904 	addi	r19,sp,100
 100736c:	003fee06 	br	1007328 <___vfprintf_internal_r+0xd78>
 1007370:	07004074 	movhi	fp,257
 1007374:	e7142c84 	addi	fp,fp,20658
 1007378:	9425883a 	add	r18,r18,r16
 100737c:	8c400044 	addi	r17,r17,1
 1007380:	008001c4 	movi	r2,7
 1007384:	9f000015 	stw	fp,0(r19)
 1007388:	9c000115 	stw	r16,4(r19)
 100738c:	dc800e15 	stw	r18,56(sp)
 1007390:	dc400d15 	stw	r17,52(sp)
 1007394:	147e720e 	bge	r2,r17,1006d60 <___vfprintf_internal_r+0x7b0>
 1007398:	d9014f17 	ldw	r4,1340(sp)
 100739c:	b00b883a 	mov	r5,r22
 10073a0:	d9800c04 	addi	r6,sp,48
 10073a4:	10065580 	call	1006558 <__sprint_r>
 10073a8:	103e391e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10073ac:	dc800e17 	ldw	r18,56(sp)
 10073b0:	dc400d17 	ldw	r17,52(sp)
 10073b4:	dcc01904 	addi	r19,sp,100
 10073b8:	003e6a06 	br	1006d64 <___vfprintf_internal_r+0x7b4>
 10073bc:	d9014f17 	ldw	r4,1340(sp)
 10073c0:	b00b883a 	mov	r5,r22
 10073c4:	d9800c04 	addi	r6,sp,48
 10073c8:	d9c15115 	stw	r7,1348(sp)
 10073cc:	10065580 	call	1006558 <__sprint_r>
 10073d0:	d9c15117 	ldw	r7,1348(sp)
 10073d4:	103e2e1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10073d8:	dc800e17 	ldw	r18,56(sp)
 10073dc:	dc400d17 	ldw	r17,52(sp)
 10073e0:	dd401904 	addi	r21,sp,100
 10073e4:	003dba06 	br	1006ad0 <___vfprintf_internal_r+0x520>
 10073e8:	d9014f17 	ldw	r4,1340(sp)
 10073ec:	b00b883a 	mov	r5,r22
 10073f0:	d9800c04 	addi	r6,sp,48
 10073f4:	10065580 	call	1006558 <__sprint_r>
 10073f8:	103e251e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 10073fc:	dc800e17 	ldw	r18,56(sp)
 1007400:	dc400d17 	ldw	r17,52(sp)
 1007404:	dcc01904 	addi	r19,sp,100
 1007408:	003e4206 	br	1006d14 <___vfprintf_internal_r+0x764>
 100740c:	d9014f17 	ldw	r4,1340(sp)
 1007410:	b00b883a 	mov	r5,r22
 1007414:	d9800c04 	addi	r6,sp,48
 1007418:	10065580 	call	1006558 <__sprint_r>
 100741c:	103e1c1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007420:	dc800e17 	ldw	r18,56(sp)
 1007424:	dc400d17 	ldw	r17,52(sp)
 1007428:	d8c01904 	addi	r3,sp,100
 100742c:	003e2e06 	br	1006ce8 <___vfprintf_internal_r+0x738>
 1007430:	d9414c17 	ldw	r5,1328(sp)
 1007434:	2880004c 	andi	r2,r5,1
 1007438:	1005003a 	cmpeq	r2,r2,zero
 100743c:	103dda1e 	bne	r2,zero,1006ba8 <___vfprintf_internal_r+0x5f8>
 1007440:	003e9f06 	br	1006ec0 <___vfprintf_internal_r+0x910>
 1007444:	d8c14117 	ldw	r3,1284(sp)
 1007448:	9125883a 	add	r18,r18,r4
 100744c:	8c400044 	addi	r17,r17,1
 1007450:	008001c4 	movi	r2,7
 1007454:	a8c00015 	stw	r3,0(r21)
 1007458:	a9000115 	stw	r4,4(r21)
 100745c:	dc800e15 	stw	r18,56(sp)
 1007460:	dc400d15 	stw	r17,52(sp)
 1007464:	14426616 	blt	r2,r17,1007e00 <___vfprintf_internal_r+0x1850>
 1007468:	a8c00204 	addi	r3,r21,8
 100746c:	d9414917 	ldw	r5,1316(sp)
 1007470:	00800044 	movi	r2,1
 1007474:	94800044 	addi	r18,r18,1
 1007478:	8c400044 	addi	r17,r17,1
 100747c:	18800115 	stw	r2,4(r3)
 1007480:	008001c4 	movi	r2,7
 1007484:	19400015 	stw	r5,0(r3)
 1007488:	dc800e15 	stw	r18,56(sp)
 100748c:	dc400d15 	stw	r17,52(sp)
 1007490:	2021883a 	mov	r16,r4
 1007494:	14425016 	blt	r2,r17,1007dd8 <___vfprintf_internal_r+0x1828>
 1007498:	19400204 	addi	r5,r3,8
 100749c:	d9814717 	ldw	r6,1308(sp)
 10074a0:	8c400044 	addi	r17,r17,1
 10074a4:	dc400d15 	stw	r17,52(sp)
 10074a8:	3107c83a 	sub	r3,r6,r4
 10074ac:	d9014117 	ldw	r4,1284(sp)
 10074b0:	90e5883a 	add	r18,r18,r3
 10074b4:	28c00115 	stw	r3,4(r5)
 10074b8:	8105883a 	add	r2,r16,r4
 10074bc:	28800015 	stw	r2,0(r5)
 10074c0:	008001c4 	movi	r2,7
 10074c4:	dc800e15 	stw	r18,56(sp)
 10074c8:	147f1d16 	blt	r2,r17,1007140 <___vfprintf_internal_r+0xb90>
 10074cc:	28c00204 	addi	r3,r5,8
 10074d0:	003db506 	br	1006ba8 <___vfprintf_internal_r+0x5f8>
 10074d4:	3c000017 	ldw	r16,0(r7)
 10074d8:	3c400117 	ldw	r17,4(r7)
 10074dc:	39800204 	addi	r6,r7,8
 10074e0:	01000044 	movi	r4,1
 10074e4:	d9814015 	stw	r6,1280(sp)
 10074e8:	d8000405 	stb	zero,16(sp)
 10074ec:	003ebe06 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 10074f0:	3c000017 	ldw	r16,0(r7)
 10074f4:	3c400117 	ldw	r17,4(r7)
 10074f8:	38800204 	addi	r2,r7,8
 10074fc:	d8814015 	stw	r2,1280(sp)
 1007500:	003eb706 	br	1006fe0 <___vfprintf_internal_r+0xa30>
 1007504:	3c000017 	ldw	r16,0(r7)
 1007508:	3c400117 	ldw	r17,4(r7)
 100750c:	39000204 	addi	r4,r7,8
 1007510:	d9014015 	stw	r4,1280(sp)
 1007514:	0009883a 	mov	r4,zero
 1007518:	d8000405 	stb	zero,16(sp)
 100751c:	003eb206 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 1007520:	38c00017 	ldw	r3,0(r7)
 1007524:	39c00104 	addi	r7,r7,4
 1007528:	d8c14a15 	stw	r3,1320(sp)
 100752c:	1800d10e 	bge	r3,zero,1007874 <___vfprintf_internal_r+0x12c4>
 1007530:	00c7c83a 	sub	r3,zero,r3
 1007534:	d8c14a15 	stw	r3,1320(sp)
 1007538:	d9014c17 	ldw	r4,1328(sp)
 100753c:	b8c00007 	ldb	r3,0(r23)
 1007540:	21000114 	ori	r4,r4,4
 1007544:	d9014c15 	stw	r4,1328(sp)
 1007548:	003c9806 	br	10067ac <___vfprintf_internal_r+0x1fc>
 100754c:	d9814c17 	ldw	r6,1328(sp)
 1007550:	3080080c 	andi	r2,r6,32
 1007554:	1001f026 	beq	r2,zero,1007d18 <___vfprintf_internal_r+0x1768>
 1007558:	d9014b17 	ldw	r4,1324(sp)
 100755c:	38800017 	ldw	r2,0(r7)
 1007560:	39c00104 	addi	r7,r7,4
 1007564:	d9c14015 	stw	r7,1280(sp)
 1007568:	2007d7fa 	srai	r3,r4,31
 100756c:	d9c14017 	ldw	r7,1280(sp)
 1007570:	11000015 	stw	r4,0(r2)
 1007574:	10c00115 	stw	r3,4(r2)
 1007578:	003c6906 	br	1006720 <___vfprintf_internal_r+0x170>
 100757c:	b8c00007 	ldb	r3,0(r23)
 1007580:	00801b04 	movi	r2,108
 1007584:	18824f26 	beq	r3,r2,1007ec4 <___vfprintf_internal_r+0x1914>
 1007588:	d9414c17 	ldw	r5,1328(sp)
 100758c:	29400414 	ori	r5,r5,16
 1007590:	d9414c15 	stw	r5,1328(sp)
 1007594:	003c8506 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007598:	d9814c17 	ldw	r6,1328(sp)
 100759c:	b8c00007 	ldb	r3,0(r23)
 10075a0:	31800814 	ori	r6,r6,32
 10075a4:	d9814c15 	stw	r6,1328(sp)
 10075a8:	003c8006 	br	10067ac <___vfprintf_internal_r+0x1fc>
 10075ac:	d8814c17 	ldw	r2,1328(sp)
 10075b0:	3c000017 	ldw	r16,0(r7)
 10075b4:	00c01e04 	movi	r3,120
 10075b8:	10800094 	ori	r2,r2,2
 10075bc:	d8814c15 	stw	r2,1328(sp)
 10075c0:	39c00104 	addi	r7,r7,4
 10075c4:	01404074 	movhi	r5,257
 10075c8:	29541504 	addi	r5,r5,20564
 10075cc:	00800c04 	movi	r2,48
 10075d0:	0023883a 	mov	r17,zero
 10075d4:	01000084 	movi	r4,2
 10075d8:	d9c14015 	stw	r7,1280(sp)
 10075dc:	d8c14d15 	stw	r3,1332(sp)
 10075e0:	d9414415 	stw	r5,1296(sp)
 10075e4:	d8800445 	stb	r2,17(sp)
 10075e8:	d8c00485 	stb	r3,18(sp)
 10075ec:	d8000405 	stb	zero,16(sp)
 10075f0:	003e7d06 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 10075f4:	d8814c17 	ldw	r2,1328(sp)
 10075f8:	b8c00007 	ldb	r3,0(r23)
 10075fc:	10801014 	ori	r2,r2,64
 1007600:	d8814c15 	stw	r2,1328(sp)
 1007604:	003c6906 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007608:	d9414c17 	ldw	r5,1328(sp)
 100760c:	2880020c 	andi	r2,r5,8
 1007610:	1001df26 	beq	r2,zero,1007d90 <___vfprintf_internal_r+0x17e0>
 1007614:	39800017 	ldw	r6,0(r7)
 1007618:	38800204 	addi	r2,r7,8
 100761c:	d8814015 	stw	r2,1280(sp)
 1007620:	d9814215 	stw	r6,1288(sp)
 1007624:	39c00117 	ldw	r7,4(r7)
 1007628:	d9c14315 	stw	r7,1292(sp)
 100762c:	d9014217 	ldw	r4,1288(sp)
 1007630:	d9414317 	ldw	r5,1292(sp)
 1007634:	100ca900 	call	100ca90 <__isinfd>
 1007638:	10021726 	beq	r2,zero,1007e98 <___vfprintf_internal_r+0x18e8>
 100763c:	d9014217 	ldw	r4,1288(sp)
 1007640:	d9414317 	ldw	r5,1292(sp)
 1007644:	000d883a 	mov	r6,zero
 1007648:	000f883a 	mov	r7,zero
 100764c:	100feb40 	call	100feb4 <__ltdf2>
 1007650:	1002ca16 	blt	r2,zero,100817c <___vfprintf_internal_r+0x1bcc>
 1007654:	d9414d17 	ldw	r5,1332(sp)
 1007658:	008011c4 	movi	r2,71
 100765c:	11420a16 	blt	r2,r5,1007e88 <___vfprintf_internal_r+0x18d8>
 1007660:	01804074 	movhi	r6,257
 1007664:	31941a04 	addi	r6,r6,20584
 1007668:	d9814115 	stw	r6,1284(sp)
 100766c:	d9014c17 	ldw	r4,1328(sp)
 1007670:	00c000c4 	movi	r3,3
 1007674:	00bfdfc4 	movi	r2,-129
 1007678:	2088703a 	and	r4,r4,r2
 100767c:	180f883a 	mov	r7,r3
 1007680:	d8c14515 	stw	r3,1300(sp)
 1007684:	d9014c15 	stw	r4,1328(sp)
 1007688:	d8014615 	stw	zero,1304(sp)
 100768c:	003e6a06 	br	1007038 <___vfprintf_internal_r+0xa88>
 1007690:	38800017 	ldw	r2,0(r7)
 1007694:	00c00044 	movi	r3,1
 1007698:	39c00104 	addi	r7,r7,4
 100769c:	d9c14015 	stw	r7,1280(sp)
 10076a0:	d9000f04 	addi	r4,sp,60
 10076a4:	180f883a 	mov	r7,r3
 10076a8:	d8c14515 	stw	r3,1300(sp)
 10076ac:	d9014115 	stw	r4,1284(sp)
 10076b0:	d8800f05 	stb	r2,60(sp)
 10076b4:	d8000405 	stb	zero,16(sp)
 10076b8:	003cac06 	br	100696c <___vfprintf_internal_r+0x3bc>
 10076bc:	01404074 	movhi	r5,257
 10076c0:	29542004 	addi	r5,r5,20608
 10076c4:	d9414415 	stw	r5,1296(sp)
 10076c8:	d9814c17 	ldw	r6,1328(sp)
 10076cc:	3080080c 	andi	r2,r6,32
 10076d0:	1000f926 	beq	r2,zero,1007ab8 <___vfprintf_internal_r+0x1508>
 10076d4:	3c000017 	ldw	r16,0(r7)
 10076d8:	3c400117 	ldw	r17,4(r7)
 10076dc:	38800204 	addi	r2,r7,8
 10076e0:	d8814015 	stw	r2,1280(sp)
 10076e4:	d9414c17 	ldw	r5,1328(sp)
 10076e8:	2880004c 	andi	r2,r5,1
 10076ec:	1005003a 	cmpeq	r2,r2,zero
 10076f0:	1000b31e 	bne	r2,zero,10079c0 <___vfprintf_internal_r+0x1410>
 10076f4:	8444b03a 	or	r2,r16,r17
 10076f8:	1000b126 	beq	r2,zero,10079c0 <___vfprintf_internal_r+0x1410>
 10076fc:	d9814d17 	ldw	r6,1332(sp)
 1007700:	29400094 	ori	r5,r5,2
 1007704:	00800c04 	movi	r2,48
 1007708:	01000084 	movi	r4,2
 100770c:	d9414c15 	stw	r5,1328(sp)
 1007710:	d8800445 	stb	r2,17(sp)
 1007714:	d9800485 	stb	r6,18(sp)
 1007718:	d8000405 	stb	zero,16(sp)
 100771c:	003e3206 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 1007720:	01804074 	movhi	r6,257
 1007724:	31941504 	addi	r6,r6,20564
 1007728:	d9814415 	stw	r6,1296(sp)
 100772c:	003fe606 	br	10076c8 <___vfprintf_internal_r+0x1118>
 1007730:	00800ac4 	movi	r2,43
 1007734:	d8800405 	stb	r2,16(sp)
 1007738:	b8c00007 	ldb	r3,0(r23)
 100773c:	003c1b06 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007740:	d8814c17 	ldw	r2,1328(sp)
 1007744:	b8c00007 	ldb	r3,0(r23)
 1007748:	10800054 	ori	r2,r2,1
 100774c:	d8814c15 	stw	r2,1328(sp)
 1007750:	003c1606 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007754:	d8800407 	ldb	r2,16(sp)
 1007758:	1000461e 	bne	r2,zero,1007874 <___vfprintf_internal_r+0x12c4>
 100775c:	00800804 	movi	r2,32
 1007760:	d8800405 	stb	r2,16(sp)
 1007764:	b8c00007 	ldb	r3,0(r23)
 1007768:	003c1006 	br	10067ac <___vfprintf_internal_r+0x1fc>
 100776c:	d9814c17 	ldw	r6,1328(sp)
 1007770:	b8c00007 	ldb	r3,0(r23)
 1007774:	31800214 	ori	r6,r6,8
 1007778:	d9814c15 	stw	r6,1328(sp)
 100777c:	003c0b06 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007780:	0007883a 	mov	r3,zero
 1007784:	01000244 	movi	r4,9
 1007788:	188002a4 	muli	r2,r3,10
 100778c:	b8c00007 	ldb	r3,0(r23)
 1007790:	d9814d17 	ldw	r6,1332(sp)
 1007794:	bdc00044 	addi	r23,r23,1
 1007798:	d8c14d15 	stw	r3,1332(sp)
 100779c:	d9414d17 	ldw	r5,1332(sp)
 10077a0:	3085883a 	add	r2,r6,r2
 10077a4:	10fff404 	addi	r3,r2,-48
 10077a8:	28bff404 	addi	r2,r5,-48
 10077ac:	20bff62e 	bgeu	r4,r2,1007788 <___vfprintf_internal_r+0x11d8>
 10077b0:	d8c14a15 	stw	r3,1320(sp)
 10077b4:	003bff06 	br	10067b4 <___vfprintf_internal_r+0x204>
 10077b8:	d9414c17 	ldw	r5,1328(sp)
 10077bc:	b8c00007 	ldb	r3,0(r23)
 10077c0:	29402014 	ori	r5,r5,128
 10077c4:	d9414c15 	stw	r5,1328(sp)
 10077c8:	003bf806 	br	10067ac <___vfprintf_internal_r+0x1fc>
 10077cc:	b8c00007 	ldb	r3,0(r23)
 10077d0:	00800a84 	movi	r2,42
 10077d4:	bdc00044 	addi	r23,r23,1
 10077d8:	18831526 	beq	r3,r2,1008430 <___vfprintf_internal_r+0x1e80>
 10077dc:	d8c14d15 	stw	r3,1332(sp)
 10077e0:	18bff404 	addi	r2,r3,-48
 10077e4:	00c00244 	movi	r3,9
 10077e8:	18827836 	bltu	r3,r2,10081cc <___vfprintf_internal_r+0x1c1c>
 10077ec:	000d883a 	mov	r6,zero
 10077f0:	308002a4 	muli	r2,r6,10
 10077f4:	b9800007 	ldb	r6,0(r23)
 10077f8:	d9414d17 	ldw	r5,1332(sp)
 10077fc:	bdc00044 	addi	r23,r23,1
 1007800:	d9814d15 	stw	r6,1332(sp)
 1007804:	d9014d17 	ldw	r4,1332(sp)
 1007808:	1145883a 	add	r2,r2,r5
 100780c:	11bff404 	addi	r6,r2,-48
 1007810:	20bff404 	addi	r2,r4,-48
 1007814:	18bff62e 	bgeu	r3,r2,10077f0 <___vfprintf_internal_r+0x1240>
 1007818:	3027883a 	mov	r19,r6
 100781c:	303be50e 	bge	r6,zero,10067b4 <___vfprintf_internal_r+0x204>
 1007820:	04ffffc4 	movi	r19,-1
 1007824:	003be306 	br	10067b4 <___vfprintf_internal_r+0x204>
 1007828:	d8000405 	stb	zero,16(sp)
 100782c:	39800017 	ldw	r6,0(r7)
 1007830:	39c00104 	addi	r7,r7,4
 1007834:	d9c14015 	stw	r7,1280(sp)
 1007838:	d9814115 	stw	r6,1284(sp)
 100783c:	3001c926 	beq	r6,zero,1007f64 <___vfprintf_internal_r+0x19b4>
 1007840:	98000e16 	blt	r19,zero,100787c <___vfprintf_internal_r+0x12cc>
 1007844:	d9014117 	ldw	r4,1284(sp)
 1007848:	000b883a 	mov	r5,zero
 100784c:	980d883a 	mov	r6,r19
 1007850:	100b0f80 	call	100b0f8 <memchr>
 1007854:	10025926 	beq	r2,zero,10081bc <___vfprintf_internal_r+0x1c0c>
 1007858:	d8c14117 	ldw	r3,1284(sp)
 100785c:	10cfc83a 	sub	r7,r2,r3
 1007860:	99c19e16 	blt	r19,r7,1007edc <___vfprintf_internal_r+0x192c>
 1007864:	d9c14515 	stw	r7,1300(sp)
 1007868:	38000916 	blt	r7,zero,1007890 <___vfprintf_internal_r+0x12e0>
 100786c:	d8014615 	stw	zero,1304(sp)
 1007870:	003df106 	br	1007038 <___vfprintf_internal_r+0xa88>
 1007874:	b8c00007 	ldb	r3,0(r23)
 1007878:	003bcc06 	br	10067ac <___vfprintf_internal_r+0x1fc>
 100787c:	d9014117 	ldw	r4,1284(sp)
 1007880:	10064c80 	call	10064c8 <strlen>
 1007884:	d8814515 	stw	r2,1300(sp)
 1007888:	100f883a 	mov	r7,r2
 100788c:	103ff70e 	bge	r2,zero,100786c <___vfprintf_internal_r+0x12bc>
 1007890:	d8014515 	stw	zero,1300(sp)
 1007894:	d8014615 	stw	zero,1304(sp)
 1007898:	003de706 	br	1007038 <___vfprintf_internal_r+0xa88>
 100789c:	20c03fcc 	andi	r3,r4,255
 10078a0:	00800044 	movi	r2,1
 10078a4:	18802d26 	beq	r3,r2,100795c <___vfprintf_internal_r+0x13ac>
 10078a8:	18800e36 	bltu	r3,r2,10078e4 <___vfprintf_internal_r+0x1334>
 10078ac:	00800084 	movi	r2,2
 10078b0:	1880fa26 	beq	r3,r2,1007c9c <___vfprintf_internal_r+0x16ec>
 10078b4:	01004074 	movhi	r4,257
 10078b8:	21142504 	addi	r4,r4,20628
 10078bc:	10064c80 	call	10064c8 <strlen>
 10078c0:	100f883a 	mov	r7,r2
 10078c4:	dcc14515 	stw	r19,1300(sp)
 10078c8:	9880010e 	bge	r19,r2,10078d0 <___vfprintf_internal_r+0x1320>
 10078cc:	d8814515 	stw	r2,1300(sp)
 10078d0:	00804074 	movhi	r2,257
 10078d4:	10942504 	addi	r2,r2,20628
 10078d8:	dcc14615 	stw	r19,1304(sp)
 10078dc:	d8814115 	stw	r2,1284(sp)
 10078e0:	003dd506 	br	1007038 <___vfprintf_internal_r+0xa88>
 10078e4:	d9401904 	addi	r5,sp,100
 10078e8:	dd000f04 	addi	r20,sp,60
 10078ec:	d9414115 	stw	r5,1284(sp)
 10078f0:	880a977a 	slli	r5,r17,29
 10078f4:	d9814117 	ldw	r6,1284(sp)
 10078f8:	8004d0fa 	srli	r2,r16,3
 10078fc:	8806d0fa 	srli	r3,r17,3
 1007900:	810001cc 	andi	r4,r16,7
 1007904:	2884b03a 	or	r2,r5,r2
 1007908:	31bfffc4 	addi	r6,r6,-1
 100790c:	21000c04 	addi	r4,r4,48
 1007910:	d9814115 	stw	r6,1284(sp)
 1007914:	10cab03a 	or	r5,r2,r3
 1007918:	31000005 	stb	r4,0(r6)
 100791c:	1021883a 	mov	r16,r2
 1007920:	1823883a 	mov	r17,r3
 1007924:	283ff21e 	bne	r5,zero,10078f0 <___vfprintf_internal_r+0x1340>
 1007928:	d8c14c17 	ldw	r3,1328(sp)
 100792c:	1880004c 	andi	r2,r3,1
 1007930:	1005003a 	cmpeq	r2,r2,zero
 1007934:	103db91e 	bne	r2,zero,100701c <___vfprintf_internal_r+0xa6c>
 1007938:	20803fcc 	andi	r2,r4,255
 100793c:	1080201c 	xori	r2,r2,128
 1007940:	10bfe004 	addi	r2,r2,-128
 1007944:	00c00c04 	movi	r3,48
 1007948:	10fdb426 	beq	r2,r3,100701c <___vfprintf_internal_r+0xa6c>
 100794c:	31bfffc4 	addi	r6,r6,-1
 1007950:	d9814115 	stw	r6,1284(sp)
 1007954:	30c00005 	stb	r3,0(r6)
 1007958:	003db006 	br	100701c <___vfprintf_internal_r+0xa6c>
 100795c:	88800068 	cmpgeui	r2,r17,1
 1007960:	10002c1e 	bne	r2,zero,1007a14 <___vfprintf_internal_r+0x1464>
 1007964:	8800021e 	bne	r17,zero,1007970 <___vfprintf_internal_r+0x13c0>
 1007968:	00800244 	movi	r2,9
 100796c:	14002936 	bltu	r2,r16,1007a14 <___vfprintf_internal_r+0x1464>
 1007970:	d90018c4 	addi	r4,sp,99
 1007974:	dd000f04 	addi	r20,sp,60
 1007978:	d9014115 	stw	r4,1284(sp)
 100797c:	d9014117 	ldw	r4,1284(sp)
 1007980:	80800c04 	addi	r2,r16,48
 1007984:	20800005 	stb	r2,0(r4)
 1007988:	003da406 	br	100701c <___vfprintf_internal_r+0xa6c>
 100798c:	dc400d17 	ldw	r17,52(sp)
 1007990:	07004074 	movhi	fp,257
 1007994:	e7142c84 	addi	fp,fp,20658
 1007998:	9425883a 	add	r18,r18,r16
 100799c:	8c400044 	addi	r17,r17,1
 10079a0:	008001c4 	movi	r2,7
 10079a4:	1f000015 	stw	fp,0(r3)
 10079a8:	1c000115 	stw	r16,4(r3)
 10079ac:	dc800e15 	stw	r18,56(sp)
 10079b0:	dc400d15 	stw	r17,52(sp)
 10079b4:	147de216 	blt	r2,r17,1007140 <___vfprintf_internal_r+0xb90>
 10079b8:	18c00204 	addi	r3,r3,8
 10079bc:	003c7a06 	br	1006ba8 <___vfprintf_internal_r+0x5f8>
 10079c0:	01000084 	movi	r4,2
 10079c4:	d8000405 	stb	zero,16(sp)
 10079c8:	003d8706 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 10079cc:	d9814c17 	ldw	r6,1328(sp)
 10079d0:	30c4703a 	and	r2,r6,r3
 10079d4:	1005003a 	cmpeq	r2,r2,zero
 10079d8:	103cb926 	beq	r2,zero,1006cc0 <___vfprintf_internal_r+0x710>
 10079dc:	d9014117 	ldw	r4,1284(sp)
 10079e0:	94800044 	addi	r18,r18,1
 10079e4:	8c400044 	addi	r17,r17,1
 10079e8:	008001c4 	movi	r2,7
 10079ec:	a9000015 	stw	r4,0(r21)
 10079f0:	a8c00115 	stw	r3,4(r21)
 10079f4:	dc800e15 	stw	r18,56(sp)
 10079f8:	dc400d15 	stw	r17,52(sp)
 10079fc:	147e6616 	blt	r2,r17,1007398 <___vfprintf_internal_r+0xde8>
 1007a00:	acc00204 	addi	r19,r21,8
 1007a04:	003cd706 	br	1006d64 <___vfprintf_internal_r+0x7b4>
 1007a08:	07004074 	movhi	fp,257
 1007a0c:	e7142c84 	addi	fp,fp,20658
 1007a10:	003c4f06 	br	1006b50 <___vfprintf_internal_r+0x5a0>
 1007a14:	dd000f04 	addi	r20,sp,60
 1007a18:	dc801904 	addi	r18,sp,100
 1007a1c:	8009883a 	mov	r4,r16
 1007a20:	880b883a 	mov	r5,r17
 1007a24:	01800284 	movi	r6,10
 1007a28:	000f883a 	mov	r7,zero
 1007a2c:	100ebc40 	call	100ebc4 <__umoddi3>
 1007a30:	12000c04 	addi	r8,r2,48
 1007a34:	94bfffc4 	addi	r18,r18,-1
 1007a38:	8009883a 	mov	r4,r16
 1007a3c:	880b883a 	mov	r5,r17
 1007a40:	01800284 	movi	r6,10
 1007a44:	000f883a 	mov	r7,zero
 1007a48:	92000005 	stb	r8,0(r18)
 1007a4c:	100e5e80 	call	100e5e8 <__udivdi3>
 1007a50:	1009883a 	mov	r4,r2
 1007a54:	1021883a 	mov	r16,r2
 1007a58:	18800068 	cmpgeui	r2,r3,1
 1007a5c:	1823883a 	mov	r17,r3
 1007a60:	103fee1e 	bne	r2,zero,1007a1c <___vfprintf_internal_r+0x146c>
 1007a64:	1800021e 	bne	r3,zero,1007a70 <___vfprintf_internal_r+0x14c0>
 1007a68:	00800244 	movi	r2,9
 1007a6c:	113feb36 	bltu	r2,r4,1007a1c <___vfprintf_internal_r+0x146c>
 1007a70:	94bfffc4 	addi	r18,r18,-1
 1007a74:	dc814115 	stw	r18,1284(sp)
 1007a78:	003fc006 	br	100797c <___vfprintf_internal_r+0x13cc>
 1007a7c:	d9014c17 	ldw	r4,1328(sp)
 1007a80:	2080004c 	andi	r2,r4,1
 1007a84:	10009a1e 	bne	r2,zero,1007cf0 <___vfprintf_internal_r+0x1740>
 1007a88:	d9401904 	addi	r5,sp,100
 1007a8c:	dd000f04 	addi	r20,sp,60
 1007a90:	d9414115 	stw	r5,1284(sp)
 1007a94:	003d6106 	br	100701c <___vfprintf_internal_r+0xa6c>
 1007a98:	d9014f17 	ldw	r4,1340(sp)
 1007a9c:	b00b883a 	mov	r5,r22
 1007aa0:	d9800c04 	addi	r6,sp,48
 1007aa4:	10065580 	call	1006558 <__sprint_r>
 1007aa8:	103c791e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007aac:	dc800e17 	ldw	r18,56(sp)
 1007ab0:	d8c01904 	addi	r3,sp,100
 1007ab4:	003cff06 	br	1006eb4 <___vfprintf_internal_r+0x904>
 1007ab8:	d8c14c17 	ldw	r3,1328(sp)
 1007abc:	1880040c 	andi	r2,r3,16
 1007ac0:	1000711e 	bne	r2,zero,1007c88 <___vfprintf_internal_r+0x16d8>
 1007ac4:	d9014c17 	ldw	r4,1328(sp)
 1007ac8:	2080100c 	andi	r2,r4,64
 1007acc:	10006e26 	beq	r2,zero,1007c88 <___vfprintf_internal_r+0x16d8>
 1007ad0:	3c00000b 	ldhu	r16,0(r7)
 1007ad4:	0023883a 	mov	r17,zero
 1007ad8:	39c00104 	addi	r7,r7,4
 1007adc:	d9c14015 	stw	r7,1280(sp)
 1007ae0:	003f0006 	br	10076e4 <___vfprintf_internal_r+0x1134>
 1007ae4:	dc400d17 	ldw	r17,52(sp)
 1007ae8:	07004074 	movhi	fp,257
 1007aec:	e7142c84 	addi	fp,fp,20658
 1007af0:	9425883a 	add	r18,r18,r16
 1007af4:	8c400044 	addi	r17,r17,1
 1007af8:	008001c4 	movi	r2,7
 1007afc:	1f000015 	stw	fp,0(r3)
 1007b00:	1c000115 	stw	r16,4(r3)
 1007b04:	dc800e15 	stw	r18,56(sp)
 1007b08:	dc400d15 	stw	r17,52(sp)
 1007b0c:	147d7616 	blt	r2,r17,10070e8 <___vfprintf_internal_r+0xb38>
 1007b10:	18c00204 	addi	r3,r3,8
 1007b14:	003d7b06 	br	1007104 <___vfprintf_internal_r+0xb54>
 1007b18:	dc800e17 	ldw	r18,56(sp)
 1007b1c:	dc400d17 	ldw	r17,52(sp)
 1007b20:	07004074 	movhi	fp,257
 1007b24:	e7143084 	addi	fp,fp,20674
 1007b28:	003bc006 	br	1006a2c <___vfprintf_internal_r+0x47c>
 1007b2c:	d9014f17 	ldw	r4,1340(sp)
 1007b30:	b00b883a 	mov	r5,r22
 1007b34:	d9800c04 	addi	r6,sp,48
 1007b38:	10065580 	call	1006558 <__sprint_r>
 1007b3c:	103c541e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007b40:	dc800e17 	ldw	r18,56(sp)
 1007b44:	d8c01904 	addi	r3,sp,100
 1007b48:	003ce906 	br	1006ef0 <___vfprintf_internal_r+0x940>
 1007b4c:	3c000017 	ldw	r16,0(r7)
 1007b50:	0009883a 	mov	r4,zero
 1007b54:	39c00104 	addi	r7,r7,4
 1007b58:	0023883a 	mov	r17,zero
 1007b5c:	d9c14015 	stw	r7,1280(sp)
 1007b60:	d8000405 	stb	zero,16(sp)
 1007b64:	003d2006 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 1007b68:	38800017 	ldw	r2,0(r7)
 1007b6c:	39c00104 	addi	r7,r7,4
 1007b70:	d9c14015 	stw	r7,1280(sp)
 1007b74:	1023d7fa 	srai	r17,r2,31
 1007b78:	1021883a 	mov	r16,r2
 1007b7c:	003d1806 	br	1006fe0 <___vfprintf_internal_r+0xa30>
 1007b80:	3c000017 	ldw	r16,0(r7)
 1007b84:	01000044 	movi	r4,1
 1007b88:	39c00104 	addi	r7,r7,4
 1007b8c:	0023883a 	mov	r17,zero
 1007b90:	d9c14015 	stw	r7,1280(sp)
 1007b94:	d8000405 	stb	zero,16(sp)
 1007b98:	003d1306 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 1007b9c:	00804074 	movhi	r2,257
 1007ba0:	10942c04 	addi	r2,r2,20656
 1007ba4:	94800044 	addi	r18,r18,1
 1007ba8:	8c400044 	addi	r17,r17,1
 1007bac:	a8800015 	stw	r2,0(r21)
 1007bb0:	00c00044 	movi	r3,1
 1007bb4:	008001c4 	movi	r2,7
 1007bb8:	a8c00115 	stw	r3,4(r21)
 1007bbc:	dc800e15 	stw	r18,56(sp)
 1007bc0:	dc400d15 	stw	r17,52(sp)
 1007bc4:	1440ca16 	blt	r2,r17,1007ef0 <___vfprintf_internal_r+0x1940>
 1007bc8:	a8c00204 	addi	r3,r21,8
 1007bcc:	2000061e 	bne	r4,zero,1007be8 <___vfprintf_internal_r+0x1638>
 1007bd0:	d9414717 	ldw	r5,1308(sp)
 1007bd4:	2800041e 	bne	r5,zero,1007be8 <___vfprintf_internal_r+0x1638>
 1007bd8:	d9814c17 	ldw	r6,1328(sp)
 1007bdc:	3080004c 	andi	r2,r6,1
 1007be0:	1005003a 	cmpeq	r2,r2,zero
 1007be4:	103bf01e 	bne	r2,zero,1006ba8 <___vfprintf_internal_r+0x5f8>
 1007be8:	00800044 	movi	r2,1
 1007bec:	dc400d17 	ldw	r17,52(sp)
 1007bf0:	18800115 	stw	r2,4(r3)
 1007bf4:	d8814917 	ldw	r2,1316(sp)
 1007bf8:	94800044 	addi	r18,r18,1
 1007bfc:	8c400044 	addi	r17,r17,1
 1007c00:	18800015 	stw	r2,0(r3)
 1007c04:	008001c4 	movi	r2,7
 1007c08:	dc800e15 	stw	r18,56(sp)
 1007c0c:	dc400d15 	stw	r17,52(sp)
 1007c10:	1440ca16 	blt	r2,r17,1007f3c <___vfprintf_internal_r+0x198c>
 1007c14:	18c00204 	addi	r3,r3,8
 1007c18:	0121c83a 	sub	r16,zero,r4
 1007c1c:	0400500e 	bge	zero,r16,1007d60 <___vfprintf_internal_r+0x17b0>
 1007c20:	00800404 	movi	r2,16
 1007c24:	1400800e 	bge	r2,r16,1007e28 <___vfprintf_internal_r+0x1878>
 1007c28:	1027883a 	mov	r19,r2
 1007c2c:	07004074 	movhi	fp,257
 1007c30:	e7142c84 	addi	fp,fp,20658
 1007c34:	050001c4 	movi	r20,7
 1007c38:	00000306 	br	1007c48 <___vfprintf_internal_r+0x1698>
 1007c3c:	18c00204 	addi	r3,r3,8
 1007c40:	843ffc04 	addi	r16,r16,-16
 1007c44:	9c007a0e 	bge	r19,r16,1007e30 <___vfprintf_internal_r+0x1880>
 1007c48:	94800404 	addi	r18,r18,16
 1007c4c:	8c400044 	addi	r17,r17,1
 1007c50:	1f000015 	stw	fp,0(r3)
 1007c54:	1cc00115 	stw	r19,4(r3)
 1007c58:	dc800e15 	stw	r18,56(sp)
 1007c5c:	dc400d15 	stw	r17,52(sp)
 1007c60:	a47ff60e 	bge	r20,r17,1007c3c <___vfprintf_internal_r+0x168c>
 1007c64:	d9014f17 	ldw	r4,1340(sp)
 1007c68:	b00b883a 	mov	r5,r22
 1007c6c:	d9800c04 	addi	r6,sp,48
 1007c70:	10065580 	call	1006558 <__sprint_r>
 1007c74:	103c061e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007c78:	dc800e17 	ldw	r18,56(sp)
 1007c7c:	dc400d17 	ldw	r17,52(sp)
 1007c80:	d8c01904 	addi	r3,sp,100
 1007c84:	003fee06 	br	1007c40 <___vfprintf_internal_r+0x1690>
 1007c88:	3c000017 	ldw	r16,0(r7)
 1007c8c:	0023883a 	mov	r17,zero
 1007c90:	39c00104 	addi	r7,r7,4
 1007c94:	d9c14015 	stw	r7,1280(sp)
 1007c98:	003e9206 	br	10076e4 <___vfprintf_internal_r+0x1134>
 1007c9c:	d9401904 	addi	r5,sp,100
 1007ca0:	dd000f04 	addi	r20,sp,60
 1007ca4:	d9414115 	stw	r5,1284(sp)
 1007ca8:	d9814417 	ldw	r6,1296(sp)
 1007cac:	880a973a 	slli	r5,r17,28
 1007cb0:	8004d13a 	srli	r2,r16,4
 1007cb4:	810003cc 	andi	r4,r16,15
 1007cb8:	3109883a 	add	r4,r6,r4
 1007cbc:	2884b03a 	or	r2,r5,r2
 1007cc0:	21400003 	ldbu	r5,0(r4)
 1007cc4:	d9014117 	ldw	r4,1284(sp)
 1007cc8:	8806d13a 	srli	r3,r17,4
 1007ccc:	1021883a 	mov	r16,r2
 1007cd0:	213fffc4 	addi	r4,r4,-1
 1007cd4:	d9014115 	stw	r4,1284(sp)
 1007cd8:	d9814117 	ldw	r6,1284(sp)
 1007cdc:	10c8b03a 	or	r4,r2,r3
 1007ce0:	1823883a 	mov	r17,r3
 1007ce4:	31400005 	stb	r5,0(r6)
 1007ce8:	203fef1e 	bne	r4,zero,1007ca8 <___vfprintf_internal_r+0x16f8>
 1007cec:	003ccb06 	br	100701c <___vfprintf_internal_r+0xa6c>
 1007cf0:	00800c04 	movi	r2,48
 1007cf4:	d98018c4 	addi	r6,sp,99
 1007cf8:	dd000f04 	addi	r20,sp,60
 1007cfc:	d88018c5 	stb	r2,99(sp)
 1007d00:	d9814115 	stw	r6,1284(sp)
 1007d04:	003cc506 	br	100701c <___vfprintf_internal_r+0xa6c>
 1007d08:	dc400d17 	ldw	r17,52(sp)
 1007d0c:	07004074 	movhi	fp,257
 1007d10:	e7143084 	addi	fp,fp,20674
 1007d14:	003bc706 	br	1006c34 <___vfprintf_internal_r+0x684>
 1007d18:	d9414c17 	ldw	r5,1328(sp)
 1007d1c:	2880040c 	andi	r2,r5,16
 1007d20:	10007c26 	beq	r2,zero,1007f14 <___vfprintf_internal_r+0x1964>
 1007d24:	38800017 	ldw	r2,0(r7)
 1007d28:	39c00104 	addi	r7,r7,4
 1007d2c:	d9c14015 	stw	r7,1280(sp)
 1007d30:	d9814b17 	ldw	r6,1324(sp)
 1007d34:	d9c14017 	ldw	r7,1280(sp)
 1007d38:	11800015 	stw	r6,0(r2)
 1007d3c:	003a7806 	br	1006720 <___vfprintf_internal_r+0x170>
 1007d40:	d9014f17 	ldw	r4,1340(sp)
 1007d44:	b00b883a 	mov	r5,r22
 1007d48:	d9800c04 	addi	r6,sp,48
 1007d4c:	10065580 	call	1006558 <__sprint_r>
 1007d50:	103bcf1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007d54:	dc800e17 	ldw	r18,56(sp)
 1007d58:	dc400d17 	ldw	r17,52(sp)
 1007d5c:	d8c01904 	addi	r3,sp,100
 1007d60:	d9014717 	ldw	r4,1308(sp)
 1007d64:	d9414117 	ldw	r5,1284(sp)
 1007d68:	8c400044 	addi	r17,r17,1
 1007d6c:	9125883a 	add	r18,r18,r4
 1007d70:	008001c4 	movi	r2,7
 1007d74:	19400015 	stw	r5,0(r3)
 1007d78:	19000115 	stw	r4,4(r3)
 1007d7c:	dc800e15 	stw	r18,56(sp)
 1007d80:	dc400d15 	stw	r17,52(sp)
 1007d84:	147cee16 	blt	r2,r17,1007140 <___vfprintf_internal_r+0xb90>
 1007d88:	18c00204 	addi	r3,r3,8
 1007d8c:	003b8606 	br	1006ba8 <___vfprintf_internal_r+0x5f8>
 1007d90:	38c00017 	ldw	r3,0(r7)
 1007d94:	39000204 	addi	r4,r7,8
 1007d98:	d9014015 	stw	r4,1280(sp)
 1007d9c:	d8c14215 	stw	r3,1288(sp)
 1007da0:	39c00117 	ldw	r7,4(r7)
 1007da4:	d9c14315 	stw	r7,1292(sp)
 1007da8:	003e2006 	br	100762c <___vfprintf_internal_r+0x107c>
 1007dac:	0005883a 	mov	r2,zero
 1007db0:	1409c83a 	sub	r4,r2,r16
 1007db4:	1105803a 	cmpltu	r2,r2,r4
 1007db8:	044bc83a 	sub	r5,zero,r17
 1007dbc:	2885c83a 	sub	r2,r5,r2
 1007dc0:	2021883a 	mov	r16,r4
 1007dc4:	1023883a 	mov	r17,r2
 1007dc8:	01000044 	movi	r4,1
 1007dcc:	00800b44 	movi	r2,45
 1007dd0:	d8800405 	stb	r2,16(sp)
 1007dd4:	003c8406 	br	1006fe8 <___vfprintf_internal_r+0xa38>
 1007dd8:	d9014f17 	ldw	r4,1340(sp)
 1007ddc:	b00b883a 	mov	r5,r22
 1007de0:	d9800c04 	addi	r6,sp,48
 1007de4:	10065580 	call	1006558 <__sprint_r>
 1007de8:	103ba91e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007dec:	dc800e17 	ldw	r18,56(sp)
 1007df0:	dc400d17 	ldw	r17,52(sp)
 1007df4:	d9000517 	ldw	r4,20(sp)
 1007df8:	d9401904 	addi	r5,sp,100
 1007dfc:	003da706 	br	100749c <___vfprintf_internal_r+0xeec>
 1007e00:	d9014f17 	ldw	r4,1340(sp)
 1007e04:	b00b883a 	mov	r5,r22
 1007e08:	d9800c04 	addi	r6,sp,48
 1007e0c:	10065580 	call	1006558 <__sprint_r>
 1007e10:	103b9f1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007e14:	dc800e17 	ldw	r18,56(sp)
 1007e18:	dc400d17 	ldw	r17,52(sp)
 1007e1c:	d9000517 	ldw	r4,20(sp)
 1007e20:	d8c01904 	addi	r3,sp,100
 1007e24:	003d9106 	br	100746c <___vfprintf_internal_r+0xebc>
 1007e28:	07004074 	movhi	fp,257
 1007e2c:	e7142c84 	addi	fp,fp,20658
 1007e30:	9425883a 	add	r18,r18,r16
 1007e34:	8c400044 	addi	r17,r17,1
 1007e38:	008001c4 	movi	r2,7
 1007e3c:	1f000015 	stw	fp,0(r3)
 1007e40:	1c000115 	stw	r16,4(r3)
 1007e44:	dc800e15 	stw	r18,56(sp)
 1007e48:	dc400d15 	stw	r17,52(sp)
 1007e4c:	147fbc16 	blt	r2,r17,1007d40 <___vfprintf_internal_r+0x1790>
 1007e50:	18c00204 	addi	r3,r3,8
 1007e54:	003fc206 	br	1007d60 <___vfprintf_internal_r+0x17b0>
 1007e58:	d9014f17 	ldw	r4,1340(sp)
 1007e5c:	b00b883a 	mov	r5,r22
 1007e60:	d9800c04 	addi	r6,sp,48
 1007e64:	10065580 	call	1006558 <__sprint_r>
 1007e68:	103b891e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007e6c:	dc800e17 	ldw	r18,56(sp)
 1007e70:	d9000517 	ldw	r4,20(sp)
 1007e74:	d8c01904 	addi	r3,sp,100
 1007e78:	003d0206 	br	1007284 <___vfprintf_internal_r+0xcd4>
 1007e7c:	07004074 	movhi	fp,257
 1007e80:	e7142c84 	addi	fp,fp,20658
 1007e84:	003be406 	br	1006e18 <___vfprintf_internal_r+0x868>
 1007e88:	00804074 	movhi	r2,257
 1007e8c:	10941b04 	addi	r2,r2,20588
 1007e90:	d8814115 	stw	r2,1284(sp)
 1007e94:	003df506 	br	100766c <___vfprintf_internal_r+0x10bc>
 1007e98:	d9014217 	ldw	r4,1288(sp)
 1007e9c:	d9414317 	ldw	r5,1292(sp)
 1007ea0:	100cad00 	call	100cad0 <__isnand>
 1007ea4:	10003926 	beq	r2,zero,1007f8c <___vfprintf_internal_r+0x19dc>
 1007ea8:	d9414d17 	ldw	r5,1332(sp)
 1007eac:	008011c4 	movi	r2,71
 1007eb0:	1140ce16 	blt	r2,r5,10081ec <___vfprintf_internal_r+0x1c3c>
 1007eb4:	01804074 	movhi	r6,257
 1007eb8:	31941c04 	addi	r6,r6,20592
 1007ebc:	d9814115 	stw	r6,1284(sp)
 1007ec0:	003dea06 	br	100766c <___vfprintf_internal_r+0x10bc>
 1007ec4:	d9014c17 	ldw	r4,1328(sp)
 1007ec8:	bdc00044 	addi	r23,r23,1
 1007ecc:	b8c00007 	ldb	r3,0(r23)
 1007ed0:	21000814 	ori	r4,r4,32
 1007ed4:	d9014c15 	stw	r4,1328(sp)
 1007ed8:	003a3406 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1007edc:	dcc14515 	stw	r19,1300(sp)
 1007ee0:	98011016 	blt	r19,zero,1008324 <___vfprintf_internal_r+0x1d74>
 1007ee4:	980f883a 	mov	r7,r19
 1007ee8:	d8014615 	stw	zero,1304(sp)
 1007eec:	003c5206 	br	1007038 <___vfprintf_internal_r+0xa88>
 1007ef0:	d9014f17 	ldw	r4,1340(sp)
 1007ef4:	b00b883a 	mov	r5,r22
 1007ef8:	d9800c04 	addi	r6,sp,48
 1007efc:	10065580 	call	1006558 <__sprint_r>
 1007f00:	103b631e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007f04:	dc800e17 	ldw	r18,56(sp)
 1007f08:	d9000517 	ldw	r4,20(sp)
 1007f0c:	d8c01904 	addi	r3,sp,100
 1007f10:	003f2e06 	br	1007bcc <___vfprintf_internal_r+0x161c>
 1007f14:	d8c14c17 	ldw	r3,1328(sp)
 1007f18:	1880100c 	andi	r2,r3,64
 1007f1c:	1000a026 	beq	r2,zero,10081a0 <___vfprintf_internal_r+0x1bf0>
 1007f20:	38800017 	ldw	r2,0(r7)
 1007f24:	39c00104 	addi	r7,r7,4
 1007f28:	d9c14015 	stw	r7,1280(sp)
 1007f2c:	d9014b17 	ldw	r4,1324(sp)
 1007f30:	d9c14017 	ldw	r7,1280(sp)
 1007f34:	1100000d 	sth	r4,0(r2)
 1007f38:	0039f906 	br	1006720 <___vfprintf_internal_r+0x170>
 1007f3c:	d9014f17 	ldw	r4,1340(sp)
 1007f40:	b00b883a 	mov	r5,r22
 1007f44:	d9800c04 	addi	r6,sp,48
 1007f48:	10065580 	call	1006558 <__sprint_r>
 1007f4c:	103b501e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 1007f50:	dc800e17 	ldw	r18,56(sp)
 1007f54:	dc400d17 	ldw	r17,52(sp)
 1007f58:	d9000517 	ldw	r4,20(sp)
 1007f5c:	d8c01904 	addi	r3,sp,100
 1007f60:	003f2d06 	br	1007c18 <___vfprintf_internal_r+0x1668>
 1007f64:	00800184 	movi	r2,6
 1007f68:	14c09a36 	bltu	r2,r19,10081d4 <___vfprintf_internal_r+0x1c24>
 1007f6c:	dcc14515 	stw	r19,1300(sp)
 1007f70:	9800010e 	bge	r19,zero,1007f78 <___vfprintf_internal_r+0x19c8>
 1007f74:	d8014515 	stw	zero,1300(sp)
 1007f78:	00804074 	movhi	r2,257
 1007f7c:	10941e04 	addi	r2,r2,20600
 1007f80:	980f883a 	mov	r7,r19
 1007f84:	d8814115 	stw	r2,1284(sp)
 1007f88:	003a7806 	br	100696c <___vfprintf_internal_r+0x3bc>
 1007f8c:	00bfffc4 	movi	r2,-1
 1007f90:	9880e226 	beq	r19,r2,100831c <___vfprintf_internal_r+0x1d6c>
 1007f94:	d9414d17 	ldw	r5,1332(sp)
 1007f98:	008019c4 	movi	r2,103
 1007f9c:	2880dc26 	beq	r5,r2,1008310 <___vfprintf_internal_r+0x1d60>
 1007fa0:	008011c4 	movi	r2,71
 1007fa4:	2880da26 	beq	r5,r2,1008310 <___vfprintf_internal_r+0x1d60>
 1007fa8:	d9414c17 	ldw	r5,1328(sp)
 1007fac:	d9014317 	ldw	r4,1292(sp)
 1007fb0:	d9814217 	ldw	r6,1288(sp)
 1007fb4:	29404014 	ori	r5,r5,256
 1007fb8:	d9414c15 	stw	r5,1328(sp)
 1007fbc:	2000cc16 	blt	r4,zero,10082f0 <___vfprintf_internal_r+0x1d40>
 1007fc0:	3021883a 	mov	r16,r6
 1007fc4:	2023883a 	mov	r17,r4
 1007fc8:	0039883a 	mov	fp,zero
 1007fcc:	d9414d17 	ldw	r5,1332(sp)
 1007fd0:	00801984 	movi	r2,102
 1007fd4:	2880b726 	beq	r5,r2,10082b4 <___vfprintf_internal_r+0x1d04>
 1007fd8:	00801184 	movi	r2,70
 1007fdc:	2880b526 	beq	r5,r2,10082b4 <___vfprintf_internal_r+0x1d04>
 1007fe0:	00801944 	movi	r2,101
 1007fe4:	2880c826 	beq	r5,r2,1008308 <___vfprintf_internal_r+0x1d58>
 1007fe8:	00801144 	movi	r2,69
 1007fec:	2880c626 	beq	r5,r2,1008308 <___vfprintf_internal_r+0x1d58>
 1007ff0:	9829883a 	mov	r20,r19
 1007ff4:	d9014f17 	ldw	r4,1340(sp)
 1007ff8:	d8800504 	addi	r2,sp,20
 1007ffc:	880d883a 	mov	r6,r17
 1008000:	d8800115 	stw	r2,4(sp)
 1008004:	d8c00604 	addi	r3,sp,24
 1008008:	d8800704 	addi	r2,sp,28
 100800c:	800b883a 	mov	r5,r16
 1008010:	01c00084 	movi	r7,2
 1008014:	d8c00215 	stw	r3,8(sp)
 1008018:	d8800315 	stw	r2,12(sp)
 100801c:	dd000015 	stw	r20,0(sp)
 1008020:	10089a00 	call	10089a0 <_dtoa_r>
 1008024:	d9814d17 	ldw	r6,1332(sp)
 1008028:	d8814115 	stw	r2,1284(sp)
 100802c:	008019c4 	movi	r2,103
 1008030:	30809526 	beq	r6,r2,1008288 <___vfprintf_internal_r+0x1cd8>
 1008034:	d8c14d17 	ldw	r3,1332(sp)
 1008038:	008011c4 	movi	r2,71
 100803c:	18809226 	beq	r3,r2,1008288 <___vfprintf_internal_r+0x1cd8>
 1008040:	d9414117 	ldw	r5,1284(sp)
 1008044:	d9814d17 	ldw	r6,1332(sp)
 1008048:	00801984 	movi	r2,102
 100804c:	2d25883a 	add	r18,r5,r20
 1008050:	30808626 	beq	r6,r2,100826c <___vfprintf_internal_r+0x1cbc>
 1008054:	00801184 	movi	r2,70
 1008058:	30808426 	beq	r6,r2,100826c <___vfprintf_internal_r+0x1cbc>
 100805c:	000d883a 	mov	r6,zero
 1008060:	000f883a 	mov	r7,zero
 1008064:	880b883a 	mov	r5,r17
 1008068:	8009883a 	mov	r4,r16
 100806c:	100fc940 	call	100fc94 <__eqdf2>
 1008070:	1000751e 	bne	r2,zero,1008248 <___vfprintf_internal_r+0x1c98>
 1008074:	9005883a 	mov	r2,r18
 1008078:	dc800715 	stw	r18,28(sp)
 100807c:	d9014117 	ldw	r4,1284(sp)
 1008080:	d9414d17 	ldw	r5,1332(sp)
 1008084:	00c019c4 	movi	r3,103
 1008088:	1125c83a 	sub	r18,r2,r4
 100808c:	28c06826 	beq	r5,r3,1008230 <___vfprintf_internal_r+0x1c80>
 1008090:	008011c4 	movi	r2,71
 1008094:	28806626 	beq	r5,r2,1008230 <___vfprintf_internal_r+0x1c80>
 1008098:	d9000517 	ldw	r4,20(sp)
 100809c:	d8c14d17 	ldw	r3,1332(sp)
 10080a0:	00801944 	movi	r2,101
 10080a4:	10c05516 	blt	r2,r3,10081fc <___vfprintf_internal_r+0x1c4c>
 10080a8:	213fffc4 	addi	r4,r4,-1
 10080ac:	d9000515 	stw	r4,20(sp)
 10080b0:	d8c00805 	stb	r3,32(sp)
 10080b4:	2021883a 	mov	r16,r4
 10080b8:	2000c116 	blt	r4,zero,10083c0 <___vfprintf_internal_r+0x1e10>
 10080bc:	00800ac4 	movi	r2,43
 10080c0:	d8800845 	stb	r2,33(sp)
 10080c4:	00800244 	movi	r2,9
 10080c8:	1400af0e 	bge	r2,r16,1008388 <___vfprintf_internal_r+0x1dd8>
 10080cc:	1027883a 	mov	r19,r2
 10080d0:	dc400b84 	addi	r17,sp,46
 10080d4:	8009883a 	mov	r4,r16
 10080d8:	01400284 	movi	r5,10
 10080dc:	101037c0 	call	101037c <__modsi3>
 10080e0:	10800c04 	addi	r2,r2,48
 10080e4:	8c7fffc4 	addi	r17,r17,-1
 10080e8:	8009883a 	mov	r4,r16
 10080ec:	01400284 	movi	r5,10
 10080f0:	88800005 	stb	r2,0(r17)
 10080f4:	101031c0 	call	101031c <__divsi3>
 10080f8:	1021883a 	mov	r16,r2
 10080fc:	98bff516 	blt	r19,r2,10080d4 <___vfprintf_internal_r+0x1b24>
 1008100:	10c00c04 	addi	r3,r2,48
 1008104:	d88009c4 	addi	r2,sp,39
 1008108:	108001c4 	addi	r2,r2,7
 100810c:	897fffc4 	addi	r5,r17,-1
 1008110:	88ffffc5 	stb	r3,-1(r17)
 1008114:	2880a72e 	bgeu	r5,r2,10083b4 <___vfprintf_internal_r+0x1e04>
 1008118:	1009883a 	mov	r4,r2
 100811c:	d9800804 	addi	r6,sp,32
 1008120:	d8c00884 	addi	r3,sp,34
 1008124:	28800003 	ldbu	r2,0(r5)
 1008128:	29400044 	addi	r5,r5,1
 100812c:	18800005 	stb	r2,0(r3)
 1008130:	18c00044 	addi	r3,r3,1
 1008134:	293ffb36 	bltu	r5,r4,1008124 <___vfprintf_internal_r+0x1b74>
 1008138:	1987c83a 	sub	r3,r3,r6
 100813c:	00800044 	movi	r2,1
 1008140:	d8c14815 	stw	r3,1312(sp)
 1008144:	90cf883a 	add	r7,r18,r3
 1008148:	1480960e 	bge	r2,r18,10083a4 <___vfprintf_internal_r+0x1df4>
 100814c:	39c00044 	addi	r7,r7,1
 1008150:	d9c14515 	stw	r7,1300(sp)
 1008154:	38003416 	blt	r7,zero,1008228 <___vfprintf_internal_r+0x1c78>
 1008158:	e0803fcc 	andi	r2,fp,255
 100815c:	1080201c 	xori	r2,r2,128
 1008160:	10bfe004 	addi	r2,r2,-128
 1008164:	10004e26 	beq	r2,zero,10082a0 <___vfprintf_internal_r+0x1cf0>
 1008168:	00800b44 	movi	r2,45
 100816c:	dc814715 	stw	r18,1308(sp)
 1008170:	d8014615 	stw	zero,1304(sp)
 1008174:	d8800405 	stb	r2,16(sp)
 1008178:	003bb106 	br	1007040 <___vfprintf_internal_r+0xa90>
 100817c:	00800b44 	movi	r2,45
 1008180:	d8800405 	stb	r2,16(sp)
 1008184:	003d3306 	br	1007654 <___vfprintf_internal_r+0x10a4>
 1008188:	d9014f17 	ldw	r4,1340(sp)
 100818c:	b00b883a 	mov	r5,r22
 1008190:	d9800c04 	addi	r6,sp,48
 1008194:	10065580 	call	1006558 <__sprint_r>
 1008198:	103abd1e 	bne	r2,zero,1006c90 <___vfprintf_internal_r+0x6e0>
 100819c:	003abb06 	br	1006c8c <___vfprintf_internal_r+0x6dc>
 10081a0:	38800017 	ldw	r2,0(r7)
 10081a4:	39c00104 	addi	r7,r7,4
 10081a8:	d9c14015 	stw	r7,1280(sp)
 10081ac:	d9414b17 	ldw	r5,1324(sp)
 10081b0:	d9c14017 	ldw	r7,1280(sp)
 10081b4:	11400015 	stw	r5,0(r2)
 10081b8:	00395906 	br	1006720 <___vfprintf_internal_r+0x170>
 10081bc:	980f883a 	mov	r7,r19
 10081c0:	dcc14515 	stw	r19,1300(sp)
 10081c4:	d8014615 	stw	zero,1304(sp)
 10081c8:	003b9b06 	br	1007038 <___vfprintf_internal_r+0xa88>
 10081cc:	0027883a 	mov	r19,zero
 10081d0:	00397806 	br	10067b4 <___vfprintf_internal_r+0x204>
 10081d4:	00c04074 	movhi	r3,257
 10081d8:	18d41e04 	addi	r3,r3,20600
 10081dc:	100f883a 	mov	r7,r2
 10081e0:	d8814515 	stw	r2,1300(sp)
 10081e4:	d8c14115 	stw	r3,1284(sp)
 10081e8:	0039e006 	br	100696c <___vfprintf_internal_r+0x3bc>
 10081ec:	00804074 	movhi	r2,257
 10081f0:	10941d04 	addi	r2,r2,20596
 10081f4:	d8814115 	stw	r2,1284(sp)
 10081f8:	003d1c06 	br	100766c <___vfprintf_internal_r+0x10bc>
 10081fc:	d9414d17 	ldw	r5,1332(sp)
 1008200:	00801984 	movi	r2,102
 1008204:	28804926 	beq	r5,r2,100832c <___vfprintf_internal_r+0x1d7c>
 1008208:	200f883a 	mov	r7,r4
 100820c:	24805716 	blt	r4,r18,100836c <___vfprintf_internal_r+0x1dbc>
 1008210:	d9414c17 	ldw	r5,1328(sp)
 1008214:	2880004c 	andi	r2,r5,1
 1008218:	10000126 	beq	r2,zero,1008220 <___vfprintf_internal_r+0x1c70>
 100821c:	21c00044 	addi	r7,r4,1
 1008220:	d9c14515 	stw	r7,1300(sp)
 1008224:	383fcc0e 	bge	r7,zero,1008158 <___vfprintf_internal_r+0x1ba8>
 1008228:	d8014515 	stw	zero,1300(sp)
 100822c:	003fca06 	br	1008158 <___vfprintf_internal_r+0x1ba8>
 1008230:	d9000517 	ldw	r4,20(sp)
 1008234:	00bfff04 	movi	r2,-4
 1008238:	1100480e 	bge	r2,r4,100835c <___vfprintf_internal_r+0x1dac>
 100823c:	99004716 	blt	r19,r4,100835c <___vfprintf_internal_r+0x1dac>
 1008240:	d8c14d15 	stw	r3,1332(sp)
 1008244:	003ff006 	br	1008208 <___vfprintf_internal_r+0x1c58>
 1008248:	d8800717 	ldw	r2,28(sp)
 100824c:	14bf8b2e 	bgeu	r2,r18,100807c <___vfprintf_internal_r+0x1acc>
 1008250:	9007883a 	mov	r3,r18
 1008254:	01000c04 	movi	r4,48
 1008258:	11000005 	stb	r4,0(r2)
 100825c:	10800044 	addi	r2,r2,1
 1008260:	d8800715 	stw	r2,28(sp)
 1008264:	18bffc1e 	bne	r3,r2,1008258 <___vfprintf_internal_r+0x1ca8>
 1008268:	003f8406 	br	100807c <___vfprintf_internal_r+0x1acc>
 100826c:	d8814117 	ldw	r2,1284(sp)
 1008270:	10c00007 	ldb	r3,0(r2)
 1008274:	00800c04 	movi	r2,48
 1008278:	18805b26 	beq	r3,r2,10083e8 <___vfprintf_internal_r+0x1e38>
 100827c:	d9000517 	ldw	r4,20(sp)
 1008280:	9125883a 	add	r18,r18,r4
 1008284:	003f7506 	br	100805c <___vfprintf_internal_r+0x1aac>
 1008288:	d9014c17 	ldw	r4,1328(sp)
 100828c:	2080004c 	andi	r2,r4,1
 1008290:	1005003a 	cmpeq	r2,r2,zero
 1008294:	103f6a26 	beq	r2,zero,1008040 <___vfprintf_internal_r+0x1a90>
 1008298:	d8800717 	ldw	r2,28(sp)
 100829c:	003f7706 	br	100807c <___vfprintf_internal_r+0x1acc>
 10082a0:	d9c14515 	stw	r7,1300(sp)
 10082a4:	38004d16 	blt	r7,zero,10083dc <___vfprintf_internal_r+0x1e2c>
 10082a8:	dc814715 	stw	r18,1308(sp)
 10082ac:	d8014615 	stw	zero,1304(sp)
 10082b0:	003b6106 	br	1007038 <___vfprintf_internal_r+0xa88>
 10082b4:	d9014f17 	ldw	r4,1340(sp)
 10082b8:	d8800504 	addi	r2,sp,20
 10082bc:	d8800115 	stw	r2,4(sp)
 10082c0:	d8c00604 	addi	r3,sp,24
 10082c4:	d8800704 	addi	r2,sp,28
 10082c8:	800b883a 	mov	r5,r16
 10082cc:	880d883a 	mov	r6,r17
 10082d0:	01c000c4 	movi	r7,3
 10082d4:	d8c00215 	stw	r3,8(sp)
 10082d8:	d8800315 	stw	r2,12(sp)
 10082dc:	dcc00015 	stw	r19,0(sp)
 10082e0:	9829883a 	mov	r20,r19
 10082e4:	10089a00 	call	10089a0 <_dtoa_r>
 10082e8:	d8814115 	stw	r2,1284(sp)
 10082ec:	003f5106 	br	1008034 <___vfprintf_internal_r+0x1a84>
 10082f0:	d8c14217 	ldw	r3,1288(sp)
 10082f4:	d9014317 	ldw	r4,1292(sp)
 10082f8:	07000b44 	movi	fp,45
 10082fc:	1821883a 	mov	r16,r3
 1008300:	2460003c 	xorhi	r17,r4,32768
 1008304:	003f3106 	br	1007fcc <___vfprintf_internal_r+0x1a1c>
 1008308:	9d000044 	addi	r20,r19,1
 100830c:	003f3906 	br	1007ff4 <___vfprintf_internal_r+0x1a44>
 1008310:	983f251e 	bne	r19,zero,1007fa8 <___vfprintf_internal_r+0x19f8>
 1008314:	04c00044 	movi	r19,1
 1008318:	003f2306 	br	1007fa8 <___vfprintf_internal_r+0x19f8>
 100831c:	04c00184 	movi	r19,6
 1008320:	003f2106 	br	1007fa8 <___vfprintf_internal_r+0x19f8>
 1008324:	d8014515 	stw	zero,1300(sp)
 1008328:	003eee06 	br	1007ee4 <___vfprintf_internal_r+0x1934>
 100832c:	200f883a 	mov	r7,r4
 1008330:	0100370e 	bge	zero,r4,1008410 <___vfprintf_internal_r+0x1e60>
 1008334:	9800031e 	bne	r19,zero,1008344 <___vfprintf_internal_r+0x1d94>
 1008338:	d9814c17 	ldw	r6,1328(sp)
 100833c:	3080004c 	andi	r2,r6,1
 1008340:	103fb726 	beq	r2,zero,1008220 <___vfprintf_internal_r+0x1c70>
 1008344:	20800044 	addi	r2,r4,1
 1008348:	98a7883a 	add	r19,r19,r2
 100834c:	dcc14515 	stw	r19,1300(sp)
 1008350:	980f883a 	mov	r7,r19
 1008354:	983f800e 	bge	r19,zero,1008158 <___vfprintf_internal_r+0x1ba8>
 1008358:	003fb306 	br	1008228 <___vfprintf_internal_r+0x1c78>
 100835c:	d9814d17 	ldw	r6,1332(sp)
 1008360:	31bfff84 	addi	r6,r6,-2
 1008364:	d9814d15 	stw	r6,1332(sp)
 1008368:	003f4c06 	br	100809c <___vfprintf_internal_r+0x1aec>
 100836c:	0100180e 	bge	zero,r4,10083d0 <___vfprintf_internal_r+0x1e20>
 1008370:	00800044 	movi	r2,1
 1008374:	1485883a 	add	r2,r2,r18
 1008378:	d8814515 	stw	r2,1300(sp)
 100837c:	100f883a 	mov	r7,r2
 1008380:	103f750e 	bge	r2,zero,1008158 <___vfprintf_internal_r+0x1ba8>
 1008384:	003fa806 	br	1008228 <___vfprintf_internal_r+0x1c78>
 1008388:	80c00c04 	addi	r3,r16,48
 100838c:	00800c04 	movi	r2,48
 1008390:	d8c008c5 	stb	r3,35(sp)
 1008394:	d9800804 	addi	r6,sp,32
 1008398:	d8c00904 	addi	r3,sp,36
 100839c:	d8800885 	stb	r2,34(sp)
 10083a0:	003f6506 	br	1008138 <___vfprintf_internal_r+0x1b88>
 10083a4:	d9014c17 	ldw	r4,1328(sp)
 10083a8:	2084703a 	and	r2,r4,r2
 10083ac:	103f9c26 	beq	r2,zero,1008220 <___vfprintf_internal_r+0x1c70>
 10083b0:	003f6606 	br	100814c <___vfprintf_internal_r+0x1b9c>
 10083b4:	d9800804 	addi	r6,sp,32
 10083b8:	d8c00884 	addi	r3,sp,34
 10083bc:	003f5e06 	br	1008138 <___vfprintf_internal_r+0x1b88>
 10083c0:	00800b44 	movi	r2,45
 10083c4:	0121c83a 	sub	r16,zero,r4
 10083c8:	d8800845 	stb	r2,33(sp)
 10083cc:	003f3d06 	br	10080c4 <___vfprintf_internal_r+0x1b14>
 10083d0:	00800084 	movi	r2,2
 10083d4:	1105c83a 	sub	r2,r2,r4
 10083d8:	003fe606 	br	1008374 <___vfprintf_internal_r+0x1dc4>
 10083dc:	d8014515 	stw	zero,1300(sp)
 10083e0:	dc814715 	stw	r18,1308(sp)
 10083e4:	003fb106 	br	10082ac <___vfprintf_internal_r+0x1cfc>
 10083e8:	000d883a 	mov	r6,zero
 10083ec:	000f883a 	mov	r7,zero
 10083f0:	8009883a 	mov	r4,r16
 10083f4:	880b883a 	mov	r5,r17
 10083f8:	100fd1c0 	call	100fd1c <__nedf2>
 10083fc:	103f9f26 	beq	r2,zero,100827c <___vfprintf_internal_r+0x1ccc>
 1008400:	00800044 	movi	r2,1
 1008404:	1509c83a 	sub	r4,r2,r20
 1008408:	d9000515 	stw	r4,20(sp)
 100840c:	003f9b06 	br	100827c <___vfprintf_internal_r+0x1ccc>
 1008410:	98000d1e 	bne	r19,zero,1008448 <___vfprintf_internal_r+0x1e98>
 1008414:	d8c14c17 	ldw	r3,1328(sp)
 1008418:	1880004c 	andi	r2,r3,1
 100841c:	10000a1e 	bne	r2,zero,1008448 <___vfprintf_internal_r+0x1e98>
 1008420:	01000044 	movi	r4,1
 1008424:	200f883a 	mov	r7,r4
 1008428:	d9014515 	stw	r4,1300(sp)
 100842c:	003f4a06 	br	1008158 <___vfprintf_internal_r+0x1ba8>
 1008430:	3cc00017 	ldw	r19,0(r7)
 1008434:	39c00104 	addi	r7,r7,4
 1008438:	983d0e0e 	bge	r19,zero,1007874 <___vfprintf_internal_r+0x12c4>
 100843c:	b8c00007 	ldb	r3,0(r23)
 1008440:	04ffffc4 	movi	r19,-1
 1008444:	0038d906 	br	10067ac <___vfprintf_internal_r+0x1fc>
 1008448:	9cc00084 	addi	r19,r19,2
 100844c:	dcc14515 	stw	r19,1300(sp)
 1008450:	980f883a 	mov	r7,r19
 1008454:	983f400e 	bge	r19,zero,1008158 <___vfprintf_internal_r+0x1ba8>
 1008458:	003f7306 	br	1008228 <___vfprintf_internal_r+0x1c78>

0100845c <__vfprintf_internal>:
 100845c:	00804074 	movhi	r2,257
 1008460:	109ce904 	addi	r2,r2,29604
 1008464:	2013883a 	mov	r9,r4
 1008468:	11000017 	ldw	r4,0(r2)
 100846c:	2805883a 	mov	r2,r5
 1008470:	300f883a 	mov	r7,r6
 1008474:	480b883a 	mov	r5,r9
 1008478:	100d883a 	mov	r6,r2
 100847c:	10065b01 	jmpi	10065b0 <___vfprintf_internal_r>

01008480 <__swsetup_r>:
 1008480:	00804074 	movhi	r2,257
 1008484:	109ce904 	addi	r2,r2,29604
 1008488:	10c00017 	ldw	r3,0(r2)
 100848c:	defffd04 	addi	sp,sp,-12
 1008490:	dc400115 	stw	r17,4(sp)
 1008494:	dc000015 	stw	r16,0(sp)
 1008498:	dfc00215 	stw	ra,8(sp)
 100849c:	2023883a 	mov	r17,r4
 10084a0:	2821883a 	mov	r16,r5
 10084a4:	18000226 	beq	r3,zero,10084b0 <__swsetup_r+0x30>
 10084a8:	18800e17 	ldw	r2,56(r3)
 10084ac:	10001f26 	beq	r2,zero,100852c <__swsetup_r+0xac>
 10084b0:	8100030b 	ldhu	r4,12(r16)
 10084b4:	2080020c 	andi	r2,r4,8
 10084b8:	10002826 	beq	r2,zero,100855c <__swsetup_r+0xdc>
 10084bc:	81400417 	ldw	r5,16(r16)
 10084c0:	28001d26 	beq	r5,zero,1008538 <__swsetup_r+0xb8>
 10084c4:	2080004c 	andi	r2,r4,1
 10084c8:	1005003a 	cmpeq	r2,r2,zero
 10084cc:	10000b26 	beq	r2,zero,10084fc <__swsetup_r+0x7c>
 10084d0:	2080008c 	andi	r2,r4,2
 10084d4:	10001226 	beq	r2,zero,1008520 <__swsetup_r+0xa0>
 10084d8:	0005883a 	mov	r2,zero
 10084dc:	80800215 	stw	r2,8(r16)
 10084e0:	28000b26 	beq	r5,zero,1008510 <__swsetup_r+0x90>
 10084e4:	0005883a 	mov	r2,zero
 10084e8:	dfc00217 	ldw	ra,8(sp)
 10084ec:	dc400117 	ldw	r17,4(sp)
 10084f0:	dc000017 	ldw	r16,0(sp)
 10084f4:	dec00304 	addi	sp,sp,12
 10084f8:	f800283a 	ret
 10084fc:	80800517 	ldw	r2,20(r16)
 1008500:	80000215 	stw	zero,8(r16)
 1008504:	0085c83a 	sub	r2,zero,r2
 1008508:	80800615 	stw	r2,24(r16)
 100850c:	283ff51e 	bne	r5,zero,10084e4 <__swsetup_r+0x64>
 1008510:	2080200c 	andi	r2,r4,128
 1008514:	103ff326 	beq	r2,zero,10084e4 <__swsetup_r+0x64>
 1008518:	00bfffc4 	movi	r2,-1
 100851c:	003ff206 	br	10084e8 <__swsetup_r+0x68>
 1008520:	80800517 	ldw	r2,20(r16)
 1008524:	80800215 	stw	r2,8(r16)
 1008528:	003fed06 	br	10084e0 <__swsetup_r+0x60>
 100852c:	1809883a 	mov	r4,r3
 1008530:	100a1ec0 	call	100a1ec <__sinit>
 1008534:	003fde06 	br	10084b0 <__swsetup_r+0x30>
 1008538:	20c0a00c 	andi	r3,r4,640
 100853c:	00808004 	movi	r2,512
 1008540:	18bfe026 	beq	r3,r2,10084c4 <__swsetup_r+0x44>
 1008544:	8809883a 	mov	r4,r17
 1008548:	800b883a 	mov	r5,r16
 100854c:	100af640 	call	100af64 <__smakebuf_r>
 1008550:	8100030b 	ldhu	r4,12(r16)
 1008554:	81400417 	ldw	r5,16(r16)
 1008558:	003fda06 	br	10084c4 <__swsetup_r+0x44>
 100855c:	2080040c 	andi	r2,r4,16
 1008560:	103fed26 	beq	r2,zero,1008518 <__swsetup_r+0x98>
 1008564:	2080010c 	andi	r2,r4,4
 1008568:	10001226 	beq	r2,zero,10085b4 <__swsetup_r+0x134>
 100856c:	81400c17 	ldw	r5,48(r16)
 1008570:	28000526 	beq	r5,zero,1008588 <__swsetup_r+0x108>
 1008574:	80801004 	addi	r2,r16,64
 1008578:	28800226 	beq	r5,r2,1008584 <__swsetup_r+0x104>
 100857c:	8809883a 	mov	r4,r17
 1008580:	100a5700 	call	100a570 <_free_r>
 1008584:	80000c15 	stw	zero,48(r16)
 1008588:	8080030b 	ldhu	r2,12(r16)
 100858c:	81400417 	ldw	r5,16(r16)
 1008590:	80000115 	stw	zero,4(r16)
 1008594:	10bff6cc 	andi	r2,r2,65499
 1008598:	8080030d 	sth	r2,12(r16)
 100859c:	81400015 	stw	r5,0(r16)
 10085a0:	8080030b 	ldhu	r2,12(r16)
 10085a4:	10800214 	ori	r2,r2,8
 10085a8:	113fffcc 	andi	r4,r2,65535
 10085ac:	8080030d 	sth	r2,12(r16)
 10085b0:	003fc306 	br	10084c0 <__swsetup_r+0x40>
 10085b4:	81400417 	ldw	r5,16(r16)
 10085b8:	003ff906 	br	10085a0 <__swsetup_r+0x120>

010085bc <register_fini>:
 10085bc:	f800283a 	ret

010085c0 <__call_exitprocs>:
 10085c0:	00804074 	movhi	r2,257
 10085c4:	109cea04 	addi	r2,r2,29608
 10085c8:	10800017 	ldw	r2,0(r2)
 10085cc:	defff304 	addi	sp,sp,-52
 10085d0:	df000b15 	stw	fp,44(sp)
 10085d4:	d8800115 	stw	r2,4(sp)
 10085d8:	00804034 	movhi	r2,256
 10085dc:	10964804 	addi	r2,r2,22816
 10085e0:	1005003a 	cmpeq	r2,r2,zero
 10085e4:	d8800215 	stw	r2,8(sp)
 10085e8:	d8800117 	ldw	r2,4(sp)
 10085ec:	dd400815 	stw	r21,32(sp)
 10085f0:	dd000715 	stw	r20,28(sp)
 10085f4:	10805204 	addi	r2,r2,328
 10085f8:	dfc00c15 	stw	ra,48(sp)
 10085fc:	ddc00a15 	stw	r23,40(sp)
 1008600:	dd800915 	stw	r22,36(sp)
 1008604:	dcc00615 	stw	r19,24(sp)
 1008608:	dc800515 	stw	r18,20(sp)
 100860c:	dc400415 	stw	r17,16(sp)
 1008610:	dc000315 	stw	r16,12(sp)
 1008614:	282b883a 	mov	r21,r5
 1008618:	2039883a 	mov	fp,r4
 100861c:	d8800015 	stw	r2,0(sp)
 1008620:	2829003a 	cmpeq	r20,r5,zero
 1008624:	d8800117 	ldw	r2,4(sp)
 1008628:	14405217 	ldw	r17,328(r2)
 100862c:	88001026 	beq	r17,zero,1008670 <__call_exitprocs+0xb0>
 1008630:	ddc00017 	ldw	r23,0(sp)
 1008634:	88800117 	ldw	r2,4(r17)
 1008638:	8c802204 	addi	r18,r17,136
 100863c:	143fffc4 	addi	r16,r2,-1
 1008640:	80000916 	blt	r16,zero,1008668 <__call_exitprocs+0xa8>
 1008644:	05bfffc4 	movi	r22,-1
 1008648:	a000151e 	bne	r20,zero,10086a0 <__call_exitprocs+0xe0>
 100864c:	8409883a 	add	r4,r16,r16
 1008650:	2105883a 	add	r2,r4,r4
 1008654:	1485883a 	add	r2,r2,r18
 1008658:	10c02017 	ldw	r3,128(r2)
 100865c:	a8c01126 	beq	r21,r3,10086a4 <__call_exitprocs+0xe4>
 1008660:	843fffc4 	addi	r16,r16,-1
 1008664:	85bff81e 	bne	r16,r22,1008648 <__call_exitprocs+0x88>
 1008668:	d8800217 	ldw	r2,8(sp)
 100866c:	10003126 	beq	r2,zero,1008734 <__call_exitprocs+0x174>
 1008670:	dfc00c17 	ldw	ra,48(sp)
 1008674:	df000b17 	ldw	fp,44(sp)
 1008678:	ddc00a17 	ldw	r23,40(sp)
 100867c:	dd800917 	ldw	r22,36(sp)
 1008680:	dd400817 	ldw	r21,32(sp)
 1008684:	dd000717 	ldw	r20,28(sp)
 1008688:	dcc00617 	ldw	r19,24(sp)
 100868c:	dc800517 	ldw	r18,20(sp)
 1008690:	dc400417 	ldw	r17,16(sp)
 1008694:	dc000317 	ldw	r16,12(sp)
 1008698:	dec00d04 	addi	sp,sp,52
 100869c:	f800283a 	ret
 10086a0:	8409883a 	add	r4,r16,r16
 10086a4:	88c00117 	ldw	r3,4(r17)
 10086a8:	2105883a 	add	r2,r4,r4
 10086ac:	1445883a 	add	r2,r2,r17
 10086b0:	18ffffc4 	addi	r3,r3,-1
 10086b4:	11800217 	ldw	r6,8(r2)
 10086b8:	1c001526 	beq	r3,r16,1008710 <__call_exitprocs+0x150>
 10086bc:	10000215 	stw	zero,8(r2)
 10086c0:	303fe726 	beq	r6,zero,1008660 <__call_exitprocs+0xa0>
 10086c4:	00c00044 	movi	r3,1
 10086c8:	1c06983a 	sll	r3,r3,r16
 10086cc:	90804017 	ldw	r2,256(r18)
 10086d0:	8cc00117 	ldw	r19,4(r17)
 10086d4:	1884703a 	and	r2,r3,r2
 10086d8:	10001426 	beq	r2,zero,100872c <__call_exitprocs+0x16c>
 10086dc:	90804117 	ldw	r2,260(r18)
 10086e0:	1884703a 	and	r2,r3,r2
 10086e4:	10000c1e 	bne	r2,zero,1008718 <__call_exitprocs+0x158>
 10086e8:	2105883a 	add	r2,r4,r4
 10086ec:	1485883a 	add	r2,r2,r18
 10086f0:	11400017 	ldw	r5,0(r2)
 10086f4:	e009883a 	mov	r4,fp
 10086f8:	303ee83a 	callr	r6
 10086fc:	88800117 	ldw	r2,4(r17)
 1008700:	98bfc81e 	bne	r19,r2,1008624 <__call_exitprocs+0x64>
 1008704:	b8800017 	ldw	r2,0(r23)
 1008708:	147fd526 	beq	r2,r17,1008660 <__call_exitprocs+0xa0>
 100870c:	003fc506 	br	1008624 <__call_exitprocs+0x64>
 1008710:	8c000115 	stw	r16,4(r17)
 1008714:	003fea06 	br	10086c0 <__call_exitprocs+0x100>
 1008718:	2105883a 	add	r2,r4,r4
 100871c:	1485883a 	add	r2,r2,r18
 1008720:	11000017 	ldw	r4,0(r2)
 1008724:	303ee83a 	callr	r6
 1008728:	003ff406 	br	10086fc <__call_exitprocs+0x13c>
 100872c:	303ee83a 	callr	r6
 1008730:	003ff206 	br	10086fc <__call_exitprocs+0x13c>
 1008734:	88800117 	ldw	r2,4(r17)
 1008738:	1000081e 	bne	r2,zero,100875c <__call_exitprocs+0x19c>
 100873c:	89000017 	ldw	r4,0(r17)
 1008740:	20000726 	beq	r4,zero,1008760 <__call_exitprocs+0x1a0>
 1008744:	b9000015 	stw	r4,0(r23)
 1008748:	8809883a 	mov	r4,r17
 100874c:	10059200 	call	1005920 <free>
 1008750:	bc400017 	ldw	r17,0(r23)
 1008754:	883fb71e 	bne	r17,zero,1008634 <__call_exitprocs+0x74>
 1008758:	003fc506 	br	1008670 <__call_exitprocs+0xb0>
 100875c:	89000017 	ldw	r4,0(r17)
 1008760:	882f883a 	mov	r23,r17
 1008764:	2023883a 	mov	r17,r4
 1008768:	883fb21e 	bne	r17,zero,1008634 <__call_exitprocs+0x74>
 100876c:	003fc006 	br	1008670 <__call_exitprocs+0xb0>

01008770 <abort>:
 1008770:	deffff04 	addi	sp,sp,-4
 1008774:	01000184 	movi	r4,6
 1008778:	dfc00015 	stw	ra,0(sp)
 100877c:	100cbcc0 	call	100cbcc <raise>
 1008780:	01000044 	movi	r4,1
 1008784:	1010be00 	call	1010be0 <_exit>

01008788 <quorem>:
 1008788:	28c00417 	ldw	r3,16(r5)
 100878c:	20800417 	ldw	r2,16(r4)
 1008790:	defff604 	addi	sp,sp,-40
 1008794:	ddc00715 	stw	r23,28(sp)
 1008798:	dd400515 	stw	r21,20(sp)
 100879c:	dfc00915 	stw	ra,36(sp)
 10087a0:	df000815 	stw	fp,32(sp)
 10087a4:	dd800615 	stw	r22,24(sp)
 10087a8:	dd000415 	stw	r20,16(sp)
 10087ac:	dcc00315 	stw	r19,12(sp)
 10087b0:	dc800215 	stw	r18,8(sp)
 10087b4:	dc400115 	stw	r17,4(sp)
 10087b8:	dc000015 	stw	r16,0(sp)
 10087bc:	202f883a 	mov	r23,r4
 10087c0:	282b883a 	mov	r21,r5
 10087c4:	10c07416 	blt	r2,r3,1008998 <quorem+0x210>
 10087c8:	1c7fffc4 	addi	r17,r3,-1
 10087cc:	8c45883a 	add	r2,r17,r17
 10087d0:	1085883a 	add	r2,r2,r2
 10087d4:	2c000504 	addi	r16,r5,20
 10087d8:	24c00504 	addi	r19,r4,20
 10087dc:	14ed883a 	add	r22,r2,r19
 10087e0:	80a5883a 	add	r18,r16,r2
 10087e4:	b7000017 	ldw	fp,0(r22)
 10087e8:	91400017 	ldw	r5,0(r18)
 10087ec:	e009883a 	mov	r4,fp
 10087f0:	29400044 	addi	r5,r5,1
 10087f4:	10103dc0 	call	10103dc <__udivsi3>
 10087f8:	1029883a 	mov	r20,r2
 10087fc:	10003c1e 	bne	r2,zero,10088f0 <quorem+0x168>
 1008800:	a80b883a 	mov	r5,r21
 1008804:	b809883a 	mov	r4,r23
 1008808:	100b4180 	call	100b418 <__mcmp>
 100880c:	10002b16 	blt	r2,zero,10088bc <quorem+0x134>
 1008810:	a5000044 	addi	r20,r20,1
 1008814:	980f883a 	mov	r7,r19
 1008818:	0011883a 	mov	r8,zero
 100881c:	0009883a 	mov	r4,zero
 1008820:	81400017 	ldw	r5,0(r16)
 1008824:	38c00017 	ldw	r3,0(r7)
 1008828:	84000104 	addi	r16,r16,4
 100882c:	28bfffcc 	andi	r2,r5,65535
 1008830:	2085883a 	add	r2,r4,r2
 1008834:	11bfffcc 	andi	r6,r2,65535
 1008838:	193fffcc 	andi	r4,r3,65535
 100883c:	1004d43a 	srli	r2,r2,16
 1008840:	280ad43a 	srli	r5,r5,16
 1008844:	2189c83a 	sub	r4,r4,r6
 1008848:	2209883a 	add	r4,r4,r8
 100884c:	1806d43a 	srli	r3,r3,16
 1008850:	288b883a 	add	r5,r5,r2
 1008854:	200dd43a 	srai	r6,r4,16
 1008858:	28bfffcc 	andi	r2,r5,65535
 100885c:	1887c83a 	sub	r3,r3,r2
 1008860:	1987883a 	add	r3,r3,r6
 1008864:	3900000d 	sth	r4,0(r7)
 1008868:	38c0008d 	sth	r3,2(r7)
 100886c:	2808d43a 	srli	r4,r5,16
 1008870:	39c00104 	addi	r7,r7,4
 1008874:	1811d43a 	srai	r8,r3,16
 1008878:	943fe92e 	bgeu	r18,r16,1008820 <quorem+0x98>
 100887c:	8c45883a 	add	r2,r17,r17
 1008880:	1085883a 	add	r2,r2,r2
 1008884:	9885883a 	add	r2,r19,r2
 1008888:	10c00017 	ldw	r3,0(r2)
 100888c:	18000b1e 	bne	r3,zero,10088bc <quorem+0x134>
 1008890:	113fff04 	addi	r4,r2,-4
 1008894:	9900082e 	bgeu	r19,r4,10088b8 <quorem+0x130>
 1008898:	10bfff17 	ldw	r2,-4(r2)
 100889c:	10000326 	beq	r2,zero,10088ac <quorem+0x124>
 10088a0:	00000506 	br	10088b8 <quorem+0x130>
 10088a4:	20800017 	ldw	r2,0(r4)
 10088a8:	1000031e 	bne	r2,zero,10088b8 <quorem+0x130>
 10088ac:	213fff04 	addi	r4,r4,-4
 10088b0:	8c7fffc4 	addi	r17,r17,-1
 10088b4:	993ffb36 	bltu	r19,r4,10088a4 <quorem+0x11c>
 10088b8:	bc400415 	stw	r17,16(r23)
 10088bc:	a005883a 	mov	r2,r20
 10088c0:	dfc00917 	ldw	ra,36(sp)
 10088c4:	df000817 	ldw	fp,32(sp)
 10088c8:	ddc00717 	ldw	r23,28(sp)
 10088cc:	dd800617 	ldw	r22,24(sp)
 10088d0:	dd400517 	ldw	r21,20(sp)
 10088d4:	dd000417 	ldw	r20,16(sp)
 10088d8:	dcc00317 	ldw	r19,12(sp)
 10088dc:	dc800217 	ldw	r18,8(sp)
 10088e0:	dc400117 	ldw	r17,4(sp)
 10088e4:	dc000017 	ldw	r16,0(sp)
 10088e8:	dec00a04 	addi	sp,sp,40
 10088ec:	f800283a 	ret
 10088f0:	980f883a 	mov	r7,r19
 10088f4:	8011883a 	mov	r8,r16
 10088f8:	0013883a 	mov	r9,zero
 10088fc:	000d883a 	mov	r6,zero
 1008900:	40c00017 	ldw	r3,0(r8)
 1008904:	39000017 	ldw	r4,0(r7)
 1008908:	42000104 	addi	r8,r8,4
 100890c:	18bfffcc 	andi	r2,r3,65535
 1008910:	a085383a 	mul	r2,r20,r2
 1008914:	1806d43a 	srli	r3,r3,16
 1008918:	217fffcc 	andi	r5,r4,65535
 100891c:	3085883a 	add	r2,r6,r2
 1008920:	11bfffcc 	andi	r6,r2,65535
 1008924:	a0c7383a 	mul	r3,r20,r3
 1008928:	1004d43a 	srli	r2,r2,16
 100892c:	298bc83a 	sub	r5,r5,r6
 1008930:	2a4b883a 	add	r5,r5,r9
 1008934:	2008d43a 	srli	r4,r4,16
 1008938:	1887883a 	add	r3,r3,r2
 100893c:	280dd43a 	srai	r6,r5,16
 1008940:	18bfffcc 	andi	r2,r3,65535
 1008944:	2089c83a 	sub	r4,r4,r2
 1008948:	2189883a 	add	r4,r4,r6
 100894c:	3900008d 	sth	r4,2(r7)
 1008950:	3940000d 	sth	r5,0(r7)
 1008954:	180cd43a 	srli	r6,r3,16
 1008958:	39c00104 	addi	r7,r7,4
 100895c:	2013d43a 	srai	r9,r4,16
 1008960:	923fe72e 	bgeu	r18,r8,1008900 <quorem+0x178>
 1008964:	e03fa61e 	bne	fp,zero,1008800 <quorem+0x78>
 1008968:	b0ffff04 	addi	r3,r22,-4
 100896c:	98c0082e 	bgeu	r19,r3,1008990 <quorem+0x208>
 1008970:	b0bfff17 	ldw	r2,-4(r22)
 1008974:	10000326 	beq	r2,zero,1008984 <quorem+0x1fc>
 1008978:	00000506 	br	1008990 <quorem+0x208>
 100897c:	18800017 	ldw	r2,0(r3)
 1008980:	1000031e 	bne	r2,zero,1008990 <quorem+0x208>
 1008984:	18ffff04 	addi	r3,r3,-4
 1008988:	8c7fffc4 	addi	r17,r17,-1
 100898c:	98fffb36 	bltu	r19,r3,100897c <quorem+0x1f4>
 1008990:	bc400415 	stw	r17,16(r23)
 1008994:	003f9a06 	br	1008800 <quorem+0x78>
 1008998:	0005883a 	mov	r2,zero
 100899c:	003fc806 	br	10088c0 <quorem+0x138>

010089a0 <_dtoa_r>:
 10089a0:	22001017 	ldw	r8,64(r4)
 10089a4:	deffda04 	addi	sp,sp,-152
 10089a8:	dd402115 	stw	r21,132(sp)
 10089ac:	dd002015 	stw	r20,128(sp)
 10089b0:	dc801e15 	stw	r18,120(sp)
 10089b4:	dc401d15 	stw	r17,116(sp)
 10089b8:	dfc02515 	stw	ra,148(sp)
 10089bc:	df002415 	stw	fp,144(sp)
 10089c0:	ddc02315 	stw	r23,140(sp)
 10089c4:	dd802215 	stw	r22,136(sp)
 10089c8:	dcc01f15 	stw	r19,124(sp)
 10089cc:	dc001c15 	stw	r16,112(sp)
 10089d0:	d9001615 	stw	r4,88(sp)
 10089d4:	3023883a 	mov	r17,r6
 10089d8:	2829883a 	mov	r20,r5
 10089dc:	d9c01715 	stw	r7,92(sp)
 10089e0:	dc802817 	ldw	r18,160(sp)
 10089e4:	302b883a 	mov	r21,r6
 10089e8:	40000a26 	beq	r8,zero,1008a14 <_dtoa_r+0x74>
 10089ec:	20801117 	ldw	r2,68(r4)
 10089f0:	400b883a 	mov	r5,r8
 10089f4:	40800115 	stw	r2,4(r8)
 10089f8:	20c01117 	ldw	r3,68(r4)
 10089fc:	00800044 	movi	r2,1
 1008a00:	10c4983a 	sll	r2,r2,r3
 1008a04:	40800215 	stw	r2,8(r8)
 1008a08:	100b2bc0 	call	100b2bc <_Bfree>
 1008a0c:	d8c01617 	ldw	r3,88(sp)
 1008a10:	18001015 	stw	zero,64(r3)
 1008a14:	8800a316 	blt	r17,zero,1008ca4 <_dtoa_r+0x304>
 1008a18:	90000015 	stw	zero,0(r18)
 1008a1c:	a8dffc2c 	andhi	r3,r21,32752
 1008a20:	009ffc34 	movhi	r2,32752
 1008a24:	18809126 	beq	r3,r2,1008c6c <_dtoa_r+0x2cc>
 1008a28:	000d883a 	mov	r6,zero
 1008a2c:	000f883a 	mov	r7,zero
 1008a30:	a009883a 	mov	r4,r20
 1008a34:	a80b883a 	mov	r5,r21
 1008a38:	dd001215 	stw	r20,72(sp)
 1008a3c:	dd401315 	stw	r21,76(sp)
 1008a40:	100fd1c0 	call	100fd1c <__nedf2>
 1008a44:	1000171e 	bne	r2,zero,1008aa4 <_dtoa_r+0x104>
 1008a48:	d9802717 	ldw	r6,156(sp)
 1008a4c:	00800044 	movi	r2,1
 1008a50:	30800015 	stw	r2,0(r6)
 1008a54:	d8802917 	ldw	r2,164(sp)
 1008a58:	10029b26 	beq	r2,zero,10094c8 <_dtoa_r+0xb28>
 1008a5c:	d9002917 	ldw	r4,164(sp)
 1008a60:	00804074 	movhi	r2,257
 1008a64:	10942c44 	addi	r2,r2,20657
 1008a68:	10ffffc4 	addi	r3,r2,-1
 1008a6c:	20800015 	stw	r2,0(r4)
 1008a70:	1805883a 	mov	r2,r3
 1008a74:	dfc02517 	ldw	ra,148(sp)
 1008a78:	df002417 	ldw	fp,144(sp)
 1008a7c:	ddc02317 	ldw	r23,140(sp)
 1008a80:	dd802217 	ldw	r22,136(sp)
 1008a84:	dd402117 	ldw	r21,132(sp)
 1008a88:	dd002017 	ldw	r20,128(sp)
 1008a8c:	dcc01f17 	ldw	r19,124(sp)
 1008a90:	dc801e17 	ldw	r18,120(sp)
 1008a94:	dc401d17 	ldw	r17,116(sp)
 1008a98:	dc001c17 	ldw	r16,112(sp)
 1008a9c:	dec02604 	addi	sp,sp,152
 1008aa0:	f800283a 	ret
 1008aa4:	d9001617 	ldw	r4,88(sp)
 1008aa8:	d9401217 	ldw	r5,72(sp)
 1008aac:	d8800104 	addi	r2,sp,4
 1008ab0:	a80d883a 	mov	r6,r21
 1008ab4:	d9c00204 	addi	r7,sp,8
 1008ab8:	d8800015 	stw	r2,0(sp)
 1008abc:	100b8f80 	call	100b8f8 <__d2b>
 1008ac0:	d8800715 	stw	r2,28(sp)
 1008ac4:	a804d53a 	srli	r2,r21,20
 1008ac8:	1101ffcc 	andi	r4,r2,2047
 1008acc:	20008626 	beq	r4,zero,1008ce8 <_dtoa_r+0x348>
 1008ad0:	d8c01217 	ldw	r3,72(sp)
 1008ad4:	00800434 	movhi	r2,16
 1008ad8:	10bfffc4 	addi	r2,r2,-1
 1008adc:	ddc00117 	ldw	r23,4(sp)
 1008ae0:	a884703a 	and	r2,r21,r2
 1008ae4:	1811883a 	mov	r8,r3
 1008ae8:	124ffc34 	orhi	r9,r2,16368
 1008aec:	25bf0044 	addi	r22,r4,-1023
 1008af0:	d8000815 	stw	zero,32(sp)
 1008af4:	0005883a 	mov	r2,zero
 1008af8:	00cffe34 	movhi	r3,16376
 1008afc:	480b883a 	mov	r5,r9
 1008b00:	4009883a 	mov	r4,r8
 1008b04:	180f883a 	mov	r7,r3
 1008b08:	100d883a 	mov	r6,r2
 1008b0c:	100f5840 	call	100f584 <__subdf3>
 1008b10:	0218dbf4 	movhi	r8,25455
 1008b14:	4210d844 	addi	r8,r8,17249
 1008b18:	024ff4f4 	movhi	r9,16339
 1008b1c:	4a61e9c4 	addi	r9,r9,-30809
 1008b20:	480f883a 	mov	r7,r9
 1008b24:	400d883a 	mov	r6,r8
 1008b28:	180b883a 	mov	r5,r3
 1008b2c:	1009883a 	mov	r4,r2
 1008b30:	100f6780 	call	100f678 <__muldf3>
 1008b34:	0222d874 	movhi	r8,35681
 1008b38:	42322cc4 	addi	r8,r8,-14157
 1008b3c:	024ff1f4 	movhi	r9,16327
 1008b40:	4a628a04 	addi	r9,r9,-30168
 1008b44:	480f883a 	mov	r7,r9
 1008b48:	400d883a 	mov	r6,r8
 1008b4c:	180b883a 	mov	r5,r3
 1008b50:	1009883a 	mov	r4,r2
 1008b54:	100f6040 	call	100f604 <__adddf3>
 1008b58:	b009883a 	mov	r4,r22
 1008b5c:	1021883a 	mov	r16,r2
 1008b60:	1823883a 	mov	r17,r3
 1008b64:	100ff3c0 	call	100ff3c <__floatsidf>
 1008b68:	021427f4 	movhi	r8,20639
 1008b6c:	421e7ec4 	addi	r8,r8,31227
 1008b70:	024ff4f4 	movhi	r9,16339
 1008b74:	4a5104c4 	addi	r9,r9,17427
 1008b78:	480f883a 	mov	r7,r9
 1008b7c:	400d883a 	mov	r6,r8
 1008b80:	180b883a 	mov	r5,r3
 1008b84:	1009883a 	mov	r4,r2
 1008b88:	100f6780 	call	100f678 <__muldf3>
 1008b8c:	180f883a 	mov	r7,r3
 1008b90:	880b883a 	mov	r5,r17
 1008b94:	100d883a 	mov	r6,r2
 1008b98:	8009883a 	mov	r4,r16
 1008b9c:	100f6040 	call	100f604 <__adddf3>
 1008ba0:	1009883a 	mov	r4,r2
 1008ba4:	180b883a 	mov	r5,r3
 1008ba8:	1021883a 	mov	r16,r2
 1008bac:	1823883a 	mov	r17,r3
 1008bb0:	10100340 	call	1010034 <__fixdfsi>
 1008bb4:	000d883a 	mov	r6,zero
 1008bb8:	000f883a 	mov	r7,zero
 1008bbc:	8009883a 	mov	r4,r16
 1008bc0:	880b883a 	mov	r5,r17
 1008bc4:	d8800d15 	stw	r2,52(sp)
 1008bc8:	100feb40 	call	100feb4 <__ltdf2>
 1008bcc:	10031716 	blt	r2,zero,100982c <_dtoa_r+0xe8c>
 1008bd0:	d8c00d17 	ldw	r3,52(sp)
 1008bd4:	00800584 	movi	r2,22
 1008bd8:	10c1482e 	bgeu	r2,r3,10090fc <_dtoa_r+0x75c>
 1008bdc:	01000044 	movi	r4,1
 1008be0:	d9000c15 	stw	r4,48(sp)
 1008be4:	bd85c83a 	sub	r2,r23,r22
 1008be8:	11bfffc4 	addi	r6,r2,-1
 1008bec:	30030b16 	blt	r6,zero,100981c <_dtoa_r+0xe7c>
 1008bf0:	d9800a15 	stw	r6,40(sp)
 1008bf4:	d8001115 	stw	zero,68(sp)
 1008bf8:	d8c00d17 	ldw	r3,52(sp)
 1008bfc:	1802ff16 	blt	r3,zero,10097fc <_dtoa_r+0xe5c>
 1008c00:	d9000a17 	ldw	r4,40(sp)
 1008c04:	d8c00915 	stw	r3,36(sp)
 1008c08:	d8001015 	stw	zero,64(sp)
 1008c0c:	20c9883a 	add	r4,r4,r3
 1008c10:	d9000a15 	stw	r4,40(sp)
 1008c14:	d9001717 	ldw	r4,92(sp)
 1008c18:	00800244 	movi	r2,9
 1008c1c:	11004636 	bltu	r2,r4,1008d38 <_dtoa_r+0x398>
 1008c20:	00800144 	movi	r2,5
 1008c24:	11020416 	blt	r2,r4,1009438 <_dtoa_r+0xa98>
 1008c28:	04400044 	movi	r17,1
 1008c2c:	d8c01717 	ldw	r3,92(sp)
 1008c30:	00800144 	movi	r2,5
 1008c34:	10c1ed36 	bltu	r2,r3,10093ec <_dtoa_r+0xa4c>
 1008c38:	18c5883a 	add	r2,r3,r3
 1008c3c:	1085883a 	add	r2,r2,r2
 1008c40:	00c04074 	movhi	r3,257
 1008c44:	18e31504 	addi	r3,r3,-29612
 1008c48:	10c5883a 	add	r2,r2,r3
 1008c4c:	11000017 	ldw	r4,0(r2)
 1008c50:	2000683a 	jmp	r4
 1008c54:	01008d40 	call	1008d4 <__alt_mem_onchip+0x1008d4>
 1008c58:	01008d40 	call	1008d4 <__alt_mem_onchip+0x1008d4>
 1008c5c:	01009740 	call	100974 <__alt_mem_onchip+0x100974>
 1008c60:	01009718 	cmpnei	r4,zero,604
 1008c64:	0100975c 	xori	r4,zero,605
 1008c68:	01009768 	cmpgeui	r4,zero,605
 1008c6c:	d9002717 	ldw	r4,156(sp)
 1008c70:	0089c3c4 	movi	r2,9999
 1008c74:	20800015 	stw	r2,0(r4)
 1008c78:	a0001026 	beq	r20,zero,1008cbc <_dtoa_r+0x31c>
 1008c7c:	00c04074 	movhi	r3,257
 1008c80:	18d43804 	addi	r3,r3,20704
 1008c84:	d9802917 	ldw	r6,164(sp)
 1008c88:	303f7926 	beq	r6,zero,1008a70 <_dtoa_r+0xd0>
 1008c8c:	188000c7 	ldb	r2,3(r3)
 1008c90:	190000c4 	addi	r4,r3,3
 1008c94:	1000101e 	bne	r2,zero,1008cd8 <_dtoa_r+0x338>
 1008c98:	d8802917 	ldw	r2,164(sp)
 1008c9c:	11000015 	stw	r4,0(r2)
 1008ca0:	003f7306 	br	1008a70 <_dtoa_r+0xd0>
 1008ca4:	00a00034 	movhi	r2,32768
 1008ca8:	10bfffc4 	addi	r2,r2,-1
 1008cac:	00c00044 	movi	r3,1
 1008cb0:	88aa703a 	and	r21,r17,r2
 1008cb4:	90c00015 	stw	r3,0(r18)
 1008cb8:	003f5806 	br	1008a1c <_dtoa_r+0x7c>
 1008cbc:	00800434 	movhi	r2,16
 1008cc0:	10bfffc4 	addi	r2,r2,-1
 1008cc4:	a884703a 	and	r2,r21,r2
 1008cc8:	103fec1e 	bne	r2,zero,1008c7c <_dtoa_r+0x2dc>
 1008ccc:	00c04074 	movhi	r3,257
 1008cd0:	18d43504 	addi	r3,r3,20692
 1008cd4:	003feb06 	br	1008c84 <_dtoa_r+0x2e4>
 1008cd8:	d8802917 	ldw	r2,164(sp)
 1008cdc:	19000204 	addi	r4,r3,8
 1008ce0:	11000015 	stw	r4,0(r2)
 1008ce4:	003f6206 	br	1008a70 <_dtoa_r+0xd0>
 1008ce8:	ddc00117 	ldw	r23,4(sp)
 1008cec:	d8800217 	ldw	r2,8(sp)
 1008cf0:	01000804 	movi	r4,32
 1008cf4:	b8c10c84 	addi	r3,r23,1074
 1008cf8:	18a3883a 	add	r17,r3,r2
 1008cfc:	2441b80e 	bge	r4,r17,10093e0 <_dtoa_r+0xa40>
 1008d00:	00c01004 	movi	r3,64
 1008d04:	1c47c83a 	sub	r3,r3,r17
 1008d08:	88bff804 	addi	r2,r17,-32
 1008d0c:	a8c6983a 	sll	r3,r21,r3
 1008d10:	a084d83a 	srl	r2,r20,r2
 1008d14:	1888b03a 	or	r4,r3,r2
 1008d18:	101010c0 	call	101010c <__floatunsidf>
 1008d1c:	1011883a 	mov	r8,r2
 1008d20:	00bf8434 	movhi	r2,65040
 1008d24:	01000044 	movi	r4,1
 1008d28:	10d3883a 	add	r9,r2,r3
 1008d2c:	8dbef344 	addi	r22,r17,-1075
 1008d30:	d9000815 	stw	r4,32(sp)
 1008d34:	003f6f06 	br	1008af4 <_dtoa_r+0x154>
 1008d38:	d8001715 	stw	zero,92(sp)
 1008d3c:	04400044 	movi	r17,1
 1008d40:	00bfffc4 	movi	r2,-1
 1008d44:	00c00044 	movi	r3,1
 1008d48:	d8800e15 	stw	r2,56(sp)
 1008d4c:	d8002615 	stw	zero,152(sp)
 1008d50:	d8800f15 	stw	r2,60(sp)
 1008d54:	d8c00b15 	stw	r3,44(sp)
 1008d58:	1021883a 	mov	r16,r2
 1008d5c:	d8801617 	ldw	r2,88(sp)
 1008d60:	10001115 	stw	zero,68(r2)
 1008d64:	d8801617 	ldw	r2,88(sp)
 1008d68:	11401117 	ldw	r5,68(r2)
 1008d6c:	1009883a 	mov	r4,r2
 1008d70:	100b83c0 	call	100b83c <_Balloc>
 1008d74:	d8c01617 	ldw	r3,88(sp)
 1008d78:	d8800515 	stw	r2,20(sp)
 1008d7c:	18801015 	stw	r2,64(r3)
 1008d80:	00800384 	movi	r2,14
 1008d84:	14006836 	bltu	r2,r16,1008f28 <_dtoa_r+0x588>
 1008d88:	8805003a 	cmpeq	r2,r17,zero
 1008d8c:	1000661e 	bne	r2,zero,1008f28 <_dtoa_r+0x588>
 1008d90:	d9000d17 	ldw	r4,52(sp)
 1008d94:	0102300e 	bge	zero,r4,1009658 <_dtoa_r+0xcb8>
 1008d98:	208003cc 	andi	r2,r4,15
 1008d9c:	100490fa 	slli	r2,r2,3
 1008da0:	2025d13a 	srai	r18,r4,4
 1008da4:	00c04074 	movhi	r3,257
 1008da8:	18d44904 	addi	r3,r3,20772
 1008dac:	10c5883a 	add	r2,r2,r3
 1008db0:	90c0040c 	andi	r3,r18,16
 1008db4:	14000017 	ldw	r16,0(r2)
 1008db8:	14400117 	ldw	r17,4(r2)
 1008dbc:	18036a1e 	bne	r3,zero,1009b68 <_dtoa_r+0x11c8>
 1008dc0:	05800084 	movi	r22,2
 1008dc4:	90001026 	beq	r18,zero,1008e08 <_dtoa_r+0x468>
 1008dc8:	04c04074 	movhi	r19,257
 1008dcc:	9cd47b04 	addi	r19,r19,20972
 1008dd0:	9080004c 	andi	r2,r18,1
 1008dd4:	1005003a 	cmpeq	r2,r2,zero
 1008dd8:	1000081e 	bne	r2,zero,1008dfc <_dtoa_r+0x45c>
 1008ddc:	99800017 	ldw	r6,0(r19)
 1008de0:	99c00117 	ldw	r7,4(r19)
 1008de4:	880b883a 	mov	r5,r17
 1008de8:	8009883a 	mov	r4,r16
 1008dec:	100f6780 	call	100f678 <__muldf3>
 1008df0:	1021883a 	mov	r16,r2
 1008df4:	b5800044 	addi	r22,r22,1
 1008df8:	1823883a 	mov	r17,r3
 1008dfc:	9025d07a 	srai	r18,r18,1
 1008e00:	9cc00204 	addi	r19,r19,8
 1008e04:	903ff21e 	bne	r18,zero,1008dd0 <_dtoa_r+0x430>
 1008e08:	a80b883a 	mov	r5,r21
 1008e0c:	a009883a 	mov	r4,r20
 1008e10:	880f883a 	mov	r7,r17
 1008e14:	800d883a 	mov	r6,r16
 1008e18:	100fa3c0 	call	100fa3c <__divdf3>
 1008e1c:	1029883a 	mov	r20,r2
 1008e20:	182b883a 	mov	r21,r3
 1008e24:	d8c00c17 	ldw	r3,48(sp)
 1008e28:	1805003a 	cmpeq	r2,r3,zero
 1008e2c:	1000081e 	bne	r2,zero,1008e50 <_dtoa_r+0x4b0>
 1008e30:	0005883a 	mov	r2,zero
 1008e34:	00cffc34 	movhi	r3,16368
 1008e38:	180f883a 	mov	r7,r3
 1008e3c:	a009883a 	mov	r4,r20
 1008e40:	a80b883a 	mov	r5,r21
 1008e44:	100d883a 	mov	r6,r2
 1008e48:	100feb40 	call	100feb4 <__ltdf2>
 1008e4c:	1003fe16 	blt	r2,zero,1009e48 <_dtoa_r+0x14a8>
 1008e50:	b009883a 	mov	r4,r22
 1008e54:	100ff3c0 	call	100ff3c <__floatsidf>
 1008e58:	180b883a 	mov	r5,r3
 1008e5c:	1009883a 	mov	r4,r2
 1008e60:	a00d883a 	mov	r6,r20
 1008e64:	a80f883a 	mov	r7,r21
 1008e68:	100f6780 	call	100f678 <__muldf3>
 1008e6c:	0011883a 	mov	r8,zero
 1008e70:	02500734 	movhi	r9,16412
 1008e74:	1009883a 	mov	r4,r2
 1008e78:	180b883a 	mov	r5,r3
 1008e7c:	480f883a 	mov	r7,r9
 1008e80:	400d883a 	mov	r6,r8
 1008e84:	100f6040 	call	100f604 <__adddf3>
 1008e88:	d9000f17 	ldw	r4,60(sp)
 1008e8c:	102d883a 	mov	r22,r2
 1008e90:	00bf3034 	movhi	r2,64704
 1008e94:	18b9883a 	add	fp,r3,r2
 1008e98:	e02f883a 	mov	r23,fp
 1008e9c:	20028f1e 	bne	r4,zero,10098dc <_dtoa_r+0xf3c>
 1008ea0:	0005883a 	mov	r2,zero
 1008ea4:	00d00534 	movhi	r3,16404
 1008ea8:	a009883a 	mov	r4,r20
 1008eac:	a80b883a 	mov	r5,r21
 1008eb0:	180f883a 	mov	r7,r3
 1008eb4:	100d883a 	mov	r6,r2
 1008eb8:	100f5840 	call	100f584 <__subdf3>
 1008ebc:	1009883a 	mov	r4,r2
 1008ec0:	e00f883a 	mov	r7,fp
 1008ec4:	180b883a 	mov	r5,r3
 1008ec8:	b00d883a 	mov	r6,r22
 1008ecc:	1025883a 	mov	r18,r2
 1008ed0:	1827883a 	mov	r19,r3
 1008ed4:	100fda40 	call	100fda4 <__gtdf2>
 1008ed8:	00834f16 	blt	zero,r2,1009c18 <_dtoa_r+0x1278>
 1008edc:	e0e0003c 	xorhi	r3,fp,32768
 1008ee0:	9009883a 	mov	r4,r18
 1008ee4:	980b883a 	mov	r5,r19
 1008ee8:	180f883a 	mov	r7,r3
 1008eec:	b00d883a 	mov	r6,r22
 1008ef0:	100feb40 	call	100feb4 <__ltdf2>
 1008ef4:	1000080e 	bge	r2,zero,1008f18 <_dtoa_r+0x578>
 1008ef8:	0027883a 	mov	r19,zero
 1008efc:	0025883a 	mov	r18,zero
 1008f00:	d8802617 	ldw	r2,152(sp)
 1008f04:	df000517 	ldw	fp,20(sp)
 1008f08:	d8000615 	stw	zero,24(sp)
 1008f0c:	0084303a 	nor	r2,zero,r2
 1008f10:	d8800d15 	stw	r2,52(sp)
 1008f14:	00019b06 	br	1009584 <_dtoa_r+0xbe4>
 1008f18:	d9801217 	ldw	r6,72(sp)
 1008f1c:	d8801317 	ldw	r2,76(sp)
 1008f20:	3029883a 	mov	r20,r6
 1008f24:	102b883a 	mov	r21,r2
 1008f28:	d8c00217 	ldw	r3,8(sp)
 1008f2c:	18008516 	blt	r3,zero,1009144 <_dtoa_r+0x7a4>
 1008f30:	d9000d17 	ldw	r4,52(sp)
 1008f34:	00800384 	movi	r2,14
 1008f38:	11008216 	blt	r2,r4,1009144 <_dtoa_r+0x7a4>
 1008f3c:	200490fa 	slli	r2,r4,3
 1008f40:	d9802617 	ldw	r6,152(sp)
 1008f44:	00c04074 	movhi	r3,257
 1008f48:	18d44904 	addi	r3,r3,20772
 1008f4c:	10c5883a 	add	r2,r2,r3
 1008f50:	14800017 	ldw	r18,0(r2)
 1008f54:	14c00117 	ldw	r19,4(r2)
 1008f58:	30031e16 	blt	r6,zero,1009bd4 <_dtoa_r+0x1234>
 1008f5c:	d9000517 	ldw	r4,20(sp)
 1008f60:	d8c00f17 	ldw	r3,60(sp)
 1008f64:	a823883a 	mov	r17,r21
 1008f68:	a021883a 	mov	r16,r20
 1008f6c:	192b883a 	add	r21,r3,r4
 1008f70:	2039883a 	mov	fp,r4
 1008f74:	00000f06 	br	1008fb4 <_dtoa_r+0x614>
 1008f78:	0005883a 	mov	r2,zero
 1008f7c:	00d00934 	movhi	r3,16420
 1008f80:	5009883a 	mov	r4,r10
 1008f84:	580b883a 	mov	r5,r11
 1008f88:	180f883a 	mov	r7,r3
 1008f8c:	100d883a 	mov	r6,r2
 1008f90:	100f6780 	call	100f678 <__muldf3>
 1008f94:	180b883a 	mov	r5,r3
 1008f98:	000d883a 	mov	r6,zero
 1008f9c:	000f883a 	mov	r7,zero
 1008fa0:	1009883a 	mov	r4,r2
 1008fa4:	1021883a 	mov	r16,r2
 1008fa8:	1823883a 	mov	r17,r3
 1008fac:	100fd1c0 	call	100fd1c <__nedf2>
 1008fb0:	10004526 	beq	r2,zero,10090c8 <_dtoa_r+0x728>
 1008fb4:	900d883a 	mov	r6,r18
 1008fb8:	980f883a 	mov	r7,r19
 1008fbc:	8009883a 	mov	r4,r16
 1008fc0:	880b883a 	mov	r5,r17
 1008fc4:	100fa3c0 	call	100fa3c <__divdf3>
 1008fc8:	180b883a 	mov	r5,r3
 1008fcc:	1009883a 	mov	r4,r2
 1008fd0:	10100340 	call	1010034 <__fixdfsi>
 1008fd4:	1009883a 	mov	r4,r2
 1008fd8:	1029883a 	mov	r20,r2
 1008fdc:	100ff3c0 	call	100ff3c <__floatsidf>
 1008fe0:	180f883a 	mov	r7,r3
 1008fe4:	9009883a 	mov	r4,r18
 1008fe8:	980b883a 	mov	r5,r19
 1008fec:	100d883a 	mov	r6,r2
 1008ff0:	100f6780 	call	100f678 <__muldf3>
 1008ff4:	180f883a 	mov	r7,r3
 1008ff8:	880b883a 	mov	r5,r17
 1008ffc:	8009883a 	mov	r4,r16
 1009000:	100d883a 	mov	r6,r2
 1009004:	100f5840 	call	100f584 <__subdf3>
 1009008:	1015883a 	mov	r10,r2
 100900c:	a0800c04 	addi	r2,r20,48
 1009010:	e0800005 	stb	r2,0(fp)
 1009014:	e7000044 	addi	fp,fp,1
 1009018:	1817883a 	mov	r11,r3
 100901c:	e57fd61e 	bne	fp,r21,1008f78 <_dtoa_r+0x5d8>
 1009020:	500d883a 	mov	r6,r10
 1009024:	180f883a 	mov	r7,r3
 1009028:	5009883a 	mov	r4,r10
 100902c:	180b883a 	mov	r5,r3
 1009030:	100f6040 	call	100f604 <__adddf3>
 1009034:	100d883a 	mov	r6,r2
 1009038:	9009883a 	mov	r4,r18
 100903c:	980b883a 	mov	r5,r19
 1009040:	180f883a 	mov	r7,r3
 1009044:	1021883a 	mov	r16,r2
 1009048:	1823883a 	mov	r17,r3
 100904c:	100feb40 	call	100feb4 <__ltdf2>
 1009050:	10000816 	blt	r2,zero,1009074 <_dtoa_r+0x6d4>
 1009054:	980b883a 	mov	r5,r19
 1009058:	800d883a 	mov	r6,r16
 100905c:	880f883a 	mov	r7,r17
 1009060:	9009883a 	mov	r4,r18
 1009064:	100fc940 	call	100fc94 <__eqdf2>
 1009068:	1000171e 	bne	r2,zero,10090c8 <_dtoa_r+0x728>
 100906c:	a080004c 	andi	r2,r20,1
 1009070:	10001526 	beq	r2,zero,10090c8 <_dtoa_r+0x728>
 1009074:	d8800d17 	ldw	r2,52(sp)
 1009078:	d8800415 	stw	r2,16(sp)
 100907c:	e009883a 	mov	r4,fp
 1009080:	213fffc4 	addi	r4,r4,-1
 1009084:	20c00007 	ldb	r3,0(r4)
 1009088:	00800e44 	movi	r2,57
 100908c:	1880081e 	bne	r3,r2,10090b0 <_dtoa_r+0x710>
 1009090:	d8800517 	ldw	r2,20(sp)
 1009094:	113ffa1e 	bne	r2,r4,1009080 <_dtoa_r+0x6e0>
 1009098:	d8c00417 	ldw	r3,16(sp)
 100909c:	d9800517 	ldw	r6,20(sp)
 10090a0:	00800c04 	movi	r2,48
 10090a4:	18c00044 	addi	r3,r3,1
 10090a8:	d8c00415 	stw	r3,16(sp)
 10090ac:	30800005 	stb	r2,0(r6)
 10090b0:	20800003 	ldbu	r2,0(r4)
 10090b4:	d8c00417 	ldw	r3,16(sp)
 10090b8:	27000044 	addi	fp,r4,1
 10090bc:	10800044 	addi	r2,r2,1
 10090c0:	d8c00d15 	stw	r3,52(sp)
 10090c4:	20800005 	stb	r2,0(r4)
 10090c8:	d9001617 	ldw	r4,88(sp)
 10090cc:	d9400717 	ldw	r5,28(sp)
 10090d0:	100b2bc0 	call	100b2bc <_Bfree>
 10090d4:	e0000005 	stb	zero,0(fp)
 10090d8:	d9800d17 	ldw	r6,52(sp)
 10090dc:	d8c02717 	ldw	r3,156(sp)
 10090e0:	d9002917 	ldw	r4,164(sp)
 10090e4:	30800044 	addi	r2,r6,1
 10090e8:	18800015 	stw	r2,0(r3)
 10090ec:	20029c26 	beq	r4,zero,1009b60 <_dtoa_r+0x11c0>
 10090f0:	d8c00517 	ldw	r3,20(sp)
 10090f4:	27000015 	stw	fp,0(r4)
 10090f8:	003e5d06 	br	1008a70 <_dtoa_r+0xd0>
 10090fc:	d9800d17 	ldw	r6,52(sp)
 1009100:	00c04074 	movhi	r3,257
 1009104:	18d44904 	addi	r3,r3,20772
 1009108:	d9001217 	ldw	r4,72(sp)
 100910c:	300490fa 	slli	r2,r6,3
 1009110:	d9401317 	ldw	r5,76(sp)
 1009114:	10c5883a 	add	r2,r2,r3
 1009118:	12000017 	ldw	r8,0(r2)
 100911c:	12400117 	ldw	r9,4(r2)
 1009120:	400d883a 	mov	r6,r8
 1009124:	480f883a 	mov	r7,r9
 1009128:	100feb40 	call	100feb4 <__ltdf2>
 100912c:	1000030e 	bge	r2,zero,100913c <_dtoa_r+0x79c>
 1009130:	d8800d17 	ldw	r2,52(sp)
 1009134:	10bfffc4 	addi	r2,r2,-1
 1009138:	d8800d15 	stw	r2,52(sp)
 100913c:	d8000c15 	stw	zero,48(sp)
 1009140:	003ea806 	br	1008be4 <_dtoa_r+0x244>
 1009144:	d9000b17 	ldw	r4,44(sp)
 1009148:	202cc03a 	cmpne	r22,r4,zero
 100914c:	b000c71e 	bne	r22,zero,100946c <_dtoa_r+0xacc>
 1009150:	dc001117 	ldw	r16,68(sp)
 1009154:	dc801017 	ldw	r18,64(sp)
 1009158:	0027883a 	mov	r19,zero
 100915c:	04000b0e 	bge	zero,r16,100918c <_dtoa_r+0x7ec>
 1009160:	d8c00a17 	ldw	r3,40(sp)
 1009164:	00c0090e 	bge	zero,r3,100918c <_dtoa_r+0x7ec>
 1009168:	8005883a 	mov	r2,r16
 100916c:	1c011316 	blt	r3,r16,10095bc <_dtoa_r+0xc1c>
 1009170:	d9000a17 	ldw	r4,40(sp)
 1009174:	d9801117 	ldw	r6,68(sp)
 1009178:	80a1c83a 	sub	r16,r16,r2
 100917c:	2089c83a 	sub	r4,r4,r2
 1009180:	308dc83a 	sub	r6,r6,r2
 1009184:	d9000a15 	stw	r4,40(sp)
 1009188:	d9801115 	stw	r6,68(sp)
 100918c:	d8801017 	ldw	r2,64(sp)
 1009190:	0080150e 	bge	zero,r2,10091e8 <_dtoa_r+0x848>
 1009194:	d8c00b17 	ldw	r3,44(sp)
 1009198:	1805003a 	cmpeq	r2,r3,zero
 100919c:	1001c91e 	bne	r2,zero,10098c4 <_dtoa_r+0xf24>
 10091a0:	04800e0e 	bge	zero,r18,10091dc <_dtoa_r+0x83c>
 10091a4:	d9001617 	ldw	r4,88(sp)
 10091a8:	980b883a 	mov	r5,r19
 10091ac:	900d883a 	mov	r6,r18
 10091b0:	100c0700 	call	100c070 <__pow5mult>
 10091b4:	d9001617 	ldw	r4,88(sp)
 10091b8:	d9800717 	ldw	r6,28(sp)
 10091bc:	100b883a 	mov	r5,r2
 10091c0:	1027883a 	mov	r19,r2
 10091c4:	100bd4c0 	call	100bd4c <__multiply>
 10091c8:	d9001617 	ldw	r4,88(sp)
 10091cc:	d9400717 	ldw	r5,28(sp)
 10091d0:	1023883a 	mov	r17,r2
 10091d4:	100b2bc0 	call	100b2bc <_Bfree>
 10091d8:	dc400715 	stw	r17,28(sp)
 10091dc:	d9001017 	ldw	r4,64(sp)
 10091e0:	248dc83a 	sub	r6,r4,r18
 10091e4:	30010e1e 	bne	r6,zero,1009620 <_dtoa_r+0xc80>
 10091e8:	d9001617 	ldw	r4,88(sp)
 10091ec:	04400044 	movi	r17,1
 10091f0:	880b883a 	mov	r5,r17
 10091f4:	100bf340 	call	100bf34 <__i2b>
 10091f8:	d9800917 	ldw	r6,36(sp)
 10091fc:	1025883a 	mov	r18,r2
 1009200:	0180040e 	bge	zero,r6,1009214 <_dtoa_r+0x874>
 1009204:	d9001617 	ldw	r4,88(sp)
 1009208:	100b883a 	mov	r5,r2
 100920c:	100c0700 	call	100c070 <__pow5mult>
 1009210:	1025883a 	mov	r18,r2
 1009214:	d8801717 	ldw	r2,92(sp)
 1009218:	8880f30e 	bge	r17,r2,10095e8 <_dtoa_r+0xc48>
 100921c:	0023883a 	mov	r17,zero
 1009220:	d9800917 	ldw	r6,36(sp)
 1009224:	30019e1e 	bne	r6,zero,10098a0 <_dtoa_r+0xf00>
 1009228:	00c00044 	movi	r3,1
 100922c:	d9000a17 	ldw	r4,40(sp)
 1009230:	20c5883a 	add	r2,r4,r3
 1009234:	10c007cc 	andi	r3,r2,31
 1009238:	1800841e 	bne	r3,zero,100944c <_dtoa_r+0xaac>
 100923c:	00800704 	movi	r2,28
 1009240:	d9000a17 	ldw	r4,40(sp)
 1009244:	d9801117 	ldw	r6,68(sp)
 1009248:	80a1883a 	add	r16,r16,r2
 100924c:	2089883a 	add	r4,r4,r2
 1009250:	308d883a 	add	r6,r6,r2
 1009254:	d9000a15 	stw	r4,40(sp)
 1009258:	d9801115 	stw	r6,68(sp)
 100925c:	d8801117 	ldw	r2,68(sp)
 1009260:	0080050e 	bge	zero,r2,1009278 <_dtoa_r+0x8d8>
 1009264:	d9400717 	ldw	r5,28(sp)
 1009268:	d9001617 	ldw	r4,88(sp)
 100926c:	100d883a 	mov	r6,r2
 1009270:	100bc000 	call	100bc00 <__lshift>
 1009274:	d8800715 	stw	r2,28(sp)
 1009278:	d8c00a17 	ldw	r3,40(sp)
 100927c:	00c0050e 	bge	zero,r3,1009294 <_dtoa_r+0x8f4>
 1009280:	d9001617 	ldw	r4,88(sp)
 1009284:	900b883a 	mov	r5,r18
 1009288:	180d883a 	mov	r6,r3
 100928c:	100bc000 	call	100bc00 <__lshift>
 1009290:	1025883a 	mov	r18,r2
 1009294:	d9000c17 	ldw	r4,48(sp)
 1009298:	2005003a 	cmpeq	r2,r4,zero
 100929c:	10016f26 	beq	r2,zero,100985c <_dtoa_r+0xebc>
 10092a0:	d9000f17 	ldw	r4,60(sp)
 10092a4:	0102170e 	bge	zero,r4,1009b04 <_dtoa_r+0x1164>
 10092a8:	d9800b17 	ldw	r6,44(sp)
 10092ac:	3005003a 	cmpeq	r2,r6,zero
 10092b0:	1000881e 	bne	r2,zero,10094d4 <_dtoa_r+0xb34>
 10092b4:	0400050e 	bge	zero,r16,10092cc <_dtoa_r+0x92c>
 10092b8:	d9001617 	ldw	r4,88(sp)
 10092bc:	980b883a 	mov	r5,r19
 10092c0:	800d883a 	mov	r6,r16
 10092c4:	100bc000 	call	100bc00 <__lshift>
 10092c8:	1027883a 	mov	r19,r2
 10092cc:	8804c03a 	cmpne	r2,r17,zero
 10092d0:	1002541e 	bne	r2,zero,1009c24 <_dtoa_r+0x1284>
 10092d4:	980b883a 	mov	r5,r19
 10092d8:	dd800517 	ldw	r22,20(sp)
 10092dc:	dcc00615 	stw	r19,24(sp)
 10092e0:	a700004c 	andi	fp,r20,1
 10092e4:	2827883a 	mov	r19,r5
 10092e8:	d9000717 	ldw	r4,28(sp)
 10092ec:	900b883a 	mov	r5,r18
 10092f0:	10087880 	call	1008788 <quorem>
 10092f4:	d9000717 	ldw	r4,28(sp)
 10092f8:	d9400617 	ldw	r5,24(sp)
 10092fc:	1023883a 	mov	r17,r2
 1009300:	8dc00c04 	addi	r23,r17,48
 1009304:	100b4180 	call	100b418 <__mcmp>
 1009308:	d9001617 	ldw	r4,88(sp)
 100930c:	900b883a 	mov	r5,r18
 1009310:	980d883a 	mov	r6,r19
 1009314:	1029883a 	mov	r20,r2
 1009318:	100ba740 	call	100ba74 <__mdiff>
 100931c:	102b883a 	mov	r21,r2
 1009320:	10800317 	ldw	r2,12(r2)
 1009324:	1001281e 	bne	r2,zero,10097c8 <_dtoa_r+0xe28>
 1009328:	d9000717 	ldw	r4,28(sp)
 100932c:	a80b883a 	mov	r5,r21
 1009330:	100b4180 	call	100b418 <__mcmp>
 1009334:	d9001617 	ldw	r4,88(sp)
 1009338:	1021883a 	mov	r16,r2
 100933c:	a80b883a 	mov	r5,r21
 1009340:	100b2bc0 	call	100b2bc <_Bfree>
 1009344:	8000041e 	bne	r16,zero,1009358 <_dtoa_r+0x9b8>
 1009348:	d8801717 	ldw	r2,92(sp)
 100934c:	1000021e 	bne	r2,zero,1009358 <_dtoa_r+0x9b8>
 1009350:	e004c03a 	cmpne	r2,fp,zero
 1009354:	10011726 	beq	r2,zero,10097b4 <_dtoa_r+0xe14>
 1009358:	a0010616 	blt	r20,zero,1009774 <_dtoa_r+0xdd4>
 100935c:	a000041e 	bne	r20,zero,1009370 <_dtoa_r+0x9d0>
 1009360:	d8c01717 	ldw	r3,92(sp)
 1009364:	1800021e 	bne	r3,zero,1009370 <_dtoa_r+0x9d0>
 1009368:	e004c03a 	cmpne	r2,fp,zero
 100936c:	10010126 	beq	r2,zero,1009774 <_dtoa_r+0xdd4>
 1009370:	04023d16 	blt	zero,r16,1009c68 <_dtoa_r+0x12c8>
 1009374:	b5c00005 	stb	r23,0(r22)
 1009378:	d9800517 	ldw	r6,20(sp)
 100937c:	d9000f17 	ldw	r4,60(sp)
 1009380:	b5800044 	addi	r22,r22,1
 1009384:	3105883a 	add	r2,r6,r4
 1009388:	b0806526 	beq	r22,r2,1009520 <_dtoa_r+0xb80>
 100938c:	d9400717 	ldw	r5,28(sp)
 1009390:	d9001617 	ldw	r4,88(sp)
 1009394:	01800284 	movi	r6,10
 1009398:	000f883a 	mov	r7,zero
 100939c:	100bf700 	call	100bf70 <__multadd>
 10093a0:	d8800715 	stw	r2,28(sp)
 10093a4:	d8800617 	ldw	r2,24(sp)
 10093a8:	14c10c26 	beq	r2,r19,10097dc <_dtoa_r+0xe3c>
 10093ac:	d9400617 	ldw	r5,24(sp)
 10093b0:	d9001617 	ldw	r4,88(sp)
 10093b4:	01800284 	movi	r6,10
 10093b8:	000f883a 	mov	r7,zero
 10093bc:	100bf700 	call	100bf70 <__multadd>
 10093c0:	d9001617 	ldw	r4,88(sp)
 10093c4:	980b883a 	mov	r5,r19
 10093c8:	01800284 	movi	r6,10
 10093cc:	000f883a 	mov	r7,zero
 10093d0:	d8800615 	stw	r2,24(sp)
 10093d4:	100bf700 	call	100bf70 <__multadd>
 10093d8:	1027883a 	mov	r19,r2
 10093dc:	003fc206 	br	10092e8 <_dtoa_r+0x948>
 10093e0:	2445c83a 	sub	r2,r4,r17
 10093e4:	a088983a 	sll	r4,r20,r2
 10093e8:	003e4b06 	br	1008d18 <_dtoa_r+0x378>
 10093ec:	01bfffc4 	movi	r6,-1
 10093f0:	00800044 	movi	r2,1
 10093f4:	d9800e15 	stw	r6,56(sp)
 10093f8:	d9800f15 	stw	r6,60(sp)
 10093fc:	d8800b15 	stw	r2,44(sp)
 1009400:	d8c01617 	ldw	r3,88(sp)
 1009404:	008005c4 	movi	r2,23
 1009408:	18001115 	stw	zero,68(r3)
 100940c:	1580082e 	bgeu	r2,r22,1009430 <_dtoa_r+0xa90>
 1009410:	00c00104 	movi	r3,4
 1009414:	0009883a 	mov	r4,zero
 1009418:	18c7883a 	add	r3,r3,r3
 100941c:	18800504 	addi	r2,r3,20
 1009420:	21000044 	addi	r4,r4,1
 1009424:	b0bffc2e 	bgeu	r22,r2,1009418 <_dtoa_r+0xa78>
 1009428:	d9801617 	ldw	r6,88(sp)
 100942c:	31001115 	stw	r4,68(r6)
 1009430:	dc000f17 	ldw	r16,60(sp)
 1009434:	003e4b06 	br	1008d64 <_dtoa_r+0x3c4>
 1009438:	d9801717 	ldw	r6,92(sp)
 100943c:	0023883a 	mov	r17,zero
 1009440:	31bfff04 	addi	r6,r6,-4
 1009444:	d9801715 	stw	r6,92(sp)
 1009448:	003df806 	br	1008c2c <_dtoa_r+0x28c>
 100944c:	00800804 	movi	r2,32
 1009450:	10c9c83a 	sub	r4,r2,r3
 1009454:	00c00104 	movi	r3,4
 1009458:	19005a16 	blt	r3,r4,10095c4 <_dtoa_r+0xc24>
 100945c:	008000c4 	movi	r2,3
 1009460:	113f7e16 	blt	r2,r4,100925c <_dtoa_r+0x8bc>
 1009464:	20800704 	addi	r2,r4,28
 1009468:	003f7506 	br	1009240 <_dtoa_r+0x8a0>
 100946c:	d9801717 	ldw	r6,92(sp)
 1009470:	00800044 	movi	r2,1
 1009474:	1180a10e 	bge	r2,r6,10096fc <_dtoa_r+0xd5c>
 1009478:	d9800f17 	ldw	r6,60(sp)
 100947c:	d8c01017 	ldw	r3,64(sp)
 1009480:	30bfffc4 	addi	r2,r6,-1
 1009484:	1881c616 	blt	r3,r2,1009ba0 <_dtoa_r+0x1200>
 1009488:	18a5c83a 	sub	r18,r3,r2
 100948c:	d8800f17 	ldw	r2,60(sp)
 1009490:	10026216 	blt	r2,zero,1009e1c <_dtoa_r+0x147c>
 1009494:	dc001117 	ldw	r16,68(sp)
 1009498:	1007883a 	mov	r3,r2
 100949c:	d9800a17 	ldw	r6,40(sp)
 10094a0:	d8801117 	ldw	r2,68(sp)
 10094a4:	d9001617 	ldw	r4,88(sp)
 10094a8:	30cd883a 	add	r6,r6,r3
 10094ac:	10c5883a 	add	r2,r2,r3
 10094b0:	01400044 	movi	r5,1
 10094b4:	d9800a15 	stw	r6,40(sp)
 10094b8:	d8801115 	stw	r2,68(sp)
 10094bc:	100bf340 	call	100bf34 <__i2b>
 10094c0:	1027883a 	mov	r19,r2
 10094c4:	003f2506 	br	100915c <_dtoa_r+0x7bc>
 10094c8:	00c04074 	movhi	r3,257
 10094cc:	18d42c04 	addi	r3,r3,20656
 10094d0:	003d6706 	br	1008a70 <_dtoa_r+0xd0>
 10094d4:	dd800517 	ldw	r22,20(sp)
 10094d8:	04000044 	movi	r16,1
 10094dc:	00000706 	br	10094fc <_dtoa_r+0xb5c>
 10094e0:	d9400717 	ldw	r5,28(sp)
 10094e4:	d9001617 	ldw	r4,88(sp)
 10094e8:	01800284 	movi	r6,10
 10094ec:	000f883a 	mov	r7,zero
 10094f0:	100bf700 	call	100bf70 <__multadd>
 10094f4:	d8800715 	stw	r2,28(sp)
 10094f8:	84000044 	addi	r16,r16,1
 10094fc:	d9000717 	ldw	r4,28(sp)
 1009500:	900b883a 	mov	r5,r18
 1009504:	10087880 	call	1008788 <quorem>
 1009508:	15c00c04 	addi	r23,r2,48
 100950c:	b5c00005 	stb	r23,0(r22)
 1009510:	d8c00f17 	ldw	r3,60(sp)
 1009514:	b5800044 	addi	r22,r22,1
 1009518:	80fff116 	blt	r16,r3,10094e0 <_dtoa_r+0xb40>
 100951c:	d8000615 	stw	zero,24(sp)
 1009520:	d9400717 	ldw	r5,28(sp)
 1009524:	d9001617 	ldw	r4,88(sp)
 1009528:	01800044 	movi	r6,1
 100952c:	100bc000 	call	100bc00 <__lshift>
 1009530:	1009883a 	mov	r4,r2
 1009534:	900b883a 	mov	r5,r18
 1009538:	d8800715 	stw	r2,28(sp)
 100953c:	100b4180 	call	100b418 <__mcmp>
 1009540:	00803c0e 	bge	zero,r2,1009634 <_dtoa_r+0xc94>
 1009544:	b009883a 	mov	r4,r22
 1009548:	213fffc4 	addi	r4,r4,-1
 100954c:	21400003 	ldbu	r5,0(r4)
 1009550:	00800e44 	movi	r2,57
 1009554:	28c03fcc 	andi	r3,r5,255
 1009558:	18c0201c 	xori	r3,r3,128
 100955c:	18ffe004 	addi	r3,r3,-128
 1009560:	1881981e 	bne	r3,r2,1009bc4 <_dtoa_r+0x1224>
 1009564:	d9800517 	ldw	r6,20(sp)
 1009568:	21bff71e 	bne	r4,r6,1009548 <_dtoa_r+0xba8>
 100956c:	d8800d17 	ldw	r2,52(sp)
 1009570:	37000044 	addi	fp,r6,1
 1009574:	10800044 	addi	r2,r2,1
 1009578:	d8800d15 	stw	r2,52(sp)
 100957c:	00800c44 	movi	r2,49
 1009580:	30800005 	stb	r2,0(r6)
 1009584:	d9001617 	ldw	r4,88(sp)
 1009588:	900b883a 	mov	r5,r18
 100958c:	100b2bc0 	call	100b2bc <_Bfree>
 1009590:	983ecd26 	beq	r19,zero,10090c8 <_dtoa_r+0x728>
 1009594:	d8c00617 	ldw	r3,24(sp)
 1009598:	18000426 	beq	r3,zero,10095ac <_dtoa_r+0xc0c>
 100959c:	1cc00326 	beq	r3,r19,10095ac <_dtoa_r+0xc0c>
 10095a0:	d9001617 	ldw	r4,88(sp)
 10095a4:	180b883a 	mov	r5,r3
 10095a8:	100b2bc0 	call	100b2bc <_Bfree>
 10095ac:	d9001617 	ldw	r4,88(sp)
 10095b0:	980b883a 	mov	r5,r19
 10095b4:	100b2bc0 	call	100b2bc <_Bfree>
 10095b8:	003ec306 	br	10090c8 <_dtoa_r+0x728>
 10095bc:	1805883a 	mov	r2,r3
 10095c0:	003eeb06 	br	1009170 <_dtoa_r+0x7d0>
 10095c4:	d9800a17 	ldw	r6,40(sp)
 10095c8:	d8c01117 	ldw	r3,68(sp)
 10095cc:	20bfff04 	addi	r2,r4,-4
 10095d0:	308d883a 	add	r6,r6,r2
 10095d4:	1887883a 	add	r3,r3,r2
 10095d8:	80a1883a 	add	r16,r16,r2
 10095dc:	d9800a15 	stw	r6,40(sp)
 10095e0:	d8c01115 	stw	r3,68(sp)
 10095e4:	003f1d06 	br	100925c <_dtoa_r+0x8bc>
 10095e8:	a03f0c1e 	bne	r20,zero,100921c <_dtoa_r+0x87c>
 10095ec:	00800434 	movhi	r2,16
 10095f0:	10bfffc4 	addi	r2,r2,-1
 10095f4:	a884703a 	and	r2,r21,r2
 10095f8:	103f081e 	bne	r2,zero,100921c <_dtoa_r+0x87c>
 10095fc:	a89ffc2c 	andhi	r2,r21,32752
 1009600:	103f0626 	beq	r2,zero,100921c <_dtoa_r+0x87c>
 1009604:	d8c01117 	ldw	r3,68(sp)
 1009608:	d9000a17 	ldw	r4,40(sp)
 100960c:	18c00044 	addi	r3,r3,1
 1009610:	21000044 	addi	r4,r4,1
 1009614:	d8c01115 	stw	r3,68(sp)
 1009618:	d9000a15 	stw	r4,40(sp)
 100961c:	003f0006 	br	1009220 <_dtoa_r+0x880>
 1009620:	d9400717 	ldw	r5,28(sp)
 1009624:	d9001617 	ldw	r4,88(sp)
 1009628:	100c0700 	call	100c070 <__pow5mult>
 100962c:	d8800715 	stw	r2,28(sp)
 1009630:	003eed06 	br	10091e8 <_dtoa_r+0x848>
 1009634:	1000021e 	bne	r2,zero,1009640 <_dtoa_r+0xca0>
 1009638:	b880004c 	andi	r2,r23,1
 100963c:	103fc11e 	bne	r2,zero,1009544 <_dtoa_r+0xba4>
 1009640:	b5bfffc4 	addi	r22,r22,-1
 1009644:	b0c00007 	ldb	r3,0(r22)
 1009648:	00800c04 	movi	r2,48
 100964c:	18bffc26 	beq	r3,r2,1009640 <_dtoa_r+0xca0>
 1009650:	b7000044 	addi	fp,r22,1
 1009654:	003fcb06 	br	1009584 <_dtoa_r+0xbe4>
 1009658:	d9800d17 	ldw	r6,52(sp)
 100965c:	018fc83a 	sub	r7,zero,r6
 1009660:	3801f726 	beq	r7,zero,1009e40 <_dtoa_r+0x14a0>
 1009664:	398003cc 	andi	r6,r7,15
 1009668:	300c90fa 	slli	r6,r6,3
 100966c:	01404074 	movhi	r5,257
 1009670:	29544904 	addi	r5,r5,20772
 1009674:	d9001217 	ldw	r4,72(sp)
 1009678:	314d883a 	add	r6,r6,r5
 100967c:	30c00117 	ldw	r3,4(r6)
 1009680:	30800017 	ldw	r2,0(r6)
 1009684:	d9401317 	ldw	r5,76(sp)
 1009688:	3821d13a 	srai	r16,r7,4
 100968c:	100d883a 	mov	r6,r2
 1009690:	180f883a 	mov	r7,r3
 1009694:	100f6780 	call	100f678 <__muldf3>
 1009698:	1011883a 	mov	r8,r2
 100969c:	1813883a 	mov	r9,r3
 10096a0:	1029883a 	mov	r20,r2
 10096a4:	182b883a 	mov	r21,r3
 10096a8:	8001e526 	beq	r16,zero,1009e40 <_dtoa_r+0x14a0>
 10096ac:	05800084 	movi	r22,2
 10096b0:	04404074 	movhi	r17,257
 10096b4:	8c547b04 	addi	r17,r17,20972
 10096b8:	8080004c 	andi	r2,r16,1
 10096bc:	1005003a 	cmpeq	r2,r2,zero
 10096c0:	1000081e 	bne	r2,zero,10096e4 <_dtoa_r+0xd44>
 10096c4:	89800017 	ldw	r6,0(r17)
 10096c8:	89c00117 	ldw	r7,4(r17)
 10096cc:	480b883a 	mov	r5,r9
 10096d0:	4009883a 	mov	r4,r8
 10096d4:	100f6780 	call	100f678 <__muldf3>
 10096d8:	1011883a 	mov	r8,r2
 10096dc:	b5800044 	addi	r22,r22,1
 10096e0:	1813883a 	mov	r9,r3
 10096e4:	8021d07a 	srai	r16,r16,1
 10096e8:	8c400204 	addi	r17,r17,8
 10096ec:	803ff21e 	bne	r16,zero,10096b8 <_dtoa_r+0xd18>
 10096f0:	4029883a 	mov	r20,r8
 10096f4:	482b883a 	mov	r21,r9
 10096f8:	003dca06 	br	1008e24 <_dtoa_r+0x484>
 10096fc:	d9000817 	ldw	r4,32(sp)
 1009700:	2005003a 	cmpeq	r2,r4,zero
 1009704:	1001f61e 	bne	r2,zero,1009ee0 <_dtoa_r+0x1540>
 1009708:	dc001117 	ldw	r16,68(sp)
 100970c:	dc801017 	ldw	r18,64(sp)
 1009710:	18c10cc4 	addi	r3,r3,1075
 1009714:	003f6106 	br	100949c <_dtoa_r+0xafc>
 1009718:	d8000b15 	stw	zero,44(sp)
 100971c:	d9802617 	ldw	r6,152(sp)
 1009720:	d8c00d17 	ldw	r3,52(sp)
 1009724:	30800044 	addi	r2,r6,1
 1009728:	18ad883a 	add	r22,r3,r2
 100972c:	b13fffc4 	addi	r4,r22,-1
 1009730:	d9000e15 	stw	r4,56(sp)
 1009734:	0581f60e 	bge	zero,r22,1009f10 <_dtoa_r+0x1570>
 1009738:	dd800f15 	stw	r22,60(sp)
 100973c:	003f3006 	br	1009400 <_dtoa_r+0xa60>
 1009740:	d8000b15 	stw	zero,44(sp)
 1009744:	d9002617 	ldw	r4,152(sp)
 1009748:	0101eb0e 	bge	zero,r4,1009ef8 <_dtoa_r+0x1558>
 100974c:	202d883a 	mov	r22,r4
 1009750:	d9000e15 	stw	r4,56(sp)
 1009754:	d9000f15 	stw	r4,60(sp)
 1009758:	003f2906 	br	1009400 <_dtoa_r+0xa60>
 100975c:	01800044 	movi	r6,1
 1009760:	d9800b15 	stw	r6,44(sp)
 1009764:	003ff706 	br	1009744 <_dtoa_r+0xda4>
 1009768:	01000044 	movi	r4,1
 100976c:	d9000b15 	stw	r4,44(sp)
 1009770:	003fea06 	br	100971c <_dtoa_r+0xd7c>
 1009774:	04000c0e 	bge	zero,r16,10097a8 <_dtoa_r+0xe08>
 1009778:	d9400717 	ldw	r5,28(sp)
 100977c:	d9001617 	ldw	r4,88(sp)
 1009780:	01800044 	movi	r6,1
 1009784:	100bc000 	call	100bc00 <__lshift>
 1009788:	1009883a 	mov	r4,r2
 100978c:	900b883a 	mov	r5,r18
 1009790:	d8800715 	stw	r2,28(sp)
 1009794:	100b4180 	call	100b418 <__mcmp>
 1009798:	0081e00e 	bge	zero,r2,1009f1c <_dtoa_r+0x157c>
 100979c:	bdc00044 	addi	r23,r23,1
 10097a0:	00800e84 	movi	r2,58
 10097a4:	b881a226 	beq	r23,r2,1009e30 <_dtoa_r+0x1490>
 10097a8:	b7000044 	addi	fp,r22,1
 10097ac:	b5c00005 	stb	r23,0(r22)
 10097b0:	003f7406 	br	1009584 <_dtoa_r+0xbe4>
 10097b4:	00800e44 	movi	r2,57
 10097b8:	b8819d26 	beq	r23,r2,1009e30 <_dtoa_r+0x1490>
 10097bc:	053ffa0e 	bge	zero,r20,10097a8 <_dtoa_r+0xe08>
 10097c0:	8dc00c44 	addi	r23,r17,49
 10097c4:	003ff806 	br	10097a8 <_dtoa_r+0xe08>
 10097c8:	d9001617 	ldw	r4,88(sp)
 10097cc:	a80b883a 	mov	r5,r21
 10097d0:	04000044 	movi	r16,1
 10097d4:	100b2bc0 	call	100b2bc <_Bfree>
 10097d8:	003edf06 	br	1009358 <_dtoa_r+0x9b8>
 10097dc:	d9001617 	ldw	r4,88(sp)
 10097e0:	980b883a 	mov	r5,r19
 10097e4:	01800284 	movi	r6,10
 10097e8:	000f883a 	mov	r7,zero
 10097ec:	100bf700 	call	100bf70 <__multadd>
 10097f0:	1027883a 	mov	r19,r2
 10097f4:	d8800615 	stw	r2,24(sp)
 10097f8:	003ebb06 	br	10092e8 <_dtoa_r+0x948>
 10097fc:	d9801117 	ldw	r6,68(sp)
 1009800:	d8800d17 	ldw	r2,52(sp)
 1009804:	d8000915 	stw	zero,36(sp)
 1009808:	308dc83a 	sub	r6,r6,r2
 100980c:	0087c83a 	sub	r3,zero,r2
 1009810:	d9801115 	stw	r6,68(sp)
 1009814:	d8c01015 	stw	r3,64(sp)
 1009818:	003cfe06 	br	1008c14 <_dtoa_r+0x274>
 100981c:	018dc83a 	sub	r6,zero,r6
 1009820:	d9801115 	stw	r6,68(sp)
 1009824:	d8000a15 	stw	zero,40(sp)
 1009828:	003cf306 	br	1008bf8 <_dtoa_r+0x258>
 100982c:	d9000d17 	ldw	r4,52(sp)
 1009830:	100ff3c0 	call	100ff3c <__floatsidf>
 1009834:	880b883a 	mov	r5,r17
 1009838:	8009883a 	mov	r4,r16
 100983c:	180f883a 	mov	r7,r3
 1009840:	100d883a 	mov	r6,r2
 1009844:	100fd1c0 	call	100fd1c <__nedf2>
 1009848:	103ce126 	beq	r2,zero,1008bd0 <_dtoa_r+0x230>
 100984c:	d9800d17 	ldw	r6,52(sp)
 1009850:	31bfffc4 	addi	r6,r6,-1
 1009854:	d9800d15 	stw	r6,52(sp)
 1009858:	003cdd06 	br	1008bd0 <_dtoa_r+0x230>
 100985c:	d9000717 	ldw	r4,28(sp)
 1009860:	900b883a 	mov	r5,r18
 1009864:	100b4180 	call	100b418 <__mcmp>
 1009868:	103e8d0e 	bge	r2,zero,10092a0 <_dtoa_r+0x900>
 100986c:	d9400717 	ldw	r5,28(sp)
 1009870:	d9001617 	ldw	r4,88(sp)
 1009874:	01800284 	movi	r6,10
 1009878:	000f883a 	mov	r7,zero
 100987c:	100bf700 	call	100bf70 <__multadd>
 1009880:	d9800d17 	ldw	r6,52(sp)
 1009884:	d8800715 	stw	r2,28(sp)
 1009888:	31bfffc4 	addi	r6,r6,-1
 100988c:	d9800d15 	stw	r6,52(sp)
 1009890:	b001a71e 	bne	r22,zero,1009f30 <_dtoa_r+0x1590>
 1009894:	d8800e17 	ldw	r2,56(sp)
 1009898:	d8800f15 	stw	r2,60(sp)
 100989c:	003e8006 	br	10092a0 <_dtoa_r+0x900>
 10098a0:	90800417 	ldw	r2,16(r18)
 10098a4:	1085883a 	add	r2,r2,r2
 10098a8:	1085883a 	add	r2,r2,r2
 10098ac:	1485883a 	add	r2,r2,r18
 10098b0:	11000417 	ldw	r4,16(r2)
 10098b4:	100b2e40 	call	100b2e4 <__hi0bits>
 10098b8:	00c00804 	movi	r3,32
 10098bc:	1887c83a 	sub	r3,r3,r2
 10098c0:	003e5a06 	br	100922c <_dtoa_r+0x88c>
 10098c4:	d9400717 	ldw	r5,28(sp)
 10098c8:	d9801017 	ldw	r6,64(sp)
 10098cc:	d9001617 	ldw	r4,88(sp)
 10098d0:	100c0700 	call	100c070 <__pow5mult>
 10098d4:	d8800715 	stw	r2,28(sp)
 10098d8:	003e4306 	br	10091e8 <_dtoa_r+0x848>
 10098dc:	d9800f17 	ldw	r6,60(sp)
 10098e0:	d8800d17 	ldw	r2,52(sp)
 10098e4:	d9800315 	stw	r6,12(sp)
 10098e8:	d8800415 	stw	r2,16(sp)
 10098ec:	d8c00b17 	ldw	r3,44(sp)
 10098f0:	1805003a 	cmpeq	r2,r3,zero
 10098f4:	1000e21e 	bne	r2,zero,1009c80 <_dtoa_r+0x12e0>
 10098f8:	d9000317 	ldw	r4,12(sp)
 10098fc:	0005883a 	mov	r2,zero
 1009900:	00cff834 	movhi	r3,16352
 1009904:	200c90fa 	slli	r6,r4,3
 1009908:	01004074 	movhi	r4,257
 100990c:	21144904 	addi	r4,r4,20772
 1009910:	180b883a 	mov	r5,r3
 1009914:	310d883a 	add	r6,r6,r4
 1009918:	327fff17 	ldw	r9,-4(r6)
 100991c:	323ffe17 	ldw	r8,-8(r6)
 1009920:	1009883a 	mov	r4,r2
 1009924:	480f883a 	mov	r7,r9
 1009928:	400d883a 	mov	r6,r8
 100992c:	100fa3c0 	call	100fa3c <__divdf3>
 1009930:	180b883a 	mov	r5,r3
 1009934:	b00d883a 	mov	r6,r22
 1009938:	b80f883a 	mov	r7,r23
 100993c:	1009883a 	mov	r4,r2
 1009940:	100f5840 	call	100f584 <__subdf3>
 1009944:	a80b883a 	mov	r5,r21
 1009948:	a009883a 	mov	r4,r20
 100994c:	d8c01915 	stw	r3,100(sp)
 1009950:	d8801815 	stw	r2,96(sp)
 1009954:	10100340 	call	1010034 <__fixdfsi>
 1009958:	1009883a 	mov	r4,r2
 100995c:	1027883a 	mov	r19,r2
 1009960:	100ff3c0 	call	100ff3c <__floatsidf>
 1009964:	a80b883a 	mov	r5,r21
 1009968:	a009883a 	mov	r4,r20
 100996c:	180f883a 	mov	r7,r3
 1009970:	100d883a 	mov	r6,r2
 1009974:	100f5840 	call	100f584 <__subdf3>
 1009978:	d9801817 	ldw	r6,96(sp)
 100997c:	1823883a 	mov	r17,r3
 1009980:	d8801415 	stw	r2,80(sp)
 1009984:	302d883a 	mov	r22,r6
 1009988:	d9800517 	ldw	r6,20(sp)
 100998c:	9cc00c04 	addi	r19,r19,48
 1009990:	dc401515 	stw	r17,84(sp)
 1009994:	d8c01917 	ldw	r3,100(sp)
 1009998:	34c00005 	stb	r19,0(r6)
 100999c:	d8800517 	ldw	r2,20(sp)
 10099a0:	d9401917 	ldw	r5,100(sp)
 10099a4:	d9801417 	ldw	r6,80(sp)
 10099a8:	b009883a 	mov	r4,r22
 10099ac:	880f883a 	mov	r7,r17
 10099b0:	182f883a 	mov	r23,r3
 10099b4:	17000044 	addi	fp,r2,1
 10099b8:	100fda40 	call	100fda4 <__gtdf2>
 10099bc:	00804e16 	blt	zero,r2,1009af8 <_dtoa_r+0x1158>
 10099c0:	d9801417 	ldw	r6,80(sp)
 10099c4:	0005883a 	mov	r2,zero
 10099c8:	00cffc34 	movhi	r3,16368
 10099cc:	180b883a 	mov	r5,r3
 10099d0:	880f883a 	mov	r7,r17
 10099d4:	1009883a 	mov	r4,r2
 10099d8:	100f5840 	call	100f584 <__subdf3>
 10099dc:	d9401917 	ldw	r5,100(sp)
 10099e0:	180f883a 	mov	r7,r3
 10099e4:	b009883a 	mov	r4,r22
 10099e8:	100d883a 	mov	r6,r2
 10099ec:	100fda40 	call	100fda4 <__gtdf2>
 10099f0:	00bda216 	blt	zero,r2,100907c <_dtoa_r+0x6dc>
 10099f4:	d8c00317 	ldw	r3,12(sp)
 10099f8:	00800044 	movi	r2,1
 10099fc:	10c01216 	blt	r2,r3,1009a48 <_dtoa_r+0x10a8>
 1009a00:	003d4506 	br	1008f18 <_dtoa_r+0x578>
 1009a04:	d9801417 	ldw	r6,80(sp)
 1009a08:	0005883a 	mov	r2,zero
 1009a0c:	00cffc34 	movhi	r3,16368
 1009a10:	180b883a 	mov	r5,r3
 1009a14:	880f883a 	mov	r7,r17
 1009a18:	1009883a 	mov	r4,r2
 1009a1c:	100f5840 	call	100f584 <__subdf3>
 1009a20:	d9c01b17 	ldw	r7,108(sp)
 1009a24:	180b883a 	mov	r5,r3
 1009a28:	1009883a 	mov	r4,r2
 1009a2c:	b00d883a 	mov	r6,r22
 1009a30:	100feb40 	call	100feb4 <__ltdf2>
 1009a34:	103d9116 	blt	r2,zero,100907c <_dtoa_r+0x6dc>
 1009a38:	d9800517 	ldw	r6,20(sp)
 1009a3c:	d9000317 	ldw	r4,12(sp)
 1009a40:	3105883a 	add	r2,r6,r4
 1009a44:	e0bd3426 	beq	fp,r2,1008f18 <_dtoa_r+0x578>
 1009a48:	04500934 	movhi	r17,16420
 1009a4c:	0021883a 	mov	r16,zero
 1009a50:	b80b883a 	mov	r5,r23
 1009a54:	b009883a 	mov	r4,r22
 1009a58:	800d883a 	mov	r6,r16
 1009a5c:	880f883a 	mov	r7,r17
 1009a60:	100f6780 	call	100f678 <__muldf3>
 1009a64:	d9401517 	ldw	r5,84(sp)
 1009a68:	d9001417 	ldw	r4,80(sp)
 1009a6c:	880f883a 	mov	r7,r17
 1009a70:	000d883a 	mov	r6,zero
 1009a74:	d8801a15 	stw	r2,104(sp)
 1009a78:	d8c01b15 	stw	r3,108(sp)
 1009a7c:	100f6780 	call	100f678 <__muldf3>
 1009a80:	180b883a 	mov	r5,r3
 1009a84:	1009883a 	mov	r4,r2
 1009a88:	1823883a 	mov	r17,r3
 1009a8c:	1021883a 	mov	r16,r2
 1009a90:	10100340 	call	1010034 <__fixdfsi>
 1009a94:	1009883a 	mov	r4,r2
 1009a98:	102b883a 	mov	r21,r2
 1009a9c:	100ff3c0 	call	100ff3c <__floatsidf>
 1009aa0:	880b883a 	mov	r5,r17
 1009aa4:	8009883a 	mov	r4,r16
 1009aa8:	180f883a 	mov	r7,r3
 1009aac:	100d883a 	mov	r6,r2
 1009ab0:	100f5840 	call	100f584 <__subdf3>
 1009ab4:	1021883a 	mov	r16,r2
 1009ab8:	d9001b17 	ldw	r4,108(sp)
 1009abc:	1823883a 	mov	r17,r3
 1009ac0:	dc001415 	stw	r16,80(sp)
 1009ac4:	ad400c04 	addi	r21,r21,48
 1009ac8:	dc401515 	stw	r17,84(sp)
 1009acc:	d8801a17 	ldw	r2,104(sp)
 1009ad0:	e5400005 	stb	r21,0(fp)
 1009ad4:	202f883a 	mov	r23,r4
 1009ad8:	d9c01b17 	ldw	r7,108(sp)
 1009adc:	d9001417 	ldw	r4,80(sp)
 1009ae0:	880b883a 	mov	r5,r17
 1009ae4:	100d883a 	mov	r6,r2
 1009ae8:	102d883a 	mov	r22,r2
 1009aec:	e7000044 	addi	fp,fp,1
 1009af0:	100feb40 	call	100feb4 <__ltdf2>
 1009af4:	103fc30e 	bge	r2,zero,1009a04 <_dtoa_r+0x1064>
 1009af8:	d9000417 	ldw	r4,16(sp)
 1009afc:	d9000d15 	stw	r4,52(sp)
 1009b00:	003d7106 	br	10090c8 <_dtoa_r+0x728>
 1009b04:	d9801717 	ldw	r6,92(sp)
 1009b08:	00800084 	movi	r2,2
 1009b0c:	11bde60e 	bge	r2,r6,10092a8 <_dtoa_r+0x908>
 1009b10:	203cfb1e 	bne	r4,zero,1008f00 <_dtoa_r+0x560>
 1009b14:	d9001617 	ldw	r4,88(sp)
 1009b18:	900b883a 	mov	r5,r18
 1009b1c:	01800144 	movi	r6,5
 1009b20:	000f883a 	mov	r7,zero
 1009b24:	100bf700 	call	100bf70 <__multadd>
 1009b28:	d9000717 	ldw	r4,28(sp)
 1009b2c:	100b883a 	mov	r5,r2
 1009b30:	1025883a 	mov	r18,r2
 1009b34:	100b4180 	call	100b418 <__mcmp>
 1009b38:	00bcf10e 	bge	zero,r2,1008f00 <_dtoa_r+0x560>
 1009b3c:	d8c00d17 	ldw	r3,52(sp)
 1009b40:	d9000517 	ldw	r4,20(sp)
 1009b44:	d8000615 	stw	zero,24(sp)
 1009b48:	18c00044 	addi	r3,r3,1
 1009b4c:	d8c00d15 	stw	r3,52(sp)
 1009b50:	00800c44 	movi	r2,49
 1009b54:	27000044 	addi	fp,r4,1
 1009b58:	20800005 	stb	r2,0(r4)
 1009b5c:	003e8906 	br	1009584 <_dtoa_r+0xbe4>
 1009b60:	d8c00517 	ldw	r3,20(sp)
 1009b64:	003bc206 	br	1008a70 <_dtoa_r+0xd0>
 1009b68:	01804074 	movhi	r6,257
 1009b6c:	31947b04 	addi	r6,r6,20972
 1009b70:	30c00917 	ldw	r3,36(r6)
 1009b74:	30800817 	ldw	r2,32(r6)
 1009b78:	d9001217 	ldw	r4,72(sp)
 1009b7c:	d9401317 	ldw	r5,76(sp)
 1009b80:	180f883a 	mov	r7,r3
 1009b84:	100d883a 	mov	r6,r2
 1009b88:	100fa3c0 	call	100fa3c <__divdf3>
 1009b8c:	948003cc 	andi	r18,r18,15
 1009b90:	058000c4 	movi	r22,3
 1009b94:	1029883a 	mov	r20,r2
 1009b98:	182b883a 	mov	r21,r3
 1009b9c:	003c8906 	br	1008dc4 <_dtoa_r+0x424>
 1009ba0:	d9001017 	ldw	r4,64(sp)
 1009ba4:	d9800917 	ldw	r6,36(sp)
 1009ba8:	0025883a 	mov	r18,zero
 1009bac:	1105c83a 	sub	r2,r2,r4
 1009bb0:	2089883a 	add	r4,r4,r2
 1009bb4:	308d883a 	add	r6,r6,r2
 1009bb8:	d9001015 	stw	r4,64(sp)
 1009bbc:	d9800915 	stw	r6,36(sp)
 1009bc0:	003e3206 	br	100948c <_dtoa_r+0xaec>
 1009bc4:	28800044 	addi	r2,r5,1
 1009bc8:	27000044 	addi	fp,r4,1
 1009bcc:	20800005 	stb	r2,0(r4)
 1009bd0:	003e6c06 	br	1009584 <_dtoa_r+0xbe4>
 1009bd4:	d8800f17 	ldw	r2,60(sp)
 1009bd8:	00bce016 	blt	zero,r2,1008f5c <_dtoa_r+0x5bc>
 1009bdc:	d9800f17 	ldw	r6,60(sp)
 1009be0:	303cc51e 	bne	r6,zero,1008ef8 <_dtoa_r+0x558>
 1009be4:	0005883a 	mov	r2,zero
 1009be8:	00d00534 	movhi	r3,16404
 1009bec:	980b883a 	mov	r5,r19
 1009bf0:	180f883a 	mov	r7,r3
 1009bf4:	9009883a 	mov	r4,r18
 1009bf8:	100d883a 	mov	r6,r2
 1009bfc:	100f6780 	call	100f678 <__muldf3>
 1009c00:	180b883a 	mov	r5,r3
 1009c04:	a80f883a 	mov	r7,r21
 1009c08:	1009883a 	mov	r4,r2
 1009c0c:	a00d883a 	mov	r6,r20
 1009c10:	100fe2c0 	call	100fe2c <__gedf2>
 1009c14:	103cb80e 	bge	r2,zero,1008ef8 <_dtoa_r+0x558>
 1009c18:	0027883a 	mov	r19,zero
 1009c1c:	0025883a 	mov	r18,zero
 1009c20:	003fc606 	br	1009b3c <_dtoa_r+0x119c>
 1009c24:	99400117 	ldw	r5,4(r19)
 1009c28:	d9001617 	ldw	r4,88(sp)
 1009c2c:	100b83c0 	call	100b83c <_Balloc>
 1009c30:	99800417 	ldw	r6,16(r19)
 1009c34:	11000304 	addi	r4,r2,12
 1009c38:	99400304 	addi	r5,r19,12
 1009c3c:	318d883a 	add	r6,r6,r6
 1009c40:	318d883a 	add	r6,r6,r6
 1009c44:	31800204 	addi	r6,r6,8
 1009c48:	1023883a 	mov	r17,r2
 1009c4c:	10060880 	call	1006088 <memcpy>
 1009c50:	d9001617 	ldw	r4,88(sp)
 1009c54:	880b883a 	mov	r5,r17
 1009c58:	01800044 	movi	r6,1
 1009c5c:	100bc000 	call	100bc00 <__lshift>
 1009c60:	100b883a 	mov	r5,r2
 1009c64:	003d9c06 	br	10092d8 <_dtoa_r+0x938>
 1009c68:	00800e44 	movi	r2,57
 1009c6c:	b8807026 	beq	r23,r2,1009e30 <_dtoa_r+0x1490>
 1009c70:	b8800044 	addi	r2,r23,1
 1009c74:	b7000044 	addi	fp,r22,1
 1009c78:	b0800005 	stb	r2,0(r22)
 1009c7c:	003e4106 	br	1009584 <_dtoa_r+0xbe4>
 1009c80:	d8800317 	ldw	r2,12(sp)
 1009c84:	01804074 	movhi	r6,257
 1009c88:	31944904 	addi	r6,r6,20772
 1009c8c:	b009883a 	mov	r4,r22
 1009c90:	100e90fa 	slli	r7,r2,3
 1009c94:	b80b883a 	mov	r5,r23
 1009c98:	398f883a 	add	r7,r7,r6
 1009c9c:	38bffe17 	ldw	r2,-8(r7)
 1009ca0:	d9800517 	ldw	r6,20(sp)
 1009ca4:	38ffff17 	ldw	r3,-4(r7)
 1009ca8:	37000044 	addi	fp,r6,1
 1009cac:	180f883a 	mov	r7,r3
 1009cb0:	100d883a 	mov	r6,r2
 1009cb4:	100f6780 	call	100f678 <__muldf3>
 1009cb8:	a80b883a 	mov	r5,r21
 1009cbc:	a009883a 	mov	r4,r20
 1009cc0:	182f883a 	mov	r23,r3
 1009cc4:	102d883a 	mov	r22,r2
 1009cc8:	10100340 	call	1010034 <__fixdfsi>
 1009ccc:	1009883a 	mov	r4,r2
 1009cd0:	1027883a 	mov	r19,r2
 1009cd4:	100ff3c0 	call	100ff3c <__floatsidf>
 1009cd8:	a80b883a 	mov	r5,r21
 1009cdc:	a009883a 	mov	r4,r20
 1009ce0:	180f883a 	mov	r7,r3
 1009ce4:	100d883a 	mov	r6,r2
 1009ce8:	100f5840 	call	100f584 <__subdf3>
 1009cec:	180b883a 	mov	r5,r3
 1009cf0:	d8c00517 	ldw	r3,20(sp)
 1009cf4:	9cc00c04 	addi	r19,r19,48
 1009cf8:	1009883a 	mov	r4,r2
 1009cfc:	1cc00005 	stb	r19,0(r3)
 1009d00:	2021883a 	mov	r16,r4
 1009d04:	d9000317 	ldw	r4,12(sp)
 1009d08:	00800044 	movi	r2,1
 1009d0c:	2823883a 	mov	r17,r5
 1009d10:	20802226 	beq	r4,r2,1009d9c <_dtoa_r+0x13fc>
 1009d14:	1029883a 	mov	r20,r2
 1009d18:	0005883a 	mov	r2,zero
 1009d1c:	00d00934 	movhi	r3,16420
 1009d20:	180f883a 	mov	r7,r3
 1009d24:	100d883a 	mov	r6,r2
 1009d28:	880b883a 	mov	r5,r17
 1009d2c:	8009883a 	mov	r4,r16
 1009d30:	100f6780 	call	100f678 <__muldf3>
 1009d34:	180b883a 	mov	r5,r3
 1009d38:	1009883a 	mov	r4,r2
 1009d3c:	1823883a 	mov	r17,r3
 1009d40:	1021883a 	mov	r16,r2
 1009d44:	10100340 	call	1010034 <__fixdfsi>
 1009d48:	1009883a 	mov	r4,r2
 1009d4c:	102b883a 	mov	r21,r2
 1009d50:	100ff3c0 	call	100ff3c <__floatsidf>
 1009d54:	880b883a 	mov	r5,r17
 1009d58:	8009883a 	mov	r4,r16
 1009d5c:	180f883a 	mov	r7,r3
 1009d60:	100d883a 	mov	r6,r2
 1009d64:	100f5840 	call	100f584 <__subdf3>
 1009d68:	180b883a 	mov	r5,r3
 1009d6c:	d8c00517 	ldw	r3,20(sp)
 1009d70:	1009883a 	mov	r4,r2
 1009d74:	ad400c04 	addi	r21,r21,48
 1009d78:	1d05883a 	add	r2,r3,r20
 1009d7c:	15400005 	stb	r21,0(r2)
 1009d80:	2021883a 	mov	r16,r4
 1009d84:	d9000317 	ldw	r4,12(sp)
 1009d88:	a5000044 	addi	r20,r20,1
 1009d8c:	2823883a 	mov	r17,r5
 1009d90:	a13fe11e 	bne	r20,r4,1009d18 <_dtoa_r+0x1378>
 1009d94:	e505883a 	add	r2,fp,r20
 1009d98:	173fffc4 	addi	fp,r2,-1
 1009d9c:	0025883a 	mov	r18,zero
 1009da0:	04cff834 	movhi	r19,16352
 1009da4:	b009883a 	mov	r4,r22
 1009da8:	b80b883a 	mov	r5,r23
 1009dac:	900d883a 	mov	r6,r18
 1009db0:	980f883a 	mov	r7,r19
 1009db4:	100f6040 	call	100f604 <__adddf3>
 1009db8:	180b883a 	mov	r5,r3
 1009dbc:	1009883a 	mov	r4,r2
 1009dc0:	800d883a 	mov	r6,r16
 1009dc4:	880f883a 	mov	r7,r17
 1009dc8:	100feb40 	call	100feb4 <__ltdf2>
 1009dcc:	103cab16 	blt	r2,zero,100907c <_dtoa_r+0x6dc>
 1009dd0:	0009883a 	mov	r4,zero
 1009dd4:	980b883a 	mov	r5,r19
 1009dd8:	b80f883a 	mov	r7,r23
 1009ddc:	b00d883a 	mov	r6,r22
 1009de0:	100f5840 	call	100f584 <__subdf3>
 1009de4:	180b883a 	mov	r5,r3
 1009de8:	880f883a 	mov	r7,r17
 1009dec:	1009883a 	mov	r4,r2
 1009df0:	800d883a 	mov	r6,r16
 1009df4:	100fda40 	call	100fda4 <__gtdf2>
 1009df8:	00bc470e 	bge	zero,r2,1008f18 <_dtoa_r+0x578>
 1009dfc:	00c00c04 	movi	r3,48
 1009e00:	e73fffc4 	addi	fp,fp,-1
 1009e04:	e0800007 	ldb	r2,0(fp)
 1009e08:	10fffd26 	beq	r2,r3,1009e00 <_dtoa_r+0x1460>
 1009e0c:	d9800417 	ldw	r6,16(sp)
 1009e10:	e7000044 	addi	fp,fp,1
 1009e14:	d9800d15 	stw	r6,52(sp)
 1009e18:	003cab06 	br	10090c8 <_dtoa_r+0x728>
 1009e1c:	d8c00f17 	ldw	r3,60(sp)
 1009e20:	d9001117 	ldw	r4,68(sp)
 1009e24:	20e1c83a 	sub	r16,r4,r3
 1009e28:	0007883a 	mov	r3,zero
 1009e2c:	003d9b06 	br	100949c <_dtoa_r+0xafc>
 1009e30:	00800e44 	movi	r2,57
 1009e34:	b0800005 	stb	r2,0(r22)
 1009e38:	b5800044 	addi	r22,r22,1
 1009e3c:	003dc106 	br	1009544 <_dtoa_r+0xba4>
 1009e40:	05800084 	movi	r22,2
 1009e44:	003bf706 	br	1008e24 <_dtoa_r+0x484>
 1009e48:	d9000f17 	ldw	r4,60(sp)
 1009e4c:	013c000e 	bge	zero,r4,1008e50 <_dtoa_r+0x4b0>
 1009e50:	d9800e17 	ldw	r6,56(sp)
 1009e54:	01bc300e 	bge	zero,r6,1008f18 <_dtoa_r+0x578>
 1009e58:	0005883a 	mov	r2,zero
 1009e5c:	00d00934 	movhi	r3,16420
 1009e60:	a80b883a 	mov	r5,r21
 1009e64:	180f883a 	mov	r7,r3
 1009e68:	a009883a 	mov	r4,r20
 1009e6c:	100d883a 	mov	r6,r2
 1009e70:	100f6780 	call	100f678 <__muldf3>
 1009e74:	b1000044 	addi	r4,r22,1
 1009e78:	1021883a 	mov	r16,r2
 1009e7c:	1823883a 	mov	r17,r3
 1009e80:	100ff3c0 	call	100ff3c <__floatsidf>
 1009e84:	880b883a 	mov	r5,r17
 1009e88:	8009883a 	mov	r4,r16
 1009e8c:	180f883a 	mov	r7,r3
 1009e90:	100d883a 	mov	r6,r2
 1009e94:	100f6780 	call	100f678 <__muldf3>
 1009e98:	0011883a 	mov	r8,zero
 1009e9c:	02500734 	movhi	r9,16412
 1009ea0:	180b883a 	mov	r5,r3
 1009ea4:	480f883a 	mov	r7,r9
 1009ea8:	1009883a 	mov	r4,r2
 1009eac:	400d883a 	mov	r6,r8
 1009eb0:	100f6040 	call	100f604 <__adddf3>
 1009eb4:	102d883a 	mov	r22,r2
 1009eb8:	00bf3034 	movhi	r2,64704
 1009ebc:	10ef883a 	add	r23,r2,r3
 1009ec0:	d8800d17 	ldw	r2,52(sp)
 1009ec4:	d8c00e17 	ldw	r3,56(sp)
 1009ec8:	8029883a 	mov	r20,r16
 1009ecc:	10bfffc4 	addi	r2,r2,-1
 1009ed0:	882b883a 	mov	r21,r17
 1009ed4:	d8800415 	stw	r2,16(sp)
 1009ed8:	d8c00315 	stw	r3,12(sp)
 1009edc:	003e8306 	br	10098ec <_dtoa_r+0xf4c>
 1009ee0:	d8800117 	ldw	r2,4(sp)
 1009ee4:	dc001117 	ldw	r16,68(sp)
 1009ee8:	dc801017 	ldw	r18,64(sp)
 1009eec:	00c00d84 	movi	r3,54
 1009ef0:	1887c83a 	sub	r3,r3,r2
 1009ef4:	003d6906 	br	100949c <_dtoa_r+0xafc>
 1009ef8:	01800044 	movi	r6,1
 1009efc:	3021883a 	mov	r16,r6
 1009f00:	d9800f15 	stw	r6,60(sp)
 1009f04:	d9802615 	stw	r6,152(sp)
 1009f08:	d9800e15 	stw	r6,56(sp)
 1009f0c:	003b9306 	br	1008d5c <_dtoa_r+0x3bc>
 1009f10:	b021883a 	mov	r16,r22
 1009f14:	dd800f15 	stw	r22,60(sp)
 1009f18:	003b9006 	br	1008d5c <_dtoa_r+0x3bc>
 1009f1c:	103e221e 	bne	r2,zero,10097a8 <_dtoa_r+0xe08>
 1009f20:	b880004c 	andi	r2,r23,1
 1009f24:	1005003a 	cmpeq	r2,r2,zero
 1009f28:	103e1f1e 	bne	r2,zero,10097a8 <_dtoa_r+0xe08>
 1009f2c:	003e1b06 	br	100979c <_dtoa_r+0xdfc>
 1009f30:	d9001617 	ldw	r4,88(sp)
 1009f34:	980b883a 	mov	r5,r19
 1009f38:	01800284 	movi	r6,10
 1009f3c:	000f883a 	mov	r7,zero
 1009f40:	100bf700 	call	100bf70 <__multadd>
 1009f44:	d8c00e17 	ldw	r3,56(sp)
 1009f48:	1027883a 	mov	r19,r2
 1009f4c:	d8c00f15 	stw	r3,60(sp)
 1009f50:	003cd306 	br	10092a0 <_dtoa_r+0x900>

01009f54 <_fflush_r>:
 1009f54:	defffb04 	addi	sp,sp,-20
 1009f58:	dcc00315 	stw	r19,12(sp)
 1009f5c:	dc800215 	stw	r18,8(sp)
 1009f60:	dfc00415 	stw	ra,16(sp)
 1009f64:	dc400115 	stw	r17,4(sp)
 1009f68:	dc000015 	stw	r16,0(sp)
 1009f6c:	2027883a 	mov	r19,r4
 1009f70:	2825883a 	mov	r18,r5
 1009f74:	20000226 	beq	r4,zero,1009f80 <_fflush_r+0x2c>
 1009f78:	20800e17 	ldw	r2,56(r4)
 1009f7c:	10005626 	beq	r2,zero,100a0d8 <_fflush_r+0x184>
 1009f80:	9100030b 	ldhu	r4,12(r18)
 1009f84:	20ffffcc 	andi	r3,r4,65535
 1009f88:	18e0001c 	xori	r3,r3,32768
 1009f8c:	18e00004 	addi	r3,r3,-32768
 1009f90:	1880020c 	andi	r2,r3,8
 1009f94:	1000261e 	bne	r2,zero,100a030 <_fflush_r+0xdc>
 1009f98:	90c00117 	ldw	r3,4(r18)
 1009f9c:	20820014 	ori	r2,r4,2048
 1009fa0:	9080030d 	sth	r2,12(r18)
 1009fa4:	1009883a 	mov	r4,r2
 1009fa8:	00c0400e 	bge	zero,r3,100a0ac <_fflush_r+0x158>
 1009fac:	92000a17 	ldw	r8,40(r18)
 1009fb0:	40004026 	beq	r8,zero,100a0b4 <_fflush_r+0x160>
 1009fb4:	2084000c 	andi	r2,r4,4096
 1009fb8:	10005326 	beq	r2,zero,100a108 <_fflush_r+0x1b4>
 1009fbc:	94001417 	ldw	r16,80(r18)
 1009fc0:	9080030b 	ldhu	r2,12(r18)
 1009fc4:	1080010c 	andi	r2,r2,4
 1009fc8:	1000481e 	bne	r2,zero,100a0ec <_fflush_r+0x198>
 1009fcc:	91400717 	ldw	r5,28(r18)
 1009fd0:	9809883a 	mov	r4,r19
 1009fd4:	800d883a 	mov	r6,r16
 1009fd8:	000f883a 	mov	r7,zero
 1009fdc:	403ee83a 	callr	r8
 1009fe0:	8080261e 	bne	r16,r2,100a07c <_fflush_r+0x128>
 1009fe4:	9080030b 	ldhu	r2,12(r18)
 1009fe8:	91000417 	ldw	r4,16(r18)
 1009fec:	90000115 	stw	zero,4(r18)
 1009ff0:	10bdffcc 	andi	r2,r2,63487
 1009ff4:	10ffffcc 	andi	r3,r2,65535
 1009ff8:	18c4000c 	andi	r3,r3,4096
 1009ffc:	9080030d 	sth	r2,12(r18)
 100a000:	91000015 	stw	r4,0(r18)
 100a004:	18002b26 	beq	r3,zero,100a0b4 <_fflush_r+0x160>
 100a008:	0007883a 	mov	r3,zero
 100a00c:	1805883a 	mov	r2,r3
 100a010:	94001415 	stw	r16,80(r18)
 100a014:	dfc00417 	ldw	ra,16(sp)
 100a018:	dcc00317 	ldw	r19,12(sp)
 100a01c:	dc800217 	ldw	r18,8(sp)
 100a020:	dc400117 	ldw	r17,4(sp)
 100a024:	dc000017 	ldw	r16,0(sp)
 100a028:	dec00504 	addi	sp,sp,20
 100a02c:	f800283a 	ret
 100a030:	94400417 	ldw	r17,16(r18)
 100a034:	88001f26 	beq	r17,zero,100a0b4 <_fflush_r+0x160>
 100a038:	90800017 	ldw	r2,0(r18)
 100a03c:	18c000cc 	andi	r3,r3,3
 100a040:	94400015 	stw	r17,0(r18)
 100a044:	1461c83a 	sub	r16,r2,r17
 100a048:	18002526 	beq	r3,zero,100a0e0 <_fflush_r+0x18c>
 100a04c:	0005883a 	mov	r2,zero
 100a050:	90800215 	stw	r2,8(r18)
 100a054:	0400170e 	bge	zero,r16,100a0b4 <_fflush_r+0x160>
 100a058:	90c00917 	ldw	r3,36(r18)
 100a05c:	91400717 	ldw	r5,28(r18)
 100a060:	880d883a 	mov	r6,r17
 100a064:	800f883a 	mov	r7,r16
 100a068:	9809883a 	mov	r4,r19
 100a06c:	183ee83a 	callr	r3
 100a070:	88a3883a 	add	r17,r17,r2
 100a074:	80a1c83a 	sub	r16,r16,r2
 100a078:	00bff616 	blt	zero,r2,100a054 <_fflush_r+0x100>
 100a07c:	9080030b 	ldhu	r2,12(r18)
 100a080:	00ffffc4 	movi	r3,-1
 100a084:	10801014 	ori	r2,r2,64
 100a088:	9080030d 	sth	r2,12(r18)
 100a08c:	1805883a 	mov	r2,r3
 100a090:	dfc00417 	ldw	ra,16(sp)
 100a094:	dcc00317 	ldw	r19,12(sp)
 100a098:	dc800217 	ldw	r18,8(sp)
 100a09c:	dc400117 	ldw	r17,4(sp)
 100a0a0:	dc000017 	ldw	r16,0(sp)
 100a0a4:	dec00504 	addi	sp,sp,20
 100a0a8:	f800283a 	ret
 100a0ac:	90800f17 	ldw	r2,60(r18)
 100a0b0:	00bfbe16 	blt	zero,r2,1009fac <_fflush_r+0x58>
 100a0b4:	0007883a 	mov	r3,zero
 100a0b8:	1805883a 	mov	r2,r3
 100a0bc:	dfc00417 	ldw	ra,16(sp)
 100a0c0:	dcc00317 	ldw	r19,12(sp)
 100a0c4:	dc800217 	ldw	r18,8(sp)
 100a0c8:	dc400117 	ldw	r17,4(sp)
 100a0cc:	dc000017 	ldw	r16,0(sp)
 100a0d0:	dec00504 	addi	sp,sp,20
 100a0d4:	f800283a 	ret
 100a0d8:	100a1ec0 	call	100a1ec <__sinit>
 100a0dc:	003fa806 	br	1009f80 <_fflush_r+0x2c>
 100a0e0:	90800517 	ldw	r2,20(r18)
 100a0e4:	90800215 	stw	r2,8(r18)
 100a0e8:	003fda06 	br	100a054 <_fflush_r+0x100>
 100a0ec:	90800117 	ldw	r2,4(r18)
 100a0f0:	90c00c17 	ldw	r3,48(r18)
 100a0f4:	80a1c83a 	sub	r16,r16,r2
 100a0f8:	183fb426 	beq	r3,zero,1009fcc <_fflush_r+0x78>
 100a0fc:	90800f17 	ldw	r2,60(r18)
 100a100:	80a1c83a 	sub	r16,r16,r2
 100a104:	003fb106 	br	1009fcc <_fflush_r+0x78>
 100a108:	91400717 	ldw	r5,28(r18)
 100a10c:	9809883a 	mov	r4,r19
 100a110:	000d883a 	mov	r6,zero
 100a114:	01c00044 	movi	r7,1
 100a118:	403ee83a 	callr	r8
 100a11c:	1021883a 	mov	r16,r2
 100a120:	00bfffc4 	movi	r2,-1
 100a124:	80800226 	beq	r16,r2,100a130 <_fflush_r+0x1dc>
 100a128:	92000a17 	ldw	r8,40(r18)
 100a12c:	003fa406 	br	1009fc0 <_fflush_r+0x6c>
 100a130:	98c00017 	ldw	r3,0(r19)
 100a134:	00800744 	movi	r2,29
 100a138:	18bfde26 	beq	r3,r2,100a0b4 <_fflush_r+0x160>
 100a13c:	9080030b 	ldhu	r2,12(r18)
 100a140:	8007883a 	mov	r3,r16
 100a144:	10801014 	ori	r2,r2,64
 100a148:	9080030d 	sth	r2,12(r18)
 100a14c:	003fcf06 	br	100a08c <_fflush_r+0x138>

0100a150 <fflush>:
 100a150:	01404074 	movhi	r5,257
 100a154:	2967d504 	addi	r5,r5,-24748
 100a158:	2007883a 	mov	r3,r4
 100a15c:	20000526 	beq	r4,zero,100a174 <fflush+0x24>
 100a160:	00804074 	movhi	r2,257
 100a164:	109ce904 	addi	r2,r2,29604
 100a168:	11000017 	ldw	r4,0(r2)
 100a16c:	180b883a 	mov	r5,r3
 100a170:	1009f541 	jmpi	1009f54 <_fflush_r>
 100a174:	00804074 	movhi	r2,257
 100a178:	109cea04 	addi	r2,r2,29608
 100a17c:	11000017 	ldw	r4,0(r2)
 100a180:	100ad201 	jmpi	100ad20 <_fwalk_reent>

0100a184 <std>:
 100a184:	00804074 	movhi	r2,257
 100a188:	10b39404 	addi	r2,r2,-12720
 100a18c:	20800b15 	stw	r2,44(r4)
 100a190:	00804074 	movhi	r2,257
 100a194:	10b3cf04 	addi	r2,r2,-12484
 100a198:	20800815 	stw	r2,32(r4)
 100a19c:	00c04074 	movhi	r3,257
 100a1a0:	18f3b004 	addi	r3,r3,-12608
 100a1a4:	00804074 	movhi	r2,257
 100a1a8:	10b39604 	addi	r2,r2,-12712
 100a1ac:	2140030d 	sth	r5,12(r4)
 100a1b0:	2180038d 	sth	r6,14(r4)
 100a1b4:	20c00915 	stw	r3,36(r4)
 100a1b8:	20800a15 	stw	r2,40(r4)
 100a1bc:	20000015 	stw	zero,0(r4)
 100a1c0:	20000115 	stw	zero,4(r4)
 100a1c4:	20000215 	stw	zero,8(r4)
 100a1c8:	20000415 	stw	zero,16(r4)
 100a1cc:	20000515 	stw	zero,20(r4)
 100a1d0:	20000615 	stw	zero,24(r4)
 100a1d4:	21000715 	stw	r4,28(r4)
 100a1d8:	f800283a 	ret

0100a1dc <__sfp_lock_acquire>:
 100a1dc:	f800283a 	ret

0100a1e0 <__sfp_lock_release>:
 100a1e0:	f800283a 	ret

0100a1e4 <__sinit_lock_acquire>:
 100a1e4:	f800283a 	ret

0100a1e8 <__sinit_lock_release>:
 100a1e8:	f800283a 	ret

0100a1ec <__sinit>:
 100a1ec:	20800e17 	ldw	r2,56(r4)
 100a1f0:	defffd04 	addi	sp,sp,-12
 100a1f4:	dc400115 	stw	r17,4(sp)
 100a1f8:	dc000015 	stw	r16,0(sp)
 100a1fc:	dfc00215 	stw	ra,8(sp)
 100a200:	04400044 	movi	r17,1
 100a204:	01400104 	movi	r5,4
 100a208:	000d883a 	mov	r6,zero
 100a20c:	2021883a 	mov	r16,r4
 100a210:	2200bb04 	addi	r8,r4,748
 100a214:	200f883a 	mov	r7,r4
 100a218:	10000526 	beq	r2,zero,100a230 <__sinit+0x44>
 100a21c:	dfc00217 	ldw	ra,8(sp)
 100a220:	dc400117 	ldw	r17,4(sp)
 100a224:	dc000017 	ldw	r16,0(sp)
 100a228:	dec00304 	addi	sp,sp,12
 100a22c:	f800283a 	ret
 100a230:	21000117 	ldw	r4,4(r4)
 100a234:	00804074 	movhi	r2,257
 100a238:	10a8b404 	addi	r2,r2,-23856
 100a23c:	00c000c4 	movi	r3,3
 100a240:	80800f15 	stw	r2,60(r16)
 100a244:	80c0b915 	stw	r3,740(r16)
 100a248:	8200ba15 	stw	r8,744(r16)
 100a24c:	84400e15 	stw	r17,56(r16)
 100a250:	8000b815 	stw	zero,736(r16)
 100a254:	100a1840 	call	100a184 <std>
 100a258:	81000217 	ldw	r4,8(r16)
 100a25c:	880d883a 	mov	r6,r17
 100a260:	800f883a 	mov	r7,r16
 100a264:	01400284 	movi	r5,10
 100a268:	100a1840 	call	100a184 <std>
 100a26c:	81000317 	ldw	r4,12(r16)
 100a270:	800f883a 	mov	r7,r16
 100a274:	01400484 	movi	r5,18
 100a278:	01800084 	movi	r6,2
 100a27c:	dfc00217 	ldw	ra,8(sp)
 100a280:	dc400117 	ldw	r17,4(sp)
 100a284:	dc000017 	ldw	r16,0(sp)
 100a288:	dec00304 	addi	sp,sp,12
 100a28c:	100a1841 	jmpi	100a184 <std>

0100a290 <__fp_lock>:
 100a290:	0005883a 	mov	r2,zero
 100a294:	f800283a 	ret

0100a298 <__fp_unlock>:
 100a298:	0005883a 	mov	r2,zero
 100a29c:	f800283a 	ret

0100a2a0 <__fp_unlock_all>:
 100a2a0:	00804074 	movhi	r2,257
 100a2a4:	109ce904 	addi	r2,r2,29604
 100a2a8:	11000017 	ldw	r4,0(r2)
 100a2ac:	01404074 	movhi	r5,257
 100a2b0:	2968a604 	addi	r5,r5,-23912
 100a2b4:	100ade81 	jmpi	100ade8 <_fwalk>

0100a2b8 <__fp_lock_all>:
 100a2b8:	00804074 	movhi	r2,257
 100a2bc:	109ce904 	addi	r2,r2,29604
 100a2c0:	11000017 	ldw	r4,0(r2)
 100a2c4:	01404074 	movhi	r5,257
 100a2c8:	2968a404 	addi	r5,r5,-23920
 100a2cc:	100ade81 	jmpi	100ade8 <_fwalk>

0100a2d0 <_cleanup_r>:
 100a2d0:	01404074 	movhi	r5,257
 100a2d4:	29790004 	addi	r5,r5,-7168
 100a2d8:	100ade81 	jmpi	100ade8 <_fwalk>

0100a2dc <_cleanup>:
 100a2dc:	00804074 	movhi	r2,257
 100a2e0:	109cea04 	addi	r2,r2,29608
 100a2e4:	11000017 	ldw	r4,0(r2)
 100a2e8:	100a2d01 	jmpi	100a2d0 <_cleanup_r>

0100a2ec <__sfmoreglue>:
 100a2ec:	defffc04 	addi	sp,sp,-16
 100a2f0:	dc400115 	stw	r17,4(sp)
 100a2f4:	2c401724 	muli	r17,r5,92
 100a2f8:	dc800215 	stw	r18,8(sp)
 100a2fc:	2825883a 	mov	r18,r5
 100a300:	89400304 	addi	r5,r17,12
 100a304:	dc000015 	stw	r16,0(sp)
 100a308:	dfc00315 	stw	ra,12(sp)
 100a30c:	10059480 	call	1005948 <_malloc_r>
 100a310:	0021883a 	mov	r16,zero
 100a314:	880d883a 	mov	r6,r17
 100a318:	000b883a 	mov	r5,zero
 100a31c:	10000626 	beq	r2,zero,100a338 <__sfmoreglue+0x4c>
 100a320:	11000304 	addi	r4,r2,12
 100a324:	14800115 	stw	r18,4(r2)
 100a328:	10000015 	stw	zero,0(r2)
 100a32c:	11000215 	stw	r4,8(r2)
 100a330:	1021883a 	mov	r16,r2
 100a334:	10061280 	call	1006128 <memset>
 100a338:	8005883a 	mov	r2,r16
 100a33c:	dfc00317 	ldw	ra,12(sp)
 100a340:	dc800217 	ldw	r18,8(sp)
 100a344:	dc400117 	ldw	r17,4(sp)
 100a348:	dc000017 	ldw	r16,0(sp)
 100a34c:	dec00404 	addi	sp,sp,16
 100a350:	f800283a 	ret

0100a354 <__sfp>:
 100a354:	defffd04 	addi	sp,sp,-12
 100a358:	00804074 	movhi	r2,257
 100a35c:	109cea04 	addi	r2,r2,29608
 100a360:	dc000015 	stw	r16,0(sp)
 100a364:	14000017 	ldw	r16,0(r2)
 100a368:	dc400115 	stw	r17,4(sp)
 100a36c:	dfc00215 	stw	ra,8(sp)
 100a370:	80800e17 	ldw	r2,56(r16)
 100a374:	2023883a 	mov	r17,r4
 100a378:	10002626 	beq	r2,zero,100a414 <__sfp+0xc0>
 100a37c:	8400b804 	addi	r16,r16,736
 100a380:	80800117 	ldw	r2,4(r16)
 100a384:	81000217 	ldw	r4,8(r16)
 100a388:	10ffffc4 	addi	r3,r2,-1
 100a38c:	18000916 	blt	r3,zero,100a3b4 <__sfp+0x60>
 100a390:	2080030f 	ldh	r2,12(r4)
 100a394:	10000b26 	beq	r2,zero,100a3c4 <__sfp+0x70>
 100a398:	017fffc4 	movi	r5,-1
 100a39c:	00000206 	br	100a3a8 <__sfp+0x54>
 100a3a0:	2080030f 	ldh	r2,12(r4)
 100a3a4:	10000726 	beq	r2,zero,100a3c4 <__sfp+0x70>
 100a3a8:	18ffffc4 	addi	r3,r3,-1
 100a3ac:	21001704 	addi	r4,r4,92
 100a3b0:	197ffb1e 	bne	r3,r5,100a3a0 <__sfp+0x4c>
 100a3b4:	80800017 	ldw	r2,0(r16)
 100a3b8:	10001926 	beq	r2,zero,100a420 <__sfp+0xcc>
 100a3bc:	1021883a 	mov	r16,r2
 100a3c0:	003fef06 	br	100a380 <__sfp+0x2c>
 100a3c4:	00bfffc4 	movi	r2,-1
 100a3c8:	00c00044 	movi	r3,1
 100a3cc:	2080038d 	sth	r2,14(r4)
 100a3d0:	20c0030d 	sth	r3,12(r4)
 100a3d4:	20000015 	stw	zero,0(r4)
 100a3d8:	20000215 	stw	zero,8(r4)
 100a3dc:	20000115 	stw	zero,4(r4)
 100a3e0:	20000415 	stw	zero,16(r4)
 100a3e4:	20000515 	stw	zero,20(r4)
 100a3e8:	20000615 	stw	zero,24(r4)
 100a3ec:	20000c15 	stw	zero,48(r4)
 100a3f0:	20000d15 	stw	zero,52(r4)
 100a3f4:	20001115 	stw	zero,68(r4)
 100a3f8:	20001215 	stw	zero,72(r4)
 100a3fc:	2005883a 	mov	r2,r4
 100a400:	dfc00217 	ldw	ra,8(sp)
 100a404:	dc400117 	ldw	r17,4(sp)
 100a408:	dc000017 	ldw	r16,0(sp)
 100a40c:	dec00304 	addi	sp,sp,12
 100a410:	f800283a 	ret
 100a414:	8009883a 	mov	r4,r16
 100a418:	100a1ec0 	call	100a1ec <__sinit>
 100a41c:	003fd706 	br	100a37c <__sfp+0x28>
 100a420:	8809883a 	mov	r4,r17
 100a424:	01400104 	movi	r5,4
 100a428:	100a2ec0 	call	100a2ec <__sfmoreglue>
 100a42c:	80800015 	stw	r2,0(r16)
 100a430:	103fe21e 	bne	r2,zero,100a3bc <__sfp+0x68>
 100a434:	00800304 	movi	r2,12
 100a438:	0009883a 	mov	r4,zero
 100a43c:	88800015 	stw	r2,0(r17)
 100a440:	003fee06 	br	100a3fc <__sfp+0xa8>

0100a444 <_malloc_trim_r>:
 100a444:	defffb04 	addi	sp,sp,-20
 100a448:	dcc00315 	stw	r19,12(sp)
 100a44c:	04c04074 	movhi	r19,257
 100a450:	9cd6dc04 	addi	r19,r19,23408
 100a454:	dc800215 	stw	r18,8(sp)
 100a458:	dc400115 	stw	r17,4(sp)
 100a45c:	dc000015 	stw	r16,0(sp)
 100a460:	2823883a 	mov	r17,r5
 100a464:	2025883a 	mov	r18,r4
 100a468:	dfc00415 	stw	ra,16(sp)
 100a46c:	101147c0 	call	101147c <__malloc_lock>
 100a470:	98800217 	ldw	r2,8(r19)
 100a474:	9009883a 	mov	r4,r18
 100a478:	000b883a 	mov	r5,zero
 100a47c:	10c00117 	ldw	r3,4(r2)
 100a480:	00bfff04 	movi	r2,-4
 100a484:	18a0703a 	and	r16,r3,r2
 100a488:	8463c83a 	sub	r17,r16,r17
 100a48c:	8c43fbc4 	addi	r17,r17,4079
 100a490:	8822d33a 	srli	r17,r17,12
 100a494:	0083ffc4 	movi	r2,4095
 100a498:	8c7fffc4 	addi	r17,r17,-1
 100a49c:	8822933a 	slli	r17,r17,12
 100a4a0:	1440060e 	bge	r2,r17,100a4bc <_malloc_trim_r+0x78>
 100a4a4:	10063100 	call	1006310 <_sbrk_r>
 100a4a8:	98c00217 	ldw	r3,8(r19)
 100a4ac:	9009883a 	mov	r4,r18
 100a4b0:	044bc83a 	sub	r5,zero,r17
 100a4b4:	80c7883a 	add	r3,r16,r3
 100a4b8:	10c00926 	beq	r2,r3,100a4e0 <_malloc_trim_r+0x9c>
 100a4bc:	101149c0 	call	101149c <__malloc_unlock>
 100a4c0:	0005883a 	mov	r2,zero
 100a4c4:	dfc00417 	ldw	ra,16(sp)
 100a4c8:	dcc00317 	ldw	r19,12(sp)
 100a4cc:	dc800217 	ldw	r18,8(sp)
 100a4d0:	dc400117 	ldw	r17,4(sp)
 100a4d4:	dc000017 	ldw	r16,0(sp)
 100a4d8:	dec00504 	addi	sp,sp,20
 100a4dc:	f800283a 	ret
 100a4e0:	9009883a 	mov	r4,r18
 100a4e4:	10063100 	call	1006310 <_sbrk_r>
 100a4e8:	844dc83a 	sub	r6,r16,r17
 100a4ec:	00ffffc4 	movi	r3,-1
 100a4f0:	9009883a 	mov	r4,r18
 100a4f4:	000b883a 	mov	r5,zero
 100a4f8:	01c040b4 	movhi	r7,258
 100a4fc:	39e4e504 	addi	r7,r7,-27756
 100a500:	31800054 	ori	r6,r6,1
 100a504:	10c00926 	beq	r2,r3,100a52c <_malloc_trim_r+0xe8>
 100a508:	38800017 	ldw	r2,0(r7)
 100a50c:	98c00217 	ldw	r3,8(r19)
 100a510:	9009883a 	mov	r4,r18
 100a514:	1445c83a 	sub	r2,r2,r17
 100a518:	38800015 	stw	r2,0(r7)
 100a51c:	19800115 	stw	r6,4(r3)
 100a520:	101149c0 	call	101149c <__malloc_unlock>
 100a524:	00800044 	movi	r2,1
 100a528:	003fe606 	br	100a4c4 <_malloc_trim_r+0x80>
 100a52c:	10063100 	call	1006310 <_sbrk_r>
 100a530:	99800217 	ldw	r6,8(r19)
 100a534:	100f883a 	mov	r7,r2
 100a538:	9009883a 	mov	r4,r18
 100a53c:	1187c83a 	sub	r3,r2,r6
 100a540:	008003c4 	movi	r2,15
 100a544:	19400054 	ori	r5,r3,1
 100a548:	10ffdc0e 	bge	r2,r3,100a4bc <_malloc_trim_r+0x78>
 100a54c:	00804074 	movhi	r2,257
 100a550:	109cec04 	addi	r2,r2,29616
 100a554:	10c00017 	ldw	r3,0(r2)
 100a558:	008040b4 	movhi	r2,258
 100a55c:	10a4e504 	addi	r2,r2,-27756
 100a560:	31400115 	stw	r5,4(r6)
 100a564:	38c7c83a 	sub	r3,r7,r3
 100a568:	10c00015 	stw	r3,0(r2)
 100a56c:	003fd306 	br	100a4bc <_malloc_trim_r+0x78>

0100a570 <_free_r>:
 100a570:	defffd04 	addi	sp,sp,-12
 100a574:	dc400115 	stw	r17,4(sp)
 100a578:	dc000015 	stw	r16,0(sp)
 100a57c:	dfc00215 	stw	ra,8(sp)
 100a580:	2821883a 	mov	r16,r5
 100a584:	2023883a 	mov	r17,r4
 100a588:	28005a26 	beq	r5,zero,100a6f4 <_free_r+0x184>
 100a58c:	101147c0 	call	101147c <__malloc_lock>
 100a590:	823ffe04 	addi	r8,r16,-8
 100a594:	41400117 	ldw	r5,4(r8)
 100a598:	00bfff84 	movi	r2,-2
 100a59c:	02804074 	movhi	r10,257
 100a5a0:	5296dc04 	addi	r10,r10,23408
 100a5a4:	288e703a 	and	r7,r5,r2
 100a5a8:	41cd883a 	add	r6,r8,r7
 100a5ac:	30c00117 	ldw	r3,4(r6)
 100a5b0:	51000217 	ldw	r4,8(r10)
 100a5b4:	00bfff04 	movi	r2,-4
 100a5b8:	1892703a 	and	r9,r3,r2
 100a5bc:	5017883a 	mov	r11,r10
 100a5c0:	31006726 	beq	r6,r4,100a760 <_free_r+0x1f0>
 100a5c4:	2880004c 	andi	r2,r5,1
 100a5c8:	1005003a 	cmpeq	r2,r2,zero
 100a5cc:	32400115 	stw	r9,4(r6)
 100a5d0:	10001a1e 	bne	r2,zero,100a63c <_free_r+0xcc>
 100a5d4:	000b883a 	mov	r5,zero
 100a5d8:	3247883a 	add	r3,r6,r9
 100a5dc:	18800117 	ldw	r2,4(r3)
 100a5e0:	1080004c 	andi	r2,r2,1
 100a5e4:	1000231e 	bne	r2,zero,100a674 <_free_r+0x104>
 100a5e8:	280ac03a 	cmpne	r5,r5,zero
 100a5ec:	3a4f883a 	add	r7,r7,r9
 100a5f0:	2800451e 	bne	r5,zero,100a708 <_free_r+0x198>
 100a5f4:	31000217 	ldw	r4,8(r6)
 100a5f8:	00804074 	movhi	r2,257
 100a5fc:	1096de04 	addi	r2,r2,23416
 100a600:	20807b26 	beq	r4,r2,100a7f0 <_free_r+0x280>
 100a604:	30800317 	ldw	r2,12(r6)
 100a608:	3a07883a 	add	r3,r7,r8
 100a60c:	19c00015 	stw	r7,0(r3)
 100a610:	11000215 	stw	r4,8(r2)
 100a614:	20800315 	stw	r2,12(r4)
 100a618:	38800054 	ori	r2,r7,1
 100a61c:	40800115 	stw	r2,4(r8)
 100a620:	28001a26 	beq	r5,zero,100a68c <_free_r+0x11c>
 100a624:	8809883a 	mov	r4,r17
 100a628:	dfc00217 	ldw	ra,8(sp)
 100a62c:	dc400117 	ldw	r17,4(sp)
 100a630:	dc000017 	ldw	r16,0(sp)
 100a634:	dec00304 	addi	sp,sp,12
 100a638:	101149c1 	jmpi	101149c <__malloc_unlock>
 100a63c:	80bffe17 	ldw	r2,-8(r16)
 100a640:	50c00204 	addi	r3,r10,8
 100a644:	4091c83a 	sub	r8,r8,r2
 100a648:	41000217 	ldw	r4,8(r8)
 100a64c:	388f883a 	add	r7,r7,r2
 100a650:	20c06126 	beq	r4,r3,100a7d8 <_free_r+0x268>
 100a654:	40800317 	ldw	r2,12(r8)
 100a658:	3247883a 	add	r3,r6,r9
 100a65c:	000b883a 	mov	r5,zero
 100a660:	11000215 	stw	r4,8(r2)
 100a664:	20800315 	stw	r2,12(r4)
 100a668:	18800117 	ldw	r2,4(r3)
 100a66c:	1080004c 	andi	r2,r2,1
 100a670:	103fdd26 	beq	r2,zero,100a5e8 <_free_r+0x78>
 100a674:	38800054 	ori	r2,r7,1
 100a678:	3a07883a 	add	r3,r7,r8
 100a67c:	280ac03a 	cmpne	r5,r5,zero
 100a680:	40800115 	stw	r2,4(r8)
 100a684:	19c00015 	stw	r7,0(r3)
 100a688:	283fe61e 	bne	r5,zero,100a624 <_free_r+0xb4>
 100a68c:	00807fc4 	movi	r2,511
 100a690:	11c01f2e 	bgeu	r2,r7,100a710 <_free_r+0x1a0>
 100a694:	3806d27a 	srli	r3,r7,9
 100a698:	1800481e 	bne	r3,zero,100a7bc <_free_r+0x24c>
 100a69c:	3804d0fa 	srli	r2,r7,3
 100a6a0:	100690fa 	slli	r3,r2,3
 100a6a4:	1acd883a 	add	r6,r3,r11
 100a6a8:	31400217 	ldw	r5,8(r6)
 100a6ac:	31405926 	beq	r6,r5,100a814 <_free_r+0x2a4>
 100a6b0:	28800117 	ldw	r2,4(r5)
 100a6b4:	00ffff04 	movi	r3,-4
 100a6b8:	10c4703a 	and	r2,r2,r3
 100a6bc:	3880022e 	bgeu	r7,r2,100a6c8 <_free_r+0x158>
 100a6c0:	29400217 	ldw	r5,8(r5)
 100a6c4:	317ffa1e 	bne	r6,r5,100a6b0 <_free_r+0x140>
 100a6c8:	29800317 	ldw	r6,12(r5)
 100a6cc:	41800315 	stw	r6,12(r8)
 100a6d0:	41400215 	stw	r5,8(r8)
 100a6d4:	8809883a 	mov	r4,r17
 100a6d8:	2a000315 	stw	r8,12(r5)
 100a6dc:	32000215 	stw	r8,8(r6)
 100a6e0:	dfc00217 	ldw	ra,8(sp)
 100a6e4:	dc400117 	ldw	r17,4(sp)
 100a6e8:	dc000017 	ldw	r16,0(sp)
 100a6ec:	dec00304 	addi	sp,sp,12
 100a6f0:	101149c1 	jmpi	101149c <__malloc_unlock>
 100a6f4:	dfc00217 	ldw	ra,8(sp)
 100a6f8:	dc400117 	ldw	r17,4(sp)
 100a6fc:	dc000017 	ldw	r16,0(sp)
 100a700:	dec00304 	addi	sp,sp,12
 100a704:	f800283a 	ret
 100a708:	31000217 	ldw	r4,8(r6)
 100a70c:	003fbd06 	br	100a604 <_free_r+0x94>
 100a710:	3806d0fa 	srli	r3,r7,3
 100a714:	00800044 	movi	r2,1
 100a718:	51400117 	ldw	r5,4(r10)
 100a71c:	180890fa 	slli	r4,r3,3
 100a720:	1807d0ba 	srai	r3,r3,2
 100a724:	22c9883a 	add	r4,r4,r11
 100a728:	21800217 	ldw	r6,8(r4)
 100a72c:	10c4983a 	sll	r2,r2,r3
 100a730:	41000315 	stw	r4,12(r8)
 100a734:	41800215 	stw	r6,8(r8)
 100a738:	288ab03a 	or	r5,r5,r2
 100a73c:	22000215 	stw	r8,8(r4)
 100a740:	8809883a 	mov	r4,r17
 100a744:	51400115 	stw	r5,4(r10)
 100a748:	32000315 	stw	r8,12(r6)
 100a74c:	dfc00217 	ldw	ra,8(sp)
 100a750:	dc400117 	ldw	r17,4(sp)
 100a754:	dc000017 	ldw	r16,0(sp)
 100a758:	dec00304 	addi	sp,sp,12
 100a75c:	101149c1 	jmpi	101149c <__malloc_unlock>
 100a760:	2880004c 	andi	r2,r5,1
 100a764:	3a4d883a 	add	r6,r7,r9
 100a768:	1000071e 	bne	r2,zero,100a788 <_free_r+0x218>
 100a76c:	80bffe17 	ldw	r2,-8(r16)
 100a770:	4091c83a 	sub	r8,r8,r2
 100a774:	41000317 	ldw	r4,12(r8)
 100a778:	40c00217 	ldw	r3,8(r8)
 100a77c:	308d883a 	add	r6,r6,r2
 100a780:	20c00215 	stw	r3,8(r4)
 100a784:	19000315 	stw	r4,12(r3)
 100a788:	00804074 	movhi	r2,257
 100a78c:	109ceb04 	addi	r2,r2,29612
 100a790:	11000017 	ldw	r4,0(r2)
 100a794:	30c00054 	ori	r3,r6,1
 100a798:	52000215 	stw	r8,8(r10)
 100a79c:	40c00115 	stw	r3,4(r8)
 100a7a0:	313fa036 	bltu	r6,r4,100a624 <_free_r+0xb4>
 100a7a4:	008040b4 	movhi	r2,258
 100a7a8:	10a4d604 	addi	r2,r2,-27816
 100a7ac:	11400017 	ldw	r5,0(r2)
 100a7b0:	8809883a 	mov	r4,r17
 100a7b4:	100a4440 	call	100a444 <_malloc_trim_r>
 100a7b8:	003f9a06 	br	100a624 <_free_r+0xb4>
 100a7bc:	00800104 	movi	r2,4
 100a7c0:	10c0072e 	bgeu	r2,r3,100a7e0 <_free_r+0x270>
 100a7c4:	00800504 	movi	r2,20
 100a7c8:	10c01936 	bltu	r2,r3,100a830 <_free_r+0x2c0>
 100a7cc:	188016c4 	addi	r2,r3,91
 100a7d0:	100690fa 	slli	r3,r2,3
 100a7d4:	003fb306 	br	100a6a4 <_free_r+0x134>
 100a7d8:	01400044 	movi	r5,1
 100a7dc:	003f7e06 	br	100a5d8 <_free_r+0x68>
 100a7e0:	3804d1ba 	srli	r2,r7,6
 100a7e4:	10800e04 	addi	r2,r2,56
 100a7e8:	100690fa 	slli	r3,r2,3
 100a7ec:	003fad06 	br	100a6a4 <_free_r+0x134>
 100a7f0:	22000315 	stw	r8,12(r4)
 100a7f4:	22000215 	stw	r8,8(r4)
 100a7f8:	3a05883a 	add	r2,r7,r8
 100a7fc:	38c00054 	ori	r3,r7,1
 100a800:	11c00015 	stw	r7,0(r2)
 100a804:	41000215 	stw	r4,8(r8)
 100a808:	40c00115 	stw	r3,4(r8)
 100a80c:	41000315 	stw	r4,12(r8)
 100a810:	003f8406 	br	100a624 <_free_r+0xb4>
 100a814:	1005d0ba 	srai	r2,r2,2
 100a818:	00c00044 	movi	r3,1
 100a81c:	51000117 	ldw	r4,4(r10)
 100a820:	1886983a 	sll	r3,r3,r2
 100a824:	20c8b03a 	or	r4,r4,r3
 100a828:	51000115 	stw	r4,4(r10)
 100a82c:	003fa706 	br	100a6cc <_free_r+0x15c>
 100a830:	00801504 	movi	r2,84
 100a834:	10c00436 	bltu	r2,r3,100a848 <_free_r+0x2d8>
 100a838:	3804d33a 	srli	r2,r7,12
 100a83c:	10801b84 	addi	r2,r2,110
 100a840:	100690fa 	slli	r3,r2,3
 100a844:	003f9706 	br	100a6a4 <_free_r+0x134>
 100a848:	00805504 	movi	r2,340
 100a84c:	10c00436 	bltu	r2,r3,100a860 <_free_r+0x2f0>
 100a850:	3804d3fa 	srli	r2,r7,15
 100a854:	10801dc4 	addi	r2,r2,119
 100a858:	100690fa 	slli	r3,r2,3
 100a85c:	003f9106 	br	100a6a4 <_free_r+0x134>
 100a860:	00815504 	movi	r2,1364
 100a864:	10c0032e 	bgeu	r2,r3,100a874 <_free_r+0x304>
 100a868:	00801f84 	movi	r2,126
 100a86c:	00c0fc04 	movi	r3,1008
 100a870:	003f8c06 	br	100a6a4 <_free_r+0x134>
 100a874:	3804d4ba 	srli	r2,r7,18
 100a878:	10801f04 	addi	r2,r2,124
 100a87c:	100690fa 	slli	r3,r2,3
 100a880:	003f8806 	br	100a6a4 <_free_r+0x134>

0100a884 <__sfvwrite_r>:
 100a884:	30800217 	ldw	r2,8(r6)
 100a888:	defff504 	addi	sp,sp,-44
 100a88c:	df000915 	stw	fp,36(sp)
 100a890:	dd800715 	stw	r22,28(sp)
 100a894:	dc800315 	stw	r18,12(sp)
 100a898:	dfc00a15 	stw	ra,40(sp)
 100a89c:	ddc00815 	stw	r23,32(sp)
 100a8a0:	dd400615 	stw	r21,24(sp)
 100a8a4:	dd000515 	stw	r20,20(sp)
 100a8a8:	dcc00415 	stw	r19,16(sp)
 100a8ac:	dc400215 	stw	r17,8(sp)
 100a8b0:	dc000115 	stw	r16,4(sp)
 100a8b4:	302d883a 	mov	r22,r6
 100a8b8:	2039883a 	mov	fp,r4
 100a8bc:	2825883a 	mov	r18,r5
 100a8c0:	10001c26 	beq	r2,zero,100a934 <__sfvwrite_r+0xb0>
 100a8c4:	29c0030b 	ldhu	r7,12(r5)
 100a8c8:	3880020c 	andi	r2,r7,8
 100a8cc:	10002726 	beq	r2,zero,100a96c <__sfvwrite_r+0xe8>
 100a8d0:	28800417 	ldw	r2,16(r5)
 100a8d4:	10002526 	beq	r2,zero,100a96c <__sfvwrite_r+0xe8>
 100a8d8:	3880008c 	andi	r2,r7,2
 100a8dc:	b5400017 	ldw	r21,0(r22)
 100a8e0:	10002826 	beq	r2,zero,100a984 <__sfvwrite_r+0x100>
 100a8e4:	0021883a 	mov	r16,zero
 100a8e8:	0023883a 	mov	r17,zero
 100a8ec:	880d883a 	mov	r6,r17
 100a8f0:	e009883a 	mov	r4,fp
 100a8f4:	00810004 	movi	r2,1024
 100a8f8:	80006e26 	beq	r16,zero,100aab4 <__sfvwrite_r+0x230>
 100a8fc:	800f883a 	mov	r7,r16
 100a900:	91400717 	ldw	r5,28(r18)
 100a904:	1400012e 	bgeu	r2,r16,100a90c <__sfvwrite_r+0x88>
 100a908:	100f883a 	mov	r7,r2
 100a90c:	90c00917 	ldw	r3,36(r18)
 100a910:	183ee83a 	callr	r3
 100a914:	1007883a 	mov	r3,r2
 100a918:	80a1c83a 	sub	r16,r16,r2
 100a91c:	88a3883a 	add	r17,r17,r2
 100a920:	00806d0e 	bge	zero,r2,100aad8 <__sfvwrite_r+0x254>
 100a924:	b0800217 	ldw	r2,8(r22)
 100a928:	10c5c83a 	sub	r2,r2,r3
 100a92c:	b0800215 	stw	r2,8(r22)
 100a930:	103fee1e 	bne	r2,zero,100a8ec <__sfvwrite_r+0x68>
 100a934:	0009883a 	mov	r4,zero
 100a938:	2005883a 	mov	r2,r4
 100a93c:	dfc00a17 	ldw	ra,40(sp)
 100a940:	df000917 	ldw	fp,36(sp)
 100a944:	ddc00817 	ldw	r23,32(sp)
 100a948:	dd800717 	ldw	r22,28(sp)
 100a94c:	dd400617 	ldw	r21,24(sp)
 100a950:	dd000517 	ldw	r20,20(sp)
 100a954:	dcc00417 	ldw	r19,16(sp)
 100a958:	dc800317 	ldw	r18,12(sp)
 100a95c:	dc400217 	ldw	r17,8(sp)
 100a960:	dc000117 	ldw	r16,4(sp)
 100a964:	dec00b04 	addi	sp,sp,44
 100a968:	f800283a 	ret
 100a96c:	10084800 	call	1008480 <__swsetup_r>
 100a970:	1000e41e 	bne	r2,zero,100ad04 <__sfvwrite_r+0x480>
 100a974:	91c0030b 	ldhu	r7,12(r18)
 100a978:	b5400017 	ldw	r21,0(r22)
 100a97c:	3880008c 	andi	r2,r7,2
 100a980:	103fd81e 	bne	r2,zero,100a8e4 <__sfvwrite_r+0x60>
 100a984:	3880004c 	andi	r2,r7,1
 100a988:	1005003a 	cmpeq	r2,r2,zero
 100a98c:	10005726 	beq	r2,zero,100aaec <__sfvwrite_r+0x268>
 100a990:	0029883a 	mov	r20,zero
 100a994:	002f883a 	mov	r23,zero
 100a998:	a0004226 	beq	r20,zero,100aaa4 <__sfvwrite_r+0x220>
 100a99c:	3880800c 	andi	r2,r7,512
 100a9a0:	94000217 	ldw	r16,8(r18)
 100a9a4:	10008b26 	beq	r2,zero,100abd4 <__sfvwrite_r+0x350>
 100a9a8:	800d883a 	mov	r6,r16
 100a9ac:	a400a536 	bltu	r20,r16,100ac44 <__sfvwrite_r+0x3c0>
 100a9b0:	3881200c 	andi	r2,r7,1152
 100a9b4:	10002726 	beq	r2,zero,100aa54 <__sfvwrite_r+0x1d0>
 100a9b8:	90800517 	ldw	r2,20(r18)
 100a9bc:	92000417 	ldw	r8,16(r18)
 100a9c0:	91400017 	ldw	r5,0(r18)
 100a9c4:	1087883a 	add	r3,r2,r2
 100a9c8:	1887883a 	add	r3,r3,r2
 100a9cc:	1808d7fa 	srli	r4,r3,31
 100a9d0:	2a21c83a 	sub	r16,r5,r8
 100a9d4:	80800044 	addi	r2,r16,1
 100a9d8:	20c9883a 	add	r4,r4,r3
 100a9dc:	2027d07a 	srai	r19,r4,1
 100a9e0:	a085883a 	add	r2,r20,r2
 100a9e4:	980d883a 	mov	r6,r19
 100a9e8:	9880022e 	bgeu	r19,r2,100a9f4 <__sfvwrite_r+0x170>
 100a9ec:	1027883a 	mov	r19,r2
 100a9f0:	100d883a 	mov	r6,r2
 100a9f4:	3881000c 	andi	r2,r7,1024
 100a9f8:	1000b826 	beq	r2,zero,100acdc <__sfvwrite_r+0x458>
 100a9fc:	300b883a 	mov	r5,r6
 100aa00:	e009883a 	mov	r4,fp
 100aa04:	10059480 	call	1005948 <_malloc_r>
 100aa08:	10003126 	beq	r2,zero,100aad0 <__sfvwrite_r+0x24c>
 100aa0c:	91400417 	ldw	r5,16(r18)
 100aa10:	1009883a 	mov	r4,r2
 100aa14:	800d883a 	mov	r6,r16
 100aa18:	1023883a 	mov	r17,r2
 100aa1c:	10060880 	call	1006088 <memcpy>
 100aa20:	90c0030b 	ldhu	r3,12(r18)
 100aa24:	00beffc4 	movi	r2,-1025
 100aa28:	1886703a 	and	r3,r3,r2
 100aa2c:	18c02014 	ori	r3,r3,128
 100aa30:	90c0030d 	sth	r3,12(r18)
 100aa34:	9c07c83a 	sub	r3,r19,r16
 100aa38:	8c05883a 	add	r2,r17,r16
 100aa3c:	a00d883a 	mov	r6,r20
 100aa40:	a021883a 	mov	r16,r20
 100aa44:	90800015 	stw	r2,0(r18)
 100aa48:	90c00215 	stw	r3,8(r18)
 100aa4c:	94400415 	stw	r17,16(r18)
 100aa50:	94c00515 	stw	r19,20(r18)
 100aa54:	91000017 	ldw	r4,0(r18)
 100aa58:	b80b883a 	mov	r5,r23
 100aa5c:	a023883a 	mov	r17,r20
 100aa60:	100b1dc0 	call	100b1dc <memmove>
 100aa64:	90c00217 	ldw	r3,8(r18)
 100aa68:	90800017 	ldw	r2,0(r18)
 100aa6c:	a027883a 	mov	r19,r20
 100aa70:	1c07c83a 	sub	r3,r3,r16
 100aa74:	1405883a 	add	r2,r2,r16
 100aa78:	90c00215 	stw	r3,8(r18)
 100aa7c:	a021883a 	mov	r16,r20
 100aa80:	90800015 	stw	r2,0(r18)
 100aa84:	b0800217 	ldw	r2,8(r22)
 100aa88:	1405c83a 	sub	r2,r2,r16
 100aa8c:	b0800215 	stw	r2,8(r22)
 100aa90:	103fa826 	beq	r2,zero,100a934 <__sfvwrite_r+0xb0>
 100aa94:	a469c83a 	sub	r20,r20,r17
 100aa98:	91c0030b 	ldhu	r7,12(r18)
 100aa9c:	bcef883a 	add	r23,r23,r19
 100aaa0:	a03fbe1e 	bne	r20,zero,100a99c <__sfvwrite_r+0x118>
 100aaa4:	adc00017 	ldw	r23,0(r21)
 100aaa8:	ad000117 	ldw	r20,4(r21)
 100aaac:	ad400204 	addi	r21,r21,8
 100aab0:	003fb906 	br	100a998 <__sfvwrite_r+0x114>
 100aab4:	ac400017 	ldw	r17,0(r21)
 100aab8:	ac000117 	ldw	r16,4(r21)
 100aabc:	ad400204 	addi	r21,r21,8
 100aac0:	003f8a06 	br	100a8ec <__sfvwrite_r+0x68>
 100aac4:	91400417 	ldw	r5,16(r18)
 100aac8:	e009883a 	mov	r4,fp
 100aacc:	100a5700 	call	100a570 <_free_r>
 100aad0:	00800304 	movi	r2,12
 100aad4:	e0800015 	stw	r2,0(fp)
 100aad8:	9080030b 	ldhu	r2,12(r18)
 100aadc:	013fffc4 	movi	r4,-1
 100aae0:	10801014 	ori	r2,r2,64
 100aae4:	9080030d 	sth	r2,12(r18)
 100aae8:	003f9306 	br	100a938 <__sfvwrite_r+0xb4>
 100aaec:	0027883a 	mov	r19,zero
 100aaf0:	002f883a 	mov	r23,zero
 100aaf4:	d8000015 	stw	zero,0(sp)
 100aaf8:	0029883a 	mov	r20,zero
 100aafc:	98001e26 	beq	r19,zero,100ab78 <__sfvwrite_r+0x2f4>
 100ab00:	d8c00017 	ldw	r3,0(sp)
 100ab04:	1804c03a 	cmpne	r2,r3,zero
 100ab08:	10005e26 	beq	r2,zero,100ac84 <__sfvwrite_r+0x400>
 100ab0c:	9821883a 	mov	r16,r19
 100ab10:	a4c0012e 	bgeu	r20,r19,100ab18 <__sfvwrite_r+0x294>
 100ab14:	a021883a 	mov	r16,r20
 100ab18:	91000017 	ldw	r4,0(r18)
 100ab1c:	90800417 	ldw	r2,16(r18)
 100ab20:	91800217 	ldw	r6,8(r18)
 100ab24:	91c00517 	ldw	r7,20(r18)
 100ab28:	1100022e 	bgeu	r2,r4,100ab34 <__sfvwrite_r+0x2b0>
 100ab2c:	31e3883a 	add	r17,r6,r7
 100ab30:	8c001616 	blt	r17,r16,100ab8c <__sfvwrite_r+0x308>
 100ab34:	81c03816 	blt	r16,r7,100ac18 <__sfvwrite_r+0x394>
 100ab38:	90c00917 	ldw	r3,36(r18)
 100ab3c:	91400717 	ldw	r5,28(r18)
 100ab40:	e009883a 	mov	r4,fp
 100ab44:	b80d883a 	mov	r6,r23
 100ab48:	183ee83a 	callr	r3
 100ab4c:	1023883a 	mov	r17,r2
 100ab50:	00bfe10e 	bge	zero,r2,100aad8 <__sfvwrite_r+0x254>
 100ab54:	a469c83a 	sub	r20,r20,r17
 100ab58:	a0001826 	beq	r20,zero,100abbc <__sfvwrite_r+0x338>
 100ab5c:	b0800217 	ldw	r2,8(r22)
 100ab60:	1445c83a 	sub	r2,r2,r17
 100ab64:	b0800215 	stw	r2,8(r22)
 100ab68:	103f7226 	beq	r2,zero,100a934 <__sfvwrite_r+0xb0>
 100ab6c:	9c67c83a 	sub	r19,r19,r17
 100ab70:	bc6f883a 	add	r23,r23,r17
 100ab74:	983fe21e 	bne	r19,zero,100ab00 <__sfvwrite_r+0x27c>
 100ab78:	adc00017 	ldw	r23,0(r21)
 100ab7c:	acc00117 	ldw	r19,4(r21)
 100ab80:	ad400204 	addi	r21,r21,8
 100ab84:	d8000015 	stw	zero,0(sp)
 100ab88:	003fdc06 	br	100aafc <__sfvwrite_r+0x278>
 100ab8c:	b80b883a 	mov	r5,r23
 100ab90:	880d883a 	mov	r6,r17
 100ab94:	100b1dc0 	call	100b1dc <memmove>
 100ab98:	90c00017 	ldw	r3,0(r18)
 100ab9c:	e009883a 	mov	r4,fp
 100aba0:	900b883a 	mov	r5,r18
 100aba4:	1c47883a 	add	r3,r3,r17
 100aba8:	90c00015 	stw	r3,0(r18)
 100abac:	1009f540 	call	1009f54 <_fflush_r>
 100abb0:	103fc91e 	bne	r2,zero,100aad8 <__sfvwrite_r+0x254>
 100abb4:	a469c83a 	sub	r20,r20,r17
 100abb8:	a03fe81e 	bne	r20,zero,100ab5c <__sfvwrite_r+0x2d8>
 100abbc:	e009883a 	mov	r4,fp
 100abc0:	900b883a 	mov	r5,r18
 100abc4:	1009f540 	call	1009f54 <_fflush_r>
 100abc8:	103fc31e 	bne	r2,zero,100aad8 <__sfvwrite_r+0x254>
 100abcc:	d8000015 	stw	zero,0(sp)
 100abd0:	003fe206 	br	100ab5c <__sfvwrite_r+0x2d8>
 100abd4:	91000017 	ldw	r4,0(r18)
 100abd8:	90800417 	ldw	r2,16(r18)
 100abdc:	1100022e 	bgeu	r2,r4,100abe8 <__sfvwrite_r+0x364>
 100abe0:	8023883a 	mov	r17,r16
 100abe4:	85003136 	bltu	r16,r20,100acac <__sfvwrite_r+0x428>
 100abe8:	91c00517 	ldw	r7,20(r18)
 100abec:	a1c01836 	bltu	r20,r7,100ac50 <__sfvwrite_r+0x3cc>
 100abf0:	90c00917 	ldw	r3,36(r18)
 100abf4:	91400717 	ldw	r5,28(r18)
 100abf8:	e009883a 	mov	r4,fp
 100abfc:	b80d883a 	mov	r6,r23
 100ac00:	183ee83a 	callr	r3
 100ac04:	1021883a 	mov	r16,r2
 100ac08:	00bfb30e 	bge	zero,r2,100aad8 <__sfvwrite_r+0x254>
 100ac0c:	1023883a 	mov	r17,r2
 100ac10:	1027883a 	mov	r19,r2
 100ac14:	003f9b06 	br	100aa84 <__sfvwrite_r+0x200>
 100ac18:	b80b883a 	mov	r5,r23
 100ac1c:	800d883a 	mov	r6,r16
 100ac20:	100b1dc0 	call	100b1dc <memmove>
 100ac24:	90c00217 	ldw	r3,8(r18)
 100ac28:	90800017 	ldw	r2,0(r18)
 100ac2c:	8023883a 	mov	r17,r16
 100ac30:	1c07c83a 	sub	r3,r3,r16
 100ac34:	1405883a 	add	r2,r2,r16
 100ac38:	90c00215 	stw	r3,8(r18)
 100ac3c:	90800015 	stw	r2,0(r18)
 100ac40:	003fc406 	br	100ab54 <__sfvwrite_r+0x2d0>
 100ac44:	a00d883a 	mov	r6,r20
 100ac48:	a021883a 	mov	r16,r20
 100ac4c:	003f8106 	br	100aa54 <__sfvwrite_r+0x1d0>
 100ac50:	b80b883a 	mov	r5,r23
 100ac54:	a00d883a 	mov	r6,r20
 100ac58:	100b1dc0 	call	100b1dc <memmove>
 100ac5c:	90c00217 	ldw	r3,8(r18)
 100ac60:	90800017 	ldw	r2,0(r18)
 100ac64:	a021883a 	mov	r16,r20
 100ac68:	1d07c83a 	sub	r3,r3,r20
 100ac6c:	1505883a 	add	r2,r2,r20
 100ac70:	a023883a 	mov	r17,r20
 100ac74:	a027883a 	mov	r19,r20
 100ac78:	90c00215 	stw	r3,8(r18)
 100ac7c:	90800015 	stw	r2,0(r18)
 100ac80:	003f8006 	br	100aa84 <__sfvwrite_r+0x200>
 100ac84:	b809883a 	mov	r4,r23
 100ac88:	01400284 	movi	r5,10
 100ac8c:	980d883a 	mov	r6,r19
 100ac90:	100b0f80 	call	100b0f8 <memchr>
 100ac94:	10001726 	beq	r2,zero,100acf4 <__sfvwrite_r+0x470>
 100ac98:	15c5c83a 	sub	r2,r2,r23
 100ac9c:	15000044 	addi	r20,r2,1
 100aca0:	00800044 	movi	r2,1
 100aca4:	d8800015 	stw	r2,0(sp)
 100aca8:	003f9806 	br	100ab0c <__sfvwrite_r+0x288>
 100acac:	b80b883a 	mov	r5,r23
 100acb0:	800d883a 	mov	r6,r16
 100acb4:	100b1dc0 	call	100b1dc <memmove>
 100acb8:	90c00017 	ldw	r3,0(r18)
 100acbc:	e009883a 	mov	r4,fp
 100acc0:	900b883a 	mov	r5,r18
 100acc4:	1c07883a 	add	r3,r3,r16
 100acc8:	90c00015 	stw	r3,0(r18)
 100accc:	8027883a 	mov	r19,r16
 100acd0:	1009f540 	call	1009f54 <_fflush_r>
 100acd4:	103f6b26 	beq	r2,zero,100aa84 <__sfvwrite_r+0x200>
 100acd8:	003f7f06 	br	100aad8 <__sfvwrite_r+0x254>
 100acdc:	400b883a 	mov	r5,r8
 100ace0:	e009883a 	mov	r4,fp
 100ace4:	100c49c0 	call	100c49c <_realloc_r>
 100ace8:	103f7626 	beq	r2,zero,100aac4 <__sfvwrite_r+0x240>
 100acec:	1023883a 	mov	r17,r2
 100acf0:	003f5006 	br	100aa34 <__sfvwrite_r+0x1b0>
 100acf4:	00c00044 	movi	r3,1
 100acf8:	9d000044 	addi	r20,r19,1
 100acfc:	d8c00015 	stw	r3,0(sp)
 100ad00:	003f8206 	br	100ab0c <__sfvwrite_r+0x288>
 100ad04:	9080030b 	ldhu	r2,12(r18)
 100ad08:	00c00244 	movi	r3,9
 100ad0c:	013fffc4 	movi	r4,-1
 100ad10:	10801014 	ori	r2,r2,64
 100ad14:	9080030d 	sth	r2,12(r18)
 100ad18:	e0c00015 	stw	r3,0(fp)
 100ad1c:	003f0606 	br	100a938 <__sfvwrite_r+0xb4>

0100ad20 <_fwalk_reent>:
 100ad20:	defff704 	addi	sp,sp,-36
 100ad24:	dcc00315 	stw	r19,12(sp)
 100ad28:	24c0b804 	addi	r19,r4,736
 100ad2c:	dd800615 	stw	r22,24(sp)
 100ad30:	dd400515 	stw	r21,20(sp)
 100ad34:	dfc00815 	stw	ra,32(sp)
 100ad38:	ddc00715 	stw	r23,28(sp)
 100ad3c:	dd000415 	stw	r20,16(sp)
 100ad40:	dc800215 	stw	r18,8(sp)
 100ad44:	dc400115 	stw	r17,4(sp)
 100ad48:	dc000015 	stw	r16,0(sp)
 100ad4c:	202b883a 	mov	r21,r4
 100ad50:	282d883a 	mov	r22,r5
 100ad54:	100a1dc0 	call	100a1dc <__sfp_lock_acquire>
 100ad58:	98002126 	beq	r19,zero,100ade0 <_fwalk_reent+0xc0>
 100ad5c:	002f883a 	mov	r23,zero
 100ad60:	9c800117 	ldw	r18,4(r19)
 100ad64:	9c000217 	ldw	r16,8(r19)
 100ad68:	90bfffc4 	addi	r2,r18,-1
 100ad6c:	10000d16 	blt	r2,zero,100ada4 <_fwalk_reent+0x84>
 100ad70:	0023883a 	mov	r17,zero
 100ad74:	053fffc4 	movi	r20,-1
 100ad78:	8080030f 	ldh	r2,12(r16)
 100ad7c:	8c400044 	addi	r17,r17,1
 100ad80:	10000626 	beq	r2,zero,100ad9c <_fwalk_reent+0x7c>
 100ad84:	8080038f 	ldh	r2,14(r16)
 100ad88:	800b883a 	mov	r5,r16
 100ad8c:	a809883a 	mov	r4,r21
 100ad90:	15000226 	beq	r2,r20,100ad9c <_fwalk_reent+0x7c>
 100ad94:	b03ee83a 	callr	r22
 100ad98:	b8aeb03a 	or	r23,r23,r2
 100ad9c:	84001704 	addi	r16,r16,92
 100ada0:	947ff51e 	bne	r18,r17,100ad78 <_fwalk_reent+0x58>
 100ada4:	9cc00017 	ldw	r19,0(r19)
 100ada8:	983fed1e 	bne	r19,zero,100ad60 <_fwalk_reent+0x40>
 100adac:	100a1e00 	call	100a1e0 <__sfp_lock_release>
 100adb0:	b805883a 	mov	r2,r23
 100adb4:	dfc00817 	ldw	ra,32(sp)
 100adb8:	ddc00717 	ldw	r23,28(sp)
 100adbc:	dd800617 	ldw	r22,24(sp)
 100adc0:	dd400517 	ldw	r21,20(sp)
 100adc4:	dd000417 	ldw	r20,16(sp)
 100adc8:	dcc00317 	ldw	r19,12(sp)
 100adcc:	dc800217 	ldw	r18,8(sp)
 100add0:	dc400117 	ldw	r17,4(sp)
 100add4:	dc000017 	ldw	r16,0(sp)
 100add8:	dec00904 	addi	sp,sp,36
 100addc:	f800283a 	ret
 100ade0:	002f883a 	mov	r23,zero
 100ade4:	003ff106 	br	100adac <_fwalk_reent+0x8c>

0100ade8 <_fwalk>:
 100ade8:	defff804 	addi	sp,sp,-32
 100adec:	dcc00315 	stw	r19,12(sp)
 100adf0:	24c0b804 	addi	r19,r4,736
 100adf4:	dd400515 	stw	r21,20(sp)
 100adf8:	dfc00715 	stw	ra,28(sp)
 100adfc:	dd800615 	stw	r22,24(sp)
 100ae00:	dd000415 	stw	r20,16(sp)
 100ae04:	dc800215 	stw	r18,8(sp)
 100ae08:	dc400115 	stw	r17,4(sp)
 100ae0c:	dc000015 	stw	r16,0(sp)
 100ae10:	282b883a 	mov	r21,r5
 100ae14:	100a1dc0 	call	100a1dc <__sfp_lock_acquire>
 100ae18:	98001f26 	beq	r19,zero,100ae98 <_fwalk+0xb0>
 100ae1c:	002d883a 	mov	r22,zero
 100ae20:	9c800117 	ldw	r18,4(r19)
 100ae24:	9c000217 	ldw	r16,8(r19)
 100ae28:	90bfffc4 	addi	r2,r18,-1
 100ae2c:	10000c16 	blt	r2,zero,100ae60 <_fwalk+0x78>
 100ae30:	0023883a 	mov	r17,zero
 100ae34:	053fffc4 	movi	r20,-1
 100ae38:	8080030f 	ldh	r2,12(r16)
 100ae3c:	8c400044 	addi	r17,r17,1
 100ae40:	10000526 	beq	r2,zero,100ae58 <_fwalk+0x70>
 100ae44:	8080038f 	ldh	r2,14(r16)
 100ae48:	8009883a 	mov	r4,r16
 100ae4c:	15000226 	beq	r2,r20,100ae58 <_fwalk+0x70>
 100ae50:	a83ee83a 	callr	r21
 100ae54:	b0acb03a 	or	r22,r22,r2
 100ae58:	84001704 	addi	r16,r16,92
 100ae5c:	947ff61e 	bne	r18,r17,100ae38 <_fwalk+0x50>
 100ae60:	9cc00017 	ldw	r19,0(r19)
 100ae64:	983fee1e 	bne	r19,zero,100ae20 <_fwalk+0x38>
 100ae68:	100a1e00 	call	100a1e0 <__sfp_lock_release>
 100ae6c:	b005883a 	mov	r2,r22
 100ae70:	dfc00717 	ldw	ra,28(sp)
 100ae74:	dd800617 	ldw	r22,24(sp)
 100ae78:	dd400517 	ldw	r21,20(sp)
 100ae7c:	dd000417 	ldw	r20,16(sp)
 100ae80:	dcc00317 	ldw	r19,12(sp)
 100ae84:	dc800217 	ldw	r18,8(sp)
 100ae88:	dc400117 	ldw	r17,4(sp)
 100ae8c:	dc000017 	ldw	r16,0(sp)
 100ae90:	dec00804 	addi	sp,sp,32
 100ae94:	f800283a 	ret
 100ae98:	002d883a 	mov	r22,zero
 100ae9c:	003ff206 	br	100ae68 <_fwalk+0x80>

0100aea0 <__locale_charset>:
 100aea0:	d0a01017 	ldw	r2,-32704(gp)
 100aea4:	f800283a 	ret

0100aea8 <_localeconv_r>:
 100aea8:	00804074 	movhi	r2,257
 100aeac:	10943d04 	addi	r2,r2,20724
 100aeb0:	f800283a 	ret

0100aeb4 <localeconv>:
 100aeb4:	00804074 	movhi	r2,257
 100aeb8:	109ce904 	addi	r2,r2,29604
 100aebc:	11000017 	ldw	r4,0(r2)
 100aec0:	100aea81 	jmpi	100aea8 <_localeconv_r>

0100aec4 <_setlocale_r>:
 100aec4:	defffc04 	addi	sp,sp,-16
 100aec8:	00c04074 	movhi	r3,257
 100aecc:	18d41304 	addi	r3,r3,20556
 100aed0:	dc800215 	stw	r18,8(sp)
 100aed4:	dc400115 	stw	r17,4(sp)
 100aed8:	dc000015 	stw	r16,0(sp)
 100aedc:	2023883a 	mov	r17,r4
 100aee0:	2825883a 	mov	r18,r5
 100aee4:	dfc00315 	stw	ra,12(sp)
 100aee8:	3021883a 	mov	r16,r6
 100aeec:	3009883a 	mov	r4,r6
 100aef0:	180b883a 	mov	r5,r3
 100aef4:	30000926 	beq	r6,zero,100af1c <_setlocale_r+0x58>
 100aef8:	10063800 	call	1006380 <strcmp>
 100aefc:	8009883a 	mov	r4,r16
 100af00:	01404074 	movhi	r5,257
 100af04:	29541204 	addi	r5,r5,20552
 100af08:	10000b1e 	bne	r2,zero,100af38 <_setlocale_r+0x74>
 100af0c:	8c000d15 	stw	r16,52(r17)
 100af10:	8c800c15 	stw	r18,48(r17)
 100af14:	00c04074 	movhi	r3,257
 100af18:	18d41304 	addi	r3,r3,20556
 100af1c:	1805883a 	mov	r2,r3
 100af20:	dfc00317 	ldw	ra,12(sp)
 100af24:	dc800217 	ldw	r18,8(sp)
 100af28:	dc400117 	ldw	r17,4(sp)
 100af2c:	dc000017 	ldw	r16,0(sp)
 100af30:	dec00404 	addi	sp,sp,16
 100af34:	f800283a 	ret
 100af38:	10063800 	call	1006380 <strcmp>
 100af3c:	0007883a 	mov	r3,zero
 100af40:	103ff226 	beq	r2,zero,100af0c <_setlocale_r+0x48>
 100af44:	003ff506 	br	100af1c <_setlocale_r+0x58>

0100af48 <setlocale>:
 100af48:	01804074 	movhi	r6,257
 100af4c:	319ce904 	addi	r6,r6,29604
 100af50:	2007883a 	mov	r3,r4
 100af54:	31000017 	ldw	r4,0(r6)
 100af58:	280d883a 	mov	r6,r5
 100af5c:	180b883a 	mov	r5,r3
 100af60:	100aec41 	jmpi	100aec4 <_setlocale_r>

0100af64 <__smakebuf_r>:
 100af64:	2880030b 	ldhu	r2,12(r5)
 100af68:	deffed04 	addi	sp,sp,-76
 100af6c:	dc401015 	stw	r17,64(sp)
 100af70:	1080008c 	andi	r2,r2,2
 100af74:	dc000f15 	stw	r16,60(sp)
 100af78:	dfc01215 	stw	ra,72(sp)
 100af7c:	dc801115 	stw	r18,68(sp)
 100af80:	2821883a 	mov	r16,r5
 100af84:	2023883a 	mov	r17,r4
 100af88:	10000b26 	beq	r2,zero,100afb8 <__smakebuf_r+0x54>
 100af8c:	28c010c4 	addi	r3,r5,67
 100af90:	00800044 	movi	r2,1
 100af94:	28800515 	stw	r2,20(r5)
 100af98:	28c00415 	stw	r3,16(r5)
 100af9c:	28c00015 	stw	r3,0(r5)
 100afa0:	dfc01217 	ldw	ra,72(sp)
 100afa4:	dc801117 	ldw	r18,68(sp)
 100afa8:	dc401017 	ldw	r17,64(sp)
 100afac:	dc000f17 	ldw	r16,60(sp)
 100afb0:	dec01304 	addi	sp,sp,76
 100afb4:	f800283a 	ret
 100afb8:	2940038f 	ldh	r5,14(r5)
 100afbc:	28002116 	blt	r5,zero,100b044 <__smakebuf_r+0xe0>
 100afc0:	d80d883a 	mov	r6,sp
 100afc4:	100e4140 	call	100e414 <_fstat_r>
 100afc8:	10001e16 	blt	r2,zero,100b044 <__smakebuf_r+0xe0>
 100afcc:	d8800117 	ldw	r2,4(sp)
 100afd0:	00e00014 	movui	r3,32768
 100afd4:	113c000c 	andi	r4,r2,61440
 100afd8:	20c03126 	beq	r4,r3,100b0a0 <__smakebuf_r+0x13c>
 100afdc:	8080030b 	ldhu	r2,12(r16)
 100afe0:	00c80004 	movi	r3,8192
 100afe4:	10820014 	ori	r2,r2,2048
 100afe8:	8080030d 	sth	r2,12(r16)
 100afec:	20c01e26 	beq	r4,r3,100b068 <__smakebuf_r+0x104>
 100aff0:	04810004 	movi	r18,1024
 100aff4:	8809883a 	mov	r4,r17
 100aff8:	900b883a 	mov	r5,r18
 100affc:	10059480 	call	1005948 <_malloc_r>
 100b000:	1009883a 	mov	r4,r2
 100b004:	10003126 	beq	r2,zero,100b0cc <__smakebuf_r+0x168>
 100b008:	80c0030b 	ldhu	r3,12(r16)
 100b00c:	00804074 	movhi	r2,257
 100b010:	10a8b404 	addi	r2,r2,-23856
 100b014:	88800f15 	stw	r2,60(r17)
 100b018:	18c02014 	ori	r3,r3,128
 100b01c:	84800515 	stw	r18,20(r16)
 100b020:	80c0030d 	sth	r3,12(r16)
 100b024:	81000415 	stw	r4,16(r16)
 100b028:	81000015 	stw	r4,0(r16)
 100b02c:	dfc01217 	ldw	ra,72(sp)
 100b030:	dc801117 	ldw	r18,68(sp)
 100b034:	dc401017 	ldw	r17,64(sp)
 100b038:	dc000f17 	ldw	r16,60(sp)
 100b03c:	dec01304 	addi	sp,sp,76
 100b040:	f800283a 	ret
 100b044:	80c0030b 	ldhu	r3,12(r16)
 100b048:	1880200c 	andi	r2,r3,128
 100b04c:	10000426 	beq	r2,zero,100b060 <__smakebuf_r+0xfc>
 100b050:	04801004 	movi	r18,64
 100b054:	18820014 	ori	r2,r3,2048
 100b058:	8080030d 	sth	r2,12(r16)
 100b05c:	003fe506 	br	100aff4 <__smakebuf_r+0x90>
 100b060:	04810004 	movi	r18,1024
 100b064:	003ffb06 	br	100b054 <__smakebuf_r+0xf0>
 100b068:	8140038f 	ldh	r5,14(r16)
 100b06c:	8809883a 	mov	r4,r17
 100b070:	100e4880 	call	100e488 <_isatty_r>
 100b074:	103fde26 	beq	r2,zero,100aff0 <__smakebuf_r+0x8c>
 100b078:	8080030b 	ldhu	r2,12(r16)
 100b07c:	80c010c4 	addi	r3,r16,67
 100b080:	04810004 	movi	r18,1024
 100b084:	10800054 	ori	r2,r2,1
 100b088:	8080030d 	sth	r2,12(r16)
 100b08c:	00800044 	movi	r2,1
 100b090:	80c00415 	stw	r3,16(r16)
 100b094:	80800515 	stw	r2,20(r16)
 100b098:	80c00015 	stw	r3,0(r16)
 100b09c:	003fd506 	br	100aff4 <__smakebuf_r+0x90>
 100b0a0:	80c00a17 	ldw	r3,40(r16)
 100b0a4:	00804074 	movhi	r2,257
 100b0a8:	10b39604 	addi	r2,r2,-12712
 100b0ac:	18bfcb1e 	bne	r3,r2,100afdc <__smakebuf_r+0x78>
 100b0b0:	8080030b 	ldhu	r2,12(r16)
 100b0b4:	00c10004 	movi	r3,1024
 100b0b8:	1825883a 	mov	r18,r3
 100b0bc:	10c4b03a 	or	r2,r2,r3
 100b0c0:	8080030d 	sth	r2,12(r16)
 100b0c4:	80c01315 	stw	r3,76(r16)
 100b0c8:	003fca06 	br	100aff4 <__smakebuf_r+0x90>
 100b0cc:	8100030b 	ldhu	r4,12(r16)
 100b0d0:	2080800c 	andi	r2,r4,512
 100b0d4:	103fb21e 	bne	r2,zero,100afa0 <__smakebuf_r+0x3c>
 100b0d8:	80c010c4 	addi	r3,r16,67
 100b0dc:	21000094 	ori	r4,r4,2
 100b0e0:	00800044 	movi	r2,1
 100b0e4:	80800515 	stw	r2,20(r16)
 100b0e8:	8100030d 	sth	r4,12(r16)
 100b0ec:	80c00415 	stw	r3,16(r16)
 100b0f0:	80c00015 	stw	r3,0(r16)
 100b0f4:	003faa06 	br	100afa0 <__smakebuf_r+0x3c>

0100b0f8 <memchr>:
 100b0f8:	008000c4 	movi	r2,3
 100b0fc:	29403fcc 	andi	r5,r5,255
 100b100:	2007883a 	mov	r3,r4
 100b104:	1180022e 	bgeu	r2,r6,100b110 <memchr+0x18>
 100b108:	2084703a 	and	r2,r4,r2
 100b10c:	10000b26 	beq	r2,zero,100b13c <memchr+0x44>
 100b110:	313fffc4 	addi	r4,r6,-1
 100b114:	3000051e 	bne	r6,zero,100b12c <memchr+0x34>
 100b118:	00002c06 	br	100b1cc <memchr+0xd4>
 100b11c:	213fffc4 	addi	r4,r4,-1
 100b120:	00bfffc4 	movi	r2,-1
 100b124:	18c00044 	addi	r3,r3,1
 100b128:	20802826 	beq	r4,r2,100b1cc <memchr+0xd4>
 100b12c:	18800003 	ldbu	r2,0(r3)
 100b130:	28bffa1e 	bne	r5,r2,100b11c <memchr+0x24>
 100b134:	1805883a 	mov	r2,r3
 100b138:	f800283a 	ret
 100b13c:	0011883a 	mov	r8,zero
 100b140:	0007883a 	mov	r3,zero
 100b144:	01c00104 	movi	r7,4
 100b148:	4004923a 	slli	r2,r8,8
 100b14c:	18c00044 	addi	r3,r3,1
 100b150:	1151883a 	add	r8,r2,r5
 100b154:	19fffc1e 	bne	r3,r7,100b148 <memchr+0x50>
 100b158:	02bfbff4 	movhi	r10,65279
 100b15c:	52bfbfc4 	addi	r10,r10,-257
 100b160:	02602074 	movhi	r9,32897
 100b164:	4a602004 	addi	r9,r9,-32640
 100b168:	02c000c4 	movi	r11,3
 100b16c:	20800017 	ldw	r2,0(r4)
 100b170:	31bfff04 	addi	r6,r6,-4
 100b174:	200f883a 	mov	r7,r4
 100b178:	1204f03a 	xor	r2,r2,r8
 100b17c:	1287883a 	add	r3,r2,r10
 100b180:	1a46703a 	and	r3,r3,r9
 100b184:	0084303a 	nor	r2,zero,r2
 100b188:	10c4703a 	and	r2,r2,r3
 100b18c:	10000b26 	beq	r2,zero,100b1bc <memchr+0xc4>
 100b190:	20800003 	ldbu	r2,0(r4)
 100b194:	28800f26 	beq	r5,r2,100b1d4 <memchr+0xdc>
 100b198:	20800043 	ldbu	r2,1(r4)
 100b19c:	21c00044 	addi	r7,r4,1
 100b1a0:	28800c26 	beq	r5,r2,100b1d4 <memchr+0xdc>
 100b1a4:	20800083 	ldbu	r2,2(r4)
 100b1a8:	21c00084 	addi	r7,r4,2
 100b1ac:	28800926 	beq	r5,r2,100b1d4 <memchr+0xdc>
 100b1b0:	208000c3 	ldbu	r2,3(r4)
 100b1b4:	21c000c4 	addi	r7,r4,3
 100b1b8:	28800626 	beq	r5,r2,100b1d4 <memchr+0xdc>
 100b1bc:	21000104 	addi	r4,r4,4
 100b1c0:	59bfea36 	bltu	r11,r6,100b16c <memchr+0x74>
 100b1c4:	2007883a 	mov	r3,r4
 100b1c8:	003fd106 	br	100b110 <memchr+0x18>
 100b1cc:	0005883a 	mov	r2,zero
 100b1d0:	f800283a 	ret
 100b1d4:	3805883a 	mov	r2,r7
 100b1d8:	f800283a 	ret

0100b1dc <memmove>:
 100b1dc:	2807883a 	mov	r3,r5
 100b1e0:	2011883a 	mov	r8,r4
 100b1e4:	29000c2e 	bgeu	r5,r4,100b218 <memmove+0x3c>
 100b1e8:	298f883a 	add	r7,r5,r6
 100b1ec:	21c00a2e 	bgeu	r4,r7,100b218 <memmove+0x3c>
 100b1f0:	30000726 	beq	r6,zero,100b210 <memmove+0x34>
 100b1f4:	2187883a 	add	r3,r4,r6
 100b1f8:	198dc83a 	sub	r6,r3,r6
 100b1fc:	39ffffc4 	addi	r7,r7,-1
 100b200:	38800003 	ldbu	r2,0(r7)
 100b204:	18ffffc4 	addi	r3,r3,-1
 100b208:	18800005 	stb	r2,0(r3)
 100b20c:	19bffb1e 	bne	r3,r6,100b1fc <memmove+0x20>
 100b210:	2005883a 	mov	r2,r4
 100b214:	f800283a 	ret
 100b218:	01c003c4 	movi	r7,15
 100b21c:	39800a36 	bltu	r7,r6,100b248 <memmove+0x6c>
 100b220:	303ffb26 	beq	r6,zero,100b210 <memmove+0x34>
 100b224:	400f883a 	mov	r7,r8
 100b228:	320d883a 	add	r6,r6,r8
 100b22c:	28800003 	ldbu	r2,0(r5)
 100b230:	29400044 	addi	r5,r5,1
 100b234:	38800005 	stb	r2,0(r7)
 100b238:	39c00044 	addi	r7,r7,1
 100b23c:	39bffb1e 	bne	r7,r6,100b22c <memmove+0x50>
 100b240:	2005883a 	mov	r2,r4
 100b244:	f800283a 	ret
 100b248:	1904b03a 	or	r2,r3,r4
 100b24c:	108000cc 	andi	r2,r2,3
 100b250:	103ff31e 	bne	r2,zero,100b220 <memmove+0x44>
 100b254:	3811883a 	mov	r8,r7
 100b258:	180b883a 	mov	r5,r3
 100b25c:	200f883a 	mov	r7,r4
 100b260:	28c00017 	ldw	r3,0(r5)
 100b264:	31bffc04 	addi	r6,r6,-16
 100b268:	38c00015 	stw	r3,0(r7)
 100b26c:	28800117 	ldw	r2,4(r5)
 100b270:	38800115 	stw	r2,4(r7)
 100b274:	28c00217 	ldw	r3,8(r5)
 100b278:	38c00215 	stw	r3,8(r7)
 100b27c:	28800317 	ldw	r2,12(r5)
 100b280:	29400404 	addi	r5,r5,16
 100b284:	38800315 	stw	r2,12(r7)
 100b288:	39c00404 	addi	r7,r7,16
 100b28c:	41bff436 	bltu	r8,r6,100b260 <memmove+0x84>
 100b290:	008000c4 	movi	r2,3
 100b294:	1180072e 	bgeu	r2,r6,100b2b4 <memmove+0xd8>
 100b298:	1007883a 	mov	r3,r2
 100b29c:	28800017 	ldw	r2,0(r5)
 100b2a0:	31bfff04 	addi	r6,r6,-4
 100b2a4:	29400104 	addi	r5,r5,4
 100b2a8:	38800015 	stw	r2,0(r7)
 100b2ac:	39c00104 	addi	r7,r7,4
 100b2b0:	19bffa36 	bltu	r3,r6,100b29c <memmove+0xc0>
 100b2b4:	3811883a 	mov	r8,r7
 100b2b8:	003fd906 	br	100b220 <memmove+0x44>

0100b2bc <_Bfree>:
 100b2bc:	28000826 	beq	r5,zero,100b2e0 <_Bfree+0x24>
 100b2c0:	28800117 	ldw	r2,4(r5)
 100b2c4:	21001317 	ldw	r4,76(r4)
 100b2c8:	1085883a 	add	r2,r2,r2
 100b2cc:	1085883a 	add	r2,r2,r2
 100b2d0:	1105883a 	add	r2,r2,r4
 100b2d4:	10c00017 	ldw	r3,0(r2)
 100b2d8:	28c00015 	stw	r3,0(r5)
 100b2dc:	11400015 	stw	r5,0(r2)
 100b2e0:	f800283a 	ret

0100b2e4 <__hi0bits>:
 100b2e4:	20bfffec 	andhi	r2,r4,65535
 100b2e8:	10001426 	beq	r2,zero,100b33c <__hi0bits+0x58>
 100b2ec:	0007883a 	mov	r3,zero
 100b2f0:	20bfc02c 	andhi	r2,r4,65280
 100b2f4:	1000021e 	bne	r2,zero,100b300 <__hi0bits+0x1c>
 100b2f8:	2008923a 	slli	r4,r4,8
 100b2fc:	18c00204 	addi	r3,r3,8
 100b300:	20bc002c 	andhi	r2,r4,61440
 100b304:	1000021e 	bne	r2,zero,100b310 <__hi0bits+0x2c>
 100b308:	2008913a 	slli	r4,r4,4
 100b30c:	18c00104 	addi	r3,r3,4
 100b310:	20b0002c 	andhi	r2,r4,49152
 100b314:	1000031e 	bne	r2,zero,100b324 <__hi0bits+0x40>
 100b318:	2105883a 	add	r2,r4,r4
 100b31c:	18c00084 	addi	r3,r3,2
 100b320:	1089883a 	add	r4,r2,r2
 100b324:	20000316 	blt	r4,zero,100b334 <__hi0bits+0x50>
 100b328:	2090002c 	andhi	r2,r4,16384
 100b32c:	10000626 	beq	r2,zero,100b348 <__hi0bits+0x64>
 100b330:	18c00044 	addi	r3,r3,1
 100b334:	1805883a 	mov	r2,r3
 100b338:	f800283a 	ret
 100b33c:	2008943a 	slli	r4,r4,16
 100b340:	00c00404 	movi	r3,16
 100b344:	003fea06 	br	100b2f0 <__hi0bits+0xc>
 100b348:	00c00804 	movi	r3,32
 100b34c:	1805883a 	mov	r2,r3
 100b350:	f800283a 	ret

0100b354 <__lo0bits>:
 100b354:	20c00017 	ldw	r3,0(r4)
 100b358:	188001cc 	andi	r2,r3,7
 100b35c:	10000a26 	beq	r2,zero,100b388 <__lo0bits+0x34>
 100b360:	1880004c 	andi	r2,r3,1
 100b364:	1005003a 	cmpeq	r2,r2,zero
 100b368:	10002126 	beq	r2,zero,100b3f0 <__lo0bits+0x9c>
 100b36c:	1880008c 	andi	r2,r3,2
 100b370:	1000251e 	bne	r2,zero,100b408 <__lo0bits+0xb4>
 100b374:	1804d0ba 	srli	r2,r3,2
 100b378:	01400084 	movi	r5,2
 100b37c:	20800015 	stw	r2,0(r4)
 100b380:	2805883a 	mov	r2,r5
 100b384:	f800283a 	ret
 100b388:	18bfffcc 	andi	r2,r3,65535
 100b38c:	10001526 	beq	r2,zero,100b3e4 <__lo0bits+0x90>
 100b390:	000b883a 	mov	r5,zero
 100b394:	18803fcc 	andi	r2,r3,255
 100b398:	1000021e 	bne	r2,zero,100b3a4 <__lo0bits+0x50>
 100b39c:	1806d23a 	srli	r3,r3,8
 100b3a0:	29400204 	addi	r5,r5,8
 100b3a4:	188003cc 	andi	r2,r3,15
 100b3a8:	1000021e 	bne	r2,zero,100b3b4 <__lo0bits+0x60>
 100b3ac:	1806d13a 	srli	r3,r3,4
 100b3b0:	29400104 	addi	r5,r5,4
 100b3b4:	188000cc 	andi	r2,r3,3
 100b3b8:	1000021e 	bne	r2,zero,100b3c4 <__lo0bits+0x70>
 100b3bc:	1806d0ba 	srli	r3,r3,2
 100b3c0:	29400084 	addi	r5,r5,2
 100b3c4:	1880004c 	andi	r2,r3,1
 100b3c8:	1000031e 	bne	r2,zero,100b3d8 <__lo0bits+0x84>
 100b3cc:	1806d07a 	srli	r3,r3,1
 100b3d0:	18000a26 	beq	r3,zero,100b3fc <__lo0bits+0xa8>
 100b3d4:	29400044 	addi	r5,r5,1
 100b3d8:	2805883a 	mov	r2,r5
 100b3dc:	20c00015 	stw	r3,0(r4)
 100b3e0:	f800283a 	ret
 100b3e4:	1806d43a 	srli	r3,r3,16
 100b3e8:	01400404 	movi	r5,16
 100b3ec:	003fe906 	br	100b394 <__lo0bits+0x40>
 100b3f0:	000b883a 	mov	r5,zero
 100b3f4:	2805883a 	mov	r2,r5
 100b3f8:	f800283a 	ret
 100b3fc:	01400804 	movi	r5,32
 100b400:	2805883a 	mov	r2,r5
 100b404:	f800283a 	ret
 100b408:	1804d07a 	srli	r2,r3,1
 100b40c:	01400044 	movi	r5,1
 100b410:	20800015 	stw	r2,0(r4)
 100b414:	003fda06 	br	100b380 <__lo0bits+0x2c>

0100b418 <__mcmp>:
 100b418:	20800417 	ldw	r2,16(r4)
 100b41c:	28c00417 	ldw	r3,16(r5)
 100b420:	10cfc83a 	sub	r7,r2,r3
 100b424:	38000c1e 	bne	r7,zero,100b458 <__mcmp+0x40>
 100b428:	18c5883a 	add	r2,r3,r3
 100b42c:	1085883a 	add	r2,r2,r2
 100b430:	10c00504 	addi	r3,r2,20
 100b434:	21000504 	addi	r4,r4,20
 100b438:	28cb883a 	add	r5,r5,r3
 100b43c:	2085883a 	add	r2,r4,r2
 100b440:	10bfff04 	addi	r2,r2,-4
 100b444:	297fff04 	addi	r5,r5,-4
 100b448:	11800017 	ldw	r6,0(r2)
 100b44c:	28c00017 	ldw	r3,0(r5)
 100b450:	30c0031e 	bne	r6,r3,100b460 <__mcmp+0x48>
 100b454:	20bffa36 	bltu	r4,r2,100b440 <__mcmp+0x28>
 100b458:	3805883a 	mov	r2,r7
 100b45c:	f800283a 	ret
 100b460:	30c00336 	bltu	r6,r3,100b470 <__mcmp+0x58>
 100b464:	01c00044 	movi	r7,1
 100b468:	3805883a 	mov	r2,r7
 100b46c:	f800283a 	ret
 100b470:	01ffffc4 	movi	r7,-1
 100b474:	003ff806 	br	100b458 <__mcmp+0x40>

0100b478 <__ulp>:
 100b478:	295ffc2c 	andhi	r5,r5,32752
 100b47c:	013f3034 	movhi	r4,64704
 100b480:	290b883a 	add	r5,r5,r4
 100b484:	0145c83a 	sub	r2,zero,r5
 100b488:	1007d53a 	srai	r3,r2,20
 100b48c:	000d883a 	mov	r6,zero
 100b490:	0140040e 	bge	zero,r5,100b4a4 <__ulp+0x2c>
 100b494:	280f883a 	mov	r7,r5
 100b498:	3807883a 	mov	r3,r7
 100b49c:	3005883a 	mov	r2,r6
 100b4a0:	f800283a 	ret
 100b4a4:	008004c4 	movi	r2,19
 100b4a8:	193ffb04 	addi	r4,r3,-20
 100b4ac:	10c00c0e 	bge	r2,r3,100b4e0 <__ulp+0x68>
 100b4b0:	008007c4 	movi	r2,31
 100b4b4:	1107c83a 	sub	r3,r2,r4
 100b4b8:	00800784 	movi	r2,30
 100b4bc:	01400044 	movi	r5,1
 100b4c0:	11000216 	blt	r2,r4,100b4cc <__ulp+0x54>
 100b4c4:	00800044 	movi	r2,1
 100b4c8:	10ca983a 	sll	r5,r2,r3
 100b4cc:	000f883a 	mov	r7,zero
 100b4d0:	280d883a 	mov	r6,r5
 100b4d4:	3807883a 	mov	r3,r7
 100b4d8:	3005883a 	mov	r2,r6
 100b4dc:	f800283a 	ret
 100b4e0:	00800234 	movhi	r2,8
 100b4e4:	10cfd83a 	sra	r7,r2,r3
 100b4e8:	000d883a 	mov	r6,zero
 100b4ec:	3005883a 	mov	r2,r6
 100b4f0:	3807883a 	mov	r3,r7
 100b4f4:	f800283a 	ret

0100b4f8 <__b2d>:
 100b4f8:	20800417 	ldw	r2,16(r4)
 100b4fc:	defff904 	addi	sp,sp,-28
 100b500:	dd000415 	stw	r20,16(sp)
 100b504:	1085883a 	add	r2,r2,r2
 100b508:	25000504 	addi	r20,r4,20
 100b50c:	1085883a 	add	r2,r2,r2
 100b510:	dc000015 	stw	r16,0(sp)
 100b514:	a0a1883a 	add	r16,r20,r2
 100b518:	dd400515 	stw	r21,20(sp)
 100b51c:	857fff17 	ldw	r21,-4(r16)
 100b520:	dc400115 	stw	r17,4(sp)
 100b524:	dfc00615 	stw	ra,24(sp)
 100b528:	a809883a 	mov	r4,r21
 100b52c:	2823883a 	mov	r17,r5
 100b530:	dcc00315 	stw	r19,12(sp)
 100b534:	dc800215 	stw	r18,8(sp)
 100b538:	100b2e40 	call	100b2e4 <__hi0bits>
 100b53c:	100b883a 	mov	r5,r2
 100b540:	00800804 	movi	r2,32
 100b544:	1145c83a 	sub	r2,r2,r5
 100b548:	88800015 	stw	r2,0(r17)
 100b54c:	00800284 	movi	r2,10
 100b550:	80ffff04 	addi	r3,r16,-4
 100b554:	11401416 	blt	r2,r5,100b5a8 <__b2d+0xb0>
 100b558:	008002c4 	movi	r2,11
 100b55c:	1149c83a 	sub	r4,r2,r5
 100b560:	a0c02736 	bltu	r20,r3,100b600 <__b2d+0x108>
 100b564:	000d883a 	mov	r6,zero
 100b568:	28800544 	addi	r2,r5,21
 100b56c:	a906d83a 	srl	r3,r21,r4
 100b570:	a884983a 	sll	r2,r21,r2
 100b574:	1ccffc34 	orhi	r19,r3,16368
 100b578:	11a4b03a 	or	r18,r2,r6
 100b57c:	9005883a 	mov	r2,r18
 100b580:	9807883a 	mov	r3,r19
 100b584:	dfc00617 	ldw	ra,24(sp)
 100b588:	dd400517 	ldw	r21,20(sp)
 100b58c:	dd000417 	ldw	r20,16(sp)
 100b590:	dcc00317 	ldw	r19,12(sp)
 100b594:	dc800217 	ldw	r18,8(sp)
 100b598:	dc400117 	ldw	r17,4(sp)
 100b59c:	dc000017 	ldw	r16,0(sp)
 100b5a0:	dec00704 	addi	sp,sp,28
 100b5a4:	f800283a 	ret
 100b5a8:	a0c00e36 	bltu	r20,r3,100b5e4 <__b2d+0xec>
 100b5ac:	293ffd44 	addi	r4,r5,-11
 100b5b0:	000d883a 	mov	r6,zero
 100b5b4:	20000f26 	beq	r4,zero,100b5f4 <__b2d+0xfc>
 100b5b8:	00800804 	movi	r2,32
 100b5bc:	110bc83a 	sub	r5,r2,r4
 100b5c0:	a0c01236 	bltu	r20,r3,100b60c <__b2d+0x114>
 100b5c4:	000f883a 	mov	r7,zero
 100b5c8:	a904983a 	sll	r2,r21,r4
 100b5cc:	3146d83a 	srl	r3,r6,r5
 100b5d0:	3108983a 	sll	r4,r6,r4
 100b5d4:	108ffc34 	orhi	r2,r2,16368
 100b5d8:	18a6b03a 	or	r19,r3,r2
 100b5dc:	3924b03a 	or	r18,r7,r4
 100b5e0:	003fe606 	br	100b57c <__b2d+0x84>
 100b5e4:	293ffd44 	addi	r4,r5,-11
 100b5e8:	81bffe17 	ldw	r6,-8(r16)
 100b5ec:	80fffe04 	addi	r3,r16,-8
 100b5f0:	203ff11e 	bne	r4,zero,100b5b8 <__b2d+0xc0>
 100b5f4:	accffc34 	orhi	r19,r21,16368
 100b5f8:	3025883a 	mov	r18,r6
 100b5fc:	003fdf06 	br	100b57c <__b2d+0x84>
 100b600:	18bfff17 	ldw	r2,-4(r3)
 100b604:	110cd83a 	srl	r6,r2,r4
 100b608:	003fd706 	br	100b568 <__b2d+0x70>
 100b60c:	18bfff17 	ldw	r2,-4(r3)
 100b610:	114ed83a 	srl	r7,r2,r5
 100b614:	003fec06 	br	100b5c8 <__b2d+0xd0>

0100b618 <__ratio>:
 100b618:	defff904 	addi	sp,sp,-28
 100b61c:	dc400215 	stw	r17,8(sp)
 100b620:	2823883a 	mov	r17,r5
 100b624:	d80b883a 	mov	r5,sp
 100b628:	dfc00615 	stw	ra,24(sp)
 100b62c:	dd000515 	stw	r20,20(sp)
 100b630:	dcc00415 	stw	r19,16(sp)
 100b634:	dc800315 	stw	r18,12(sp)
 100b638:	2025883a 	mov	r18,r4
 100b63c:	100b4f80 	call	100b4f8 <__b2d>
 100b640:	8809883a 	mov	r4,r17
 100b644:	d9400104 	addi	r5,sp,4
 100b648:	1027883a 	mov	r19,r2
 100b64c:	1829883a 	mov	r20,r3
 100b650:	100b4f80 	call	100b4f8 <__b2d>
 100b654:	89000417 	ldw	r4,16(r17)
 100b658:	91c00417 	ldw	r7,16(r18)
 100b65c:	d9800117 	ldw	r6,4(sp)
 100b660:	180b883a 	mov	r5,r3
 100b664:	390fc83a 	sub	r7,r7,r4
 100b668:	1009883a 	mov	r4,r2
 100b66c:	d8800017 	ldw	r2,0(sp)
 100b670:	380e917a 	slli	r7,r7,5
 100b674:	2011883a 	mov	r8,r4
 100b678:	1185c83a 	sub	r2,r2,r6
 100b67c:	11c5883a 	add	r2,r2,r7
 100b680:	1006953a 	slli	r3,r2,20
 100b684:	2813883a 	mov	r9,r5
 100b688:	00800d0e 	bge	zero,r2,100b6c0 <__ratio+0xa8>
 100b68c:	1d29883a 	add	r20,r3,r20
 100b690:	a00b883a 	mov	r5,r20
 100b694:	480f883a 	mov	r7,r9
 100b698:	9809883a 	mov	r4,r19
 100b69c:	400d883a 	mov	r6,r8
 100b6a0:	100fa3c0 	call	100fa3c <__divdf3>
 100b6a4:	dfc00617 	ldw	ra,24(sp)
 100b6a8:	dd000517 	ldw	r20,20(sp)
 100b6ac:	dcc00417 	ldw	r19,16(sp)
 100b6b0:	dc800317 	ldw	r18,12(sp)
 100b6b4:	dc400217 	ldw	r17,8(sp)
 100b6b8:	dec00704 	addi	sp,sp,28
 100b6bc:	f800283a 	ret
 100b6c0:	28d3c83a 	sub	r9,r5,r3
 100b6c4:	003ff206 	br	100b690 <__ratio+0x78>

0100b6c8 <_mprec_log10>:
 100b6c8:	defffe04 	addi	sp,sp,-8
 100b6cc:	008005c4 	movi	r2,23
 100b6d0:	dc000015 	stw	r16,0(sp)
 100b6d4:	dfc00115 	stw	ra,4(sp)
 100b6d8:	2021883a 	mov	r16,r4
 100b6dc:	11000c16 	blt	r2,r4,100b710 <_mprec_log10+0x48>
 100b6e0:	200490fa 	slli	r2,r4,3
 100b6e4:	00c04074 	movhi	r3,257
 100b6e8:	18d44904 	addi	r3,r3,20772
 100b6ec:	10c5883a 	add	r2,r2,r3
 100b6f0:	12400117 	ldw	r9,4(r2)
 100b6f4:	12000017 	ldw	r8,0(r2)
 100b6f8:	4807883a 	mov	r3,r9
 100b6fc:	4005883a 	mov	r2,r8
 100b700:	dfc00117 	ldw	ra,4(sp)
 100b704:	dc000017 	ldw	r16,0(sp)
 100b708:	dec00204 	addi	sp,sp,8
 100b70c:	f800283a 	ret
 100b710:	0011883a 	mov	r8,zero
 100b714:	024ffc34 	movhi	r9,16368
 100b718:	0005883a 	mov	r2,zero
 100b71c:	00d00934 	movhi	r3,16420
 100b720:	480b883a 	mov	r5,r9
 100b724:	4009883a 	mov	r4,r8
 100b728:	180f883a 	mov	r7,r3
 100b72c:	100d883a 	mov	r6,r2
 100b730:	100f6780 	call	100f678 <__muldf3>
 100b734:	843fffc4 	addi	r16,r16,-1
 100b738:	1011883a 	mov	r8,r2
 100b73c:	1813883a 	mov	r9,r3
 100b740:	803ff51e 	bne	r16,zero,100b718 <_mprec_log10+0x50>
 100b744:	4005883a 	mov	r2,r8
 100b748:	4807883a 	mov	r3,r9
 100b74c:	dfc00117 	ldw	ra,4(sp)
 100b750:	dc000017 	ldw	r16,0(sp)
 100b754:	dec00204 	addi	sp,sp,8
 100b758:	f800283a 	ret

0100b75c <__copybits>:
 100b75c:	297fffc4 	addi	r5,r5,-1
 100b760:	30800417 	ldw	r2,16(r6)
 100b764:	280bd17a 	srai	r5,r5,5
 100b768:	31800504 	addi	r6,r6,20
 100b76c:	1085883a 	add	r2,r2,r2
 100b770:	294b883a 	add	r5,r5,r5
 100b774:	294b883a 	add	r5,r5,r5
 100b778:	1085883a 	add	r2,r2,r2
 100b77c:	290b883a 	add	r5,r5,r4
 100b780:	3087883a 	add	r3,r6,r2
 100b784:	29400104 	addi	r5,r5,4
 100b788:	30c0052e 	bgeu	r6,r3,100b7a0 <__copybits+0x44>
 100b78c:	30800017 	ldw	r2,0(r6)
 100b790:	31800104 	addi	r6,r6,4
 100b794:	20800015 	stw	r2,0(r4)
 100b798:	21000104 	addi	r4,r4,4
 100b79c:	30fffb36 	bltu	r6,r3,100b78c <__copybits+0x30>
 100b7a0:	2140032e 	bgeu	r4,r5,100b7b0 <__copybits+0x54>
 100b7a4:	20000015 	stw	zero,0(r4)
 100b7a8:	21000104 	addi	r4,r4,4
 100b7ac:	217ffd36 	bltu	r4,r5,100b7a4 <__copybits+0x48>
 100b7b0:	f800283a 	ret

0100b7b4 <__any_on>:
 100b7b4:	20800417 	ldw	r2,16(r4)
 100b7b8:	2807d17a 	srai	r3,r5,5
 100b7bc:	21000504 	addi	r4,r4,20
 100b7c0:	10c00d0e 	bge	r2,r3,100b7f8 <__any_on+0x44>
 100b7c4:	1085883a 	add	r2,r2,r2
 100b7c8:	1085883a 	add	r2,r2,r2
 100b7cc:	208d883a 	add	r6,r4,r2
 100b7d0:	2180182e 	bgeu	r4,r6,100b834 <__any_on+0x80>
 100b7d4:	30bfff17 	ldw	r2,-4(r6)
 100b7d8:	30ffff04 	addi	r3,r6,-4
 100b7dc:	1000041e 	bne	r2,zero,100b7f0 <__any_on+0x3c>
 100b7e0:	20c0142e 	bgeu	r4,r3,100b834 <__any_on+0x80>
 100b7e4:	18ffff04 	addi	r3,r3,-4
 100b7e8:	18800017 	ldw	r2,0(r3)
 100b7ec:	103ffc26 	beq	r2,zero,100b7e0 <__any_on+0x2c>
 100b7f0:	00800044 	movi	r2,1
 100b7f4:	f800283a 	ret
 100b7f8:	18800a0e 	bge	r3,r2,100b824 <__any_on+0x70>
 100b7fc:	294007cc 	andi	r5,r5,31
 100b800:	28000826 	beq	r5,zero,100b824 <__any_on+0x70>
 100b804:	18c5883a 	add	r2,r3,r3
 100b808:	1085883a 	add	r2,r2,r2
 100b80c:	208d883a 	add	r6,r4,r2
 100b810:	30c00017 	ldw	r3,0(r6)
 100b814:	1944d83a 	srl	r2,r3,r5
 100b818:	1144983a 	sll	r2,r2,r5
 100b81c:	18bff41e 	bne	r3,r2,100b7f0 <__any_on+0x3c>
 100b820:	003feb06 	br	100b7d0 <__any_on+0x1c>
 100b824:	18c5883a 	add	r2,r3,r3
 100b828:	1085883a 	add	r2,r2,r2
 100b82c:	208d883a 	add	r6,r4,r2
 100b830:	003fe706 	br	100b7d0 <__any_on+0x1c>
 100b834:	0005883a 	mov	r2,zero
 100b838:	f800283a 	ret

0100b83c <_Balloc>:
 100b83c:	20c01317 	ldw	r3,76(r4)
 100b840:	defffb04 	addi	sp,sp,-20
 100b844:	dcc00315 	stw	r19,12(sp)
 100b848:	dc800215 	stw	r18,8(sp)
 100b84c:	dfc00415 	stw	ra,16(sp)
 100b850:	2825883a 	mov	r18,r5
 100b854:	dc400115 	stw	r17,4(sp)
 100b858:	dc000015 	stw	r16,0(sp)
 100b85c:	2027883a 	mov	r19,r4
 100b860:	01800404 	movi	r6,16
 100b864:	01400104 	movi	r5,4
 100b868:	18001726 	beq	r3,zero,100b8c8 <_Balloc+0x8c>
 100b86c:	01400044 	movi	r5,1
 100b870:	9485883a 	add	r2,r18,r18
 100b874:	2ca2983a 	sll	r17,r5,r18
 100b878:	1085883a 	add	r2,r2,r2
 100b87c:	10c7883a 	add	r3,r2,r3
 100b880:	1c000017 	ldw	r16,0(r3)
 100b884:	8c4d883a 	add	r6,r17,r17
 100b888:	318d883a 	add	r6,r6,r6
 100b88c:	9809883a 	mov	r4,r19
 100b890:	31800504 	addi	r6,r6,20
 100b894:	80001226 	beq	r16,zero,100b8e0 <_Balloc+0xa4>
 100b898:	80800017 	ldw	r2,0(r16)
 100b89c:	18800015 	stw	r2,0(r3)
 100b8a0:	80000415 	stw	zero,16(r16)
 100b8a4:	80000315 	stw	zero,12(r16)
 100b8a8:	8005883a 	mov	r2,r16
 100b8ac:	dfc00417 	ldw	ra,16(sp)
 100b8b0:	dcc00317 	ldw	r19,12(sp)
 100b8b4:	dc800217 	ldw	r18,8(sp)
 100b8b8:	dc400117 	ldw	r17,4(sp)
 100b8bc:	dc000017 	ldw	r16,0(sp)
 100b8c0:	dec00504 	addi	sp,sp,20
 100b8c4:	f800283a 	ret
 100b8c8:	10057c80 	call	10057c8 <_calloc_r>
 100b8cc:	1007883a 	mov	r3,r2
 100b8d0:	0021883a 	mov	r16,zero
 100b8d4:	98801315 	stw	r2,76(r19)
 100b8d8:	103fe41e 	bne	r2,zero,100b86c <_Balloc+0x30>
 100b8dc:	003ff206 	br	100b8a8 <_Balloc+0x6c>
 100b8e0:	10057c80 	call	10057c8 <_calloc_r>
 100b8e4:	103ff026 	beq	r2,zero,100b8a8 <_Balloc+0x6c>
 100b8e8:	1021883a 	mov	r16,r2
 100b8ec:	14800115 	stw	r18,4(r2)
 100b8f0:	14400215 	stw	r17,8(r2)
 100b8f4:	003fea06 	br	100b8a0 <_Balloc+0x64>

0100b8f8 <__d2b>:
 100b8f8:	defff504 	addi	sp,sp,-44
 100b8fc:	dcc00515 	stw	r19,20(sp)
 100b900:	04c00044 	movi	r19,1
 100b904:	dc000215 	stw	r16,8(sp)
 100b908:	2821883a 	mov	r16,r5
 100b90c:	980b883a 	mov	r5,r19
 100b910:	ddc00915 	stw	r23,36(sp)
 100b914:	dd800815 	stw	r22,32(sp)
 100b918:	dd400715 	stw	r21,28(sp)
 100b91c:	dd000615 	stw	r20,24(sp)
 100b920:	dc800415 	stw	r18,16(sp)
 100b924:	dc400315 	stw	r17,12(sp)
 100b928:	dfc00a15 	stw	ra,40(sp)
 100b92c:	3023883a 	mov	r17,r6
 100b930:	382d883a 	mov	r22,r7
 100b934:	ddc00b17 	ldw	r23,44(sp)
 100b938:	100b83c0 	call	100b83c <_Balloc>
 100b93c:	1025883a 	mov	r18,r2
 100b940:	00a00034 	movhi	r2,32768
 100b944:	10bfffc4 	addi	r2,r2,-1
 100b948:	8888703a 	and	r4,r17,r2
 100b94c:	202ad53a 	srli	r21,r4,20
 100b950:	00800434 	movhi	r2,16
 100b954:	10bfffc4 	addi	r2,r2,-1
 100b958:	8886703a 	and	r3,r17,r2
 100b95c:	a829003a 	cmpeq	r20,r21,zero
 100b960:	800b883a 	mov	r5,r16
 100b964:	d8c00115 	stw	r3,4(sp)
 100b968:	94000504 	addi	r16,r18,20
 100b96c:	a000021e 	bne	r20,zero,100b978 <__d2b+0x80>
 100b970:	18c00434 	orhi	r3,r3,16
 100b974:	d8c00115 	stw	r3,4(sp)
 100b978:	28002726 	beq	r5,zero,100ba18 <__d2b+0x120>
 100b97c:	d809883a 	mov	r4,sp
 100b980:	d9400015 	stw	r5,0(sp)
 100b984:	100b3540 	call	100b354 <__lo0bits>
 100b988:	100d883a 	mov	r6,r2
 100b98c:	10003526 	beq	r2,zero,100ba64 <__d2b+0x16c>
 100b990:	d8c00117 	ldw	r3,4(sp)
 100b994:	00800804 	movi	r2,32
 100b998:	1185c83a 	sub	r2,r2,r6
 100b99c:	d9000017 	ldw	r4,0(sp)
 100b9a0:	1886983a 	sll	r3,r3,r2
 100b9a4:	1906b03a 	or	r3,r3,r4
 100b9a8:	90c00515 	stw	r3,20(r18)
 100b9ac:	d8c00117 	ldw	r3,4(sp)
 100b9b0:	1986d83a 	srl	r3,r3,r6
 100b9b4:	d8c00115 	stw	r3,4(sp)
 100b9b8:	180b003a 	cmpeq	r5,r3,zero
 100b9bc:	00800084 	movi	r2,2
 100b9c0:	114bc83a 	sub	r5,r2,r5
 100b9c4:	80c00115 	stw	r3,4(r16)
 100b9c8:	91400415 	stw	r5,16(r18)
 100b9cc:	a0001a1e 	bne	r20,zero,100ba38 <__d2b+0x140>
 100b9d0:	3545883a 	add	r2,r6,r21
 100b9d4:	10bef344 	addi	r2,r2,-1075
 100b9d8:	00c00d44 	movi	r3,53
 100b9dc:	b0800015 	stw	r2,0(r22)
 100b9e0:	1987c83a 	sub	r3,r3,r6
 100b9e4:	b8c00015 	stw	r3,0(r23)
 100b9e8:	9005883a 	mov	r2,r18
 100b9ec:	dfc00a17 	ldw	ra,40(sp)
 100b9f0:	ddc00917 	ldw	r23,36(sp)
 100b9f4:	dd800817 	ldw	r22,32(sp)
 100b9f8:	dd400717 	ldw	r21,28(sp)
 100b9fc:	dd000617 	ldw	r20,24(sp)
 100ba00:	dcc00517 	ldw	r19,20(sp)
 100ba04:	dc800417 	ldw	r18,16(sp)
 100ba08:	dc400317 	ldw	r17,12(sp)
 100ba0c:	dc000217 	ldw	r16,8(sp)
 100ba10:	dec00b04 	addi	sp,sp,44
 100ba14:	f800283a 	ret
 100ba18:	d9000104 	addi	r4,sp,4
 100ba1c:	100b3540 	call	100b354 <__lo0bits>
 100ba20:	11800804 	addi	r6,r2,32
 100ba24:	d8800117 	ldw	r2,4(sp)
 100ba28:	94c00415 	stw	r19,16(r18)
 100ba2c:	980b883a 	mov	r5,r19
 100ba30:	90800515 	stw	r2,20(r18)
 100ba34:	a03fe626 	beq	r20,zero,100b9d0 <__d2b+0xd8>
 100ba38:	2945883a 	add	r2,r5,r5
 100ba3c:	1085883a 	add	r2,r2,r2
 100ba40:	1405883a 	add	r2,r2,r16
 100ba44:	113fff17 	ldw	r4,-4(r2)
 100ba48:	30fef384 	addi	r3,r6,-1074
 100ba4c:	2820917a 	slli	r16,r5,5
 100ba50:	b0c00015 	stw	r3,0(r22)
 100ba54:	100b2e40 	call	100b2e4 <__hi0bits>
 100ba58:	80a1c83a 	sub	r16,r16,r2
 100ba5c:	bc000015 	stw	r16,0(r23)
 100ba60:	003fe106 	br	100b9e8 <__d2b+0xf0>
 100ba64:	d8800017 	ldw	r2,0(sp)
 100ba68:	90800515 	stw	r2,20(r18)
 100ba6c:	d8c00117 	ldw	r3,4(sp)
 100ba70:	003fd106 	br	100b9b8 <__d2b+0xc0>

0100ba74 <__mdiff>:
 100ba74:	defffb04 	addi	sp,sp,-20
 100ba78:	dc000015 	stw	r16,0(sp)
 100ba7c:	2821883a 	mov	r16,r5
 100ba80:	dc800215 	stw	r18,8(sp)
 100ba84:	300b883a 	mov	r5,r6
 100ba88:	2025883a 	mov	r18,r4
 100ba8c:	8009883a 	mov	r4,r16
 100ba90:	dc400115 	stw	r17,4(sp)
 100ba94:	dfc00415 	stw	ra,16(sp)
 100ba98:	dcc00315 	stw	r19,12(sp)
 100ba9c:	3023883a 	mov	r17,r6
 100baa0:	100b4180 	call	100b418 <__mcmp>
 100baa4:	10004226 	beq	r2,zero,100bbb0 <__mdiff+0x13c>
 100baa8:	10005016 	blt	r2,zero,100bbec <__mdiff+0x178>
 100baac:	0027883a 	mov	r19,zero
 100bab0:	81400117 	ldw	r5,4(r16)
 100bab4:	9009883a 	mov	r4,r18
 100bab8:	100b83c0 	call	100b83c <_Balloc>
 100babc:	1019883a 	mov	r12,r2
 100bac0:	82800417 	ldw	r10,16(r16)
 100bac4:	88800417 	ldw	r2,16(r17)
 100bac8:	81800504 	addi	r6,r16,20
 100bacc:	5287883a 	add	r3,r10,r10
 100bad0:	1085883a 	add	r2,r2,r2
 100bad4:	18c7883a 	add	r3,r3,r3
 100bad8:	1085883a 	add	r2,r2,r2
 100badc:	8a000504 	addi	r8,r17,20
 100bae0:	64c00315 	stw	r19,12(r12)
 100bae4:	30db883a 	add	r13,r6,r3
 100bae8:	4097883a 	add	r11,r8,r2
 100baec:	61c00504 	addi	r7,r12,20
 100baf0:	0013883a 	mov	r9,zero
 100baf4:	31000017 	ldw	r4,0(r6)
 100baf8:	41400017 	ldw	r5,0(r8)
 100bafc:	42000104 	addi	r8,r8,4
 100bb00:	20bfffcc 	andi	r2,r4,65535
 100bb04:	28ffffcc 	andi	r3,r5,65535
 100bb08:	10c5c83a 	sub	r2,r2,r3
 100bb0c:	1245883a 	add	r2,r2,r9
 100bb10:	2008d43a 	srli	r4,r4,16
 100bb14:	280ad43a 	srli	r5,r5,16
 100bb18:	1007d43a 	srai	r3,r2,16
 100bb1c:	3880000d 	sth	r2,0(r7)
 100bb20:	2149c83a 	sub	r4,r4,r5
 100bb24:	20c9883a 	add	r4,r4,r3
 100bb28:	3900008d 	sth	r4,2(r7)
 100bb2c:	31800104 	addi	r6,r6,4
 100bb30:	39c00104 	addi	r7,r7,4
 100bb34:	2013d43a 	srai	r9,r4,16
 100bb38:	42ffee36 	bltu	r8,r11,100baf4 <__mdiff+0x80>
 100bb3c:	33400c2e 	bgeu	r6,r13,100bb70 <__mdiff+0xfc>
 100bb40:	30800017 	ldw	r2,0(r6)
 100bb44:	31800104 	addi	r6,r6,4
 100bb48:	10ffffcc 	andi	r3,r2,65535
 100bb4c:	1a47883a 	add	r3,r3,r9
 100bb50:	1004d43a 	srli	r2,r2,16
 100bb54:	1809d43a 	srai	r4,r3,16
 100bb58:	38c0000d 	sth	r3,0(r7)
 100bb5c:	1105883a 	add	r2,r2,r4
 100bb60:	3880008d 	sth	r2,2(r7)
 100bb64:	1013d43a 	srai	r9,r2,16
 100bb68:	39c00104 	addi	r7,r7,4
 100bb6c:	337ff436 	bltu	r6,r13,100bb40 <__mdiff+0xcc>
 100bb70:	38bfff17 	ldw	r2,-4(r7)
 100bb74:	38ffff04 	addi	r3,r7,-4
 100bb78:	1000041e 	bne	r2,zero,100bb8c <__mdiff+0x118>
 100bb7c:	18ffff04 	addi	r3,r3,-4
 100bb80:	18800017 	ldw	r2,0(r3)
 100bb84:	52bfffc4 	addi	r10,r10,-1
 100bb88:	103ffc26 	beq	r2,zero,100bb7c <__mdiff+0x108>
 100bb8c:	6005883a 	mov	r2,r12
 100bb90:	62800415 	stw	r10,16(r12)
 100bb94:	dfc00417 	ldw	ra,16(sp)
 100bb98:	dcc00317 	ldw	r19,12(sp)
 100bb9c:	dc800217 	ldw	r18,8(sp)
 100bba0:	dc400117 	ldw	r17,4(sp)
 100bba4:	dc000017 	ldw	r16,0(sp)
 100bba8:	dec00504 	addi	sp,sp,20
 100bbac:	f800283a 	ret
 100bbb0:	9009883a 	mov	r4,r18
 100bbb4:	000b883a 	mov	r5,zero
 100bbb8:	100b83c0 	call	100b83c <_Balloc>
 100bbbc:	1019883a 	mov	r12,r2
 100bbc0:	00800044 	movi	r2,1
 100bbc4:	60800415 	stw	r2,16(r12)
 100bbc8:	6005883a 	mov	r2,r12
 100bbcc:	60000515 	stw	zero,20(r12)
 100bbd0:	dfc00417 	ldw	ra,16(sp)
 100bbd4:	dcc00317 	ldw	r19,12(sp)
 100bbd8:	dc800217 	ldw	r18,8(sp)
 100bbdc:	dc400117 	ldw	r17,4(sp)
 100bbe0:	dc000017 	ldw	r16,0(sp)
 100bbe4:	dec00504 	addi	sp,sp,20
 100bbe8:	f800283a 	ret
 100bbec:	880d883a 	mov	r6,r17
 100bbf0:	04c00044 	movi	r19,1
 100bbf4:	8023883a 	mov	r17,r16
 100bbf8:	3021883a 	mov	r16,r6
 100bbfc:	003fac06 	br	100bab0 <__mdiff+0x3c>

0100bc00 <__lshift>:
 100bc00:	defff904 	addi	sp,sp,-28
 100bc04:	28800417 	ldw	r2,16(r5)
 100bc08:	dc000015 	stw	r16,0(sp)
 100bc0c:	3021d17a 	srai	r16,r6,5
 100bc10:	28c00217 	ldw	r3,8(r5)
 100bc14:	10800044 	addi	r2,r2,1
 100bc18:	dc400115 	stw	r17,4(sp)
 100bc1c:	80a3883a 	add	r17,r16,r2
 100bc20:	dd400515 	stw	r21,20(sp)
 100bc24:	dd000415 	stw	r20,16(sp)
 100bc28:	dc800215 	stw	r18,8(sp)
 100bc2c:	dfc00615 	stw	ra,24(sp)
 100bc30:	2825883a 	mov	r18,r5
 100bc34:	dcc00315 	stw	r19,12(sp)
 100bc38:	3029883a 	mov	r20,r6
 100bc3c:	202b883a 	mov	r21,r4
 100bc40:	29400117 	ldw	r5,4(r5)
 100bc44:	1c40030e 	bge	r3,r17,100bc54 <__lshift+0x54>
 100bc48:	18c7883a 	add	r3,r3,r3
 100bc4c:	29400044 	addi	r5,r5,1
 100bc50:	1c7ffd16 	blt	r3,r17,100bc48 <__lshift+0x48>
 100bc54:	a809883a 	mov	r4,r21
 100bc58:	100b83c0 	call	100b83c <_Balloc>
 100bc5c:	1027883a 	mov	r19,r2
 100bc60:	11400504 	addi	r5,r2,20
 100bc64:	0400090e 	bge	zero,r16,100bc8c <__lshift+0x8c>
 100bc68:	2805883a 	mov	r2,r5
 100bc6c:	0007883a 	mov	r3,zero
 100bc70:	18c00044 	addi	r3,r3,1
 100bc74:	10000015 	stw	zero,0(r2)
 100bc78:	10800104 	addi	r2,r2,4
 100bc7c:	80fffc1e 	bne	r16,r3,100bc70 <__lshift+0x70>
 100bc80:	8405883a 	add	r2,r16,r16
 100bc84:	1085883a 	add	r2,r2,r2
 100bc88:	288b883a 	add	r5,r5,r2
 100bc8c:	90800417 	ldw	r2,16(r18)
 100bc90:	91000504 	addi	r4,r18,20
 100bc94:	a18007cc 	andi	r6,r20,31
 100bc98:	1085883a 	add	r2,r2,r2
 100bc9c:	1085883a 	add	r2,r2,r2
 100bca0:	208f883a 	add	r7,r4,r2
 100bca4:	30001e26 	beq	r6,zero,100bd20 <__lshift+0x120>
 100bca8:	00800804 	movi	r2,32
 100bcac:	1191c83a 	sub	r8,r2,r6
 100bcb0:	0007883a 	mov	r3,zero
 100bcb4:	20800017 	ldw	r2,0(r4)
 100bcb8:	1184983a 	sll	r2,r2,r6
 100bcbc:	1884b03a 	or	r2,r3,r2
 100bcc0:	28800015 	stw	r2,0(r5)
 100bcc4:	20c00017 	ldw	r3,0(r4)
 100bcc8:	21000104 	addi	r4,r4,4
 100bccc:	29400104 	addi	r5,r5,4
 100bcd0:	1a06d83a 	srl	r3,r3,r8
 100bcd4:	21fff736 	bltu	r4,r7,100bcb4 <__lshift+0xb4>
 100bcd8:	28c00015 	stw	r3,0(r5)
 100bcdc:	18000126 	beq	r3,zero,100bce4 <__lshift+0xe4>
 100bce0:	8c400044 	addi	r17,r17,1
 100bce4:	88bfffc4 	addi	r2,r17,-1
 100bce8:	98800415 	stw	r2,16(r19)
 100bcec:	a809883a 	mov	r4,r21
 100bcf0:	900b883a 	mov	r5,r18
 100bcf4:	100b2bc0 	call	100b2bc <_Bfree>
 100bcf8:	9805883a 	mov	r2,r19
 100bcfc:	dfc00617 	ldw	ra,24(sp)
 100bd00:	dd400517 	ldw	r21,20(sp)
 100bd04:	dd000417 	ldw	r20,16(sp)
 100bd08:	dcc00317 	ldw	r19,12(sp)
 100bd0c:	dc800217 	ldw	r18,8(sp)
 100bd10:	dc400117 	ldw	r17,4(sp)
 100bd14:	dc000017 	ldw	r16,0(sp)
 100bd18:	dec00704 	addi	sp,sp,28
 100bd1c:	f800283a 	ret
 100bd20:	20800017 	ldw	r2,0(r4)
 100bd24:	21000104 	addi	r4,r4,4
 100bd28:	28800015 	stw	r2,0(r5)
 100bd2c:	29400104 	addi	r5,r5,4
 100bd30:	21ffec2e 	bgeu	r4,r7,100bce4 <__lshift+0xe4>
 100bd34:	20800017 	ldw	r2,0(r4)
 100bd38:	21000104 	addi	r4,r4,4
 100bd3c:	28800015 	stw	r2,0(r5)
 100bd40:	29400104 	addi	r5,r5,4
 100bd44:	21fff636 	bltu	r4,r7,100bd20 <__lshift+0x120>
 100bd48:	003fe606 	br	100bce4 <__lshift+0xe4>

0100bd4c <__multiply>:
 100bd4c:	defff904 	addi	sp,sp,-28
 100bd50:	dcc00315 	stw	r19,12(sp)
 100bd54:	dc800215 	stw	r18,8(sp)
 100bd58:	2cc00417 	ldw	r19,16(r5)
 100bd5c:	34800417 	ldw	r18,16(r6)
 100bd60:	dd000415 	stw	r20,16(sp)
 100bd64:	dc400115 	stw	r17,4(sp)
 100bd68:	dfc00615 	stw	ra,24(sp)
 100bd6c:	dd400515 	stw	r21,20(sp)
 100bd70:	dc000015 	stw	r16,0(sp)
 100bd74:	2823883a 	mov	r17,r5
 100bd78:	3029883a 	mov	r20,r6
 100bd7c:	9c80040e 	bge	r19,r18,100bd90 <__multiply+0x44>
 100bd80:	9027883a 	mov	r19,r18
 100bd84:	2c800417 	ldw	r18,16(r5)
 100bd88:	2829883a 	mov	r20,r5
 100bd8c:	3023883a 	mov	r17,r6
 100bd90:	88800217 	ldw	r2,8(r17)
 100bd94:	9ca1883a 	add	r16,r19,r18
 100bd98:	89400117 	ldw	r5,4(r17)
 100bd9c:	1400010e 	bge	r2,r16,100bda4 <__multiply+0x58>
 100bda0:	29400044 	addi	r5,r5,1
 100bda4:	100b83c0 	call	100b83c <_Balloc>
 100bda8:	102b883a 	mov	r21,r2
 100bdac:	8405883a 	add	r2,r16,r16
 100bdb0:	1085883a 	add	r2,r2,r2
 100bdb4:	a9000504 	addi	r4,r21,20
 100bdb8:	209d883a 	add	r14,r4,r2
 100bdbc:	2380042e 	bgeu	r4,r14,100bdd0 <__multiply+0x84>
 100bdc0:	2005883a 	mov	r2,r4
 100bdc4:	10000015 	stw	zero,0(r2)
 100bdc8:	10800104 	addi	r2,r2,4
 100bdcc:	13bffd36 	bltu	r2,r14,100bdc4 <__multiply+0x78>
 100bdd0:	9485883a 	add	r2,r18,r18
 100bdd4:	9cc7883a 	add	r3,r19,r19
 100bdd8:	a1800504 	addi	r6,r20,20
 100bddc:	1085883a 	add	r2,r2,r2
 100bde0:	8b400504 	addi	r13,r17,20
 100bde4:	18c7883a 	add	r3,r3,r3
 100bde8:	309f883a 	add	r15,r6,r2
 100bdec:	68d7883a 	add	r11,r13,r3
 100bdf0:	33c03b2e 	bgeu	r6,r15,100bee0 <__multiply+0x194>
 100bdf4:	2019883a 	mov	r12,r4
 100bdf8:	30800017 	ldw	r2,0(r6)
 100bdfc:	127fffcc 	andi	r9,r2,65535
 100be00:	48001826 	beq	r9,zero,100be64 <__multiply+0x118>
 100be04:	6811883a 	mov	r8,r13
 100be08:	600f883a 	mov	r7,r12
 100be0c:	0015883a 	mov	r10,zero
 100be10:	40c00017 	ldw	r3,0(r8)
 100be14:	39400017 	ldw	r5,0(r7)
 100be18:	42000104 	addi	r8,r8,4
 100be1c:	193fffcc 	andi	r4,r3,65535
 100be20:	4909383a 	mul	r4,r9,r4
 100be24:	1806d43a 	srli	r3,r3,16
 100be28:	28bfffcc 	andi	r2,r5,65535
 100be2c:	5085883a 	add	r2,r10,r2
 100be30:	2089883a 	add	r4,r4,r2
 100be34:	48c7383a 	mul	r3,r9,r3
 100be38:	280ad43a 	srli	r5,r5,16
 100be3c:	2004d43a 	srli	r2,r4,16
 100be40:	3900000d 	sth	r4,0(r7)
 100be44:	1947883a 	add	r3,r3,r5
 100be48:	10c5883a 	add	r2,r2,r3
 100be4c:	3880008d 	sth	r2,2(r7)
 100be50:	1014d43a 	srli	r10,r2,16
 100be54:	39c00104 	addi	r7,r7,4
 100be58:	42ffed36 	bltu	r8,r11,100be10 <__multiply+0xc4>
 100be5c:	3a800015 	stw	r10,0(r7)
 100be60:	30800017 	ldw	r2,0(r6)
 100be64:	1012d43a 	srli	r9,r2,16
 100be68:	48001926 	beq	r9,zero,100bed0 <__multiply+0x184>
 100be6c:	60800017 	ldw	r2,0(r12)
 100be70:	6811883a 	mov	r8,r13
 100be74:	600f883a 	mov	r7,r12
 100be78:	0015883a 	mov	r10,zero
 100be7c:	100b883a 	mov	r5,r2
 100be80:	41000017 	ldw	r4,0(r8)
 100be84:	2806d43a 	srli	r3,r5,16
 100be88:	3880000d 	sth	r2,0(r7)
 100be8c:	20bfffcc 	andi	r2,r4,65535
 100be90:	4885383a 	mul	r2,r9,r2
 100be94:	50c7883a 	add	r3,r10,r3
 100be98:	2008d43a 	srli	r4,r4,16
 100be9c:	10c5883a 	add	r2,r2,r3
 100bea0:	3880008d 	sth	r2,2(r7)
 100bea4:	39c00104 	addi	r7,r7,4
 100bea8:	39400017 	ldw	r5,0(r7)
 100beac:	4909383a 	mul	r4,r9,r4
 100beb0:	1004d43a 	srli	r2,r2,16
 100beb4:	28ffffcc 	andi	r3,r5,65535
 100beb8:	20c9883a 	add	r4,r4,r3
 100bebc:	1105883a 	add	r2,r2,r4
 100bec0:	42000104 	addi	r8,r8,4
 100bec4:	1014d43a 	srli	r10,r2,16
 100bec8:	42ffed36 	bltu	r8,r11,100be80 <__multiply+0x134>
 100becc:	38800015 	stw	r2,0(r7)
 100bed0:	31800104 	addi	r6,r6,4
 100bed4:	33c0022e 	bgeu	r6,r15,100bee0 <__multiply+0x194>
 100bed8:	63000104 	addi	r12,r12,4
 100bedc:	003fc606 	br	100bdf8 <__multiply+0xac>
 100bee0:	0400090e 	bge	zero,r16,100bf08 <__multiply+0x1bc>
 100bee4:	70bfff17 	ldw	r2,-4(r14)
 100bee8:	70ffff04 	addi	r3,r14,-4
 100beec:	10000326 	beq	r2,zero,100befc <__multiply+0x1b0>
 100bef0:	00000506 	br	100bf08 <__multiply+0x1bc>
 100bef4:	18800017 	ldw	r2,0(r3)
 100bef8:	1000031e 	bne	r2,zero,100bf08 <__multiply+0x1bc>
 100befc:	843fffc4 	addi	r16,r16,-1
 100bf00:	18ffff04 	addi	r3,r3,-4
 100bf04:	803ffb1e 	bne	r16,zero,100bef4 <__multiply+0x1a8>
 100bf08:	a805883a 	mov	r2,r21
 100bf0c:	ac000415 	stw	r16,16(r21)
 100bf10:	dfc00617 	ldw	ra,24(sp)
 100bf14:	dd400517 	ldw	r21,20(sp)
 100bf18:	dd000417 	ldw	r20,16(sp)
 100bf1c:	dcc00317 	ldw	r19,12(sp)
 100bf20:	dc800217 	ldw	r18,8(sp)
 100bf24:	dc400117 	ldw	r17,4(sp)
 100bf28:	dc000017 	ldw	r16,0(sp)
 100bf2c:	dec00704 	addi	sp,sp,28
 100bf30:	f800283a 	ret

0100bf34 <__i2b>:
 100bf34:	defffd04 	addi	sp,sp,-12
 100bf38:	dc000015 	stw	r16,0(sp)
 100bf3c:	04000044 	movi	r16,1
 100bf40:	dc800115 	stw	r18,4(sp)
 100bf44:	2825883a 	mov	r18,r5
 100bf48:	800b883a 	mov	r5,r16
 100bf4c:	dfc00215 	stw	ra,8(sp)
 100bf50:	100b83c0 	call	100b83c <_Balloc>
 100bf54:	14000415 	stw	r16,16(r2)
 100bf58:	14800515 	stw	r18,20(r2)
 100bf5c:	dfc00217 	ldw	ra,8(sp)
 100bf60:	dc800117 	ldw	r18,4(sp)
 100bf64:	dc000017 	ldw	r16,0(sp)
 100bf68:	dec00304 	addi	sp,sp,12
 100bf6c:	f800283a 	ret

0100bf70 <__multadd>:
 100bf70:	defffa04 	addi	sp,sp,-24
 100bf74:	dc800215 	stw	r18,8(sp)
 100bf78:	2c800417 	ldw	r18,16(r5)
 100bf7c:	dd000415 	stw	r20,16(sp)
 100bf80:	dcc00315 	stw	r19,12(sp)
 100bf84:	dc000015 	stw	r16,0(sp)
 100bf88:	dfc00515 	stw	ra,20(sp)
 100bf8c:	3821883a 	mov	r16,r7
 100bf90:	dc400115 	stw	r17,4(sp)
 100bf94:	2827883a 	mov	r19,r5
 100bf98:	2029883a 	mov	r20,r4
 100bf9c:	2a000504 	addi	r8,r5,20
 100bfa0:	000f883a 	mov	r7,zero
 100bfa4:	40800017 	ldw	r2,0(r8)
 100bfa8:	39c00044 	addi	r7,r7,1
 100bfac:	10ffffcc 	andi	r3,r2,65535
 100bfb0:	1987383a 	mul	r3,r3,r6
 100bfb4:	1004d43a 	srli	r2,r2,16
 100bfb8:	1c07883a 	add	r3,r3,r16
 100bfbc:	180ad43a 	srli	r5,r3,16
 100bfc0:	1185383a 	mul	r2,r2,r6
 100bfc4:	18ffffcc 	andi	r3,r3,65535
 100bfc8:	1145883a 	add	r2,r2,r5
 100bfcc:	1008943a 	slli	r4,r2,16
 100bfd0:	1020d43a 	srli	r16,r2,16
 100bfd4:	20c9883a 	add	r4,r4,r3
 100bfd8:	41000015 	stw	r4,0(r8)
 100bfdc:	42000104 	addi	r8,r8,4
 100bfe0:	3cbff016 	blt	r7,r18,100bfa4 <__multadd+0x34>
 100bfe4:	80000826 	beq	r16,zero,100c008 <__multadd+0x98>
 100bfe8:	98800217 	ldw	r2,8(r19)
 100bfec:	90800f0e 	bge	r18,r2,100c02c <__multadd+0xbc>
 100bff0:	9485883a 	add	r2,r18,r18
 100bff4:	1085883a 	add	r2,r2,r2
 100bff8:	14c5883a 	add	r2,r2,r19
 100bffc:	90c00044 	addi	r3,r18,1
 100c000:	14000515 	stw	r16,20(r2)
 100c004:	98c00415 	stw	r3,16(r19)
 100c008:	9805883a 	mov	r2,r19
 100c00c:	dfc00517 	ldw	ra,20(sp)
 100c010:	dd000417 	ldw	r20,16(sp)
 100c014:	dcc00317 	ldw	r19,12(sp)
 100c018:	dc800217 	ldw	r18,8(sp)
 100c01c:	dc400117 	ldw	r17,4(sp)
 100c020:	dc000017 	ldw	r16,0(sp)
 100c024:	dec00604 	addi	sp,sp,24
 100c028:	f800283a 	ret
 100c02c:	99400117 	ldw	r5,4(r19)
 100c030:	a009883a 	mov	r4,r20
 100c034:	29400044 	addi	r5,r5,1
 100c038:	100b83c0 	call	100b83c <_Balloc>
 100c03c:	99800417 	ldw	r6,16(r19)
 100c040:	99400304 	addi	r5,r19,12
 100c044:	11000304 	addi	r4,r2,12
 100c048:	318d883a 	add	r6,r6,r6
 100c04c:	318d883a 	add	r6,r6,r6
 100c050:	31800204 	addi	r6,r6,8
 100c054:	1023883a 	mov	r17,r2
 100c058:	10060880 	call	1006088 <memcpy>
 100c05c:	980b883a 	mov	r5,r19
 100c060:	a009883a 	mov	r4,r20
 100c064:	100b2bc0 	call	100b2bc <_Bfree>
 100c068:	8827883a 	mov	r19,r17
 100c06c:	003fe006 	br	100bff0 <__multadd+0x80>

0100c070 <__pow5mult>:
 100c070:	defffa04 	addi	sp,sp,-24
 100c074:	308000cc 	andi	r2,r6,3
 100c078:	dd000415 	stw	r20,16(sp)
 100c07c:	dcc00315 	stw	r19,12(sp)
 100c080:	dc000015 	stw	r16,0(sp)
 100c084:	dfc00515 	stw	ra,20(sp)
 100c088:	dc800215 	stw	r18,8(sp)
 100c08c:	dc400115 	stw	r17,4(sp)
 100c090:	3021883a 	mov	r16,r6
 100c094:	2027883a 	mov	r19,r4
 100c098:	2829883a 	mov	r20,r5
 100c09c:	10002b1e 	bne	r2,zero,100c14c <__pow5mult+0xdc>
 100c0a0:	8025d0ba 	srai	r18,r16,2
 100c0a4:	90001b26 	beq	r18,zero,100c114 <__pow5mult+0xa4>
 100c0a8:	9c001217 	ldw	r16,72(r19)
 100c0ac:	8000081e 	bne	r16,zero,100c0d0 <__pow5mult+0x60>
 100c0b0:	00003006 	br	100c174 <__pow5mult+0x104>
 100c0b4:	800b883a 	mov	r5,r16
 100c0b8:	800d883a 	mov	r6,r16
 100c0bc:	9809883a 	mov	r4,r19
 100c0c0:	90001426 	beq	r18,zero,100c114 <__pow5mult+0xa4>
 100c0c4:	80800017 	ldw	r2,0(r16)
 100c0c8:	10001b26 	beq	r2,zero,100c138 <__pow5mult+0xc8>
 100c0cc:	1021883a 	mov	r16,r2
 100c0d0:	9080004c 	andi	r2,r18,1
 100c0d4:	1005003a 	cmpeq	r2,r2,zero
 100c0d8:	9025d07a 	srai	r18,r18,1
 100c0dc:	800d883a 	mov	r6,r16
 100c0e0:	9809883a 	mov	r4,r19
 100c0e4:	a00b883a 	mov	r5,r20
 100c0e8:	103ff21e 	bne	r2,zero,100c0b4 <__pow5mult+0x44>
 100c0ec:	100bd4c0 	call	100bd4c <__multiply>
 100c0f0:	a00b883a 	mov	r5,r20
 100c0f4:	9809883a 	mov	r4,r19
 100c0f8:	1023883a 	mov	r17,r2
 100c0fc:	100b2bc0 	call	100b2bc <_Bfree>
 100c100:	8829883a 	mov	r20,r17
 100c104:	800b883a 	mov	r5,r16
 100c108:	800d883a 	mov	r6,r16
 100c10c:	9809883a 	mov	r4,r19
 100c110:	903fec1e 	bne	r18,zero,100c0c4 <__pow5mult+0x54>
 100c114:	a005883a 	mov	r2,r20
 100c118:	dfc00517 	ldw	ra,20(sp)
 100c11c:	dd000417 	ldw	r20,16(sp)
 100c120:	dcc00317 	ldw	r19,12(sp)
 100c124:	dc800217 	ldw	r18,8(sp)
 100c128:	dc400117 	ldw	r17,4(sp)
 100c12c:	dc000017 	ldw	r16,0(sp)
 100c130:	dec00604 	addi	sp,sp,24
 100c134:	f800283a 	ret
 100c138:	100bd4c0 	call	100bd4c <__multiply>
 100c13c:	80800015 	stw	r2,0(r16)
 100c140:	1021883a 	mov	r16,r2
 100c144:	10000015 	stw	zero,0(r2)
 100c148:	003fe106 	br	100c0d0 <__pow5mult+0x60>
 100c14c:	1085883a 	add	r2,r2,r2
 100c150:	00c04074 	movhi	r3,257
 100c154:	18d48f04 	addi	r3,r3,21052
 100c158:	1085883a 	add	r2,r2,r2
 100c15c:	10c5883a 	add	r2,r2,r3
 100c160:	11bfff17 	ldw	r6,-4(r2)
 100c164:	000f883a 	mov	r7,zero
 100c168:	100bf700 	call	100bf70 <__multadd>
 100c16c:	1029883a 	mov	r20,r2
 100c170:	003fcb06 	br	100c0a0 <__pow5mult+0x30>
 100c174:	9809883a 	mov	r4,r19
 100c178:	01409c44 	movi	r5,625
 100c17c:	100bf340 	call	100bf34 <__i2b>
 100c180:	98801215 	stw	r2,72(r19)
 100c184:	1021883a 	mov	r16,r2
 100c188:	10000015 	stw	zero,0(r2)
 100c18c:	003fd006 	br	100c0d0 <__pow5mult+0x60>

0100c190 <__s2b>:
 100c190:	defff904 	addi	sp,sp,-28
 100c194:	dcc00315 	stw	r19,12(sp)
 100c198:	dc800215 	stw	r18,8(sp)
 100c19c:	2827883a 	mov	r19,r5
 100c1a0:	2025883a 	mov	r18,r4
 100c1a4:	01400244 	movi	r5,9
 100c1a8:	39000204 	addi	r4,r7,8
 100c1ac:	dd000415 	stw	r20,16(sp)
 100c1b0:	dc400115 	stw	r17,4(sp)
 100c1b4:	dfc00615 	stw	ra,24(sp)
 100c1b8:	dd400515 	stw	r21,20(sp)
 100c1bc:	dc000015 	stw	r16,0(sp)
 100c1c0:	3829883a 	mov	r20,r7
 100c1c4:	3023883a 	mov	r17,r6
 100c1c8:	101031c0 	call	101031c <__divsi3>
 100c1cc:	00c00044 	movi	r3,1
 100c1d0:	1880350e 	bge	r3,r2,100c2a8 <__s2b+0x118>
 100c1d4:	000b883a 	mov	r5,zero
 100c1d8:	18c7883a 	add	r3,r3,r3
 100c1dc:	29400044 	addi	r5,r5,1
 100c1e0:	18bffd16 	blt	r3,r2,100c1d8 <__s2b+0x48>
 100c1e4:	9009883a 	mov	r4,r18
 100c1e8:	100b83c0 	call	100b83c <_Balloc>
 100c1ec:	1011883a 	mov	r8,r2
 100c1f0:	d8800717 	ldw	r2,28(sp)
 100c1f4:	00c00044 	movi	r3,1
 100c1f8:	01800244 	movi	r6,9
 100c1fc:	40800515 	stw	r2,20(r8)
 100c200:	40c00415 	stw	r3,16(r8)
 100c204:	3440260e 	bge	r6,r17,100c2a0 <__s2b+0x110>
 100c208:	3021883a 	mov	r16,r6
 100c20c:	99ab883a 	add	r21,r19,r6
 100c210:	9c05883a 	add	r2,r19,r16
 100c214:	11c00007 	ldb	r7,0(r2)
 100c218:	400b883a 	mov	r5,r8
 100c21c:	9009883a 	mov	r4,r18
 100c220:	39fff404 	addi	r7,r7,-48
 100c224:	01800284 	movi	r6,10
 100c228:	100bf700 	call	100bf70 <__multadd>
 100c22c:	84000044 	addi	r16,r16,1
 100c230:	1011883a 	mov	r8,r2
 100c234:	8c3ff61e 	bne	r17,r16,100c210 <__s2b+0x80>
 100c238:	ac45883a 	add	r2,r21,r17
 100c23c:	117ffe04 	addi	r5,r2,-8
 100c240:	880d883a 	mov	r6,r17
 100c244:	35000c0e 	bge	r6,r20,100c278 <__s2b+0xe8>
 100c248:	a185c83a 	sub	r2,r20,r6
 100c24c:	2821883a 	mov	r16,r5
 100c250:	28a3883a 	add	r17,r5,r2
 100c254:	81c00007 	ldb	r7,0(r16)
 100c258:	400b883a 	mov	r5,r8
 100c25c:	9009883a 	mov	r4,r18
 100c260:	39fff404 	addi	r7,r7,-48
 100c264:	01800284 	movi	r6,10
 100c268:	100bf700 	call	100bf70 <__multadd>
 100c26c:	84000044 	addi	r16,r16,1
 100c270:	1011883a 	mov	r8,r2
 100c274:	847ff71e 	bne	r16,r17,100c254 <__s2b+0xc4>
 100c278:	4005883a 	mov	r2,r8
 100c27c:	dfc00617 	ldw	ra,24(sp)
 100c280:	dd400517 	ldw	r21,20(sp)
 100c284:	dd000417 	ldw	r20,16(sp)
 100c288:	dcc00317 	ldw	r19,12(sp)
 100c28c:	dc800217 	ldw	r18,8(sp)
 100c290:	dc400117 	ldw	r17,4(sp)
 100c294:	dc000017 	ldw	r16,0(sp)
 100c298:	dec00704 	addi	sp,sp,28
 100c29c:	f800283a 	ret
 100c2a0:	99400284 	addi	r5,r19,10
 100c2a4:	003fe706 	br	100c244 <__s2b+0xb4>
 100c2a8:	000b883a 	mov	r5,zero
 100c2ac:	003fcd06 	br	100c1e4 <__s2b+0x54>

0100c2b0 <putc>:
 100c2b0:	defffc04 	addi	sp,sp,-16
 100c2b4:	dc800215 	stw	r18,8(sp)
 100c2b8:	04804074 	movhi	r18,257
 100c2bc:	949ce904 	addi	r18,r18,29604
 100c2c0:	90c00017 	ldw	r3,0(r18)
 100c2c4:	dc400115 	stw	r17,4(sp)
 100c2c8:	dc000015 	stw	r16,0(sp)
 100c2cc:	dfc00315 	stw	ra,12(sp)
 100c2d0:	2023883a 	mov	r17,r4
 100c2d4:	2821883a 	mov	r16,r5
 100c2d8:	18000226 	beq	r3,zero,100c2e4 <putc+0x34>
 100c2dc:	18800e17 	ldw	r2,56(r3)
 100c2e0:	10001126 	beq	r2,zero,100c328 <putc+0x78>
 100c2e4:	80800217 	ldw	r2,8(r16)
 100c2e8:	10ffffc4 	addi	r3,r2,-1
 100c2ec:	80c00215 	stw	r3,8(r16)
 100c2f0:	18001316 	blt	r3,zero,100c340 <putc+0x90>
 100c2f4:	80800017 	ldw	r2,0(r16)
 100c2f8:	14400005 	stb	r17,0(r2)
 100c2fc:	80c00017 	ldw	r3,0(r16)
 100c300:	18800044 	addi	r2,r3,1
 100c304:	18c00003 	ldbu	r3,0(r3)
 100c308:	80800015 	stw	r2,0(r16)
 100c30c:	1805883a 	mov	r2,r3
 100c310:	dfc00317 	ldw	ra,12(sp)
 100c314:	dc800217 	ldw	r18,8(sp)
 100c318:	dc400117 	ldw	r17,4(sp)
 100c31c:	dc000017 	ldw	r16,0(sp)
 100c320:	dec00404 	addi	sp,sp,16
 100c324:	f800283a 	ret
 100c328:	1809883a 	mov	r4,r3
 100c32c:	100a1ec0 	call	100a1ec <__sinit>
 100c330:	80800217 	ldw	r2,8(r16)
 100c334:	10ffffc4 	addi	r3,r2,-1
 100c338:	80c00215 	stw	r3,8(r16)
 100c33c:	183fed0e 	bge	r3,zero,100c2f4 <putc+0x44>
 100c340:	80800617 	ldw	r2,24(r16)
 100c344:	18800f16 	blt	r3,r2,100c384 <putc+0xd4>
 100c348:	80800017 	ldw	r2,0(r16)
 100c34c:	14400005 	stb	r17,0(r2)
 100c350:	81000017 	ldw	r4,0(r16)
 100c354:	00800284 	movi	r2,10
 100c358:	20c00003 	ldbu	r3,0(r4)
 100c35c:	18801226 	beq	r3,r2,100c3a8 <putc+0xf8>
 100c360:	20800044 	addi	r2,r4,1
 100c364:	80800015 	stw	r2,0(r16)
 100c368:	1805883a 	mov	r2,r3
 100c36c:	dfc00317 	ldw	ra,12(sp)
 100c370:	dc800217 	ldw	r18,8(sp)
 100c374:	dc400117 	ldw	r17,4(sp)
 100c378:	dc000017 	ldw	r16,0(sp)
 100c37c:	dec00404 	addi	sp,sp,16
 100c380:	f800283a 	ret
 100c384:	91000017 	ldw	r4,0(r18)
 100c388:	880b883a 	mov	r5,r17
 100c38c:	800d883a 	mov	r6,r16
 100c390:	dfc00317 	ldw	ra,12(sp)
 100c394:	dc800217 	ldw	r18,8(sp)
 100c398:	dc400117 	ldw	r17,4(sp)
 100c39c:	dc000017 	ldw	r16,0(sp)
 100c3a0:	dec00404 	addi	sp,sp,16
 100c3a4:	100e0bc1 	jmpi	100e0bc <__swbuf_r>
 100c3a8:	91000017 	ldw	r4,0(r18)
 100c3ac:	180b883a 	mov	r5,r3
 100c3b0:	003ff606 	br	100c38c <putc+0xdc>

0100c3b4 <_putc_r>:
 100c3b4:	defffc04 	addi	sp,sp,-16
 100c3b8:	dc400215 	stw	r17,8(sp)
 100c3bc:	dc000115 	stw	r16,4(sp)
 100c3c0:	dfc00315 	stw	ra,12(sp)
 100c3c4:	2021883a 	mov	r16,r4
 100c3c8:	2823883a 	mov	r17,r5
 100c3cc:	20000226 	beq	r4,zero,100c3d8 <_putc_r+0x24>
 100c3d0:	20800e17 	ldw	r2,56(r4)
 100c3d4:	10001026 	beq	r2,zero,100c418 <_putc_r+0x64>
 100c3d8:	30800217 	ldw	r2,8(r6)
 100c3dc:	10ffffc4 	addi	r3,r2,-1
 100c3e0:	30c00215 	stw	r3,8(r6)
 100c3e4:	18001316 	blt	r3,zero,100c434 <_putc_r+0x80>
 100c3e8:	30800017 	ldw	r2,0(r6)
 100c3ec:	14400005 	stb	r17,0(r2)
 100c3f0:	30c00017 	ldw	r3,0(r6)
 100c3f4:	18800044 	addi	r2,r3,1
 100c3f8:	18c00003 	ldbu	r3,0(r3)
 100c3fc:	30800015 	stw	r2,0(r6)
 100c400:	1805883a 	mov	r2,r3
 100c404:	dfc00317 	ldw	ra,12(sp)
 100c408:	dc400217 	ldw	r17,8(sp)
 100c40c:	dc000117 	ldw	r16,4(sp)
 100c410:	dec00404 	addi	sp,sp,16
 100c414:	f800283a 	ret
 100c418:	d9800015 	stw	r6,0(sp)
 100c41c:	100a1ec0 	call	100a1ec <__sinit>
 100c420:	d9800017 	ldw	r6,0(sp)
 100c424:	30800217 	ldw	r2,8(r6)
 100c428:	10ffffc4 	addi	r3,r2,-1
 100c42c:	30c00215 	stw	r3,8(r6)
 100c430:	183fed0e 	bge	r3,zero,100c3e8 <_putc_r+0x34>
 100c434:	30800617 	ldw	r2,24(r6)
 100c438:	18800e16 	blt	r3,r2,100c474 <_putc_r+0xc0>
 100c43c:	30800017 	ldw	r2,0(r6)
 100c440:	14400005 	stb	r17,0(r2)
 100c444:	31000017 	ldw	r4,0(r6)
 100c448:	00800284 	movi	r2,10
 100c44c:	20c00003 	ldbu	r3,0(r4)
 100c450:	18800f26 	beq	r3,r2,100c490 <_putc_r+0xdc>
 100c454:	20800044 	addi	r2,r4,1
 100c458:	30800015 	stw	r2,0(r6)
 100c45c:	1805883a 	mov	r2,r3
 100c460:	dfc00317 	ldw	ra,12(sp)
 100c464:	dc400217 	ldw	r17,8(sp)
 100c468:	dc000117 	ldw	r16,4(sp)
 100c46c:	dec00404 	addi	sp,sp,16
 100c470:	f800283a 	ret
 100c474:	8009883a 	mov	r4,r16
 100c478:	880b883a 	mov	r5,r17
 100c47c:	dfc00317 	ldw	ra,12(sp)
 100c480:	dc400217 	ldw	r17,8(sp)
 100c484:	dc000117 	ldw	r16,4(sp)
 100c488:	dec00404 	addi	sp,sp,16
 100c48c:	100e0bc1 	jmpi	100e0bc <__swbuf_r>
 100c490:	8009883a 	mov	r4,r16
 100c494:	180b883a 	mov	r5,r3
 100c498:	003ff806 	br	100c47c <_putc_r+0xc8>

0100c49c <_realloc_r>:
 100c49c:	defff404 	addi	sp,sp,-48
 100c4a0:	dd800815 	stw	r22,32(sp)
 100c4a4:	dc800415 	stw	r18,16(sp)
 100c4a8:	dc400315 	stw	r17,12(sp)
 100c4ac:	dfc00b15 	stw	ra,44(sp)
 100c4b0:	df000a15 	stw	fp,40(sp)
 100c4b4:	ddc00915 	stw	r23,36(sp)
 100c4b8:	dd400715 	stw	r21,28(sp)
 100c4bc:	dd000615 	stw	r20,24(sp)
 100c4c0:	dcc00515 	stw	r19,20(sp)
 100c4c4:	dc000215 	stw	r16,8(sp)
 100c4c8:	2825883a 	mov	r18,r5
 100c4cc:	3023883a 	mov	r17,r6
 100c4d0:	202d883a 	mov	r22,r4
 100c4d4:	2800c926 	beq	r5,zero,100c7fc <_realloc_r+0x360>
 100c4d8:	101147c0 	call	101147c <__malloc_lock>
 100c4dc:	943ffe04 	addi	r16,r18,-8
 100c4e0:	88c002c4 	addi	r3,r17,11
 100c4e4:	00800584 	movi	r2,22
 100c4e8:	82000117 	ldw	r8,4(r16)
 100c4ec:	10c01b2e 	bgeu	r2,r3,100c55c <_realloc_r+0xc0>
 100c4f0:	00bffe04 	movi	r2,-8
 100c4f4:	188e703a 	and	r7,r3,r2
 100c4f8:	3839883a 	mov	fp,r7
 100c4fc:	38001a16 	blt	r7,zero,100c568 <_realloc_r+0xcc>
 100c500:	e4401936 	bltu	fp,r17,100c568 <_realloc_r+0xcc>
 100c504:	013fff04 	movi	r4,-4
 100c508:	4126703a 	and	r19,r8,r4
 100c50c:	99c02616 	blt	r19,r7,100c5a8 <_realloc_r+0x10c>
 100c510:	802b883a 	mov	r21,r16
 100c514:	9829883a 	mov	r20,r19
 100c518:	84000204 	addi	r16,r16,8
 100c51c:	a80f883a 	mov	r7,r21
 100c520:	a70dc83a 	sub	r6,r20,fp
 100c524:	008003c4 	movi	r2,15
 100c528:	1180c136 	bltu	r2,r6,100c830 <_realloc_r+0x394>
 100c52c:	38800117 	ldw	r2,4(r7)
 100c530:	a549883a 	add	r4,r20,r21
 100c534:	1080004c 	andi	r2,r2,1
 100c538:	a084b03a 	or	r2,r20,r2
 100c53c:	38800115 	stw	r2,4(r7)
 100c540:	20c00117 	ldw	r3,4(r4)
 100c544:	18c00054 	ori	r3,r3,1
 100c548:	20c00115 	stw	r3,4(r4)
 100c54c:	b009883a 	mov	r4,r22
 100c550:	101149c0 	call	101149c <__malloc_unlock>
 100c554:	8023883a 	mov	r17,r16
 100c558:	00000606 	br	100c574 <_realloc_r+0xd8>
 100c55c:	01c00404 	movi	r7,16
 100c560:	3839883a 	mov	fp,r7
 100c564:	e47fe72e 	bgeu	fp,r17,100c504 <_realloc_r+0x68>
 100c568:	00800304 	movi	r2,12
 100c56c:	0023883a 	mov	r17,zero
 100c570:	b0800015 	stw	r2,0(r22)
 100c574:	8805883a 	mov	r2,r17
 100c578:	dfc00b17 	ldw	ra,44(sp)
 100c57c:	df000a17 	ldw	fp,40(sp)
 100c580:	ddc00917 	ldw	r23,36(sp)
 100c584:	dd800817 	ldw	r22,32(sp)
 100c588:	dd400717 	ldw	r21,28(sp)
 100c58c:	dd000617 	ldw	r20,24(sp)
 100c590:	dcc00517 	ldw	r19,20(sp)
 100c594:	dc800417 	ldw	r18,16(sp)
 100c598:	dc400317 	ldw	r17,12(sp)
 100c59c:	dc000217 	ldw	r16,8(sp)
 100c5a0:	dec00c04 	addi	sp,sp,48
 100c5a4:	f800283a 	ret
 100c5a8:	00804074 	movhi	r2,257
 100c5ac:	1096dc04 	addi	r2,r2,23408
 100c5b0:	12400217 	ldw	r9,8(r2)
 100c5b4:	84cd883a 	add	r6,r16,r19
 100c5b8:	802b883a 	mov	r21,r16
 100c5bc:	3240b926 	beq	r6,r9,100c8a4 <_realloc_r+0x408>
 100c5c0:	31400117 	ldw	r5,4(r6)
 100c5c4:	00bfff84 	movi	r2,-2
 100c5c8:	2884703a 	and	r2,r5,r2
 100c5cc:	1185883a 	add	r2,r2,r6
 100c5d0:	10c00117 	ldw	r3,4(r2)
 100c5d4:	18c0004c 	andi	r3,r3,1
 100c5d8:	1807003a 	cmpeq	r3,r3,zero
 100c5dc:	1800a326 	beq	r3,zero,100c86c <_realloc_r+0x3d0>
 100c5e0:	2908703a 	and	r4,r5,r4
 100c5e4:	9929883a 	add	r20,r19,r4
 100c5e8:	a1c0a30e 	bge	r20,r7,100c878 <_realloc_r+0x3dc>
 100c5ec:	4080004c 	andi	r2,r8,1
 100c5f0:	1000551e 	bne	r2,zero,100c748 <_realloc_r+0x2ac>
 100c5f4:	80800017 	ldw	r2,0(r16)
 100c5f8:	80afc83a 	sub	r23,r16,r2
 100c5fc:	b8c00117 	ldw	r3,4(r23)
 100c600:	00bfff04 	movi	r2,-4
 100c604:	1884703a 	and	r2,r3,r2
 100c608:	30002e26 	beq	r6,zero,100c6c4 <_realloc_r+0x228>
 100c60c:	3240b926 	beq	r6,r9,100c8f4 <_realloc_r+0x458>
 100c610:	98a9883a 	add	r20,r19,r2
 100c614:	2509883a 	add	r4,r4,r20
 100c618:	d9000015 	stw	r4,0(sp)
 100c61c:	21c02a16 	blt	r4,r7,100c6c8 <_realloc_r+0x22c>
 100c620:	30800317 	ldw	r2,12(r6)
 100c624:	30c00217 	ldw	r3,8(r6)
 100c628:	01400904 	movi	r5,36
 100c62c:	99bfff04 	addi	r6,r19,-4
 100c630:	18800315 	stw	r2,12(r3)
 100c634:	10c00215 	stw	r3,8(r2)
 100c638:	b9000317 	ldw	r4,12(r23)
 100c63c:	b8800217 	ldw	r2,8(r23)
 100c640:	b82b883a 	mov	r21,r23
 100c644:	bc000204 	addi	r16,r23,8
 100c648:	20800215 	stw	r2,8(r4)
 100c64c:	11000315 	stw	r4,12(r2)
 100c650:	2980e436 	bltu	r5,r6,100c9e4 <_realloc_r+0x548>
 100c654:	008004c4 	movi	r2,19
 100c658:	9009883a 	mov	r4,r18
 100c65c:	8011883a 	mov	r8,r16
 100c660:	11800f2e 	bgeu	r2,r6,100c6a0 <_realloc_r+0x204>
 100c664:	90800017 	ldw	r2,0(r18)
 100c668:	ba000404 	addi	r8,r23,16
 100c66c:	91000204 	addi	r4,r18,8
 100c670:	b8800215 	stw	r2,8(r23)
 100c674:	90c00117 	ldw	r3,4(r18)
 100c678:	008006c4 	movi	r2,27
 100c67c:	b8c00315 	stw	r3,12(r23)
 100c680:	1180072e 	bgeu	r2,r6,100c6a0 <_realloc_r+0x204>
 100c684:	90c00217 	ldw	r3,8(r18)
 100c688:	ba000604 	addi	r8,r23,24
 100c68c:	91000404 	addi	r4,r18,16
 100c690:	b8c00415 	stw	r3,16(r23)
 100c694:	90800317 	ldw	r2,12(r18)
 100c698:	b8800515 	stw	r2,20(r23)
 100c69c:	3140e726 	beq	r6,r5,100ca3c <_realloc_r+0x5a0>
 100c6a0:	20800017 	ldw	r2,0(r4)
 100c6a4:	dd000017 	ldw	r20,0(sp)
 100c6a8:	b80f883a 	mov	r7,r23
 100c6ac:	40800015 	stw	r2,0(r8)
 100c6b0:	20c00117 	ldw	r3,4(r4)
 100c6b4:	40c00115 	stw	r3,4(r8)
 100c6b8:	20800217 	ldw	r2,8(r4)
 100c6bc:	40800215 	stw	r2,8(r8)
 100c6c0:	003f9706 	br	100c520 <_realloc_r+0x84>
 100c6c4:	98a9883a 	add	r20,r19,r2
 100c6c8:	a1c01f16 	blt	r20,r7,100c748 <_realloc_r+0x2ac>
 100c6cc:	b8c00317 	ldw	r3,12(r23)
 100c6d0:	b8800217 	ldw	r2,8(r23)
 100c6d4:	99bfff04 	addi	r6,r19,-4
 100c6d8:	01400904 	movi	r5,36
 100c6dc:	b82b883a 	mov	r21,r23
 100c6e0:	18800215 	stw	r2,8(r3)
 100c6e4:	10c00315 	stw	r3,12(r2)
 100c6e8:	bc000204 	addi	r16,r23,8
 100c6ec:	2980c336 	bltu	r5,r6,100c9fc <_realloc_r+0x560>
 100c6f0:	008004c4 	movi	r2,19
 100c6f4:	9009883a 	mov	r4,r18
 100c6f8:	8011883a 	mov	r8,r16
 100c6fc:	11800f2e 	bgeu	r2,r6,100c73c <_realloc_r+0x2a0>
 100c700:	90800017 	ldw	r2,0(r18)
 100c704:	ba000404 	addi	r8,r23,16
 100c708:	91000204 	addi	r4,r18,8
 100c70c:	b8800215 	stw	r2,8(r23)
 100c710:	90c00117 	ldw	r3,4(r18)
 100c714:	008006c4 	movi	r2,27
 100c718:	b8c00315 	stw	r3,12(r23)
 100c71c:	1180072e 	bgeu	r2,r6,100c73c <_realloc_r+0x2a0>
 100c720:	90c00217 	ldw	r3,8(r18)
 100c724:	ba000604 	addi	r8,r23,24
 100c728:	91000404 	addi	r4,r18,16
 100c72c:	b8c00415 	stw	r3,16(r23)
 100c730:	90800317 	ldw	r2,12(r18)
 100c734:	b8800515 	stw	r2,20(r23)
 100c738:	3140c726 	beq	r6,r5,100ca58 <_realloc_r+0x5bc>
 100c73c:	20800017 	ldw	r2,0(r4)
 100c740:	b80f883a 	mov	r7,r23
 100c744:	003fd906 	br	100c6ac <_realloc_r+0x210>
 100c748:	880b883a 	mov	r5,r17
 100c74c:	b009883a 	mov	r4,r22
 100c750:	10059480 	call	1005948 <_malloc_r>
 100c754:	1023883a 	mov	r17,r2
 100c758:	10002526 	beq	r2,zero,100c7f0 <_realloc_r+0x354>
 100c75c:	80800117 	ldw	r2,4(r16)
 100c760:	00ffff84 	movi	r3,-2
 100c764:	893ffe04 	addi	r4,r17,-8
 100c768:	10c4703a 	and	r2,r2,r3
 100c76c:	8085883a 	add	r2,r16,r2
 100c770:	20809526 	beq	r4,r2,100c9c8 <_realloc_r+0x52c>
 100c774:	99bfff04 	addi	r6,r19,-4
 100c778:	01c00904 	movi	r7,36
 100c77c:	39804536 	bltu	r7,r6,100c894 <_realloc_r+0x3f8>
 100c780:	008004c4 	movi	r2,19
 100c784:	9009883a 	mov	r4,r18
 100c788:	880b883a 	mov	r5,r17
 100c78c:	11800f2e 	bgeu	r2,r6,100c7cc <_realloc_r+0x330>
 100c790:	90800017 	ldw	r2,0(r18)
 100c794:	89400204 	addi	r5,r17,8
 100c798:	91000204 	addi	r4,r18,8
 100c79c:	88800015 	stw	r2,0(r17)
 100c7a0:	90c00117 	ldw	r3,4(r18)
 100c7a4:	008006c4 	movi	r2,27
 100c7a8:	88c00115 	stw	r3,4(r17)
 100c7ac:	1180072e 	bgeu	r2,r6,100c7cc <_realloc_r+0x330>
 100c7b0:	90c00217 	ldw	r3,8(r18)
 100c7b4:	89400404 	addi	r5,r17,16
 100c7b8:	91000404 	addi	r4,r18,16
 100c7bc:	88c00215 	stw	r3,8(r17)
 100c7c0:	90800317 	ldw	r2,12(r18)
 100c7c4:	88800315 	stw	r2,12(r17)
 100c7c8:	31c09126 	beq	r6,r7,100ca10 <_realloc_r+0x574>
 100c7cc:	20800017 	ldw	r2,0(r4)
 100c7d0:	28800015 	stw	r2,0(r5)
 100c7d4:	20c00117 	ldw	r3,4(r4)
 100c7d8:	28c00115 	stw	r3,4(r5)
 100c7dc:	20800217 	ldw	r2,8(r4)
 100c7e0:	28800215 	stw	r2,8(r5)
 100c7e4:	900b883a 	mov	r5,r18
 100c7e8:	b009883a 	mov	r4,r22
 100c7ec:	100a5700 	call	100a570 <_free_r>
 100c7f0:	b009883a 	mov	r4,r22
 100c7f4:	101149c0 	call	101149c <__malloc_unlock>
 100c7f8:	003f5e06 	br	100c574 <_realloc_r+0xd8>
 100c7fc:	300b883a 	mov	r5,r6
 100c800:	dfc00b17 	ldw	ra,44(sp)
 100c804:	df000a17 	ldw	fp,40(sp)
 100c808:	ddc00917 	ldw	r23,36(sp)
 100c80c:	dd800817 	ldw	r22,32(sp)
 100c810:	dd400717 	ldw	r21,28(sp)
 100c814:	dd000617 	ldw	r20,24(sp)
 100c818:	dcc00517 	ldw	r19,20(sp)
 100c81c:	dc800417 	ldw	r18,16(sp)
 100c820:	dc400317 	ldw	r17,12(sp)
 100c824:	dc000217 	ldw	r16,8(sp)
 100c828:	dec00c04 	addi	sp,sp,48
 100c82c:	10059481 	jmpi	1005948 <_malloc_r>
 100c830:	38800117 	ldw	r2,4(r7)
 100c834:	e54b883a 	add	r5,fp,r21
 100c838:	31000054 	ori	r4,r6,1
 100c83c:	1080004c 	andi	r2,r2,1
 100c840:	1704b03a 	or	r2,r2,fp
 100c844:	38800115 	stw	r2,4(r7)
 100c848:	29000115 	stw	r4,4(r5)
 100c84c:	2987883a 	add	r3,r5,r6
 100c850:	18800117 	ldw	r2,4(r3)
 100c854:	29400204 	addi	r5,r5,8
 100c858:	b009883a 	mov	r4,r22
 100c85c:	10800054 	ori	r2,r2,1
 100c860:	18800115 	stw	r2,4(r3)
 100c864:	100a5700 	call	100a570 <_free_r>
 100c868:	003f3806 	br	100c54c <_realloc_r+0xb0>
 100c86c:	000d883a 	mov	r6,zero
 100c870:	0009883a 	mov	r4,zero
 100c874:	003f5d06 	br	100c5ec <_realloc_r+0x150>
 100c878:	30c00217 	ldw	r3,8(r6)
 100c87c:	30800317 	ldw	r2,12(r6)
 100c880:	800f883a 	mov	r7,r16
 100c884:	84000204 	addi	r16,r16,8
 100c888:	10c00215 	stw	r3,8(r2)
 100c88c:	18800315 	stw	r2,12(r3)
 100c890:	003f2306 	br	100c520 <_realloc_r+0x84>
 100c894:	8809883a 	mov	r4,r17
 100c898:	900b883a 	mov	r5,r18
 100c89c:	100b1dc0 	call	100b1dc <memmove>
 100c8a0:	003fd006 	br	100c7e4 <_realloc_r+0x348>
 100c8a4:	30800117 	ldw	r2,4(r6)
 100c8a8:	e0c00404 	addi	r3,fp,16
 100c8ac:	1108703a 	and	r4,r2,r4
 100c8b0:	9905883a 	add	r2,r19,r4
 100c8b4:	10ff4d16 	blt	r2,r3,100c5ec <_realloc_r+0x150>
 100c8b8:	1705c83a 	sub	r2,r2,fp
 100c8bc:	870b883a 	add	r5,r16,fp
 100c8c0:	10800054 	ori	r2,r2,1
 100c8c4:	28800115 	stw	r2,4(r5)
 100c8c8:	80c00117 	ldw	r3,4(r16)
 100c8cc:	00804074 	movhi	r2,257
 100c8d0:	1096dc04 	addi	r2,r2,23408
 100c8d4:	b009883a 	mov	r4,r22
 100c8d8:	18c0004c 	andi	r3,r3,1
 100c8dc:	e0c6b03a 	or	r3,fp,r3
 100c8e0:	11400215 	stw	r5,8(r2)
 100c8e4:	80c00115 	stw	r3,4(r16)
 100c8e8:	101149c0 	call	101149c <__malloc_unlock>
 100c8ec:	84400204 	addi	r17,r16,8
 100c8f0:	003f2006 	br	100c574 <_realloc_r+0xd8>
 100c8f4:	98a9883a 	add	r20,r19,r2
 100c8f8:	2509883a 	add	r4,r4,r20
 100c8fc:	e0800404 	addi	r2,fp,16
 100c900:	d9000115 	stw	r4,4(sp)
 100c904:	20bf7016 	blt	r4,r2,100c6c8 <_realloc_r+0x22c>
 100c908:	b8c00317 	ldw	r3,12(r23)
 100c90c:	b8800217 	ldw	r2,8(r23)
 100c910:	99bfff04 	addi	r6,r19,-4
 100c914:	01400904 	movi	r5,36
 100c918:	18800215 	stw	r2,8(r3)
 100c91c:	10c00315 	stw	r3,12(r2)
 100c920:	bc400204 	addi	r17,r23,8
 100c924:	29804136 	bltu	r5,r6,100ca2c <_realloc_r+0x590>
 100c928:	008004c4 	movi	r2,19
 100c92c:	9009883a 	mov	r4,r18
 100c930:	880f883a 	mov	r7,r17
 100c934:	11800f2e 	bgeu	r2,r6,100c974 <_realloc_r+0x4d8>
 100c938:	90800017 	ldw	r2,0(r18)
 100c93c:	b9c00404 	addi	r7,r23,16
 100c940:	91000204 	addi	r4,r18,8
 100c944:	b8800215 	stw	r2,8(r23)
 100c948:	90c00117 	ldw	r3,4(r18)
 100c94c:	008006c4 	movi	r2,27
 100c950:	b8c00315 	stw	r3,12(r23)
 100c954:	1180072e 	bgeu	r2,r6,100c974 <_realloc_r+0x4d8>
 100c958:	90c00217 	ldw	r3,8(r18)
 100c95c:	b9c00604 	addi	r7,r23,24
 100c960:	91000404 	addi	r4,r18,16
 100c964:	b8c00415 	stw	r3,16(r23)
 100c968:	90800317 	ldw	r2,12(r18)
 100c96c:	b8800515 	stw	r2,20(r23)
 100c970:	31404026 	beq	r6,r5,100ca74 <_realloc_r+0x5d8>
 100c974:	20800017 	ldw	r2,0(r4)
 100c978:	38800015 	stw	r2,0(r7)
 100c97c:	20c00117 	ldw	r3,4(r4)
 100c980:	38c00115 	stw	r3,4(r7)
 100c984:	20800217 	ldw	r2,8(r4)
 100c988:	38800215 	stw	r2,8(r7)
 100c98c:	d8c00117 	ldw	r3,4(sp)
 100c990:	bf0b883a 	add	r5,r23,fp
 100c994:	b009883a 	mov	r4,r22
 100c998:	1f05c83a 	sub	r2,r3,fp
 100c99c:	10800054 	ori	r2,r2,1
 100c9a0:	28800115 	stw	r2,4(r5)
 100c9a4:	b8c00117 	ldw	r3,4(r23)
 100c9a8:	00804074 	movhi	r2,257
 100c9ac:	1096dc04 	addi	r2,r2,23408
 100c9b0:	11400215 	stw	r5,8(r2)
 100c9b4:	18c0004c 	andi	r3,r3,1
 100c9b8:	e0c6b03a 	or	r3,fp,r3
 100c9bc:	b8c00115 	stw	r3,4(r23)
 100c9c0:	101149c0 	call	101149c <__malloc_unlock>
 100c9c4:	003eeb06 	br	100c574 <_realloc_r+0xd8>
 100c9c8:	20800117 	ldw	r2,4(r4)
 100c9cc:	00ffff04 	movi	r3,-4
 100c9d0:	800f883a 	mov	r7,r16
 100c9d4:	10c4703a 	and	r2,r2,r3
 100c9d8:	98a9883a 	add	r20,r19,r2
 100c9dc:	84000204 	addi	r16,r16,8
 100c9e0:	003ecf06 	br	100c520 <_realloc_r+0x84>
 100c9e4:	900b883a 	mov	r5,r18
 100c9e8:	8009883a 	mov	r4,r16
 100c9ec:	100b1dc0 	call	100b1dc <memmove>
 100c9f0:	dd000017 	ldw	r20,0(sp)
 100c9f4:	b80f883a 	mov	r7,r23
 100c9f8:	003ec906 	br	100c520 <_realloc_r+0x84>
 100c9fc:	900b883a 	mov	r5,r18
 100ca00:	8009883a 	mov	r4,r16
 100ca04:	100b1dc0 	call	100b1dc <memmove>
 100ca08:	b80f883a 	mov	r7,r23
 100ca0c:	003ec406 	br	100c520 <_realloc_r+0x84>
 100ca10:	90c00417 	ldw	r3,16(r18)
 100ca14:	89400604 	addi	r5,r17,24
 100ca18:	91000604 	addi	r4,r18,24
 100ca1c:	88c00415 	stw	r3,16(r17)
 100ca20:	90800517 	ldw	r2,20(r18)
 100ca24:	88800515 	stw	r2,20(r17)
 100ca28:	003f6806 	br	100c7cc <_realloc_r+0x330>
 100ca2c:	900b883a 	mov	r5,r18
 100ca30:	8809883a 	mov	r4,r17
 100ca34:	100b1dc0 	call	100b1dc <memmove>
 100ca38:	003fd406 	br	100c98c <_realloc_r+0x4f0>
 100ca3c:	90c00417 	ldw	r3,16(r18)
 100ca40:	91000604 	addi	r4,r18,24
 100ca44:	ba000804 	addi	r8,r23,32
 100ca48:	b8c00615 	stw	r3,24(r23)
 100ca4c:	90800517 	ldw	r2,20(r18)
 100ca50:	b8800715 	stw	r2,28(r23)
 100ca54:	003f1206 	br	100c6a0 <_realloc_r+0x204>
 100ca58:	90c00417 	ldw	r3,16(r18)
 100ca5c:	91000604 	addi	r4,r18,24
 100ca60:	ba000804 	addi	r8,r23,32
 100ca64:	b8c00615 	stw	r3,24(r23)
 100ca68:	90800517 	ldw	r2,20(r18)
 100ca6c:	b8800715 	stw	r2,28(r23)
 100ca70:	003f3206 	br	100c73c <_realloc_r+0x2a0>
 100ca74:	90c00417 	ldw	r3,16(r18)
 100ca78:	91000604 	addi	r4,r18,24
 100ca7c:	b9c00804 	addi	r7,r23,32
 100ca80:	b8c00615 	stw	r3,24(r23)
 100ca84:	90800517 	ldw	r2,20(r18)
 100ca88:	b8800715 	stw	r2,28(r23)
 100ca8c:	003fb906 	br	100c974 <_realloc_r+0x4d8>

0100ca90 <__isinfd>:
 100ca90:	200d883a 	mov	r6,r4
 100ca94:	0109c83a 	sub	r4,zero,r4
 100ca98:	2188b03a 	or	r4,r4,r6
 100ca9c:	2008d7fa 	srli	r4,r4,31
 100caa0:	00a00034 	movhi	r2,32768
 100caa4:	10bfffc4 	addi	r2,r2,-1
 100caa8:	1144703a 	and	r2,r2,r5
 100caac:	2088b03a 	or	r4,r4,r2
 100cab0:	009ffc34 	movhi	r2,32752
 100cab4:	1105c83a 	sub	r2,r2,r4
 100cab8:	0087c83a 	sub	r3,zero,r2
 100cabc:	10c4b03a 	or	r2,r2,r3
 100cac0:	1004d7fa 	srli	r2,r2,31
 100cac4:	00c00044 	movi	r3,1
 100cac8:	1885c83a 	sub	r2,r3,r2
 100cacc:	f800283a 	ret

0100cad0 <__isnand>:
 100cad0:	200d883a 	mov	r6,r4
 100cad4:	0109c83a 	sub	r4,zero,r4
 100cad8:	2188b03a 	or	r4,r4,r6
 100cadc:	2008d7fa 	srli	r4,r4,31
 100cae0:	00a00034 	movhi	r2,32768
 100cae4:	10bfffc4 	addi	r2,r2,-1
 100cae8:	1144703a 	and	r2,r2,r5
 100caec:	2088b03a 	or	r4,r4,r2
 100caf0:	009ffc34 	movhi	r2,32752
 100caf4:	1105c83a 	sub	r2,r2,r4
 100caf8:	1004d7fa 	srli	r2,r2,31
 100cafc:	f800283a 	ret

0100cb00 <_raise_r>:
 100cb00:	defffd04 	addi	sp,sp,-12
 100cb04:	008007c4 	movi	r2,31
 100cb08:	dc400115 	stw	r17,4(sp)
 100cb0c:	dc000015 	stw	r16,0(sp)
 100cb10:	dfc00215 	stw	ra,8(sp)
 100cb14:	2821883a 	mov	r16,r5
 100cb18:	2023883a 	mov	r17,r4
 100cb1c:	11402736 	bltu	r2,r5,100cbbc <_raise_r+0xbc>
 100cb20:	20c0b717 	ldw	r3,732(r4)
 100cb24:	18001326 	beq	r3,zero,100cb74 <_raise_r+0x74>
 100cb28:	2945883a 	add	r2,r5,r5
 100cb2c:	1085883a 	add	r2,r2,r2
 100cb30:	188b883a 	add	r5,r3,r2
 100cb34:	28c00017 	ldw	r3,0(r5)
 100cb38:	18000e26 	beq	r3,zero,100cb74 <_raise_r+0x74>
 100cb3c:	01000044 	movi	r4,1
 100cb40:	19000526 	beq	r3,r4,100cb58 <_raise_r+0x58>
 100cb44:	00bfffc4 	movi	r2,-1
 100cb48:	18801326 	beq	r3,r2,100cb98 <_raise_r+0x98>
 100cb4c:	28000015 	stw	zero,0(r5)
 100cb50:	8009883a 	mov	r4,r16
 100cb54:	183ee83a 	callr	r3
 100cb58:	0007883a 	mov	r3,zero
 100cb5c:	1805883a 	mov	r2,r3
 100cb60:	dfc00217 	ldw	ra,8(sp)
 100cb64:	dc400117 	ldw	r17,4(sp)
 100cb68:	dc000017 	ldw	r16,0(sp)
 100cb6c:	dec00304 	addi	sp,sp,12
 100cb70:	f800283a 	ret
 100cb74:	100cdd80 	call	100cdd8 <_getpid_r>
 100cb78:	100b883a 	mov	r5,r2
 100cb7c:	8809883a 	mov	r4,r17
 100cb80:	800d883a 	mov	r6,r16
 100cb84:	dfc00217 	ldw	ra,8(sp)
 100cb88:	dc400117 	ldw	r17,4(sp)
 100cb8c:	dc000017 	ldw	r16,0(sp)
 100cb90:	dec00304 	addi	sp,sp,12
 100cb94:	100cddc1 	jmpi	100cddc <_kill_r>
 100cb98:	2007883a 	mov	r3,r4
 100cb9c:	00800584 	movi	r2,22
 100cba0:	88800015 	stw	r2,0(r17)
 100cba4:	1805883a 	mov	r2,r3
 100cba8:	dfc00217 	ldw	ra,8(sp)
 100cbac:	dc400117 	ldw	r17,4(sp)
 100cbb0:	dc000017 	ldw	r16,0(sp)
 100cbb4:	dec00304 	addi	sp,sp,12
 100cbb8:	f800283a 	ret
 100cbbc:	00800584 	movi	r2,22
 100cbc0:	00ffffc4 	movi	r3,-1
 100cbc4:	20800015 	stw	r2,0(r4)
 100cbc8:	003fe406 	br	100cb5c <_raise_r+0x5c>

0100cbcc <raise>:
 100cbcc:	00804074 	movhi	r2,257
 100cbd0:	109ce904 	addi	r2,r2,29604
 100cbd4:	200b883a 	mov	r5,r4
 100cbd8:	11000017 	ldw	r4,0(r2)
 100cbdc:	100cb001 	jmpi	100cb00 <_raise_r>

0100cbe0 <_init_signal_r>:
 100cbe0:	2080b717 	ldw	r2,732(r4)
 100cbe4:	defffe04 	addi	sp,sp,-8
 100cbe8:	dc000015 	stw	r16,0(sp)
 100cbec:	dfc00115 	stw	ra,4(sp)
 100cbf0:	2021883a 	mov	r16,r4
 100cbf4:	10000526 	beq	r2,zero,100cc0c <_init_signal_r+0x2c>
 100cbf8:	0005883a 	mov	r2,zero
 100cbfc:	dfc00117 	ldw	ra,4(sp)
 100cc00:	dc000017 	ldw	r16,0(sp)
 100cc04:	dec00204 	addi	sp,sp,8
 100cc08:	f800283a 	ret
 100cc0c:	01402004 	movi	r5,128
 100cc10:	10059480 	call	1005948 <_malloc_r>
 100cc14:	1009883a 	mov	r4,r2
 100cc18:	8080b715 	stw	r2,732(r16)
 100cc1c:	10000726 	beq	r2,zero,100cc3c <_init_signal_r+0x5c>
 100cc20:	0007883a 	mov	r3,zero
 100cc24:	01402004 	movi	r5,128
 100cc28:	20c5883a 	add	r2,r4,r3
 100cc2c:	18c00104 	addi	r3,r3,4
 100cc30:	10000015 	stw	zero,0(r2)
 100cc34:	197ffc1e 	bne	r3,r5,100cc28 <_init_signal_r+0x48>
 100cc38:	003fef06 	br	100cbf8 <_init_signal_r+0x18>
 100cc3c:	00bfffc4 	movi	r2,-1
 100cc40:	003fee06 	br	100cbfc <_init_signal_r+0x1c>

0100cc44 <_init_signal>:
 100cc44:	00804074 	movhi	r2,257
 100cc48:	109ce904 	addi	r2,r2,29604
 100cc4c:	11000017 	ldw	r4,0(r2)
 100cc50:	100cbe01 	jmpi	100cbe0 <_init_signal_r>

0100cc54 <__sigtramp_r>:
 100cc54:	defffd04 	addi	sp,sp,-12
 100cc58:	008007c4 	movi	r2,31
 100cc5c:	dc000115 	stw	r16,4(sp)
 100cc60:	dfc00215 	stw	ra,8(sp)
 100cc64:	2021883a 	mov	r16,r4
 100cc68:	11401336 	bltu	r2,r5,100ccb8 <__sigtramp_r+0x64>
 100cc6c:	20c0b717 	ldw	r3,732(r4)
 100cc70:	18001f26 	beq	r3,zero,100ccf0 <__sigtramp_r+0x9c>
 100cc74:	2945883a 	add	r2,r5,r5
 100cc78:	1085883a 	add	r2,r2,r2
 100cc7c:	10c9883a 	add	r4,r2,r3
 100cc80:	20c00017 	ldw	r3,0(r4)
 100cc84:	18001626 	beq	r3,zero,100cce0 <__sigtramp_r+0x8c>
 100cc88:	00bfffc4 	movi	r2,-1
 100cc8c:	18801626 	beq	r3,r2,100cce8 <__sigtramp_r+0x94>
 100cc90:	00800044 	movi	r2,1
 100cc94:	18800d26 	beq	r3,r2,100cccc <__sigtramp_r+0x78>
 100cc98:	20000015 	stw	zero,0(r4)
 100cc9c:	2809883a 	mov	r4,r5
 100cca0:	183ee83a 	callr	r3
 100cca4:	0005883a 	mov	r2,zero
 100cca8:	dfc00217 	ldw	ra,8(sp)
 100ccac:	dc000117 	ldw	r16,4(sp)
 100ccb0:	dec00304 	addi	sp,sp,12
 100ccb4:	f800283a 	ret
 100ccb8:	00bfffc4 	movi	r2,-1
 100ccbc:	dfc00217 	ldw	ra,8(sp)
 100ccc0:	dc000117 	ldw	r16,4(sp)
 100ccc4:	dec00304 	addi	sp,sp,12
 100ccc8:	f800283a 	ret
 100cccc:	008000c4 	movi	r2,3
 100ccd0:	dfc00217 	ldw	ra,8(sp)
 100ccd4:	dc000117 	ldw	r16,4(sp)
 100ccd8:	dec00304 	addi	sp,sp,12
 100ccdc:	f800283a 	ret
 100cce0:	00800044 	movi	r2,1
 100cce4:	003ff006 	br	100cca8 <__sigtramp_r+0x54>
 100cce8:	00800084 	movi	r2,2
 100ccec:	003fee06 	br	100cca8 <__sigtramp_r+0x54>
 100ccf0:	d9400015 	stw	r5,0(sp)
 100ccf4:	100cbe00 	call	100cbe0 <_init_signal_r>
 100ccf8:	d9400017 	ldw	r5,0(sp)
 100ccfc:	103fee1e 	bne	r2,zero,100ccb8 <__sigtramp_r+0x64>
 100cd00:	80c0b717 	ldw	r3,732(r16)
 100cd04:	003fdb06 	br	100cc74 <__sigtramp_r+0x20>

0100cd08 <__sigtramp>:
 100cd08:	00804074 	movhi	r2,257
 100cd0c:	109ce904 	addi	r2,r2,29604
 100cd10:	200b883a 	mov	r5,r4
 100cd14:	11000017 	ldw	r4,0(r2)
 100cd18:	100cc541 	jmpi	100cc54 <__sigtramp_r>

0100cd1c <_signal_r>:
 100cd1c:	defffc04 	addi	sp,sp,-16
 100cd20:	008007c4 	movi	r2,31
 100cd24:	dc800215 	stw	r18,8(sp)
 100cd28:	dc400115 	stw	r17,4(sp)
 100cd2c:	dc000015 	stw	r16,0(sp)
 100cd30:	dfc00315 	stw	ra,12(sp)
 100cd34:	2823883a 	mov	r17,r5
 100cd38:	00ffffc4 	movi	r3,-1
 100cd3c:	3025883a 	mov	r18,r6
 100cd40:	2021883a 	mov	r16,r4
 100cd44:	1140092e 	bgeu	r2,r5,100cd6c <_signal_r+0x50>
 100cd48:	00800584 	movi	r2,22
 100cd4c:	20800015 	stw	r2,0(r4)
 100cd50:	1805883a 	mov	r2,r3
 100cd54:	dfc00317 	ldw	ra,12(sp)
 100cd58:	dc800217 	ldw	r18,8(sp)
 100cd5c:	dc400117 	ldw	r17,4(sp)
 100cd60:	dc000017 	ldw	r16,0(sp)
 100cd64:	dec00404 	addi	sp,sp,16
 100cd68:	f800283a 	ret
 100cd6c:	2140b717 	ldw	r5,732(r4)
 100cd70:	28000c26 	beq	r5,zero,100cda4 <_signal_r+0x88>
 100cd74:	8c45883a 	add	r2,r17,r17
 100cd78:	1085883a 	add	r2,r2,r2
 100cd7c:	1145883a 	add	r2,r2,r5
 100cd80:	10c00017 	ldw	r3,0(r2)
 100cd84:	14800015 	stw	r18,0(r2)
 100cd88:	1805883a 	mov	r2,r3
 100cd8c:	dfc00317 	ldw	ra,12(sp)
 100cd90:	dc800217 	ldw	r18,8(sp)
 100cd94:	dc400117 	ldw	r17,4(sp)
 100cd98:	dc000017 	ldw	r16,0(sp)
 100cd9c:	dec00404 	addi	sp,sp,16
 100cda0:	f800283a 	ret
 100cda4:	100cbe00 	call	100cbe0 <_init_signal_r>
 100cda8:	1000021e 	bne	r2,zero,100cdb4 <_signal_r+0x98>
 100cdac:	8140b717 	ldw	r5,732(r16)
 100cdb0:	003ff006 	br	100cd74 <_signal_r+0x58>
 100cdb4:	00ffffc4 	movi	r3,-1
 100cdb8:	003fe506 	br	100cd50 <_signal_r+0x34>

0100cdbc <signal>:
 100cdbc:	01804074 	movhi	r6,257
 100cdc0:	319ce904 	addi	r6,r6,29604
 100cdc4:	2007883a 	mov	r3,r4
 100cdc8:	31000017 	ldw	r4,0(r6)
 100cdcc:	280d883a 	mov	r6,r5
 100cdd0:	180b883a 	mov	r5,r3
 100cdd4:	100cd1c1 	jmpi	100cd1c <_signal_r>

0100cdd8 <_getpid_r>:
 100cdd8:	1010d341 	jmpi	1010d34 <getpid>

0100cddc <_kill_r>:
 100cddc:	defffd04 	addi	sp,sp,-12
 100cde0:	dc000015 	stw	r16,0(sp)
 100cde4:	040040b4 	movhi	r16,258
 100cde8:	8424d904 	addi	r16,r16,-27804
 100cdec:	dc400115 	stw	r17,4(sp)
 100cdf0:	80000015 	stw	zero,0(r16)
 100cdf4:	2023883a 	mov	r17,r4
 100cdf8:	2809883a 	mov	r4,r5
 100cdfc:	300b883a 	mov	r5,r6
 100ce00:	dfc00215 	stw	ra,8(sp)
 100ce04:	10110340 	call	1011034 <kill>
 100ce08:	1007883a 	mov	r3,r2
 100ce0c:	00bfffc4 	movi	r2,-1
 100ce10:	18800626 	beq	r3,r2,100ce2c <_kill_r+0x50>
 100ce14:	1805883a 	mov	r2,r3
 100ce18:	dfc00217 	ldw	ra,8(sp)
 100ce1c:	dc400117 	ldw	r17,4(sp)
 100ce20:	dc000017 	ldw	r16,0(sp)
 100ce24:	dec00304 	addi	sp,sp,12
 100ce28:	f800283a 	ret
 100ce2c:	80800017 	ldw	r2,0(r16)
 100ce30:	103ff826 	beq	r2,zero,100ce14 <_kill_r+0x38>
 100ce34:	88800015 	stw	r2,0(r17)
 100ce38:	1805883a 	mov	r2,r3
 100ce3c:	dfc00217 	ldw	ra,8(sp)
 100ce40:	dc400117 	ldw	r17,4(sp)
 100ce44:	dc000017 	ldw	r16,0(sp)
 100ce48:	dec00304 	addi	sp,sp,12
 100ce4c:	f800283a 	ret

0100ce50 <__sclose>:
 100ce50:	2940038f 	ldh	r5,14(r5)
 100ce54:	100e2801 	jmpi	100e280 <_close_r>

0100ce58 <__sseek>:
 100ce58:	defffe04 	addi	sp,sp,-8
 100ce5c:	dc000015 	stw	r16,0(sp)
 100ce60:	2821883a 	mov	r16,r5
 100ce64:	2940038f 	ldh	r5,14(r5)
 100ce68:	dfc00115 	stw	ra,4(sp)
 100ce6c:	100e4f80 	call	100e4f8 <_lseek_r>
 100ce70:	1007883a 	mov	r3,r2
 100ce74:	00bfffc4 	movi	r2,-1
 100ce78:	18800926 	beq	r3,r2,100cea0 <__sseek+0x48>
 100ce7c:	8080030b 	ldhu	r2,12(r16)
 100ce80:	80c01415 	stw	r3,80(r16)
 100ce84:	10840014 	ori	r2,r2,4096
 100ce88:	8080030d 	sth	r2,12(r16)
 100ce8c:	1805883a 	mov	r2,r3
 100ce90:	dfc00117 	ldw	ra,4(sp)
 100ce94:	dc000017 	ldw	r16,0(sp)
 100ce98:	dec00204 	addi	sp,sp,8
 100ce9c:	f800283a 	ret
 100cea0:	8080030b 	ldhu	r2,12(r16)
 100cea4:	10bbffcc 	andi	r2,r2,61439
 100cea8:	8080030d 	sth	r2,12(r16)
 100ceac:	1805883a 	mov	r2,r3
 100ceb0:	dfc00117 	ldw	ra,4(sp)
 100ceb4:	dc000017 	ldw	r16,0(sp)
 100ceb8:	dec00204 	addi	sp,sp,8
 100cebc:	f800283a 	ret

0100cec0 <__swrite>:
 100cec0:	2880030b 	ldhu	r2,12(r5)
 100cec4:	defffb04 	addi	sp,sp,-20
 100cec8:	dcc00315 	stw	r19,12(sp)
 100cecc:	1080400c 	andi	r2,r2,256
 100ced0:	dc800215 	stw	r18,8(sp)
 100ced4:	dc400115 	stw	r17,4(sp)
 100ced8:	dc000015 	stw	r16,0(sp)
 100cedc:	3027883a 	mov	r19,r6
 100cee0:	3825883a 	mov	r18,r7
 100cee4:	dfc00415 	stw	ra,16(sp)
 100cee8:	2821883a 	mov	r16,r5
 100ceec:	000d883a 	mov	r6,zero
 100cef0:	01c00084 	movi	r7,2
 100cef4:	2023883a 	mov	r17,r4
 100cef8:	10000226 	beq	r2,zero,100cf04 <__swrite+0x44>
 100cefc:	2940038f 	ldh	r5,14(r5)
 100cf00:	100e4f80 	call	100e4f8 <_lseek_r>
 100cf04:	8080030b 	ldhu	r2,12(r16)
 100cf08:	8140038f 	ldh	r5,14(r16)
 100cf0c:	8809883a 	mov	r4,r17
 100cf10:	10bbffcc 	andi	r2,r2,61439
 100cf14:	980d883a 	mov	r6,r19
 100cf18:	900f883a 	mov	r7,r18
 100cf1c:	8080030d 	sth	r2,12(r16)
 100cf20:	dfc00417 	ldw	ra,16(sp)
 100cf24:	dcc00317 	ldw	r19,12(sp)
 100cf28:	dc800217 	ldw	r18,8(sp)
 100cf2c:	dc400117 	ldw	r17,4(sp)
 100cf30:	dc000017 	ldw	r16,0(sp)
 100cf34:	dec00504 	addi	sp,sp,20
 100cf38:	100e2081 	jmpi	100e208 <_write_r>

0100cf3c <__sread>:
 100cf3c:	defffe04 	addi	sp,sp,-8
 100cf40:	dc000015 	stw	r16,0(sp)
 100cf44:	2821883a 	mov	r16,r5
 100cf48:	2940038f 	ldh	r5,14(r5)
 100cf4c:	dfc00115 	stw	ra,4(sp)
 100cf50:	100e5700 	call	100e570 <_read_r>
 100cf54:	1007883a 	mov	r3,r2
 100cf58:	10000816 	blt	r2,zero,100cf7c <__sread+0x40>
 100cf5c:	80801417 	ldw	r2,80(r16)
 100cf60:	10c5883a 	add	r2,r2,r3
 100cf64:	80801415 	stw	r2,80(r16)
 100cf68:	1805883a 	mov	r2,r3
 100cf6c:	dfc00117 	ldw	ra,4(sp)
 100cf70:	dc000017 	ldw	r16,0(sp)
 100cf74:	dec00204 	addi	sp,sp,8
 100cf78:	f800283a 	ret
 100cf7c:	8080030b 	ldhu	r2,12(r16)
 100cf80:	10bbffcc 	andi	r2,r2,61439
 100cf84:	8080030d 	sth	r2,12(r16)
 100cf88:	1805883a 	mov	r2,r3
 100cf8c:	dfc00117 	ldw	ra,4(sp)
 100cf90:	dc000017 	ldw	r16,0(sp)
 100cf94:	dec00204 	addi	sp,sp,8
 100cf98:	f800283a 	ret

0100cf9c <__sprint_r>:
 100cf9c:	30800217 	ldw	r2,8(r6)
 100cfa0:	defffe04 	addi	sp,sp,-8
 100cfa4:	dc000015 	stw	r16,0(sp)
 100cfa8:	dfc00115 	stw	ra,4(sp)
 100cfac:	3021883a 	mov	r16,r6
 100cfb0:	0007883a 	mov	r3,zero
 100cfb4:	1000061e 	bne	r2,zero,100cfd0 <__sprint_r+0x34>
 100cfb8:	1805883a 	mov	r2,r3
 100cfbc:	30000115 	stw	zero,4(r6)
 100cfc0:	dfc00117 	ldw	ra,4(sp)
 100cfc4:	dc000017 	ldw	r16,0(sp)
 100cfc8:	dec00204 	addi	sp,sp,8
 100cfcc:	f800283a 	ret
 100cfd0:	100a8840 	call	100a884 <__sfvwrite_r>
 100cfd4:	1007883a 	mov	r3,r2
 100cfd8:	1805883a 	mov	r2,r3
 100cfdc:	80000115 	stw	zero,4(r16)
 100cfe0:	80000215 	stw	zero,8(r16)
 100cfe4:	dfc00117 	ldw	ra,4(sp)
 100cfe8:	dc000017 	ldw	r16,0(sp)
 100cfec:	dec00204 	addi	sp,sp,8
 100cff0:	f800283a 	ret

0100cff4 <___vfiprintf_internal_r>:
 100cff4:	defeb604 	addi	sp,sp,-1320
 100cff8:	dd814615 	stw	r22,1304(sp)
 100cffc:	dd414515 	stw	r21,1300(sp)
 100d000:	dc014015 	stw	r16,1280(sp)
 100d004:	dfc14915 	stw	ra,1316(sp)
 100d008:	df014815 	stw	fp,1312(sp)
 100d00c:	ddc14715 	stw	r23,1308(sp)
 100d010:	dd014415 	stw	r20,1296(sp)
 100d014:	dcc14315 	stw	r19,1292(sp)
 100d018:	dc814215 	stw	r18,1288(sp)
 100d01c:	dc414115 	stw	r17,1284(sp)
 100d020:	202d883a 	mov	r22,r4
 100d024:	282b883a 	mov	r21,r5
 100d028:	3021883a 	mov	r16,r6
 100d02c:	20000226 	beq	r4,zero,100d038 <___vfiprintf_internal_r+0x44>
 100d030:	20800e17 	ldw	r2,56(r4)
 100d034:	1001bc26 	beq	r2,zero,100d728 <___vfiprintf_internal_r+0x734>
 100d038:	a880030b 	ldhu	r2,12(r21)
 100d03c:	1080020c 	andi	r2,r2,8
 100d040:	1001cb26 	beq	r2,zero,100d770 <___vfiprintf_internal_r+0x77c>
 100d044:	a8800417 	ldw	r2,16(r21)
 100d048:	1001c926 	beq	r2,zero,100d770 <___vfiprintf_internal_r+0x77c>
 100d04c:	aa00030b 	ldhu	r8,12(r21)
 100d050:	00800284 	movi	r2,10
 100d054:	40c0068c 	andi	r3,r8,26
 100d058:	18802f1e 	bne	r3,r2,100d118 <___vfiprintf_internal_r+0x124>
 100d05c:	a880038f 	ldh	r2,14(r21)
 100d060:	10002d16 	blt	r2,zero,100d118 <___vfiprintf_internal_r+0x124>
 100d064:	aa40038b 	ldhu	r9,14(r21)
 100d068:	aa800717 	ldw	r10,28(r21)
 100d06c:	aac00917 	ldw	r11,36(r21)
 100d070:	dc401e04 	addi	r17,sp,120
 100d074:	d8803504 	addi	r2,sp,212
 100d078:	00c10004 	movi	r3,1024
 100d07c:	423fff4c 	andi	r8,r8,65533
 100d080:	800d883a 	mov	r6,r16
 100d084:	b009883a 	mov	r4,r22
 100d088:	880b883a 	mov	r5,r17
 100d08c:	da00210d 	sth	r8,132(sp)
 100d090:	da40218d 	sth	r9,134(sp)
 100d094:	da802515 	stw	r10,148(sp)
 100d098:	dac02715 	stw	r11,156(sp)
 100d09c:	d8802215 	stw	r2,136(sp)
 100d0a0:	d8c02315 	stw	r3,140(sp)
 100d0a4:	d8801e15 	stw	r2,120(sp)
 100d0a8:	d8c02015 	stw	r3,128(sp)
 100d0ac:	d8002415 	stw	zero,144(sp)
 100d0b0:	100cff40 	call	100cff4 <___vfiprintf_internal_r>
 100d0b4:	d8813a15 	stw	r2,1256(sp)
 100d0b8:	10000416 	blt	r2,zero,100d0cc <___vfiprintf_internal_r+0xd8>
 100d0bc:	b009883a 	mov	r4,r22
 100d0c0:	880b883a 	mov	r5,r17
 100d0c4:	1009f540 	call	1009f54 <_fflush_r>
 100d0c8:	1001b01e 	bne	r2,zero,100d78c <___vfiprintf_internal_r+0x798>
 100d0cc:	d880210b 	ldhu	r2,132(sp)
 100d0d0:	1080100c 	andi	r2,r2,64
 100d0d4:	10000326 	beq	r2,zero,100d0e4 <___vfiprintf_internal_r+0xf0>
 100d0d8:	a880030b 	ldhu	r2,12(r21)
 100d0dc:	10801014 	ori	r2,r2,64
 100d0e0:	a880030d 	sth	r2,12(r21)
 100d0e4:	d8813a17 	ldw	r2,1256(sp)
 100d0e8:	dfc14917 	ldw	ra,1316(sp)
 100d0ec:	df014817 	ldw	fp,1312(sp)
 100d0f0:	ddc14717 	ldw	r23,1308(sp)
 100d0f4:	dd814617 	ldw	r22,1304(sp)
 100d0f8:	dd414517 	ldw	r21,1300(sp)
 100d0fc:	dd014417 	ldw	r20,1296(sp)
 100d100:	dcc14317 	ldw	r19,1292(sp)
 100d104:	dc814217 	ldw	r18,1288(sp)
 100d108:	dc414117 	ldw	r17,1284(sp)
 100d10c:	dc014017 	ldw	r16,1280(sp)
 100d110:	dec14a04 	addi	sp,sp,1320
 100d114:	f800283a 	ret
 100d118:	d8c00e04 	addi	r3,sp,56
 100d11c:	8029883a 	mov	r20,r16
 100d120:	d8c00115 	stw	r3,4(sp)
 100d124:	d8000315 	stw	zero,12(sp)
 100d128:	d8000215 	stw	zero,8(sp)
 100d12c:	1825883a 	mov	r18,r3
 100d130:	d8013a15 	stw	zero,1256(sp)
 100d134:	d8013615 	stw	zero,1240(sp)
 100d138:	a0800007 	ldb	r2,0(r20)
 100d13c:	10001926 	beq	r2,zero,100d1a4 <___vfiprintf_internal_r+0x1b0>
 100d140:	00c00944 	movi	r3,37
 100d144:	10c01726 	beq	r2,r3,100d1a4 <___vfiprintf_internal_r+0x1b0>
 100d148:	a021883a 	mov	r16,r20
 100d14c:	00000106 	br	100d154 <___vfiprintf_internal_r+0x160>
 100d150:	10c00326 	beq	r2,r3,100d160 <___vfiprintf_internal_r+0x16c>
 100d154:	84000044 	addi	r16,r16,1
 100d158:	80800007 	ldb	r2,0(r16)
 100d15c:	103ffc1e 	bne	r2,zero,100d150 <___vfiprintf_internal_r+0x15c>
 100d160:	8523c83a 	sub	r17,r16,r20
 100d164:	88000e26 	beq	r17,zero,100d1a0 <___vfiprintf_internal_r+0x1ac>
 100d168:	d9400317 	ldw	r5,12(sp)
 100d16c:	d9000217 	ldw	r4,8(sp)
 100d170:	008001c4 	movi	r2,7
 100d174:	2c4b883a 	add	r5,r5,r17
 100d178:	21000044 	addi	r4,r4,1
 100d17c:	95000015 	stw	r20,0(r18)
 100d180:	d9400315 	stw	r5,12(sp)
 100d184:	94400115 	stw	r17,4(r18)
 100d188:	d9000215 	stw	r4,8(sp)
 100d18c:	1101e816 	blt	r2,r4,100d930 <___vfiprintf_internal_r+0x93c>
 100d190:	94800204 	addi	r18,r18,8
 100d194:	d9013a17 	ldw	r4,1256(sp)
 100d198:	2449883a 	add	r4,r4,r17
 100d19c:	d9013a15 	stw	r4,1256(sp)
 100d1a0:	8029883a 	mov	r20,r16
 100d1a4:	a0800007 	ldb	r2,0(r20)
 100d1a8:	10012e26 	beq	r2,zero,100d664 <___vfiprintf_internal_r+0x670>
 100d1ac:	a5000044 	addi	r20,r20,1
 100d1b0:	d8000005 	stb	zero,0(sp)
 100d1b4:	a0c00007 	ldb	r3,0(r20)
 100d1b8:	05ffffc4 	movi	r23,-1
 100d1bc:	d8013915 	stw	zero,1252(sp)
 100d1c0:	d8013b15 	stw	zero,1260(sp)
 100d1c4:	180b883a 	mov	r5,r3
 100d1c8:	a5000044 	addi	r20,r20,1
 100d1cc:	28fff804 	addi	r3,r5,-32
 100d1d0:	00801604 	movi	r2,88
 100d1d4:	10c06036 	bltu	r2,r3,100d358 <___vfiprintf_internal_r+0x364>
 100d1d8:	18c5883a 	add	r2,r3,r3
 100d1dc:	1085883a 	add	r2,r2,r2
 100d1e0:	00c04074 	movhi	r3,257
 100d1e4:	18f47d04 	addi	r3,r3,-11788
 100d1e8:	10c5883a 	add	r2,r2,r3
 100d1ec:	11000017 	ldw	r4,0(r2)
 100d1f0:	2000683a 	jmp	r4
 100d1f4:	0100da5c 	xori	r4,zero,873
 100d1f8:	0100d358 	cmpnei	r4,zero,845
 100d1fc:	0100d358 	cmpnei	r4,zero,845
 100d200:	0100db04 	movi	r4,876
 100d204:	0100d358 	cmpnei	r4,zero,845
 100d208:	0100d358 	cmpnei	r4,zero,845
 100d20c:	0100d358 	cmpnei	r4,zero,845
 100d210:	0100d358 	cmpnei	r4,zero,845
 100d214:	0100d358 	cmpnei	r4,zero,845
 100d218:	0100d358 	cmpnei	r4,zero,845
 100d21c:	0100d9e4 	muli	r4,zero,871
 100d220:	0100db18 	cmpnei	r4,zero,876
 100d224:	0100d358 	cmpnei	r4,zero,845
 100d228:	0100d9fc 	xorhi	r4,zero,871
 100d22c:	0100dab4 	movhi	r4,874
 100d230:	0100d358 	cmpnei	r4,zero,845
 100d234:	0100daa0 	cmpeqi	r4,zero,874
 100d238:	0100da74 	movhi	r4,873
 100d23c:	0100da74 	movhi	r4,873
 100d240:	0100da74 	movhi	r4,873
 100d244:	0100da74 	movhi	r4,873
 100d248:	0100da74 	movhi	r4,873
 100d24c:	0100da74 	movhi	r4,873
 100d250:	0100da74 	movhi	r4,873
 100d254:	0100da74 	movhi	r4,873
 100d258:	0100da74 	movhi	r4,873
 100d25c:	0100d358 	cmpnei	r4,zero,845
 100d260:	0100d358 	cmpnei	r4,zero,845
 100d264:	0100d358 	cmpnei	r4,zero,845
 100d268:	0100d358 	cmpnei	r4,zero,845
 100d26c:	0100d358 	cmpnei	r4,zero,845
 100d270:	0100d358 	cmpnei	r4,zero,845
 100d274:	0100d358 	cmpnei	r4,zero,845
 100d278:	0100d358 	cmpnei	r4,zero,845
 100d27c:	0100d358 	cmpnei	r4,zero,845
 100d280:	0100d358 	cmpnei	r4,zero,845
 100d284:	0100d7c0 	call	100d7c <__alt_mem_onchip+0x100d7c>
 100d288:	0100d358 	cmpnei	r4,zero,845
 100d28c:	0100d358 	cmpnei	r4,zero,845
 100d290:	0100d358 	cmpnei	r4,zero,845
 100d294:	0100d358 	cmpnei	r4,zero,845
 100d298:	0100d358 	cmpnei	r4,zero,845
 100d29c:	0100d358 	cmpnei	r4,zero,845
 100d2a0:	0100d358 	cmpnei	r4,zero,845
 100d2a4:	0100d358 	cmpnei	r4,zero,845
 100d2a8:	0100d358 	cmpnei	r4,zero,845
 100d2ac:	0100d358 	cmpnei	r4,zero,845
 100d2b0:	0100d874 	movhi	r4,865
 100d2b4:	0100d358 	cmpnei	r4,zero,845
 100d2b8:	0100d358 	cmpnei	r4,zero,845
 100d2bc:	0100d358 	cmpnei	r4,zero,845
 100d2c0:	0100d358 	cmpnei	r4,zero,845
 100d2c4:	0100d358 	cmpnei	r4,zero,845
 100d2c8:	0100d8c0 	call	100d8c <__alt_mem_onchip+0x100d8c>
 100d2cc:	0100d358 	cmpnei	r4,zero,845
 100d2d0:	0100d358 	cmpnei	r4,zero,845
 100d2d4:	0100dbb0 	cmpltui	r4,zero,878
 100d2d8:	0100d358 	cmpnei	r4,zero,845
 100d2dc:	0100d358 	cmpnei	r4,zero,845
 100d2e0:	0100d358 	cmpnei	r4,zero,845
 100d2e4:	0100d358 	cmpnei	r4,zero,845
 100d2e8:	0100d358 	cmpnei	r4,zero,845
 100d2ec:	0100d358 	cmpnei	r4,zero,845
 100d2f0:	0100d358 	cmpnei	r4,zero,845
 100d2f4:	0100d358 	cmpnei	r4,zero,845
 100d2f8:	0100d358 	cmpnei	r4,zero,845
 100d2fc:	0100d358 	cmpnei	r4,zero,845
 100d300:	0100db88 	cmpgei	r4,zero,878
 100d304:	0100d7cc 	andi	r4,zero,863
 100d308:	0100d358 	cmpnei	r4,zero,845
 100d30c:	0100d358 	cmpnei	r4,zero,845
 100d310:	0100d358 	cmpnei	r4,zero,845
 100d314:	0100dc94 	movui	r4,882
 100d318:	0100d7cc 	andi	r4,zero,863
 100d31c:	0100d358 	cmpnei	r4,zero,845
 100d320:	0100d358 	cmpnei	r4,zero,845
 100d324:	0100dbe8 	cmpgeui	r4,zero,879
 100d328:	0100d358 	cmpnei	r4,zero,845
 100d32c:	0100dbc0 	call	100dbc <__alt_mem_onchip+0x100dbc>
 100d330:	0100d880 	call	100d88 <__alt_mem_onchip+0x100d88>
 100d334:	0100dc50 	cmplti	r4,zero,881
 100d338:	0100dca8 	cmpgeui	r4,zero,882
 100d33c:	0100d358 	cmpnei	r4,zero,845
 100d340:	0100dc04 	movi	r4,880
 100d344:	0100d358 	cmpnei	r4,zero,845
 100d348:	0100d8cc 	andi	r4,zero,867
 100d34c:	0100d358 	cmpnei	r4,zero,845
 100d350:	0100d358 	cmpnei	r4,zero,845
 100d354:	0100db28 	cmpgeui	r4,zero,876
 100d358:	2800c226 	beq	r5,zero,100d664 <___vfiprintf_internal_r+0x670>
 100d35c:	07000044 	movi	fp,1
 100d360:	d9000404 	addi	r4,sp,16
 100d364:	d9c13515 	stw	r7,1236(sp)
 100d368:	d9013c15 	stw	r4,1264(sp)
 100d36c:	df013715 	stw	fp,1244(sp)
 100d370:	d9400405 	stb	r5,16(sp)
 100d374:	d8000005 	stb	zero,0(sp)
 100d378:	d8013815 	stw	zero,1248(sp)
 100d37c:	d9813b17 	ldw	r6,1260(sp)
 100d380:	3080008c 	andi	r2,r6,2
 100d384:	1005003a 	cmpeq	r2,r2,zero
 100d388:	d8813e15 	stw	r2,1272(sp)
 100d38c:	1000011e 	bne	r2,zero,100d394 <___vfiprintf_internal_r+0x3a0>
 100d390:	e7000084 	addi	fp,fp,2
 100d394:	d8813b17 	ldw	r2,1260(sp)
 100d398:	1080210c 	andi	r2,r2,132
 100d39c:	d8813d15 	stw	r2,1268(sp)
 100d3a0:	10002a1e 	bne	r2,zero,100d44c <___vfiprintf_internal_r+0x458>
 100d3a4:	d8c13917 	ldw	r3,1252(sp)
 100d3a8:	1f21c83a 	sub	r16,r3,fp
 100d3ac:	0400270e 	bge	zero,r16,100d44c <___vfiprintf_internal_r+0x458>
 100d3b0:	00800404 	movi	r2,16
 100d3b4:	1402c80e 	bge	r2,r16,100ded8 <___vfiprintf_internal_r+0xee4>
 100d3b8:	d9400317 	ldw	r5,12(sp)
 100d3bc:	d9000217 	ldw	r4,8(sp)
 100d3c0:	1023883a 	mov	r17,r2
 100d3c4:	05c04074 	movhi	r23,257
 100d3c8:	bdd49604 	addi	r23,r23,21080
 100d3cc:	04c001c4 	movi	r19,7
 100d3d0:	00000306 	br	100d3e0 <___vfiprintf_internal_r+0x3ec>
 100d3d4:	843ffc04 	addi	r16,r16,-16
 100d3d8:	94800204 	addi	r18,r18,8
 100d3dc:	8c00110e 	bge	r17,r16,100d424 <___vfiprintf_internal_r+0x430>
 100d3e0:	29400404 	addi	r5,r5,16
 100d3e4:	21000044 	addi	r4,r4,1
 100d3e8:	95c00015 	stw	r23,0(r18)
 100d3ec:	94400115 	stw	r17,4(r18)
 100d3f0:	d9400315 	stw	r5,12(sp)
 100d3f4:	d9000215 	stw	r4,8(sp)
 100d3f8:	993ff60e 	bge	r19,r4,100d3d4 <___vfiprintf_internal_r+0x3e0>
 100d3fc:	b009883a 	mov	r4,r22
 100d400:	a80b883a 	mov	r5,r21
 100d404:	d9800104 	addi	r6,sp,4
 100d408:	100cf9c0 	call	100cf9c <__sprint_r>
 100d40c:	1000981e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d410:	843ffc04 	addi	r16,r16,-16
 100d414:	d9400317 	ldw	r5,12(sp)
 100d418:	d9000217 	ldw	r4,8(sp)
 100d41c:	dc800e04 	addi	r18,sp,56
 100d420:	8c3fef16 	blt	r17,r16,100d3e0 <___vfiprintf_internal_r+0x3ec>
 100d424:	2c0b883a 	add	r5,r5,r16
 100d428:	21000044 	addi	r4,r4,1
 100d42c:	008001c4 	movi	r2,7
 100d430:	95c00015 	stw	r23,0(r18)
 100d434:	94000115 	stw	r16,4(r18)
 100d438:	d9400315 	stw	r5,12(sp)
 100d43c:	d9000215 	stw	r4,8(sp)
 100d440:	11015616 	blt	r2,r4,100d99c <___vfiprintf_internal_r+0x9a8>
 100d444:	94800204 	addi	r18,r18,8
 100d448:	00000206 	br	100d454 <___vfiprintf_internal_r+0x460>
 100d44c:	d9400317 	ldw	r5,12(sp)
 100d450:	d9000217 	ldw	r4,8(sp)
 100d454:	d8800007 	ldb	r2,0(sp)
 100d458:	10000a26 	beq	r2,zero,100d484 <___vfiprintf_internal_r+0x490>
 100d45c:	00800044 	movi	r2,1
 100d460:	29400044 	addi	r5,r5,1
 100d464:	21000044 	addi	r4,r4,1
 100d468:	90800115 	stw	r2,4(r18)
 100d46c:	008001c4 	movi	r2,7
 100d470:	96c00015 	stw	sp,0(r18)
 100d474:	d9400315 	stw	r5,12(sp)
 100d478:	d9000215 	stw	r4,8(sp)
 100d47c:	11013516 	blt	r2,r4,100d954 <___vfiprintf_internal_r+0x960>
 100d480:	94800204 	addi	r18,r18,8
 100d484:	d9813e17 	ldw	r6,1272(sp)
 100d488:	30000b1e 	bne	r6,zero,100d4b8 <___vfiprintf_internal_r+0x4c4>
 100d48c:	d8800044 	addi	r2,sp,1
 100d490:	29400084 	addi	r5,r5,2
 100d494:	21000044 	addi	r4,r4,1
 100d498:	90800015 	stw	r2,0(r18)
 100d49c:	00c00084 	movi	r3,2
 100d4a0:	008001c4 	movi	r2,7
 100d4a4:	90c00115 	stw	r3,4(r18)
 100d4a8:	d9400315 	stw	r5,12(sp)
 100d4ac:	d9000215 	stw	r4,8(sp)
 100d4b0:	11013116 	blt	r2,r4,100d978 <___vfiprintf_internal_r+0x984>
 100d4b4:	94800204 	addi	r18,r18,8
 100d4b8:	d8c13d17 	ldw	r3,1268(sp)
 100d4bc:	00802004 	movi	r2,128
 100d4c0:	18807126 	beq	r3,r2,100d688 <___vfiprintf_internal_r+0x694>
 100d4c4:	d8813817 	ldw	r2,1248(sp)
 100d4c8:	d8c13717 	ldw	r3,1244(sp)
 100d4cc:	10e1c83a 	sub	r16,r2,r3
 100d4d0:	0400240e 	bge	zero,r16,100d564 <___vfiprintf_internal_r+0x570>
 100d4d4:	00800404 	movi	r2,16
 100d4d8:	1402510e 	bge	r2,r16,100de20 <___vfiprintf_internal_r+0xe2c>
 100d4dc:	1023883a 	mov	r17,r2
 100d4e0:	05c04074 	movhi	r23,257
 100d4e4:	bdd49204 	addi	r23,r23,21064
 100d4e8:	04c001c4 	movi	r19,7
 100d4ec:	00000306 	br	100d4fc <___vfiprintf_internal_r+0x508>
 100d4f0:	843ffc04 	addi	r16,r16,-16
 100d4f4:	94800204 	addi	r18,r18,8
 100d4f8:	8c00110e 	bge	r17,r16,100d540 <___vfiprintf_internal_r+0x54c>
 100d4fc:	29400404 	addi	r5,r5,16
 100d500:	21000044 	addi	r4,r4,1
 100d504:	95c00015 	stw	r23,0(r18)
 100d508:	94400115 	stw	r17,4(r18)
 100d50c:	d9400315 	stw	r5,12(sp)
 100d510:	d9000215 	stw	r4,8(sp)
 100d514:	993ff60e 	bge	r19,r4,100d4f0 <___vfiprintf_internal_r+0x4fc>
 100d518:	b009883a 	mov	r4,r22
 100d51c:	a80b883a 	mov	r5,r21
 100d520:	d9800104 	addi	r6,sp,4
 100d524:	100cf9c0 	call	100cf9c <__sprint_r>
 100d528:	1000511e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d52c:	843ffc04 	addi	r16,r16,-16
 100d530:	d9400317 	ldw	r5,12(sp)
 100d534:	d9000217 	ldw	r4,8(sp)
 100d538:	dc800e04 	addi	r18,sp,56
 100d53c:	8c3fef16 	blt	r17,r16,100d4fc <___vfiprintf_internal_r+0x508>
 100d540:	2c0b883a 	add	r5,r5,r16
 100d544:	21000044 	addi	r4,r4,1
 100d548:	008001c4 	movi	r2,7
 100d54c:	95c00015 	stw	r23,0(r18)
 100d550:	94000115 	stw	r16,4(r18)
 100d554:	d9400315 	stw	r5,12(sp)
 100d558:	d9000215 	stw	r4,8(sp)
 100d55c:	1100eb16 	blt	r2,r4,100d90c <___vfiprintf_internal_r+0x918>
 100d560:	94800204 	addi	r18,r18,8
 100d564:	d9813717 	ldw	r6,1244(sp)
 100d568:	d8813c17 	ldw	r2,1264(sp)
 100d56c:	21000044 	addi	r4,r4,1
 100d570:	298b883a 	add	r5,r5,r6
 100d574:	90800015 	stw	r2,0(r18)
 100d578:	008001c4 	movi	r2,7
 100d57c:	91800115 	stw	r6,4(r18)
 100d580:	d9400315 	stw	r5,12(sp)
 100d584:	d9000215 	stw	r4,8(sp)
 100d588:	11006b16 	blt	r2,r4,100d738 <___vfiprintf_internal_r+0x744>
 100d58c:	90c00204 	addi	r3,r18,8
 100d590:	d9013b17 	ldw	r4,1260(sp)
 100d594:	2080010c 	andi	r2,r4,4
 100d598:	10002726 	beq	r2,zero,100d638 <___vfiprintf_internal_r+0x644>
 100d59c:	d9813917 	ldw	r6,1252(sp)
 100d5a0:	3721c83a 	sub	r16,r6,fp
 100d5a4:	0400240e 	bge	zero,r16,100d638 <___vfiprintf_internal_r+0x644>
 100d5a8:	00800404 	movi	r2,16
 100d5ac:	1402720e 	bge	r2,r16,100df78 <___vfiprintf_internal_r+0xf84>
 100d5b0:	d9000217 	ldw	r4,8(sp)
 100d5b4:	1023883a 	mov	r17,r2
 100d5b8:	05c04074 	movhi	r23,257
 100d5bc:	bdd49604 	addi	r23,r23,21080
 100d5c0:	048001c4 	movi	r18,7
 100d5c4:	00000306 	br	100d5d4 <___vfiprintf_internal_r+0x5e0>
 100d5c8:	843ffc04 	addi	r16,r16,-16
 100d5cc:	18c00204 	addi	r3,r3,8
 100d5d0:	8c00110e 	bge	r17,r16,100d618 <___vfiprintf_internal_r+0x624>
 100d5d4:	29400404 	addi	r5,r5,16
 100d5d8:	21000044 	addi	r4,r4,1
 100d5dc:	1dc00015 	stw	r23,0(r3)
 100d5e0:	1c400115 	stw	r17,4(r3)
 100d5e4:	d9400315 	stw	r5,12(sp)
 100d5e8:	d9000215 	stw	r4,8(sp)
 100d5ec:	913ff60e 	bge	r18,r4,100d5c8 <___vfiprintf_internal_r+0x5d4>
 100d5f0:	b009883a 	mov	r4,r22
 100d5f4:	a80b883a 	mov	r5,r21
 100d5f8:	d9800104 	addi	r6,sp,4
 100d5fc:	100cf9c0 	call	100cf9c <__sprint_r>
 100d600:	10001b1e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d604:	843ffc04 	addi	r16,r16,-16
 100d608:	d9400317 	ldw	r5,12(sp)
 100d60c:	d9000217 	ldw	r4,8(sp)
 100d610:	d8c00e04 	addi	r3,sp,56
 100d614:	8c3fef16 	blt	r17,r16,100d5d4 <___vfiprintf_internal_r+0x5e0>
 100d618:	2c0b883a 	add	r5,r5,r16
 100d61c:	21000044 	addi	r4,r4,1
 100d620:	008001c4 	movi	r2,7
 100d624:	1dc00015 	stw	r23,0(r3)
 100d628:	1c000115 	stw	r16,4(r3)
 100d62c:	d9400315 	stw	r5,12(sp)
 100d630:	d9000215 	stw	r4,8(sp)
 100d634:	11005b16 	blt	r2,r4,100d7a4 <___vfiprintf_internal_r+0x7b0>
 100d638:	d8813917 	ldw	r2,1252(sp)
 100d63c:	1700010e 	bge	r2,fp,100d644 <___vfiprintf_internal_r+0x650>
 100d640:	e005883a 	mov	r2,fp
 100d644:	d8c13a17 	ldw	r3,1256(sp)
 100d648:	1887883a 	add	r3,r3,r2
 100d64c:	d8c13a15 	stw	r3,1256(sp)
 100d650:	2800411e 	bne	r5,zero,100d758 <___vfiprintf_internal_r+0x764>
 100d654:	d9c13517 	ldw	r7,1236(sp)
 100d658:	dc800e04 	addi	r18,sp,56
 100d65c:	d8000215 	stw	zero,8(sp)
 100d660:	003eb506 	br	100d138 <___vfiprintf_internal_r+0x144>
 100d664:	d8800317 	ldw	r2,12(sp)
 100d668:	1002521e 	bne	r2,zero,100dfb4 <___vfiprintf_internal_r+0xfc0>
 100d66c:	d8000215 	stw	zero,8(sp)
 100d670:	a880030b 	ldhu	r2,12(r21)
 100d674:	1080100c 	andi	r2,r2,64
 100d678:	103e9a26 	beq	r2,zero,100d0e4 <___vfiprintf_internal_r+0xf0>
 100d67c:	013fffc4 	movi	r4,-1
 100d680:	d9013a15 	stw	r4,1256(sp)
 100d684:	003e9706 	br	100d0e4 <___vfiprintf_internal_r+0xf0>
 100d688:	d9813917 	ldw	r6,1252(sp)
 100d68c:	3721c83a 	sub	r16,r6,fp
 100d690:	043f8c0e 	bge	zero,r16,100d4c4 <___vfiprintf_internal_r+0x4d0>
 100d694:	00800404 	movi	r2,16
 100d698:	14024c0e 	bge	r2,r16,100dfcc <___vfiprintf_internal_r+0xfd8>
 100d69c:	1023883a 	mov	r17,r2
 100d6a0:	05c04074 	movhi	r23,257
 100d6a4:	bdd49204 	addi	r23,r23,21064
 100d6a8:	04c001c4 	movi	r19,7
 100d6ac:	00000306 	br	100d6bc <___vfiprintf_internal_r+0x6c8>
 100d6b0:	843ffc04 	addi	r16,r16,-16
 100d6b4:	94800204 	addi	r18,r18,8
 100d6b8:	8c00110e 	bge	r17,r16,100d700 <___vfiprintf_internal_r+0x70c>
 100d6bc:	29400404 	addi	r5,r5,16
 100d6c0:	21000044 	addi	r4,r4,1
 100d6c4:	95c00015 	stw	r23,0(r18)
 100d6c8:	94400115 	stw	r17,4(r18)
 100d6cc:	d9400315 	stw	r5,12(sp)
 100d6d0:	d9000215 	stw	r4,8(sp)
 100d6d4:	993ff60e 	bge	r19,r4,100d6b0 <___vfiprintf_internal_r+0x6bc>
 100d6d8:	b009883a 	mov	r4,r22
 100d6dc:	a80b883a 	mov	r5,r21
 100d6e0:	d9800104 	addi	r6,sp,4
 100d6e4:	100cf9c0 	call	100cf9c <__sprint_r>
 100d6e8:	103fe11e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d6ec:	843ffc04 	addi	r16,r16,-16
 100d6f0:	d9400317 	ldw	r5,12(sp)
 100d6f4:	d9000217 	ldw	r4,8(sp)
 100d6f8:	dc800e04 	addi	r18,sp,56
 100d6fc:	8c3fef16 	blt	r17,r16,100d6bc <___vfiprintf_internal_r+0x6c8>
 100d700:	2c0b883a 	add	r5,r5,r16
 100d704:	21000044 	addi	r4,r4,1
 100d708:	008001c4 	movi	r2,7
 100d70c:	95c00015 	stw	r23,0(r18)
 100d710:	94000115 	stw	r16,4(r18)
 100d714:	d9400315 	stw	r5,12(sp)
 100d718:	d9000215 	stw	r4,8(sp)
 100d71c:	1100a816 	blt	r2,r4,100d9c0 <___vfiprintf_internal_r+0x9cc>
 100d720:	94800204 	addi	r18,r18,8
 100d724:	003f6706 	br	100d4c4 <___vfiprintf_internal_r+0x4d0>
 100d728:	d9c13f15 	stw	r7,1276(sp)
 100d72c:	100a1ec0 	call	100a1ec <__sinit>
 100d730:	d9c13f17 	ldw	r7,1276(sp)
 100d734:	003e4006 	br	100d038 <___vfiprintf_internal_r+0x44>
 100d738:	b009883a 	mov	r4,r22
 100d73c:	a80b883a 	mov	r5,r21
 100d740:	d9800104 	addi	r6,sp,4
 100d744:	100cf9c0 	call	100cf9c <__sprint_r>
 100d748:	103fc91e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d74c:	d9400317 	ldw	r5,12(sp)
 100d750:	d8c00e04 	addi	r3,sp,56
 100d754:	003f8e06 	br	100d590 <___vfiprintf_internal_r+0x59c>
 100d758:	b009883a 	mov	r4,r22
 100d75c:	a80b883a 	mov	r5,r21
 100d760:	d9800104 	addi	r6,sp,4
 100d764:	100cf9c0 	call	100cf9c <__sprint_r>
 100d768:	103fba26 	beq	r2,zero,100d654 <___vfiprintf_internal_r+0x660>
 100d76c:	003fc006 	br	100d670 <___vfiprintf_internal_r+0x67c>
 100d770:	b009883a 	mov	r4,r22
 100d774:	a80b883a 	mov	r5,r21
 100d778:	d9c13f15 	stw	r7,1276(sp)
 100d77c:	10084800 	call	1008480 <__swsetup_r>
 100d780:	d9c13f17 	ldw	r7,1276(sp)
 100d784:	103e3126 	beq	r2,zero,100d04c <___vfiprintf_internal_r+0x58>
 100d788:	003fbc06 	br	100d67c <___vfiprintf_internal_r+0x688>
 100d78c:	00bfffc4 	movi	r2,-1
 100d790:	d8813a15 	stw	r2,1256(sp)
 100d794:	d880210b 	ldhu	r2,132(sp)
 100d798:	1080100c 	andi	r2,r2,64
 100d79c:	103e4e1e 	bne	r2,zero,100d0d8 <___vfiprintf_internal_r+0xe4>
 100d7a0:	003e5006 	br	100d0e4 <___vfiprintf_internal_r+0xf0>
 100d7a4:	b009883a 	mov	r4,r22
 100d7a8:	a80b883a 	mov	r5,r21
 100d7ac:	d9800104 	addi	r6,sp,4
 100d7b0:	100cf9c0 	call	100cf9c <__sprint_r>
 100d7b4:	103fae1e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d7b8:	d9400317 	ldw	r5,12(sp)
 100d7bc:	003f9e06 	br	100d638 <___vfiprintf_internal_r+0x644>
 100d7c0:	d8813b17 	ldw	r2,1260(sp)
 100d7c4:	10800414 	ori	r2,r2,16
 100d7c8:	d8813b15 	stw	r2,1260(sp)
 100d7cc:	d8c13b17 	ldw	r3,1260(sp)
 100d7d0:	1880080c 	andi	r2,r3,32
 100d7d4:	10009c1e 	bne	r2,zero,100da48 <___vfiprintf_internal_r+0xa54>
 100d7d8:	d9413b17 	ldw	r5,1260(sp)
 100d7dc:	2880040c 	andi	r2,r5,16
 100d7e0:	1001b21e 	bne	r2,zero,100deac <___vfiprintf_internal_r+0xeb8>
 100d7e4:	d9813b17 	ldw	r6,1260(sp)
 100d7e8:	3080100c 	andi	r2,r6,64
 100d7ec:	1001af26 	beq	r2,zero,100deac <___vfiprintf_internal_r+0xeb8>
 100d7f0:	3880000f 	ldh	r2,0(r7)
 100d7f4:	39c00104 	addi	r7,r7,4
 100d7f8:	d9c13515 	stw	r7,1236(sp)
 100d7fc:	1023d7fa 	srai	r17,r2,31
 100d800:	1021883a 	mov	r16,r2
 100d804:	8801e016 	blt	r17,zero,100df88 <___vfiprintf_internal_r+0xf94>
 100d808:	01000044 	movi	r4,1
 100d80c:	b8000416 	blt	r23,zero,100d820 <___vfiprintf_internal_r+0x82c>
 100d810:	d9413b17 	ldw	r5,1260(sp)
 100d814:	00bfdfc4 	movi	r2,-129
 100d818:	288a703a 	and	r5,r5,r2
 100d81c:	d9413b15 	stw	r5,1260(sp)
 100d820:	8444b03a 	or	r2,r16,r17
 100d824:	1001271e 	bne	r2,zero,100dcc4 <___vfiprintf_internal_r+0xcd0>
 100d828:	b801261e 	bne	r23,zero,100dcc4 <___vfiprintf_internal_r+0xcd0>
 100d82c:	20803fcc 	andi	r2,r4,255
 100d830:	10017e26 	beq	r2,zero,100de2c <___vfiprintf_internal_r+0xe38>
 100d834:	d8c00e04 	addi	r3,sp,56
 100d838:	df000404 	addi	fp,sp,16
 100d83c:	d8c13c15 	stw	r3,1264(sp)
 100d840:	d8c13c17 	ldw	r3,1264(sp)
 100d844:	ddc13815 	stw	r23,1248(sp)
 100d848:	e0c5c83a 	sub	r2,fp,r3
 100d84c:	10800a04 	addi	r2,r2,40
 100d850:	d8813715 	stw	r2,1244(sp)
 100d854:	df013817 	ldw	fp,1248(sp)
 100d858:	d9413717 	ldw	r5,1244(sp)
 100d85c:	e140010e 	bge	fp,r5,100d864 <___vfiprintf_internal_r+0x870>
 100d860:	2839883a 	mov	fp,r5
 100d864:	d8800007 	ldb	r2,0(sp)
 100d868:	103ec426 	beq	r2,zero,100d37c <___vfiprintf_internal_r+0x388>
 100d86c:	e7000044 	addi	fp,fp,1
 100d870:	003ec206 	br	100d37c <___vfiprintf_internal_r+0x388>
 100d874:	d9813b17 	ldw	r6,1260(sp)
 100d878:	31800414 	ori	r6,r6,16
 100d87c:	d9813b15 	stw	r6,1260(sp)
 100d880:	d8c13b17 	ldw	r3,1260(sp)
 100d884:	1880080c 	andi	r2,r3,32
 100d888:	1000681e 	bne	r2,zero,100da2c <___vfiprintf_internal_r+0xa38>
 100d88c:	d9413b17 	ldw	r5,1260(sp)
 100d890:	2880040c 	andi	r2,r5,16
 100d894:	1001771e 	bne	r2,zero,100de74 <___vfiprintf_internal_r+0xe80>
 100d898:	d9813b17 	ldw	r6,1260(sp)
 100d89c:	3080100c 	andi	r2,r6,64
 100d8a0:	10017426 	beq	r2,zero,100de74 <___vfiprintf_internal_r+0xe80>
 100d8a4:	3c00000b 	ldhu	r16,0(r7)
 100d8a8:	0009883a 	mov	r4,zero
 100d8ac:	39c00104 	addi	r7,r7,4
 100d8b0:	0023883a 	mov	r17,zero
 100d8b4:	d9c13515 	stw	r7,1236(sp)
 100d8b8:	d8000005 	stb	zero,0(sp)
 100d8bc:	003fd306 	br	100d80c <___vfiprintf_internal_r+0x818>
 100d8c0:	d8813b17 	ldw	r2,1260(sp)
 100d8c4:	10800414 	ori	r2,r2,16
 100d8c8:	d8813b15 	stw	r2,1260(sp)
 100d8cc:	d8c13b17 	ldw	r3,1260(sp)
 100d8d0:	1880080c 	andi	r2,r3,32
 100d8d4:	10004e1e 	bne	r2,zero,100da10 <___vfiprintf_internal_r+0xa1c>
 100d8d8:	d9413b17 	ldw	r5,1260(sp)
 100d8dc:	2880040c 	andi	r2,r5,16
 100d8e0:	10016b1e 	bne	r2,zero,100de90 <___vfiprintf_internal_r+0xe9c>
 100d8e4:	d9813b17 	ldw	r6,1260(sp)
 100d8e8:	3080100c 	andi	r2,r6,64
 100d8ec:	10016826 	beq	r2,zero,100de90 <___vfiprintf_internal_r+0xe9c>
 100d8f0:	3c00000b 	ldhu	r16,0(r7)
 100d8f4:	01000044 	movi	r4,1
 100d8f8:	39c00104 	addi	r7,r7,4
 100d8fc:	0023883a 	mov	r17,zero
 100d900:	d9c13515 	stw	r7,1236(sp)
 100d904:	d8000005 	stb	zero,0(sp)
 100d908:	003fc006 	br	100d80c <___vfiprintf_internal_r+0x818>
 100d90c:	b009883a 	mov	r4,r22
 100d910:	a80b883a 	mov	r5,r21
 100d914:	d9800104 	addi	r6,sp,4
 100d918:	100cf9c0 	call	100cf9c <__sprint_r>
 100d91c:	103f541e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d920:	d9400317 	ldw	r5,12(sp)
 100d924:	d9000217 	ldw	r4,8(sp)
 100d928:	dc800e04 	addi	r18,sp,56
 100d92c:	003f0d06 	br	100d564 <___vfiprintf_internal_r+0x570>
 100d930:	b009883a 	mov	r4,r22
 100d934:	a80b883a 	mov	r5,r21
 100d938:	d9800104 	addi	r6,sp,4
 100d93c:	d9c13f15 	stw	r7,1276(sp)
 100d940:	100cf9c0 	call	100cf9c <__sprint_r>
 100d944:	d9c13f17 	ldw	r7,1276(sp)
 100d948:	103f491e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d94c:	dc800e04 	addi	r18,sp,56
 100d950:	003e1006 	br	100d194 <___vfiprintf_internal_r+0x1a0>
 100d954:	b009883a 	mov	r4,r22
 100d958:	a80b883a 	mov	r5,r21
 100d95c:	d9800104 	addi	r6,sp,4
 100d960:	100cf9c0 	call	100cf9c <__sprint_r>
 100d964:	103f421e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d968:	d9400317 	ldw	r5,12(sp)
 100d96c:	d9000217 	ldw	r4,8(sp)
 100d970:	dc800e04 	addi	r18,sp,56
 100d974:	003ec306 	br	100d484 <___vfiprintf_internal_r+0x490>
 100d978:	b009883a 	mov	r4,r22
 100d97c:	a80b883a 	mov	r5,r21
 100d980:	d9800104 	addi	r6,sp,4
 100d984:	100cf9c0 	call	100cf9c <__sprint_r>
 100d988:	103f391e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d98c:	d9400317 	ldw	r5,12(sp)
 100d990:	d9000217 	ldw	r4,8(sp)
 100d994:	dc800e04 	addi	r18,sp,56
 100d998:	003ec706 	br	100d4b8 <___vfiprintf_internal_r+0x4c4>
 100d99c:	b009883a 	mov	r4,r22
 100d9a0:	a80b883a 	mov	r5,r21
 100d9a4:	d9800104 	addi	r6,sp,4
 100d9a8:	100cf9c0 	call	100cf9c <__sprint_r>
 100d9ac:	103f301e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d9b0:	d9400317 	ldw	r5,12(sp)
 100d9b4:	d9000217 	ldw	r4,8(sp)
 100d9b8:	dc800e04 	addi	r18,sp,56
 100d9bc:	003ea506 	br	100d454 <___vfiprintf_internal_r+0x460>
 100d9c0:	b009883a 	mov	r4,r22
 100d9c4:	a80b883a 	mov	r5,r21
 100d9c8:	d9800104 	addi	r6,sp,4
 100d9cc:	100cf9c0 	call	100cf9c <__sprint_r>
 100d9d0:	103f271e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100d9d4:	d9400317 	ldw	r5,12(sp)
 100d9d8:	d9000217 	ldw	r4,8(sp)
 100d9dc:	dc800e04 	addi	r18,sp,56
 100d9e0:	003eb806 	br	100d4c4 <___vfiprintf_internal_r+0x4d0>
 100d9e4:	38c00017 	ldw	r3,0(r7)
 100d9e8:	39c00104 	addi	r7,r7,4
 100d9ec:	d8c13915 	stw	r3,1252(sp)
 100d9f0:	1800b20e 	bge	r3,zero,100dcbc <___vfiprintf_internal_r+0xcc8>
 100d9f4:	00c7c83a 	sub	r3,zero,r3
 100d9f8:	d8c13915 	stw	r3,1252(sp)
 100d9fc:	d9013b17 	ldw	r4,1260(sp)
 100da00:	a0c00007 	ldb	r3,0(r20)
 100da04:	21000114 	ori	r4,r4,4
 100da08:	d9013b15 	stw	r4,1260(sp)
 100da0c:	003ded06 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100da10:	3c000017 	ldw	r16,0(r7)
 100da14:	3c400117 	ldw	r17,4(r7)
 100da18:	39000204 	addi	r4,r7,8
 100da1c:	d9013515 	stw	r4,1236(sp)
 100da20:	01000044 	movi	r4,1
 100da24:	d8000005 	stb	zero,0(sp)
 100da28:	003f7806 	br	100d80c <___vfiprintf_internal_r+0x818>
 100da2c:	3c000017 	ldw	r16,0(r7)
 100da30:	3c400117 	ldw	r17,4(r7)
 100da34:	39000204 	addi	r4,r7,8
 100da38:	d9013515 	stw	r4,1236(sp)
 100da3c:	0009883a 	mov	r4,zero
 100da40:	d8000005 	stb	zero,0(sp)
 100da44:	003f7106 	br	100d80c <___vfiprintf_internal_r+0x818>
 100da48:	3c000017 	ldw	r16,0(r7)
 100da4c:	3c400117 	ldw	r17,4(r7)
 100da50:	39000204 	addi	r4,r7,8
 100da54:	d9013515 	stw	r4,1236(sp)
 100da58:	003f6a06 	br	100d804 <___vfiprintf_internal_r+0x810>
 100da5c:	d8800007 	ldb	r2,0(sp)
 100da60:	1000961e 	bne	r2,zero,100dcbc <___vfiprintf_internal_r+0xcc8>
 100da64:	00800804 	movi	r2,32
 100da68:	d8800005 	stb	r2,0(sp)
 100da6c:	a0c00007 	ldb	r3,0(r20)
 100da70:	003dd406 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100da74:	0007883a 	mov	r3,zero
 100da78:	01000244 	movi	r4,9
 100da7c:	188002a4 	muli	r2,r3,10
 100da80:	2885883a 	add	r2,r5,r2
 100da84:	a1400007 	ldb	r5,0(r20)
 100da88:	10fff404 	addi	r3,r2,-48
 100da8c:	a5000044 	addi	r20,r20,1
 100da90:	28bff404 	addi	r2,r5,-48
 100da94:	20bff92e 	bgeu	r4,r2,100da7c <___vfiprintf_internal_r+0xa88>
 100da98:	d8c13915 	stw	r3,1252(sp)
 100da9c:	003dcb06 	br	100d1cc <___vfiprintf_internal_r+0x1d8>
 100daa0:	d9413b17 	ldw	r5,1260(sp)
 100daa4:	a0c00007 	ldb	r3,0(r20)
 100daa8:	29402014 	ori	r5,r5,128
 100daac:	d9413b15 	stw	r5,1260(sp)
 100dab0:	003dc406 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dab4:	a0c00007 	ldb	r3,0(r20)
 100dab8:	00800a84 	movi	r2,42
 100dabc:	a5000044 	addi	r20,r20,1
 100dac0:	18816f26 	beq	r3,r2,100e080 <___vfiprintf_internal_r+0x108c>
 100dac4:	180b883a 	mov	r5,r3
 100dac8:	18bff404 	addi	r2,r3,-48
 100dacc:	00c00244 	movi	r3,9
 100dad0:	18816936 	bltu	r3,r2,100e078 <___vfiprintf_internal_r+0x1084>
 100dad4:	000d883a 	mov	r6,zero
 100dad8:	308002a4 	muli	r2,r6,10
 100dadc:	1145883a 	add	r2,r2,r5
 100dae0:	a1400007 	ldb	r5,0(r20)
 100dae4:	11bff404 	addi	r6,r2,-48
 100dae8:	a5000044 	addi	r20,r20,1
 100daec:	28bff404 	addi	r2,r5,-48
 100daf0:	18bff92e 	bgeu	r3,r2,100dad8 <___vfiprintf_internal_r+0xae4>
 100daf4:	302f883a 	mov	r23,r6
 100daf8:	303db40e 	bge	r6,zero,100d1cc <___vfiprintf_internal_r+0x1d8>
 100dafc:	05ffffc4 	movi	r23,-1
 100db00:	003db206 	br	100d1cc <___vfiprintf_internal_r+0x1d8>
 100db04:	d8813b17 	ldw	r2,1260(sp)
 100db08:	a0c00007 	ldb	r3,0(r20)
 100db0c:	10800054 	ori	r2,r2,1
 100db10:	d8813b15 	stw	r2,1260(sp)
 100db14:	003dab06 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100db18:	00800ac4 	movi	r2,43
 100db1c:	d8800005 	stb	r2,0(sp)
 100db20:	a0c00007 	ldb	r3,0(r20)
 100db24:	003da706 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100db28:	01804074 	movhi	r6,257
 100db2c:	31941504 	addi	r6,r6,20564
 100db30:	d9813615 	stw	r6,1240(sp)
 100db34:	d8c13b17 	ldw	r3,1260(sp)
 100db38:	1880080c 	andi	r2,r3,32
 100db3c:	1000c226 	beq	r2,zero,100de48 <___vfiprintf_internal_r+0xe54>
 100db40:	3c000017 	ldw	r16,0(r7)
 100db44:	3c400117 	ldw	r17,4(r7)
 100db48:	39000204 	addi	r4,r7,8
 100db4c:	d9013515 	stw	r4,1236(sp)
 100db50:	d9013b17 	ldw	r4,1260(sp)
 100db54:	2080004c 	andi	r2,r4,1
 100db58:	1005003a 	cmpeq	r2,r2,zero
 100db5c:	1000931e 	bne	r2,zero,100ddac <___vfiprintf_internal_r+0xdb8>
 100db60:	8444b03a 	or	r2,r16,r17
 100db64:	10009126 	beq	r2,zero,100ddac <___vfiprintf_internal_r+0xdb8>
 100db68:	21000094 	ori	r4,r4,2
 100db6c:	d9013b15 	stw	r4,1260(sp)
 100db70:	00800c04 	movi	r2,48
 100db74:	01000084 	movi	r4,2
 100db78:	d8800045 	stb	r2,1(sp)
 100db7c:	d9400085 	stb	r5,2(sp)
 100db80:	d8000005 	stb	zero,0(sp)
 100db84:	003f2106 	br	100d80c <___vfiprintf_internal_r+0x818>
 100db88:	38800017 	ldw	r2,0(r7)
 100db8c:	07000044 	movi	fp,1
 100db90:	39c00104 	addi	r7,r7,4
 100db94:	d9800404 	addi	r6,sp,16
 100db98:	d9c13515 	stw	r7,1236(sp)
 100db9c:	d9813c15 	stw	r6,1264(sp)
 100dba0:	df013715 	stw	fp,1244(sp)
 100dba4:	d8800405 	stb	r2,16(sp)
 100dba8:	d8000005 	stb	zero,0(sp)
 100dbac:	003df206 	br	100d378 <___vfiprintf_internal_r+0x384>
 100dbb0:	00804074 	movhi	r2,257
 100dbb4:	10942004 	addi	r2,r2,20608
 100dbb8:	d8813615 	stw	r2,1240(sp)
 100dbbc:	003fdd06 	br	100db34 <___vfiprintf_internal_r+0xb40>
 100dbc0:	d8c13b17 	ldw	r3,1260(sp)
 100dbc4:	1880080c 	andi	r2,r3,32
 100dbc8:	1000e326 	beq	r2,zero,100df58 <___vfiprintf_internal_r+0xf64>
 100dbcc:	d9013a17 	ldw	r4,1256(sp)
 100dbd0:	38800017 	ldw	r2,0(r7)
 100dbd4:	39c00104 	addi	r7,r7,4
 100dbd8:	2007d7fa 	srai	r3,r4,31
 100dbdc:	11000015 	stw	r4,0(r2)
 100dbe0:	10c00115 	stw	r3,4(r2)
 100dbe4:	003d5406 	br	100d138 <___vfiprintf_internal_r+0x144>
 100dbe8:	a0c00007 	ldb	r3,0(r20)
 100dbec:	00801b04 	movi	r2,108
 100dbf0:	1880f926 	beq	r3,r2,100dfd8 <___vfiprintf_internal_r+0xfe4>
 100dbf4:	d9013b17 	ldw	r4,1260(sp)
 100dbf8:	21000414 	ori	r4,r4,16
 100dbfc:	d9013b15 	stw	r4,1260(sp)
 100dc00:	003d7006 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dc04:	d8000005 	stb	zero,0(sp)
 100dc08:	39000017 	ldw	r4,0(r7)
 100dc0c:	39c00104 	addi	r7,r7,4
 100dc10:	d9c13515 	stw	r7,1236(sp)
 100dc14:	d9013c15 	stw	r4,1264(sp)
 100dc18:	20010226 	beq	r4,zero,100e024 <___vfiprintf_internal_r+0x1030>
 100dc1c:	b800fc16 	blt	r23,zero,100e010 <___vfiprintf_internal_r+0x101c>
 100dc20:	d9013c17 	ldw	r4,1264(sp)
 100dc24:	000b883a 	mov	r5,zero
 100dc28:	b80d883a 	mov	r6,r23
 100dc2c:	100b0f80 	call	100b0f8 <memchr>
 100dc30:	10000426 	beq	r2,zero,100dc44 <___vfiprintf_internal_r+0xc50>
 100dc34:	d9813c17 	ldw	r6,1264(sp)
 100dc38:	1185c83a 	sub	r2,r2,r6
 100dc3c:	d8813715 	stw	r2,1244(sp)
 100dc40:	b880010e 	bge	r23,r2,100dc48 <___vfiprintf_internal_r+0xc54>
 100dc44:	ddc13715 	stw	r23,1244(sp)
 100dc48:	d8013815 	stw	zero,1248(sp)
 100dc4c:	003f0106 	br	100d854 <___vfiprintf_internal_r+0x860>
 100dc50:	d8813b17 	ldw	r2,1260(sp)
 100dc54:	3c000017 	ldw	r16,0(r7)
 100dc58:	00c04074 	movhi	r3,257
 100dc5c:	18d41504 	addi	r3,r3,20564
 100dc60:	10800094 	ori	r2,r2,2
 100dc64:	d8813b15 	stw	r2,1260(sp)
 100dc68:	39c00104 	addi	r7,r7,4
 100dc6c:	d8c13615 	stw	r3,1240(sp)
 100dc70:	00800c04 	movi	r2,48
 100dc74:	00c01e04 	movi	r3,120
 100dc78:	0023883a 	mov	r17,zero
 100dc7c:	01000084 	movi	r4,2
 100dc80:	d9c13515 	stw	r7,1236(sp)
 100dc84:	d8800045 	stb	r2,1(sp)
 100dc88:	d8c00085 	stb	r3,2(sp)
 100dc8c:	d8000005 	stb	zero,0(sp)
 100dc90:	003ede06 	br	100d80c <___vfiprintf_internal_r+0x818>
 100dc94:	d9813b17 	ldw	r6,1260(sp)
 100dc98:	a0c00007 	ldb	r3,0(r20)
 100dc9c:	31801014 	ori	r6,r6,64
 100dca0:	d9813b15 	stw	r6,1260(sp)
 100dca4:	003d4706 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dca8:	d9413b17 	ldw	r5,1260(sp)
 100dcac:	a0c00007 	ldb	r3,0(r20)
 100dcb0:	29400814 	ori	r5,r5,32
 100dcb4:	d9413b15 	stw	r5,1260(sp)
 100dcb8:	003d4206 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dcbc:	a0c00007 	ldb	r3,0(r20)
 100dcc0:	003d4006 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dcc4:	20c03fcc 	andi	r3,r4,255
 100dcc8:	00800044 	movi	r2,1
 100dccc:	18802b26 	beq	r3,r2,100dd7c <___vfiprintf_internal_r+0xd88>
 100dcd0:	18800b36 	bltu	r3,r2,100dd00 <___vfiprintf_internal_r+0xd0c>
 100dcd4:	00800084 	movi	r2,2
 100dcd8:	18808426 	beq	r3,r2,100deec <___vfiprintf_internal_r+0xef8>
 100dcdc:	01004074 	movhi	r4,257
 100dce0:	21142504 	addi	r4,r4,20628
 100dce4:	ddc13815 	stw	r23,1248(sp)
 100dce8:	10064c80 	call	10064c8 <strlen>
 100dcec:	d8813715 	stw	r2,1244(sp)
 100dcf0:	00804074 	movhi	r2,257
 100dcf4:	10942504 	addi	r2,r2,20628
 100dcf8:	d8813c15 	stw	r2,1264(sp)
 100dcfc:	003ed506 	br	100d854 <___vfiprintf_internal_r+0x860>
 100dd00:	d8800e04 	addi	r2,sp,56
 100dd04:	df000404 	addi	fp,sp,16
 100dd08:	d8813c15 	stw	r2,1264(sp)
 100dd0c:	880a977a 	slli	r5,r17,29
 100dd10:	8004d0fa 	srli	r2,r16,3
 100dd14:	8806d0fa 	srli	r3,r17,3
 100dd18:	810001cc 	andi	r4,r16,7
 100dd1c:	2884b03a 	or	r2,r5,r2
 100dd20:	d9413c17 	ldw	r5,1264(sp)
 100dd24:	21000c04 	addi	r4,r4,48
 100dd28:	1021883a 	mov	r16,r2
 100dd2c:	297fffc4 	addi	r5,r5,-1
 100dd30:	d9413c15 	stw	r5,1264(sp)
 100dd34:	29000005 	stb	r4,0(r5)
 100dd38:	10cab03a 	or	r5,r2,r3
 100dd3c:	1823883a 	mov	r17,r3
 100dd40:	283ff21e 	bne	r5,zero,100dd0c <___vfiprintf_internal_r+0xd18>
 100dd44:	d9813b17 	ldw	r6,1260(sp)
 100dd48:	3080004c 	andi	r2,r6,1
 100dd4c:	1005003a 	cmpeq	r2,r2,zero
 100dd50:	103ebb1e 	bne	r2,zero,100d840 <___vfiprintf_internal_r+0x84c>
 100dd54:	20803fcc 	andi	r2,r4,255
 100dd58:	1080201c 	xori	r2,r2,128
 100dd5c:	10bfe004 	addi	r2,r2,-128
 100dd60:	00c00c04 	movi	r3,48
 100dd64:	10feb626 	beq	r2,r3,100d840 <___vfiprintf_internal_r+0x84c>
 100dd68:	d8813c17 	ldw	r2,1264(sp)
 100dd6c:	10bfffc4 	addi	r2,r2,-1
 100dd70:	d8813c15 	stw	r2,1264(sp)
 100dd74:	10c00005 	stb	r3,0(r2)
 100dd78:	003eb106 	br	100d840 <___vfiprintf_internal_r+0x84c>
 100dd7c:	88800068 	cmpgeui	r2,r17,1
 100dd80:	10000d1e 	bne	r2,zero,100ddb8 <___vfiprintf_internal_r+0xdc4>
 100dd84:	8800021e 	bne	r17,zero,100dd90 <___vfiprintf_internal_r+0xd9c>
 100dd88:	00800244 	movi	r2,9
 100dd8c:	14000a36 	bltu	r2,r16,100ddb8 <___vfiprintf_internal_r+0xdc4>
 100dd90:	d9800dc4 	addi	r6,sp,55
 100dd94:	df000404 	addi	fp,sp,16
 100dd98:	d9813c15 	stw	r6,1264(sp)
 100dd9c:	d8c13c17 	ldw	r3,1264(sp)
 100dda0:	80800c04 	addi	r2,r16,48
 100dda4:	18800005 	stb	r2,0(r3)
 100dda8:	003ea506 	br	100d840 <___vfiprintf_internal_r+0x84c>
 100ddac:	01000084 	movi	r4,2
 100ddb0:	d8000005 	stb	zero,0(sp)
 100ddb4:	003e9506 	br	100d80c <___vfiprintf_internal_r+0x818>
 100ddb8:	df000404 	addi	fp,sp,16
 100ddbc:	dcc00e04 	addi	r19,sp,56
 100ddc0:	8009883a 	mov	r4,r16
 100ddc4:	880b883a 	mov	r5,r17
 100ddc8:	01800284 	movi	r6,10
 100ddcc:	000f883a 	mov	r7,zero
 100ddd0:	100ebc40 	call	100ebc4 <__umoddi3>
 100ddd4:	12000c04 	addi	r8,r2,48
 100ddd8:	9cffffc4 	addi	r19,r19,-1
 100dddc:	8009883a 	mov	r4,r16
 100dde0:	880b883a 	mov	r5,r17
 100dde4:	01800284 	movi	r6,10
 100dde8:	000f883a 	mov	r7,zero
 100ddec:	9a000005 	stb	r8,0(r19)
 100ddf0:	100e5e80 	call	100e5e8 <__udivdi3>
 100ddf4:	1009883a 	mov	r4,r2
 100ddf8:	1021883a 	mov	r16,r2
 100ddfc:	18800068 	cmpgeui	r2,r3,1
 100de00:	1823883a 	mov	r17,r3
 100de04:	103fee1e 	bne	r2,zero,100ddc0 <___vfiprintf_internal_r+0xdcc>
 100de08:	1800021e 	bne	r3,zero,100de14 <___vfiprintf_internal_r+0xe20>
 100de0c:	00800244 	movi	r2,9
 100de10:	113feb36 	bltu	r2,r4,100ddc0 <___vfiprintf_internal_r+0xdcc>
 100de14:	9cffffc4 	addi	r19,r19,-1
 100de18:	dcc13c15 	stw	r19,1264(sp)
 100de1c:	003fdf06 	br	100dd9c <___vfiprintf_internal_r+0xda8>
 100de20:	05c04074 	movhi	r23,257
 100de24:	bdd49204 	addi	r23,r23,21064
 100de28:	003dc506 	br	100d540 <___vfiprintf_internal_r+0x54c>
 100de2c:	d9013b17 	ldw	r4,1260(sp)
 100de30:	2080004c 	andi	r2,r4,1
 100de34:	1000421e 	bne	r2,zero,100df40 <___vfiprintf_internal_r+0xf4c>
 100de38:	d9400e04 	addi	r5,sp,56
 100de3c:	df000404 	addi	fp,sp,16
 100de40:	d9413c15 	stw	r5,1264(sp)
 100de44:	003e7e06 	br	100d840 <___vfiprintf_internal_r+0x84c>
 100de48:	d9813b17 	ldw	r6,1260(sp)
 100de4c:	3080040c 	andi	r2,r6,16
 100de50:	10001c1e 	bne	r2,zero,100dec4 <___vfiprintf_internal_r+0xed0>
 100de54:	d8c13b17 	ldw	r3,1260(sp)
 100de58:	1880100c 	andi	r2,r3,64
 100de5c:	10001926 	beq	r2,zero,100dec4 <___vfiprintf_internal_r+0xed0>
 100de60:	3c00000b 	ldhu	r16,0(r7)
 100de64:	0023883a 	mov	r17,zero
 100de68:	39c00104 	addi	r7,r7,4
 100de6c:	d9c13515 	stw	r7,1236(sp)
 100de70:	003f3706 	br	100db50 <___vfiprintf_internal_r+0xb5c>
 100de74:	3c000017 	ldw	r16,0(r7)
 100de78:	0009883a 	mov	r4,zero
 100de7c:	39c00104 	addi	r7,r7,4
 100de80:	0023883a 	mov	r17,zero
 100de84:	d9c13515 	stw	r7,1236(sp)
 100de88:	d8000005 	stb	zero,0(sp)
 100de8c:	003e5f06 	br	100d80c <___vfiprintf_internal_r+0x818>
 100de90:	3c000017 	ldw	r16,0(r7)
 100de94:	01000044 	movi	r4,1
 100de98:	39c00104 	addi	r7,r7,4
 100de9c:	0023883a 	mov	r17,zero
 100dea0:	d9c13515 	stw	r7,1236(sp)
 100dea4:	d8000005 	stb	zero,0(sp)
 100dea8:	003e5806 	br	100d80c <___vfiprintf_internal_r+0x818>
 100deac:	38800017 	ldw	r2,0(r7)
 100deb0:	39c00104 	addi	r7,r7,4
 100deb4:	d9c13515 	stw	r7,1236(sp)
 100deb8:	1023d7fa 	srai	r17,r2,31
 100debc:	1021883a 	mov	r16,r2
 100dec0:	003e5006 	br	100d804 <___vfiprintf_internal_r+0x810>
 100dec4:	3c000017 	ldw	r16,0(r7)
 100dec8:	0023883a 	mov	r17,zero
 100decc:	39c00104 	addi	r7,r7,4
 100ded0:	d9c13515 	stw	r7,1236(sp)
 100ded4:	003f1e06 	br	100db50 <___vfiprintf_internal_r+0xb5c>
 100ded8:	d9400317 	ldw	r5,12(sp)
 100dedc:	d9000217 	ldw	r4,8(sp)
 100dee0:	05c04074 	movhi	r23,257
 100dee4:	bdd49604 	addi	r23,r23,21080
 100dee8:	003d4e06 	br	100d424 <___vfiprintf_internal_r+0x430>
 100deec:	d9000e04 	addi	r4,sp,56
 100def0:	df000404 	addi	fp,sp,16
 100def4:	d9013c15 	stw	r4,1264(sp)
 100def8:	d9813617 	ldw	r6,1240(sp)
 100defc:	880a973a 	slli	r5,r17,28
 100df00:	8004d13a 	srli	r2,r16,4
 100df04:	810003cc 	andi	r4,r16,15
 100df08:	3109883a 	add	r4,r6,r4
 100df0c:	2884b03a 	or	r2,r5,r2
 100df10:	21400003 	ldbu	r5,0(r4)
 100df14:	d9013c17 	ldw	r4,1264(sp)
 100df18:	8806d13a 	srli	r3,r17,4
 100df1c:	1021883a 	mov	r16,r2
 100df20:	213fffc4 	addi	r4,r4,-1
 100df24:	d9013c15 	stw	r4,1264(sp)
 100df28:	d9813c17 	ldw	r6,1264(sp)
 100df2c:	10c8b03a 	or	r4,r2,r3
 100df30:	1823883a 	mov	r17,r3
 100df34:	31400005 	stb	r5,0(r6)
 100df38:	203fef1e 	bne	r4,zero,100def8 <___vfiprintf_internal_r+0xf04>
 100df3c:	003e4006 	br	100d840 <___vfiprintf_internal_r+0x84c>
 100df40:	00800c04 	movi	r2,48
 100df44:	d9800dc4 	addi	r6,sp,55
 100df48:	df000404 	addi	fp,sp,16
 100df4c:	d8800dc5 	stb	r2,55(sp)
 100df50:	d9813c15 	stw	r6,1264(sp)
 100df54:	003e3a06 	br	100d840 <___vfiprintf_internal_r+0x84c>
 100df58:	d9413b17 	ldw	r5,1260(sp)
 100df5c:	2880040c 	andi	r2,r5,16
 100df60:	10002326 	beq	r2,zero,100dff0 <___vfiprintf_internal_r+0xffc>
 100df64:	38800017 	ldw	r2,0(r7)
 100df68:	d9813a17 	ldw	r6,1256(sp)
 100df6c:	39c00104 	addi	r7,r7,4
 100df70:	11800015 	stw	r6,0(r2)
 100df74:	003c7006 	br	100d138 <___vfiprintf_internal_r+0x144>
 100df78:	d9000217 	ldw	r4,8(sp)
 100df7c:	05c04074 	movhi	r23,257
 100df80:	bdd49604 	addi	r23,r23,21080
 100df84:	003da406 	br	100d618 <___vfiprintf_internal_r+0x624>
 100df88:	0005883a 	mov	r2,zero
 100df8c:	1409c83a 	sub	r4,r2,r16
 100df90:	1105803a 	cmpltu	r2,r2,r4
 100df94:	044bc83a 	sub	r5,zero,r17
 100df98:	2885c83a 	sub	r2,r5,r2
 100df9c:	2021883a 	mov	r16,r4
 100dfa0:	1023883a 	mov	r17,r2
 100dfa4:	01000044 	movi	r4,1
 100dfa8:	00800b44 	movi	r2,45
 100dfac:	d8800005 	stb	r2,0(sp)
 100dfb0:	003e1606 	br	100d80c <___vfiprintf_internal_r+0x818>
 100dfb4:	b009883a 	mov	r4,r22
 100dfb8:	a80b883a 	mov	r5,r21
 100dfbc:	d9800104 	addi	r6,sp,4
 100dfc0:	100cf9c0 	call	100cf9c <__sprint_r>
 100dfc4:	103daa1e 	bne	r2,zero,100d670 <___vfiprintf_internal_r+0x67c>
 100dfc8:	003da806 	br	100d66c <___vfiprintf_internal_r+0x678>
 100dfcc:	05c04074 	movhi	r23,257
 100dfd0:	bdd49204 	addi	r23,r23,21064
 100dfd4:	003dca06 	br	100d700 <___vfiprintf_internal_r+0x70c>
 100dfd8:	d8813b17 	ldw	r2,1260(sp)
 100dfdc:	a5000044 	addi	r20,r20,1
 100dfe0:	a0c00007 	ldb	r3,0(r20)
 100dfe4:	10800814 	ori	r2,r2,32
 100dfe8:	d8813b15 	stw	r2,1260(sp)
 100dfec:	003c7506 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>
 100dff0:	d8c13b17 	ldw	r3,1260(sp)
 100dff4:	1880100c 	andi	r2,r3,64
 100dff8:	10001a26 	beq	r2,zero,100e064 <___vfiprintf_internal_r+0x1070>
 100dffc:	38800017 	ldw	r2,0(r7)
 100e000:	d9013a17 	ldw	r4,1256(sp)
 100e004:	39c00104 	addi	r7,r7,4
 100e008:	1100000d 	sth	r4,0(r2)
 100e00c:	003c4a06 	br	100d138 <___vfiprintf_internal_r+0x144>
 100e010:	d9013c17 	ldw	r4,1264(sp)
 100e014:	10064c80 	call	10064c8 <strlen>
 100e018:	d8813715 	stw	r2,1244(sp)
 100e01c:	d8013815 	stw	zero,1248(sp)
 100e020:	003e0c06 	br	100d854 <___vfiprintf_internal_r+0x860>
 100e024:	00800184 	movi	r2,6
 100e028:	15c00836 	bltu	r2,r23,100e04c <___vfiprintf_internal_r+0x1058>
 100e02c:	b839883a 	mov	fp,r23
 100e030:	b800010e 	bge	r23,zero,100e038 <___vfiprintf_internal_r+0x1044>
 100e034:	0039883a 	mov	fp,zero
 100e038:	01404074 	movhi	r5,257
 100e03c:	29541e04 	addi	r5,r5,20600
 100e040:	ddc13715 	stw	r23,1244(sp)
 100e044:	d9413c15 	stw	r5,1264(sp)
 100e048:	003ccb06 	br	100d378 <___vfiprintf_internal_r+0x384>
 100e04c:	01404074 	movhi	r5,257
 100e050:	29541e04 	addi	r5,r5,20600
 100e054:	1039883a 	mov	fp,r2
 100e058:	d9413c15 	stw	r5,1264(sp)
 100e05c:	d8813715 	stw	r2,1244(sp)
 100e060:	003cc506 	br	100d378 <___vfiprintf_internal_r+0x384>
 100e064:	38800017 	ldw	r2,0(r7)
 100e068:	d9413a17 	ldw	r5,1256(sp)
 100e06c:	39c00104 	addi	r7,r7,4
 100e070:	11400015 	stw	r5,0(r2)
 100e074:	003c3006 	br	100d138 <___vfiprintf_internal_r+0x144>
 100e078:	002f883a 	mov	r23,zero
 100e07c:	003c5306 	br	100d1cc <___vfiprintf_internal_r+0x1d8>
 100e080:	3dc00017 	ldw	r23,0(r7)
 100e084:	39c00104 	addi	r7,r7,4
 100e088:	b83f0c0e 	bge	r23,zero,100dcbc <___vfiprintf_internal_r+0xcc8>
 100e08c:	a0c00007 	ldb	r3,0(r20)
 100e090:	05ffffc4 	movi	r23,-1
 100e094:	003c4b06 	br	100d1c4 <___vfiprintf_internal_r+0x1d0>

0100e098 <__vfiprintf_internal>:
 100e098:	00804074 	movhi	r2,257
 100e09c:	109ce904 	addi	r2,r2,29604
 100e0a0:	2013883a 	mov	r9,r4
 100e0a4:	11000017 	ldw	r4,0(r2)
 100e0a8:	2805883a 	mov	r2,r5
 100e0ac:	300f883a 	mov	r7,r6
 100e0b0:	480b883a 	mov	r5,r9
 100e0b4:	100d883a 	mov	r6,r2
 100e0b8:	100cff41 	jmpi	100cff4 <___vfiprintf_internal_r>

0100e0bc <__swbuf_r>:
 100e0bc:	defffc04 	addi	sp,sp,-16
 100e0c0:	dc400215 	stw	r17,8(sp)
 100e0c4:	dc000115 	stw	r16,4(sp)
 100e0c8:	dfc00315 	stw	ra,12(sp)
 100e0cc:	2023883a 	mov	r17,r4
 100e0d0:	2821883a 	mov	r16,r5
 100e0d4:	20000226 	beq	r4,zero,100e0e0 <__swbuf_r+0x24>
 100e0d8:	20800e17 	ldw	r2,56(r4)
 100e0dc:	10002f26 	beq	r2,zero,100e19c <__swbuf_r+0xe0>
 100e0e0:	3080030b 	ldhu	r2,12(r6)
 100e0e4:	30c00617 	ldw	r3,24(r6)
 100e0e8:	1080020c 	andi	r2,r2,8
 100e0ec:	30c00215 	stw	r3,8(r6)
 100e0f0:	10002226 	beq	r2,zero,100e17c <__swbuf_r+0xc0>
 100e0f4:	30c00417 	ldw	r3,16(r6)
 100e0f8:	18002026 	beq	r3,zero,100e17c <__swbuf_r+0xc0>
 100e0fc:	31000017 	ldw	r4,0(r6)
 100e100:	30800517 	ldw	r2,20(r6)
 100e104:	20c7c83a 	sub	r3,r4,r3
 100e108:	18802f0e 	bge	r3,r2,100e1c8 <__swbuf_r+0x10c>
 100e10c:	19400044 	addi	r5,r3,1
 100e110:	30800217 	ldw	r2,8(r6)
 100e114:	84003fcc 	andi	r16,r16,255
 100e118:	20c00044 	addi	r3,r4,1
 100e11c:	10bfffc4 	addi	r2,r2,-1
 100e120:	30800215 	stw	r2,8(r6)
 100e124:	24000005 	stb	r16,0(r4)
 100e128:	30800517 	ldw	r2,20(r6)
 100e12c:	30c00015 	stw	r3,0(r6)
 100e130:	11400c26 	beq	r2,r5,100e164 <__swbuf_r+0xa8>
 100e134:	3080030b 	ldhu	r2,12(r6)
 100e138:	1080004c 	andi	r2,r2,1
 100e13c:	1005003a 	cmpeq	r2,r2,zero
 100e140:	10000626 	beq	r2,zero,100e15c <__swbuf_r+0xa0>
 100e144:	8005883a 	mov	r2,r16
 100e148:	dfc00317 	ldw	ra,12(sp)
 100e14c:	dc400217 	ldw	r17,8(sp)
 100e150:	dc000117 	ldw	r16,4(sp)
 100e154:	dec00404 	addi	sp,sp,16
 100e158:	f800283a 	ret
 100e15c:	00800284 	movi	r2,10
 100e160:	80bff81e 	bne	r16,r2,100e144 <__swbuf_r+0x88>
 100e164:	8809883a 	mov	r4,r17
 100e168:	300b883a 	mov	r5,r6
 100e16c:	1009f540 	call	1009f54 <_fflush_r>
 100e170:	103ff426 	beq	r2,zero,100e144 <__swbuf_r+0x88>
 100e174:	043fffc4 	movi	r16,-1
 100e178:	003ff206 	br	100e144 <__swbuf_r+0x88>
 100e17c:	300b883a 	mov	r5,r6
 100e180:	8809883a 	mov	r4,r17
 100e184:	d9800015 	stw	r6,0(sp)
 100e188:	10084800 	call	1008480 <__swsetup_r>
 100e18c:	d9800017 	ldw	r6,0(sp)
 100e190:	1000061e 	bne	r2,zero,100e1ac <__swbuf_r+0xf0>
 100e194:	30c00417 	ldw	r3,16(r6)
 100e198:	003fd806 	br	100e0fc <__swbuf_r+0x40>
 100e19c:	d9800015 	stw	r6,0(sp)
 100e1a0:	100a1ec0 	call	100a1ec <__sinit>
 100e1a4:	d9800017 	ldw	r6,0(sp)
 100e1a8:	003fcd06 	br	100e0e0 <__swbuf_r+0x24>
 100e1ac:	3080030b 	ldhu	r2,12(r6)
 100e1b0:	00c00244 	movi	r3,9
 100e1b4:	043fffc4 	movi	r16,-1
 100e1b8:	10801014 	ori	r2,r2,64
 100e1bc:	3080030d 	sth	r2,12(r6)
 100e1c0:	88c00015 	stw	r3,0(r17)
 100e1c4:	003fdf06 	br	100e144 <__swbuf_r+0x88>
 100e1c8:	300b883a 	mov	r5,r6
 100e1cc:	8809883a 	mov	r4,r17
 100e1d0:	d9800015 	stw	r6,0(sp)
 100e1d4:	1009f540 	call	1009f54 <_fflush_r>
 100e1d8:	d9800017 	ldw	r6,0(sp)
 100e1dc:	103fe51e 	bne	r2,zero,100e174 <__swbuf_r+0xb8>
 100e1e0:	31000017 	ldw	r4,0(r6)
 100e1e4:	01400044 	movi	r5,1
 100e1e8:	003fc906 	br	100e110 <__swbuf_r+0x54>

0100e1ec <__swbuf>:
 100e1ec:	01804074 	movhi	r6,257
 100e1f0:	319ce904 	addi	r6,r6,29604
 100e1f4:	2007883a 	mov	r3,r4
 100e1f8:	31000017 	ldw	r4,0(r6)
 100e1fc:	280d883a 	mov	r6,r5
 100e200:	180b883a 	mov	r5,r3
 100e204:	100e0bc1 	jmpi	100e0bc <__swbuf_r>

0100e208 <_write_r>:
 100e208:	defffd04 	addi	sp,sp,-12
 100e20c:	dc000015 	stw	r16,0(sp)
 100e210:	040040b4 	movhi	r16,258
 100e214:	8424d904 	addi	r16,r16,-27804
 100e218:	dc400115 	stw	r17,4(sp)
 100e21c:	80000015 	stw	zero,0(r16)
 100e220:	2023883a 	mov	r17,r4
 100e224:	2809883a 	mov	r4,r5
 100e228:	300b883a 	mov	r5,r6
 100e22c:	380d883a 	mov	r6,r7
 100e230:	dfc00215 	stw	ra,8(sp)
 100e234:	10117880 	call	1011788 <write>
 100e238:	1007883a 	mov	r3,r2
 100e23c:	00bfffc4 	movi	r2,-1
 100e240:	18800626 	beq	r3,r2,100e25c <_write_r+0x54>
 100e244:	1805883a 	mov	r2,r3
 100e248:	dfc00217 	ldw	ra,8(sp)
 100e24c:	dc400117 	ldw	r17,4(sp)
 100e250:	dc000017 	ldw	r16,0(sp)
 100e254:	dec00304 	addi	sp,sp,12
 100e258:	f800283a 	ret
 100e25c:	80800017 	ldw	r2,0(r16)
 100e260:	103ff826 	beq	r2,zero,100e244 <_write_r+0x3c>
 100e264:	88800015 	stw	r2,0(r17)
 100e268:	1805883a 	mov	r2,r3
 100e26c:	dfc00217 	ldw	ra,8(sp)
 100e270:	dc400117 	ldw	r17,4(sp)
 100e274:	dc000017 	ldw	r16,0(sp)
 100e278:	dec00304 	addi	sp,sp,12
 100e27c:	f800283a 	ret

0100e280 <_close_r>:
 100e280:	defffd04 	addi	sp,sp,-12
 100e284:	dc000015 	stw	r16,0(sp)
 100e288:	040040b4 	movhi	r16,258
 100e28c:	8424d904 	addi	r16,r16,-27804
 100e290:	dc400115 	stw	r17,4(sp)
 100e294:	80000015 	stw	zero,0(r16)
 100e298:	2023883a 	mov	r17,r4
 100e29c:	2809883a 	mov	r4,r5
 100e2a0:	dfc00215 	stw	ra,8(sp)
 100e2a4:	1010a180 	call	1010a18 <close>
 100e2a8:	1007883a 	mov	r3,r2
 100e2ac:	00bfffc4 	movi	r2,-1
 100e2b0:	18800626 	beq	r3,r2,100e2cc <_close_r+0x4c>
 100e2b4:	1805883a 	mov	r2,r3
 100e2b8:	dfc00217 	ldw	ra,8(sp)
 100e2bc:	dc400117 	ldw	r17,4(sp)
 100e2c0:	dc000017 	ldw	r16,0(sp)
 100e2c4:	dec00304 	addi	sp,sp,12
 100e2c8:	f800283a 	ret
 100e2cc:	80800017 	ldw	r2,0(r16)
 100e2d0:	103ff826 	beq	r2,zero,100e2b4 <_close_r+0x34>
 100e2d4:	88800015 	stw	r2,0(r17)
 100e2d8:	1805883a 	mov	r2,r3
 100e2dc:	dfc00217 	ldw	ra,8(sp)
 100e2e0:	dc400117 	ldw	r17,4(sp)
 100e2e4:	dc000017 	ldw	r16,0(sp)
 100e2e8:	dec00304 	addi	sp,sp,12
 100e2ec:	f800283a 	ret

0100e2f0 <_fclose_r>:
 100e2f0:	defffc04 	addi	sp,sp,-16
 100e2f4:	dc400115 	stw	r17,4(sp)
 100e2f8:	dc000015 	stw	r16,0(sp)
 100e2fc:	dfc00315 	stw	ra,12(sp)
 100e300:	dc800215 	stw	r18,8(sp)
 100e304:	2821883a 	mov	r16,r5
 100e308:	2023883a 	mov	r17,r4
 100e30c:	28002926 	beq	r5,zero,100e3b4 <_fclose_r+0xc4>
 100e310:	100a1dc0 	call	100a1dc <__sfp_lock_acquire>
 100e314:	88000226 	beq	r17,zero,100e320 <_fclose_r+0x30>
 100e318:	88800e17 	ldw	r2,56(r17)
 100e31c:	10002d26 	beq	r2,zero,100e3d4 <_fclose_r+0xe4>
 100e320:	8080030f 	ldh	r2,12(r16)
 100e324:	10002226 	beq	r2,zero,100e3b0 <_fclose_r+0xc0>
 100e328:	8809883a 	mov	r4,r17
 100e32c:	800b883a 	mov	r5,r16
 100e330:	1009f540 	call	1009f54 <_fflush_r>
 100e334:	1025883a 	mov	r18,r2
 100e338:	80800b17 	ldw	r2,44(r16)
 100e33c:	10000426 	beq	r2,zero,100e350 <_fclose_r+0x60>
 100e340:	81400717 	ldw	r5,28(r16)
 100e344:	8809883a 	mov	r4,r17
 100e348:	103ee83a 	callr	r2
 100e34c:	10002a16 	blt	r2,zero,100e3f8 <_fclose_r+0x108>
 100e350:	8080030b 	ldhu	r2,12(r16)
 100e354:	1080200c 	andi	r2,r2,128
 100e358:	1000231e 	bne	r2,zero,100e3e8 <_fclose_r+0xf8>
 100e35c:	81400c17 	ldw	r5,48(r16)
 100e360:	28000526 	beq	r5,zero,100e378 <_fclose_r+0x88>
 100e364:	80801004 	addi	r2,r16,64
 100e368:	28800226 	beq	r5,r2,100e374 <_fclose_r+0x84>
 100e36c:	8809883a 	mov	r4,r17
 100e370:	100a5700 	call	100a570 <_free_r>
 100e374:	80000c15 	stw	zero,48(r16)
 100e378:	81401117 	ldw	r5,68(r16)
 100e37c:	28000326 	beq	r5,zero,100e38c <_fclose_r+0x9c>
 100e380:	8809883a 	mov	r4,r17
 100e384:	100a5700 	call	100a570 <_free_r>
 100e388:	80001115 	stw	zero,68(r16)
 100e38c:	8000030d 	sth	zero,12(r16)
 100e390:	100a1e00 	call	100a1e0 <__sfp_lock_release>
 100e394:	9005883a 	mov	r2,r18
 100e398:	dfc00317 	ldw	ra,12(sp)
 100e39c:	dc800217 	ldw	r18,8(sp)
 100e3a0:	dc400117 	ldw	r17,4(sp)
 100e3a4:	dc000017 	ldw	r16,0(sp)
 100e3a8:	dec00404 	addi	sp,sp,16
 100e3ac:	f800283a 	ret
 100e3b0:	100a1e00 	call	100a1e0 <__sfp_lock_release>
 100e3b4:	0025883a 	mov	r18,zero
 100e3b8:	9005883a 	mov	r2,r18
 100e3bc:	dfc00317 	ldw	ra,12(sp)
 100e3c0:	dc800217 	ldw	r18,8(sp)
 100e3c4:	dc400117 	ldw	r17,4(sp)
 100e3c8:	dc000017 	ldw	r16,0(sp)
 100e3cc:	dec00404 	addi	sp,sp,16
 100e3d0:	f800283a 	ret
 100e3d4:	8809883a 	mov	r4,r17
 100e3d8:	100a1ec0 	call	100a1ec <__sinit>
 100e3dc:	8080030f 	ldh	r2,12(r16)
 100e3e0:	103fd11e 	bne	r2,zero,100e328 <_fclose_r+0x38>
 100e3e4:	003ff206 	br	100e3b0 <_fclose_r+0xc0>
 100e3e8:	81400417 	ldw	r5,16(r16)
 100e3ec:	8809883a 	mov	r4,r17
 100e3f0:	100a5700 	call	100a570 <_free_r>
 100e3f4:	003fd906 	br	100e35c <_fclose_r+0x6c>
 100e3f8:	04bfffc4 	movi	r18,-1
 100e3fc:	003fd406 	br	100e350 <_fclose_r+0x60>

0100e400 <fclose>:
 100e400:	00804074 	movhi	r2,257
 100e404:	109ce904 	addi	r2,r2,29604
 100e408:	200b883a 	mov	r5,r4
 100e40c:	11000017 	ldw	r4,0(r2)
 100e410:	100e2f01 	jmpi	100e2f0 <_fclose_r>

0100e414 <_fstat_r>:
 100e414:	defffd04 	addi	sp,sp,-12
 100e418:	dc000015 	stw	r16,0(sp)
 100e41c:	040040b4 	movhi	r16,258
 100e420:	8424d904 	addi	r16,r16,-27804
 100e424:	dc400115 	stw	r17,4(sp)
 100e428:	80000015 	stw	zero,0(r16)
 100e42c:	2023883a 	mov	r17,r4
 100e430:	2809883a 	mov	r4,r5
 100e434:	300b883a 	mov	r5,r6
 100e438:	dfc00215 	stw	ra,8(sp)
 100e43c:	1010c000 	call	1010c00 <fstat>
 100e440:	1007883a 	mov	r3,r2
 100e444:	00bfffc4 	movi	r2,-1
 100e448:	18800626 	beq	r3,r2,100e464 <_fstat_r+0x50>
 100e44c:	1805883a 	mov	r2,r3
 100e450:	dfc00217 	ldw	ra,8(sp)
 100e454:	dc400117 	ldw	r17,4(sp)
 100e458:	dc000017 	ldw	r16,0(sp)
 100e45c:	dec00304 	addi	sp,sp,12
 100e460:	f800283a 	ret
 100e464:	80800017 	ldw	r2,0(r16)
 100e468:	103ff826 	beq	r2,zero,100e44c <_fstat_r+0x38>
 100e46c:	88800015 	stw	r2,0(r17)
 100e470:	1805883a 	mov	r2,r3
 100e474:	dfc00217 	ldw	ra,8(sp)
 100e478:	dc400117 	ldw	r17,4(sp)
 100e47c:	dc000017 	ldw	r16,0(sp)
 100e480:	dec00304 	addi	sp,sp,12
 100e484:	f800283a 	ret

0100e488 <_isatty_r>:
 100e488:	defffd04 	addi	sp,sp,-12
 100e48c:	dc000015 	stw	r16,0(sp)
 100e490:	040040b4 	movhi	r16,258
 100e494:	8424d904 	addi	r16,r16,-27804
 100e498:	dc400115 	stw	r17,4(sp)
 100e49c:	80000015 	stw	zero,0(r16)
 100e4a0:	2023883a 	mov	r17,r4
 100e4a4:	2809883a 	mov	r4,r5
 100e4a8:	dfc00215 	stw	ra,8(sp)
 100e4ac:	1010f140 	call	1010f14 <isatty>
 100e4b0:	1007883a 	mov	r3,r2
 100e4b4:	00bfffc4 	movi	r2,-1
 100e4b8:	18800626 	beq	r3,r2,100e4d4 <_isatty_r+0x4c>
 100e4bc:	1805883a 	mov	r2,r3
 100e4c0:	dfc00217 	ldw	ra,8(sp)
 100e4c4:	dc400117 	ldw	r17,4(sp)
 100e4c8:	dc000017 	ldw	r16,0(sp)
 100e4cc:	dec00304 	addi	sp,sp,12
 100e4d0:	f800283a 	ret
 100e4d4:	80800017 	ldw	r2,0(r16)
 100e4d8:	103ff826 	beq	r2,zero,100e4bc <_isatty_r+0x34>
 100e4dc:	88800015 	stw	r2,0(r17)
 100e4e0:	1805883a 	mov	r2,r3
 100e4e4:	dfc00217 	ldw	ra,8(sp)
 100e4e8:	dc400117 	ldw	r17,4(sp)
 100e4ec:	dc000017 	ldw	r16,0(sp)
 100e4f0:	dec00304 	addi	sp,sp,12
 100e4f4:	f800283a 	ret

0100e4f8 <_lseek_r>:
 100e4f8:	defffd04 	addi	sp,sp,-12
 100e4fc:	dc000015 	stw	r16,0(sp)
 100e500:	040040b4 	movhi	r16,258
 100e504:	8424d904 	addi	r16,r16,-27804
 100e508:	dc400115 	stw	r17,4(sp)
 100e50c:	80000015 	stw	zero,0(r16)
 100e510:	2023883a 	mov	r17,r4
 100e514:	2809883a 	mov	r4,r5
 100e518:	300b883a 	mov	r5,r6
 100e51c:	380d883a 	mov	r6,r7
 100e520:	dfc00215 	stw	ra,8(sp)
 100e524:	10112c00 	call	10112c0 <lseek>
 100e528:	1007883a 	mov	r3,r2
 100e52c:	00bfffc4 	movi	r2,-1
 100e530:	18800626 	beq	r3,r2,100e54c <_lseek_r+0x54>
 100e534:	1805883a 	mov	r2,r3
 100e538:	dfc00217 	ldw	ra,8(sp)
 100e53c:	dc400117 	ldw	r17,4(sp)
 100e540:	dc000017 	ldw	r16,0(sp)
 100e544:	dec00304 	addi	sp,sp,12
 100e548:	f800283a 	ret
 100e54c:	80800017 	ldw	r2,0(r16)
 100e550:	103ff826 	beq	r2,zero,100e534 <_lseek_r+0x3c>
 100e554:	88800015 	stw	r2,0(r17)
 100e558:	1805883a 	mov	r2,r3
 100e55c:	dfc00217 	ldw	ra,8(sp)
 100e560:	dc400117 	ldw	r17,4(sp)
 100e564:	dc000017 	ldw	r16,0(sp)
 100e568:	dec00304 	addi	sp,sp,12
 100e56c:	f800283a 	ret

0100e570 <_read_r>:
 100e570:	defffd04 	addi	sp,sp,-12
 100e574:	dc000015 	stw	r16,0(sp)
 100e578:	040040b4 	movhi	r16,258
 100e57c:	8424d904 	addi	r16,r16,-27804
 100e580:	dc400115 	stw	r17,4(sp)
 100e584:	80000015 	stw	zero,0(r16)
 100e588:	2023883a 	mov	r17,r4
 100e58c:	2809883a 	mov	r4,r5
 100e590:	300b883a 	mov	r5,r6
 100e594:	380d883a 	mov	r6,r7
 100e598:	dfc00215 	stw	ra,8(sp)
 100e59c:	10114bc0 	call	10114bc <read>
 100e5a0:	1007883a 	mov	r3,r2
 100e5a4:	00bfffc4 	movi	r2,-1
 100e5a8:	18800626 	beq	r3,r2,100e5c4 <_read_r+0x54>
 100e5ac:	1805883a 	mov	r2,r3
 100e5b0:	dfc00217 	ldw	ra,8(sp)
 100e5b4:	dc400117 	ldw	r17,4(sp)
 100e5b8:	dc000017 	ldw	r16,0(sp)
 100e5bc:	dec00304 	addi	sp,sp,12
 100e5c0:	f800283a 	ret
 100e5c4:	80800017 	ldw	r2,0(r16)
 100e5c8:	103ff826 	beq	r2,zero,100e5ac <_read_r+0x3c>
 100e5cc:	88800015 	stw	r2,0(r17)
 100e5d0:	1805883a 	mov	r2,r3
 100e5d4:	dfc00217 	ldw	ra,8(sp)
 100e5d8:	dc400117 	ldw	r17,4(sp)
 100e5dc:	dc000017 	ldw	r16,0(sp)
 100e5e0:	dec00304 	addi	sp,sp,12
 100e5e4:	f800283a 	ret

0100e5e8 <__udivdi3>:
 100e5e8:	defff004 	addi	sp,sp,-64
 100e5ec:	2005883a 	mov	r2,r4
 100e5f0:	3011883a 	mov	r8,r6
 100e5f4:	df000e15 	stw	fp,56(sp)
 100e5f8:	dd000a15 	stw	r20,40(sp)
 100e5fc:	dc000615 	stw	r16,24(sp)
 100e600:	dfc00f15 	stw	ra,60(sp)
 100e604:	ddc00d15 	stw	r23,52(sp)
 100e608:	dd800c15 	stw	r22,48(sp)
 100e60c:	dd400b15 	stw	r21,44(sp)
 100e610:	dcc00915 	stw	r19,36(sp)
 100e614:	dc800815 	stw	r18,32(sp)
 100e618:	dc400715 	stw	r17,28(sp)
 100e61c:	4021883a 	mov	r16,r8
 100e620:	1039883a 	mov	fp,r2
 100e624:	2829883a 	mov	r20,r5
 100e628:	38003b1e 	bne	r7,zero,100e718 <__udivdi3+0x130>
 100e62c:	2a005c36 	bltu	r5,r8,100e7a0 <__udivdi3+0x1b8>
 100e630:	4000a626 	beq	r8,zero,100e8cc <__udivdi3+0x2e4>
 100e634:	00bfffd4 	movui	r2,65535
 100e638:	14009e36 	bltu	r2,r16,100e8b4 <__udivdi3+0x2cc>
 100e63c:	00803fc4 	movi	r2,255
 100e640:	14013d36 	bltu	r2,r16,100eb38 <__udivdi3+0x550>
 100e644:	000b883a 	mov	r5,zero
 100e648:	0005883a 	mov	r2,zero
 100e64c:	8084d83a 	srl	r2,r16,r2
 100e650:	01004074 	movhi	r4,257
 100e654:	21149f04 	addi	r4,r4,21116
 100e658:	01800804 	movi	r6,32
 100e65c:	1105883a 	add	r2,r2,r4
 100e660:	10c00003 	ldbu	r3,0(r2)
 100e664:	28c7883a 	add	r3,r5,r3
 100e668:	30edc83a 	sub	r22,r6,r3
 100e66c:	b000ee1e 	bne	r22,zero,100ea28 <__udivdi3+0x440>
 100e670:	802ad43a 	srli	r21,r16,16
 100e674:	00800044 	movi	r2,1
 100e678:	a423c83a 	sub	r17,r20,r16
 100e67c:	85ffffcc 	andi	r23,r16,65535
 100e680:	d8800315 	stw	r2,12(sp)
 100e684:	8809883a 	mov	r4,r17
 100e688:	a80b883a 	mov	r5,r21
 100e68c:	10103dc0 	call	10103dc <__udivsi3>
 100e690:	8809883a 	mov	r4,r17
 100e694:	a80b883a 	mov	r5,r21
 100e698:	102d883a 	mov	r22,r2
 100e69c:	10103e40 	call	10103e4 <__umodsi3>
 100e6a0:	1004943a 	slli	r2,r2,16
 100e6a4:	e006d43a 	srli	r3,fp,16
 100e6a8:	bda3383a 	mul	r17,r23,r22
 100e6ac:	10c4b03a 	or	r2,r2,r3
 100e6b0:	1440042e 	bgeu	r2,r17,100e6c4 <__udivdi3+0xdc>
 100e6b4:	1405883a 	add	r2,r2,r16
 100e6b8:	b5bfffc4 	addi	r22,r22,-1
 100e6bc:	14000136 	bltu	r2,r16,100e6c4 <__udivdi3+0xdc>
 100e6c0:	14413d36 	bltu	r2,r17,100ebb8 <__udivdi3+0x5d0>
 100e6c4:	1463c83a 	sub	r17,r2,r17
 100e6c8:	8809883a 	mov	r4,r17
 100e6cc:	a80b883a 	mov	r5,r21
 100e6d0:	10103dc0 	call	10103dc <__udivsi3>
 100e6d4:	8809883a 	mov	r4,r17
 100e6d8:	a80b883a 	mov	r5,r21
 100e6dc:	1029883a 	mov	r20,r2
 100e6e0:	10103e40 	call	10103e4 <__umodsi3>
 100e6e4:	1004943a 	slli	r2,r2,16
 100e6e8:	bd09383a 	mul	r4,r23,r20
 100e6ec:	e0ffffcc 	andi	r3,fp,65535
 100e6f0:	10c4b03a 	or	r2,r2,r3
 100e6f4:	1100042e 	bgeu	r2,r4,100e708 <__udivdi3+0x120>
 100e6f8:	8085883a 	add	r2,r16,r2
 100e6fc:	a53fffc4 	addi	r20,r20,-1
 100e700:	14000136 	bltu	r2,r16,100e708 <__udivdi3+0x120>
 100e704:	11012036 	bltu	r2,r4,100eb88 <__udivdi3+0x5a0>
 100e708:	b004943a 	slli	r2,r22,16
 100e70c:	d9000317 	ldw	r4,12(sp)
 100e710:	a084b03a 	or	r2,r20,r2
 100e714:	00001506 	br	100e76c <__udivdi3+0x184>
 100e718:	380d883a 	mov	r6,r7
 100e71c:	29c06236 	bltu	r5,r7,100e8a8 <__udivdi3+0x2c0>
 100e720:	00bfffd4 	movui	r2,65535
 100e724:	11c05a36 	bltu	r2,r7,100e890 <__udivdi3+0x2a8>
 100e728:	00803fc4 	movi	r2,255
 100e72c:	11c0fc36 	bltu	r2,r7,100eb20 <__udivdi3+0x538>
 100e730:	000b883a 	mov	r5,zero
 100e734:	0005883a 	mov	r2,zero
 100e738:	3084d83a 	srl	r2,r6,r2
 100e73c:	01004074 	movhi	r4,257
 100e740:	21149f04 	addi	r4,r4,21116
 100e744:	01c00804 	movi	r7,32
 100e748:	1105883a 	add	r2,r2,r4
 100e74c:	10c00003 	ldbu	r3,0(r2)
 100e750:	28c7883a 	add	r3,r5,r3
 100e754:	38efc83a 	sub	r23,r7,r3
 100e758:	b800691e 	bne	r23,zero,100e900 <__udivdi3+0x318>
 100e75c:	35000136 	bltu	r6,r20,100e764 <__udivdi3+0x17c>
 100e760:	e4005136 	bltu	fp,r16,100e8a8 <__udivdi3+0x2c0>
 100e764:	00800044 	movi	r2,1
 100e768:	0009883a 	mov	r4,zero
 100e76c:	2007883a 	mov	r3,r4
 100e770:	dfc00f17 	ldw	ra,60(sp)
 100e774:	df000e17 	ldw	fp,56(sp)
 100e778:	ddc00d17 	ldw	r23,52(sp)
 100e77c:	dd800c17 	ldw	r22,48(sp)
 100e780:	dd400b17 	ldw	r21,44(sp)
 100e784:	dd000a17 	ldw	r20,40(sp)
 100e788:	dcc00917 	ldw	r19,36(sp)
 100e78c:	dc800817 	ldw	r18,32(sp)
 100e790:	dc400717 	ldw	r17,28(sp)
 100e794:	dc000617 	ldw	r16,24(sp)
 100e798:	dec01004 	addi	sp,sp,64
 100e79c:	f800283a 	ret
 100e7a0:	00bfffd4 	movui	r2,65535
 100e7a4:	12005036 	bltu	r2,r8,100e8e8 <__udivdi3+0x300>
 100e7a8:	00803fc4 	movi	r2,255
 100e7ac:	1200e836 	bltu	r2,r8,100eb50 <__udivdi3+0x568>
 100e7b0:	000b883a 	mov	r5,zero
 100e7b4:	0005883a 	mov	r2,zero
 100e7b8:	8084d83a 	srl	r2,r16,r2
 100e7bc:	01004074 	movhi	r4,257
 100e7c0:	21149f04 	addi	r4,r4,21116
 100e7c4:	01800804 	movi	r6,32
 100e7c8:	1105883a 	add	r2,r2,r4
 100e7cc:	10c00003 	ldbu	r3,0(r2)
 100e7d0:	28c7883a 	add	r3,r5,r3
 100e7d4:	30cbc83a 	sub	r5,r6,r3
 100e7d8:	28000626 	beq	r5,zero,100e7f4 <__udivdi3+0x20c>
 100e7dc:	3145c83a 	sub	r2,r6,r5
 100e7e0:	e084d83a 	srl	r2,fp,r2
 100e7e4:	a146983a 	sll	r3,r20,r5
 100e7e8:	e178983a 	sll	fp,fp,r5
 100e7ec:	8160983a 	sll	r16,r16,r5
 100e7f0:	18a8b03a 	or	r20,r3,r2
 100e7f4:	802ad43a 	srli	r21,r16,16
 100e7f8:	a009883a 	mov	r4,r20
 100e7fc:	85ffffcc 	andi	r23,r16,65535
 100e800:	a80b883a 	mov	r5,r21
 100e804:	10103dc0 	call	10103dc <__udivsi3>
 100e808:	a009883a 	mov	r4,r20
 100e80c:	a80b883a 	mov	r5,r21
 100e810:	102d883a 	mov	r22,r2
 100e814:	10103e40 	call	10103e4 <__umodsi3>
 100e818:	1004943a 	slli	r2,r2,16
 100e81c:	e006d43a 	srli	r3,fp,16
 100e820:	bda3383a 	mul	r17,r23,r22
 100e824:	10c4b03a 	or	r2,r2,r3
 100e828:	1440042e 	bgeu	r2,r17,100e83c <__udivdi3+0x254>
 100e82c:	1405883a 	add	r2,r2,r16
 100e830:	b5bfffc4 	addi	r22,r22,-1
 100e834:	14000136 	bltu	r2,r16,100e83c <__udivdi3+0x254>
 100e838:	1440d536 	bltu	r2,r17,100eb90 <__udivdi3+0x5a8>
 100e83c:	1463c83a 	sub	r17,r2,r17
 100e840:	8809883a 	mov	r4,r17
 100e844:	a80b883a 	mov	r5,r21
 100e848:	10103dc0 	call	10103dc <__udivsi3>
 100e84c:	8809883a 	mov	r4,r17
 100e850:	a80b883a 	mov	r5,r21
 100e854:	1029883a 	mov	r20,r2
 100e858:	10103e40 	call	10103e4 <__umodsi3>
 100e85c:	1004943a 	slli	r2,r2,16
 100e860:	bd09383a 	mul	r4,r23,r20
 100e864:	e0ffffcc 	andi	r3,fp,65535
 100e868:	10c4b03a 	or	r2,r2,r3
 100e86c:	1100042e 	bgeu	r2,r4,100e880 <__udivdi3+0x298>
 100e870:	8085883a 	add	r2,r16,r2
 100e874:	a53fffc4 	addi	r20,r20,-1
 100e878:	14000136 	bltu	r2,r16,100e880 <__udivdi3+0x298>
 100e87c:	1100c736 	bltu	r2,r4,100eb9c <__udivdi3+0x5b4>
 100e880:	b004943a 	slli	r2,r22,16
 100e884:	0009883a 	mov	r4,zero
 100e888:	a084b03a 	or	r2,r20,r2
 100e88c:	003fb706 	br	100e76c <__udivdi3+0x184>
 100e890:	00804034 	movhi	r2,256
 100e894:	10bfffc4 	addi	r2,r2,-1
 100e898:	11c0a436 	bltu	r2,r7,100eb2c <__udivdi3+0x544>
 100e89c:	01400404 	movi	r5,16
 100e8a0:	2805883a 	mov	r2,r5
 100e8a4:	003fa406 	br	100e738 <__udivdi3+0x150>
 100e8a8:	0005883a 	mov	r2,zero
 100e8ac:	0009883a 	mov	r4,zero
 100e8b0:	003fae06 	br	100e76c <__udivdi3+0x184>
 100e8b4:	00804034 	movhi	r2,256
 100e8b8:	10bfffc4 	addi	r2,r2,-1
 100e8bc:	1400a136 	bltu	r2,r16,100eb44 <__udivdi3+0x55c>
 100e8c0:	01400404 	movi	r5,16
 100e8c4:	2805883a 	mov	r2,r5
 100e8c8:	003f6006 	br	100e64c <__udivdi3+0x64>
 100e8cc:	01000044 	movi	r4,1
 100e8d0:	000b883a 	mov	r5,zero
 100e8d4:	10103dc0 	call	10103dc <__udivsi3>
 100e8d8:	1021883a 	mov	r16,r2
 100e8dc:	00bfffd4 	movui	r2,65535
 100e8e0:	143ff436 	bltu	r2,r16,100e8b4 <__udivdi3+0x2cc>
 100e8e4:	003f5506 	br	100e63c <__udivdi3+0x54>
 100e8e8:	00804034 	movhi	r2,256
 100e8ec:	10bfffc4 	addi	r2,r2,-1
 100e8f0:	12009a36 	bltu	r2,r8,100eb5c <__udivdi3+0x574>
 100e8f4:	01400404 	movi	r5,16
 100e8f8:	2805883a 	mov	r2,r5
 100e8fc:	003fae06 	br	100e7b8 <__udivdi3+0x1d0>
 100e900:	3dc5c83a 	sub	r2,r7,r23
 100e904:	35c8983a 	sll	r4,r6,r23
 100e908:	8086d83a 	srl	r3,r16,r2
 100e90c:	a0a2d83a 	srl	r17,r20,r2
 100e910:	e084d83a 	srl	r2,fp,r2
 100e914:	20eab03a 	or	r21,r4,r3
 100e918:	a82cd43a 	srli	r22,r21,16
 100e91c:	a5c6983a 	sll	r3,r20,r23
 100e920:	8809883a 	mov	r4,r17
 100e924:	b00b883a 	mov	r5,r22
 100e928:	1886b03a 	or	r3,r3,r2
 100e92c:	d8c00215 	stw	r3,8(sp)
 100e930:	10103dc0 	call	10103dc <__udivsi3>
 100e934:	8809883a 	mov	r4,r17
 100e938:	b00b883a 	mov	r5,r22
 100e93c:	1029883a 	mov	r20,r2
 100e940:	10103e40 	call	10103e4 <__umodsi3>
 100e944:	a8ffffcc 	andi	r3,r21,65535
 100e948:	d8c00515 	stw	r3,20(sp)
 100e94c:	d9000217 	ldw	r4,8(sp)
 100e950:	d9400517 	ldw	r5,20(sp)
 100e954:	1004943a 	slli	r2,r2,16
 100e958:	2006d43a 	srli	r3,r4,16
 100e95c:	85e0983a 	sll	r16,r16,r23
 100e960:	2d23383a 	mul	r17,r5,r20
 100e964:	10c4b03a 	or	r2,r2,r3
 100e968:	dc000015 	stw	r16,0(sp)
 100e96c:	1440032e 	bgeu	r2,r17,100e97c <__udivdi3+0x394>
 100e970:	1545883a 	add	r2,r2,r21
 100e974:	a53fffc4 	addi	r20,r20,-1
 100e978:	15407f2e 	bgeu	r2,r21,100eb78 <__udivdi3+0x590>
 100e97c:	1463c83a 	sub	r17,r2,r17
 100e980:	8809883a 	mov	r4,r17
 100e984:	b00b883a 	mov	r5,r22
 100e988:	10103dc0 	call	10103dc <__udivsi3>
 100e98c:	8809883a 	mov	r4,r17
 100e990:	b00b883a 	mov	r5,r22
 100e994:	1021883a 	mov	r16,r2
 100e998:	10103e40 	call	10103e4 <__umodsi3>
 100e99c:	d8c00517 	ldw	r3,20(sp)
 100e9a0:	d9000217 	ldw	r4,8(sp)
 100e9a4:	1004943a 	slli	r2,r2,16
 100e9a8:	1c0f383a 	mul	r7,r3,r16
 100e9ac:	20ffffcc 	andi	r3,r4,65535
 100e9b0:	10e2b03a 	or	r17,r2,r3
 100e9b4:	89c0032e 	bgeu	r17,r7,100e9c4 <__udivdi3+0x3dc>
 100e9b8:	8d63883a 	add	r17,r17,r21
 100e9bc:	843fffc4 	addi	r16,r16,-1
 100e9c0:	8d40692e 	bgeu	r17,r21,100eb68 <__udivdi3+0x580>
 100e9c4:	a008943a 	slli	r4,r20,16
 100e9c8:	d9400017 	ldw	r5,0(sp)
 100e9cc:	89e3c83a 	sub	r17,r17,r7
 100e9d0:	8110b03a 	or	r8,r16,r4
 100e9d4:	280cd43a 	srli	r6,r5,16
 100e9d8:	28ffffcc 	andi	r3,r5,65535
 100e9dc:	40bfffcc 	andi	r2,r8,65535
 100e9e0:	400ad43a 	srli	r5,r8,16
 100e9e4:	10d3383a 	mul	r9,r2,r3
 100e9e8:	1185383a 	mul	r2,r2,r6
 100e9ec:	28c7383a 	mul	r3,r5,r3
 100e9f0:	4808d43a 	srli	r4,r9,16
 100e9f4:	298b383a 	mul	r5,r5,r6
 100e9f8:	10c5883a 	add	r2,r2,r3
 100e9fc:	2089883a 	add	r4,r4,r2
 100ea00:	20c0022e 	bgeu	r4,r3,100ea0c <__udivdi3+0x424>
 100ea04:	00800074 	movhi	r2,1
 100ea08:	288b883a 	add	r5,r5,r2
 100ea0c:	2004d43a 	srli	r2,r4,16
 100ea10:	288b883a 	add	r5,r5,r2
 100ea14:	89403f36 	bltu	r17,r5,100eb14 <__udivdi3+0x52c>
 100ea18:	89403926 	beq	r17,r5,100eb00 <__udivdi3+0x518>
 100ea1c:	4005883a 	mov	r2,r8
 100ea20:	0009883a 	mov	r4,zero
 100ea24:	003f5106 	br	100e76c <__udivdi3+0x184>
 100ea28:	85a0983a 	sll	r16,r16,r22
 100ea2c:	3585c83a 	sub	r2,r6,r22
 100ea30:	a0a2d83a 	srl	r17,r20,r2
 100ea34:	802ad43a 	srli	r21,r16,16
 100ea38:	e084d83a 	srl	r2,fp,r2
 100ea3c:	a586983a 	sll	r3,r20,r22
 100ea40:	8809883a 	mov	r4,r17
 100ea44:	a80b883a 	mov	r5,r21
 100ea48:	1886b03a 	or	r3,r3,r2
 100ea4c:	d8c00115 	stw	r3,4(sp)
 100ea50:	10103dc0 	call	10103dc <__udivsi3>
 100ea54:	8809883a 	mov	r4,r17
 100ea58:	a80b883a 	mov	r5,r21
 100ea5c:	d8800415 	stw	r2,16(sp)
 100ea60:	10103e40 	call	10103e4 <__umodsi3>
 100ea64:	d9000117 	ldw	r4,4(sp)
 100ea68:	d9400417 	ldw	r5,16(sp)
 100ea6c:	1004943a 	slli	r2,r2,16
 100ea70:	85ffffcc 	andi	r23,r16,65535
 100ea74:	2006d43a 	srli	r3,r4,16
 100ea78:	b963383a 	mul	r17,r23,r5
 100ea7c:	10c4b03a 	or	r2,r2,r3
 100ea80:	1440042e 	bgeu	r2,r17,100ea94 <__udivdi3+0x4ac>
 100ea84:	297fffc4 	addi	r5,r5,-1
 100ea88:	1405883a 	add	r2,r2,r16
 100ea8c:	d9400415 	stw	r5,16(sp)
 100ea90:	1400442e 	bgeu	r2,r16,100eba4 <__udivdi3+0x5bc>
 100ea94:	1463c83a 	sub	r17,r2,r17
 100ea98:	8809883a 	mov	r4,r17
 100ea9c:	a80b883a 	mov	r5,r21
 100eaa0:	10103dc0 	call	10103dc <__udivsi3>
 100eaa4:	8809883a 	mov	r4,r17
 100eaa8:	a80b883a 	mov	r5,r21
 100eaac:	1029883a 	mov	r20,r2
 100eab0:	10103e40 	call	10103e4 <__umodsi3>
 100eab4:	d9400117 	ldw	r5,4(sp)
 100eab8:	1004943a 	slli	r2,r2,16
 100eabc:	bd09383a 	mul	r4,r23,r20
 100eac0:	28ffffcc 	andi	r3,r5,65535
 100eac4:	10c6b03a 	or	r3,r2,r3
 100eac8:	1900062e 	bgeu	r3,r4,100eae4 <__udivdi3+0x4fc>
 100eacc:	1c07883a 	add	r3,r3,r16
 100ead0:	a53fffc4 	addi	r20,r20,-1
 100ead4:	1c000336 	bltu	r3,r16,100eae4 <__udivdi3+0x4fc>
 100ead8:	1900022e 	bgeu	r3,r4,100eae4 <__udivdi3+0x4fc>
 100eadc:	a53fffc4 	addi	r20,r20,-1
 100eae0:	1c07883a 	add	r3,r3,r16
 100eae4:	d9400417 	ldw	r5,16(sp)
 100eae8:	e5b8983a 	sll	fp,fp,r22
 100eaec:	1923c83a 	sub	r17,r3,r4
 100eaf0:	2804943a 	slli	r2,r5,16
 100eaf4:	a0a8b03a 	or	r20,r20,r2
 100eaf8:	dd000315 	stw	r20,12(sp)
 100eafc:	003ee106 	br	100e684 <__udivdi3+0x9c>
 100eb00:	2004943a 	slli	r2,r4,16
 100eb04:	e5c8983a 	sll	r4,fp,r23
 100eb08:	48ffffcc 	andi	r3,r9,65535
 100eb0c:	10c5883a 	add	r2,r2,r3
 100eb10:	20bfc22e 	bgeu	r4,r2,100ea1c <__udivdi3+0x434>
 100eb14:	40bfffc4 	addi	r2,r8,-1
 100eb18:	0009883a 	mov	r4,zero
 100eb1c:	003f1306 	br	100e76c <__udivdi3+0x184>
 100eb20:	01400204 	movi	r5,8
 100eb24:	2805883a 	mov	r2,r5
 100eb28:	003f0306 	br	100e738 <__udivdi3+0x150>
 100eb2c:	01400604 	movi	r5,24
 100eb30:	2805883a 	mov	r2,r5
 100eb34:	003f0006 	br	100e738 <__udivdi3+0x150>
 100eb38:	01400204 	movi	r5,8
 100eb3c:	2805883a 	mov	r2,r5
 100eb40:	003ec206 	br	100e64c <__udivdi3+0x64>
 100eb44:	01400604 	movi	r5,24
 100eb48:	2805883a 	mov	r2,r5
 100eb4c:	003ebf06 	br	100e64c <__udivdi3+0x64>
 100eb50:	01400204 	movi	r5,8
 100eb54:	2805883a 	mov	r2,r5
 100eb58:	003f1706 	br	100e7b8 <__udivdi3+0x1d0>
 100eb5c:	01400604 	movi	r5,24
 100eb60:	2805883a 	mov	r2,r5
 100eb64:	003f1406 	br	100e7b8 <__udivdi3+0x1d0>
 100eb68:	89ff962e 	bgeu	r17,r7,100e9c4 <__udivdi3+0x3dc>
 100eb6c:	8d63883a 	add	r17,r17,r21
 100eb70:	843fffc4 	addi	r16,r16,-1
 100eb74:	003f9306 	br	100e9c4 <__udivdi3+0x3dc>
 100eb78:	147f802e 	bgeu	r2,r17,100e97c <__udivdi3+0x394>
 100eb7c:	a53fffc4 	addi	r20,r20,-1
 100eb80:	1545883a 	add	r2,r2,r21
 100eb84:	003f7d06 	br	100e97c <__udivdi3+0x394>
 100eb88:	a53fffc4 	addi	r20,r20,-1
 100eb8c:	003ede06 	br	100e708 <__udivdi3+0x120>
 100eb90:	b5bfffc4 	addi	r22,r22,-1
 100eb94:	1405883a 	add	r2,r2,r16
 100eb98:	003f2806 	br	100e83c <__udivdi3+0x254>
 100eb9c:	a53fffc4 	addi	r20,r20,-1
 100eba0:	003f3706 	br	100e880 <__udivdi3+0x298>
 100eba4:	147fbb2e 	bgeu	r2,r17,100ea94 <__udivdi3+0x4ac>
 100eba8:	297fffc4 	addi	r5,r5,-1
 100ebac:	1405883a 	add	r2,r2,r16
 100ebb0:	d9400415 	stw	r5,16(sp)
 100ebb4:	003fb706 	br	100ea94 <__udivdi3+0x4ac>
 100ebb8:	b5bfffc4 	addi	r22,r22,-1
 100ebbc:	1405883a 	add	r2,r2,r16
 100ebc0:	003ec006 	br	100e6c4 <__udivdi3+0xdc>

0100ebc4 <__umoddi3>:
 100ebc4:	defff104 	addi	sp,sp,-60
 100ebc8:	dd800b15 	stw	r22,44(sp)
 100ebcc:	dd000915 	stw	r20,36(sp)
 100ebd0:	dc000515 	stw	r16,20(sp)
 100ebd4:	dfc00e15 	stw	ra,56(sp)
 100ebd8:	df000d15 	stw	fp,52(sp)
 100ebdc:	ddc00c15 	stw	r23,48(sp)
 100ebe0:	dd400a15 	stw	r21,40(sp)
 100ebe4:	dcc00815 	stw	r19,32(sp)
 100ebe8:	dc800715 	stw	r18,28(sp)
 100ebec:	dc400615 	stw	r17,24(sp)
 100ebf0:	3021883a 	mov	r16,r6
 100ebf4:	202d883a 	mov	r22,r4
 100ebf8:	2829883a 	mov	r20,r5
 100ebfc:	38002b1e 	bne	r7,zero,100ecac <__umoddi3+0xe8>
 100ec00:	29805036 	bltu	r5,r6,100ed44 <__umoddi3+0x180>
 100ec04:	30008a26 	beq	r6,zero,100ee30 <__umoddi3+0x26c>
 100ec08:	00bfffd4 	movui	r2,65535
 100ec0c:	14008236 	bltu	r2,r16,100ee18 <__umoddi3+0x254>
 100ec10:	00803fc4 	movi	r2,255
 100ec14:	14013636 	bltu	r2,r16,100f0f0 <__umoddi3+0x52c>
 100ec18:	000b883a 	mov	r5,zero
 100ec1c:	0005883a 	mov	r2,zero
 100ec20:	8084d83a 	srl	r2,r16,r2
 100ec24:	01004074 	movhi	r4,257
 100ec28:	21149f04 	addi	r4,r4,21116
 100ec2c:	01800804 	movi	r6,32
 100ec30:	1105883a 	add	r2,r2,r4
 100ec34:	10c00003 	ldbu	r3,0(r2)
 100ec38:	28c7883a 	add	r3,r5,r3
 100ec3c:	30efc83a 	sub	r23,r6,r3
 100ec40:	b800941e 	bne	r23,zero,100ee94 <__umoddi3+0x2d0>
 100ec44:	802ad43a 	srli	r21,r16,16
 100ec48:	a423c83a 	sub	r17,r20,r16
 100ec4c:	0039883a 	mov	fp,zero
 100ec50:	853fffcc 	andi	r20,r16,65535
 100ec54:	8809883a 	mov	r4,r17
 100ec58:	a80b883a 	mov	r5,r21
 100ec5c:	10103dc0 	call	10103dc <__udivsi3>
 100ec60:	8809883a 	mov	r4,r17
 100ec64:	a80b883a 	mov	r5,r21
 100ec68:	a0a3383a 	mul	r17,r20,r2
 100ec6c:	10103e40 	call	10103e4 <__umodsi3>
 100ec70:	1004943a 	slli	r2,r2,16
 100ec74:	b006d43a 	srli	r3,r22,16
 100ec78:	10c4b03a 	or	r2,r2,r3
 100ec7c:	1440032e 	bgeu	r2,r17,100ec8c <__umoddi3+0xc8>
 100ec80:	1405883a 	add	r2,r2,r16
 100ec84:	14000136 	bltu	r2,r16,100ec8c <__umoddi3+0xc8>
 100ec88:	14413536 	bltu	r2,r17,100f160 <__umoddi3+0x59c>
 100ec8c:	1463c83a 	sub	r17,r2,r17
 100ec90:	8809883a 	mov	r4,r17
 100ec94:	a80b883a 	mov	r5,r21
 100ec98:	10103dc0 	call	10103dc <__udivsi3>
 100ec9c:	8809883a 	mov	r4,r17
 100eca0:	a0a3383a 	mul	r17,r20,r2
 100eca4:	a80b883a 	mov	r5,r21
 100eca8:	00004d06 	br	100ede0 <__umoddi3+0x21c>
 100ecac:	380d883a 	mov	r6,r7
 100ecb0:	29c0102e 	bgeu	r5,r7,100ecf4 <__umoddi3+0x130>
 100ecb4:	2011883a 	mov	r8,r4
 100ecb8:	2813883a 	mov	r9,r5
 100ecbc:	4005883a 	mov	r2,r8
 100ecc0:	4807883a 	mov	r3,r9
 100ecc4:	dfc00e17 	ldw	ra,56(sp)
 100ecc8:	df000d17 	ldw	fp,52(sp)
 100eccc:	ddc00c17 	ldw	r23,48(sp)
 100ecd0:	dd800b17 	ldw	r22,44(sp)
 100ecd4:	dd400a17 	ldw	r21,40(sp)
 100ecd8:	dd000917 	ldw	r20,36(sp)
 100ecdc:	dcc00817 	ldw	r19,32(sp)
 100ece0:	dc800717 	ldw	r18,28(sp)
 100ece4:	dc400617 	ldw	r17,24(sp)
 100ece8:	dc000517 	ldw	r16,20(sp)
 100ecec:	dec00f04 	addi	sp,sp,60
 100ecf0:	f800283a 	ret
 100ecf4:	00bfffd4 	movui	r2,65535
 100ecf8:	11c05a36 	bltu	r2,r7,100ee64 <__umoddi3+0x2a0>
 100ecfc:	00803fc4 	movi	r2,255
 100ed00:	11c0fe36 	bltu	r2,r7,100f0fc <__umoddi3+0x538>
 100ed04:	000b883a 	mov	r5,zero
 100ed08:	0005883a 	mov	r2,zero
 100ed0c:	3084d83a 	srl	r2,r6,r2
 100ed10:	01004074 	movhi	r4,257
 100ed14:	21149f04 	addi	r4,r4,21116
 100ed18:	01c00804 	movi	r7,32
 100ed1c:	1105883a 	add	r2,r2,r4
 100ed20:	10c00003 	ldbu	r3,0(r2)
 100ed24:	28c7883a 	add	r3,r5,r3
 100ed28:	38ebc83a 	sub	r21,r7,r3
 100ed2c:	a800851e 	bne	r21,zero,100ef44 <__umoddi3+0x380>
 100ed30:	35005236 	bltu	r6,r20,100ee7c <__umoddi3+0x2b8>
 100ed34:	b400512e 	bgeu	r22,r16,100ee7c <__umoddi3+0x2b8>
 100ed38:	b011883a 	mov	r8,r22
 100ed3c:	a013883a 	mov	r9,r20
 100ed40:	003fde06 	br	100ecbc <__umoddi3+0xf8>
 100ed44:	00bfffd4 	movui	r2,65535
 100ed48:	11804036 	bltu	r2,r6,100ee4c <__umoddi3+0x288>
 100ed4c:	00803fc4 	movi	r2,255
 100ed50:	1180ed36 	bltu	r2,r6,100f108 <__umoddi3+0x544>
 100ed54:	000b883a 	mov	r5,zero
 100ed58:	0005883a 	mov	r2,zero
 100ed5c:	8084d83a 	srl	r2,r16,r2
 100ed60:	01004074 	movhi	r4,257
 100ed64:	21149f04 	addi	r4,r4,21116
 100ed68:	01800804 	movi	r6,32
 100ed6c:	1105883a 	add	r2,r2,r4
 100ed70:	10c00003 	ldbu	r3,0(r2)
 100ed74:	28c7883a 	add	r3,r5,r3
 100ed78:	30c7c83a 	sub	r3,r6,r3
 100ed7c:	1800bf1e 	bne	r3,zero,100f07c <__umoddi3+0x4b8>
 100ed80:	0039883a 	mov	fp,zero
 100ed84:	802ad43a 	srli	r21,r16,16
 100ed88:	a009883a 	mov	r4,r20
 100ed8c:	85ffffcc 	andi	r23,r16,65535
 100ed90:	a80b883a 	mov	r5,r21
 100ed94:	10103dc0 	call	10103dc <__udivsi3>
 100ed98:	a009883a 	mov	r4,r20
 100ed9c:	a80b883a 	mov	r5,r21
 100eda0:	b8a3383a 	mul	r17,r23,r2
 100eda4:	10103e40 	call	10103e4 <__umodsi3>
 100eda8:	1004943a 	slli	r2,r2,16
 100edac:	b006d43a 	srli	r3,r22,16
 100edb0:	10c4b03a 	or	r2,r2,r3
 100edb4:	1440032e 	bgeu	r2,r17,100edc4 <__umoddi3+0x200>
 100edb8:	1405883a 	add	r2,r2,r16
 100edbc:	14000136 	bltu	r2,r16,100edc4 <__umoddi3+0x200>
 100edc0:	1440e536 	bltu	r2,r17,100f158 <__umoddi3+0x594>
 100edc4:	1463c83a 	sub	r17,r2,r17
 100edc8:	8809883a 	mov	r4,r17
 100edcc:	a80b883a 	mov	r5,r21
 100edd0:	10103dc0 	call	10103dc <__udivsi3>
 100edd4:	8809883a 	mov	r4,r17
 100edd8:	b8a3383a 	mul	r17,r23,r2
 100eddc:	a80b883a 	mov	r5,r21
 100ede0:	10103e40 	call	10103e4 <__umodsi3>
 100ede4:	1004943a 	slli	r2,r2,16
 100ede8:	b0ffffcc 	andi	r3,r22,65535
 100edec:	10c4b03a 	or	r2,r2,r3
 100edf0:	1440042e 	bgeu	r2,r17,100ee04 <__umoddi3+0x240>
 100edf4:	1405883a 	add	r2,r2,r16
 100edf8:	14000236 	bltu	r2,r16,100ee04 <__umoddi3+0x240>
 100edfc:	1440012e 	bgeu	r2,r17,100ee04 <__umoddi3+0x240>
 100ee00:	1405883a 	add	r2,r2,r16
 100ee04:	1445c83a 	sub	r2,r2,r17
 100ee08:	1724d83a 	srl	r18,r2,fp
 100ee0c:	0013883a 	mov	r9,zero
 100ee10:	9011883a 	mov	r8,r18
 100ee14:	003fa906 	br	100ecbc <__umoddi3+0xf8>
 100ee18:	00804034 	movhi	r2,256
 100ee1c:	10bfffc4 	addi	r2,r2,-1
 100ee20:	1400b036 	bltu	r2,r16,100f0e4 <__umoddi3+0x520>
 100ee24:	01400404 	movi	r5,16
 100ee28:	2805883a 	mov	r2,r5
 100ee2c:	003f7c06 	br	100ec20 <__umoddi3+0x5c>
 100ee30:	01000044 	movi	r4,1
 100ee34:	000b883a 	mov	r5,zero
 100ee38:	10103dc0 	call	10103dc <__udivsi3>
 100ee3c:	1021883a 	mov	r16,r2
 100ee40:	00bfffd4 	movui	r2,65535
 100ee44:	143ff436 	bltu	r2,r16,100ee18 <__umoddi3+0x254>
 100ee48:	003f7106 	br	100ec10 <__umoddi3+0x4c>
 100ee4c:	00804034 	movhi	r2,256
 100ee50:	10bfffc4 	addi	r2,r2,-1
 100ee54:	1180af36 	bltu	r2,r6,100f114 <__umoddi3+0x550>
 100ee58:	01400404 	movi	r5,16
 100ee5c:	2805883a 	mov	r2,r5
 100ee60:	003fbe06 	br	100ed5c <__umoddi3+0x198>
 100ee64:	00804034 	movhi	r2,256
 100ee68:	10bfffc4 	addi	r2,r2,-1
 100ee6c:	11c0ac36 	bltu	r2,r7,100f120 <__umoddi3+0x55c>
 100ee70:	01400404 	movi	r5,16
 100ee74:	2805883a 	mov	r2,r5
 100ee78:	003fa406 	br	100ed0c <__umoddi3+0x148>
 100ee7c:	b409c83a 	sub	r4,r22,r16
 100ee80:	b105803a 	cmpltu	r2,r22,r4
 100ee84:	a187c83a 	sub	r3,r20,r6
 100ee88:	18a9c83a 	sub	r20,r3,r2
 100ee8c:	202d883a 	mov	r22,r4
 100ee90:	003fa906 	br	100ed38 <__umoddi3+0x174>
 100ee94:	85e0983a 	sll	r16,r16,r23
 100ee98:	35c5c83a 	sub	r2,r6,r23
 100ee9c:	a0a2d83a 	srl	r17,r20,r2
 100eea0:	802ad43a 	srli	r21,r16,16
 100eea4:	b084d83a 	srl	r2,r22,r2
 100eea8:	a5c6983a 	sll	r3,r20,r23
 100eeac:	8809883a 	mov	r4,r17
 100eeb0:	a80b883a 	mov	r5,r21
 100eeb4:	1886b03a 	or	r3,r3,r2
 100eeb8:	d8c00115 	stw	r3,4(sp)
 100eebc:	853fffcc 	andi	r20,r16,65535
 100eec0:	10103dc0 	call	10103dc <__udivsi3>
 100eec4:	8809883a 	mov	r4,r17
 100eec8:	a80b883a 	mov	r5,r21
 100eecc:	a0a3383a 	mul	r17,r20,r2
 100eed0:	10103e40 	call	10103e4 <__umodsi3>
 100eed4:	d9000117 	ldw	r4,4(sp)
 100eed8:	1004943a 	slli	r2,r2,16
 100eedc:	b839883a 	mov	fp,r23
 100eee0:	2006d43a 	srli	r3,r4,16
 100eee4:	10c4b03a 	or	r2,r2,r3
 100eee8:	1440022e 	bgeu	r2,r17,100eef4 <__umoddi3+0x330>
 100eeec:	1405883a 	add	r2,r2,r16
 100eef0:	1400962e 	bgeu	r2,r16,100f14c <__umoddi3+0x588>
 100eef4:	1463c83a 	sub	r17,r2,r17
 100eef8:	8809883a 	mov	r4,r17
 100eefc:	a80b883a 	mov	r5,r21
 100ef00:	10103dc0 	call	10103dc <__udivsi3>
 100ef04:	8809883a 	mov	r4,r17
 100ef08:	a80b883a 	mov	r5,r21
 100ef0c:	a0a3383a 	mul	r17,r20,r2
 100ef10:	10103e40 	call	10103e4 <__umodsi3>
 100ef14:	d9400117 	ldw	r5,4(sp)
 100ef18:	1004943a 	slli	r2,r2,16
 100ef1c:	28ffffcc 	andi	r3,r5,65535
 100ef20:	10c4b03a 	or	r2,r2,r3
 100ef24:	1440042e 	bgeu	r2,r17,100ef38 <__umoddi3+0x374>
 100ef28:	1405883a 	add	r2,r2,r16
 100ef2c:	14000236 	bltu	r2,r16,100ef38 <__umoddi3+0x374>
 100ef30:	1440012e 	bgeu	r2,r17,100ef38 <__umoddi3+0x374>
 100ef34:	1405883a 	add	r2,r2,r16
 100ef38:	b5ec983a 	sll	r22,r22,r23
 100ef3c:	1463c83a 	sub	r17,r2,r17
 100ef40:	003f4406 	br	100ec54 <__umoddi3+0x90>
 100ef44:	3d4fc83a 	sub	r7,r7,r21
 100ef48:	3546983a 	sll	r3,r6,r21
 100ef4c:	81c4d83a 	srl	r2,r16,r7
 100ef50:	a1e2d83a 	srl	r17,r20,r7
 100ef54:	a54c983a 	sll	r6,r20,r21
 100ef58:	18aeb03a 	or	r23,r3,r2
 100ef5c:	b828d43a 	srli	r20,r23,16
 100ef60:	b1c4d83a 	srl	r2,r22,r7
 100ef64:	8809883a 	mov	r4,r17
 100ef68:	a00b883a 	mov	r5,r20
 100ef6c:	308cb03a 	or	r6,r6,r2
 100ef70:	d9c00315 	stw	r7,12(sp)
 100ef74:	d9800215 	stw	r6,8(sp)
 100ef78:	10103dc0 	call	10103dc <__udivsi3>
 100ef7c:	8809883a 	mov	r4,r17
 100ef80:	a00b883a 	mov	r5,r20
 100ef84:	1039883a 	mov	fp,r2
 100ef88:	10103e40 	call	10103e4 <__umodsi3>
 100ef8c:	b8ffffcc 	andi	r3,r23,65535
 100ef90:	d8c00415 	stw	r3,16(sp)
 100ef94:	d9000217 	ldw	r4,8(sp)
 100ef98:	d9400417 	ldw	r5,16(sp)
 100ef9c:	1004943a 	slli	r2,r2,16
 100efa0:	2006d43a 	srli	r3,r4,16
 100efa4:	8560983a 	sll	r16,r16,r21
 100efa8:	2f23383a 	mul	r17,r5,fp
 100efac:	10c4b03a 	or	r2,r2,r3
 100efb0:	dc000015 	stw	r16,0(sp)
 100efb4:	b56c983a 	sll	r22,r22,r21
 100efb8:	1440032e 	bgeu	r2,r17,100efc8 <__umoddi3+0x404>
 100efbc:	15c5883a 	add	r2,r2,r23
 100efc0:	e73fffc4 	addi	fp,fp,-1
 100efc4:	15c05d2e 	bgeu	r2,r23,100f13c <__umoddi3+0x578>
 100efc8:	1463c83a 	sub	r17,r2,r17
 100efcc:	8809883a 	mov	r4,r17
 100efd0:	a00b883a 	mov	r5,r20
 100efd4:	10103dc0 	call	10103dc <__udivsi3>
 100efd8:	8809883a 	mov	r4,r17
 100efdc:	a00b883a 	mov	r5,r20
 100efe0:	1021883a 	mov	r16,r2
 100efe4:	10103e40 	call	10103e4 <__umodsi3>
 100efe8:	d8c00417 	ldw	r3,16(sp)
 100efec:	d9000217 	ldw	r4,8(sp)
 100eff0:	1004943a 	slli	r2,r2,16
 100eff4:	1c23383a 	mul	r17,r3,r16
 100eff8:	20ffffcc 	andi	r3,r4,65535
 100effc:	10ceb03a 	or	r7,r2,r3
 100f000:	3c40032e 	bgeu	r7,r17,100f010 <__umoddi3+0x44c>
 100f004:	3dcf883a 	add	r7,r7,r23
 100f008:	843fffc4 	addi	r16,r16,-1
 100f00c:	3dc0472e 	bgeu	r7,r23,100f12c <__umoddi3+0x568>
 100f010:	e004943a 	slli	r2,fp,16
 100f014:	d9400017 	ldw	r5,0(sp)
 100f018:	3c4fc83a 	sub	r7,r7,r17
 100f01c:	8084b03a 	or	r2,r16,r2
 100f020:	28ffffcc 	andi	r3,r5,65535
 100f024:	280cd43a 	srli	r6,r5,16
 100f028:	100ad43a 	srli	r5,r2,16
 100f02c:	10bfffcc 	andi	r2,r2,65535
 100f030:	10d1383a 	mul	r8,r2,r3
 100f034:	28c7383a 	mul	r3,r5,r3
 100f038:	1185383a 	mul	r2,r2,r6
 100f03c:	4008d43a 	srli	r4,r8,16
 100f040:	298b383a 	mul	r5,r5,r6
 100f044:	10c5883a 	add	r2,r2,r3
 100f048:	2089883a 	add	r4,r4,r2
 100f04c:	20c0022e 	bgeu	r4,r3,100f058 <__umoddi3+0x494>
 100f050:	00800074 	movhi	r2,1
 100f054:	288b883a 	add	r5,r5,r2
 100f058:	2004d43a 	srli	r2,r4,16
 100f05c:	2008943a 	slli	r4,r4,16
 100f060:	40ffffcc 	andi	r3,r8,65535
 100f064:	288b883a 	add	r5,r5,r2
 100f068:	20c9883a 	add	r4,r4,r3
 100f06c:	39400b36 	bltu	r7,r5,100f09c <__umoddi3+0x4d8>
 100f070:	39403d26 	beq	r7,r5,100f168 <__umoddi3+0x5a4>
 100f074:	394bc83a 	sub	r5,r7,r5
 100f078:	00000f06 	br	100f0b8 <__umoddi3+0x4f4>
 100f07c:	30c5c83a 	sub	r2,r6,r3
 100f080:	1839883a 	mov	fp,r3
 100f084:	b084d83a 	srl	r2,r22,r2
 100f088:	a0c6983a 	sll	r3,r20,r3
 100f08c:	8720983a 	sll	r16,r16,fp
 100f090:	b72c983a 	sll	r22,r22,fp
 100f094:	18a8b03a 	or	r20,r3,r2
 100f098:	003f3a06 	br	100ed84 <__umoddi3+0x1c0>
 100f09c:	d8c00017 	ldw	r3,0(sp)
 100f0a0:	20c5c83a 	sub	r2,r4,r3
 100f0a4:	2089803a 	cmpltu	r4,r4,r2
 100f0a8:	2dc7c83a 	sub	r3,r5,r23
 100f0ac:	1907c83a 	sub	r3,r3,r4
 100f0b0:	38cbc83a 	sub	r5,r7,r3
 100f0b4:	1009883a 	mov	r4,r2
 100f0b8:	b105c83a 	sub	r2,r22,r4
 100f0bc:	b087803a 	cmpltu	r3,r22,r2
 100f0c0:	28c7c83a 	sub	r3,r5,r3
 100f0c4:	d9400317 	ldw	r5,12(sp)
 100f0c8:	1544d83a 	srl	r2,r2,r21
 100f0cc:	1948983a 	sll	r4,r3,r5
 100f0d0:	1d46d83a 	srl	r3,r3,r21
 100f0d4:	20a4b03a 	or	r18,r4,r2
 100f0d8:	9011883a 	mov	r8,r18
 100f0dc:	1813883a 	mov	r9,r3
 100f0e0:	003ef606 	br	100ecbc <__umoddi3+0xf8>
 100f0e4:	01400604 	movi	r5,24
 100f0e8:	2805883a 	mov	r2,r5
 100f0ec:	003ecc06 	br	100ec20 <__umoddi3+0x5c>
 100f0f0:	01400204 	movi	r5,8
 100f0f4:	2805883a 	mov	r2,r5
 100f0f8:	003ec906 	br	100ec20 <__umoddi3+0x5c>
 100f0fc:	01400204 	movi	r5,8
 100f100:	2805883a 	mov	r2,r5
 100f104:	003f0106 	br	100ed0c <__umoddi3+0x148>
 100f108:	01400204 	movi	r5,8
 100f10c:	2805883a 	mov	r2,r5
 100f110:	003f1206 	br	100ed5c <__umoddi3+0x198>
 100f114:	01400604 	movi	r5,24
 100f118:	2805883a 	mov	r2,r5
 100f11c:	003f0f06 	br	100ed5c <__umoddi3+0x198>
 100f120:	01400604 	movi	r5,24
 100f124:	2805883a 	mov	r2,r5
 100f128:	003ef806 	br	100ed0c <__umoddi3+0x148>
 100f12c:	3c7fb82e 	bgeu	r7,r17,100f010 <__umoddi3+0x44c>
 100f130:	843fffc4 	addi	r16,r16,-1
 100f134:	3dcf883a 	add	r7,r7,r23
 100f138:	003fb506 	br	100f010 <__umoddi3+0x44c>
 100f13c:	147fa22e 	bgeu	r2,r17,100efc8 <__umoddi3+0x404>
 100f140:	e73fffc4 	addi	fp,fp,-1
 100f144:	15c5883a 	add	r2,r2,r23
 100f148:	003f9f06 	br	100efc8 <__umoddi3+0x404>
 100f14c:	147f692e 	bgeu	r2,r17,100eef4 <__umoddi3+0x330>
 100f150:	1405883a 	add	r2,r2,r16
 100f154:	003f6706 	br	100eef4 <__umoddi3+0x330>
 100f158:	1405883a 	add	r2,r2,r16
 100f15c:	003f1906 	br	100edc4 <__umoddi3+0x200>
 100f160:	1405883a 	add	r2,r2,r16
 100f164:	003ec906 	br	100ec8c <__umoddi3+0xc8>
 100f168:	b13fcc36 	bltu	r22,r4,100f09c <__umoddi3+0x4d8>
 100f16c:	000b883a 	mov	r5,zero
 100f170:	003fd106 	br	100f0b8 <__umoddi3+0x4f4>

0100f174 <_fpadd_parts>:
 100f174:	defff804 	addi	sp,sp,-32
 100f178:	dcc00315 	stw	r19,12(sp)
 100f17c:	2027883a 	mov	r19,r4
 100f180:	21000017 	ldw	r4,0(r4)
 100f184:	00c00044 	movi	r3,1
 100f188:	dd400515 	stw	r21,20(sp)
 100f18c:	dd000415 	stw	r20,16(sp)
 100f190:	ddc00715 	stw	r23,28(sp)
 100f194:	dd800615 	stw	r22,24(sp)
 100f198:	dc800215 	stw	r18,8(sp)
 100f19c:	dc400115 	stw	r17,4(sp)
 100f1a0:	dc000015 	stw	r16,0(sp)
 100f1a4:	282b883a 	mov	r21,r5
 100f1a8:	3029883a 	mov	r20,r6
 100f1ac:	1900632e 	bgeu	r3,r4,100f33c <_fpadd_parts+0x1c8>
 100f1b0:	28800017 	ldw	r2,0(r5)
 100f1b4:	1880812e 	bgeu	r3,r2,100f3bc <_fpadd_parts+0x248>
 100f1b8:	00c00104 	movi	r3,4
 100f1bc:	20c0dc26 	beq	r4,r3,100f530 <_fpadd_parts+0x3bc>
 100f1c0:	10c07e26 	beq	r2,r3,100f3bc <_fpadd_parts+0x248>
 100f1c4:	00c00084 	movi	r3,2
 100f1c8:	10c06726 	beq	r2,r3,100f368 <_fpadd_parts+0x1f4>
 100f1cc:	20c07b26 	beq	r4,r3,100f3bc <_fpadd_parts+0x248>
 100f1d0:	9dc00217 	ldw	r23,8(r19)
 100f1d4:	28c00217 	ldw	r3,8(r5)
 100f1d8:	9c400317 	ldw	r17,12(r19)
 100f1dc:	2bc00317 	ldw	r15,12(r5)
 100f1e0:	b8cdc83a 	sub	r6,r23,r3
 100f1e4:	9c800417 	ldw	r18,16(r19)
 100f1e8:	2c000417 	ldw	r16,16(r5)
 100f1ec:	3009883a 	mov	r4,r6
 100f1f0:	30009716 	blt	r6,zero,100f450 <_fpadd_parts+0x2dc>
 100f1f4:	00800fc4 	movi	r2,63
 100f1f8:	11806b16 	blt	r2,r6,100f3a8 <_fpadd_parts+0x234>
 100f1fc:	0100a40e 	bge	zero,r4,100f490 <_fpadd_parts+0x31c>
 100f200:	35bff804 	addi	r22,r6,-32
 100f204:	b000bc16 	blt	r22,zero,100f4f8 <_fpadd_parts+0x384>
 100f208:	8596d83a 	srl	r11,r16,r22
 100f20c:	0019883a 	mov	r12,zero
 100f210:	0013883a 	mov	r9,zero
 100f214:	01000044 	movi	r4,1
 100f218:	0015883a 	mov	r10,zero
 100f21c:	b000be16 	blt	r22,zero,100f518 <_fpadd_parts+0x3a4>
 100f220:	2590983a 	sll	r8,r4,r22
 100f224:	000f883a 	mov	r7,zero
 100f228:	00bfffc4 	movi	r2,-1
 100f22c:	3889883a 	add	r4,r7,r2
 100f230:	408b883a 	add	r5,r8,r2
 100f234:	21cd803a 	cmpltu	r6,r4,r7
 100f238:	314b883a 	add	r5,r6,r5
 100f23c:	7904703a 	and	r2,r15,r4
 100f240:	8146703a 	and	r3,r16,r5
 100f244:	10c4b03a 	or	r2,r2,r3
 100f248:	10000226 	beq	r2,zero,100f254 <_fpadd_parts+0xe0>
 100f24c:	02400044 	movi	r9,1
 100f250:	0015883a 	mov	r10,zero
 100f254:	5a5eb03a 	or	r15,r11,r9
 100f258:	62a0b03a 	or	r16,r12,r10
 100f25c:	99400117 	ldw	r5,4(r19)
 100f260:	a8800117 	ldw	r2,4(r21)
 100f264:	28806e26 	beq	r5,r2,100f420 <_fpadd_parts+0x2ac>
 100f268:	28006626 	beq	r5,zero,100f404 <_fpadd_parts+0x290>
 100f26c:	7c45c83a 	sub	r2,r15,r17
 100f270:	7889803a 	cmpltu	r4,r15,r2
 100f274:	8487c83a 	sub	r3,r16,r18
 100f278:	1909c83a 	sub	r4,r3,r4
 100f27c:	100d883a 	mov	r6,r2
 100f280:	200f883a 	mov	r7,r4
 100f284:	38007716 	blt	r7,zero,100f464 <_fpadd_parts+0x2f0>
 100f288:	a5c00215 	stw	r23,8(r20)
 100f28c:	a1c00415 	stw	r7,16(r20)
 100f290:	a0000115 	stw	zero,4(r20)
 100f294:	a1800315 	stw	r6,12(r20)
 100f298:	a2000317 	ldw	r8,12(r20)
 100f29c:	a2400417 	ldw	r9,16(r20)
 100f2a0:	00bfffc4 	movi	r2,-1
 100f2a4:	408b883a 	add	r5,r8,r2
 100f2a8:	2a09803a 	cmpltu	r4,r5,r8
 100f2ac:	488d883a 	add	r6,r9,r2
 100f2b0:	01c40034 	movhi	r7,4096
 100f2b4:	39ffffc4 	addi	r7,r7,-1
 100f2b8:	218d883a 	add	r6,r4,r6
 100f2bc:	39801736 	bltu	r7,r6,100f31c <_fpadd_parts+0x1a8>
 100f2c0:	31c06526 	beq	r6,r7,100f458 <_fpadd_parts+0x2e4>
 100f2c4:	a3000217 	ldw	r12,8(r20)
 100f2c8:	4209883a 	add	r4,r8,r8
 100f2cc:	00bfffc4 	movi	r2,-1
 100f2d0:	220f803a 	cmpltu	r7,r4,r8
 100f2d4:	4a4b883a 	add	r5,r9,r9
 100f2d8:	394f883a 	add	r7,r7,r5
 100f2dc:	2095883a 	add	r10,r4,r2
 100f2e0:	3897883a 	add	r11,r7,r2
 100f2e4:	510d803a 	cmpltu	r6,r10,r4
 100f2e8:	6099883a 	add	r12,r12,r2
 100f2ec:	32d7883a 	add	r11,r6,r11
 100f2f0:	00840034 	movhi	r2,4096
 100f2f4:	10bfffc4 	addi	r2,r2,-1
 100f2f8:	2011883a 	mov	r8,r4
 100f2fc:	3813883a 	mov	r9,r7
 100f300:	a1000315 	stw	r4,12(r20)
 100f304:	a1c00415 	stw	r7,16(r20)
 100f308:	a3000215 	stw	r12,8(r20)
 100f30c:	12c00336 	bltu	r2,r11,100f31c <_fpadd_parts+0x1a8>
 100f310:	58bfed1e 	bne	r11,r2,100f2c8 <_fpadd_parts+0x154>
 100f314:	00bfff84 	movi	r2,-2
 100f318:	12bfeb2e 	bgeu	r2,r10,100f2c8 <_fpadd_parts+0x154>
 100f31c:	a2800417 	ldw	r10,16(r20)
 100f320:	008000c4 	movi	r2,3
 100f324:	00c80034 	movhi	r3,8192
 100f328:	18ffffc4 	addi	r3,r3,-1
 100f32c:	a2400317 	ldw	r9,12(r20)
 100f330:	a0800015 	stw	r2,0(r20)
 100f334:	1a802336 	bltu	r3,r10,100f3c4 <_fpadd_parts+0x250>
 100f338:	a027883a 	mov	r19,r20
 100f33c:	9805883a 	mov	r2,r19
 100f340:	ddc00717 	ldw	r23,28(sp)
 100f344:	dd800617 	ldw	r22,24(sp)
 100f348:	dd400517 	ldw	r21,20(sp)
 100f34c:	dd000417 	ldw	r20,16(sp)
 100f350:	dcc00317 	ldw	r19,12(sp)
 100f354:	dc800217 	ldw	r18,8(sp)
 100f358:	dc400117 	ldw	r17,4(sp)
 100f35c:	dc000017 	ldw	r16,0(sp)
 100f360:	dec00804 	addi	sp,sp,32
 100f364:	f800283a 	ret
 100f368:	20fff41e 	bne	r4,r3,100f33c <_fpadd_parts+0x1c8>
 100f36c:	31000015 	stw	r4,0(r6)
 100f370:	98800117 	ldw	r2,4(r19)
 100f374:	30800115 	stw	r2,4(r6)
 100f378:	98c00217 	ldw	r3,8(r19)
 100f37c:	30c00215 	stw	r3,8(r6)
 100f380:	98800317 	ldw	r2,12(r19)
 100f384:	30800315 	stw	r2,12(r6)
 100f388:	98c00417 	ldw	r3,16(r19)
 100f38c:	30c00415 	stw	r3,16(r6)
 100f390:	98800117 	ldw	r2,4(r19)
 100f394:	28c00117 	ldw	r3,4(r5)
 100f398:	3027883a 	mov	r19,r6
 100f39c:	10c4703a 	and	r2,r2,r3
 100f3a0:	30800115 	stw	r2,4(r6)
 100f3a4:	003fe506 	br	100f33c <_fpadd_parts+0x1c8>
 100f3a8:	1dc02616 	blt	r3,r23,100f444 <_fpadd_parts+0x2d0>
 100f3ac:	0023883a 	mov	r17,zero
 100f3b0:	182f883a 	mov	r23,r3
 100f3b4:	0025883a 	mov	r18,zero
 100f3b8:	003fa806 	br	100f25c <_fpadd_parts+0xe8>
 100f3bc:	a827883a 	mov	r19,r21
 100f3c0:	003fde06 	br	100f33c <_fpadd_parts+0x1c8>
 100f3c4:	01800044 	movi	r6,1
 100f3c8:	500497fa 	slli	r2,r10,31
 100f3cc:	4808d07a 	srli	r4,r9,1
 100f3d0:	518ad83a 	srl	r5,r10,r6
 100f3d4:	a2000217 	ldw	r8,8(r20)
 100f3d8:	1108b03a 	or	r4,r2,r4
 100f3dc:	0007883a 	mov	r3,zero
 100f3e0:	4984703a 	and	r2,r9,r6
 100f3e4:	208cb03a 	or	r6,r4,r2
 100f3e8:	28ceb03a 	or	r7,r5,r3
 100f3ec:	42000044 	addi	r8,r8,1
 100f3f0:	a027883a 	mov	r19,r20
 100f3f4:	a1c00415 	stw	r7,16(r20)
 100f3f8:	a2000215 	stw	r8,8(r20)
 100f3fc:	a1800315 	stw	r6,12(r20)
 100f400:	003fce06 	br	100f33c <_fpadd_parts+0x1c8>
 100f404:	8bc5c83a 	sub	r2,r17,r15
 100f408:	8889803a 	cmpltu	r4,r17,r2
 100f40c:	9407c83a 	sub	r3,r18,r16
 100f410:	1909c83a 	sub	r4,r3,r4
 100f414:	100d883a 	mov	r6,r2
 100f418:	200f883a 	mov	r7,r4
 100f41c:	003f9906 	br	100f284 <_fpadd_parts+0x110>
 100f420:	7c45883a 	add	r2,r15,r17
 100f424:	13c9803a 	cmpltu	r4,r2,r15
 100f428:	8487883a 	add	r3,r16,r18
 100f42c:	20c9883a 	add	r4,r4,r3
 100f430:	a1400115 	stw	r5,4(r20)
 100f434:	a5c00215 	stw	r23,8(r20)
 100f438:	a0800315 	stw	r2,12(r20)
 100f43c:	a1000415 	stw	r4,16(r20)
 100f440:	003fb606 	br	100f31c <_fpadd_parts+0x1a8>
 100f444:	001f883a 	mov	r15,zero
 100f448:	0021883a 	mov	r16,zero
 100f44c:	003f8306 	br	100f25c <_fpadd_parts+0xe8>
 100f450:	018dc83a 	sub	r6,zero,r6
 100f454:	003f6706 	br	100f1f4 <_fpadd_parts+0x80>
 100f458:	00bfff84 	movi	r2,-2
 100f45c:	117faf36 	bltu	r2,r5,100f31c <_fpadd_parts+0x1a8>
 100f460:	003f9806 	br	100f2c4 <_fpadd_parts+0x150>
 100f464:	0005883a 	mov	r2,zero
 100f468:	1189c83a 	sub	r4,r2,r6
 100f46c:	1105803a 	cmpltu	r2,r2,r4
 100f470:	01cbc83a 	sub	r5,zero,r7
 100f474:	2885c83a 	sub	r2,r5,r2
 100f478:	01800044 	movi	r6,1
 100f47c:	a1800115 	stw	r6,4(r20)
 100f480:	a5c00215 	stw	r23,8(r20)
 100f484:	a1000315 	stw	r4,12(r20)
 100f488:	a0800415 	stw	r2,16(r20)
 100f48c:	003f8206 	br	100f298 <_fpadd_parts+0x124>
 100f490:	203f7226 	beq	r4,zero,100f25c <_fpadd_parts+0xe8>
 100f494:	35bff804 	addi	r22,r6,-32
 100f498:	b9af883a 	add	r23,r23,r6
 100f49c:	b0003116 	blt	r22,zero,100f564 <_fpadd_parts+0x3f0>
 100f4a0:	959ad83a 	srl	r13,r18,r22
 100f4a4:	001d883a 	mov	r14,zero
 100f4a8:	000f883a 	mov	r7,zero
 100f4ac:	01000044 	movi	r4,1
 100f4b0:	0011883a 	mov	r8,zero
 100f4b4:	b0002516 	blt	r22,zero,100f54c <_fpadd_parts+0x3d8>
 100f4b8:	2594983a 	sll	r10,r4,r22
 100f4bc:	0013883a 	mov	r9,zero
 100f4c0:	00bfffc4 	movi	r2,-1
 100f4c4:	4889883a 	add	r4,r9,r2
 100f4c8:	508b883a 	add	r5,r10,r2
 100f4cc:	224d803a 	cmpltu	r6,r4,r9
 100f4d0:	314b883a 	add	r5,r6,r5
 100f4d4:	8904703a 	and	r2,r17,r4
 100f4d8:	9146703a 	and	r3,r18,r5
 100f4dc:	10c4b03a 	or	r2,r2,r3
 100f4e0:	10000226 	beq	r2,zero,100f4ec <_fpadd_parts+0x378>
 100f4e4:	01c00044 	movi	r7,1
 100f4e8:	0011883a 	mov	r8,zero
 100f4ec:	69e2b03a 	or	r17,r13,r7
 100f4f0:	7224b03a 	or	r18,r14,r8
 100f4f4:	003f5906 	br	100f25c <_fpadd_parts+0xe8>
 100f4f8:	8407883a 	add	r3,r16,r16
 100f4fc:	008007c4 	movi	r2,31
 100f500:	1185c83a 	sub	r2,r2,r6
 100f504:	1886983a 	sll	r3,r3,r2
 100f508:	7996d83a 	srl	r11,r15,r6
 100f50c:	8198d83a 	srl	r12,r16,r6
 100f510:	1ad6b03a 	or	r11,r3,r11
 100f514:	003f3e06 	br	100f210 <_fpadd_parts+0x9c>
 100f518:	2006d07a 	srli	r3,r4,1
 100f51c:	008007c4 	movi	r2,31
 100f520:	1185c83a 	sub	r2,r2,r6
 100f524:	1890d83a 	srl	r8,r3,r2
 100f528:	218e983a 	sll	r7,r4,r6
 100f52c:	003f3e06 	br	100f228 <_fpadd_parts+0xb4>
 100f530:	113f821e 	bne	r2,r4,100f33c <_fpadd_parts+0x1c8>
 100f534:	28c00117 	ldw	r3,4(r5)
 100f538:	98800117 	ldw	r2,4(r19)
 100f53c:	10ff7f26 	beq	r2,r3,100f33c <_fpadd_parts+0x1c8>
 100f540:	04c04074 	movhi	r19,257
 100f544:	9cd49a04 	addi	r19,r19,21096
 100f548:	003f7c06 	br	100f33c <_fpadd_parts+0x1c8>
 100f54c:	2006d07a 	srli	r3,r4,1
 100f550:	008007c4 	movi	r2,31
 100f554:	1185c83a 	sub	r2,r2,r6
 100f558:	1894d83a 	srl	r10,r3,r2
 100f55c:	2192983a 	sll	r9,r4,r6
 100f560:	003fd706 	br	100f4c0 <_fpadd_parts+0x34c>
 100f564:	9487883a 	add	r3,r18,r18
 100f568:	008007c4 	movi	r2,31
 100f56c:	1185c83a 	sub	r2,r2,r6
 100f570:	1886983a 	sll	r3,r3,r2
 100f574:	899ad83a 	srl	r13,r17,r6
 100f578:	919cd83a 	srl	r14,r18,r6
 100f57c:	1b5ab03a 	or	r13,r3,r13
 100f580:	003fc906 	br	100f4a8 <_fpadd_parts+0x334>

0100f584 <__subdf3>:
 100f584:	deffea04 	addi	sp,sp,-88
 100f588:	dcc01415 	stw	r19,80(sp)
 100f58c:	dcc00404 	addi	r19,sp,16
 100f590:	2011883a 	mov	r8,r4
 100f594:	2813883a 	mov	r9,r5
 100f598:	dc401315 	stw	r17,76(sp)
 100f59c:	d809883a 	mov	r4,sp
 100f5a0:	980b883a 	mov	r5,r19
 100f5a4:	dc400904 	addi	r17,sp,36
 100f5a8:	dfc01515 	stw	ra,84(sp)
 100f5ac:	da400115 	stw	r9,4(sp)
 100f5b0:	d9c00315 	stw	r7,12(sp)
 100f5b4:	da000015 	stw	r8,0(sp)
 100f5b8:	d9800215 	stw	r6,8(sp)
 100f5bc:	10108180 	call	1010818 <__unpack_d>
 100f5c0:	d9000204 	addi	r4,sp,8
 100f5c4:	880b883a 	mov	r5,r17
 100f5c8:	10108180 	call	1010818 <__unpack_d>
 100f5cc:	d8800a17 	ldw	r2,40(sp)
 100f5d0:	880b883a 	mov	r5,r17
 100f5d4:	9809883a 	mov	r4,r19
 100f5d8:	d9800e04 	addi	r6,sp,56
 100f5dc:	1080005c 	xori	r2,r2,1
 100f5e0:	d8800a15 	stw	r2,40(sp)
 100f5e4:	100f1740 	call	100f174 <_fpadd_parts>
 100f5e8:	1009883a 	mov	r4,r2
 100f5ec:	10105040 	call	1010504 <__pack_d>
 100f5f0:	dfc01517 	ldw	ra,84(sp)
 100f5f4:	dcc01417 	ldw	r19,80(sp)
 100f5f8:	dc401317 	ldw	r17,76(sp)
 100f5fc:	dec01604 	addi	sp,sp,88
 100f600:	f800283a 	ret

0100f604 <__adddf3>:
 100f604:	deffea04 	addi	sp,sp,-88
 100f608:	dcc01415 	stw	r19,80(sp)
 100f60c:	dcc00404 	addi	r19,sp,16
 100f610:	2011883a 	mov	r8,r4
 100f614:	2813883a 	mov	r9,r5
 100f618:	dc401315 	stw	r17,76(sp)
 100f61c:	d809883a 	mov	r4,sp
 100f620:	980b883a 	mov	r5,r19
 100f624:	dc400904 	addi	r17,sp,36
 100f628:	dfc01515 	stw	ra,84(sp)
 100f62c:	da400115 	stw	r9,4(sp)
 100f630:	d9c00315 	stw	r7,12(sp)
 100f634:	da000015 	stw	r8,0(sp)
 100f638:	d9800215 	stw	r6,8(sp)
 100f63c:	10108180 	call	1010818 <__unpack_d>
 100f640:	d9000204 	addi	r4,sp,8
 100f644:	880b883a 	mov	r5,r17
 100f648:	10108180 	call	1010818 <__unpack_d>
 100f64c:	d9800e04 	addi	r6,sp,56
 100f650:	9809883a 	mov	r4,r19
 100f654:	880b883a 	mov	r5,r17
 100f658:	100f1740 	call	100f174 <_fpadd_parts>
 100f65c:	1009883a 	mov	r4,r2
 100f660:	10105040 	call	1010504 <__pack_d>
 100f664:	dfc01517 	ldw	ra,84(sp)
 100f668:	dcc01417 	ldw	r19,80(sp)
 100f66c:	dc401317 	ldw	r17,76(sp)
 100f670:	dec01604 	addi	sp,sp,88
 100f674:	f800283a 	ret

0100f678 <__muldf3>:
 100f678:	deffe004 	addi	sp,sp,-128
 100f67c:	dc401815 	stw	r17,96(sp)
 100f680:	dc400404 	addi	r17,sp,16
 100f684:	2011883a 	mov	r8,r4
 100f688:	2813883a 	mov	r9,r5
 100f68c:	dc001715 	stw	r16,92(sp)
 100f690:	d809883a 	mov	r4,sp
 100f694:	880b883a 	mov	r5,r17
 100f698:	dc000904 	addi	r16,sp,36
 100f69c:	dfc01f15 	stw	ra,124(sp)
 100f6a0:	da400115 	stw	r9,4(sp)
 100f6a4:	d9c00315 	stw	r7,12(sp)
 100f6a8:	da000015 	stw	r8,0(sp)
 100f6ac:	d9800215 	stw	r6,8(sp)
 100f6b0:	ddc01e15 	stw	r23,120(sp)
 100f6b4:	dd801d15 	stw	r22,116(sp)
 100f6b8:	dd401c15 	stw	r21,112(sp)
 100f6bc:	dd001b15 	stw	r20,108(sp)
 100f6c0:	dcc01a15 	stw	r19,104(sp)
 100f6c4:	dc801915 	stw	r18,100(sp)
 100f6c8:	10108180 	call	1010818 <__unpack_d>
 100f6cc:	d9000204 	addi	r4,sp,8
 100f6d0:	800b883a 	mov	r5,r16
 100f6d4:	10108180 	call	1010818 <__unpack_d>
 100f6d8:	d9000417 	ldw	r4,16(sp)
 100f6dc:	00800044 	movi	r2,1
 100f6e0:	1100102e 	bgeu	r2,r4,100f724 <__muldf3+0xac>
 100f6e4:	d8c00917 	ldw	r3,36(sp)
 100f6e8:	10c0062e 	bgeu	r2,r3,100f704 <__muldf3+0x8c>
 100f6ec:	00800104 	movi	r2,4
 100f6f0:	20800a26 	beq	r4,r2,100f71c <__muldf3+0xa4>
 100f6f4:	1880cc26 	beq	r3,r2,100fa28 <__muldf3+0x3b0>
 100f6f8:	00800084 	movi	r2,2
 100f6fc:	20800926 	beq	r4,r2,100f724 <__muldf3+0xac>
 100f700:	1880191e 	bne	r3,r2,100f768 <__muldf3+0xf0>
 100f704:	d8c00a17 	ldw	r3,40(sp)
 100f708:	d8800517 	ldw	r2,20(sp)
 100f70c:	8009883a 	mov	r4,r16
 100f710:	10c4c03a 	cmpne	r2,r2,r3
 100f714:	d8800a15 	stw	r2,40(sp)
 100f718:	00000706 	br	100f738 <__muldf3+0xc0>
 100f71c:	00800084 	movi	r2,2
 100f720:	1880c326 	beq	r3,r2,100fa30 <__muldf3+0x3b8>
 100f724:	d8800517 	ldw	r2,20(sp)
 100f728:	d8c00a17 	ldw	r3,40(sp)
 100f72c:	8809883a 	mov	r4,r17
 100f730:	10c4c03a 	cmpne	r2,r2,r3
 100f734:	d8800515 	stw	r2,20(sp)
 100f738:	10105040 	call	1010504 <__pack_d>
 100f73c:	dfc01f17 	ldw	ra,124(sp)
 100f740:	ddc01e17 	ldw	r23,120(sp)
 100f744:	dd801d17 	ldw	r22,116(sp)
 100f748:	dd401c17 	ldw	r21,112(sp)
 100f74c:	dd001b17 	ldw	r20,108(sp)
 100f750:	dcc01a17 	ldw	r19,104(sp)
 100f754:	dc801917 	ldw	r18,100(sp)
 100f758:	dc401817 	ldw	r17,96(sp)
 100f75c:	dc001717 	ldw	r16,92(sp)
 100f760:	dec02004 	addi	sp,sp,128
 100f764:	f800283a 	ret
 100f768:	dd800717 	ldw	r22,28(sp)
 100f76c:	dc800c17 	ldw	r18,48(sp)
 100f770:	002b883a 	mov	r21,zero
 100f774:	0023883a 	mov	r17,zero
 100f778:	a80b883a 	mov	r5,r21
 100f77c:	b00d883a 	mov	r6,r22
 100f780:	880f883a 	mov	r7,r17
 100f784:	ddc00817 	ldw	r23,32(sp)
 100f788:	dcc00d17 	ldw	r19,52(sp)
 100f78c:	9009883a 	mov	r4,r18
 100f790:	10103ec0 	call	10103ec <__muldi3>
 100f794:	001b883a 	mov	r13,zero
 100f798:	680f883a 	mov	r7,r13
 100f79c:	b009883a 	mov	r4,r22
 100f7a0:	000b883a 	mov	r5,zero
 100f7a4:	980d883a 	mov	r6,r19
 100f7a8:	b82d883a 	mov	r22,r23
 100f7ac:	002f883a 	mov	r23,zero
 100f7b0:	db401615 	stw	r13,88(sp)
 100f7b4:	d8801315 	stw	r2,76(sp)
 100f7b8:	d8c01415 	stw	r3,80(sp)
 100f7bc:	dcc01515 	stw	r19,84(sp)
 100f7c0:	10103ec0 	call	10103ec <__muldi3>
 100f7c4:	b00d883a 	mov	r6,r22
 100f7c8:	000b883a 	mov	r5,zero
 100f7cc:	9009883a 	mov	r4,r18
 100f7d0:	b80f883a 	mov	r7,r23
 100f7d4:	1021883a 	mov	r16,r2
 100f7d8:	1823883a 	mov	r17,r3
 100f7dc:	10103ec0 	call	10103ec <__muldi3>
 100f7e0:	8085883a 	add	r2,r16,r2
 100f7e4:	140d803a 	cmpltu	r6,r2,r16
 100f7e8:	88c7883a 	add	r3,r17,r3
 100f7ec:	30cd883a 	add	r6,r6,r3
 100f7f0:	1029883a 	mov	r20,r2
 100f7f4:	302b883a 	mov	r21,r6
 100f7f8:	da801317 	ldw	r10,76(sp)
 100f7fc:	dac01417 	ldw	r11,80(sp)
 100f800:	db001517 	ldw	r12,84(sp)
 100f804:	db401617 	ldw	r13,88(sp)
 100f808:	3440612e 	bgeu	r6,r17,100f990 <__muldf3+0x318>
 100f80c:	0009883a 	mov	r4,zero
 100f810:	5105883a 	add	r2,r10,r4
 100f814:	128d803a 	cmpltu	r6,r2,r10
 100f818:	5d07883a 	add	r3,r11,r20
 100f81c:	30cd883a 	add	r6,r6,r3
 100f820:	0021883a 	mov	r16,zero
 100f824:	04400044 	movi	r17,1
 100f828:	1025883a 	mov	r18,r2
 100f82c:	3027883a 	mov	r19,r6
 100f830:	32c06236 	bltu	r6,r11,100f9bc <__muldf3+0x344>
 100f834:	59807a26 	beq	r11,r6,100fa20 <__muldf3+0x3a8>
 100f838:	680b883a 	mov	r5,r13
 100f83c:	b80f883a 	mov	r7,r23
 100f840:	6009883a 	mov	r4,r12
 100f844:	b00d883a 	mov	r6,r22
 100f848:	10103ec0 	call	10103ec <__muldi3>
 100f84c:	1009883a 	mov	r4,r2
 100f850:	000f883a 	mov	r7,zero
 100f854:	1545883a 	add	r2,r2,r21
 100f858:	1111803a 	cmpltu	r8,r2,r4
 100f85c:	19c7883a 	add	r3,r3,r7
 100f860:	40c7883a 	add	r3,r8,r3
 100f864:	88cb883a 	add	r5,r17,r3
 100f868:	d8c00617 	ldw	r3,24(sp)
 100f86c:	8089883a 	add	r4,r16,r2
 100f870:	d8800b17 	ldw	r2,44(sp)
 100f874:	18c00104 	addi	r3,r3,4
 100f878:	240d803a 	cmpltu	r6,r4,r16
 100f87c:	10c7883a 	add	r3,r2,r3
 100f880:	2013883a 	mov	r9,r4
 100f884:	d8800a17 	ldw	r2,40(sp)
 100f888:	d9000517 	ldw	r4,20(sp)
 100f88c:	314d883a 	add	r6,r6,r5
 100f890:	3015883a 	mov	r10,r6
 100f894:	2088c03a 	cmpne	r4,r4,r2
 100f898:	00880034 	movhi	r2,8192
 100f89c:	10bfffc4 	addi	r2,r2,-1
 100f8a0:	d9000f15 	stw	r4,60(sp)
 100f8a4:	d8c01015 	stw	r3,64(sp)
 100f8a8:	1180162e 	bgeu	r2,r6,100f904 <__muldf3+0x28c>
 100f8ac:	1811883a 	mov	r8,r3
 100f8b0:	101f883a 	mov	r15,r2
 100f8b4:	980497fa 	slli	r2,r19,31
 100f8b8:	9016d07a 	srli	r11,r18,1
 100f8bc:	500697fa 	slli	r3,r10,31
 100f8c0:	480cd07a 	srli	r6,r9,1
 100f8c4:	500ed07a 	srli	r7,r10,1
 100f8c8:	12d6b03a 	or	r11,r2,r11
 100f8cc:	00800044 	movi	r2,1
 100f8d0:	198cb03a 	or	r6,r3,r6
 100f8d4:	4888703a 	and	r4,r9,r2
 100f8d8:	9818d07a 	srli	r12,r19,1
 100f8dc:	001b883a 	mov	r13,zero
 100f8e0:	03a00034 	movhi	r14,32768
 100f8e4:	3013883a 	mov	r9,r6
 100f8e8:	3815883a 	mov	r10,r7
 100f8ec:	4091883a 	add	r8,r8,r2
 100f8f0:	20000226 	beq	r4,zero,100f8fc <__muldf3+0x284>
 100f8f4:	5b64b03a 	or	r18,r11,r13
 100f8f8:	63a6b03a 	or	r19,r12,r14
 100f8fc:	7abfed36 	bltu	r15,r10,100f8b4 <__muldf3+0x23c>
 100f900:	da001015 	stw	r8,64(sp)
 100f904:	00840034 	movhi	r2,4096
 100f908:	10bfffc4 	addi	r2,r2,-1
 100f90c:	12801436 	bltu	r2,r10,100f960 <__muldf3+0x2e8>
 100f910:	da001017 	ldw	r8,64(sp)
 100f914:	101f883a 	mov	r15,r2
 100f918:	4a45883a 	add	r2,r9,r9
 100f91c:	124d803a 	cmpltu	r6,r2,r9
 100f920:	5287883a 	add	r3,r10,r10
 100f924:	9497883a 	add	r11,r18,r18
 100f928:	5c8f803a 	cmpltu	r7,r11,r18
 100f92c:	9cd9883a 	add	r12,r19,r19
 100f930:	01000044 	movi	r4,1
 100f934:	30cd883a 	add	r6,r6,r3
 100f938:	3b0f883a 	add	r7,r7,r12
 100f93c:	423fffc4 	addi	r8,r8,-1
 100f940:	1013883a 	mov	r9,r2
 100f944:	3015883a 	mov	r10,r6
 100f948:	111ab03a 	or	r13,r2,r4
 100f94c:	98003016 	blt	r19,zero,100fa10 <__muldf3+0x398>
 100f950:	5825883a 	mov	r18,r11
 100f954:	3827883a 	mov	r19,r7
 100f958:	7abfef2e 	bgeu	r15,r10,100f918 <__muldf3+0x2a0>
 100f95c:	da001015 	stw	r8,64(sp)
 100f960:	00803fc4 	movi	r2,255
 100f964:	488e703a 	and	r7,r9,r2
 100f968:	00802004 	movi	r2,128
 100f96c:	0007883a 	mov	r3,zero
 100f970:	0011883a 	mov	r8,zero
 100f974:	38801826 	beq	r7,r2,100f9d8 <__muldf3+0x360>
 100f978:	008000c4 	movi	r2,3
 100f97c:	d9000e04 	addi	r4,sp,56
 100f980:	da801215 	stw	r10,72(sp)
 100f984:	d8800e15 	stw	r2,56(sp)
 100f988:	da401115 	stw	r9,68(sp)
 100f98c:	003f6a06 	br	100f738 <__muldf3+0xc0>
 100f990:	89802126 	beq	r17,r6,100fa18 <__muldf3+0x3a0>
 100f994:	0009883a 	mov	r4,zero
 100f998:	5105883a 	add	r2,r10,r4
 100f99c:	128d803a 	cmpltu	r6,r2,r10
 100f9a0:	5d07883a 	add	r3,r11,r20
 100f9a4:	30cd883a 	add	r6,r6,r3
 100f9a8:	0021883a 	mov	r16,zero
 100f9ac:	0023883a 	mov	r17,zero
 100f9b0:	1025883a 	mov	r18,r2
 100f9b4:	3027883a 	mov	r19,r6
 100f9b8:	32ff9e2e 	bgeu	r6,r11,100f834 <__muldf3+0x1bc>
 100f9bc:	00800044 	movi	r2,1
 100f9c0:	8089883a 	add	r4,r16,r2
 100f9c4:	240d803a 	cmpltu	r6,r4,r16
 100f9c8:	344d883a 	add	r6,r6,r17
 100f9cc:	2021883a 	mov	r16,r4
 100f9d0:	3023883a 	mov	r17,r6
 100f9d4:	003f9806 	br	100f838 <__muldf3+0x1c0>
 100f9d8:	403fe71e 	bne	r8,zero,100f978 <__muldf3+0x300>
 100f9dc:	01004004 	movi	r4,256
 100f9e0:	4904703a 	and	r2,r9,r4
 100f9e4:	10c4b03a 	or	r2,r2,r3
 100f9e8:	103fe31e 	bne	r2,zero,100f978 <__muldf3+0x300>
 100f9ec:	94c4b03a 	or	r2,r18,r19
 100f9f0:	103fe126 	beq	r2,zero,100f978 <__muldf3+0x300>
 100f9f4:	49c5883a 	add	r2,r9,r7
 100f9f8:	1251803a 	cmpltu	r8,r2,r9
 100f9fc:	4291883a 	add	r8,r8,r10
 100fa00:	013fc004 	movi	r4,-256
 100fa04:	1112703a 	and	r9,r2,r4
 100fa08:	4015883a 	mov	r10,r8
 100fa0c:	003fda06 	br	100f978 <__muldf3+0x300>
 100fa10:	6813883a 	mov	r9,r13
 100fa14:	003fce06 	br	100f950 <__muldf3+0x2d8>
 100fa18:	143f7c36 	bltu	r2,r16,100f80c <__muldf3+0x194>
 100fa1c:	003fdd06 	br	100f994 <__muldf3+0x31c>
 100fa20:	12bf852e 	bgeu	r2,r10,100f838 <__muldf3+0x1c0>
 100fa24:	003fe506 	br	100f9bc <__muldf3+0x344>
 100fa28:	00800084 	movi	r2,2
 100fa2c:	20bf351e 	bne	r4,r2,100f704 <__muldf3+0x8c>
 100fa30:	01004074 	movhi	r4,257
 100fa34:	21149a04 	addi	r4,r4,21096
 100fa38:	003f3f06 	br	100f738 <__muldf3+0xc0>

0100fa3c <__divdf3>:
 100fa3c:	deffed04 	addi	sp,sp,-76
 100fa40:	dcc01115 	stw	r19,68(sp)
 100fa44:	dcc00404 	addi	r19,sp,16
 100fa48:	2011883a 	mov	r8,r4
 100fa4c:	2813883a 	mov	r9,r5
 100fa50:	dc000e15 	stw	r16,56(sp)
 100fa54:	d809883a 	mov	r4,sp
 100fa58:	980b883a 	mov	r5,r19
 100fa5c:	dc000904 	addi	r16,sp,36
 100fa60:	dfc01215 	stw	ra,72(sp)
 100fa64:	da400115 	stw	r9,4(sp)
 100fa68:	d9c00315 	stw	r7,12(sp)
 100fa6c:	da000015 	stw	r8,0(sp)
 100fa70:	d9800215 	stw	r6,8(sp)
 100fa74:	dc801015 	stw	r18,64(sp)
 100fa78:	dc400f15 	stw	r17,60(sp)
 100fa7c:	10108180 	call	1010818 <__unpack_d>
 100fa80:	d9000204 	addi	r4,sp,8
 100fa84:	800b883a 	mov	r5,r16
 100fa88:	10108180 	call	1010818 <__unpack_d>
 100fa8c:	d9000417 	ldw	r4,16(sp)
 100fa90:	00800044 	movi	r2,1
 100fa94:	11000b2e 	bgeu	r2,r4,100fac4 <__divdf3+0x88>
 100fa98:	d9400917 	ldw	r5,36(sp)
 100fa9c:	1140762e 	bgeu	r2,r5,100fc78 <__divdf3+0x23c>
 100faa0:	d8800517 	ldw	r2,20(sp)
 100faa4:	d8c00a17 	ldw	r3,40(sp)
 100faa8:	01800104 	movi	r6,4
 100faac:	10c4f03a 	xor	r2,r2,r3
 100fab0:	d8800515 	stw	r2,20(sp)
 100fab4:	21800226 	beq	r4,r6,100fac0 <__divdf3+0x84>
 100fab8:	00800084 	movi	r2,2
 100fabc:	2080141e 	bne	r4,r2,100fb10 <__divdf3+0xd4>
 100fac0:	29000926 	beq	r5,r4,100fae8 <__divdf3+0xac>
 100fac4:	9809883a 	mov	r4,r19
 100fac8:	10105040 	call	1010504 <__pack_d>
 100facc:	dfc01217 	ldw	ra,72(sp)
 100fad0:	dcc01117 	ldw	r19,68(sp)
 100fad4:	dc801017 	ldw	r18,64(sp)
 100fad8:	dc400f17 	ldw	r17,60(sp)
 100fadc:	dc000e17 	ldw	r16,56(sp)
 100fae0:	dec01304 	addi	sp,sp,76
 100fae4:	f800283a 	ret
 100fae8:	01004074 	movhi	r4,257
 100faec:	21149a04 	addi	r4,r4,21096
 100faf0:	10105040 	call	1010504 <__pack_d>
 100faf4:	dfc01217 	ldw	ra,72(sp)
 100faf8:	dcc01117 	ldw	r19,68(sp)
 100fafc:	dc801017 	ldw	r18,64(sp)
 100fb00:	dc400f17 	ldw	r17,60(sp)
 100fb04:	dc000e17 	ldw	r16,56(sp)
 100fb08:	dec01304 	addi	sp,sp,76
 100fb0c:	f800283a 	ret
 100fb10:	29805b26 	beq	r5,r6,100fc80 <__divdf3+0x244>
 100fb14:	28802d26 	beq	r5,r2,100fbcc <__divdf3+0x190>
 100fb18:	d8c00617 	ldw	r3,24(sp)
 100fb1c:	d8800b17 	ldw	r2,44(sp)
 100fb20:	d9c00817 	ldw	r7,32(sp)
 100fb24:	dc400d17 	ldw	r17,52(sp)
 100fb28:	188bc83a 	sub	r5,r3,r2
 100fb2c:	d9800717 	ldw	r6,28(sp)
 100fb30:	dc000c17 	ldw	r16,48(sp)
 100fb34:	d9400615 	stw	r5,24(sp)
 100fb38:	3c403836 	bltu	r7,r17,100fc1c <__divdf3+0x1e0>
 100fb3c:	89c03626 	beq	r17,r7,100fc18 <__divdf3+0x1dc>
 100fb40:	0015883a 	mov	r10,zero
 100fb44:	001d883a 	mov	r14,zero
 100fb48:	02c40034 	movhi	r11,4096
 100fb4c:	001f883a 	mov	r15,zero
 100fb50:	003f883a 	mov	ra,zero
 100fb54:	04800f44 	movi	r18,61
 100fb58:	00000f06 	br	100fb98 <__divdf3+0x15c>
 100fb5c:	601d883a 	mov	r14,r12
 100fb60:	681f883a 	mov	r15,r13
 100fb64:	400d883a 	mov	r6,r8
 100fb68:	100f883a 	mov	r7,r2
 100fb6c:	3191883a 	add	r8,r6,r6
 100fb70:	5808d07a 	srli	r4,r11,1
 100fb74:	4185803a 	cmpltu	r2,r8,r6
 100fb78:	39d3883a 	add	r9,r7,r7
 100fb7c:	28c6b03a 	or	r3,r5,r3
 100fb80:	1245883a 	add	r2,r2,r9
 100fb84:	1815883a 	mov	r10,r3
 100fb88:	2017883a 	mov	r11,r4
 100fb8c:	400d883a 	mov	r6,r8
 100fb90:	100f883a 	mov	r7,r2
 100fb94:	fc801726 	beq	ra,r18,100fbf4 <__divdf3+0x1b8>
 100fb98:	580a97fa 	slli	r5,r11,31
 100fb9c:	5006d07a 	srli	r3,r10,1
 100fba0:	ffc00044 	addi	ra,ra,1
 100fba4:	3c7ff136 	bltu	r7,r17,100fb6c <__divdf3+0x130>
 100fba8:	3411c83a 	sub	r8,r6,r16
 100fbac:	3205803a 	cmpltu	r2,r6,r8
 100fbb0:	3c53c83a 	sub	r9,r7,r17
 100fbb4:	7298b03a 	or	r12,r14,r10
 100fbb8:	7adab03a 	or	r13,r15,r11
 100fbbc:	4885c83a 	sub	r2,r9,r2
 100fbc0:	89ffe61e 	bne	r17,r7,100fb5c <__divdf3+0x120>
 100fbc4:	343fe936 	bltu	r6,r16,100fb6c <__divdf3+0x130>
 100fbc8:	003fe406 	br	100fb5c <__divdf3+0x120>
 100fbcc:	9809883a 	mov	r4,r19
 100fbd0:	d9800415 	stw	r6,16(sp)
 100fbd4:	10105040 	call	1010504 <__pack_d>
 100fbd8:	dfc01217 	ldw	ra,72(sp)
 100fbdc:	dcc01117 	ldw	r19,68(sp)
 100fbe0:	dc801017 	ldw	r18,64(sp)
 100fbe4:	dc400f17 	ldw	r17,60(sp)
 100fbe8:	dc000e17 	ldw	r16,56(sp)
 100fbec:	dec01304 	addi	sp,sp,76
 100fbf0:	f800283a 	ret
 100fbf4:	00803fc4 	movi	r2,255
 100fbf8:	7090703a 	and	r8,r14,r2
 100fbfc:	00802004 	movi	r2,128
 100fc00:	0007883a 	mov	r3,zero
 100fc04:	0013883a 	mov	r9,zero
 100fc08:	40800d26 	beq	r8,r2,100fc40 <__divdf3+0x204>
 100fc0c:	dbc00815 	stw	r15,32(sp)
 100fc10:	db800715 	stw	r14,28(sp)
 100fc14:	003fab06 	br	100fac4 <__divdf3+0x88>
 100fc18:	343fc92e 	bgeu	r6,r16,100fb40 <__divdf3+0x104>
 100fc1c:	3185883a 	add	r2,r6,r6
 100fc20:	1189803a 	cmpltu	r4,r2,r6
 100fc24:	39c7883a 	add	r3,r7,r7
 100fc28:	20c9883a 	add	r4,r4,r3
 100fc2c:	297fffc4 	addi	r5,r5,-1
 100fc30:	100d883a 	mov	r6,r2
 100fc34:	200f883a 	mov	r7,r4
 100fc38:	d9400615 	stw	r5,24(sp)
 100fc3c:	003fc006 	br	100fb40 <__divdf3+0x104>
 100fc40:	483ff21e 	bne	r9,zero,100fc0c <__divdf3+0x1d0>
 100fc44:	01004004 	movi	r4,256
 100fc48:	7104703a 	and	r2,r14,r4
 100fc4c:	10c4b03a 	or	r2,r2,r3
 100fc50:	103fee1e 	bne	r2,zero,100fc0c <__divdf3+0x1d0>
 100fc54:	31c4b03a 	or	r2,r6,r7
 100fc58:	103fec26 	beq	r2,zero,100fc0c <__divdf3+0x1d0>
 100fc5c:	7205883a 	add	r2,r14,r8
 100fc60:	1391803a 	cmpltu	r8,r2,r14
 100fc64:	43d1883a 	add	r8,r8,r15
 100fc68:	013fc004 	movi	r4,-256
 100fc6c:	111c703a 	and	r14,r2,r4
 100fc70:	401f883a 	mov	r15,r8
 100fc74:	003fe506 	br	100fc0c <__divdf3+0x1d0>
 100fc78:	8009883a 	mov	r4,r16
 100fc7c:	003f9206 	br	100fac8 <__divdf3+0x8c>
 100fc80:	9809883a 	mov	r4,r19
 100fc84:	d8000715 	stw	zero,28(sp)
 100fc88:	d8000815 	stw	zero,32(sp)
 100fc8c:	d8000615 	stw	zero,24(sp)
 100fc90:	003f8d06 	br	100fac8 <__divdf3+0x8c>

0100fc94 <__eqdf2>:
 100fc94:	deffef04 	addi	sp,sp,-68
 100fc98:	dc400f15 	stw	r17,60(sp)
 100fc9c:	dc400404 	addi	r17,sp,16
 100fca0:	2005883a 	mov	r2,r4
 100fca4:	2807883a 	mov	r3,r5
 100fca8:	dc000e15 	stw	r16,56(sp)
 100fcac:	d809883a 	mov	r4,sp
 100fcb0:	880b883a 	mov	r5,r17
 100fcb4:	dc000904 	addi	r16,sp,36
 100fcb8:	d8c00115 	stw	r3,4(sp)
 100fcbc:	d8800015 	stw	r2,0(sp)
 100fcc0:	d9800215 	stw	r6,8(sp)
 100fcc4:	dfc01015 	stw	ra,64(sp)
 100fcc8:	d9c00315 	stw	r7,12(sp)
 100fccc:	10108180 	call	1010818 <__unpack_d>
 100fcd0:	d9000204 	addi	r4,sp,8
 100fcd4:	800b883a 	mov	r5,r16
 100fcd8:	10108180 	call	1010818 <__unpack_d>
 100fcdc:	d8800417 	ldw	r2,16(sp)
 100fce0:	00c00044 	movi	r3,1
 100fce4:	180d883a 	mov	r6,r3
 100fce8:	1880062e 	bgeu	r3,r2,100fd04 <__eqdf2+0x70>
 100fcec:	d8800917 	ldw	r2,36(sp)
 100fcf0:	8809883a 	mov	r4,r17
 100fcf4:	800b883a 	mov	r5,r16
 100fcf8:	1880022e 	bgeu	r3,r2,100fd04 <__eqdf2+0x70>
 100fcfc:	10109500 	call	1010950 <__fpcmp_parts_d>
 100fd00:	100d883a 	mov	r6,r2
 100fd04:	3005883a 	mov	r2,r6
 100fd08:	dfc01017 	ldw	ra,64(sp)
 100fd0c:	dc400f17 	ldw	r17,60(sp)
 100fd10:	dc000e17 	ldw	r16,56(sp)
 100fd14:	dec01104 	addi	sp,sp,68
 100fd18:	f800283a 	ret

0100fd1c <__nedf2>:
 100fd1c:	deffef04 	addi	sp,sp,-68
 100fd20:	dc400f15 	stw	r17,60(sp)
 100fd24:	dc400404 	addi	r17,sp,16
 100fd28:	2005883a 	mov	r2,r4
 100fd2c:	2807883a 	mov	r3,r5
 100fd30:	dc000e15 	stw	r16,56(sp)
 100fd34:	d809883a 	mov	r4,sp
 100fd38:	880b883a 	mov	r5,r17
 100fd3c:	dc000904 	addi	r16,sp,36
 100fd40:	d8c00115 	stw	r3,4(sp)
 100fd44:	d8800015 	stw	r2,0(sp)
 100fd48:	d9800215 	stw	r6,8(sp)
 100fd4c:	dfc01015 	stw	ra,64(sp)
 100fd50:	d9c00315 	stw	r7,12(sp)
 100fd54:	10108180 	call	1010818 <__unpack_d>
 100fd58:	d9000204 	addi	r4,sp,8
 100fd5c:	800b883a 	mov	r5,r16
 100fd60:	10108180 	call	1010818 <__unpack_d>
 100fd64:	d8800417 	ldw	r2,16(sp)
 100fd68:	00c00044 	movi	r3,1
 100fd6c:	180d883a 	mov	r6,r3
 100fd70:	1880062e 	bgeu	r3,r2,100fd8c <__nedf2+0x70>
 100fd74:	d8800917 	ldw	r2,36(sp)
 100fd78:	8809883a 	mov	r4,r17
 100fd7c:	800b883a 	mov	r5,r16
 100fd80:	1880022e 	bgeu	r3,r2,100fd8c <__nedf2+0x70>
 100fd84:	10109500 	call	1010950 <__fpcmp_parts_d>
 100fd88:	100d883a 	mov	r6,r2
 100fd8c:	3005883a 	mov	r2,r6
 100fd90:	dfc01017 	ldw	ra,64(sp)
 100fd94:	dc400f17 	ldw	r17,60(sp)
 100fd98:	dc000e17 	ldw	r16,56(sp)
 100fd9c:	dec01104 	addi	sp,sp,68
 100fda0:	f800283a 	ret

0100fda4 <__gtdf2>:
 100fda4:	deffef04 	addi	sp,sp,-68
 100fda8:	dc400f15 	stw	r17,60(sp)
 100fdac:	dc400404 	addi	r17,sp,16
 100fdb0:	2005883a 	mov	r2,r4
 100fdb4:	2807883a 	mov	r3,r5
 100fdb8:	dc000e15 	stw	r16,56(sp)
 100fdbc:	d809883a 	mov	r4,sp
 100fdc0:	880b883a 	mov	r5,r17
 100fdc4:	dc000904 	addi	r16,sp,36
 100fdc8:	d8c00115 	stw	r3,4(sp)
 100fdcc:	d8800015 	stw	r2,0(sp)
 100fdd0:	d9800215 	stw	r6,8(sp)
 100fdd4:	dfc01015 	stw	ra,64(sp)
 100fdd8:	d9c00315 	stw	r7,12(sp)
 100fddc:	10108180 	call	1010818 <__unpack_d>
 100fde0:	d9000204 	addi	r4,sp,8
 100fde4:	800b883a 	mov	r5,r16
 100fde8:	10108180 	call	1010818 <__unpack_d>
 100fdec:	d8800417 	ldw	r2,16(sp)
 100fdf0:	00c00044 	movi	r3,1
 100fdf4:	01bfffc4 	movi	r6,-1
 100fdf8:	1880062e 	bgeu	r3,r2,100fe14 <__gtdf2+0x70>
 100fdfc:	d8800917 	ldw	r2,36(sp)
 100fe00:	8809883a 	mov	r4,r17
 100fe04:	800b883a 	mov	r5,r16
 100fe08:	1880022e 	bgeu	r3,r2,100fe14 <__gtdf2+0x70>
 100fe0c:	10109500 	call	1010950 <__fpcmp_parts_d>
 100fe10:	100d883a 	mov	r6,r2
 100fe14:	3005883a 	mov	r2,r6
 100fe18:	dfc01017 	ldw	ra,64(sp)
 100fe1c:	dc400f17 	ldw	r17,60(sp)
 100fe20:	dc000e17 	ldw	r16,56(sp)
 100fe24:	dec01104 	addi	sp,sp,68
 100fe28:	f800283a 	ret

0100fe2c <__gedf2>:
 100fe2c:	deffef04 	addi	sp,sp,-68
 100fe30:	dc400f15 	stw	r17,60(sp)
 100fe34:	dc400404 	addi	r17,sp,16
 100fe38:	2005883a 	mov	r2,r4
 100fe3c:	2807883a 	mov	r3,r5
 100fe40:	dc000e15 	stw	r16,56(sp)
 100fe44:	d809883a 	mov	r4,sp
 100fe48:	880b883a 	mov	r5,r17
 100fe4c:	dc000904 	addi	r16,sp,36
 100fe50:	d8c00115 	stw	r3,4(sp)
 100fe54:	d8800015 	stw	r2,0(sp)
 100fe58:	d9800215 	stw	r6,8(sp)
 100fe5c:	dfc01015 	stw	ra,64(sp)
 100fe60:	d9c00315 	stw	r7,12(sp)
 100fe64:	10108180 	call	1010818 <__unpack_d>
 100fe68:	d9000204 	addi	r4,sp,8
 100fe6c:	800b883a 	mov	r5,r16
 100fe70:	10108180 	call	1010818 <__unpack_d>
 100fe74:	d8800417 	ldw	r2,16(sp)
 100fe78:	00c00044 	movi	r3,1
 100fe7c:	01bfffc4 	movi	r6,-1
 100fe80:	1880062e 	bgeu	r3,r2,100fe9c <__gedf2+0x70>
 100fe84:	d8800917 	ldw	r2,36(sp)
 100fe88:	8809883a 	mov	r4,r17
 100fe8c:	800b883a 	mov	r5,r16
 100fe90:	1880022e 	bgeu	r3,r2,100fe9c <__gedf2+0x70>
 100fe94:	10109500 	call	1010950 <__fpcmp_parts_d>
 100fe98:	100d883a 	mov	r6,r2
 100fe9c:	3005883a 	mov	r2,r6
 100fea0:	dfc01017 	ldw	ra,64(sp)
 100fea4:	dc400f17 	ldw	r17,60(sp)
 100fea8:	dc000e17 	ldw	r16,56(sp)
 100feac:	dec01104 	addi	sp,sp,68
 100feb0:	f800283a 	ret

0100feb4 <__ltdf2>:
 100feb4:	deffef04 	addi	sp,sp,-68
 100feb8:	dc400f15 	stw	r17,60(sp)
 100febc:	dc400404 	addi	r17,sp,16
 100fec0:	2005883a 	mov	r2,r4
 100fec4:	2807883a 	mov	r3,r5
 100fec8:	dc000e15 	stw	r16,56(sp)
 100fecc:	d809883a 	mov	r4,sp
 100fed0:	880b883a 	mov	r5,r17
 100fed4:	dc000904 	addi	r16,sp,36
 100fed8:	d8c00115 	stw	r3,4(sp)
 100fedc:	d8800015 	stw	r2,0(sp)
 100fee0:	d9800215 	stw	r6,8(sp)
 100fee4:	dfc01015 	stw	ra,64(sp)
 100fee8:	d9c00315 	stw	r7,12(sp)
 100feec:	10108180 	call	1010818 <__unpack_d>
 100fef0:	d9000204 	addi	r4,sp,8
 100fef4:	800b883a 	mov	r5,r16
 100fef8:	10108180 	call	1010818 <__unpack_d>
 100fefc:	d8800417 	ldw	r2,16(sp)
 100ff00:	00c00044 	movi	r3,1
 100ff04:	180d883a 	mov	r6,r3
 100ff08:	1880062e 	bgeu	r3,r2,100ff24 <__ltdf2+0x70>
 100ff0c:	d8800917 	ldw	r2,36(sp)
 100ff10:	8809883a 	mov	r4,r17
 100ff14:	800b883a 	mov	r5,r16
 100ff18:	1880022e 	bgeu	r3,r2,100ff24 <__ltdf2+0x70>
 100ff1c:	10109500 	call	1010950 <__fpcmp_parts_d>
 100ff20:	100d883a 	mov	r6,r2
 100ff24:	3005883a 	mov	r2,r6
 100ff28:	dfc01017 	ldw	ra,64(sp)
 100ff2c:	dc400f17 	ldw	r17,60(sp)
 100ff30:	dc000e17 	ldw	r16,56(sp)
 100ff34:	dec01104 	addi	sp,sp,68
 100ff38:	f800283a 	ret

0100ff3c <__floatsidf>:
 100ff3c:	2006d7fa 	srli	r3,r4,31
 100ff40:	defff604 	addi	sp,sp,-40
 100ff44:	008000c4 	movi	r2,3
 100ff48:	dfc00915 	stw	ra,36(sp)
 100ff4c:	dcc00815 	stw	r19,32(sp)
 100ff50:	dc800715 	stw	r18,28(sp)
 100ff54:	dc400615 	stw	r17,24(sp)
 100ff58:	dc000515 	stw	r16,20(sp)
 100ff5c:	d8800015 	stw	r2,0(sp)
 100ff60:	d8c00115 	stw	r3,4(sp)
 100ff64:	20000f1e 	bne	r4,zero,100ffa4 <__floatsidf+0x68>
 100ff68:	00800084 	movi	r2,2
 100ff6c:	d8800015 	stw	r2,0(sp)
 100ff70:	d809883a 	mov	r4,sp
 100ff74:	10105040 	call	1010504 <__pack_d>
 100ff78:	1009883a 	mov	r4,r2
 100ff7c:	180b883a 	mov	r5,r3
 100ff80:	2005883a 	mov	r2,r4
 100ff84:	2807883a 	mov	r3,r5
 100ff88:	dfc00917 	ldw	ra,36(sp)
 100ff8c:	dcc00817 	ldw	r19,32(sp)
 100ff90:	dc800717 	ldw	r18,28(sp)
 100ff94:	dc400617 	ldw	r17,24(sp)
 100ff98:	dc000517 	ldw	r16,20(sp)
 100ff9c:	dec00a04 	addi	sp,sp,40
 100ffa0:	f800283a 	ret
 100ffa4:	00800f04 	movi	r2,60
 100ffa8:	1807003a 	cmpeq	r3,r3,zero
 100ffac:	d8800215 	stw	r2,8(sp)
 100ffb0:	18001126 	beq	r3,zero,100fff8 <__floatsidf+0xbc>
 100ffb4:	0027883a 	mov	r19,zero
 100ffb8:	2025883a 	mov	r18,r4
 100ffbc:	d9000315 	stw	r4,12(sp)
 100ffc0:	dcc00415 	stw	r19,16(sp)
 100ffc4:	10104840 	call	1010484 <__clzsi2>
 100ffc8:	11000744 	addi	r4,r2,29
 100ffcc:	013fe80e 	bge	zero,r4,100ff70 <__floatsidf+0x34>
 100ffd0:	10bfff44 	addi	r2,r2,-3
 100ffd4:	10000c16 	blt	r2,zero,1010008 <__floatsidf+0xcc>
 100ffd8:	90a2983a 	sll	r17,r18,r2
 100ffdc:	0021883a 	mov	r16,zero
 100ffe0:	d8800217 	ldw	r2,8(sp)
 100ffe4:	dc400415 	stw	r17,16(sp)
 100ffe8:	dc000315 	stw	r16,12(sp)
 100ffec:	1105c83a 	sub	r2,r2,r4
 100fff0:	d8800215 	stw	r2,8(sp)
 100fff4:	003fde06 	br	100ff70 <__floatsidf+0x34>
 100fff8:	00a00034 	movhi	r2,32768
 100fffc:	20800a26 	beq	r4,r2,1010028 <__floatsidf+0xec>
 1010000:	0109c83a 	sub	r4,zero,r4
 1010004:	003feb06 	br	100ffb4 <__floatsidf+0x78>
 1010008:	9006d07a 	srli	r3,r18,1
 101000c:	008007c4 	movi	r2,31
 1010010:	1105c83a 	sub	r2,r2,r4
 1010014:	1886d83a 	srl	r3,r3,r2
 1010018:	9922983a 	sll	r17,r19,r4
 101001c:	9120983a 	sll	r16,r18,r4
 1010020:	1c62b03a 	or	r17,r3,r17
 1010024:	003fee06 	br	100ffe0 <__floatsidf+0xa4>
 1010028:	0009883a 	mov	r4,zero
 101002c:	01707834 	movhi	r5,49632
 1010030:	003fd306 	br	100ff80 <__floatsidf+0x44>

01010034 <__fixdfsi>:
 1010034:	defff804 	addi	sp,sp,-32
 1010038:	2005883a 	mov	r2,r4
 101003c:	2807883a 	mov	r3,r5
 1010040:	d809883a 	mov	r4,sp
 1010044:	d9400204 	addi	r5,sp,8
 1010048:	d8c00115 	stw	r3,4(sp)
 101004c:	d8800015 	stw	r2,0(sp)
 1010050:	dfc00715 	stw	ra,28(sp)
 1010054:	10108180 	call	1010818 <__unpack_d>
 1010058:	d8c00217 	ldw	r3,8(sp)
 101005c:	00800084 	movi	r2,2
 1010060:	1880051e 	bne	r3,r2,1010078 <__fixdfsi+0x44>
 1010064:	0007883a 	mov	r3,zero
 1010068:	1805883a 	mov	r2,r3
 101006c:	dfc00717 	ldw	ra,28(sp)
 1010070:	dec00804 	addi	sp,sp,32
 1010074:	f800283a 	ret
 1010078:	00800044 	movi	r2,1
 101007c:	10fff92e 	bgeu	r2,r3,1010064 <__fixdfsi+0x30>
 1010080:	00800104 	movi	r2,4
 1010084:	18800426 	beq	r3,r2,1010098 <__fixdfsi+0x64>
 1010088:	d8c00417 	ldw	r3,16(sp)
 101008c:	183ff516 	blt	r3,zero,1010064 <__fixdfsi+0x30>
 1010090:	00800784 	movi	r2,30
 1010094:	10c0080e 	bge	r2,r3,10100b8 <__fixdfsi+0x84>
 1010098:	d8800317 	ldw	r2,12(sp)
 101009c:	1000121e 	bne	r2,zero,10100e8 <__fixdfsi+0xb4>
 10100a0:	00e00034 	movhi	r3,32768
 10100a4:	18ffffc4 	addi	r3,r3,-1
 10100a8:	1805883a 	mov	r2,r3
 10100ac:	dfc00717 	ldw	ra,28(sp)
 10100b0:	dec00804 	addi	sp,sp,32
 10100b4:	f800283a 	ret
 10100b8:	00800f04 	movi	r2,60
 10100bc:	10d1c83a 	sub	r8,r2,r3
 10100c0:	40bff804 	addi	r2,r8,-32
 10100c4:	d9800517 	ldw	r6,20(sp)
 10100c8:	d9c00617 	ldw	r7,24(sp)
 10100cc:	10000816 	blt	r2,zero,10100f0 <__fixdfsi+0xbc>
 10100d0:	3888d83a 	srl	r4,r7,r2
 10100d4:	d8800317 	ldw	r2,12(sp)
 10100d8:	2007883a 	mov	r3,r4
 10100dc:	103fe226 	beq	r2,zero,1010068 <__fixdfsi+0x34>
 10100e0:	0107c83a 	sub	r3,zero,r4
 10100e4:	003fe006 	br	1010068 <__fixdfsi+0x34>
 10100e8:	00e00034 	movhi	r3,32768
 10100ec:	003fde06 	br	1010068 <__fixdfsi+0x34>
 10100f0:	39c7883a 	add	r3,r7,r7
 10100f4:	008007c4 	movi	r2,31
 10100f8:	1205c83a 	sub	r2,r2,r8
 10100fc:	1886983a 	sll	r3,r3,r2
 1010100:	3208d83a 	srl	r4,r6,r8
 1010104:	1908b03a 	or	r4,r3,r4
 1010108:	003ff206 	br	10100d4 <__fixdfsi+0xa0>

0101010c <__floatunsidf>:
 101010c:	defff204 	addi	sp,sp,-56
 1010110:	dfc00d15 	stw	ra,52(sp)
 1010114:	ddc00c15 	stw	r23,48(sp)
 1010118:	dd800b15 	stw	r22,44(sp)
 101011c:	dd400a15 	stw	r21,40(sp)
 1010120:	dd000915 	stw	r20,36(sp)
 1010124:	dcc00815 	stw	r19,32(sp)
 1010128:	dc800715 	stw	r18,28(sp)
 101012c:	dc400615 	stw	r17,24(sp)
 1010130:	dc000515 	stw	r16,20(sp)
 1010134:	d8000115 	stw	zero,4(sp)
 1010138:	20000f1e 	bne	r4,zero,1010178 <__floatunsidf+0x6c>
 101013c:	00800084 	movi	r2,2
 1010140:	d8800015 	stw	r2,0(sp)
 1010144:	d809883a 	mov	r4,sp
 1010148:	10105040 	call	1010504 <__pack_d>
 101014c:	dfc00d17 	ldw	ra,52(sp)
 1010150:	ddc00c17 	ldw	r23,48(sp)
 1010154:	dd800b17 	ldw	r22,44(sp)
 1010158:	dd400a17 	ldw	r21,40(sp)
 101015c:	dd000917 	ldw	r20,36(sp)
 1010160:	dcc00817 	ldw	r19,32(sp)
 1010164:	dc800717 	ldw	r18,28(sp)
 1010168:	dc400617 	ldw	r17,24(sp)
 101016c:	dc000517 	ldw	r16,20(sp)
 1010170:	dec00e04 	addi	sp,sp,56
 1010174:	f800283a 	ret
 1010178:	008000c4 	movi	r2,3
 101017c:	00c00f04 	movi	r3,60
 1010180:	002f883a 	mov	r23,zero
 1010184:	202d883a 	mov	r22,r4
 1010188:	d8800015 	stw	r2,0(sp)
 101018c:	d8c00215 	stw	r3,8(sp)
 1010190:	d9000315 	stw	r4,12(sp)
 1010194:	ddc00415 	stw	r23,16(sp)
 1010198:	10104840 	call	1010484 <__clzsi2>
 101019c:	12400744 	addi	r9,r2,29
 10101a0:	48000b16 	blt	r9,zero,10101d0 <__floatunsidf+0xc4>
 10101a4:	483fe726 	beq	r9,zero,1010144 <__floatunsidf+0x38>
 10101a8:	10bfff44 	addi	r2,r2,-3
 10101ac:	10002e16 	blt	r2,zero,1010268 <__floatunsidf+0x15c>
 10101b0:	b0a2983a 	sll	r17,r22,r2
 10101b4:	0021883a 	mov	r16,zero
 10101b8:	d8800217 	ldw	r2,8(sp)
 10101bc:	dc400415 	stw	r17,16(sp)
 10101c0:	dc000315 	stw	r16,12(sp)
 10101c4:	1245c83a 	sub	r2,r2,r9
 10101c8:	d8800215 	stw	r2,8(sp)
 10101cc:	003fdd06 	br	1010144 <__floatunsidf+0x38>
 10101d0:	0255c83a 	sub	r10,zero,r9
 10101d4:	51bff804 	addi	r6,r10,-32
 10101d8:	30001b16 	blt	r6,zero,1010248 <__floatunsidf+0x13c>
 10101dc:	b9a8d83a 	srl	r20,r23,r6
 10101e0:	002b883a 	mov	r21,zero
 10101e4:	000f883a 	mov	r7,zero
 10101e8:	01000044 	movi	r4,1
 10101ec:	0011883a 	mov	r8,zero
 10101f0:	30002516 	blt	r6,zero,1010288 <__floatunsidf+0x17c>
 10101f4:	21a6983a 	sll	r19,r4,r6
 10101f8:	0025883a 	mov	r18,zero
 10101fc:	00bfffc4 	movi	r2,-1
 1010200:	9089883a 	add	r4,r18,r2
 1010204:	988b883a 	add	r5,r19,r2
 1010208:	248d803a 	cmpltu	r6,r4,r18
 101020c:	314b883a 	add	r5,r6,r5
 1010210:	b104703a 	and	r2,r22,r4
 1010214:	b946703a 	and	r3,r23,r5
 1010218:	10c4b03a 	or	r2,r2,r3
 101021c:	10000226 	beq	r2,zero,1010228 <__floatunsidf+0x11c>
 1010220:	01c00044 	movi	r7,1
 1010224:	0011883a 	mov	r8,zero
 1010228:	d9000217 	ldw	r4,8(sp)
 101022c:	a1c4b03a 	or	r2,r20,r7
 1010230:	aa06b03a 	or	r3,r21,r8
 1010234:	2249c83a 	sub	r4,r4,r9
 1010238:	d8c00415 	stw	r3,16(sp)
 101023c:	d9000215 	stw	r4,8(sp)
 1010240:	d8800315 	stw	r2,12(sp)
 1010244:	003fbf06 	br	1010144 <__floatunsidf+0x38>
 1010248:	bdc7883a 	add	r3,r23,r23
 101024c:	008007c4 	movi	r2,31
 1010250:	1285c83a 	sub	r2,r2,r10
 1010254:	1886983a 	sll	r3,r3,r2
 1010258:	b2a8d83a 	srl	r20,r22,r10
 101025c:	baaad83a 	srl	r21,r23,r10
 1010260:	1d28b03a 	or	r20,r3,r20
 1010264:	003fdf06 	br	10101e4 <__floatunsidf+0xd8>
 1010268:	b006d07a 	srli	r3,r22,1
 101026c:	008007c4 	movi	r2,31
 1010270:	1245c83a 	sub	r2,r2,r9
 1010274:	1886d83a 	srl	r3,r3,r2
 1010278:	ba62983a 	sll	r17,r23,r9
 101027c:	b260983a 	sll	r16,r22,r9
 1010280:	1c62b03a 	or	r17,r3,r17
 1010284:	003fcc06 	br	10101b8 <__floatunsidf+0xac>
 1010288:	2006d07a 	srli	r3,r4,1
 101028c:	008007c4 	movi	r2,31
 1010290:	1285c83a 	sub	r2,r2,r10
 1010294:	18a6d83a 	srl	r19,r3,r2
 1010298:	22a4983a 	sll	r18,r4,r10
 101029c:	003fd706 	br	10101fc <__floatunsidf+0xf0>

010102a0 <udivmodsi4>:
 10102a0:	29001b2e 	bgeu	r5,r4,1010310 <udivmodsi4+0x70>
 10102a4:	28001a16 	blt	r5,zero,1010310 <udivmodsi4+0x70>
 10102a8:	00800044 	movi	r2,1
 10102ac:	0007883a 	mov	r3,zero
 10102b0:	01c007c4 	movi	r7,31
 10102b4:	00000306 	br	10102c4 <udivmodsi4+0x24>
 10102b8:	19c01326 	beq	r3,r7,1010308 <udivmodsi4+0x68>
 10102bc:	18c00044 	addi	r3,r3,1
 10102c0:	28000416 	blt	r5,zero,10102d4 <udivmodsi4+0x34>
 10102c4:	294b883a 	add	r5,r5,r5
 10102c8:	1085883a 	add	r2,r2,r2
 10102cc:	293ffa36 	bltu	r5,r4,10102b8 <udivmodsi4+0x18>
 10102d0:	10000d26 	beq	r2,zero,1010308 <udivmodsi4+0x68>
 10102d4:	0007883a 	mov	r3,zero
 10102d8:	21400236 	bltu	r4,r5,10102e4 <udivmodsi4+0x44>
 10102dc:	2149c83a 	sub	r4,r4,r5
 10102e0:	1886b03a 	or	r3,r3,r2
 10102e4:	1004d07a 	srli	r2,r2,1
 10102e8:	280ad07a 	srli	r5,r5,1
 10102ec:	103ffa1e 	bne	r2,zero,10102d8 <udivmodsi4+0x38>
 10102f0:	30000226 	beq	r6,zero,10102fc <udivmodsi4+0x5c>
 10102f4:	2005883a 	mov	r2,r4
 10102f8:	f800283a 	ret
 10102fc:	1809883a 	mov	r4,r3
 1010300:	2005883a 	mov	r2,r4
 1010304:	f800283a 	ret
 1010308:	0007883a 	mov	r3,zero
 101030c:	003ff806 	br	10102f0 <udivmodsi4+0x50>
 1010310:	00800044 	movi	r2,1
 1010314:	0007883a 	mov	r3,zero
 1010318:	003fef06 	br	10102d8 <udivmodsi4+0x38>

0101031c <__divsi3>:
 101031c:	defffe04 	addi	sp,sp,-8
 1010320:	dc000015 	stw	r16,0(sp)
 1010324:	dfc00115 	stw	ra,4(sp)
 1010328:	0021883a 	mov	r16,zero
 101032c:	20000c16 	blt	r4,zero,1010360 <__divsi3+0x44>
 1010330:	000d883a 	mov	r6,zero
 1010334:	28000e16 	blt	r5,zero,1010370 <__divsi3+0x54>
 1010338:	10102a00 	call	10102a0 <udivmodsi4>
 101033c:	1007883a 	mov	r3,r2
 1010340:	8005003a 	cmpeq	r2,r16,zero
 1010344:	1000011e 	bne	r2,zero,101034c <__divsi3+0x30>
 1010348:	00c7c83a 	sub	r3,zero,r3
 101034c:	1805883a 	mov	r2,r3
 1010350:	dfc00117 	ldw	ra,4(sp)
 1010354:	dc000017 	ldw	r16,0(sp)
 1010358:	dec00204 	addi	sp,sp,8
 101035c:	f800283a 	ret
 1010360:	0109c83a 	sub	r4,zero,r4
 1010364:	04000044 	movi	r16,1
 1010368:	000d883a 	mov	r6,zero
 101036c:	283ff20e 	bge	r5,zero,1010338 <__divsi3+0x1c>
 1010370:	014bc83a 	sub	r5,zero,r5
 1010374:	8021003a 	cmpeq	r16,r16,zero
 1010378:	003fef06 	br	1010338 <__divsi3+0x1c>

0101037c <__modsi3>:
 101037c:	deffff04 	addi	sp,sp,-4
 1010380:	dfc00015 	stw	ra,0(sp)
 1010384:	01800044 	movi	r6,1
 1010388:	2807883a 	mov	r3,r5
 101038c:	20000416 	blt	r4,zero,10103a0 <__modsi3+0x24>
 1010390:	28000c16 	blt	r5,zero,10103c4 <__modsi3+0x48>
 1010394:	dfc00017 	ldw	ra,0(sp)
 1010398:	dec00104 	addi	sp,sp,4
 101039c:	10102a01 	jmpi	10102a0 <udivmodsi4>
 10103a0:	0109c83a 	sub	r4,zero,r4
 10103a4:	28000b16 	blt	r5,zero,10103d4 <__modsi3+0x58>
 10103a8:	180b883a 	mov	r5,r3
 10103ac:	01800044 	movi	r6,1
 10103b0:	10102a00 	call	10102a0 <udivmodsi4>
 10103b4:	0085c83a 	sub	r2,zero,r2
 10103b8:	dfc00017 	ldw	ra,0(sp)
 10103bc:	dec00104 	addi	sp,sp,4
 10103c0:	f800283a 	ret
 10103c4:	014bc83a 	sub	r5,zero,r5
 10103c8:	dfc00017 	ldw	ra,0(sp)
 10103cc:	dec00104 	addi	sp,sp,4
 10103d0:	10102a01 	jmpi	10102a0 <udivmodsi4>
 10103d4:	0147c83a 	sub	r3,zero,r5
 10103d8:	003ff306 	br	10103a8 <__modsi3+0x2c>

010103dc <__udivsi3>:
 10103dc:	000d883a 	mov	r6,zero
 10103e0:	10102a01 	jmpi	10102a0 <udivmodsi4>

010103e4 <__umodsi3>:
 10103e4:	01800044 	movi	r6,1
 10103e8:	10102a01 	jmpi	10102a0 <udivmodsi4>

010103ec <__muldi3>:
 10103ec:	2011883a 	mov	r8,r4
 10103f0:	427fffcc 	andi	r9,r8,65535
 10103f4:	4018d43a 	srli	r12,r8,16
 10103f8:	32bfffcc 	andi	r10,r6,65535
 10103fc:	3016d43a 	srli	r11,r6,16
 1010400:	4a85383a 	mul	r2,r9,r10
 1010404:	6295383a 	mul	r10,r12,r10
 1010408:	4ad3383a 	mul	r9,r9,r11
 101040c:	113fffcc 	andi	r4,r2,65535
 1010410:	1004d43a 	srli	r2,r2,16
 1010414:	4a93883a 	add	r9,r9,r10
 1010418:	3807883a 	mov	r3,r7
 101041c:	1245883a 	add	r2,r2,r9
 1010420:	280f883a 	mov	r7,r5
 1010424:	180b883a 	mov	r5,r3
 1010428:	1006943a 	slli	r3,r2,16
 101042c:	defffd04 	addi	sp,sp,-12
 1010430:	dc800215 	stw	r18,8(sp)
 1010434:	1907883a 	add	r3,r3,r4
 1010438:	dc400115 	stw	r17,4(sp)
 101043c:	dc000015 	stw	r16,0(sp)
 1010440:	4165383a 	mul	r18,r8,r5
 1010444:	31e3383a 	mul	r17,r6,r7
 1010448:	1012d43a 	srli	r9,r2,16
 101044c:	62d9383a 	mul	r12,r12,r11
 1010450:	181f883a 	mov	r15,r3
 1010454:	1280022e 	bgeu	r2,r10,1010460 <__muldi3+0x74>
 1010458:	00800074 	movhi	r2,1
 101045c:	6099883a 	add	r12,r12,r2
 1010460:	624d883a 	add	r6,r12,r9
 1010464:	9187883a 	add	r3,r18,r6
 1010468:	88c7883a 	add	r3,r17,r3
 101046c:	7805883a 	mov	r2,r15
 1010470:	dc800217 	ldw	r18,8(sp)
 1010474:	dc400117 	ldw	r17,4(sp)
 1010478:	dc000017 	ldw	r16,0(sp)
 101047c:	dec00304 	addi	sp,sp,12
 1010480:	f800283a 	ret

01010484 <__clzsi2>:
 1010484:	00bfffd4 	movui	r2,65535
 1010488:	11000e36 	bltu	r2,r4,10104c4 <__clzsi2+0x40>
 101048c:	00803fc4 	movi	r2,255
 1010490:	01400204 	movi	r5,8
 1010494:	0007883a 	mov	r3,zero
 1010498:	11001036 	bltu	r2,r4,10104dc <__clzsi2+0x58>
 101049c:	000b883a 	mov	r5,zero
 10104a0:	20c6d83a 	srl	r3,r4,r3
 10104a4:	00804074 	movhi	r2,257
 10104a8:	10949f04 	addi	r2,r2,21116
 10104ac:	1887883a 	add	r3,r3,r2
 10104b0:	18800003 	ldbu	r2,0(r3)
 10104b4:	00c00804 	movi	r3,32
 10104b8:	2885883a 	add	r2,r5,r2
 10104bc:	1885c83a 	sub	r2,r3,r2
 10104c0:	f800283a 	ret
 10104c4:	01400404 	movi	r5,16
 10104c8:	00804034 	movhi	r2,256
 10104cc:	10bfffc4 	addi	r2,r2,-1
 10104d0:	2807883a 	mov	r3,r5
 10104d4:	113ff22e 	bgeu	r2,r4,10104a0 <__clzsi2+0x1c>
 10104d8:	01400604 	movi	r5,24
 10104dc:	2807883a 	mov	r3,r5
 10104e0:	20c6d83a 	srl	r3,r4,r3
 10104e4:	00804074 	movhi	r2,257
 10104e8:	10949f04 	addi	r2,r2,21116
 10104ec:	1887883a 	add	r3,r3,r2
 10104f0:	18800003 	ldbu	r2,0(r3)
 10104f4:	00c00804 	movi	r3,32
 10104f8:	2885883a 	add	r2,r5,r2
 10104fc:	1885c83a 	sub	r2,r3,r2
 1010500:	f800283a 	ret

01010504 <__pack_d>:
 1010504:	20c00017 	ldw	r3,0(r4)
 1010508:	defffd04 	addi	sp,sp,-12
 101050c:	dc000015 	stw	r16,0(sp)
 1010510:	dc800215 	stw	r18,8(sp)
 1010514:	dc400115 	stw	r17,4(sp)
 1010518:	00800044 	movi	r2,1
 101051c:	22000317 	ldw	r8,12(r4)
 1010520:	001f883a 	mov	r15,zero
 1010524:	22400417 	ldw	r9,16(r4)
 1010528:	24000117 	ldw	r16,4(r4)
 101052c:	10c0552e 	bgeu	r2,r3,1010684 <__pack_d+0x180>
 1010530:	00800104 	movi	r2,4
 1010534:	18804f26 	beq	r3,r2,1010674 <__pack_d+0x170>
 1010538:	00800084 	movi	r2,2
 101053c:	18800226 	beq	r3,r2,1010548 <__pack_d+0x44>
 1010540:	4244b03a 	or	r2,r8,r9
 1010544:	10001a1e 	bne	r2,zero,10105b0 <__pack_d+0xac>
 1010548:	000d883a 	mov	r6,zero
 101054c:	000f883a 	mov	r7,zero
 1010550:	0011883a 	mov	r8,zero
 1010554:	00800434 	movhi	r2,16
 1010558:	10bfffc4 	addi	r2,r2,-1
 101055c:	301d883a 	mov	r14,r6
 1010560:	3884703a 	and	r2,r7,r2
 1010564:	400a953a 	slli	r5,r8,20
 1010568:	79bffc2c 	andhi	r6,r15,65520
 101056c:	308cb03a 	or	r6,r6,r2
 1010570:	00e00434 	movhi	r3,32784
 1010574:	18ffffc4 	addi	r3,r3,-1
 1010578:	800497fa 	slli	r2,r16,31
 101057c:	30c6703a 	and	r3,r6,r3
 1010580:	1946b03a 	or	r3,r3,r5
 1010584:	01600034 	movhi	r5,32768
 1010588:	297fffc4 	addi	r5,r5,-1
 101058c:	194a703a 	and	r5,r3,r5
 1010590:	288ab03a 	or	r5,r5,r2
 1010594:	2807883a 	mov	r3,r5
 1010598:	7005883a 	mov	r2,r14
 101059c:	dc800217 	ldw	r18,8(sp)
 10105a0:	dc400117 	ldw	r17,4(sp)
 10105a4:	dc000017 	ldw	r16,0(sp)
 10105a8:	dec00304 	addi	sp,sp,12
 10105ac:	f800283a 	ret
 10105b0:	21000217 	ldw	r4,8(r4)
 10105b4:	00bf0084 	movi	r2,-1022
 10105b8:	20803f16 	blt	r4,r2,10106b8 <__pack_d+0x1b4>
 10105bc:	0080ffc4 	movi	r2,1023
 10105c0:	11002c16 	blt	r2,r4,1010674 <__pack_d+0x170>
 10105c4:	00803fc4 	movi	r2,255
 10105c8:	408c703a 	and	r6,r8,r2
 10105cc:	00802004 	movi	r2,128
 10105d0:	0007883a 	mov	r3,zero
 10105d4:	000f883a 	mov	r7,zero
 10105d8:	2280ffc4 	addi	r10,r4,1023
 10105dc:	30801e26 	beq	r6,r2,1010658 <__pack_d+0x154>
 10105e0:	00801fc4 	movi	r2,127
 10105e4:	4089883a 	add	r4,r8,r2
 10105e8:	220d803a 	cmpltu	r6,r4,r8
 10105ec:	324d883a 	add	r6,r6,r9
 10105f0:	2011883a 	mov	r8,r4
 10105f4:	3013883a 	mov	r9,r6
 10105f8:	00880034 	movhi	r2,8192
 10105fc:	10bfffc4 	addi	r2,r2,-1
 1010600:	12400d36 	bltu	r2,r9,1010638 <__pack_d+0x134>
 1010604:	4804963a 	slli	r2,r9,24
 1010608:	400cd23a 	srli	r6,r8,8
 101060c:	480ed23a 	srli	r7,r9,8
 1010610:	013fffc4 	movi	r4,-1
 1010614:	118cb03a 	or	r6,r2,r6
 1010618:	01400434 	movhi	r5,16
 101061c:	297fffc4 	addi	r5,r5,-1
 1010620:	3104703a 	and	r2,r6,r4
 1010624:	3946703a 	and	r3,r7,r5
 1010628:	5201ffcc 	andi	r8,r10,2047
 101062c:	100d883a 	mov	r6,r2
 1010630:	180f883a 	mov	r7,r3
 1010634:	003fc706 	br	1010554 <__pack_d+0x50>
 1010638:	480897fa 	slli	r4,r9,31
 101063c:	4004d07a 	srli	r2,r8,1
 1010640:	4806d07a 	srli	r3,r9,1
 1010644:	52800044 	addi	r10,r10,1
 1010648:	2084b03a 	or	r2,r4,r2
 101064c:	1011883a 	mov	r8,r2
 1010650:	1813883a 	mov	r9,r3
 1010654:	003feb06 	br	1010604 <__pack_d+0x100>
 1010658:	383fe11e 	bne	r7,zero,10105e0 <__pack_d+0xdc>
 101065c:	01004004 	movi	r4,256
 1010660:	4104703a 	and	r2,r8,r4
 1010664:	10c4b03a 	or	r2,r2,r3
 1010668:	103fe326 	beq	r2,zero,10105f8 <__pack_d+0xf4>
 101066c:	3005883a 	mov	r2,r6
 1010670:	003fdc06 	br	10105e4 <__pack_d+0xe0>
 1010674:	000d883a 	mov	r6,zero
 1010678:	000f883a 	mov	r7,zero
 101067c:	0201ffc4 	movi	r8,2047
 1010680:	003fb406 	br	1010554 <__pack_d+0x50>
 1010684:	0005883a 	mov	r2,zero
 1010688:	00c00234 	movhi	r3,8
 101068c:	408cb03a 	or	r6,r8,r2
 1010690:	48ceb03a 	or	r7,r9,r3
 1010694:	013fffc4 	movi	r4,-1
 1010698:	01400434 	movhi	r5,16
 101069c:	297fffc4 	addi	r5,r5,-1
 10106a0:	3104703a 	and	r2,r6,r4
 10106a4:	3946703a 	and	r3,r7,r5
 10106a8:	100d883a 	mov	r6,r2
 10106ac:	180f883a 	mov	r7,r3
 10106b0:	0201ffc4 	movi	r8,2047
 10106b4:	003fa706 	br	1010554 <__pack_d+0x50>
 10106b8:	1109c83a 	sub	r4,r2,r4
 10106bc:	00800e04 	movi	r2,56
 10106c0:	11004316 	blt	r2,r4,10107d0 <__pack_d+0x2cc>
 10106c4:	21fff804 	addi	r7,r4,-32
 10106c8:	38004516 	blt	r7,zero,10107e0 <__pack_d+0x2dc>
 10106cc:	49d8d83a 	srl	r12,r9,r7
 10106d0:	001b883a 	mov	r13,zero
 10106d4:	0023883a 	mov	r17,zero
 10106d8:	01400044 	movi	r5,1
 10106dc:	0025883a 	mov	r18,zero
 10106e0:	38004716 	blt	r7,zero,1010800 <__pack_d+0x2fc>
 10106e4:	29d6983a 	sll	r11,r5,r7
 10106e8:	0015883a 	mov	r10,zero
 10106ec:	00bfffc4 	movi	r2,-1
 10106f0:	5089883a 	add	r4,r10,r2
 10106f4:	588b883a 	add	r5,r11,r2
 10106f8:	228d803a 	cmpltu	r6,r4,r10
 10106fc:	314b883a 	add	r5,r6,r5
 1010700:	4104703a 	and	r2,r8,r4
 1010704:	4946703a 	and	r3,r9,r5
 1010708:	10c4b03a 	or	r2,r2,r3
 101070c:	10000226 	beq	r2,zero,1010718 <__pack_d+0x214>
 1010710:	04400044 	movi	r17,1
 1010714:	0025883a 	mov	r18,zero
 1010718:	00803fc4 	movi	r2,255
 101071c:	644eb03a 	or	r7,r12,r17
 1010720:	3892703a 	and	r9,r7,r2
 1010724:	00802004 	movi	r2,128
 1010728:	6c90b03a 	or	r8,r13,r18
 101072c:	0015883a 	mov	r10,zero
 1010730:	48801626 	beq	r9,r2,101078c <__pack_d+0x288>
 1010734:	01001fc4 	movi	r4,127
 1010738:	3905883a 	add	r2,r7,r4
 101073c:	11cd803a 	cmpltu	r6,r2,r7
 1010740:	320d883a 	add	r6,r6,r8
 1010744:	100f883a 	mov	r7,r2
 1010748:	00840034 	movhi	r2,4096
 101074c:	10bfffc4 	addi	r2,r2,-1
 1010750:	3011883a 	mov	r8,r6
 1010754:	0007883a 	mov	r3,zero
 1010758:	11801b36 	bltu	r2,r6,10107c8 <__pack_d+0x2c4>
 101075c:	4004963a 	slli	r2,r8,24
 1010760:	3808d23a 	srli	r4,r7,8
 1010764:	400ad23a 	srli	r5,r8,8
 1010768:	1813883a 	mov	r9,r3
 101076c:	1108b03a 	or	r4,r2,r4
 1010770:	00bfffc4 	movi	r2,-1
 1010774:	00c00434 	movhi	r3,16
 1010778:	18ffffc4 	addi	r3,r3,-1
 101077c:	208c703a 	and	r6,r4,r2
 1010780:	28ce703a 	and	r7,r5,r3
 1010784:	4a01ffcc 	andi	r8,r9,2047
 1010788:	003f7206 	br	1010554 <__pack_d+0x50>
 101078c:	503fe91e 	bne	r10,zero,1010734 <__pack_d+0x230>
 1010790:	01004004 	movi	r4,256
 1010794:	3904703a 	and	r2,r7,r4
 1010798:	0007883a 	mov	r3,zero
 101079c:	10c4b03a 	or	r2,r2,r3
 10107a0:	10000626 	beq	r2,zero,10107bc <__pack_d+0x2b8>
 10107a4:	3a45883a 	add	r2,r7,r9
 10107a8:	11cd803a 	cmpltu	r6,r2,r7
 10107ac:	320d883a 	add	r6,r6,r8
 10107b0:	100f883a 	mov	r7,r2
 10107b4:	3011883a 	mov	r8,r6
 10107b8:	0007883a 	mov	r3,zero
 10107bc:	00840034 	movhi	r2,4096
 10107c0:	10bfffc4 	addi	r2,r2,-1
 10107c4:	123fe52e 	bgeu	r2,r8,101075c <__pack_d+0x258>
 10107c8:	00c00044 	movi	r3,1
 10107cc:	003fe306 	br	101075c <__pack_d+0x258>
 10107d0:	0009883a 	mov	r4,zero
 10107d4:	0013883a 	mov	r9,zero
 10107d8:	000b883a 	mov	r5,zero
 10107dc:	003fe406 	br	1010770 <__pack_d+0x26c>
 10107e0:	4a47883a 	add	r3,r9,r9
 10107e4:	008007c4 	movi	r2,31
 10107e8:	1105c83a 	sub	r2,r2,r4
 10107ec:	1886983a 	sll	r3,r3,r2
 10107f0:	4118d83a 	srl	r12,r8,r4
 10107f4:	491ad83a 	srl	r13,r9,r4
 10107f8:	1b18b03a 	or	r12,r3,r12
 10107fc:	003fb506 	br	10106d4 <__pack_d+0x1d0>
 1010800:	2806d07a 	srli	r3,r5,1
 1010804:	008007c4 	movi	r2,31
 1010808:	1105c83a 	sub	r2,r2,r4
 101080c:	1896d83a 	srl	r11,r3,r2
 1010810:	2914983a 	sll	r10,r5,r4
 1010814:	003fb506 	br	10106ec <__pack_d+0x1e8>

01010818 <__unpack_d>:
 1010818:	20c00117 	ldw	r3,4(r4)
 101081c:	22400017 	ldw	r9,0(r4)
 1010820:	00800434 	movhi	r2,16
 1010824:	10bfffc4 	addi	r2,r2,-1
 1010828:	1808d53a 	srli	r4,r3,20
 101082c:	180cd7fa 	srli	r6,r3,31
 1010830:	1894703a 	and	r10,r3,r2
 1010834:	2201ffcc 	andi	r8,r4,2047
 1010838:	281b883a 	mov	r13,r5
 101083c:	4817883a 	mov	r11,r9
 1010840:	29800115 	stw	r6,4(r5)
 1010844:	5019883a 	mov	r12,r10
 1010848:	40001e1e 	bne	r8,zero,10108c4 <__unpack_d+0xac>
 101084c:	4a84b03a 	or	r2,r9,r10
 1010850:	10001926 	beq	r2,zero,10108b8 <__unpack_d+0xa0>
 1010854:	4804d63a 	srli	r2,r9,24
 1010858:	500c923a 	slli	r6,r10,8
 101085c:	013f0084 	movi	r4,-1022
 1010860:	00c40034 	movhi	r3,4096
 1010864:	18ffffc4 	addi	r3,r3,-1
 1010868:	118cb03a 	or	r6,r2,r6
 101086c:	008000c4 	movi	r2,3
 1010870:	480a923a 	slli	r5,r9,8
 1010874:	68800015 	stw	r2,0(r13)
 1010878:	69000215 	stw	r4,8(r13)
 101087c:	19800b36 	bltu	r3,r6,10108ac <__unpack_d+0x94>
 1010880:	200f883a 	mov	r7,r4
 1010884:	1811883a 	mov	r8,r3
 1010888:	2945883a 	add	r2,r5,r5
 101088c:	1149803a 	cmpltu	r4,r2,r5
 1010890:	3187883a 	add	r3,r6,r6
 1010894:	20c9883a 	add	r4,r4,r3
 1010898:	100b883a 	mov	r5,r2
 101089c:	200d883a 	mov	r6,r4
 10108a0:	39ffffc4 	addi	r7,r7,-1
 10108a4:	413ff82e 	bgeu	r8,r4,1010888 <__unpack_d+0x70>
 10108a8:	69c00215 	stw	r7,8(r13)
 10108ac:	69800415 	stw	r6,16(r13)
 10108b0:	69400315 	stw	r5,12(r13)
 10108b4:	f800283a 	ret
 10108b8:	00800084 	movi	r2,2
 10108bc:	28800015 	stw	r2,0(r5)
 10108c0:	f800283a 	ret
 10108c4:	0081ffc4 	movi	r2,2047
 10108c8:	40800f26 	beq	r8,r2,1010908 <__unpack_d+0xf0>
 10108cc:	480cd63a 	srli	r6,r9,24
 10108d0:	5006923a 	slli	r3,r10,8
 10108d4:	4804923a 	slli	r2,r9,8
 10108d8:	0009883a 	mov	r4,zero
 10108dc:	30c6b03a 	or	r3,r6,r3
 10108e0:	01440034 	movhi	r5,4096
 10108e4:	110cb03a 	or	r6,r2,r4
 10108e8:	423f0044 	addi	r8,r8,-1023
 10108ec:	194eb03a 	or	r7,r3,r5
 10108f0:	008000c4 	movi	r2,3
 10108f4:	69c00415 	stw	r7,16(r13)
 10108f8:	6a000215 	stw	r8,8(r13)
 10108fc:	68800015 	stw	r2,0(r13)
 1010900:	69800315 	stw	r6,12(r13)
 1010904:	f800283a 	ret
 1010908:	4a84b03a 	or	r2,r9,r10
 101090c:	1000031e 	bne	r2,zero,101091c <__unpack_d+0x104>
 1010910:	00800104 	movi	r2,4
 1010914:	28800015 	stw	r2,0(r5)
 1010918:	f800283a 	ret
 101091c:	0009883a 	mov	r4,zero
 1010920:	01400234 	movhi	r5,8
 1010924:	4904703a 	and	r2,r9,r4
 1010928:	5146703a 	and	r3,r10,r5
 101092c:	10c4b03a 	or	r2,r2,r3
 1010930:	10000526 	beq	r2,zero,1010948 <__unpack_d+0x130>
 1010934:	00800044 	movi	r2,1
 1010938:	68800015 	stw	r2,0(r13)
 101093c:	6b000415 	stw	r12,16(r13)
 1010940:	6ac00315 	stw	r11,12(r13)
 1010944:	f800283a 	ret
 1010948:	68000015 	stw	zero,0(r13)
 101094c:	003ffb06 	br	101093c <__unpack_d+0x124>

01010950 <__fpcmp_parts_d>:
 1010950:	21800017 	ldw	r6,0(r4)
 1010954:	00c00044 	movi	r3,1
 1010958:	19800a2e 	bgeu	r3,r6,1010984 <__fpcmp_parts_d+0x34>
 101095c:	28800017 	ldw	r2,0(r5)
 1010960:	1880082e 	bgeu	r3,r2,1010984 <__fpcmp_parts_d+0x34>
 1010964:	00c00104 	movi	r3,4
 1010968:	30c02626 	beq	r6,r3,1010a04 <__fpcmp_parts_d+0xb4>
 101096c:	10c02226 	beq	r2,r3,10109f8 <__fpcmp_parts_d+0xa8>
 1010970:	00c00084 	movi	r3,2
 1010974:	30c00526 	beq	r6,r3,101098c <__fpcmp_parts_d+0x3c>
 1010978:	10c0071e 	bne	r2,r3,1010998 <__fpcmp_parts_d+0x48>
 101097c:	20800117 	ldw	r2,4(r4)
 1010980:	1000091e 	bne	r2,zero,10109a8 <__fpcmp_parts_d+0x58>
 1010984:	00800044 	movi	r2,1
 1010988:	f800283a 	ret
 101098c:	10c01a1e 	bne	r2,r3,10109f8 <__fpcmp_parts_d+0xa8>
 1010990:	0005883a 	mov	r2,zero
 1010994:	f800283a 	ret
 1010998:	22000117 	ldw	r8,4(r4)
 101099c:	28800117 	ldw	r2,4(r5)
 10109a0:	40800326 	beq	r8,r2,10109b0 <__fpcmp_parts_d+0x60>
 10109a4:	403ff726 	beq	r8,zero,1010984 <__fpcmp_parts_d+0x34>
 10109a8:	00bfffc4 	movi	r2,-1
 10109ac:	f800283a 	ret
 10109b0:	20c00217 	ldw	r3,8(r4)
 10109b4:	28800217 	ldw	r2,8(r5)
 10109b8:	10fffa16 	blt	r2,r3,10109a4 <__fpcmp_parts_d+0x54>
 10109bc:	18800916 	blt	r3,r2,10109e4 <__fpcmp_parts_d+0x94>
 10109c0:	21c00417 	ldw	r7,16(r4)
 10109c4:	28c00417 	ldw	r3,16(r5)
 10109c8:	21800317 	ldw	r6,12(r4)
 10109cc:	28800317 	ldw	r2,12(r5)
 10109d0:	19fff436 	bltu	r3,r7,10109a4 <__fpcmp_parts_d+0x54>
 10109d4:	38c00526 	beq	r7,r3,10109ec <__fpcmp_parts_d+0x9c>
 10109d8:	38c00236 	bltu	r7,r3,10109e4 <__fpcmp_parts_d+0x94>
 10109dc:	19ffec1e 	bne	r3,r7,1010990 <__fpcmp_parts_d+0x40>
 10109e0:	30bfeb2e 	bgeu	r6,r2,1010990 <__fpcmp_parts_d+0x40>
 10109e4:	403fe71e 	bne	r8,zero,1010984 <__fpcmp_parts_d+0x34>
 10109e8:	003fef06 	br	10109a8 <__fpcmp_parts_d+0x58>
 10109ec:	11bffa2e 	bgeu	r2,r6,10109d8 <__fpcmp_parts_d+0x88>
 10109f0:	403fe426 	beq	r8,zero,1010984 <__fpcmp_parts_d+0x34>
 10109f4:	003fec06 	br	10109a8 <__fpcmp_parts_d+0x58>
 10109f8:	28800117 	ldw	r2,4(r5)
 10109fc:	103fe11e 	bne	r2,zero,1010984 <__fpcmp_parts_d+0x34>
 1010a00:	003fe906 	br	10109a8 <__fpcmp_parts_d+0x58>
 1010a04:	11bfdd1e 	bne	r2,r6,101097c <__fpcmp_parts_d+0x2c>
 1010a08:	28c00117 	ldw	r3,4(r5)
 1010a0c:	20800117 	ldw	r2,4(r4)
 1010a10:	1885c83a 	sub	r2,r3,r2
 1010a14:	f800283a 	ret

01010a18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1010a18:	defff804 	addi	sp,sp,-32
 1010a1c:	dfc00715 	stw	ra,28(sp)
 1010a20:	df000615 	stw	fp,24(sp)
 1010a24:	df000604 	addi	fp,sp,24
 1010a28:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1010a2c:	e0bffc17 	ldw	r2,-16(fp)
 1010a30:	1004803a 	cmplt	r2,r2,zero
 1010a34:	1000081e 	bne	r2,zero,1010a58 <close+0x40>
 1010a38:	e0bffc17 	ldw	r2,-16(fp)
 1010a3c:	10800324 	muli	r2,r2,12
 1010a40:	1007883a 	mov	r3,r2
 1010a44:	00804074 	movhi	r2,257
 1010a48:	1097eb04 	addi	r2,r2,24492
 1010a4c:	1887883a 	add	r3,r3,r2
 1010a50:	e0ffff15 	stw	r3,-4(fp)
 1010a54:	00000106 	br	1010a5c <close+0x44>
 1010a58:	e03fff15 	stw	zero,-4(fp)
 1010a5c:	e0bfff17 	ldw	r2,-4(fp)
 1010a60:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1010a64:	e0bffb17 	ldw	r2,-20(fp)
 1010a68:	1005003a 	cmpeq	r2,r2,zero
 1010a6c:	10001d1e 	bne	r2,zero,1010ae4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1010a70:	e0bffb17 	ldw	r2,-20(fp)
 1010a74:	10800017 	ldw	r2,0(r2)
 1010a78:	10800417 	ldw	r2,16(r2)
 1010a7c:	1005003a 	cmpeq	r2,r2,zero
 1010a80:	1000071e 	bne	r2,zero,1010aa0 <close+0x88>
 1010a84:	e0bffb17 	ldw	r2,-20(fp)
 1010a88:	10800017 	ldw	r2,0(r2)
 1010a8c:	10800417 	ldw	r2,16(r2)
 1010a90:	e13ffb17 	ldw	r4,-20(fp)
 1010a94:	103ee83a 	callr	r2
 1010a98:	e0bffe15 	stw	r2,-8(fp)
 1010a9c:	00000106 	br	1010aa4 <close+0x8c>
 1010aa0:	e03ffe15 	stw	zero,-8(fp)
 1010aa4:	e0bffe17 	ldw	r2,-8(fp)
 1010aa8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1010aac:	e13ffc17 	ldw	r4,-16(fp)
 1010ab0:	101163c0 	call	101163c <alt_release_fd>
    if (rval < 0)
 1010ab4:	e0bffa17 	ldw	r2,-24(fp)
 1010ab8:	1004403a 	cmpge	r2,r2,zero
 1010abc:	1000071e 	bne	r2,zero,1010adc <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1010ac0:	1010b140 	call	1010b14 <alt_get_errno>
 1010ac4:	e0fffa17 	ldw	r3,-24(fp)
 1010ac8:	00c7c83a 	sub	r3,zero,r3
 1010acc:	10c00015 	stw	r3,0(r2)
      return -1;
 1010ad0:	00bfffc4 	movi	r2,-1
 1010ad4:	e0bffd15 	stw	r2,-12(fp)
 1010ad8:	00000806 	br	1010afc <close+0xe4>
    }
    return 0;
 1010adc:	e03ffd15 	stw	zero,-12(fp)
 1010ae0:	00000606 	br	1010afc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1010ae4:	1010b140 	call	1010b14 <alt_get_errno>
 1010ae8:	1007883a 	mov	r3,r2
 1010aec:	00801444 	movi	r2,81
 1010af0:	18800015 	stw	r2,0(r3)
    return -1;
 1010af4:	00bfffc4 	movi	r2,-1
 1010af8:	e0bffd15 	stw	r2,-12(fp)
 1010afc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1010b00:	e037883a 	mov	sp,fp
 1010b04:	dfc00117 	ldw	ra,4(sp)
 1010b08:	df000017 	ldw	fp,0(sp)
 1010b0c:	dec00204 	addi	sp,sp,8
 1010b10:	f800283a 	ret

01010b14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010b14:	defffd04 	addi	sp,sp,-12
 1010b18:	dfc00215 	stw	ra,8(sp)
 1010b1c:	df000115 	stw	fp,4(sp)
 1010b20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010b24:	00804074 	movhi	r2,257
 1010b28:	109cf404 	addi	r2,r2,29648
 1010b2c:	10800017 	ldw	r2,0(r2)
 1010b30:	1005003a 	cmpeq	r2,r2,zero
 1010b34:	1000061e 	bne	r2,zero,1010b50 <alt_get_errno+0x3c>
 1010b38:	00804074 	movhi	r2,257
 1010b3c:	109cf404 	addi	r2,r2,29648
 1010b40:	10800017 	ldw	r2,0(r2)
 1010b44:	103ee83a 	callr	r2
 1010b48:	e0bfff15 	stw	r2,-4(fp)
 1010b4c:	00000306 	br	1010b5c <alt_get_errno+0x48>
 1010b50:	008040b4 	movhi	r2,258
 1010b54:	10a4d904 	addi	r2,r2,-27804
 1010b58:	e0bfff15 	stw	r2,-4(fp)
 1010b5c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010b60:	e037883a 	mov	sp,fp
 1010b64:	dfc00117 	ldw	ra,4(sp)
 1010b68:	df000017 	ldw	fp,0(sp)
 1010b6c:	dec00204 	addi	sp,sp,8
 1010b70:	f800283a 	ret

01010b74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1010b74:	defffc04 	addi	sp,sp,-16
 1010b78:	df000315 	stw	fp,12(sp)
 1010b7c:	df000304 	addi	fp,sp,12
 1010b80:	e13ffd15 	stw	r4,-12(fp)
 1010b84:	e17ffe15 	stw	r5,-8(fp)
 1010b88:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1010b8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010b90:	e037883a 	mov	sp,fp
 1010b94:	df000017 	ldw	fp,0(sp)
 1010b98:	dec00104 	addi	sp,sp,4
 1010b9c:	f800283a 	ret

01010ba0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1010ba0:	defffd04 	addi	sp,sp,-12
 1010ba4:	df000215 	stw	fp,8(sp)
 1010ba8:	df000204 	addi	fp,sp,8
 1010bac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1010bb0:	e0bfff17 	ldw	r2,-4(fp)
 1010bb4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1010bb8:	e0bffe17 	ldw	r2,-8(fp)
 1010bbc:	1005003a 	cmpeq	r2,r2,zero
 1010bc0:	1000021e 	bne	r2,zero,1010bcc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1010bc4:	002af070 	cmpltui	zero,zero,43969
 1010bc8:	00000106 	br	1010bd0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1010bcc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1010bd0:	e037883a 	mov	sp,fp
 1010bd4:	df000017 	ldw	fp,0(sp)
 1010bd8:	dec00104 	addi	sp,sp,4
 1010bdc:	f800283a 	ret

01010be0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1010be0:	defffd04 	addi	sp,sp,-12
 1010be4:	dfc00215 	stw	ra,8(sp)
 1010be8:	df000115 	stw	fp,4(sp)
 1010bec:	df000104 	addi	fp,sp,4
 1010bf0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1010bf4:	e13fff17 	ldw	r4,-4(fp)
 1010bf8:	1010ba00 	call	1010ba0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1010bfc:	003fff06 	br	1010bfc <_exit+0x1c>

01010c00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1010c00:	defff904 	addi	sp,sp,-28
 1010c04:	dfc00615 	stw	ra,24(sp)
 1010c08:	df000515 	stw	fp,20(sp)
 1010c0c:	df000504 	addi	fp,sp,20
 1010c10:	e13ffc15 	stw	r4,-16(fp)
 1010c14:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1010c18:	e0bffc17 	ldw	r2,-16(fp)
 1010c1c:	1004803a 	cmplt	r2,r2,zero
 1010c20:	1000081e 	bne	r2,zero,1010c44 <fstat+0x44>
 1010c24:	e0bffc17 	ldw	r2,-16(fp)
 1010c28:	10800324 	muli	r2,r2,12
 1010c2c:	1007883a 	mov	r3,r2
 1010c30:	00804074 	movhi	r2,257
 1010c34:	1097eb04 	addi	r2,r2,24492
 1010c38:	1887883a 	add	r3,r3,r2
 1010c3c:	e0ffff15 	stw	r3,-4(fp)
 1010c40:	00000106 	br	1010c48 <fstat+0x48>
 1010c44:	e03fff15 	stw	zero,-4(fp)
 1010c48:	e0bfff17 	ldw	r2,-4(fp)
 1010c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1010c50:	e0bffb17 	ldw	r2,-20(fp)
 1010c54:	1005003a 	cmpeq	r2,r2,zero
 1010c58:	1000121e 	bne	r2,zero,1010ca4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1010c5c:	e0bffb17 	ldw	r2,-20(fp)
 1010c60:	10800017 	ldw	r2,0(r2)
 1010c64:	10800817 	ldw	r2,32(r2)
 1010c68:	1005003a 	cmpeq	r2,r2,zero
 1010c6c:	1000081e 	bne	r2,zero,1010c90 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1010c70:	e0bffb17 	ldw	r2,-20(fp)
 1010c74:	10800017 	ldw	r2,0(r2)
 1010c78:	10800817 	ldw	r2,32(r2)
 1010c7c:	e13ffb17 	ldw	r4,-20(fp)
 1010c80:	e17ffd17 	ldw	r5,-12(fp)
 1010c84:	103ee83a 	callr	r2
 1010c88:	e0bffe15 	stw	r2,-8(fp)
 1010c8c:	00000b06 	br	1010cbc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1010c90:	e0fffd17 	ldw	r3,-12(fp)
 1010c94:	00880004 	movi	r2,8192
 1010c98:	18800115 	stw	r2,4(r3)
      return 0;
 1010c9c:	e03ffe15 	stw	zero,-8(fp)
 1010ca0:	00000606 	br	1010cbc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1010ca4:	1010cd40 	call	1010cd4 <alt_get_errno>
 1010ca8:	1007883a 	mov	r3,r2
 1010cac:	00801444 	movi	r2,81
 1010cb0:	18800015 	stw	r2,0(r3)
    return -1;
 1010cb4:	00bfffc4 	movi	r2,-1
 1010cb8:	e0bffe15 	stw	r2,-8(fp)
 1010cbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1010cc0:	e037883a 	mov	sp,fp
 1010cc4:	dfc00117 	ldw	ra,4(sp)
 1010cc8:	df000017 	ldw	fp,0(sp)
 1010ccc:	dec00204 	addi	sp,sp,8
 1010cd0:	f800283a 	ret

01010cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010cd4:	defffd04 	addi	sp,sp,-12
 1010cd8:	dfc00215 	stw	ra,8(sp)
 1010cdc:	df000115 	stw	fp,4(sp)
 1010ce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010ce4:	00804074 	movhi	r2,257
 1010ce8:	109cf404 	addi	r2,r2,29648
 1010cec:	10800017 	ldw	r2,0(r2)
 1010cf0:	1005003a 	cmpeq	r2,r2,zero
 1010cf4:	1000061e 	bne	r2,zero,1010d10 <alt_get_errno+0x3c>
 1010cf8:	00804074 	movhi	r2,257
 1010cfc:	109cf404 	addi	r2,r2,29648
 1010d00:	10800017 	ldw	r2,0(r2)
 1010d04:	103ee83a 	callr	r2
 1010d08:	e0bfff15 	stw	r2,-4(fp)
 1010d0c:	00000306 	br	1010d1c <alt_get_errno+0x48>
 1010d10:	008040b4 	movhi	r2,258
 1010d14:	10a4d904 	addi	r2,r2,-27804
 1010d18:	e0bfff15 	stw	r2,-4(fp)
 1010d1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010d20:	e037883a 	mov	sp,fp
 1010d24:	dfc00117 	ldw	ra,4(sp)
 1010d28:	df000017 	ldw	fp,0(sp)
 1010d2c:	dec00204 	addi	sp,sp,8
 1010d30:	f800283a 	ret

01010d34 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1010d34:	deffff04 	addi	sp,sp,-4
 1010d38:	df000015 	stw	fp,0(sp)
 1010d3c:	d839883a 	mov	fp,sp
  return 0;
 1010d40:	0005883a 	mov	r2,zero
}
 1010d44:	e037883a 	mov	sp,fp
 1010d48:	df000017 	ldw	fp,0(sp)
 1010d4c:	dec00104 	addi	sp,sp,4
 1010d50:	f800283a 	ret

01010d54 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1010d54:	deffef04 	addi	sp,sp,-68
 1010d58:	df001015 	stw	fp,64(sp)
 1010d5c:	df001004 	addi	fp,sp,64
 1010d60:	e13ffc15 	stw	r4,-16(fp)
 1010d64:	e17ffd15 	stw	r5,-12(fp)
 1010d68:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1010d6c:	00bffa84 	movi	r2,-22
 1010d70:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010d74:	e0bffc17 	ldw	r2,-16(fp)
 1010d78:	10800828 	cmpgeui	r2,r2,32
 1010d7c:	1000601e 	bne	r2,zero,1010f00 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010d80:	0005303a 	rdctl	r2,status
 1010d84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d88:	e0fff917 	ldw	r3,-28(fp)
 1010d8c:	00bfff84 	movi	r2,-2
 1010d90:	1884703a 	and	r2,r3,r2
 1010d94:	1001703a 	wrctl	status,r2
  
  return context;
 1010d98:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1010d9c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1010da0:	e0bffc17 	ldw	r2,-16(fp)
 1010da4:	00c040b4 	movhi	r3,258
 1010da8:	18eaf804 	addi	r3,r3,-21536
 1010dac:	100490fa 	slli	r2,r2,3
 1010db0:	10c7883a 	add	r3,r2,r3
 1010db4:	e0bffe17 	ldw	r2,-8(fp)
 1010db8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1010dbc:	e0bffc17 	ldw	r2,-16(fp)
 1010dc0:	00c040b4 	movhi	r3,258
 1010dc4:	18eaf804 	addi	r3,r3,-21536
 1010dc8:	100490fa 	slli	r2,r2,3
 1010dcc:	10c5883a 	add	r2,r2,r3
 1010dd0:	10c00104 	addi	r3,r2,4
 1010dd4:	e0bffd17 	ldw	r2,-12(fp)
 1010dd8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1010ddc:	e0bffe17 	ldw	r2,-8(fp)
 1010de0:	1005003a 	cmpeq	r2,r2,zero
 1010de4:	1000201e 	bne	r2,zero,1010e68 <alt_irq_register+0x114>
 1010de8:	e0bffc17 	ldw	r2,-16(fp)
 1010dec:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010df0:	0005303a 	rdctl	r2,status
 1010df4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010df8:	e0fff617 	ldw	r3,-40(fp)
 1010dfc:	00bfff84 	movi	r2,-2
 1010e00:	1884703a 	and	r2,r3,r2
 1010e04:	1001703a 	wrctl	status,r2
  
  return context;
 1010e08:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010e0c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1010e10:	e0fff717 	ldw	r3,-36(fp)
 1010e14:	00800044 	movi	r2,1
 1010e18:	10c4983a 	sll	r2,r2,r3
 1010e1c:	1007883a 	mov	r3,r2
 1010e20:	008040b4 	movhi	r2,258
 1010e24:	10a4dd04 	addi	r2,r2,-27788
 1010e28:	10800017 	ldw	r2,0(r2)
 1010e2c:	1886b03a 	or	r3,r3,r2
 1010e30:	008040b4 	movhi	r2,258
 1010e34:	10a4dd04 	addi	r2,r2,-27788
 1010e38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010e3c:	008040b4 	movhi	r2,258
 1010e40:	10a4dd04 	addi	r2,r2,-27788
 1010e44:	10800017 	ldw	r2,0(r2)
 1010e48:	100170fa 	wrctl	ienable,r2
 1010e4c:	e0bff817 	ldw	r2,-32(fp)
 1010e50:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010e54:	e0bff517 	ldw	r2,-44(fp)
 1010e58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010e5c:	0005883a 	mov	r2,zero
 1010e60:	e0bfff15 	stw	r2,-4(fp)
 1010e64:	00002006 	br	1010ee8 <alt_irq_register+0x194>
 1010e68:	e0bffc17 	ldw	r2,-16(fp)
 1010e6c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e70:	0005303a 	rdctl	r2,status
 1010e74:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e78:	e0fff217 	ldw	r3,-56(fp)
 1010e7c:	00bfff84 	movi	r2,-2
 1010e80:	1884703a 	and	r2,r3,r2
 1010e84:	1001703a 	wrctl	status,r2
  
  return context;
 1010e88:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010e8c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1010e90:	e0fff317 	ldw	r3,-52(fp)
 1010e94:	00800044 	movi	r2,1
 1010e98:	10c4983a 	sll	r2,r2,r3
 1010e9c:	0084303a 	nor	r2,zero,r2
 1010ea0:	1007883a 	mov	r3,r2
 1010ea4:	008040b4 	movhi	r2,258
 1010ea8:	10a4dd04 	addi	r2,r2,-27788
 1010eac:	10800017 	ldw	r2,0(r2)
 1010eb0:	1886703a 	and	r3,r3,r2
 1010eb4:	008040b4 	movhi	r2,258
 1010eb8:	10a4dd04 	addi	r2,r2,-27788
 1010ebc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010ec0:	008040b4 	movhi	r2,258
 1010ec4:	10a4dd04 	addi	r2,r2,-27788
 1010ec8:	10800017 	ldw	r2,0(r2)
 1010ecc:	100170fa 	wrctl	ienable,r2
 1010ed0:	e0bff417 	ldw	r2,-48(fp)
 1010ed4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010ed8:	e0bff117 	ldw	r2,-60(fp)
 1010edc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010ee0:	0005883a 	mov	r2,zero
 1010ee4:	e0bfff15 	stw	r2,-4(fp)
 1010ee8:	e0bfff17 	ldw	r2,-4(fp)
 1010eec:	e0bffb15 	stw	r2,-20(fp)
 1010ef0:	e0bffa17 	ldw	r2,-24(fp)
 1010ef4:	e0bff015 	stw	r2,-64(fp)
 1010ef8:	e0bff017 	ldw	r2,-64(fp)
 1010efc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1010f00:	e0bffb17 	ldw	r2,-20(fp)
}
 1010f04:	e037883a 	mov	sp,fp
 1010f08:	df000017 	ldw	fp,0(sp)
 1010f0c:	dec00104 	addi	sp,sp,4
 1010f10:	f800283a 	ret

01010f14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1010f14:	deffeb04 	addi	sp,sp,-84
 1010f18:	dfc01415 	stw	ra,80(sp)
 1010f1c:	df001315 	stw	fp,76(sp)
 1010f20:	df001304 	addi	fp,sp,76
 1010f24:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1010f28:	e0bffd17 	ldw	r2,-12(fp)
 1010f2c:	1004803a 	cmplt	r2,r2,zero
 1010f30:	1000081e 	bne	r2,zero,1010f54 <isatty+0x40>
 1010f34:	e0bffd17 	ldw	r2,-12(fp)
 1010f38:	10800324 	muli	r2,r2,12
 1010f3c:	1007883a 	mov	r3,r2
 1010f40:	00804074 	movhi	r2,257
 1010f44:	1097eb04 	addi	r2,r2,24492
 1010f48:	1887883a 	add	r3,r3,r2
 1010f4c:	e0ffff15 	stw	r3,-4(fp)
 1010f50:	00000106 	br	1010f58 <isatty+0x44>
 1010f54:	e03fff15 	stw	zero,-4(fp)
 1010f58:	e0bfff17 	ldw	r2,-4(fp)
 1010f5c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1010f60:	e0bfed17 	ldw	r2,-76(fp)
 1010f64:	1005003a 	cmpeq	r2,r2,zero
 1010f68:	10000f1e 	bne	r2,zero,1010fa8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1010f6c:	e0bfed17 	ldw	r2,-76(fp)
 1010f70:	10800017 	ldw	r2,0(r2)
 1010f74:	10800817 	ldw	r2,32(r2)
 1010f78:	1004c03a 	cmpne	r2,r2,zero
 1010f7c:	1000031e 	bne	r2,zero,1010f8c <isatty+0x78>
    {
      return 1;
 1010f80:	00800044 	movi	r2,1
 1010f84:	e0bffe15 	stw	r2,-8(fp)
 1010f88:	00000c06 	br	1010fbc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1010f8c:	e17fee04 	addi	r5,fp,-72
 1010f90:	e13ffd17 	ldw	r4,-12(fp)
 1010f94:	1010c000 	call	1010c00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1010f98:	e0bfef17 	ldw	r2,-68(fp)
 1010f9c:	10880020 	cmpeqi	r2,r2,8192
 1010fa0:	e0bffe15 	stw	r2,-8(fp)
 1010fa4:	00000506 	br	1010fbc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1010fa8:	1010fd40 	call	1010fd4 <alt_get_errno>
 1010fac:	1007883a 	mov	r3,r2
 1010fb0:	00801444 	movi	r2,81
 1010fb4:	18800015 	stw	r2,0(r3)
    return 0;
 1010fb8:	e03ffe15 	stw	zero,-8(fp)
 1010fbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1010fc0:	e037883a 	mov	sp,fp
 1010fc4:	dfc00117 	ldw	ra,4(sp)
 1010fc8:	df000017 	ldw	fp,0(sp)
 1010fcc:	dec00204 	addi	sp,sp,8
 1010fd0:	f800283a 	ret

01010fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010fd4:	defffd04 	addi	sp,sp,-12
 1010fd8:	dfc00215 	stw	ra,8(sp)
 1010fdc:	df000115 	stw	fp,4(sp)
 1010fe0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1010fe4:	00804074 	movhi	r2,257
 1010fe8:	109cf404 	addi	r2,r2,29648
 1010fec:	10800017 	ldw	r2,0(r2)
 1010ff0:	1005003a 	cmpeq	r2,r2,zero
 1010ff4:	1000061e 	bne	r2,zero,1011010 <alt_get_errno+0x3c>
 1010ff8:	00804074 	movhi	r2,257
 1010ffc:	109cf404 	addi	r2,r2,29648
 1011000:	10800017 	ldw	r2,0(r2)
 1011004:	103ee83a 	callr	r2
 1011008:	e0bfff15 	stw	r2,-4(fp)
 101100c:	00000306 	br	101101c <alt_get_errno+0x48>
 1011010:	008040b4 	movhi	r2,258
 1011014:	10a4d904 	addi	r2,r2,-27804
 1011018:	e0bfff15 	stw	r2,-4(fp)
 101101c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011020:	e037883a 	mov	sp,fp
 1011024:	dfc00117 	ldw	ra,4(sp)
 1011028:	df000017 	ldw	fp,0(sp)
 101102c:	dec00204 	addi	sp,sp,8
 1011030:	f800283a 	ret

01011034 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1011034:	defffa04 	addi	sp,sp,-24
 1011038:	dfc00515 	stw	ra,20(sp)
 101103c:	df000415 	stw	fp,16(sp)
 1011040:	df000404 	addi	fp,sp,16
 1011044:	e13ffd15 	stw	r4,-12(fp)
 1011048:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 101104c:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1011050:	e0bffd17 	ldw	r2,-12(fp)
 1011054:	10800048 	cmpgei	r2,r2,1
 1011058:	1000301e 	bne	r2,zero,101111c <kill+0xe8>
  {
    switch (sig)
 101105c:	e0bffe17 	ldw	r2,-8(fp)
 1011060:	10800828 	cmpgeui	r2,r2,32
 1011064:	10002a1e 	bne	r2,zero,1011110 <kill+0xdc>
 1011068:	e0bffe17 	ldw	r2,-8(fp)
 101106c:	1085883a 	add	r2,r2,r2
 1011070:	1087883a 	add	r3,r2,r2
 1011074:	00804074 	movhi	r2,257
 1011078:	10842204 	addi	r2,r2,4232
 101107c:	1885883a 	add	r2,r3,r2
 1011080:	10800017 	ldw	r2,0(r2)
 1011084:	1000683a 	jmp	r2
 1011088:	01011130 	cmpltui	r4,zero,1092
 101108c:	01011110 	cmplti	r4,zero,1092
 1011090:	01011110 	cmplti	r4,zero,1092
 1011094:	01011108 	cmpgei	r4,zero,1092
 1011098:	01011108 	cmpgei	r4,zero,1092
 101109c:	01011108 	cmpgei	r4,zero,1092
 10110a0:	01011108 	cmpgei	r4,zero,1092
 10110a4:	01011110 	cmplti	r4,zero,1092
 10110a8:	01011108 	cmpgei	r4,zero,1092
 10110ac:	01011108 	cmpgei	r4,zero,1092
 10110b0:	01011108 	cmpgei	r4,zero,1092
 10110b4:	01011108 	cmpgei	r4,zero,1092
 10110b8:	01011108 	cmpgei	r4,zero,1092
 10110bc:	01011108 	cmpgei	r4,zero,1092
 10110c0:	01011108 	cmpgei	r4,zero,1092
 10110c4:	01011108 	cmpgei	r4,zero,1092
 10110c8:	01011130 	cmpltui	r4,zero,1092
 10110cc:	01011110 	cmplti	r4,zero,1092
 10110d0:	01011110 	cmplti	r4,zero,1092
 10110d4:	01011110 	cmplti	r4,zero,1092
 10110d8:	01011130 	cmpltui	r4,zero,1092
 10110dc:	01011110 	cmplti	r4,zero,1092
 10110e0:	01011110 	cmplti	r4,zero,1092
 10110e4:	01011108 	cmpgei	r4,zero,1092
 10110e8:	01011108 	cmpgei	r4,zero,1092
 10110ec:	01011108 	cmpgei	r4,zero,1092
 10110f0:	01011108 	cmpgei	r4,zero,1092
 10110f4:	01011108 	cmpgei	r4,zero,1092
 10110f8:	01011110 	cmplti	r4,zero,1092
 10110fc:	01011110 	cmplti	r4,zero,1092
 1011100:	01011108 	cmpgei	r4,zero,1092
 1011104:	01011108 	cmpgei	r4,zero,1092
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1011108:	0009883a 	mov	r4,zero
 101110c:	1010be00 	call	1010be0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1011110:	00800584 	movi	r2,22
 1011114:	e0bffc15 	stw	r2,-16(fp)
 1011118:	00000506 	br	1011130 <kill+0xfc>
    }
  }

  else if (pid > 0)
 101111c:	e0bffd17 	ldw	r2,-12(fp)
 1011120:	10800050 	cmplti	r2,r2,1
 1011124:	1000021e 	bne	r2,zero,1011130 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1011128:	008000c4 	movi	r2,3
 101112c:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1011130:	e0bffc17 	ldw	r2,-16(fp)
 1011134:	1005003a 	cmpeq	r2,r2,zero
 1011138:	1000071e 	bne	r2,zero,1011158 <kill+0x124>
  {
    ALT_ERRNO = status;
 101113c:	10111740 	call	1011174 <alt_get_errno>
 1011140:	1007883a 	mov	r3,r2
 1011144:	e0bffc17 	ldw	r2,-16(fp)
 1011148:	18800015 	stw	r2,0(r3)
    return -1;
 101114c:	00bfffc4 	movi	r2,-1
 1011150:	e0bfff15 	stw	r2,-4(fp)
 1011154:	00000106 	br	101115c <kill+0x128>
  }

  return 0;
 1011158:	e03fff15 	stw	zero,-4(fp)
 101115c:	e0bfff17 	ldw	r2,-4(fp)
}
 1011160:	e037883a 	mov	sp,fp
 1011164:	dfc00117 	ldw	ra,4(sp)
 1011168:	df000017 	ldw	fp,0(sp)
 101116c:	dec00204 	addi	sp,sp,8
 1011170:	f800283a 	ret

01011174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1011174:	defffd04 	addi	sp,sp,-12
 1011178:	dfc00215 	stw	ra,8(sp)
 101117c:	df000115 	stw	fp,4(sp)
 1011180:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1011184:	00804074 	movhi	r2,257
 1011188:	109cf404 	addi	r2,r2,29648
 101118c:	10800017 	ldw	r2,0(r2)
 1011190:	1005003a 	cmpeq	r2,r2,zero
 1011194:	1000061e 	bne	r2,zero,10111b0 <alt_get_errno+0x3c>
 1011198:	00804074 	movhi	r2,257
 101119c:	109cf404 	addi	r2,r2,29648
 10111a0:	10800017 	ldw	r2,0(r2)
 10111a4:	103ee83a 	callr	r2
 10111a8:	e0bfff15 	stw	r2,-4(fp)
 10111ac:	00000306 	br	10111bc <alt_get_errno+0x48>
 10111b0:	008040b4 	movhi	r2,258
 10111b4:	10a4d904 	addi	r2,r2,-27804
 10111b8:	e0bfff15 	stw	r2,-4(fp)
 10111bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10111c0:	e037883a 	mov	sp,fp
 10111c4:	dfc00117 	ldw	ra,4(sp)
 10111c8:	df000017 	ldw	fp,0(sp)
 10111cc:	dec00204 	addi	sp,sp,8
 10111d0:	f800283a 	ret

010111d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10111d4:	defffe04 	addi	sp,sp,-8
 10111d8:	dfc00115 	stw	ra,4(sp)
 10111dc:	df000015 	stw	fp,0(sp)
 10111e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10111e4:	01004074 	movhi	r4,257
 10111e8:	211cf904 	addi	r4,r4,29668
 10111ec:	01404074 	movhi	r5,257
 10111f0:	29552f04 	addi	r5,r5,21692
 10111f4:	01804074 	movhi	r6,257
 10111f8:	319cf904 	addi	r6,r6,29668
 10111fc:	10112540 	call	1011254 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1011200:	01004034 	movhi	r4,256
 1011204:	21000804 	addi	r4,r4,32
 1011208:	01404034 	movhi	r5,256
 101120c:	29400804 	addi	r5,r5,32
 1011210:	01804034 	movhi	r6,256
 1011214:	31806e04 	addi	r6,r6,440
 1011218:	10112540 	call	1011254 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 101121c:	01004074 	movhi	r4,257
 1011220:	21124004 	addi	r4,r4,18688
 1011224:	01404074 	movhi	r5,257
 1011228:	29524004 	addi	r5,r5,18688
 101122c:	01804074 	movhi	r6,257
 1011230:	31952f04 	addi	r6,r6,21692
 1011234:	10112540 	call	1011254 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1011238:	1013c300 	call	1013c30 <alt_dcache_flush_all>
  alt_icache_flush_all();
 101123c:	1013ee40 	call	1013ee4 <alt_icache_flush_all>
}
 1011240:	e037883a 	mov	sp,fp
 1011244:	dfc00117 	ldw	ra,4(sp)
 1011248:	df000017 	ldw	fp,0(sp)
 101124c:	dec00204 	addi	sp,sp,8
 1011250:	f800283a 	ret

01011254 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1011254:	defffc04 	addi	sp,sp,-16
 1011258:	df000315 	stw	fp,12(sp)
 101125c:	df000304 	addi	fp,sp,12
 1011260:	e13ffd15 	stw	r4,-12(fp)
 1011264:	e17ffe15 	stw	r5,-8(fp)
 1011268:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 101126c:	e0fffe17 	ldw	r3,-8(fp)
 1011270:	e0bffd17 	ldw	r2,-12(fp)
 1011274:	18800e26 	beq	r3,r2,10112b0 <alt_load_section+0x5c>
  {
    while( to != end )
 1011278:	00000a06 	br	10112a4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 101127c:	e0bffd17 	ldw	r2,-12(fp)
 1011280:	10c00017 	ldw	r3,0(r2)
 1011284:	e0bffe17 	ldw	r2,-8(fp)
 1011288:	10c00015 	stw	r3,0(r2)
 101128c:	e0bffe17 	ldw	r2,-8(fp)
 1011290:	10800104 	addi	r2,r2,4
 1011294:	e0bffe15 	stw	r2,-8(fp)
 1011298:	e0bffd17 	ldw	r2,-12(fp)
 101129c:	10800104 	addi	r2,r2,4
 10112a0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10112a4:	e0fffe17 	ldw	r3,-8(fp)
 10112a8:	e0bfff17 	ldw	r2,-4(fp)
 10112ac:	18bff31e 	bne	r3,r2,101127c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10112b0:	e037883a 	mov	sp,fp
 10112b4:	df000017 	ldw	fp,0(sp)
 10112b8:	dec00104 	addi	sp,sp,4
 10112bc:	f800283a 	ret

010112c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10112c0:	defff804 	addi	sp,sp,-32
 10112c4:	dfc00715 	stw	ra,28(sp)
 10112c8:	df000615 	stw	fp,24(sp)
 10112cc:	df000604 	addi	fp,sp,24
 10112d0:	e13ffc15 	stw	r4,-16(fp)
 10112d4:	e17ffd15 	stw	r5,-12(fp)
 10112d8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10112dc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10112e0:	e0bffc17 	ldw	r2,-16(fp)
 10112e4:	1004803a 	cmplt	r2,r2,zero
 10112e8:	1000081e 	bne	r2,zero,101130c <lseek+0x4c>
 10112ec:	e0bffc17 	ldw	r2,-16(fp)
 10112f0:	10800324 	muli	r2,r2,12
 10112f4:	1007883a 	mov	r3,r2
 10112f8:	00804074 	movhi	r2,257
 10112fc:	1097eb04 	addi	r2,r2,24492
 1011300:	1887883a 	add	r3,r3,r2
 1011304:	e0ffff15 	stw	r3,-4(fp)
 1011308:	00000106 	br	1011310 <lseek+0x50>
 101130c:	e03fff15 	stw	zero,-4(fp)
 1011310:	e0bfff17 	ldw	r2,-4(fp)
 1011314:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1011318:	e0bffb17 	ldw	r2,-20(fp)
 101131c:	1005003a 	cmpeq	r2,r2,zero
 1011320:	1000111e 	bne	r2,zero,1011368 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1011324:	e0bffb17 	ldw	r2,-20(fp)
 1011328:	10800017 	ldw	r2,0(r2)
 101132c:	10800717 	ldw	r2,28(r2)
 1011330:	1005003a 	cmpeq	r2,r2,zero
 1011334:	1000091e 	bne	r2,zero,101135c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1011338:	e0bffb17 	ldw	r2,-20(fp)
 101133c:	10800017 	ldw	r2,0(r2)
 1011340:	10800717 	ldw	r2,28(r2)
 1011344:	e13ffb17 	ldw	r4,-20(fp)
 1011348:	e17ffd17 	ldw	r5,-12(fp)
 101134c:	e1bffe17 	ldw	r6,-8(fp)
 1011350:	103ee83a 	callr	r2
 1011354:	e0bffa15 	stw	r2,-24(fp)
 1011358:	00000506 	br	1011370 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 101135c:	00bfde84 	movi	r2,-134
 1011360:	e0bffa15 	stw	r2,-24(fp)
 1011364:	00000206 	br	1011370 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1011368:	00bfebc4 	movi	r2,-81
 101136c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1011370:	e0bffa17 	ldw	r2,-24(fp)
 1011374:	1004403a 	cmpge	r2,r2,zero
 1011378:	1000071e 	bne	r2,zero,1011398 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 101137c:	10113b00 	call	10113b0 <alt_get_errno>
 1011380:	1007883a 	mov	r3,r2
 1011384:	e0bffa17 	ldw	r2,-24(fp)
 1011388:	0085c83a 	sub	r2,zero,r2
 101138c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1011390:	00bfffc4 	movi	r2,-1
 1011394:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1011398:	e0bffa17 	ldw	r2,-24(fp)
}
 101139c:	e037883a 	mov	sp,fp
 10113a0:	dfc00117 	ldw	ra,4(sp)
 10113a4:	df000017 	ldw	fp,0(sp)
 10113a8:	dec00204 	addi	sp,sp,8
 10113ac:	f800283a 	ret

010113b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10113b0:	defffd04 	addi	sp,sp,-12
 10113b4:	dfc00215 	stw	ra,8(sp)
 10113b8:	df000115 	stw	fp,4(sp)
 10113bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10113c0:	00804074 	movhi	r2,257
 10113c4:	109cf404 	addi	r2,r2,29648
 10113c8:	10800017 	ldw	r2,0(r2)
 10113cc:	1005003a 	cmpeq	r2,r2,zero
 10113d0:	1000061e 	bne	r2,zero,10113ec <alt_get_errno+0x3c>
 10113d4:	00804074 	movhi	r2,257
 10113d8:	109cf404 	addi	r2,r2,29648
 10113dc:	10800017 	ldw	r2,0(r2)
 10113e0:	103ee83a 	callr	r2
 10113e4:	e0bfff15 	stw	r2,-4(fp)
 10113e8:	00000306 	br	10113f8 <alt_get_errno+0x48>
 10113ec:	008040b4 	movhi	r2,258
 10113f0:	10a4d904 	addi	r2,r2,-27804
 10113f4:	e0bfff15 	stw	r2,-4(fp)
 10113f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10113fc:	e037883a 	mov	sp,fp
 1011400:	dfc00117 	ldw	ra,4(sp)
 1011404:	df000017 	ldw	fp,0(sp)
 1011408:	dec00204 	addi	sp,sp,8
 101140c:	f800283a 	ret

01011410 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1011410:	defffd04 	addi	sp,sp,-12
 1011414:	dfc00215 	stw	ra,8(sp)
 1011418:	df000115 	stw	fp,4(sp)
 101141c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1011420:	0009883a 	mov	r4,zero
 1011424:	10119080 	call	1011908 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1011428:	101193c0 	call	101193c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 101142c:	01004074 	movhi	r4,257
 1011430:	2114e204 	addi	r4,r4,21384
 1011434:	01404074 	movhi	r5,257
 1011438:	2954e204 	addi	r5,r5,21384
 101143c:	01804074 	movhi	r6,257
 1011440:	3194e204 	addi	r6,r6,21384
 1011444:	1013fd80 	call	1013fd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1011448:	1013d880 	call	1013d88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 101144c:	01004074 	movhi	r4,257
 1011450:	210f7b04 	addi	r4,r4,15852
 1011454:	10147400 	call	1014740 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1011458:	d1280017 	ldw	r4,-24576(gp)
 101145c:	d1680117 	ldw	r5,-24572(gp)
 1011460:	d1a80217 	ldw	r6,-24568(gp)
 1011464:	10002600 	call	1000260 <main>
 1011468:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 101146c:	01000044 	movi	r4,1
 1011470:	1010a180 	call	1010a18 <close>
  exit (result);
 1011474:	e13fff17 	ldw	r4,-4(fp)
 1011478:	100587c0 	call	100587c <exit>

0101147c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 101147c:	defffe04 	addi	sp,sp,-8
 1011480:	df000115 	stw	fp,4(sp)
 1011484:	df000104 	addi	fp,sp,4
 1011488:	e13fff15 	stw	r4,-4(fp)
}
 101148c:	e037883a 	mov	sp,fp
 1011490:	df000017 	ldw	fp,0(sp)
 1011494:	dec00104 	addi	sp,sp,4
 1011498:	f800283a 	ret

0101149c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 101149c:	defffe04 	addi	sp,sp,-8
 10114a0:	df000115 	stw	fp,4(sp)
 10114a4:	df000104 	addi	fp,sp,4
 10114a8:	e13fff15 	stw	r4,-4(fp)
}
 10114ac:	e037883a 	mov	sp,fp
 10114b0:	df000017 	ldw	fp,0(sp)
 10114b4:	dec00104 	addi	sp,sp,4
 10114b8:	f800283a 	ret

010114bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10114bc:	defff704 	addi	sp,sp,-36
 10114c0:	dfc00815 	stw	ra,32(sp)
 10114c4:	df000715 	stw	fp,28(sp)
 10114c8:	df000704 	addi	fp,sp,28
 10114cc:	e13ffb15 	stw	r4,-20(fp)
 10114d0:	e17ffc15 	stw	r5,-16(fp)
 10114d4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10114d8:	e0bffb17 	ldw	r2,-20(fp)
 10114dc:	1004803a 	cmplt	r2,r2,zero
 10114e0:	1000081e 	bne	r2,zero,1011504 <read+0x48>
 10114e4:	e0bffb17 	ldw	r2,-20(fp)
 10114e8:	10800324 	muli	r2,r2,12
 10114ec:	1007883a 	mov	r3,r2
 10114f0:	00804074 	movhi	r2,257
 10114f4:	1097eb04 	addi	r2,r2,24492
 10114f8:	1887883a 	add	r3,r3,r2
 10114fc:	e0ffff15 	stw	r3,-4(fp)
 1011500:	00000106 	br	1011508 <read+0x4c>
 1011504:	e03fff15 	stw	zero,-4(fp)
 1011508:	e0bfff17 	ldw	r2,-4(fp)
 101150c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1011510:	e0bffa17 	ldw	r2,-24(fp)
 1011514:	1005003a 	cmpeq	r2,r2,zero
 1011518:	1000241e 	bne	r2,zero,10115ac <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 101151c:	e0bffa17 	ldw	r2,-24(fp)
 1011520:	10800217 	ldw	r2,8(r2)
 1011524:	108000cc 	andi	r2,r2,3
 1011528:	10800060 	cmpeqi	r2,r2,1
 101152c:	10001a1e 	bne	r2,zero,1011598 <read+0xdc>
 1011530:	e0bffa17 	ldw	r2,-24(fp)
 1011534:	10800017 	ldw	r2,0(r2)
 1011538:	10800517 	ldw	r2,20(r2)
 101153c:	1005003a 	cmpeq	r2,r2,zero
 1011540:	1000151e 	bne	r2,zero,1011598 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1011544:	e0bffa17 	ldw	r2,-24(fp)
 1011548:	10800017 	ldw	r2,0(r2)
 101154c:	10800517 	ldw	r2,20(r2)
 1011550:	e17ffc17 	ldw	r5,-16(fp)
 1011554:	e1bffd17 	ldw	r6,-12(fp)
 1011558:	e13ffa17 	ldw	r4,-24(fp)
 101155c:	103ee83a 	callr	r2
 1011560:	e0bff915 	stw	r2,-28(fp)
 1011564:	e0bff917 	ldw	r2,-28(fp)
 1011568:	1004403a 	cmpge	r2,r2,zero
 101156c:	1000071e 	bne	r2,zero,101158c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1011570:	10115dc0 	call	10115dc <alt_get_errno>
 1011574:	e0fff917 	ldw	r3,-28(fp)
 1011578:	00c7c83a 	sub	r3,zero,r3
 101157c:	10c00015 	stw	r3,0(r2)
          return -1;
 1011580:	00bfffc4 	movi	r2,-1
 1011584:	e0bffe15 	stw	r2,-8(fp)
 1011588:	00000e06 	br	10115c4 <read+0x108>
        }
        return rval;
 101158c:	e0bff917 	ldw	r2,-28(fp)
 1011590:	e0bffe15 	stw	r2,-8(fp)
 1011594:	00000b06 	br	10115c4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1011598:	10115dc0 	call	10115dc <alt_get_errno>
 101159c:	1007883a 	mov	r3,r2
 10115a0:	00800344 	movi	r2,13
 10115a4:	18800015 	stw	r2,0(r3)
 10115a8:	00000406 	br	10115bc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10115ac:	10115dc0 	call	10115dc <alt_get_errno>
 10115b0:	1007883a 	mov	r3,r2
 10115b4:	00801444 	movi	r2,81
 10115b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10115bc:	00bfffc4 	movi	r2,-1
 10115c0:	e0bffe15 	stw	r2,-8(fp)
 10115c4:	e0bffe17 	ldw	r2,-8(fp)
}
 10115c8:	e037883a 	mov	sp,fp
 10115cc:	dfc00117 	ldw	ra,4(sp)
 10115d0:	df000017 	ldw	fp,0(sp)
 10115d4:	dec00204 	addi	sp,sp,8
 10115d8:	f800283a 	ret

010115dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10115dc:	defffd04 	addi	sp,sp,-12
 10115e0:	dfc00215 	stw	ra,8(sp)
 10115e4:	df000115 	stw	fp,4(sp)
 10115e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10115ec:	00804074 	movhi	r2,257
 10115f0:	109cf404 	addi	r2,r2,29648
 10115f4:	10800017 	ldw	r2,0(r2)
 10115f8:	1005003a 	cmpeq	r2,r2,zero
 10115fc:	1000061e 	bne	r2,zero,1011618 <alt_get_errno+0x3c>
 1011600:	00804074 	movhi	r2,257
 1011604:	109cf404 	addi	r2,r2,29648
 1011608:	10800017 	ldw	r2,0(r2)
 101160c:	103ee83a 	callr	r2
 1011610:	e0bfff15 	stw	r2,-4(fp)
 1011614:	00000306 	br	1011624 <alt_get_errno+0x48>
 1011618:	008040b4 	movhi	r2,258
 101161c:	10a4d904 	addi	r2,r2,-27804
 1011620:	e0bfff15 	stw	r2,-4(fp)
 1011624:	e0bfff17 	ldw	r2,-4(fp)
}
 1011628:	e037883a 	mov	sp,fp
 101162c:	dfc00117 	ldw	ra,4(sp)
 1011630:	df000017 	ldw	fp,0(sp)
 1011634:	dec00204 	addi	sp,sp,8
 1011638:	f800283a 	ret

0101163c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 101163c:	defffe04 	addi	sp,sp,-8
 1011640:	df000115 	stw	fp,4(sp)
 1011644:	df000104 	addi	fp,sp,4
 1011648:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 101164c:	e0bfff17 	ldw	r2,-4(fp)
 1011650:	108000d0 	cmplti	r2,r2,3
 1011654:	10000d1e 	bne	r2,zero,101168c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1011658:	e0bfff17 	ldw	r2,-4(fp)
 101165c:	00c04074 	movhi	r3,257
 1011660:	18d7eb04 	addi	r3,r3,24492
 1011664:	10800324 	muli	r2,r2,12
 1011668:	10c5883a 	add	r2,r2,r3
 101166c:	10800204 	addi	r2,r2,8
 1011670:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1011674:	e0bfff17 	ldw	r2,-4(fp)
 1011678:	00c04074 	movhi	r3,257
 101167c:	18d7eb04 	addi	r3,r3,24492
 1011680:	10800324 	muli	r2,r2,12
 1011684:	10c5883a 	add	r2,r2,r3
 1011688:	10000015 	stw	zero,0(r2)
  }
}
 101168c:	e037883a 	mov	sp,fp
 1011690:	df000017 	ldw	fp,0(sp)
 1011694:	dec00104 	addi	sp,sp,4
 1011698:	f800283a 	ret

0101169c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 101169c:	defff804 	addi	sp,sp,-32
 10116a0:	df000715 	stw	fp,28(sp)
 10116a4:	df000704 	addi	fp,sp,28
 10116a8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10116ac:	0005303a 	rdctl	r2,status
 10116b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10116b4:	e0fffb17 	ldw	r3,-20(fp)
 10116b8:	00bfff84 	movi	r2,-2
 10116bc:	1884703a 	and	r2,r3,r2
 10116c0:	1001703a 	wrctl	status,r2
  
  return context;
 10116c4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10116c8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10116cc:	d0a01817 	ldw	r2,-32672(gp)
 10116d0:	10c000c4 	addi	r3,r2,3
 10116d4:	00bfff04 	movi	r2,-4
 10116d8:	1884703a 	and	r2,r3,r2
 10116dc:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10116e0:	d0e01817 	ldw	r3,-32672(gp)
 10116e4:	e0bffe17 	ldw	r2,-8(fp)
 10116e8:	1887883a 	add	r3,r3,r2
 10116ec:	00806034 	movhi	r2,384
 10116f0:	10800004 	addi	r2,r2,0
 10116f4:	10c0072e 	bgeu	r2,r3,1011714 <sbrk+0x78>
 10116f8:	e0bffd17 	ldw	r2,-12(fp)
 10116fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011700:	e0bffa17 	ldw	r2,-24(fp)
 1011704:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1011708:	00bfffc4 	movi	r2,-1
 101170c:	e0bfff15 	stw	r2,-4(fp)
 1011710:	00000c06 	br	1011744 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1011714:	d0a01817 	ldw	r2,-32672(gp)
 1011718:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 101171c:	d0e01817 	ldw	r3,-32672(gp)
 1011720:	e0bffe17 	ldw	r2,-8(fp)
 1011724:	1885883a 	add	r2,r3,r2
 1011728:	d0a01815 	stw	r2,-32672(gp)
 101172c:	e0bffd17 	ldw	r2,-12(fp)
 1011730:	e0bff915 	stw	r2,-28(fp)
 1011734:	e0bff917 	ldw	r2,-28(fp)
 1011738:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 101173c:	e0bffc17 	ldw	r2,-16(fp)
 1011740:	e0bfff15 	stw	r2,-4(fp)
 1011744:	e0bfff17 	ldw	r2,-4(fp)
} 
 1011748:	e037883a 	mov	sp,fp
 101174c:	df000017 	ldw	fp,0(sp)
 1011750:	dec00104 	addi	sp,sp,4
 1011754:	f800283a 	ret

01011758 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1011758:	defffd04 	addi	sp,sp,-12
 101175c:	dfc00215 	stw	ra,8(sp)
 1011760:	df000115 	stw	fp,4(sp)
 1011764:	df000104 	addi	fp,sp,4
 1011768:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 101176c:	e13fff17 	ldw	r4,-4(fp)
 1011770:	1013ae40 	call	1013ae4 <alt_busy_sleep>
}
 1011774:	e037883a 	mov	sp,fp
 1011778:	dfc00117 	ldw	ra,4(sp)
 101177c:	df000017 	ldw	fp,0(sp)
 1011780:	dec00204 	addi	sp,sp,8
 1011784:	f800283a 	ret

01011788 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1011788:	defff704 	addi	sp,sp,-36
 101178c:	dfc00815 	stw	ra,32(sp)
 1011790:	df000715 	stw	fp,28(sp)
 1011794:	df000704 	addi	fp,sp,28
 1011798:	e13ffb15 	stw	r4,-20(fp)
 101179c:	e17ffc15 	stw	r5,-16(fp)
 10117a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10117a4:	e0bffb17 	ldw	r2,-20(fp)
 10117a8:	1004803a 	cmplt	r2,r2,zero
 10117ac:	1000081e 	bne	r2,zero,10117d0 <write+0x48>
 10117b0:	e0bffb17 	ldw	r2,-20(fp)
 10117b4:	10800324 	muli	r2,r2,12
 10117b8:	1007883a 	mov	r3,r2
 10117bc:	00804074 	movhi	r2,257
 10117c0:	1097eb04 	addi	r2,r2,24492
 10117c4:	1887883a 	add	r3,r3,r2
 10117c8:	e0ffff15 	stw	r3,-4(fp)
 10117cc:	00000106 	br	10117d4 <write+0x4c>
 10117d0:	e03fff15 	stw	zero,-4(fp)
 10117d4:	e0bfff17 	ldw	r2,-4(fp)
 10117d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10117dc:	e0bffa17 	ldw	r2,-24(fp)
 10117e0:	1005003a 	cmpeq	r2,r2,zero
 10117e4:	1000241e 	bne	r2,zero,1011878 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10117e8:	e0bffa17 	ldw	r2,-24(fp)
 10117ec:	10800217 	ldw	r2,8(r2)
 10117f0:	108000cc 	andi	r2,r2,3
 10117f4:	1005003a 	cmpeq	r2,r2,zero
 10117f8:	10001a1e 	bne	r2,zero,1011864 <write+0xdc>
 10117fc:	e0bffa17 	ldw	r2,-24(fp)
 1011800:	10800017 	ldw	r2,0(r2)
 1011804:	10800617 	ldw	r2,24(r2)
 1011808:	1005003a 	cmpeq	r2,r2,zero
 101180c:	1000151e 	bne	r2,zero,1011864 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1011810:	e0bffa17 	ldw	r2,-24(fp)
 1011814:	10800017 	ldw	r2,0(r2)
 1011818:	10800617 	ldw	r2,24(r2)
 101181c:	e17ffc17 	ldw	r5,-16(fp)
 1011820:	e1bffd17 	ldw	r6,-12(fp)
 1011824:	e13ffa17 	ldw	r4,-24(fp)
 1011828:	103ee83a 	callr	r2
 101182c:	e0bff915 	stw	r2,-28(fp)
 1011830:	e0bff917 	ldw	r2,-28(fp)
 1011834:	1004403a 	cmpge	r2,r2,zero
 1011838:	1000071e 	bne	r2,zero,1011858 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 101183c:	10118a80 	call	10118a8 <alt_get_errno>
 1011840:	e0fff917 	ldw	r3,-28(fp)
 1011844:	00c7c83a 	sub	r3,zero,r3
 1011848:	10c00015 	stw	r3,0(r2)
        return -1;
 101184c:	00bfffc4 	movi	r2,-1
 1011850:	e0bffe15 	stw	r2,-8(fp)
 1011854:	00000e06 	br	1011890 <write+0x108>
      }
      return rval;
 1011858:	e0bff917 	ldw	r2,-28(fp)
 101185c:	e0bffe15 	stw	r2,-8(fp)
 1011860:	00000b06 	br	1011890 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1011864:	10118a80 	call	10118a8 <alt_get_errno>
 1011868:	1007883a 	mov	r3,r2
 101186c:	00800344 	movi	r2,13
 1011870:	18800015 	stw	r2,0(r3)
 1011874:	00000406 	br	1011888 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1011878:	10118a80 	call	10118a8 <alt_get_errno>
 101187c:	1007883a 	mov	r3,r2
 1011880:	00801444 	movi	r2,81
 1011884:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1011888:	00bfffc4 	movi	r2,-1
 101188c:	e0bffe15 	stw	r2,-8(fp)
 1011890:	e0bffe17 	ldw	r2,-8(fp)
}
 1011894:	e037883a 	mov	sp,fp
 1011898:	dfc00117 	ldw	ra,4(sp)
 101189c:	df000017 	ldw	fp,0(sp)
 10118a0:	dec00204 	addi	sp,sp,8
 10118a4:	f800283a 	ret

010118a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10118a8:	defffd04 	addi	sp,sp,-12
 10118ac:	dfc00215 	stw	ra,8(sp)
 10118b0:	df000115 	stw	fp,4(sp)
 10118b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10118b8:	00804074 	movhi	r2,257
 10118bc:	109cf404 	addi	r2,r2,29648
 10118c0:	10800017 	ldw	r2,0(r2)
 10118c4:	1005003a 	cmpeq	r2,r2,zero
 10118c8:	1000061e 	bne	r2,zero,10118e4 <alt_get_errno+0x3c>
 10118cc:	00804074 	movhi	r2,257
 10118d0:	109cf404 	addi	r2,r2,29648
 10118d4:	10800017 	ldw	r2,0(r2)
 10118d8:	103ee83a 	callr	r2
 10118dc:	e0bfff15 	stw	r2,-4(fp)
 10118e0:	00000306 	br	10118f0 <alt_get_errno+0x48>
 10118e4:	008040b4 	movhi	r2,258
 10118e8:	10a4d904 	addi	r2,r2,-27804
 10118ec:	e0bfff15 	stw	r2,-4(fp)
 10118f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10118f4:	e037883a 	mov	sp,fp
 10118f8:	dfc00117 	ldw	ra,4(sp)
 10118fc:	df000017 	ldw	fp,0(sp)
 1011900:	dec00204 	addi	sp,sp,8
 1011904:	f800283a 	ret

01011908 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1011908:	defffd04 	addi	sp,sp,-12
 101190c:	dfc00215 	stw	ra,8(sp)
 1011910:	df000115 	stw	fp,4(sp)
 1011914:	df000104 	addi	fp,sp,4
 1011918:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_SYSTEM, nios2_system);
 101191c:	10144b80 	call	10144b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1011920:	00800044 	movi	r2,1
 1011924:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1011928:	e037883a 	mov	sp,fp
 101192c:	dfc00117 	ldw	ra,4(sp)
 1011930:	df000017 	ldw	fp,0(sp)
 1011934:	dec00204 	addi	sp,sp,8
 1011938:	f800283a 	ret

0101193c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 101193c:	defffd04 	addi	sp,sp,-12
 1011940:	dfc00215 	stw	ra,8(sp)
 1011944:	df000115 	stw	fp,4(sp)
 1011948:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SDCARD_TIMER, sdcard_timer);
 101194c:	01121004 	movi	r4,18496
 1011950:	000b883a 	mov	r5,zero
 1011954:	01800044 	movi	r6,1
 1011958:	01c0fa04 	movi	r7,1000
 101195c:	101282c0 	call	101282c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1011960:	00c040b4 	movhi	r3,258
 1011964:	18e4e104 	addi	r3,r3,-27772
 1011968:	00920804 	movi	r2,18464
 101196c:	18800015 	stw	r2,0(r3)
 1011970:	00c040b4 	movhi	r3,258
 1011974:	18e4e204 	addi	r3,r3,-27768
 1011978:	0080bef4 	movhi	r2,763
 101197c:	10bc2004 	addi	r2,r2,-3968
 1011980:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
 1011984:	01004074 	movhi	r4,257
 1011988:	21185504 	addi	r4,r4,24916
 101198c:	000b883a 	mov	r5,zero
 1011990:	000d883a 	mov	r6,zero
 1011994:	1011e580 	call	1011e58 <altera_avalon_jtag_uart_init>
 1011998:	01004074 	movhi	r4,257
 101199c:	21184b04 	addi	r4,r4,24876
 10119a0:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 10119a4:	01004074 	movhi	r4,257
 10119a8:	211c6304 	addi	r4,r4,29068
 10119ac:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 10119b0:	01004074 	movhi	r4,257
 10119b4:	211c6f04 	addi	r4,r4,29116
 10119b8:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 10119bc:	01004074 	movhi	r4,257
 10119c0:	211c7b04 	addi	r4,r4,29164
 10119c4:	1012acc0 	call	1012acc <alt_up_character_lcd_init>
 10119c8:	01004074 	movhi	r4,257
 10119cc:	211c7b04 	addi	r4,r4,29164
 10119d0:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 10119d4:	01004074 	movhi	r4,257
 10119d8:	211c8604 	addi	r4,r4,29208
 10119dc:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 10119e0:	01004074 	movhi	r4,257
 10119e4:	211c9104 	addi	r4,r4,29252
 10119e8:	10130780 	call	1013078 <alt_up_ps2_init>
 10119ec:	01004074 	movhi	r4,257
 10119f0:	211c9104 	addi	r4,r4,29252
 10119f4:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB_0, usb_0);
 10119f8:	01004074 	movhi	r4,257
 10119fc:	211c9f04 	addi	r4,r4,29308
 1011a00:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 1011a04:	00804074 	movhi	r2,257
 1011a08:	109cac04 	addi	r2,r2,29360
 1011a0c:	10800a17 	ldw	r2,40(r2)
 1011a10:	10800104 	addi	r2,r2,4
 1011a14:	10800017 	ldw	r2,0(r2)
 1011a18:	10ffffcc 	andi	r3,r2,65535
 1011a1c:	00804074 	movhi	r2,257
 1011a20:	109cac04 	addi	r2,r2,29360
 1011a24:	10c00c15 	stw	r3,48(r2)
 1011a28:	00804074 	movhi	r2,257
 1011a2c:	109cac04 	addi	r2,r2,29360
 1011a30:	10800a17 	ldw	r2,40(r2)
 1011a34:	10800104 	addi	r2,r2,4
 1011a38:	10800017 	ldw	r2,0(r2)
 1011a3c:	1005d43a 	srai	r2,r2,16
 1011a40:	10ffffcc 	andi	r3,r2,65535
 1011a44:	00804074 	movhi	r2,257
 1011a48:	109cac04 	addi	r2,r2,29360
 1011a4c:	10c00d15 	stw	r3,52(r2)
 1011a50:	00804074 	movhi	r2,257
 1011a54:	109cac04 	addi	r2,r2,29360
 1011a58:	10800c17 	ldw	r2,48(r2)
 1011a5c:	10801068 	cmpgeui	r2,r2,65
 1011a60:	1000081e 	bne	r2,zero,1011a84 <alt_sys_init+0x148>
 1011a64:	00c04074 	movhi	r3,257
 1011a68:	18dcac04 	addi	r3,r3,29360
 1011a6c:	00800fc4 	movi	r2,63
 1011a70:	18800f15 	stw	r2,60(r3)
 1011a74:	00c04074 	movhi	r3,257
 1011a78:	18dcac04 	addi	r3,r3,29360
 1011a7c:	00800184 	movi	r2,6
 1011a80:	18801015 	stw	r2,64(r3)
 1011a84:	00804074 	movhi	r2,257
 1011a88:	109cac04 	addi	r2,r2,29360
 1011a8c:	10800d17 	ldw	r2,52(r2)
 1011a90:	10800868 	cmpgeui	r2,r2,33
 1011a94:	1000041e 	bne	r2,zero,1011aa8 <alt_sys_init+0x16c>
 1011a98:	00c04074 	movhi	r3,257
 1011a9c:	18dcac04 	addi	r3,r3,29360
 1011aa0:	008007c4 	movi	r2,31
 1011aa4:	18801115 	stw	r2,68(r3)
 1011aa8:	01004074 	movhi	r4,257
 1011aac:	211cac04 	addi	r4,r4,29360
 1011ab0:	101368c0 	call	101368c <alt_up_char_buffer_init>
 1011ab4:	01004074 	movhi	r4,257
 1011ab8:	211cac04 	addi	r4,r4,29360
 1011abc:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
 1011ac0:	00804074 	movhi	r2,257
 1011ac4:	109cbe04 	addi	r2,r2,29432
 1011ac8:	10800a17 	ldw	r2,40(r2)
 1011acc:	10800017 	ldw	r2,0(r2)
 1011ad0:	1007883a 	mov	r3,r2
 1011ad4:	00804074 	movhi	r2,257
 1011ad8:	109cbe04 	addi	r2,r2,29432
 1011adc:	10c00b15 	stw	r3,44(r2)
 1011ae0:	00804074 	movhi	r2,257
 1011ae4:	109cbe04 	addi	r2,r2,29432
 1011ae8:	10800a17 	ldw	r2,40(r2)
 1011aec:	10800104 	addi	r2,r2,4
 1011af0:	10800017 	ldw	r2,0(r2)
 1011af4:	1007883a 	mov	r3,r2
 1011af8:	00804074 	movhi	r2,257
 1011afc:	109cbe04 	addi	r2,r2,29432
 1011b00:	10c00c15 	stw	r3,48(r2)
 1011b04:	00804074 	movhi	r2,257
 1011b08:	109cbe04 	addi	r2,r2,29432
 1011b0c:	10800a17 	ldw	r2,40(r2)
 1011b10:	10800204 	addi	r2,r2,8
 1011b14:	10800017 	ldw	r2,0(r2)
 1011b18:	10ffffcc 	andi	r3,r2,65535
 1011b1c:	00804074 	movhi	r2,257
 1011b20:	109cbe04 	addi	r2,r2,29432
 1011b24:	10c00f15 	stw	r3,60(r2)
 1011b28:	00804074 	movhi	r2,257
 1011b2c:	109cbe04 	addi	r2,r2,29432
 1011b30:	10800a17 	ldw	r2,40(r2)
 1011b34:	10800204 	addi	r2,r2,8
 1011b38:	10800017 	ldw	r2,0(r2)
 1011b3c:	1005d43a 	srai	r2,r2,16
 1011b40:	10ffffcc 	andi	r3,r2,65535
 1011b44:	00804074 	movhi	r2,257
 1011b48:	109cbe04 	addi	r2,r2,29432
 1011b4c:	10c01015 	stw	r3,64(r2)
 1011b50:	00804074 	movhi	r2,257
 1011b54:	109cbe04 	addi	r2,r2,29432
 1011b58:	10800a17 	ldw	r2,40(r2)
 1011b5c:	10800304 	addi	r2,r2,12
 1011b60:	10800017 	ldw	r2,0(r2)
 1011b64:	1005d07a 	srai	r2,r2,1
 1011b68:	10c0004c 	andi	r3,r2,1
 1011b6c:	00804074 	movhi	r2,257
 1011b70:	109cbe04 	addi	r2,r2,29432
 1011b74:	10c00d15 	stw	r3,52(r2)
 1011b78:	00804074 	movhi	r2,257
 1011b7c:	109cbe04 	addi	r2,r2,29432
 1011b80:	10800a17 	ldw	r2,40(r2)
 1011b84:	10800304 	addi	r2,r2,12
 1011b88:	10800017 	ldw	r2,0(r2)
 1011b8c:	1005d13a 	srai	r2,r2,4
 1011b90:	10c003cc 	andi	r3,r2,15
 1011b94:	00804074 	movhi	r2,257
 1011b98:	109cbe04 	addi	r2,r2,29432
 1011b9c:	10c00e15 	stw	r3,56(r2)
 1011ba0:	00804074 	movhi	r2,257
 1011ba4:	109cbe04 	addi	r2,r2,29432
 1011ba8:	10800a17 	ldw	r2,40(r2)
 1011bac:	10800304 	addi	r2,r2,12
 1011bb0:	10800017 	ldw	r2,0(r2)
 1011bb4:	1005d43a 	srai	r2,r2,16
 1011bb8:	1007883a 	mov	r3,r2
 1011bbc:	00bfffc4 	movi	r2,-1
 1011bc0:	1884703a 	and	r2,r3,r2
 1011bc4:	e0bfff45 	stb	r2,-3(fp)
 1011bc8:	00804074 	movhi	r2,257
 1011bcc:	109cbe04 	addi	r2,r2,29432
 1011bd0:	10800a17 	ldw	r2,40(r2)
 1011bd4:	10800304 	addi	r2,r2,12
 1011bd8:	10800017 	ldw	r2,0(r2)
 1011bdc:	1005d63a 	srai	r2,r2,24
 1011be0:	1007883a 	mov	r3,r2
 1011be4:	00bfffc4 	movi	r2,-1
 1011be8:	1884703a 	and	r2,r3,r2
 1011bec:	e0bfff05 	stb	r2,-4(fp)
 1011bf0:	00804074 	movhi	r2,257
 1011bf4:	109cbe04 	addi	r2,r2,29432
 1011bf8:	10800e17 	ldw	r2,56(r2)
 1011bfc:	10800058 	cmpnei	r2,r2,1
 1011c00:	1000041e 	bne	r2,zero,1011c14 <alt_sys_init+0x2d8>
 1011c04:	00804074 	movhi	r2,257
 1011c08:	109cbe04 	addi	r2,r2,29432
 1011c0c:	10001115 	stw	zero,68(r2)
 1011c10:	00000e06 	br	1011c4c <alt_sys_init+0x310>
 1011c14:	00804074 	movhi	r2,257
 1011c18:	109cbe04 	addi	r2,r2,29432
 1011c1c:	10800e17 	ldw	r2,56(r2)
 1011c20:	10800098 	cmpnei	r2,r2,2
 1011c24:	1000051e 	bne	r2,zero,1011c3c <alt_sys_init+0x300>
 1011c28:	00c04074 	movhi	r3,257
 1011c2c:	18dcbe04 	addi	r3,r3,29432
 1011c30:	00800044 	movi	r2,1
 1011c34:	18801115 	stw	r2,68(r3)
 1011c38:	00000406 	br	1011c4c <alt_sys_init+0x310>
 1011c3c:	00c04074 	movhi	r3,257
 1011c40:	18dcbe04 	addi	r3,r3,29432
 1011c44:	00800084 	movi	r2,2
 1011c48:	18801115 	stw	r2,68(r3)
 1011c4c:	e0ffff43 	ldbu	r3,-3(fp)
 1011c50:	00800804 	movi	r2,32
 1011c54:	10c7c83a 	sub	r3,r2,r3
 1011c58:	00bfffc4 	movi	r2,-1
 1011c5c:	10c6d83a 	srl	r3,r2,r3
 1011c60:	00804074 	movhi	r2,257
 1011c64:	109cbe04 	addi	r2,r2,29432
 1011c68:	10c01215 	stw	r3,72(r2)
 1011c6c:	e0ffff43 	ldbu	r3,-3(fp)
 1011c70:	00804074 	movhi	r2,257
 1011c74:	109cbe04 	addi	r2,r2,29432
 1011c78:	10801117 	ldw	r2,68(r2)
 1011c7c:	1887883a 	add	r3,r3,r2
 1011c80:	00804074 	movhi	r2,257
 1011c84:	109cbe04 	addi	r2,r2,29432
 1011c88:	10c01315 	stw	r3,76(r2)
 1011c8c:	e0ffff03 	ldbu	r3,-4(fp)
 1011c90:	00800804 	movi	r2,32
 1011c94:	10c7c83a 	sub	r3,r2,r3
 1011c98:	00bfffc4 	movi	r2,-1
 1011c9c:	10c6d83a 	srl	r3,r2,r3
 1011ca0:	00804074 	movhi	r2,257
 1011ca4:	109cbe04 	addi	r2,r2,29432
 1011ca8:	10c01415 	stw	r3,80(r2)
 1011cac:	01004074 	movhi	r4,257
 1011cb0:	211cbe04 	addi	r4,r4,29432
 1011cb4:	1011cd80 	call	1011cd8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1011cb8:	01004074 	movhi	r4,257
 1011cbc:	211cd304 	addi	r4,r4,29516
 1011cc0:	1011cd80 	call	1011cd8 <alt_dev_reg>
}
 1011cc4:	e037883a 	mov	sp,fp
 1011cc8:	dfc00117 	ldw	ra,4(sp)
 1011ccc:	df000017 	ldw	fp,0(sp)
 1011cd0:	dec00204 	addi	sp,sp,8
 1011cd4:	f800283a 	ret

01011cd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1011cd8:	defffd04 	addi	sp,sp,-12
 1011cdc:	dfc00215 	stw	ra,8(sp)
 1011ce0:	df000115 	stw	fp,4(sp)
 1011ce4:	df000104 	addi	fp,sp,4
 1011ce8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1011cec:	e13fff17 	ldw	r4,-4(fp)
 1011cf0:	01404074 	movhi	r5,257
 1011cf4:	295cf104 	addi	r5,r5,29636
 1011cf8:	1013c740 	call	1013c74 <alt_dev_llist_insert>
}
 1011cfc:	e037883a 	mov	sp,fp
 1011d00:	dfc00117 	ldw	ra,4(sp)
 1011d04:	df000017 	ldw	fp,0(sp)
 1011d08:	dec00204 	addi	sp,sp,8
 1011d0c:	f800283a 	ret

01011d10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1011d10:	defffa04 	addi	sp,sp,-24
 1011d14:	dfc00515 	stw	ra,20(sp)
 1011d18:	df000415 	stw	fp,16(sp)
 1011d1c:	df000404 	addi	fp,sp,16
 1011d20:	e13ffd15 	stw	r4,-12(fp)
 1011d24:	e17ffe15 	stw	r5,-8(fp)
 1011d28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1011d2c:	e0bffd17 	ldw	r2,-12(fp)
 1011d30:	10800017 	ldw	r2,0(r2)
 1011d34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1011d38:	e0bffc17 	ldw	r2,-16(fp)
 1011d3c:	11000a04 	addi	r4,r2,40
 1011d40:	e0bffd17 	ldw	r2,-12(fp)
 1011d44:	11c00217 	ldw	r7,8(r2)
 1011d48:	e17ffe17 	ldw	r5,-8(fp)
 1011d4c:	e1bfff17 	ldw	r6,-4(fp)
 1011d50:	10123540 	call	1012354 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1011d54:	e037883a 	mov	sp,fp
 1011d58:	dfc00117 	ldw	ra,4(sp)
 1011d5c:	df000017 	ldw	fp,0(sp)
 1011d60:	dec00204 	addi	sp,sp,8
 1011d64:	f800283a 	ret

01011d68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1011d68:	defffa04 	addi	sp,sp,-24
 1011d6c:	dfc00515 	stw	ra,20(sp)
 1011d70:	df000415 	stw	fp,16(sp)
 1011d74:	df000404 	addi	fp,sp,16
 1011d78:	e13ffd15 	stw	r4,-12(fp)
 1011d7c:	e17ffe15 	stw	r5,-8(fp)
 1011d80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1011d84:	e0bffd17 	ldw	r2,-12(fp)
 1011d88:	10800017 	ldw	r2,0(r2)
 1011d8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1011d90:	e0bffc17 	ldw	r2,-16(fp)
 1011d94:	11000a04 	addi	r4,r2,40
 1011d98:	e0bffd17 	ldw	r2,-12(fp)
 1011d9c:	11c00217 	ldw	r7,8(r2)
 1011da0:	e17ffe17 	ldw	r5,-8(fp)
 1011da4:	e1bfff17 	ldw	r6,-4(fp)
 1011da8:	10125780 	call	1012578 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1011dac:	e037883a 	mov	sp,fp
 1011db0:	dfc00117 	ldw	ra,4(sp)
 1011db4:	df000017 	ldw	fp,0(sp)
 1011db8:	dec00204 	addi	sp,sp,8
 1011dbc:	f800283a 	ret

01011dc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1011dc0:	defffc04 	addi	sp,sp,-16
 1011dc4:	dfc00315 	stw	ra,12(sp)
 1011dc8:	df000215 	stw	fp,8(sp)
 1011dcc:	df000204 	addi	fp,sp,8
 1011dd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1011dd4:	e0bfff17 	ldw	r2,-4(fp)
 1011dd8:	10800017 	ldw	r2,0(r2)
 1011ddc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1011de0:	e0bffe17 	ldw	r2,-8(fp)
 1011de4:	11000a04 	addi	r4,r2,40
 1011de8:	e0bfff17 	ldw	r2,-4(fp)
 1011dec:	11400217 	ldw	r5,8(r2)
 1011df0:	10121ec0 	call	10121ec <altera_avalon_jtag_uart_close>
}
 1011df4:	e037883a 	mov	sp,fp
 1011df8:	dfc00117 	ldw	ra,4(sp)
 1011dfc:	df000017 	ldw	fp,0(sp)
 1011e00:	dec00204 	addi	sp,sp,8
 1011e04:	f800283a 	ret

01011e08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1011e08:	defffa04 	addi	sp,sp,-24
 1011e0c:	dfc00515 	stw	ra,20(sp)
 1011e10:	df000415 	stw	fp,16(sp)
 1011e14:	df000404 	addi	fp,sp,16
 1011e18:	e13ffd15 	stw	r4,-12(fp)
 1011e1c:	e17ffe15 	stw	r5,-8(fp)
 1011e20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1011e24:	e0bffd17 	ldw	r2,-12(fp)
 1011e28:	10800017 	ldw	r2,0(r2)
 1011e2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1011e30:	e0bffc17 	ldw	r2,-16(fp)
 1011e34:	11000a04 	addi	r4,r2,40
 1011e38:	e17ffe17 	ldw	r5,-8(fp)
 1011e3c:	e1bfff17 	ldw	r6,-4(fp)
 1011e40:	10122600 	call	1012260 <altera_avalon_jtag_uart_ioctl>
}
 1011e44:	e037883a 	mov	sp,fp
 1011e48:	dfc00117 	ldw	ra,4(sp)
 1011e4c:	df000017 	ldw	fp,0(sp)
 1011e50:	dec00204 	addi	sp,sp,8
 1011e54:	f800283a 	ret

01011e58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1011e58:	defffb04 	addi	sp,sp,-20
 1011e5c:	dfc00415 	stw	ra,16(sp)
 1011e60:	df000315 	stw	fp,12(sp)
 1011e64:	df000304 	addi	fp,sp,12
 1011e68:	e13ffd15 	stw	r4,-12(fp)
 1011e6c:	e17ffe15 	stw	r5,-8(fp)
 1011e70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1011e74:	e0fffd17 	ldw	r3,-12(fp)
 1011e78:	00800044 	movi	r2,1
 1011e7c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1011e80:	e0bffd17 	ldw	r2,-12(fp)
 1011e84:	10800017 	ldw	r2,0(r2)
 1011e88:	11000104 	addi	r4,r2,4
 1011e8c:	e0bffd17 	ldw	r2,-12(fp)
 1011e90:	10800817 	ldw	r2,32(r2)
 1011e94:	1007883a 	mov	r3,r2
 1011e98:	2005883a 	mov	r2,r4
 1011e9c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1011ea0:	e13fff17 	ldw	r4,-4(fp)
 1011ea4:	e17ffd17 	ldw	r5,-12(fp)
 1011ea8:	01804074 	movhi	r6,257
 1011eac:	3187c404 	addi	r6,r6,7952
 1011eb0:	1010d540 	call	1010d54 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1011eb4:	e0bffd17 	ldw	r2,-12(fp)
 1011eb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1011ebc:	e0bffd17 	ldw	r2,-12(fp)
 1011ec0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1011ec4:	008040b4 	movhi	r2,258
 1011ec8:	10a4e304 	addi	r2,r2,-27764
 1011ecc:	10800017 	ldw	r2,0(r2)
 1011ed0:	100b883a 	mov	r5,r2
 1011ed4:	01804074 	movhi	r6,257
 1011ed8:	31884f04 	addi	r6,r6,8508
 1011edc:	e1fffd17 	ldw	r7,-12(fp)
 1011ee0:	10139900 	call	1013990 <alt_alarm_start>
 1011ee4:	1004403a 	cmpge	r2,r2,zero
 1011ee8:	1000041e 	bne	r2,zero,1011efc <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1011eec:	e0fffd17 	ldw	r3,-12(fp)
 1011ef0:	00a00034 	movhi	r2,32768
 1011ef4:	10bfffc4 	addi	r2,r2,-1
 1011ef8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1011efc:	e037883a 	mov	sp,fp
 1011f00:	dfc00117 	ldw	ra,4(sp)
 1011f04:	df000017 	ldw	fp,0(sp)
 1011f08:	dec00204 	addi	sp,sp,8
 1011f0c:	f800283a 	ret

01011f10 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1011f10:	defff704 	addi	sp,sp,-36
 1011f14:	df000815 	stw	fp,32(sp)
 1011f18:	df000804 	addi	fp,sp,32
 1011f1c:	e13ffe15 	stw	r4,-8(fp)
 1011f20:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1011f24:	e0bffe17 	ldw	r2,-8(fp)
 1011f28:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1011f2c:	e0bffd17 	ldw	r2,-12(fp)
 1011f30:	10800017 	ldw	r2,0(r2)
 1011f34:	e0bffc15 	stw	r2,-16(fp)
 1011f38:	00000006 	br	1011f3c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1011f3c:	e0bffc17 	ldw	r2,-16(fp)
 1011f40:	10800104 	addi	r2,r2,4
 1011f44:	10800037 	ldwio	r2,0(r2)
 1011f48:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1011f4c:	e0bffb17 	ldw	r2,-20(fp)
 1011f50:	1080c00c 	andi	r2,r2,768
 1011f54:	1005003a 	cmpeq	r2,r2,zero
 1011f58:	1000741e 	bne	r2,zero,101212c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1011f5c:	e0bffb17 	ldw	r2,-20(fp)
 1011f60:	1080400c 	andi	r2,r2,256
 1011f64:	1005003a 	cmpeq	r2,r2,zero
 1011f68:	1000351e 	bne	r2,zero,1012040 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1011f6c:	00800074 	movhi	r2,1
 1011f70:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1011f74:	e0bffd17 	ldw	r2,-12(fp)
 1011f78:	10800a17 	ldw	r2,40(r2)
 1011f7c:	10800044 	addi	r2,r2,1
 1011f80:	1081ffcc 	andi	r2,r2,2047
 1011f84:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1011f88:	e0bffd17 	ldw	r2,-12(fp)
 1011f8c:	10c00b17 	ldw	r3,44(r2)
 1011f90:	e0bff917 	ldw	r2,-28(fp)
 1011f94:	18801626 	beq	r3,r2,1011ff0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1011f98:	e0bffc17 	ldw	r2,-16(fp)
 1011f9c:	10800037 	ldwio	r2,0(r2)
 1011fa0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1011fa4:	e0bffa17 	ldw	r2,-24(fp)
 1011fa8:	10a0000c 	andi	r2,r2,32768
 1011fac:	1005003a 	cmpeq	r2,r2,zero
 1011fb0:	10000f1e 	bne	r2,zero,1011ff0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1011fb4:	e0bffd17 	ldw	r2,-12(fp)
 1011fb8:	10c00a17 	ldw	r3,40(r2)
 1011fbc:	e0bffa17 	ldw	r2,-24(fp)
 1011fc0:	1009883a 	mov	r4,r2
 1011fc4:	e0bffd17 	ldw	r2,-12(fp)
 1011fc8:	1885883a 	add	r2,r3,r2
 1011fcc:	10800e04 	addi	r2,r2,56
 1011fd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1011fd4:	e0bffd17 	ldw	r2,-12(fp)
 1011fd8:	10800a17 	ldw	r2,40(r2)
 1011fdc:	10800044 	addi	r2,r2,1
 1011fe0:	10c1ffcc 	andi	r3,r2,2047
 1011fe4:	e0bffd17 	ldw	r2,-12(fp)
 1011fe8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1011fec:	003fe106 	br	1011f74 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1011ff0:	e0bffa17 	ldw	r2,-24(fp)
 1011ff4:	10bfffec 	andhi	r2,r2,65535
 1011ff8:	1005003a 	cmpeq	r2,r2,zero
 1011ffc:	1000101e 	bne	r2,zero,1012040 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1012000:	e0bffd17 	ldw	r2,-12(fp)
 1012004:	10c00817 	ldw	r3,32(r2)
 1012008:	00bfff84 	movi	r2,-2
 101200c:	1886703a 	and	r3,r3,r2
 1012010:	e0bffd17 	ldw	r2,-12(fp)
 1012014:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1012018:	e0bffc17 	ldw	r2,-16(fp)
 101201c:	11000104 	addi	r4,r2,4
 1012020:	e0bffd17 	ldw	r2,-12(fp)
 1012024:	10800817 	ldw	r2,32(r2)
 1012028:	1007883a 	mov	r3,r2
 101202c:	2005883a 	mov	r2,r4
 1012030:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1012034:	e0bffc17 	ldw	r2,-16(fp)
 1012038:	10800104 	addi	r2,r2,4
 101203c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1012040:	e0bffb17 	ldw	r2,-20(fp)
 1012044:	1080800c 	andi	r2,r2,512
 1012048:	1005003a 	cmpeq	r2,r2,zero
 101204c:	103fbb1e 	bne	r2,zero,1011f3c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1012050:	e0bffb17 	ldw	r2,-20(fp)
 1012054:	10bfffec 	andhi	r2,r2,65535
 1012058:	1004d43a 	srli	r2,r2,16
 101205c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1012060:	00001506 	br	10120b8 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1012064:	e13ffc17 	ldw	r4,-16(fp)
 1012068:	e0bffd17 	ldw	r2,-12(fp)
 101206c:	10c00d17 	ldw	r3,52(r2)
 1012070:	e0bffd17 	ldw	r2,-12(fp)
 1012074:	1885883a 	add	r2,r3,r2
 1012078:	10820e04 	addi	r2,r2,2104
 101207c:	10800003 	ldbu	r2,0(r2)
 1012080:	10c03fcc 	andi	r3,r2,255
 1012084:	18c0201c 	xori	r3,r3,128
 1012088:	18ffe004 	addi	r3,r3,-128
 101208c:	2005883a 	mov	r2,r4
 1012090:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1012094:	e0bffd17 	ldw	r2,-12(fp)
 1012098:	10800d17 	ldw	r2,52(r2)
 101209c:	10800044 	addi	r2,r2,1
 10120a0:	10c1ffcc 	andi	r3,r2,2047
 10120a4:	e0bffd17 	ldw	r2,-12(fp)
 10120a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10120ac:	e0bff817 	ldw	r2,-32(fp)
 10120b0:	10bfffc4 	addi	r2,r2,-1
 10120b4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10120b8:	e0bff817 	ldw	r2,-32(fp)
 10120bc:	1005003a 	cmpeq	r2,r2,zero
 10120c0:	1000051e 	bne	r2,zero,10120d8 <altera_avalon_jtag_uart_irq+0x1c8>
 10120c4:	e0bffd17 	ldw	r2,-12(fp)
 10120c8:	10c00d17 	ldw	r3,52(r2)
 10120cc:	e0bffd17 	ldw	r2,-12(fp)
 10120d0:	10800c17 	ldw	r2,48(r2)
 10120d4:	18bfe31e 	bne	r3,r2,1012064 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10120d8:	e0bff817 	ldw	r2,-32(fp)
 10120dc:	1005003a 	cmpeq	r2,r2,zero
 10120e0:	103f961e 	bne	r2,zero,1011f3c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10120e4:	e0bffd17 	ldw	r2,-12(fp)
 10120e8:	10c00817 	ldw	r3,32(r2)
 10120ec:	00bfff44 	movi	r2,-3
 10120f0:	1886703a 	and	r3,r3,r2
 10120f4:	e0bffd17 	ldw	r2,-12(fp)
 10120f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10120fc:	e0bffd17 	ldw	r2,-12(fp)
 1012100:	10800017 	ldw	r2,0(r2)
 1012104:	11000104 	addi	r4,r2,4
 1012108:	e0bffd17 	ldw	r2,-12(fp)
 101210c:	10800817 	ldw	r2,32(r2)
 1012110:	1007883a 	mov	r3,r2
 1012114:	2005883a 	mov	r2,r4
 1012118:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101211c:	e0bffc17 	ldw	r2,-16(fp)
 1012120:	10800104 	addi	r2,r2,4
 1012124:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1012128:	003f8406 	br	1011f3c <altera_avalon_jtag_uart_irq+0x2c>
}
 101212c:	e037883a 	mov	sp,fp
 1012130:	df000017 	ldw	fp,0(sp)
 1012134:	dec00104 	addi	sp,sp,4
 1012138:	f800283a 	ret

0101213c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101213c:	defffc04 	addi	sp,sp,-16
 1012140:	df000315 	stw	fp,12(sp)
 1012144:	df000304 	addi	fp,sp,12
 1012148:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 101214c:	e0bfff17 	ldw	r2,-4(fp)
 1012150:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1012154:	e0bffe17 	ldw	r2,-8(fp)
 1012158:	10800017 	ldw	r2,0(r2)
 101215c:	10800104 	addi	r2,r2,4
 1012160:	10800037 	ldwio	r2,0(r2)
 1012164:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1012168:	e0bffd17 	ldw	r2,-12(fp)
 101216c:	1081000c 	andi	r2,r2,1024
 1012170:	1005003a 	cmpeq	r2,r2,zero
 1012174:	10000c1e 	bne	r2,zero,10121a8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1012178:	e0bffe17 	ldw	r2,-8(fp)
 101217c:	10800017 	ldw	r2,0(r2)
 1012180:	11000104 	addi	r4,r2,4
 1012184:	e0bffe17 	ldw	r2,-8(fp)
 1012188:	10800817 	ldw	r2,32(r2)
 101218c:	10810014 	ori	r2,r2,1024
 1012190:	1007883a 	mov	r3,r2
 1012194:	2005883a 	mov	r2,r4
 1012198:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 101219c:	e0bffe17 	ldw	r2,-8(fp)
 10121a0:	10000915 	stw	zero,36(r2)
 10121a4:	00000a06 	br	10121d0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10121a8:	e0bffe17 	ldw	r2,-8(fp)
 10121ac:	10c00917 	ldw	r3,36(r2)
 10121b0:	00a00034 	movhi	r2,32768
 10121b4:	10bfff04 	addi	r2,r2,-4
 10121b8:	10c00536 	bltu	r2,r3,10121d0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 10121bc:	e0bffe17 	ldw	r2,-8(fp)
 10121c0:	10800917 	ldw	r2,36(r2)
 10121c4:	10c00044 	addi	r3,r2,1
 10121c8:	e0bffe17 	ldw	r2,-8(fp)
 10121cc:	10c00915 	stw	r3,36(r2)
 10121d0:	008040b4 	movhi	r2,258
 10121d4:	10a4e304 	addi	r2,r2,-27764
 10121d8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10121dc:	e037883a 	mov	sp,fp
 10121e0:	df000017 	ldw	fp,0(sp)
 10121e4:	dec00104 	addi	sp,sp,4
 10121e8:	f800283a 	ret

010121ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10121ec:	defffc04 	addi	sp,sp,-16
 10121f0:	df000315 	stw	fp,12(sp)
 10121f4:	df000304 	addi	fp,sp,12
 10121f8:	e13ffd15 	stw	r4,-12(fp)
 10121fc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1012200:	00000706 	br	1012220 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1012204:	e0bffe17 	ldw	r2,-8(fp)
 1012208:	1090000c 	andi	r2,r2,16384
 101220c:	1005003a 	cmpeq	r2,r2,zero
 1012210:	1000031e 	bne	r2,zero,1012220 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1012214:	00bffd44 	movi	r2,-11
 1012218:	e0bfff15 	stw	r2,-4(fp)
 101221c:	00000b06 	br	101224c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1012220:	e0bffd17 	ldw	r2,-12(fp)
 1012224:	10c00d17 	ldw	r3,52(r2)
 1012228:	e0bffd17 	ldw	r2,-12(fp)
 101222c:	10800c17 	ldw	r2,48(r2)
 1012230:	18800526 	beq	r3,r2,1012248 <altera_avalon_jtag_uart_close+0x5c>
 1012234:	e0bffd17 	ldw	r2,-12(fp)
 1012238:	10c00917 	ldw	r3,36(r2)
 101223c:	e0bffd17 	ldw	r2,-12(fp)
 1012240:	10800117 	ldw	r2,4(r2)
 1012244:	18bfef36 	bltu	r3,r2,1012204 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1012248:	e03fff15 	stw	zero,-4(fp)
 101224c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012250:	e037883a 	mov	sp,fp
 1012254:	df000017 	ldw	fp,0(sp)
 1012258:	dec00104 	addi	sp,sp,4
 101225c:	f800283a 	ret

01012260 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1012260:	defff804 	addi	sp,sp,-32
 1012264:	df000715 	stw	fp,28(sp)
 1012268:	df000704 	addi	fp,sp,28
 101226c:	e13ffb15 	stw	r4,-20(fp)
 1012270:	e17ffc15 	stw	r5,-16(fp)
 1012274:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1012278:	00bff9c4 	movi	r2,-25
 101227c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1012280:	e0bffc17 	ldw	r2,-16(fp)
 1012284:	e0bfff15 	stw	r2,-4(fp)
 1012288:	e0ffff17 	ldw	r3,-4(fp)
 101228c:	189a8060 	cmpeqi	r2,r3,27137
 1012290:	1000041e 	bne	r2,zero,10122a4 <altera_avalon_jtag_uart_ioctl+0x44>
 1012294:	e0ffff17 	ldw	r3,-4(fp)
 1012298:	189a80a0 	cmpeqi	r2,r3,27138
 101229c:	10001b1e 	bne	r2,zero,101230c <altera_avalon_jtag_uart_ioctl+0xac>
 10122a0:	00002706 	br	1012340 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10122a4:	e0bffb17 	ldw	r2,-20(fp)
 10122a8:	10c00117 	ldw	r3,4(r2)
 10122ac:	00a00034 	movhi	r2,32768
 10122b0:	10bfffc4 	addi	r2,r2,-1
 10122b4:	18802226 	beq	r3,r2,1012340 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10122b8:	e0bffd17 	ldw	r2,-12(fp)
 10122bc:	10800017 	ldw	r2,0(r2)
 10122c0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10122c4:	e0bff917 	ldw	r2,-28(fp)
 10122c8:	10800090 	cmplti	r2,r2,2
 10122cc:	1000071e 	bne	r2,zero,10122ec <altera_avalon_jtag_uart_ioctl+0x8c>
 10122d0:	e0fff917 	ldw	r3,-28(fp)
 10122d4:	00a00034 	movhi	r2,32768
 10122d8:	10bfffc4 	addi	r2,r2,-1
 10122dc:	18800326 	beq	r3,r2,10122ec <altera_avalon_jtag_uart_ioctl+0x8c>
 10122e0:	e0bff917 	ldw	r2,-28(fp)
 10122e4:	e0bffe15 	stw	r2,-8(fp)
 10122e8:	00000306 	br	10122f8 <altera_avalon_jtag_uart_ioctl+0x98>
 10122ec:	00e00034 	movhi	r3,32768
 10122f0:	18ffff84 	addi	r3,r3,-2
 10122f4:	e0fffe15 	stw	r3,-8(fp)
 10122f8:	e0bffb17 	ldw	r2,-20(fp)
 10122fc:	e0fffe17 	ldw	r3,-8(fp)
 1012300:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1012304:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1012308:	00000d06 	br	1012340 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101230c:	e0bffb17 	ldw	r2,-20(fp)
 1012310:	10c00117 	ldw	r3,4(r2)
 1012314:	00a00034 	movhi	r2,32768
 1012318:	10bfffc4 	addi	r2,r2,-1
 101231c:	18800826 	beq	r3,r2,1012340 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1012320:	e13ffd17 	ldw	r4,-12(fp)
 1012324:	e0bffb17 	ldw	r2,-20(fp)
 1012328:	10c00917 	ldw	r3,36(r2)
 101232c:	e0bffb17 	ldw	r2,-20(fp)
 1012330:	10800117 	ldw	r2,4(r2)
 1012334:	1885803a 	cmpltu	r2,r3,r2
 1012338:	20800015 	stw	r2,0(r4)
      rc = 0;
 101233c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1012340:	e0bffa17 	ldw	r2,-24(fp)
}
 1012344:	e037883a 	mov	sp,fp
 1012348:	df000017 	ldw	fp,0(sp)
 101234c:	dec00104 	addi	sp,sp,4
 1012350:	f800283a 	ret

01012354 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1012354:	defff204 	addi	sp,sp,-56
 1012358:	dfc00d15 	stw	ra,52(sp)
 101235c:	df000c15 	stw	fp,48(sp)
 1012360:	df000c04 	addi	fp,sp,48
 1012364:	e13ffb15 	stw	r4,-20(fp)
 1012368:	e17ffc15 	stw	r5,-16(fp)
 101236c:	e1bffd15 	stw	r6,-12(fp)
 1012370:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1012374:	e0bffc17 	ldw	r2,-16(fp)
 1012378:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 101237c:	00004806 	br	10124a0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1012380:	e0bffb17 	ldw	r2,-20(fp)
 1012384:	10800a17 	ldw	r2,40(r2)
 1012388:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 101238c:	e0bffb17 	ldw	r2,-20(fp)
 1012390:	10800b17 	ldw	r2,44(r2)
 1012394:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1012398:	e0fff717 	ldw	r3,-36(fp)
 101239c:	e0bff617 	ldw	r2,-40(fp)
 10123a0:	18800536 	bltu	r3,r2,10123b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10123a4:	e0bff717 	ldw	r2,-36(fp)
 10123a8:	e0fff617 	ldw	r3,-40(fp)
 10123ac:	10c5c83a 	sub	r2,r2,r3
 10123b0:	e0bff815 	stw	r2,-32(fp)
 10123b4:	00000406 	br	10123c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10123b8:	00820004 	movi	r2,2048
 10123bc:	e0fff617 	ldw	r3,-40(fp)
 10123c0:	10c5c83a 	sub	r2,r2,r3
 10123c4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10123c8:	e0bff817 	ldw	r2,-32(fp)
 10123cc:	1005003a 	cmpeq	r2,r2,zero
 10123d0:	10001f1e 	bne	r2,zero,1012450 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10123d4:	e0fffd17 	ldw	r3,-12(fp)
 10123d8:	e0bff817 	ldw	r2,-32(fp)
 10123dc:	1880022e 	bgeu	r3,r2,10123e8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10123e0:	e0bffd17 	ldw	r2,-12(fp)
 10123e4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10123e8:	e0bffb17 	ldw	r2,-20(fp)
 10123ec:	10c00e04 	addi	r3,r2,56
 10123f0:	e0bff617 	ldw	r2,-40(fp)
 10123f4:	1887883a 	add	r3,r3,r2
 10123f8:	e0bffa17 	ldw	r2,-24(fp)
 10123fc:	1009883a 	mov	r4,r2
 1012400:	180b883a 	mov	r5,r3
 1012404:	e1bff817 	ldw	r6,-32(fp)
 1012408:	10060880 	call	1006088 <memcpy>
      ptr   += n;
 101240c:	e0fff817 	ldw	r3,-32(fp)
 1012410:	e0bffa17 	ldw	r2,-24(fp)
 1012414:	10c5883a 	add	r2,r2,r3
 1012418:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 101241c:	e0fffd17 	ldw	r3,-12(fp)
 1012420:	e0bff817 	ldw	r2,-32(fp)
 1012424:	1885c83a 	sub	r2,r3,r2
 1012428:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101242c:	e0fff617 	ldw	r3,-40(fp)
 1012430:	e0bff817 	ldw	r2,-32(fp)
 1012434:	1885883a 	add	r2,r3,r2
 1012438:	10c1ffcc 	andi	r3,r2,2047
 101243c:	e0bffb17 	ldw	r2,-20(fp)
 1012440:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1012444:	e0bffd17 	ldw	r2,-12(fp)
 1012448:	10800048 	cmpgei	r2,r2,1
 101244c:	103fcc1e 	bne	r2,zero,1012380 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1012450:	e0fffa17 	ldw	r3,-24(fp)
 1012454:	e0bffc17 	ldw	r2,-16(fp)
 1012458:	1880141e 	bne	r3,r2,10124ac <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101245c:	e0bffe17 	ldw	r2,-8(fp)
 1012460:	1090000c 	andi	r2,r2,16384
 1012464:	1004c03a 	cmpne	r2,r2,zero
 1012468:	1000101e 	bne	r2,zero,10124ac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 101246c:	e0bffb17 	ldw	r2,-20(fp)
 1012470:	10c00a17 	ldw	r3,40(r2)
 1012474:	e0bff717 	ldw	r2,-36(fp)
 1012478:	1880051e 	bne	r3,r2,1012490 <altera_avalon_jtag_uart_read+0x13c>
 101247c:	e0bffb17 	ldw	r2,-20(fp)
 1012480:	10c00917 	ldw	r3,36(r2)
 1012484:	e0bffb17 	ldw	r2,-20(fp)
 1012488:	10800117 	ldw	r2,4(r2)
 101248c:	18bff736 	bltu	r3,r2,101246c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1012490:	e0bffb17 	ldw	r2,-20(fp)
 1012494:	10c00a17 	ldw	r3,40(r2)
 1012498:	e0bff717 	ldw	r2,-36(fp)
 101249c:	18800326 	beq	r3,r2,10124ac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10124a0:	e0bffd17 	ldw	r2,-12(fp)
 10124a4:	10800048 	cmpgei	r2,r2,1
 10124a8:	103fb51e 	bne	r2,zero,1012380 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10124ac:	e0fffa17 	ldw	r3,-24(fp)
 10124b0:	e0bffc17 	ldw	r2,-16(fp)
 10124b4:	18801926 	beq	r3,r2,101251c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10124b8:	0005303a 	rdctl	r2,status
 10124bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10124c0:	e0fff517 	ldw	r3,-44(fp)
 10124c4:	00bfff84 	movi	r2,-2
 10124c8:	1884703a 	and	r2,r3,r2
 10124cc:	1001703a 	wrctl	status,r2
  
  return context;
 10124d0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10124d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10124d8:	e0bffb17 	ldw	r2,-20(fp)
 10124dc:	10800817 	ldw	r2,32(r2)
 10124e0:	10c00054 	ori	r3,r2,1
 10124e4:	e0bffb17 	ldw	r2,-20(fp)
 10124e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10124ec:	e0bffb17 	ldw	r2,-20(fp)
 10124f0:	10800017 	ldw	r2,0(r2)
 10124f4:	11000104 	addi	r4,r2,4
 10124f8:	e0bffb17 	ldw	r2,-20(fp)
 10124fc:	10800817 	ldw	r2,32(r2)
 1012500:	1007883a 	mov	r3,r2
 1012504:	2005883a 	mov	r2,r4
 1012508:	10c00035 	stwio	r3,0(r2)
 101250c:	e0bff917 	ldw	r2,-28(fp)
 1012510:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012514:	e0bff417 	ldw	r2,-48(fp)
 1012518:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101251c:	e0fffa17 	ldw	r3,-24(fp)
 1012520:	e0bffc17 	ldw	r2,-16(fp)
 1012524:	18800526 	beq	r3,r2,101253c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1012528:	e0fffa17 	ldw	r3,-24(fp)
 101252c:	e0bffc17 	ldw	r2,-16(fp)
 1012530:	1887c83a 	sub	r3,r3,r2
 1012534:	e0ffff15 	stw	r3,-4(fp)
 1012538:	00000906 	br	1012560 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 101253c:	e0bffe17 	ldw	r2,-8(fp)
 1012540:	1090000c 	andi	r2,r2,16384
 1012544:	1005003a 	cmpeq	r2,r2,zero
 1012548:	1000031e 	bne	r2,zero,1012558 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 101254c:	00bffd44 	movi	r2,-11
 1012550:	e0bfff15 	stw	r2,-4(fp)
 1012554:	00000206 	br	1012560 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1012558:	00bffec4 	movi	r2,-5
 101255c:	e0bfff15 	stw	r2,-4(fp)
 1012560:	e0bfff17 	ldw	r2,-4(fp)
}
 1012564:	e037883a 	mov	sp,fp
 1012568:	dfc00117 	ldw	ra,4(sp)
 101256c:	df000017 	ldw	fp,0(sp)
 1012570:	dec00204 	addi	sp,sp,8
 1012574:	f800283a 	ret

01012578 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1012578:	defff204 	addi	sp,sp,-56
 101257c:	dfc00d15 	stw	ra,52(sp)
 1012580:	df000c15 	stw	fp,48(sp)
 1012584:	df000c04 	addi	fp,sp,48
 1012588:	e13ffb15 	stw	r4,-20(fp)
 101258c:	e17ffc15 	stw	r5,-16(fp)
 1012590:	e1bffd15 	stw	r6,-12(fp)
 1012594:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1012598:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 101259c:	e0bffc17 	ldw	r2,-16(fp)
 10125a0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10125a4:	00003a06 	br	1012690 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10125a8:	e0bffb17 	ldw	r2,-20(fp)
 10125ac:	10800c17 	ldw	r2,48(r2)
 10125b0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10125b4:	e0bffb17 	ldw	r2,-20(fp)
 10125b8:	10800d17 	ldw	r2,52(r2)
 10125bc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10125c0:	e0fffa17 	ldw	r3,-24(fp)
 10125c4:	e0bff917 	ldw	r2,-28(fp)
 10125c8:	1880062e 	bgeu	r3,r2,10125e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10125cc:	e0fff917 	ldw	r3,-28(fp)
 10125d0:	e0bffa17 	ldw	r2,-24(fp)
 10125d4:	1885c83a 	sub	r2,r3,r2
 10125d8:	10bfffc4 	addi	r2,r2,-1
 10125dc:	e0bff815 	stw	r2,-32(fp)
 10125e0:	00000c06 	br	1012614 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10125e4:	e0bff917 	ldw	r2,-28(fp)
 10125e8:	1005003a 	cmpeq	r2,r2,zero
 10125ec:	1000051e 	bne	r2,zero,1012604 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10125f0:	00820004 	movi	r2,2048
 10125f4:	e0fffa17 	ldw	r3,-24(fp)
 10125f8:	10c5c83a 	sub	r2,r2,r3
 10125fc:	e0bff815 	stw	r2,-32(fp)
 1012600:	00000406 	br	1012614 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1012604:	0081ffc4 	movi	r2,2047
 1012608:	e0fffa17 	ldw	r3,-24(fp)
 101260c:	10c5c83a 	sub	r2,r2,r3
 1012610:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1012614:	e0bff817 	ldw	r2,-32(fp)
 1012618:	1005003a 	cmpeq	r2,r2,zero
 101261c:	10001f1e 	bne	r2,zero,101269c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1012620:	e0fffd17 	ldw	r3,-12(fp)
 1012624:	e0bff817 	ldw	r2,-32(fp)
 1012628:	1880022e 	bgeu	r3,r2,1012634 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 101262c:	e0bffd17 	ldw	r2,-12(fp)
 1012630:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1012634:	e0bffb17 	ldw	r2,-20(fp)
 1012638:	10c20e04 	addi	r3,r2,2104
 101263c:	e0bffa17 	ldw	r2,-24(fp)
 1012640:	1885883a 	add	r2,r3,r2
 1012644:	e0fffc17 	ldw	r3,-16(fp)
 1012648:	1009883a 	mov	r4,r2
 101264c:	180b883a 	mov	r5,r3
 1012650:	e1bff817 	ldw	r6,-32(fp)
 1012654:	10060880 	call	1006088 <memcpy>
      ptr   += n;
 1012658:	e0fff817 	ldw	r3,-32(fp)
 101265c:	e0bffc17 	ldw	r2,-16(fp)
 1012660:	10c5883a 	add	r2,r2,r3
 1012664:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1012668:	e0fffd17 	ldw	r3,-12(fp)
 101266c:	e0bff817 	ldw	r2,-32(fp)
 1012670:	1885c83a 	sub	r2,r3,r2
 1012674:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1012678:	e0fffa17 	ldw	r3,-24(fp)
 101267c:	e0bff817 	ldw	r2,-32(fp)
 1012680:	1885883a 	add	r2,r3,r2
 1012684:	10c1ffcc 	andi	r3,r2,2047
 1012688:	e0bffb17 	ldw	r2,-20(fp)
 101268c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1012690:	e0bffd17 	ldw	r2,-12(fp)
 1012694:	10800048 	cmpgei	r2,r2,1
 1012698:	103fc31e 	bne	r2,zero,10125a8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101269c:	0005303a 	rdctl	r2,status
 10126a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10126a4:	e0fff517 	ldw	r3,-44(fp)
 10126a8:	00bfff84 	movi	r2,-2
 10126ac:	1884703a 	and	r2,r3,r2
 10126b0:	1001703a 	wrctl	status,r2
  
  return context;
 10126b4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10126b8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10126bc:	e0bffb17 	ldw	r2,-20(fp)
 10126c0:	10800817 	ldw	r2,32(r2)
 10126c4:	10c00094 	ori	r3,r2,2
 10126c8:	e0bffb17 	ldw	r2,-20(fp)
 10126cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10126d0:	e0bffb17 	ldw	r2,-20(fp)
 10126d4:	10800017 	ldw	r2,0(r2)
 10126d8:	11000104 	addi	r4,r2,4
 10126dc:	e0bffb17 	ldw	r2,-20(fp)
 10126e0:	10800817 	ldw	r2,32(r2)
 10126e4:	1007883a 	mov	r3,r2
 10126e8:	2005883a 	mov	r2,r4
 10126ec:	10c00035 	stwio	r3,0(r2)
 10126f0:	e0bff717 	ldw	r2,-36(fp)
 10126f4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10126f8:	e0bff417 	ldw	r2,-48(fp)
 10126fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1012700:	e0bffd17 	ldw	r2,-12(fp)
 1012704:	10800050 	cmplti	r2,r2,1
 1012708:	1000111e 	bne	r2,zero,1012750 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 101270c:	e0bffe17 	ldw	r2,-8(fp)
 1012710:	1090000c 	andi	r2,r2,16384
 1012714:	1004c03a 	cmpne	r2,r2,zero
 1012718:	1000101e 	bne	r2,zero,101275c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101271c:	e0bffb17 	ldw	r2,-20(fp)
 1012720:	10c00d17 	ldw	r3,52(r2)
 1012724:	e0bff917 	ldw	r2,-28(fp)
 1012728:	1880051e 	bne	r3,r2,1012740 <altera_avalon_jtag_uart_write+0x1c8>
 101272c:	e0bffb17 	ldw	r2,-20(fp)
 1012730:	10c00917 	ldw	r3,36(r2)
 1012734:	e0bffb17 	ldw	r2,-20(fp)
 1012738:	10800117 	ldw	r2,4(r2)
 101273c:	18bff736 	bltu	r3,r2,101271c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1012740:	e0bffb17 	ldw	r2,-20(fp)
 1012744:	10c00d17 	ldw	r3,52(r2)
 1012748:	e0bff917 	ldw	r2,-28(fp)
 101274c:	18800326 	beq	r3,r2,101275c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1012750:	e0bffd17 	ldw	r2,-12(fp)
 1012754:	10800048 	cmpgei	r2,r2,1
 1012758:	103fcd1e 	bne	r2,zero,1012690 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 101275c:	e0fffc17 	ldw	r3,-16(fp)
 1012760:	e0bff617 	ldw	r2,-40(fp)
 1012764:	18800526 	beq	r3,r2,101277c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1012768:	e0fffc17 	ldw	r3,-16(fp)
 101276c:	e0bff617 	ldw	r2,-40(fp)
 1012770:	1887c83a 	sub	r3,r3,r2
 1012774:	e0ffff15 	stw	r3,-4(fp)
 1012778:	00000906 	br	10127a0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 101277c:	e0bffe17 	ldw	r2,-8(fp)
 1012780:	1090000c 	andi	r2,r2,16384
 1012784:	1005003a 	cmpeq	r2,r2,zero
 1012788:	1000031e 	bne	r2,zero,1012798 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 101278c:	00bffd44 	movi	r2,-11
 1012790:	e0bfff15 	stw	r2,-4(fp)
 1012794:	00000206 	br	10127a0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1012798:	00bffec4 	movi	r2,-5
 101279c:	e0bfff15 	stw	r2,-4(fp)
 10127a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10127a4:	e037883a 	mov	sp,fp
 10127a8:	dfc00117 	ldw	ra,4(sp)
 10127ac:	df000017 	ldw	fp,0(sp)
 10127b0:	dec00204 	addi	sp,sp,8
 10127b4:	f800283a 	ret

010127b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10127b8:	defff904 	addi	sp,sp,-28
 10127bc:	dfc00615 	stw	ra,24(sp)
 10127c0:	df000515 	stw	fp,20(sp)
 10127c4:	df000504 	addi	fp,sp,20
 10127c8:	e13ffe15 	stw	r4,-8(fp)
 10127cc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10127d0:	e0bffe17 	ldw	r2,-8(fp)
 10127d4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10127d8:	e0bffe17 	ldw	r2,-8(fp)
 10127dc:	10800104 	addi	r2,r2,4
 10127e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10127e4:	0005303a 	rdctl	r2,status
 10127e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10127ec:	e0fffc17 	ldw	r3,-16(fp)
 10127f0:	00bfff84 	movi	r2,-2
 10127f4:	1884703a 	and	r2,r3,r2
 10127f8:	1001703a 	wrctl	status,r2
  
  return context;
 10127fc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1012800:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1012804:	10143ac0 	call	10143ac <alt_tick>
 1012808:	e0bffd17 	ldw	r2,-12(fp)
 101280c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012810:	e0bffb17 	ldw	r2,-20(fp)
 1012814:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1012818:	e037883a 	mov	sp,fp
 101281c:	dfc00117 	ldw	ra,4(sp)
 1012820:	df000017 	ldw	fp,0(sp)
 1012824:	dec00204 	addi	sp,sp,8
 1012828:	f800283a 	ret

0101282c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 101282c:	defff904 	addi	sp,sp,-28
 1012830:	dfc00615 	stw	ra,24(sp)
 1012834:	df000515 	stw	fp,20(sp)
 1012838:	df000504 	addi	fp,sp,20
 101283c:	e13ffc15 	stw	r4,-16(fp)
 1012840:	e17ffd15 	stw	r5,-12(fp)
 1012844:	e1bffe15 	stw	r6,-8(fp)
 1012848:	e1ffff15 	stw	r7,-4(fp)
 101284c:	e0bfff17 	ldw	r2,-4(fp)
 1012850:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1012854:	008040b4 	movhi	r2,258
 1012858:	10a4e304 	addi	r2,r2,-27764
 101285c:	10800017 	ldw	r2,0(r2)
 1012860:	1004c03a 	cmpne	r2,r2,zero
 1012864:	1000041e 	bne	r2,zero,1012878 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1012868:	00c040b4 	movhi	r3,258
 101286c:	18e4e304 	addi	r3,r3,-27764
 1012870:	e0bffb17 	ldw	r2,-20(fp)
 1012874:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1012878:	e0bffc17 	ldw	r2,-16(fp)
 101287c:	10800104 	addi	r2,r2,4
 1012880:	1007883a 	mov	r3,r2
 1012884:	008001c4 	movi	r2,7
 1012888:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 101288c:	e13ffe17 	ldw	r4,-8(fp)
 1012890:	e17ffc17 	ldw	r5,-16(fp)
 1012894:	01804074 	movhi	r6,257
 1012898:	3189ee04 	addi	r6,r6,10168
 101289c:	1010d540 	call	1010d54 <alt_irq_register>
#endif  
}
 10128a0:	e037883a 	mov	sp,fp
 10128a4:	dfc00117 	ldw	ra,4(sp)
 10128a8:	df000017 	ldw	fp,0(sp)
 10128ac:	dec00204 	addi	sp,sp,8
 10128b0:	f800283a 	ret

010128b4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 10128b4:	defffd04 	addi	sp,sp,-12
 10128b8:	df000215 	stw	fp,8(sp)
 10128bc:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 10128c0:	008040b4 	movhi	r2,258
 10128c4:	10a4e104 	addi	r2,r2,-27772
 10128c8:	10800017 	ldw	r2,0(r2)
 10128cc:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 10128d0:	008040b4 	movhi	r2,258
 10128d4:	10a4e204 	addi	r2,r2,-27768
 10128d8:	10800017 	ldw	r2,0(r2)
 10128dc:	1004c03a 	cmpne	r2,r2,zero
 10128e0:	1000031e 	bne	r2,zero,10128f0 <alt_timestamp_start+0x3c>
  {
    return -1;
 10128e4:	00bfffc4 	movi	r2,-1
 10128e8:	e0bfff15 	stw	r2,-4(fp)
 10128ec:	00001506 	br	1012944 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 10128f0:	e0bffe17 	ldw	r2,-8(fp)
 10128f4:	10800104 	addi	r2,r2,4
 10128f8:	1007883a 	mov	r3,r2
 10128fc:	00800204 	movi	r2,8
 1012900:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 1012904:	e0bffe17 	ldw	r2,-8(fp)
 1012908:	10800204 	addi	r2,r2,8
 101290c:	1007883a 	mov	r3,r2
 1012910:	00bfffd4 	movui	r2,65535
 1012914:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 1012918:	e0bffe17 	ldw	r2,-8(fp)
 101291c:	10800304 	addi	r2,r2,12
 1012920:	1007883a 	mov	r3,r2
 1012924:	00bfffd4 	movui	r2,65535
 1012928:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 101292c:	e0bffe17 	ldw	r2,-8(fp)
 1012930:	10800104 	addi	r2,r2,4
 1012934:	1007883a 	mov	r3,r2
 1012938:	00800104 	movi	r2,4
 101293c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 1012940:	e03fff15 	stw	zero,-4(fp)
 1012944:	e0bfff17 	ldw	r2,-4(fp)
}
 1012948:	e037883a 	mov	sp,fp
 101294c:	df000017 	ldw	fp,0(sp)
 1012950:	dec00104 	addi	sp,sp,4
 1012954:	f800283a 	ret

01012958 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 1012958:	defffb04 	addi	sp,sp,-20
 101295c:	df000415 	stw	fp,16(sp)
 1012960:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 1012964:	008040b4 	movhi	r2,258
 1012968:	10a4e104 	addi	r2,r2,-27772
 101296c:	10800017 	ldw	r2,0(r2)
 1012970:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 1012974:	008040b4 	movhi	r2,258
 1012978:	10a4e204 	addi	r2,r2,-27768
 101297c:	10800017 	ldw	r2,0(r2)
 1012980:	1004c03a 	cmpne	r2,r2,zero
 1012984:	1000031e 	bne	r2,zero,1012994 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 1012988:	00bfffc4 	movi	r2,-1
 101298c:	e0bfff15 	stw	r2,-4(fp)
 1012990:	00001306 	br	10129e0 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 1012994:	e0bffe17 	ldw	r2,-8(fp)
 1012998:	10800404 	addi	r2,r2,16
 101299c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 10129a0:	e0bffe17 	ldw	r2,-8(fp)
 10129a4:	10800404 	addi	r2,r2,16
 10129a8:	10800037 	ldwio	r2,0(r2)
 10129ac:	10bfffcc 	andi	r2,r2,65535
 10129b0:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 10129b4:	e0bffe17 	ldw	r2,-8(fp)
 10129b8:	10800504 	addi	r2,r2,20
 10129bc:	10800037 	ldwio	r2,0(r2)
 10129c0:	10bfffcc 	andi	r2,r2,65535
 10129c4:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 10129c8:	e0bffc17 	ldw	r2,-16(fp)
 10129cc:	1006943a 	slli	r3,r2,16
 10129d0:	e0bffd17 	ldw	r2,-12(fp)
 10129d4:	1884b03a 	or	r2,r3,r2
 10129d8:	0084303a 	nor	r2,zero,r2
 10129dc:	e0bfff15 	stw	r2,-4(fp)
 10129e0:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 10129e4:	e037883a 	mov	sp,fp
 10129e8:	df000017 	ldw	fp,0(sp)
 10129ec:	dec00104 	addi	sp,sp,4
 10129f0:	f800283a 	ret

010129f4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 10129f4:	deffff04 	addi	sp,sp,-4
 10129f8:	df000015 	stw	fp,0(sp)
 10129fc:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 1012a00:	008040b4 	movhi	r2,258
 1012a04:	10a4e204 	addi	r2,r2,-27768
 1012a08:	10800017 	ldw	r2,0(r2)
}
 1012a0c:	e037883a 	mov	sp,fp
 1012a10:	df000017 	ldw	fp,0(sp)
 1012a14:	dec00104 	addi	sp,sp,4
 1012a18:	f800283a 	ret

01012a1c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1012a1c:	defffc04 	addi	sp,sp,-16
 1012a20:	df000315 	stw	fp,12(sp)
 1012a24:	df000304 	addi	fp,sp,12
 1012a28:	e13ffe15 	stw	r4,-8(fp)
 1012a2c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1012a30:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1012a34:	e0bfff17 	ldw	r2,-4(fp)
 1012a38:	1004c03a 	cmpne	r2,r2,zero
 1012a3c:	1000061e 	bne	r2,zero,1012a58 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1012a40:	e0bffe17 	ldw	r2,-8(fp)
 1012a44:	1007883a 	mov	r3,r2
 1012a48:	e0bffd03 	ldbu	r2,-12(fp)
 1012a4c:	10c4b03a 	or	r2,r2,r3
 1012a50:	e0bffd05 	stb	r2,-12(fp)
 1012a54:	00000806 	br	1012a78 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1012a58:	e0bffe17 	ldw	r2,-8(fp)
 1012a5c:	1007883a 	mov	r3,r2
 1012a60:	e0bffd03 	ldbu	r2,-12(fp)
 1012a64:	10c4b03a 	or	r2,r2,r3
 1012a68:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1012a6c:	e0bffd03 	ldbu	r2,-12(fp)
 1012a70:	10801014 	ori	r2,r2,64
 1012a74:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1012a78:	e0fffd03 	ldbu	r3,-12(fp)
 1012a7c:	00bfe004 	movi	r2,-128
 1012a80:	1884b03a 	or	r2,r3,r2
 1012a84:	10803fcc 	andi	r2,r2,255
}
 1012a88:	e037883a 	mov	sp,fp
 1012a8c:	df000017 	ldw	fp,0(sp)
 1012a90:	dec00104 	addi	sp,sp,4
 1012a94:	f800283a 	ret

01012a98 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1012a98:	defffd04 	addi	sp,sp,-12
 1012a9c:	df000215 	stw	fp,8(sp)
 1012aa0:	df000204 	addi	fp,sp,8
 1012aa4:	e13ffe15 	stw	r4,-8(fp)
 1012aa8:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1012aac:	e0bffe17 	ldw	r2,-8(fp)
 1012ab0:	10800a17 	ldw	r2,40(r2)
 1012ab4:	e0ffff03 	ldbu	r3,-4(fp)
 1012ab8:	10c00025 	stbio	r3,0(r2)
}
 1012abc:	e037883a 	mov	sp,fp
 1012ac0:	df000017 	ldw	fp,0(sp)
 1012ac4:	dec00104 	addi	sp,sp,4
 1012ac8:	f800283a 	ret

01012acc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1012acc:	defffe04 	addi	sp,sp,-8
 1012ad0:	df000115 	stw	fp,4(sp)
 1012ad4:	df000104 	addi	fp,sp,4
 1012ad8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1012adc:	e0bfff17 	ldw	r2,-4(fp)
 1012ae0:	10800a17 	ldw	r2,40(r2)
 1012ae4:	1007883a 	mov	r3,r2
 1012ae8:	00800044 	movi	r2,1
 1012aec:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1012af0:	e037883a 	mov	sp,fp
 1012af4:	df000017 	ldw	fp,0(sp)
 1012af8:	dec00104 	addi	sp,sp,4
 1012afc:	f800283a 	ret

01012b00 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1012b00:	defffc04 	addi	sp,sp,-16
 1012b04:	dfc00315 	stw	ra,12(sp)
 1012b08:	df000215 	stw	fp,8(sp)
 1012b0c:	df000204 	addi	fp,sp,8
 1012b10:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1012b14:	e13fff17 	ldw	r4,-4(fp)
 1012b18:	01404074 	movhi	r5,257
 1012b1c:	295cf104 	addi	r5,r5,29636
 1012b20:	1013e500 	call	1013e50 <alt_find_dev>
 1012b24:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1012b28:	e0bffe17 	ldw	r2,-8(fp)
}
 1012b2c:	e037883a 	mov	sp,fp
 1012b30:	dfc00117 	ldw	ra,4(sp)
 1012b34:	df000017 	ldw	fp,0(sp)
 1012b38:	dec00204 	addi	sp,sp,8
 1012b3c:	f800283a 	ret

01012b40 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1012b40:	defffb04 	addi	sp,sp,-20
 1012b44:	df000415 	stw	fp,16(sp)
 1012b48:	df000404 	addi	fp,sp,16
 1012b4c:	e13ffd15 	stw	r4,-12(fp)
 1012b50:	e17ffe15 	stw	r5,-8(fp)
 1012b54:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1012b58:	e03ffc15 	stw	zero,-16(fp)
 1012b5c:	00000f06 	br	1012b9c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1012b60:	e0bffd17 	ldw	r2,-12(fp)
 1012b64:	10800a17 	ldw	r2,40(r2)
 1012b68:	11000044 	addi	r4,r2,1
 1012b6c:	e0fffc17 	ldw	r3,-16(fp)
 1012b70:	e0bffe17 	ldw	r2,-8(fp)
 1012b74:	1885883a 	add	r2,r3,r2
 1012b78:	10800003 	ldbu	r2,0(r2)
 1012b7c:	10c03fcc 	andi	r3,r2,255
 1012b80:	18c0201c 	xori	r3,r3,128
 1012b84:	18ffe004 	addi	r3,r3,-128
 1012b88:	2005883a 	mov	r2,r4
 1012b8c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1012b90:	e0bffc17 	ldw	r2,-16(fp)
 1012b94:	10800044 	addi	r2,r2,1
 1012b98:	e0bffc15 	stw	r2,-16(fp)
 1012b9c:	e0fffc17 	ldw	r3,-16(fp)
 1012ba0:	e0bfff17 	ldw	r2,-4(fp)
 1012ba4:	18bfee36 	bltu	r3,r2,1012b60 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1012ba8:	e037883a 	mov	sp,fp
 1012bac:	df000017 	ldw	fp,0(sp)
 1012bb0:	dec00104 	addi	sp,sp,4
 1012bb4:	f800283a 	ret

01012bb8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1012bb8:	defffd04 	addi	sp,sp,-12
 1012bbc:	df000215 	stw	fp,8(sp)
 1012bc0:	df000204 	addi	fp,sp,8
 1012bc4:	e13ffe15 	stw	r4,-8(fp)
 1012bc8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1012bcc:	00000d06 	br	1012c04 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1012bd0:	e0bffe17 	ldw	r2,-8(fp)
 1012bd4:	10800a17 	ldw	r2,40(r2)
 1012bd8:	11000044 	addi	r4,r2,1
 1012bdc:	e0bfff17 	ldw	r2,-4(fp)
 1012be0:	10800003 	ldbu	r2,0(r2)
 1012be4:	10c03fcc 	andi	r3,r2,255
 1012be8:	18c0201c 	xori	r3,r3,128
 1012bec:	18ffe004 	addi	r3,r3,-128
 1012bf0:	2005883a 	mov	r2,r4
 1012bf4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1012bf8:	e0bfff17 	ldw	r2,-4(fp)
 1012bfc:	10800044 	addi	r2,r2,1
 1012c00:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1012c04:	e0bfff17 	ldw	r2,-4(fp)
 1012c08:	10800003 	ldbu	r2,0(r2)
 1012c0c:	10803fcc 	andi	r2,r2,255
 1012c10:	1080201c 	xori	r2,r2,128
 1012c14:	10bfe004 	addi	r2,r2,-128
 1012c18:	1004c03a 	cmpne	r2,r2,zero
 1012c1c:	103fec1e 	bne	r2,zero,1012bd0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1012c20:	e037883a 	mov	sp,fp
 1012c24:	df000017 	ldw	fp,0(sp)
 1012c28:	dec00104 	addi	sp,sp,4
 1012c2c:	f800283a 	ret

01012c30 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1012c30:	defffb04 	addi	sp,sp,-20
 1012c34:	dfc00415 	stw	ra,16(sp)
 1012c38:	df000315 	stw	fp,12(sp)
 1012c3c:	df000304 	addi	fp,sp,12
 1012c40:	e13ffd15 	stw	r4,-12(fp)
 1012c44:	e17ffe15 	stw	r5,-8(fp)
 1012c48:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1012c4c:	e0bffd17 	ldw	r2,-12(fp)
 1012c50:	10800017 	ldw	r2,0(r2)
 1012c54:	1009883a 	mov	r4,r2
 1012c58:	e1bfff17 	ldw	r6,-4(fp)
 1012c5c:	e17ffe17 	ldw	r5,-8(fp)
 1012c60:	1012b400 	call	1012b40 <alt_up_character_lcd_write>
	return 0;
 1012c64:	0005883a 	mov	r2,zero
}
 1012c68:	e037883a 	mov	sp,fp
 1012c6c:	dfc00117 	ldw	ra,4(sp)
 1012c70:	df000017 	ldw	fp,0(sp)
 1012c74:	dec00204 	addi	sp,sp,8
 1012c78:	f800283a 	ret

01012c7c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1012c7c:	defff904 	addi	sp,sp,-28
 1012c80:	dfc00615 	stw	ra,24(sp)
 1012c84:	df000515 	stw	fp,20(sp)
 1012c88:	df000504 	addi	fp,sp,20
 1012c8c:	e13ffc15 	stw	r4,-16(fp)
 1012c90:	e17ffd15 	stw	r5,-12(fp)
 1012c94:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1012c98:	e0bffd17 	ldw	r2,-12(fp)
 1012c9c:	10800a28 	cmpgeui	r2,r2,40
 1012ca0:	1000031e 	bne	r2,zero,1012cb0 <alt_up_character_lcd_set_cursor_pos+0x34>
 1012ca4:	e0bffe17 	ldw	r2,-8(fp)
 1012ca8:	108000b0 	cmpltui	r2,r2,2
 1012cac:	1000031e 	bne	r2,zero,1012cbc <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1012cb0:	00bfffc4 	movi	r2,-1
 1012cb4:	e0bfff15 	stw	r2,-4(fp)
 1012cb8:	00000806 	br	1012cdc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1012cbc:	e13ffd17 	ldw	r4,-12(fp)
 1012cc0:	e17ffe17 	ldw	r5,-8(fp)
 1012cc4:	1012a1c0 	call	1012a1c <get_DDRAM_addr>
 1012cc8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1012ccc:	e17ffb03 	ldbu	r5,-20(fp)
 1012cd0:	e13ffc17 	ldw	r4,-16(fp)
 1012cd4:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
	return 0;
 1012cd8:	e03fff15 	stw	zero,-4(fp)
 1012cdc:	e0bfff17 	ldw	r2,-4(fp)
}
 1012ce0:	e037883a 	mov	sp,fp
 1012ce4:	dfc00117 	ldw	ra,4(sp)
 1012ce8:	df000017 	ldw	fp,0(sp)
 1012cec:	dec00204 	addi	sp,sp,8
 1012cf0:	f800283a 	ret

01012cf4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1012cf4:	defff904 	addi	sp,sp,-28
 1012cf8:	dfc00615 	stw	ra,24(sp)
 1012cfc:	df000515 	stw	fp,20(sp)
 1012d00:	df000504 	addi	fp,sp,20
 1012d04:	e13ffc15 	stw	r4,-16(fp)
 1012d08:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1012d0c:	e0bffd17 	ldw	r2,-12(fp)
 1012d10:	1005003a 	cmpeq	r2,r2,zero
 1012d14:	10001e1e 	bne	r2,zero,1012d90 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1012d18:	e0bffd17 	ldw	r2,-12(fp)
 1012d1c:	10800050 	cmplti	r2,r2,1
 1012d20:	1000031e 	bne	r2,zero,1012d30 <alt_up_character_lcd_shift_cursor+0x3c>
 1012d24:	00800504 	movi	r2,20
 1012d28:	e0bfff05 	stb	r2,-4(fp)
 1012d2c:	00000206 	br	1012d38 <alt_up_character_lcd_shift_cursor+0x44>
 1012d30:	00c00404 	movi	r3,16
 1012d34:	e0ffff05 	stb	r3,-4(fp)
 1012d38:	e0bfff03 	ldbu	r2,-4(fp)
 1012d3c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1012d40:	e0fffd17 	ldw	r3,-12(fp)
 1012d44:	e0fffe15 	stw	r3,-8(fp)
 1012d48:	e0fffe17 	ldw	r3,-8(fp)
 1012d4c:	1804403a 	cmpge	r2,r3,zero
 1012d50:	1000031e 	bne	r2,zero,1012d60 <alt_up_character_lcd_shift_cursor+0x6c>
 1012d54:	e0bffe17 	ldw	r2,-8(fp)
 1012d58:	0085c83a 	sub	r2,zero,r2
 1012d5c:	e0bffe15 	stw	r2,-8(fp)
 1012d60:	e0fffe17 	ldw	r3,-8(fp)
 1012d64:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1012d68:	00000306 	br	1012d78 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1012d6c:	e17ffb43 	ldbu	r5,-19(fp)
 1012d70:	e13ffc17 	ldw	r4,-16(fp)
 1012d74:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1012d78:	e0bffb03 	ldbu	r2,-20(fp)
 1012d7c:	10bfffc4 	addi	r2,r2,-1
 1012d80:	e0bffb05 	stb	r2,-20(fp)
 1012d84:	e0bffb03 	ldbu	r2,-20(fp)
 1012d88:	10803fd8 	cmpnei	r2,r2,255
 1012d8c:	103ff71e 	bne	r2,zero,1012d6c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1012d90:	e037883a 	mov	sp,fp
 1012d94:	dfc00117 	ldw	ra,4(sp)
 1012d98:	df000017 	ldw	fp,0(sp)
 1012d9c:	dec00204 	addi	sp,sp,8
 1012da0:	f800283a 	ret

01012da4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1012da4:	defff904 	addi	sp,sp,-28
 1012da8:	dfc00615 	stw	ra,24(sp)
 1012dac:	df000515 	stw	fp,20(sp)
 1012db0:	df000504 	addi	fp,sp,20
 1012db4:	e13ffc15 	stw	r4,-16(fp)
 1012db8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1012dbc:	e0bffd17 	ldw	r2,-12(fp)
 1012dc0:	1005003a 	cmpeq	r2,r2,zero
 1012dc4:	10001e1e 	bne	r2,zero,1012e40 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1012dc8:	e0bffd17 	ldw	r2,-12(fp)
 1012dcc:	10800050 	cmplti	r2,r2,1
 1012dd0:	1000031e 	bne	r2,zero,1012de0 <alt_up_character_lcd_shift_display+0x3c>
 1012dd4:	00800704 	movi	r2,28
 1012dd8:	e0bfff05 	stb	r2,-4(fp)
 1012ddc:	00000206 	br	1012de8 <alt_up_character_lcd_shift_display+0x44>
 1012de0:	00c00604 	movi	r3,24
 1012de4:	e0ffff05 	stb	r3,-4(fp)
 1012de8:	e0bfff03 	ldbu	r2,-4(fp)
 1012dec:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1012df0:	e0fffd17 	ldw	r3,-12(fp)
 1012df4:	e0fffe15 	stw	r3,-8(fp)
 1012df8:	e0fffe17 	ldw	r3,-8(fp)
 1012dfc:	1804403a 	cmpge	r2,r3,zero
 1012e00:	1000031e 	bne	r2,zero,1012e10 <alt_up_character_lcd_shift_display+0x6c>
 1012e04:	e0bffe17 	ldw	r2,-8(fp)
 1012e08:	0085c83a 	sub	r2,zero,r2
 1012e0c:	e0bffe15 	stw	r2,-8(fp)
 1012e10:	e0fffe17 	ldw	r3,-8(fp)
 1012e14:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1012e18:	00000306 	br	1012e28 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1012e1c:	e17ffb43 	ldbu	r5,-19(fp)
 1012e20:	e13ffc17 	ldw	r4,-16(fp)
 1012e24:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1012e28:	e0bffb03 	ldbu	r2,-20(fp)
 1012e2c:	10bfffc4 	addi	r2,r2,-1
 1012e30:	e0bffb05 	stb	r2,-20(fp)
 1012e34:	e0bffb03 	ldbu	r2,-20(fp)
 1012e38:	10803fd8 	cmpnei	r2,r2,255
 1012e3c:	103ff71e 	bne	r2,zero,1012e1c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1012e40:	e037883a 	mov	sp,fp
 1012e44:	dfc00117 	ldw	ra,4(sp)
 1012e48:	df000017 	ldw	fp,0(sp)
 1012e4c:	dec00204 	addi	sp,sp,8
 1012e50:	f800283a 	ret

01012e54 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1012e54:	defff904 	addi	sp,sp,-28
 1012e58:	dfc00615 	stw	ra,24(sp)
 1012e5c:	df000515 	stw	fp,20(sp)
 1012e60:	df000504 	addi	fp,sp,20
 1012e64:	e13ffc15 	stw	r4,-16(fp)
 1012e68:	e17ffd15 	stw	r5,-12(fp)
 1012e6c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1012e70:	e0bffd17 	ldw	r2,-12(fp)
 1012e74:	10800a28 	cmpgeui	r2,r2,40
 1012e78:	1000031e 	bne	r2,zero,1012e88 <alt_up_character_lcd_erase_pos+0x34>
 1012e7c:	e0bffe17 	ldw	r2,-8(fp)
 1012e80:	108000b0 	cmpltui	r2,r2,2
 1012e84:	1000031e 	bne	r2,zero,1012e94 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1012e88:	00bfffc4 	movi	r2,-1
 1012e8c:	e0bfff15 	stw	r2,-4(fp)
 1012e90:	00000e06 	br	1012ecc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1012e94:	e13ffd17 	ldw	r4,-12(fp)
 1012e98:	e17ffe17 	ldw	r5,-8(fp)
 1012e9c:	1012a1c0 	call	1012a1c <get_DDRAM_addr>
 1012ea0:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1012ea4:	e17ffb03 	ldbu	r5,-20(fp)
 1012ea8:	e13ffc17 	ldw	r4,-16(fp)
 1012eac:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1012eb0:	e0bffc17 	ldw	r2,-16(fp)
 1012eb4:	10800a17 	ldw	r2,40(r2)
 1012eb8:	10800044 	addi	r2,r2,1
 1012ebc:	1007883a 	mov	r3,r2
 1012ec0:	00800084 	movi	r2,2
 1012ec4:	18800025 	stbio	r2,0(r3)
	return 0;
 1012ec8:	e03fff15 	stw	zero,-4(fp)
 1012ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 1012ed0:	e037883a 	mov	sp,fp
 1012ed4:	dfc00117 	ldw	ra,4(sp)
 1012ed8:	df000017 	ldw	fp,0(sp)
 1012edc:	dec00204 	addi	sp,sp,8
 1012ee0:	f800283a 	ret

01012ee4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1012ee4:	defffd04 	addi	sp,sp,-12
 1012ee8:	dfc00215 	stw	ra,8(sp)
 1012eec:	df000115 	stw	fp,4(sp)
 1012ef0:	df000104 	addi	fp,sp,4
 1012ef4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1012ef8:	e13fff17 	ldw	r4,-4(fp)
 1012efc:	01400304 	movi	r5,12
 1012f00:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
}
 1012f04:	e037883a 	mov	sp,fp
 1012f08:	dfc00117 	ldw	ra,4(sp)
 1012f0c:	df000017 	ldw	fp,0(sp)
 1012f10:	dec00204 	addi	sp,sp,8
 1012f14:	f800283a 	ret

01012f18 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1012f18:	defffd04 	addi	sp,sp,-12
 1012f1c:	dfc00215 	stw	ra,8(sp)
 1012f20:	df000115 	stw	fp,4(sp)
 1012f24:	df000104 	addi	fp,sp,4
 1012f28:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1012f2c:	e13fff17 	ldw	r4,-4(fp)
 1012f30:	014003c4 	movi	r5,15
 1012f34:	1012a980 	call	1012a98 <alt_up_character_lcd_send_cmd>
}
 1012f38:	e037883a 	mov	sp,fp
 1012f3c:	dfc00117 	ldw	ra,4(sp)
 1012f40:	df000017 	ldw	fp,0(sp)
 1012f44:	dec00204 	addi	sp,sp,8
 1012f48:	f800283a 	ret

01012f4c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 1012f4c:	defffd04 	addi	sp,sp,-12
 1012f50:	df000215 	stw	fp,8(sp)
 1012f54:	df000204 	addi	fp,sp,8
 1012f58:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 1012f5c:	e0bfff17 	ldw	r2,-4(fp)
 1012f60:	1080400c 	andi	r2,r2,256
 1012f64:	1004d23a 	srli	r2,r2,8
 1012f68:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 1012f6c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1012f70:	e037883a 	mov	sp,fp
 1012f74:	df000017 	ldw	fp,0(sp)
 1012f78:	dec00104 	addi	sp,sp,4
 1012f7c:	f800283a 	ret

01012f80 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 1012f80:	defffd04 	addi	sp,sp,-12
 1012f84:	df000215 	stw	fp,8(sp)
 1012f88:	df000204 	addi	fp,sp,8
 1012f8c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 1012f90:	e0bfff17 	ldw	r2,-4(fp)
 1012f94:	1080004c 	andi	r2,r2,1
 1012f98:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1012f9c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1012fa0:	e037883a 	mov	sp,fp
 1012fa4:	df000017 	ldw	fp,0(sp)
 1012fa8:	dec00104 	addi	sp,sp,4
 1012fac:	f800283a 	ret

01012fb0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 1012fb0:	defffd04 	addi	sp,sp,-12
 1012fb4:	df000215 	stw	fp,8(sp)
 1012fb8:	df000204 	addi	fp,sp,8
 1012fbc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 1012fc0:	e0bfff17 	ldw	r2,-4(fp)
 1012fc4:	1081000c 	andi	r2,r2,1024
 1012fc8:	1004d2ba 	srli	r2,r2,10
 1012fcc:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1012fd0:	e0bffe03 	ldbu	r2,-8(fp)
}
 1012fd4:	e037883a 	mov	sp,fp
 1012fd8:	df000017 	ldw	fp,0(sp)
 1012fdc:	dec00104 	addi	sp,sp,4
 1012fe0:	f800283a 	ret

01012fe4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 1012fe4:	defffd04 	addi	sp,sp,-12
 1012fe8:	df000215 	stw	fp,8(sp)
 1012fec:	df000204 	addi	fp,sp,8
 1012ff0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 1012ff4:	e0bfff17 	ldw	r2,-4(fp)
 1012ff8:	10bfffec 	andhi	r2,r2,65535
 1012ffc:	1004d43a 	srli	r2,r2,16
 1013000:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 1013004:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1013008:	e037883a 	mov	sp,fp
 101300c:	df000017 	ldw	fp,0(sp)
 1013010:	dec00104 	addi	sp,sp,4
 1013014:	f800283a 	ret

01013018 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 1013018:	defffd04 	addi	sp,sp,-12
 101301c:	df000215 	stw	fp,8(sp)
 1013020:	df000204 	addi	fp,sp,8
 1013024:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 1013028:	e0bfff17 	ldw	r2,-4(fp)
 101302c:	10a0000c 	andi	r2,r2,32768
 1013030:	1004d3fa 	srli	r2,r2,15
 1013034:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 1013038:	e0bffe03 	ldbu	r2,-8(fp)
}
 101303c:	e037883a 	mov	sp,fp
 1013040:	df000017 	ldw	fp,0(sp)
 1013044:	dec00104 	addi	sp,sp,4
 1013048:	f800283a 	ret

0101304c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 101304c:	defffd04 	addi	sp,sp,-12
 1013050:	df000215 	stw	fp,8(sp)
 1013054:	df000204 	addi	fp,sp,8
 1013058:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 101305c:	e0bfff17 	ldw	r2,-4(fp)
 1013060:	e0bffe05 	stb	r2,-8(fp)
	return data;
 1013064:	e0bffe03 	ldbu	r2,-8(fp)
}
 1013068:	e037883a 	mov	sp,fp
 101306c:	df000017 	ldw	fp,0(sp)
 1013070:	dec00104 	addi	sp,sp,4
 1013074:	f800283a 	ret

01013078 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 1013078:	defffb04 	addi	sp,sp,-20
 101307c:	dfc00415 	stw	ra,16(sp)
 1013080:	df000315 	stw	fp,12(sp)
 1013084:	df000304 	addi	fp,sp,12
 1013088:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 101308c:	e13fff17 	ldw	r4,-4(fp)
 1013090:	01403fc4 	movi	r5,255
 1013094:	10132d80 	call	10132d8 <alt_up_ps2_write_data_byte_with_ack>
 1013098:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 101309c:	e0bffd17 	ldw	r2,-12(fp)
 10130a0:	1004c03a 	cmpne	r2,r2,zero
 10130a4:	1000221e 	bne	r2,zero,1013130 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 10130a8:	e17ffe04 	addi	r5,fp,-8
 10130ac:	e13fff17 	ldw	r4,-4(fp)
 10130b0:	10133440 	call	1013344 <alt_up_ps2_read_data_byte_timeout>
 10130b4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 10130b8:	e0bffd17 	ldw	r2,-12(fp)
 10130bc:	1004c03a 	cmpne	r2,r2,zero
 10130c0:	10001b1e 	bne	r2,zero,1013130 <alt_up_ps2_init+0xb8>
 10130c4:	e0bffe03 	ldbu	r2,-8(fp)
 10130c8:	10803fcc 	andi	r2,r2,255
 10130cc:	10802a98 	cmpnei	r2,r2,170
 10130d0:	1000171e 	bne	r2,zero,1013130 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 10130d4:	e17ffe04 	addi	r5,fp,-8
 10130d8:	e13fff17 	ldw	r4,-4(fp)
 10130dc:	10133440 	call	1013344 <alt_up_ps2_read_data_byte_timeout>
 10130e0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 10130e4:	e0bffd17 	ldw	r2,-12(fp)
 10130e8:	10bfe318 	cmpnei	r2,r2,-116
 10130ec:	1000041e 	bne	r2,zero,1013100 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 10130f0:	e0ffff17 	ldw	r3,-4(fp)
 10130f4:	00800044 	movi	r2,1
 10130f8:	18800d15 	stw	r2,52(r3)
 10130fc:	00000c06 	br	1013130 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 1013100:	e0bffd17 	ldw	r2,-12(fp)
 1013104:	1004c03a 	cmpne	r2,r2,zero
 1013108:	1000091e 	bne	r2,zero,1013130 <alt_up_ps2_init+0xb8>
 101310c:	e0bffe03 	ldbu	r2,-8(fp)
 1013110:	10803fcc 	andi	r2,r2,255
 1013114:	1004c03a 	cmpne	r2,r2,zero
 1013118:	1000051e 	bne	r2,zero,1013130 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 101311c:	e0bfff17 	ldw	r2,-4(fp)
 1013120:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 1013124:	e13fff17 	ldw	r4,-4(fp)
 1013128:	01403d04 	movi	r5,244
 101312c:	10131f00 	call	10131f0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 1013130:	e037883a 	mov	sp,fp
 1013134:	dfc00117 	ldw	ra,4(sp)
 1013138:	df000017 	ldw	fp,0(sp)
 101313c:	dec00204 	addi	sp,sp,8
 1013140:	f800283a 	ret

01013144 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1013144:	defffd04 	addi	sp,sp,-12
 1013148:	df000215 	stw	fp,8(sp)
 101314c:	df000204 	addi	fp,sp,8
 1013150:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1013154:	e0bfff17 	ldw	r2,-4(fp)
 1013158:	10800a17 	ldw	r2,40(r2)
 101315c:	10800104 	addi	r2,r2,4
 1013160:	10800037 	ldwio	r2,0(r2)
 1013164:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1013168:	e0bffe17 	ldw	r2,-8(fp)
 101316c:	10800054 	ori	r2,r2,1
 1013170:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1013174:	e0bfff17 	ldw	r2,-4(fp)
 1013178:	10800a17 	ldw	r2,40(r2)
 101317c:	10800104 	addi	r2,r2,4
 1013180:	e0fffe17 	ldw	r3,-8(fp)
 1013184:	10c00035 	stwio	r3,0(r2)
}
 1013188:	e037883a 	mov	sp,fp
 101318c:	df000017 	ldw	fp,0(sp)
 1013190:	dec00104 	addi	sp,sp,4
 1013194:	f800283a 	ret

01013198 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1013198:	defffd04 	addi	sp,sp,-12
 101319c:	df000215 	stw	fp,8(sp)
 10131a0:	df000204 	addi	fp,sp,8
 10131a4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 10131a8:	e0bfff17 	ldw	r2,-4(fp)
 10131ac:	10800a17 	ldw	r2,40(r2)
 10131b0:	10800104 	addi	r2,r2,4
 10131b4:	10800037 	ldwio	r2,0(r2)
 10131b8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 10131bc:	e0fffe17 	ldw	r3,-8(fp)
 10131c0:	00bfff84 	movi	r2,-2
 10131c4:	1884703a 	and	r2,r3,r2
 10131c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 10131cc:	e0bfff17 	ldw	r2,-4(fp)
 10131d0:	10800a17 	ldw	r2,40(r2)
 10131d4:	10800104 	addi	r2,r2,4
 10131d8:	e0fffe17 	ldw	r3,-8(fp)
 10131dc:	10c00035 	stwio	r3,0(r2)
}
 10131e0:	e037883a 	mov	sp,fp
 10131e4:	df000017 	ldw	fp,0(sp)
 10131e8:	dec00104 	addi	sp,sp,4
 10131ec:	f800283a 	ret

010131f0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 10131f0:	defffa04 	addi	sp,sp,-24
 10131f4:	dfc00515 	stw	ra,20(sp)
 10131f8:	df000415 	stw	fp,16(sp)
 10131fc:	df000404 	addi	fp,sp,16
 1013200:	e13ffd15 	stw	r4,-12(fp)
 1013204:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 1013208:	e0bffd17 	ldw	r2,-12(fp)
 101320c:	10800a17 	ldw	r2,40(r2)
 1013210:	e0fffe03 	ldbu	r3,-8(fp)
 1013214:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 1013218:	e0bffd17 	ldw	r2,-12(fp)
 101321c:	10800a17 	ldw	r2,40(r2)
 1013220:	10800104 	addi	r2,r2,4
 1013224:	10800037 	ldwio	r2,0(r2)
 1013228:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 101322c:	e13ffc17 	ldw	r4,-16(fp)
 1013230:	1012fb00 	call	1012fb0 <read_CE_bit>
 1013234:	10803fcc 	andi	r2,r2,255
 1013238:	1005003a 	cmpeq	r2,r2,zero
 101323c:	1000031e 	bne	r2,zero,101324c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 1013240:	00bffec4 	movi	r2,-5
 1013244:	e0bfff15 	stw	r2,-4(fp)
 1013248:	00000106 	br	1013250 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 101324c:	e03fff15 	stw	zero,-4(fp)
 1013250:	e0bfff17 	ldw	r2,-4(fp)
}
 1013254:	e037883a 	mov	sp,fp
 1013258:	dfc00117 	ldw	ra,4(sp)
 101325c:	df000017 	ldw	fp,0(sp)
 1013260:	dec00204 	addi	sp,sp,8
 1013264:	f800283a 	ret

01013268 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 1013268:	defffb04 	addi	sp,sp,-20
 101326c:	dfc00415 	stw	ra,16(sp)
 1013270:	df000315 	stw	fp,12(sp)
 1013274:	df000304 	addi	fp,sp,12
 1013278:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 101327c:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 1013280:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 1013284:	e17ffd44 	addi	r5,fp,-11
 1013288:	e13ffe17 	ldw	r4,-8(fp)
 101328c:	10133440 	call	1013344 <alt_up_ps2_read_data_byte_timeout>
 1013290:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 1013294:	e0bffd03 	ldbu	r2,-12(fp)
 1013298:	1004c03a 	cmpne	r2,r2,zero
 101329c:	1000061e 	bne	r2,zero,10132b8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 10132a0:	e0bffd43 	ldbu	r2,-11(fp)
 10132a4:	10803fcc 	andi	r2,r2,255
 10132a8:	10803e98 	cmpnei	r2,r2,250
 10132ac:	103ff51e 	bne	r2,zero,1013284 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 10132b0:	e03fff15 	stw	zero,-4(fp)
 10132b4:	00000206 	br	10132c0 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 10132b8:	e0bffd03 	ldbu	r2,-12(fp)
 10132bc:	e0bfff15 	stw	r2,-4(fp)
 10132c0:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 10132c4:	e037883a 	mov	sp,fp
 10132c8:	dfc00117 	ldw	ra,4(sp)
 10132cc:	df000017 	ldw	fp,0(sp)
 10132d0:	dec00204 	addi	sp,sp,8
 10132d4:	f800283a 	ret

010132d8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 10132d8:	defff904 	addi	sp,sp,-28
 10132dc:	dfc00615 	stw	ra,24(sp)
 10132e0:	df000515 	stw	fp,20(sp)
 10132e4:	df000504 	addi	fp,sp,20
 10132e8:	e13ffd15 	stw	r4,-12(fp)
 10132ec:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 10132f0:	e17ffe03 	ldbu	r5,-8(fp)
 10132f4:	e13ffd17 	ldw	r4,-12(fp)
 10132f8:	10131f00 	call	10131f0 <alt_up_ps2_write_data_byte>
 10132fc:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 1013300:	e0bffc17 	ldw	r2,-16(fp)
 1013304:	1005003a 	cmpeq	r2,r2,zero
 1013308:	1000031e 	bne	r2,zero,1013318 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 101330c:	e0bffc17 	ldw	r2,-16(fp)
 1013310:	e0bfff15 	stw	r2,-4(fp)
 1013314:	00000506 	br	101332c <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 1013318:	e13ffd17 	ldw	r4,-12(fp)
 101331c:	10132680 	call	1013268 <alt_up_ps2_wait_for_ack>
 1013320:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 1013324:	e0bffb17 	ldw	r2,-20(fp)
 1013328:	e0bfff15 	stw	r2,-4(fp)
 101332c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013330:	e037883a 	mov	sp,fp
 1013334:	dfc00117 	ldw	ra,4(sp)
 1013338:	df000017 	ldw	fp,0(sp)
 101333c:	dec00204 	addi	sp,sp,8
 1013340:	f800283a 	ret

01013344 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1013344:	defff904 	addi	sp,sp,-28
 1013348:	dfc00615 	stw	ra,24(sp)
 101334c:	df000515 	stw	fp,20(sp)
 1013350:	df000504 	addi	fp,sp,20
 1013354:	e13ffd15 	stw	r4,-12(fp)
 1013358:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 101335c:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 1013360:	e03ffb15 	stw	zero,-20(fp)
 1013364:	00000006 	br	1013368 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 1013368:	e0bffb17 	ldw	r2,-20(fp)
 101336c:	10800044 	addi	r2,r2,1
 1013370:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1013374:	e0bffd17 	ldw	r2,-12(fp)
 1013378:	10800a17 	ldw	r2,40(r2)
 101337c:	10800037 	ldwio	r2,0(r2)
 1013380:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 1013384:	e13ffc17 	ldw	r4,-16(fp)
 1013388:	10130180 	call	1013018 <read_data_valid>
 101338c:	10803fcc 	andi	r2,r2,255
 1013390:	1005003a 	cmpeq	r2,r2,zero
 1013394:	1000071e 	bne	r2,zero,10133b4 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 1013398:	e13ffc17 	ldw	r4,-16(fp)
 101339c:	101304c0 	call	101304c <read_data_byte>
 10133a0:	1007883a 	mov	r3,r2
 10133a4:	e0bffe17 	ldw	r2,-8(fp)
 10133a8:	10c00005 	stb	r3,0(r2)
			return 0;
 10133ac:	e03fff15 	stw	zero,-4(fp)
 10133b0:	00000a06 	br	10133dc <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 10133b4:	e0bffd17 	ldw	r2,-12(fp)
 10133b8:	10800c17 	ldw	r2,48(r2)
 10133bc:	1005003a 	cmpeq	r2,r2,zero
 10133c0:	103fe91e 	bne	r2,zero,1013368 <alt_up_ps2_read_data_byte_timeout+0x24>
 10133c4:	e0bffd17 	ldw	r2,-12(fp)
 10133c8:	10c00c17 	ldw	r3,48(r2)
 10133cc:	e0bffb17 	ldw	r2,-20(fp)
 10133d0:	18bfe52e 	bgeu	r3,r2,1013368 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 10133d4:	00bfe304 	movi	r2,-116
 10133d8:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 10133dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10133e0:	e037883a 	mov	sp,fp
 10133e4:	dfc00117 	ldw	ra,4(sp)
 10133e8:	df000017 	ldw	fp,0(sp)
 10133ec:	dec00204 	addi	sp,sp,8
 10133f0:	f800283a 	ret

010133f4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 10133f4:	defffa04 	addi	sp,sp,-24
 10133f8:	dfc00515 	stw	ra,20(sp)
 10133fc:	df000415 	stw	fp,16(sp)
 1013400:	df000404 	addi	fp,sp,16
 1013404:	e13ffd15 	stw	r4,-12(fp)
 1013408:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 101340c:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1013410:	e0bffd17 	ldw	r2,-12(fp)
 1013414:	10800a17 	ldw	r2,40(r2)
 1013418:	10800037 	ldwio	r2,0(r2)
 101341c:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 1013420:	e13ffc17 	ldw	r4,-16(fp)
 1013424:	10130180 	call	1013018 <read_data_valid>
 1013428:	10803fcc 	andi	r2,r2,255
 101342c:	1005003a 	cmpeq	r2,r2,zero
 1013430:	1000071e 	bne	r2,zero,1013450 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 1013434:	e13ffc17 	ldw	r4,-16(fp)
 1013438:	101304c0 	call	101304c <read_data_byte>
 101343c:	1007883a 	mov	r3,r2
 1013440:	e0bffe17 	ldw	r2,-8(fp)
 1013444:	10c00005 	stb	r3,0(r2)
		return 0;
 1013448:	e03fff15 	stw	zero,-4(fp)
 101344c:	00000206 	br	1013458 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 1013450:	00bfffc4 	movi	r2,-1
 1013454:	e0bfff15 	stw	r2,-4(fp)
 1013458:	e0bfff17 	ldw	r2,-4(fp)
}
 101345c:	e037883a 	mov	sp,fp
 1013460:	dfc00117 	ldw	ra,4(sp)
 1013464:	df000017 	ldw	fp,0(sp)
 1013468:	dec00204 	addi	sp,sp,8
 101346c:	f800283a 	ret

01013470 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 1013470:	defffb04 	addi	sp,sp,-20
 1013474:	dfc00415 	stw	ra,16(sp)
 1013478:	df000315 	stw	fp,12(sp)
 101347c:	df000304 	addi	fp,sp,12
 1013480:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 1013484:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 1013488:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 101348c:	e0bfff17 	ldw	r2,-4(fp)
 1013490:	10800a17 	ldw	r2,40(r2)
 1013494:	10800037 	ldwio	r2,0(r2)
 1013498:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 101349c:	e13ffd17 	ldw	r4,-12(fp)
 10134a0:	1012fe40 	call	1012fe4 <read_num_bytes_available>
 10134a4:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 10134a8:	e0bffe0b 	ldhu	r2,-8(fp)
 10134ac:	1004c03a 	cmpne	r2,r2,zero
 10134b0:	103ff61e 	bne	r2,zero,101348c <alt_up_ps2_clear_fifo+0x1c>
}
 10134b4:	e037883a 	mov	sp,fp
 10134b8:	dfc00117 	ldw	ra,4(sp)
 10134bc:	df000017 	ldw	fp,0(sp)
 10134c0:	dec00204 	addi	sp,sp,8
 10134c4:	f800283a 	ret

010134c8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 10134c8:	defff704 	addi	sp,sp,-36
 10134cc:	dfc00815 	stw	ra,32(sp)
 10134d0:	df000715 	stw	fp,28(sp)
 10134d4:	df000704 	addi	fp,sp,28
 10134d8:	e13ffc15 	stw	r4,-16(fp)
 10134dc:	e17ffd15 	stw	r5,-12(fp)
 10134e0:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 10134e4:	e0bffc17 	ldw	r2,-16(fp)
 10134e8:	10800017 	ldw	r2,0(r2)
 10134ec:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 10134f0:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 10134f4:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 10134f8:	e0fff917 	ldw	r3,-28(fp)
 10134fc:	e0bffe17 	ldw	r2,-8(fp)
 1013500:	18bffd16 	blt	r3,r2,10134f8 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 1013504:	e17ffd17 	ldw	r5,-12(fp)
 1013508:	e0bffd17 	ldw	r2,-12(fp)
 101350c:	10800044 	addi	r2,r2,1
 1013510:	e0bffd15 	stw	r2,-12(fp)
 1013514:	e13ffb17 	ldw	r4,-20(fp)
 1013518:	10133440 	call	1013344 <alt_up_ps2_read_data_byte_timeout>
 101351c:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 1013520:	e0bffa17 	ldw	r2,-24(fp)
 1013524:	1005003a 	cmpeq	r2,r2,zero
 1013528:	1000031e 	bne	r2,zero,1013538 <alt_up_ps2_read_fd+0x70>
			return count;
 101352c:	e0bff917 	ldw	r2,-28(fp)
 1013530:	e0bfff15 	stw	r2,-4(fp)
 1013534:	00000506 	br	101354c <alt_up_ps2_read_fd+0x84>
		count++;
 1013538:	e0bff917 	ldw	r2,-28(fp)
 101353c:	10800044 	addi	r2,r2,1
 1013540:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 1013544:	e0bff917 	ldw	r2,-28(fp)
 1013548:	e0bfff15 	stw	r2,-4(fp)
 101354c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013550:	e037883a 	mov	sp,fp
 1013554:	dfc00117 	ldw	ra,4(sp)
 1013558:	df000017 	ldw	fp,0(sp)
 101355c:	dec00204 	addi	sp,sp,8
 1013560:	f800283a 	ret

01013564 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1013564:	defff704 	addi	sp,sp,-36
 1013568:	dfc00815 	stw	ra,32(sp)
 101356c:	df000715 	stw	fp,28(sp)
 1013570:	df000704 	addi	fp,sp,28
 1013574:	e13ffc15 	stw	r4,-16(fp)
 1013578:	e17ffd15 	stw	r5,-12(fp)
 101357c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 1013580:	e0bffc17 	ldw	r2,-16(fp)
 1013584:	10800017 	ldw	r2,0(r2)
 1013588:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 101358c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 1013590:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 1013594:	00001206 	br	10135e0 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 1013598:	e0bffd17 	ldw	r2,-12(fp)
 101359c:	10800003 	ldbu	r2,0(r2)
 10135a0:	11403fcc 	andi	r5,r2,255
 10135a4:	e0bffd17 	ldw	r2,-12(fp)
 10135a8:	10800044 	addi	r2,r2,1
 10135ac:	e0bffd15 	stw	r2,-12(fp)
 10135b0:	e13ffb17 	ldw	r4,-20(fp)
 10135b4:	10131f00 	call	10131f0 <alt_up_ps2_write_data_byte>
 10135b8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 10135bc:	e0bffa17 	ldw	r2,-24(fp)
 10135c0:	1005003a 	cmpeq	r2,r2,zero
 10135c4:	1000031e 	bne	r2,zero,10135d4 <alt_up_ps2_write_fd+0x70>
			return count;
 10135c8:	e0bff917 	ldw	r2,-28(fp)
 10135cc:	e0bfff15 	stw	r2,-4(fp)
 10135d0:	00000806 	br	10135f4 <alt_up_ps2_write_fd+0x90>
		count++;
 10135d4:	e0bff917 	ldw	r2,-28(fp)
 10135d8:	10800044 	addi	r2,r2,1
 10135dc:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 10135e0:	e0fff917 	ldw	r3,-28(fp)
 10135e4:	e0bffe17 	ldw	r2,-8(fp)
 10135e8:	18bfeb16 	blt	r3,r2,1013598 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 10135ec:	e0bff917 	ldw	r2,-28(fp)
 10135f0:	e0bfff15 	stw	r2,-4(fp)
 10135f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10135f8:	e037883a 	mov	sp,fp
 10135fc:	dfc00117 	ldw	ra,4(sp)
 1013600:	df000017 	ldw	fp,0(sp)
 1013604:	dec00204 	addi	sp,sp,8
 1013608:	f800283a 	ret

0101360c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 101360c:	defffc04 	addi	sp,sp,-16
 1013610:	dfc00315 	stw	ra,12(sp)
 1013614:	df000215 	stw	fp,8(sp)
 1013618:	df000204 	addi	fp,sp,8
 101361c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 1013620:	e13fff17 	ldw	r4,-4(fp)
 1013624:	01404074 	movhi	r5,257
 1013628:	295cf104 	addi	r5,r5,29636
 101362c:	1013e500 	call	1013e50 <alt_find_dev>
 1013630:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1013634:	e0bffe17 	ldw	r2,-8(fp)
}
 1013638:	e037883a 	mov	sp,fp
 101363c:	dfc00117 	ldw	ra,4(sp)
 1013640:	df000017 	ldw	fp,0(sp)
 1013644:	dec00204 	addi	sp,sp,8
 1013648:	f800283a 	ret

0101364c <alt_up_usb_open_dev>:
#include <priv/alt_file.h>

#include "altera_up_avalon_usb.h"
#include "altera_up_avalon_usb_regs.h"

alt_up_usb_dev* alt_up_usb_open_dev(const char* name) {
 101364c:	defffc04 	addi	sp,sp,-16
 1013650:	dfc00315 	stw	ra,12(sp)
 1013654:	df000215 	stw	fp,8(sp)
 1013658:	df000204 	addi	fp,sp,8
 101365c:	e13fff15 	stw	r4,-4(fp)
    // find the device from the device list 
    // (see altera_hal/HAL/inc/priv/alt_file.h 
    // and altera_hal/HAL/src/alt_find_dev.c 
    // for details)
    alt_up_usb_dev *dev = (alt_up_usb_dev*) alt_find_dev(name, &alt_dev_list);
 1013660:	e13fff17 	ldw	r4,-4(fp)
 1013664:	01404074 	movhi	r5,257
 1013668:	295cf104 	addi	r5,r5,29636
 101366c:	1013e500 	call	1013e50 <alt_find_dev>
 1013670:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 1013674:	e0bffe17 	ldw	r2,-8(fp)
}
 1013678:	e037883a 	mov	sp,fp
 101367c:	dfc00117 	ldw	ra,4(sp)
 1013680:	df000017 	ldw	fp,0(sp)
 1013684:	dec00204 	addi	sp,sp,8
 1013688:	f800283a 	ret

0101368c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 101368c:	defffc04 	addi	sp,sp,-16
 1013690:	dfc00315 	stw	ra,12(sp)
 1013694:	df000215 	stw	fp,8(sp)
 1013698:	df000204 	addi	fp,sp,8
 101369c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 10136a0:	e0bfff17 	ldw	r2,-4(fp)
 10136a4:	10800217 	ldw	r2,8(r2)
 10136a8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 10136ac:	00000c06 	br	10136e0 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 10136b0:	e13ffe17 	ldw	r4,-8(fp)
 10136b4:	01404074 	movhi	r5,257
 10136b8:	29552804 	addi	r5,r5,21664
 10136bc:	10063800 	call	1006380 <strcmp>
 10136c0:	1004c03a 	cmpne	r2,r2,zero
 10136c4:	1000031e 	bne	r2,zero,10136d4 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 10136c8:	e0bffe17 	ldw	r2,-8(fp)
 10136cc:	10000005 	stb	zero,0(r2)
			break;
 10136d0:	00000a06 	br	10136fc <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 10136d4:	e0bffe17 	ldw	r2,-8(fp)
 10136d8:	10800044 	addi	r2,r2,1
 10136dc:	e0bffe15 	stw	r2,-8(fp)
 10136e0:	e0bffe17 	ldw	r2,-8(fp)
 10136e4:	10800003 	ldbu	r2,0(r2)
 10136e8:	10803fcc 	andi	r2,r2,255
 10136ec:	1080201c 	xori	r2,r2,128
 10136f0:	10bfe004 	addi	r2,r2,-128
 10136f4:	1004c03a 	cmpne	r2,r2,zero
 10136f8:	103fed1e 	bne	r2,zero,10136b0 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 10136fc:	e037883a 	mov	sp,fp
 1013700:	dfc00117 	ldw	ra,4(sp)
 1013704:	df000017 	ldw	fp,0(sp)
 1013708:	dec00204 	addi	sp,sp,8
 101370c:	f800283a 	ret

01013710 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1013710:	defffc04 	addi	sp,sp,-16
 1013714:	dfc00315 	stw	ra,12(sp)
 1013718:	df000215 	stw	fp,8(sp)
 101371c:	df000204 	addi	fp,sp,8
 1013720:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 1013724:	e13fff17 	ldw	r4,-4(fp)
 1013728:	01404074 	movhi	r5,257
 101372c:	295cf104 	addi	r5,r5,29636
 1013730:	1013e500 	call	1013e50 <alt_find_dev>
 1013734:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1013738:	e0bffe17 	ldw	r2,-8(fp)
}
 101373c:	e037883a 	mov	sp,fp
 1013740:	dfc00117 	ldw	ra,4(sp)
 1013744:	df000017 	ldw	fp,0(sp)
 1013748:	dec00204 	addi	sp,sp,8
 101374c:	f800283a 	ret

01013750 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 1013750:	defff904 	addi	sp,sp,-28
 1013754:	df000615 	stw	fp,24(sp)
 1013758:	df000604 	addi	fp,sp,24
 101375c:	e13ffb15 	stw	r4,-20(fp)
 1013760:	e1bffd15 	stw	r6,-12(fp)
 1013764:	e1fffe15 	stw	r7,-8(fp)
 1013768:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 101376c:	e0bffb17 	ldw	r2,-20(fp)
 1013770:	10c00c17 	ldw	r3,48(r2)
 1013774:	e0bffd17 	ldw	r2,-12(fp)
 1013778:	10c0042e 	bgeu	r2,r3,101378c <alt_up_char_buffer_draw+0x3c>
 101377c:	e0bffb17 	ldw	r2,-20(fp)
 1013780:	10c00d17 	ldw	r3,52(r2)
 1013784:	e0bffe17 	ldw	r2,-8(fp)
 1013788:	10c00336 	bltu	r2,r3,1013798 <alt_up_char_buffer_draw+0x48>
		return -1;
 101378c:	00bfffc4 	movi	r2,-1
 1013790:	e0bfff15 	stw	r2,-4(fp)
 1013794:	00001d06 	br	101380c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1013798:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 101379c:	e0bffb17 	ldw	r2,-20(fp)
 10137a0:	10c00f17 	ldw	r3,60(r2)
 10137a4:	e0bffd17 	ldw	r2,-12(fp)
 10137a8:	1886703a 	and	r3,r3,r2
 10137ac:	e0bffb17 	ldw	r2,-20(fp)
 10137b0:	10800e17 	ldw	r2,56(r2)
 10137b4:	1886983a 	sll	r3,r3,r2
 10137b8:	e0bffa17 	ldw	r2,-24(fp)
 10137bc:	10c4b03a 	or	r2,r2,r3
 10137c0:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 10137c4:	e0bffb17 	ldw	r2,-20(fp)
 10137c8:	10c01117 	ldw	r3,68(r2)
 10137cc:	e0bffe17 	ldw	r2,-8(fp)
 10137d0:	1886703a 	and	r3,r3,r2
 10137d4:	e0bffb17 	ldw	r2,-20(fp)
 10137d8:	10801017 	ldw	r2,64(r2)
 10137dc:	1886983a 	sll	r3,r3,r2
 10137e0:	e0bffa17 	ldw	r2,-24(fp)
 10137e4:	10c4b03a 	or	r2,r2,r3
 10137e8:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 10137ec:	e0bffb17 	ldw	r2,-20(fp)
 10137f0:	10800b17 	ldw	r2,44(r2)
 10137f4:	1007883a 	mov	r3,r2
 10137f8:	e0bffa17 	ldw	r2,-24(fp)
 10137fc:	1885883a 	add	r2,r3,r2
 1013800:	e0fffc03 	ldbu	r3,-16(fp)
 1013804:	10c00025 	stbio	r3,0(r2)

	return 0;
 1013808:	e03fff15 	stw	zero,-4(fp)
 101380c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013810:	e037883a 	mov	sp,fp
 1013814:	df000017 	ldw	fp,0(sp)
 1013818:	dec00104 	addi	sp,sp,4
 101381c:	f800283a 	ret

01013820 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1013820:	defff904 	addi	sp,sp,-28
 1013824:	df000615 	stw	fp,24(sp)
 1013828:	df000604 	addi	fp,sp,24
 101382c:	e13ffb15 	stw	r4,-20(fp)
 1013830:	e17ffc15 	stw	r5,-16(fp)
 1013834:	e1bffd15 	stw	r6,-12(fp)
 1013838:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 101383c:	e0bffb17 	ldw	r2,-20(fp)
 1013840:	10c00c17 	ldw	r3,48(r2)
 1013844:	e0bffd17 	ldw	r2,-12(fp)
 1013848:	10c0042e 	bgeu	r2,r3,101385c <alt_up_char_buffer_string+0x3c>
 101384c:	e0bffb17 	ldw	r2,-20(fp)
 1013850:	10c00d17 	ldw	r3,52(r2)
 1013854:	e0bffe17 	ldw	r2,-8(fp)
 1013858:	10c00336 	bltu	r2,r3,1013868 <alt_up_char_buffer_string+0x48>
		return -1;
 101385c:	00bfffc4 	movi	r2,-1
 1013860:	e0bfff15 	stw	r2,-4(fp)
 1013864:	00002e06 	br	1013920 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1013868:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 101386c:	e0bffb17 	ldw	r2,-20(fp)
 1013870:	10801017 	ldw	r2,64(r2)
 1013874:	1007883a 	mov	r3,r2
 1013878:	e0bffe17 	ldw	r2,-8(fp)
 101387c:	10c6983a 	sll	r3,r2,r3
 1013880:	e0bffd17 	ldw	r2,-12(fp)
 1013884:	1885883a 	add	r2,r3,r2
 1013888:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 101388c:	00001c06 	br	1013900 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 1013890:	e0bffb17 	ldw	r2,-20(fp)
 1013894:	10800b17 	ldw	r2,44(r2)
 1013898:	1007883a 	mov	r3,r2
 101389c:	e0bffa17 	ldw	r2,-24(fp)
 10138a0:	1889883a 	add	r4,r3,r2
 10138a4:	e0bffc17 	ldw	r2,-16(fp)
 10138a8:	10800003 	ldbu	r2,0(r2)
 10138ac:	10c03fcc 	andi	r3,r2,255
 10138b0:	18c0201c 	xori	r3,r3,128
 10138b4:	18ffe004 	addi	r3,r3,-128
 10138b8:	2005883a 	mov	r2,r4
 10138bc:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10138c0:	e0bffc17 	ldw	r2,-16(fp)
 10138c4:	10800044 	addi	r2,r2,1
 10138c8:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 10138cc:	e0bffd17 	ldw	r2,-12(fp)
 10138d0:	10800044 	addi	r2,r2,1
 10138d4:	e0bffd15 	stw	r2,-12(fp)
 10138d8:	e0bffb17 	ldw	r2,-20(fp)
 10138dc:	10c00c17 	ldw	r3,48(r2)
 10138e0:	e0bffd17 	ldw	r2,-12(fp)
 10138e4:	10c00336 	bltu	r2,r3,10138f4 <alt_up_char_buffer_string+0xd4>
			return -1;
 10138e8:	00bfffc4 	movi	r2,-1
 10138ec:	e0bfff15 	stw	r2,-4(fp)
 10138f0:	00000b06 	br	1013920 <alt_up_char_buffer_string+0x100>
		++offset;
 10138f4:	e0bffa17 	ldw	r2,-24(fp)
 10138f8:	10800044 	addi	r2,r2,1
 10138fc:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1013900:	e0bffc17 	ldw	r2,-16(fp)
 1013904:	10800003 	ldbu	r2,0(r2)
 1013908:	10803fcc 	andi	r2,r2,255
 101390c:	1080201c 	xori	r2,r2,128
 1013910:	10bfe004 	addi	r2,r2,-128
 1013914:	1004c03a 	cmpne	r2,r2,zero
 1013918:	103fdd1e 	bne	r2,zero,1013890 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 101391c:	e03fff15 	stw	zero,-4(fp)
 1013920:	e0bfff17 	ldw	r2,-4(fp)
}
 1013924:	e037883a 	mov	sp,fp
 1013928:	df000017 	ldw	fp,0(sp)
 101392c:	dec00104 	addi	sp,sp,4
 1013930:	f800283a 	ret

01013934 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 1013934:	defffe04 	addi	sp,sp,-8
 1013938:	df000115 	stw	fp,4(sp)
 101393c:	df000104 	addi	fp,sp,4
 1013940:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 1013944:	e0bfff17 	ldw	r2,-4(fp)
 1013948:	10800a17 	ldw	r2,40(r2)
 101394c:	10800084 	addi	r2,r2,2
 1013950:	1007883a 	mov	r3,r2
 1013954:	00800044 	movi	r2,1
 1013958:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 101395c:	e0bfff17 	ldw	r2,-4(fp)
 1013960:	10800a17 	ldw	r2,40(r2)
 1013964:	10800084 	addi	r2,r2,2
 1013968:	10800023 	ldbuio	r2,0(r2)
 101396c:	1080004c 	andi	r2,r2,1
 1013970:	10803fcc 	andi	r2,r2,255
 1013974:	1004c03a 	cmpne	r2,r2,zero
 1013978:	103ff81e 	bne	r2,zero,101395c <alt_up_char_buffer_clear+0x28>
	return 0;
 101397c:	0005883a 	mov	r2,zero
}
 1013980:	e037883a 	mov	sp,fp
 1013984:	df000017 	ldw	fp,0(sp)
 1013988:	dec00104 	addi	sp,sp,4
 101398c:	f800283a 	ret

01013990 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1013990:	defff404 	addi	sp,sp,-48
 1013994:	df000b15 	stw	fp,44(sp)
 1013998:	df000b04 	addi	fp,sp,44
 101399c:	e13ffb15 	stw	r4,-20(fp)
 10139a0:	e17ffc15 	stw	r5,-16(fp)
 10139a4:	e1bffd15 	stw	r6,-12(fp)
 10139a8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10139ac:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10139b0:	008040b4 	movhi	r2,258
 10139b4:	10a4e304 	addi	r2,r2,-27764
 10139b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10139bc:	1005003a 	cmpeq	r2,r2,zero
 10139c0:	1000411e 	bne	r2,zero,1013ac8 <alt_alarm_start+0x138>
  {
    if (alarm)
 10139c4:	e0bffb17 	ldw	r2,-20(fp)
 10139c8:	1005003a 	cmpeq	r2,r2,zero
 10139cc:	10003b1e 	bne	r2,zero,1013abc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10139d0:	e0fffb17 	ldw	r3,-20(fp)
 10139d4:	e0bffd17 	ldw	r2,-12(fp)
 10139d8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10139dc:	e0fffb17 	ldw	r3,-20(fp)
 10139e0:	e0bffe17 	ldw	r2,-8(fp)
 10139e4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10139e8:	0005303a 	rdctl	r2,status
 10139ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10139f0:	e0fff817 	ldw	r3,-32(fp)
 10139f4:	00bfff84 	movi	r2,-2
 10139f8:	1884703a 	and	r2,r3,r2
 10139fc:	1001703a 	wrctl	status,r2
  
  return context;
 1013a00:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1013a04:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1013a08:	008040b4 	movhi	r2,258
 1013a0c:	10a4e404 	addi	r2,r2,-27760
 1013a10:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1013a14:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1013a18:	e0fffc17 	ldw	r3,-16(fp)
 1013a1c:	e0bff917 	ldw	r2,-28(fp)
 1013a20:	1885883a 	add	r2,r3,r2
 1013a24:	10c00044 	addi	r3,r2,1
 1013a28:	e0bffb17 	ldw	r2,-20(fp)
 1013a2c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1013a30:	e0bffb17 	ldw	r2,-20(fp)
 1013a34:	10c00217 	ldw	r3,8(r2)
 1013a38:	e0bff917 	ldw	r2,-28(fp)
 1013a3c:	1880042e 	bgeu	r3,r2,1013a50 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1013a40:	e0fffb17 	ldw	r3,-20(fp)
 1013a44:	00800044 	movi	r2,1
 1013a48:	18800405 	stb	r2,16(r3)
 1013a4c:	00000206 	br	1013a58 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1013a50:	e0bffb17 	ldw	r2,-20(fp)
 1013a54:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1013a58:	e0fffb17 	ldw	r3,-20(fp)
 1013a5c:	00804074 	movhi	r2,257
 1013a60:	109cf704 	addi	r2,r2,29660
 1013a64:	e0bff615 	stw	r2,-40(fp)
 1013a68:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1013a6c:	e0fff717 	ldw	r3,-36(fp)
 1013a70:	e0bff617 	ldw	r2,-40(fp)
 1013a74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1013a78:	e0bff617 	ldw	r2,-40(fp)
 1013a7c:	10c00017 	ldw	r3,0(r2)
 1013a80:	e0bff717 	ldw	r2,-36(fp)
 1013a84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1013a88:	e0bff617 	ldw	r2,-40(fp)
 1013a8c:	10c00017 	ldw	r3,0(r2)
 1013a90:	e0bff717 	ldw	r2,-36(fp)
 1013a94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1013a98:	e0fff617 	ldw	r3,-40(fp)
 1013a9c:	e0bff717 	ldw	r2,-36(fp)
 1013aa0:	18800015 	stw	r2,0(r3)
 1013aa4:	e0bffa17 	ldw	r2,-24(fp)
 1013aa8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013aac:	e0bff517 	ldw	r2,-44(fp)
 1013ab0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1013ab4:	e03fff15 	stw	zero,-4(fp)
 1013ab8:	00000506 	br	1013ad0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1013abc:	00bffa84 	movi	r2,-22
 1013ac0:	e0bfff15 	stw	r2,-4(fp)
 1013ac4:	00000206 	br	1013ad0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1013ac8:	00bfde84 	movi	r2,-134
 1013acc:	e0bfff15 	stw	r2,-4(fp)
 1013ad0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1013ad4:	e037883a 	mov	sp,fp
 1013ad8:	df000017 	ldw	fp,0(sp)
 1013adc:	dec00104 	addi	sp,sp,4
 1013ae0:	f800283a 	ret

01013ae4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1013ae4:	defffa04 	addi	sp,sp,-24
 1013ae8:	dfc00515 	stw	ra,20(sp)
 1013aec:	df000415 	stw	fp,16(sp)
 1013af0:	df000404 	addi	fp,sp,16
 1013af4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1013af8:	008000c4 	movi	r2,3
 1013afc:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 1013b00:	e0fffc17 	ldw	r3,-16(fp)
 1013b04:	008003f4 	movhi	r2,15
 1013b08:	10909004 	addi	r2,r2,16960
 1013b0c:	188b383a 	mul	r5,r3,r2
 1013b10:	0100bef4 	movhi	r4,763
 1013b14:	213c2004 	addi	r4,r4,-3968
 1013b18:	10103dc0 	call	10103dc <__udivsi3>
 1013b1c:	100b883a 	mov	r5,r2
 1013b20:	01200034 	movhi	r4,32768
 1013b24:	213fffc4 	addi	r4,r4,-1
 1013b28:	10103dc0 	call	10103dc <__udivsi3>
 1013b2c:	100b883a 	mov	r5,r2
 1013b30:	e13fff17 	ldw	r4,-4(fp)
 1013b34:	10103dc0 	call	10103dc <__udivsi3>
 1013b38:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1013b3c:	e0bffd17 	ldw	r2,-12(fp)
 1013b40:	1005003a 	cmpeq	r2,r2,zero
 1013b44:	1000281e 	bne	r2,zero,1013be8 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 1013b48:	e03ffe15 	stw	zero,-8(fp)
 1013b4c:	00001606 	br	1013ba8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1013b50:	00a00034 	movhi	r2,32768
 1013b54:	10bfffc4 	addi	r2,r2,-1
 1013b58:	10bfffc4 	addi	r2,r2,-1
 1013b5c:	103ffe1e 	bne	r2,zero,1013b58 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1013b60:	e0fffc17 	ldw	r3,-16(fp)
 1013b64:	008003f4 	movhi	r2,15
 1013b68:	10909004 	addi	r2,r2,16960
 1013b6c:	188b383a 	mul	r5,r3,r2
 1013b70:	0100bef4 	movhi	r4,763
 1013b74:	213c2004 	addi	r4,r4,-3968
 1013b78:	10103dc0 	call	10103dc <__udivsi3>
 1013b7c:	100b883a 	mov	r5,r2
 1013b80:	01200034 	movhi	r4,32768
 1013b84:	213fffc4 	addi	r4,r4,-1
 1013b88:	10103dc0 	call	10103dc <__udivsi3>
 1013b8c:	1007883a 	mov	r3,r2
 1013b90:	e0bfff17 	ldw	r2,-4(fp)
 1013b94:	10c5c83a 	sub	r2,r2,r3
 1013b98:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1013b9c:	e0bffe17 	ldw	r2,-8(fp)
 1013ba0:	10800044 	addi	r2,r2,1
 1013ba4:	e0bffe15 	stw	r2,-8(fp)
 1013ba8:	e0fffe17 	ldw	r3,-8(fp)
 1013bac:	e0bffd17 	ldw	r2,-12(fp)
 1013bb0:	18bfe716 	blt	r3,r2,1013b50 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1013bb4:	e0fffc17 	ldw	r3,-16(fp)
 1013bb8:	008003f4 	movhi	r2,15
 1013bbc:	10909004 	addi	r2,r2,16960
 1013bc0:	188b383a 	mul	r5,r3,r2
 1013bc4:	0100bef4 	movhi	r4,763
 1013bc8:	213c2004 	addi	r4,r4,-3968
 1013bcc:	10103dc0 	call	10103dc <__udivsi3>
 1013bd0:	1007883a 	mov	r3,r2
 1013bd4:	e0bfff17 	ldw	r2,-4(fp)
 1013bd8:	1885383a 	mul	r2,r3,r2
 1013bdc:	10bfffc4 	addi	r2,r2,-1
 1013be0:	103ffe1e 	bne	r2,zero,1013bdc <alt_busy_sleep+0xf8>
 1013be4:	00000c06 	br	1013c18 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1013be8:	e0fffc17 	ldw	r3,-16(fp)
 1013bec:	008003f4 	movhi	r2,15
 1013bf0:	10909004 	addi	r2,r2,16960
 1013bf4:	188b383a 	mul	r5,r3,r2
 1013bf8:	0100bef4 	movhi	r4,763
 1013bfc:	213c2004 	addi	r4,r4,-3968
 1013c00:	10103dc0 	call	10103dc <__udivsi3>
 1013c04:	1007883a 	mov	r3,r2
 1013c08:	e0bfff17 	ldw	r2,-4(fp)
 1013c0c:	1885383a 	mul	r2,r3,r2
 1013c10:	10bfffc4 	addi	r2,r2,-1
 1013c14:	00bffe16 	blt	zero,r2,1013c10 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1013c18:	0005883a 	mov	r2,zero
}
 1013c1c:	e037883a 	mov	sp,fp
 1013c20:	dfc00117 	ldw	ra,4(sp)
 1013c24:	df000017 	ldw	fp,0(sp)
 1013c28:	dec00204 	addi	sp,sp,8
 1013c2c:	f800283a 	ret

01013c30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1013c30:	defffe04 	addi	sp,sp,-8
 1013c34:	df000115 	stw	fp,4(sp)
 1013c38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1013c3c:	e03fff15 	stw	zero,-4(fp)
 1013c40:	00000506 	br	1013c58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1013c44:	e0bfff17 	ldw	r2,-4(fp)
 1013c48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1013c4c:	e0bfff17 	ldw	r2,-4(fp)
 1013c50:	10800804 	addi	r2,r2,32
 1013c54:	e0bfff15 	stw	r2,-4(fp)
 1013c58:	e0bfff17 	ldw	r2,-4(fp)
 1013c5c:	10820030 	cmpltui	r2,r2,2048
 1013c60:	103ff81e 	bne	r2,zero,1013c44 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1013c64:	e037883a 	mov	sp,fp
 1013c68:	df000017 	ldw	fp,0(sp)
 1013c6c:	dec00104 	addi	sp,sp,4
 1013c70:	f800283a 	ret

01013c74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1013c74:	defff904 	addi	sp,sp,-28
 1013c78:	dfc00615 	stw	ra,24(sp)
 1013c7c:	df000515 	stw	fp,20(sp)
 1013c80:	df000504 	addi	fp,sp,20
 1013c84:	e13ffd15 	stw	r4,-12(fp)
 1013c88:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1013c8c:	e0bffd17 	ldw	r2,-12(fp)
 1013c90:	1005003a 	cmpeq	r2,r2,zero
 1013c94:	1000041e 	bne	r2,zero,1013ca8 <alt_dev_llist_insert+0x34>
 1013c98:	e0bffd17 	ldw	r2,-12(fp)
 1013c9c:	10800217 	ldw	r2,8(r2)
 1013ca0:	1004c03a 	cmpne	r2,r2,zero
 1013ca4:	1000071e 	bne	r2,zero,1013cc4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1013ca8:	1013d280 	call	1013d28 <alt_get_errno>
 1013cac:	1007883a 	mov	r3,r2
 1013cb0:	00800584 	movi	r2,22
 1013cb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1013cb8:	00bffa84 	movi	r2,-22
 1013cbc:	e0bfff15 	stw	r2,-4(fp)
 1013cc0:	00001306 	br	1013d10 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1013cc4:	e0fffd17 	ldw	r3,-12(fp)
 1013cc8:	e0bffe17 	ldw	r2,-8(fp)
 1013ccc:	e0bffb15 	stw	r2,-20(fp)
 1013cd0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1013cd4:	e0fffc17 	ldw	r3,-16(fp)
 1013cd8:	e0bffb17 	ldw	r2,-20(fp)
 1013cdc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1013ce0:	e0bffb17 	ldw	r2,-20(fp)
 1013ce4:	10c00017 	ldw	r3,0(r2)
 1013ce8:	e0bffc17 	ldw	r2,-16(fp)
 1013cec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1013cf0:	e0bffb17 	ldw	r2,-20(fp)
 1013cf4:	10c00017 	ldw	r3,0(r2)
 1013cf8:	e0bffc17 	ldw	r2,-16(fp)
 1013cfc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1013d00:	e0fffb17 	ldw	r3,-20(fp)
 1013d04:	e0bffc17 	ldw	r2,-16(fp)
 1013d08:	18800015 	stw	r2,0(r3)

  return 0;  
 1013d0c:	e03fff15 	stw	zero,-4(fp)
 1013d10:	e0bfff17 	ldw	r2,-4(fp)
}
 1013d14:	e037883a 	mov	sp,fp
 1013d18:	dfc00117 	ldw	ra,4(sp)
 1013d1c:	df000017 	ldw	fp,0(sp)
 1013d20:	dec00204 	addi	sp,sp,8
 1013d24:	f800283a 	ret

01013d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1013d28:	defffd04 	addi	sp,sp,-12
 1013d2c:	dfc00215 	stw	ra,8(sp)
 1013d30:	df000115 	stw	fp,4(sp)
 1013d34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1013d38:	00804074 	movhi	r2,257
 1013d3c:	109cf404 	addi	r2,r2,29648
 1013d40:	10800017 	ldw	r2,0(r2)
 1013d44:	1005003a 	cmpeq	r2,r2,zero
 1013d48:	1000061e 	bne	r2,zero,1013d64 <alt_get_errno+0x3c>
 1013d4c:	00804074 	movhi	r2,257
 1013d50:	109cf404 	addi	r2,r2,29648
 1013d54:	10800017 	ldw	r2,0(r2)
 1013d58:	103ee83a 	callr	r2
 1013d5c:	e0bfff15 	stw	r2,-4(fp)
 1013d60:	00000306 	br	1013d70 <alt_get_errno+0x48>
 1013d64:	008040b4 	movhi	r2,258
 1013d68:	10a4d904 	addi	r2,r2,-27804
 1013d6c:	e0bfff15 	stw	r2,-4(fp)
 1013d70:	e0bfff17 	ldw	r2,-4(fp)
}
 1013d74:	e037883a 	mov	sp,fp
 1013d78:	dfc00117 	ldw	ra,4(sp)
 1013d7c:	df000017 	ldw	fp,0(sp)
 1013d80:	dec00204 	addi	sp,sp,8
 1013d84:	f800283a 	ret

01013d88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1013d88:	defffd04 	addi	sp,sp,-12
 1013d8c:	dfc00215 	stw	ra,8(sp)
 1013d90:	df000115 	stw	fp,4(sp)
 1013d94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1013d98:	00bfff04 	movi	r2,-4
 1013d9c:	00c04074 	movhi	r3,257
 1013da0:	18d24004 	addi	r3,r3,18688
 1013da4:	1885883a 	add	r2,r3,r2
 1013da8:	e0bfff15 	stw	r2,-4(fp)
 1013dac:	00000606 	br	1013dc8 <_do_ctors+0x40>
        (*ctor) (); 
 1013db0:	e0bfff17 	ldw	r2,-4(fp)
 1013db4:	10800017 	ldw	r2,0(r2)
 1013db8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1013dbc:	e0bfff17 	ldw	r2,-4(fp)
 1013dc0:	10bfff04 	addi	r2,r2,-4
 1013dc4:	e0bfff15 	stw	r2,-4(fp)
 1013dc8:	e0ffff17 	ldw	r3,-4(fp)
 1013dcc:	00804074 	movhi	r2,257
 1013dd0:	10923f04 	addi	r2,r2,18684
 1013dd4:	18bff62e 	bgeu	r3,r2,1013db0 <_do_ctors+0x28>
        (*ctor) (); 
}
 1013dd8:	e037883a 	mov	sp,fp
 1013ddc:	dfc00117 	ldw	ra,4(sp)
 1013de0:	df000017 	ldw	fp,0(sp)
 1013de4:	dec00204 	addi	sp,sp,8
 1013de8:	f800283a 	ret

01013dec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1013dec:	defffd04 	addi	sp,sp,-12
 1013df0:	dfc00215 	stw	ra,8(sp)
 1013df4:	df000115 	stw	fp,4(sp)
 1013df8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1013dfc:	00bfff04 	movi	r2,-4
 1013e00:	00c04074 	movhi	r3,257
 1013e04:	18d24004 	addi	r3,r3,18688
 1013e08:	1885883a 	add	r2,r3,r2
 1013e0c:	e0bfff15 	stw	r2,-4(fp)
 1013e10:	00000606 	br	1013e2c <_do_dtors+0x40>
        (*dtor) (); 
 1013e14:	e0bfff17 	ldw	r2,-4(fp)
 1013e18:	10800017 	ldw	r2,0(r2)
 1013e1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1013e20:	e0bfff17 	ldw	r2,-4(fp)
 1013e24:	10bfff04 	addi	r2,r2,-4
 1013e28:	e0bfff15 	stw	r2,-4(fp)
 1013e2c:	e0ffff17 	ldw	r3,-4(fp)
 1013e30:	00804074 	movhi	r2,257
 1013e34:	10924004 	addi	r2,r2,18688
 1013e38:	18bff62e 	bgeu	r3,r2,1013e14 <_do_dtors+0x28>
        (*dtor) (); 
}
 1013e3c:	e037883a 	mov	sp,fp
 1013e40:	dfc00117 	ldw	ra,4(sp)
 1013e44:	df000017 	ldw	fp,0(sp)
 1013e48:	dec00204 	addi	sp,sp,8
 1013e4c:	f800283a 	ret

01013e50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1013e50:	defff904 	addi	sp,sp,-28
 1013e54:	dfc00615 	stw	ra,24(sp)
 1013e58:	df000515 	stw	fp,20(sp)
 1013e5c:	df000504 	addi	fp,sp,20
 1013e60:	e13ffd15 	stw	r4,-12(fp)
 1013e64:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1013e68:	e0bffe17 	ldw	r2,-8(fp)
 1013e6c:	10800017 	ldw	r2,0(r2)
 1013e70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1013e74:	e13ffd17 	ldw	r4,-12(fp)
 1013e78:	10064c80 	call	10064c8 <strlen>
 1013e7c:	10800044 	addi	r2,r2,1
 1013e80:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1013e84:	00000d06 	br	1013ebc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1013e88:	e0bffc17 	ldw	r2,-16(fp)
 1013e8c:	11000217 	ldw	r4,8(r2)
 1013e90:	e1bffb17 	ldw	r6,-20(fp)
 1013e94:	e17ffd17 	ldw	r5,-12(fp)
 1013e98:	10147540 	call	1014754 <memcmp>
 1013e9c:	1004c03a 	cmpne	r2,r2,zero
 1013ea0:	1000031e 	bne	r2,zero,1013eb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1013ea4:	e0bffc17 	ldw	r2,-16(fp)
 1013ea8:	e0bfff15 	stw	r2,-4(fp)
 1013eac:	00000706 	br	1013ecc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1013eb0:	e0bffc17 	ldw	r2,-16(fp)
 1013eb4:	10800017 	ldw	r2,0(r2)
 1013eb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1013ebc:	e0fffe17 	ldw	r3,-8(fp)
 1013ec0:	e0bffc17 	ldw	r2,-16(fp)
 1013ec4:	10fff01e 	bne	r2,r3,1013e88 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1013ec8:	e03fff15 	stw	zero,-4(fp)
 1013ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 1013ed0:	e037883a 	mov	sp,fp
 1013ed4:	dfc00117 	ldw	ra,4(sp)
 1013ed8:	df000017 	ldw	fp,0(sp)
 1013edc:	dec00204 	addi	sp,sp,8
 1013ee0:	f800283a 	ret

01013ee4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1013ee4:	defffe04 	addi	sp,sp,-8
 1013ee8:	dfc00115 	stw	ra,4(sp)
 1013eec:	df000015 	stw	fp,0(sp)
 1013ef0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1013ef4:	0009883a 	mov	r4,zero
 1013ef8:	01440004 	movi	r5,4096
 1013efc:	10146b00 	call	10146b0 <alt_icache_flush>
#endif
}
 1013f00:	e037883a 	mov	sp,fp
 1013f04:	dfc00117 	ldw	ra,4(sp)
 1013f08:	df000017 	ldw	fp,0(sp)
 1013f0c:	dec00204 	addi	sp,sp,8
 1013f10:	f800283a 	ret

01013f14 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1013f14:	defff904 	addi	sp,sp,-28
 1013f18:	dfc00615 	stw	ra,24(sp)
 1013f1c:	df000515 	stw	fp,20(sp)
 1013f20:	df000504 	addi	fp,sp,20
 1013f24:	e13ffc15 	stw	r4,-16(fp)
 1013f28:	e17ffd15 	stw	r5,-12(fp)
 1013f2c:	e1bffe15 	stw	r6,-8(fp)
 1013f30:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1013f34:	e13ffd17 	ldw	r4,-12(fp)
 1013f38:	e17ffe17 	ldw	r5,-8(fp)
 1013f3c:	e1bfff17 	ldw	r6,-4(fp)
 1013f40:	101412c0 	call	101412c <open>
 1013f44:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1013f48:	e0bffb17 	ldw	r2,-20(fp)
 1013f4c:	1004803a 	cmplt	r2,r2,zero
 1013f50:	10001c1e 	bne	r2,zero,1013fc4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1013f54:	e0bffb17 	ldw	r2,-20(fp)
 1013f58:	00c04074 	movhi	r3,257
 1013f5c:	18d7eb04 	addi	r3,r3,24492
 1013f60:	10800324 	muli	r2,r2,12
 1013f64:	10c5883a 	add	r2,r2,r3
 1013f68:	10c00017 	ldw	r3,0(r2)
 1013f6c:	e0bffc17 	ldw	r2,-16(fp)
 1013f70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1013f74:	e0bffb17 	ldw	r2,-20(fp)
 1013f78:	00c04074 	movhi	r3,257
 1013f7c:	18d7eb04 	addi	r3,r3,24492
 1013f80:	10800324 	muli	r2,r2,12
 1013f84:	10c5883a 	add	r2,r2,r3
 1013f88:	10800104 	addi	r2,r2,4
 1013f8c:	10c00017 	ldw	r3,0(r2)
 1013f90:	e0bffc17 	ldw	r2,-16(fp)
 1013f94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1013f98:	e0bffb17 	ldw	r2,-20(fp)
 1013f9c:	00c04074 	movhi	r3,257
 1013fa0:	18d7eb04 	addi	r3,r3,24492
 1013fa4:	10800324 	muli	r2,r2,12
 1013fa8:	10c5883a 	add	r2,r2,r3
 1013fac:	10800204 	addi	r2,r2,8
 1013fb0:	10c00017 	ldw	r3,0(r2)
 1013fb4:	e0bffc17 	ldw	r2,-16(fp)
 1013fb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1013fbc:	e13ffb17 	ldw	r4,-20(fp)
 1013fc0:	101163c0 	call	101163c <alt_release_fd>
  }
} 
 1013fc4:	e037883a 	mov	sp,fp
 1013fc8:	dfc00117 	ldw	ra,4(sp)
 1013fcc:	df000017 	ldw	fp,0(sp)
 1013fd0:	dec00204 	addi	sp,sp,8
 1013fd4:	f800283a 	ret

01013fd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1013fd8:	defffb04 	addi	sp,sp,-20
 1013fdc:	dfc00415 	stw	ra,16(sp)
 1013fe0:	df000315 	stw	fp,12(sp)
 1013fe4:	df000304 	addi	fp,sp,12
 1013fe8:	e13ffd15 	stw	r4,-12(fp)
 1013fec:	e17ffe15 	stw	r5,-8(fp)
 1013ff0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1013ff4:	01004074 	movhi	r4,257
 1013ff8:	2117ee04 	addi	r4,r4,24504
 1013ffc:	e17ffd17 	ldw	r5,-12(fp)
 1014000:	01800044 	movi	r6,1
 1014004:	01c07fc4 	movi	r7,511
 1014008:	1013f140 	call	1013f14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 101400c:	01004074 	movhi	r4,257
 1014010:	2117eb04 	addi	r4,r4,24492
 1014014:	e17ffe17 	ldw	r5,-8(fp)
 1014018:	000d883a 	mov	r6,zero
 101401c:	01c07fc4 	movi	r7,511
 1014020:	1013f140 	call	1013f14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1014024:	01004074 	movhi	r4,257
 1014028:	2117f104 	addi	r4,r4,24516
 101402c:	e17fff17 	ldw	r5,-4(fp)
 1014030:	01800044 	movi	r6,1
 1014034:	01c07fc4 	movi	r7,511
 1014038:	1013f140 	call	1013f14 <alt_open_fd>
}  
 101403c:	e037883a 	mov	sp,fp
 1014040:	dfc00117 	ldw	ra,4(sp)
 1014044:	df000017 	ldw	fp,0(sp)
 1014048:	dec00204 	addi	sp,sp,8
 101404c:	f800283a 	ret

01014050 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1014050:	defffc04 	addi	sp,sp,-16
 1014054:	df000315 	stw	fp,12(sp)
 1014058:	df000304 	addi	fp,sp,12
 101405c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1014060:	e0bffe17 	ldw	r2,-8(fp)
 1014064:	10800217 	ldw	r2,8(r2)
 1014068:	10d00034 	orhi	r3,r2,16384
 101406c:	e0bffe17 	ldw	r2,-8(fp)
 1014070:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1014074:	e03ffd15 	stw	zero,-12(fp)
 1014078:	00002006 	br	10140fc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 101407c:	e0bffd17 	ldw	r2,-12(fp)
 1014080:	00c04074 	movhi	r3,257
 1014084:	18d7eb04 	addi	r3,r3,24492
 1014088:	10800324 	muli	r2,r2,12
 101408c:	10c5883a 	add	r2,r2,r3
 1014090:	10c00017 	ldw	r3,0(r2)
 1014094:	e0bffe17 	ldw	r2,-8(fp)
 1014098:	10800017 	ldw	r2,0(r2)
 101409c:	1880141e 	bne	r3,r2,10140f0 <alt_file_locked+0xa0>
 10140a0:	e0bffd17 	ldw	r2,-12(fp)
 10140a4:	00c04074 	movhi	r3,257
 10140a8:	18d7eb04 	addi	r3,r3,24492
 10140ac:	10800324 	muli	r2,r2,12
 10140b0:	10c5883a 	add	r2,r2,r3
 10140b4:	10800204 	addi	r2,r2,8
 10140b8:	10800017 	ldw	r2,0(r2)
 10140bc:	1004403a 	cmpge	r2,r2,zero
 10140c0:	10000b1e 	bne	r2,zero,10140f0 <alt_file_locked+0xa0>
 10140c4:	e0bffd17 	ldw	r2,-12(fp)
 10140c8:	10800324 	muli	r2,r2,12
 10140cc:	1007883a 	mov	r3,r2
 10140d0:	00804074 	movhi	r2,257
 10140d4:	1097eb04 	addi	r2,r2,24492
 10140d8:	1887883a 	add	r3,r3,r2
 10140dc:	e0bffe17 	ldw	r2,-8(fp)
 10140e0:	18800326 	beq	r3,r2,10140f0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10140e4:	00bffcc4 	movi	r2,-13
 10140e8:	e0bfff15 	stw	r2,-4(fp)
 10140ec:	00000a06 	br	1014118 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10140f0:	e0bffd17 	ldw	r2,-12(fp)
 10140f4:	10800044 	addi	r2,r2,1
 10140f8:	e0bffd15 	stw	r2,-12(fp)
 10140fc:	00804074 	movhi	r2,257
 1014100:	109cf304 	addi	r2,r2,29644
 1014104:	10800017 	ldw	r2,0(r2)
 1014108:	1007883a 	mov	r3,r2
 101410c:	e0bffd17 	ldw	r2,-12(fp)
 1014110:	18bfda2e 	bgeu	r3,r2,101407c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1014114:	e03fff15 	stw	zero,-4(fp)
 1014118:	e0bfff17 	ldw	r2,-4(fp)
}
 101411c:	e037883a 	mov	sp,fp
 1014120:	df000017 	ldw	fp,0(sp)
 1014124:	dec00104 	addi	sp,sp,4
 1014128:	f800283a 	ret

0101412c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101412c:	defff404 	addi	sp,sp,-48
 1014130:	dfc00b15 	stw	ra,44(sp)
 1014134:	df000a15 	stw	fp,40(sp)
 1014138:	df000a04 	addi	fp,sp,40
 101413c:	e13ffb15 	stw	r4,-20(fp)
 1014140:	e17ffc15 	stw	r5,-16(fp)
 1014144:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1014148:	00bfffc4 	movi	r2,-1
 101414c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1014150:	00bffb44 	movi	r2,-19
 1014154:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1014158:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101415c:	e13ffb17 	ldw	r4,-20(fp)
 1014160:	01404074 	movhi	r5,257
 1014164:	295cf104 	addi	r5,r5,29636
 1014168:	1013e500 	call	1013e50 <alt_find_dev>
 101416c:	e0bffa15 	stw	r2,-24(fp)
 1014170:	e0bffa17 	ldw	r2,-24(fp)
 1014174:	1004c03a 	cmpne	r2,r2,zero
 1014178:	1000051e 	bne	r2,zero,1014190 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101417c:	e13ffb17 	ldw	r4,-20(fp)
 1014180:	10144d80 	call	10144d8 <alt_find_file>
 1014184:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1014188:	00800044 	movi	r2,1
 101418c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1014190:	e0bffa17 	ldw	r2,-24(fp)
 1014194:	1005003a 	cmpeq	r2,r2,zero
 1014198:	1000301e 	bne	r2,zero,101425c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 101419c:	e13ffa17 	ldw	r4,-24(fp)
 10141a0:	10145f80 	call	10145f8 <alt_get_fd>
 10141a4:	e0bff815 	stw	r2,-32(fp)
 10141a8:	e0bff817 	ldw	r2,-32(fp)
 10141ac:	1004403a 	cmpge	r2,r2,zero
 10141b0:	1000031e 	bne	r2,zero,10141c0 <open+0x94>
    {
      status = index;
 10141b4:	e0bff817 	ldw	r2,-32(fp)
 10141b8:	e0bff715 	stw	r2,-36(fp)
 10141bc:	00002906 	br	1014264 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 10141c0:	e0bff817 	ldw	r2,-32(fp)
 10141c4:	10800324 	muli	r2,r2,12
 10141c8:	1007883a 	mov	r3,r2
 10141cc:	00804074 	movhi	r2,257
 10141d0:	1097eb04 	addi	r2,r2,24492
 10141d4:	1885883a 	add	r2,r3,r2
 10141d8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10141dc:	e0fffc17 	ldw	r3,-16(fp)
 10141e0:	00900034 	movhi	r2,16384
 10141e4:	10bfffc4 	addi	r2,r2,-1
 10141e8:	1886703a 	and	r3,r3,r2
 10141ec:	e0bff917 	ldw	r2,-28(fp)
 10141f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10141f4:	e0bff617 	ldw	r2,-40(fp)
 10141f8:	1004c03a 	cmpne	r2,r2,zero
 10141fc:	1000061e 	bne	r2,zero,1014218 <open+0xec>
 1014200:	e13ff917 	ldw	r4,-28(fp)
 1014204:	10140500 	call	1014050 <alt_file_locked>
 1014208:	e0bff715 	stw	r2,-36(fp)
 101420c:	e0bff717 	ldw	r2,-36(fp)
 1014210:	1004803a 	cmplt	r2,r2,zero
 1014214:	1000131e 	bne	r2,zero,1014264 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1014218:	e0bffa17 	ldw	r2,-24(fp)
 101421c:	10800317 	ldw	r2,12(r2)
 1014220:	1005003a 	cmpeq	r2,r2,zero
 1014224:	1000091e 	bne	r2,zero,101424c <open+0x120>
 1014228:	e0bffa17 	ldw	r2,-24(fp)
 101422c:	10800317 	ldw	r2,12(r2)
 1014230:	e13ff917 	ldw	r4,-28(fp)
 1014234:	e17ffb17 	ldw	r5,-20(fp)
 1014238:	e1bffc17 	ldw	r6,-16(fp)
 101423c:	e1fffd17 	ldw	r7,-12(fp)
 1014240:	103ee83a 	callr	r2
 1014244:	e0bfff15 	stw	r2,-4(fp)
 1014248:	00000106 	br	1014250 <open+0x124>
 101424c:	e03fff15 	stw	zero,-4(fp)
 1014250:	e0bfff17 	ldw	r2,-4(fp)
 1014254:	e0bff715 	stw	r2,-36(fp)
 1014258:	00000206 	br	1014264 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101425c:	00bffb44 	movi	r2,-19
 1014260:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1014264:	e0bff717 	ldw	r2,-36(fp)
 1014268:	1004403a 	cmpge	r2,r2,zero
 101426c:	1000091e 	bne	r2,zero,1014294 <open+0x168>
  {
    alt_release_fd (index);  
 1014270:	e13ff817 	ldw	r4,-32(fp)
 1014274:	101163c0 	call	101163c <alt_release_fd>
    ALT_ERRNO = -status;
 1014278:	10142b40 	call	10142b4 <alt_get_errno>
 101427c:	e0fff717 	ldw	r3,-36(fp)
 1014280:	00c7c83a 	sub	r3,zero,r3
 1014284:	10c00015 	stw	r3,0(r2)
    return -1;
 1014288:	00bfffc4 	movi	r2,-1
 101428c:	e0bffe15 	stw	r2,-8(fp)
 1014290:	00000206 	br	101429c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1014294:	e0bff817 	ldw	r2,-32(fp)
 1014298:	e0bffe15 	stw	r2,-8(fp)
 101429c:	e0bffe17 	ldw	r2,-8(fp)
}
 10142a0:	e037883a 	mov	sp,fp
 10142a4:	dfc00117 	ldw	ra,4(sp)
 10142a8:	df000017 	ldw	fp,0(sp)
 10142ac:	dec00204 	addi	sp,sp,8
 10142b0:	f800283a 	ret

010142b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10142b4:	defffd04 	addi	sp,sp,-12
 10142b8:	dfc00215 	stw	ra,8(sp)
 10142bc:	df000115 	stw	fp,4(sp)
 10142c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10142c4:	00804074 	movhi	r2,257
 10142c8:	109cf404 	addi	r2,r2,29648
 10142cc:	10800017 	ldw	r2,0(r2)
 10142d0:	1005003a 	cmpeq	r2,r2,zero
 10142d4:	1000061e 	bne	r2,zero,10142f0 <alt_get_errno+0x3c>
 10142d8:	00804074 	movhi	r2,257
 10142dc:	109cf404 	addi	r2,r2,29648
 10142e0:	10800017 	ldw	r2,0(r2)
 10142e4:	103ee83a 	callr	r2
 10142e8:	e0bfff15 	stw	r2,-4(fp)
 10142ec:	00000306 	br	10142fc <alt_get_errno+0x48>
 10142f0:	008040b4 	movhi	r2,258
 10142f4:	10a4d904 	addi	r2,r2,-27804
 10142f8:	e0bfff15 	stw	r2,-4(fp)
 10142fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014300:	e037883a 	mov	sp,fp
 1014304:	dfc00117 	ldw	ra,4(sp)
 1014308:	df000017 	ldw	fp,0(sp)
 101430c:	dec00204 	addi	sp,sp,8
 1014310:	f800283a 	ret

01014314 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1014314:	defffa04 	addi	sp,sp,-24
 1014318:	df000515 	stw	fp,20(sp)
 101431c:	df000504 	addi	fp,sp,20
 1014320:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014324:	0005303a 	rdctl	r2,status
 1014328:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101432c:	e0fffd17 	ldw	r3,-12(fp)
 1014330:	00bfff84 	movi	r2,-2
 1014334:	1884703a 	and	r2,r3,r2
 1014338:	1001703a 	wrctl	status,r2
  
  return context;
 101433c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1014340:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1014344:	e0bfff17 	ldw	r2,-4(fp)
 1014348:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 101434c:	e0bffc17 	ldw	r2,-16(fp)
 1014350:	10c00017 	ldw	r3,0(r2)
 1014354:	e0bffc17 	ldw	r2,-16(fp)
 1014358:	10800117 	ldw	r2,4(r2)
 101435c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1014360:	e0bffc17 	ldw	r2,-16(fp)
 1014364:	10c00117 	ldw	r3,4(r2)
 1014368:	e0bffc17 	ldw	r2,-16(fp)
 101436c:	10800017 	ldw	r2,0(r2)
 1014370:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1014374:	e0fffc17 	ldw	r3,-16(fp)
 1014378:	e0bffc17 	ldw	r2,-16(fp)
 101437c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1014380:	e0fffc17 	ldw	r3,-16(fp)
 1014384:	e0bffc17 	ldw	r2,-16(fp)
 1014388:	18800015 	stw	r2,0(r3)
 101438c:	e0bffe17 	ldw	r2,-8(fp)
 1014390:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014394:	e0bffb17 	ldw	r2,-20(fp)
 1014398:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 101439c:	e037883a 	mov	sp,fp
 10143a0:	df000017 	ldw	fp,0(sp)
 10143a4:	dec00104 	addi	sp,sp,4
 10143a8:	f800283a 	ret

010143ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10143ac:	defffb04 	addi	sp,sp,-20
 10143b0:	dfc00415 	stw	ra,16(sp)
 10143b4:	df000315 	stw	fp,12(sp)
 10143b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10143bc:	d0a01917 	ldw	r2,-32668(gp)
 10143c0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10143c4:	d0a80617 	ldw	r2,-24552(gp)
 10143c8:	10800044 	addi	r2,r2,1
 10143cc:	d0a80615 	stw	r2,-24552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10143d0:	00003106 	br	1014498 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10143d4:	e0bffe17 	ldw	r2,-8(fp)
 10143d8:	10800017 	ldw	r2,0(r2)
 10143dc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10143e0:	e0bffe17 	ldw	r2,-8(fp)
 10143e4:	10800403 	ldbu	r2,16(r2)
 10143e8:	10803fcc 	andi	r2,r2,255
 10143ec:	1005003a 	cmpeq	r2,r2,zero
 10143f0:	1000051e 	bne	r2,zero,1014408 <alt_tick+0x5c>
 10143f4:	d0a80617 	ldw	r2,-24552(gp)
 10143f8:	1004c03a 	cmpne	r2,r2,zero
 10143fc:	1000021e 	bne	r2,zero,1014408 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1014400:	e0bffe17 	ldw	r2,-8(fp)
 1014404:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1014408:	e0bffe17 	ldw	r2,-8(fp)
 101440c:	10c00217 	ldw	r3,8(r2)
 1014410:	d0a80617 	ldw	r2,-24552(gp)
 1014414:	10c01e36 	bltu	r2,r3,1014490 <alt_tick+0xe4>
 1014418:	e0bffe17 	ldw	r2,-8(fp)
 101441c:	10800403 	ldbu	r2,16(r2)
 1014420:	10803fcc 	andi	r2,r2,255
 1014424:	1004c03a 	cmpne	r2,r2,zero
 1014428:	1000191e 	bne	r2,zero,1014490 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 101442c:	e0bffe17 	ldw	r2,-8(fp)
 1014430:	10c00317 	ldw	r3,12(r2)
 1014434:	e0bffe17 	ldw	r2,-8(fp)
 1014438:	11000517 	ldw	r4,20(r2)
 101443c:	183ee83a 	callr	r3
 1014440:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1014444:	e0bffd17 	ldw	r2,-12(fp)
 1014448:	1004c03a 	cmpne	r2,r2,zero
 101444c:	1000031e 	bne	r2,zero,101445c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1014450:	e13ffe17 	ldw	r4,-8(fp)
 1014454:	10143140 	call	1014314 <alt_alarm_stop>
 1014458:	00000d06 	br	1014490 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 101445c:	e0bffe17 	ldw	r2,-8(fp)
 1014460:	10c00217 	ldw	r3,8(r2)
 1014464:	e0bffd17 	ldw	r2,-12(fp)
 1014468:	1887883a 	add	r3,r3,r2
 101446c:	e0bffe17 	ldw	r2,-8(fp)
 1014470:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1014474:	e0bffe17 	ldw	r2,-8(fp)
 1014478:	10c00217 	ldw	r3,8(r2)
 101447c:	d0a80617 	ldw	r2,-24552(gp)
 1014480:	1880032e 	bgeu	r3,r2,1014490 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1014484:	e0fffe17 	ldw	r3,-8(fp)
 1014488:	00800044 	movi	r2,1
 101448c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1014490:	e0bfff17 	ldw	r2,-4(fp)
 1014494:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1014498:	d0e01904 	addi	r3,gp,-32668
 101449c:	e0bffe17 	ldw	r2,-8(fp)
 10144a0:	10ffcc1e 	bne	r2,r3,10143d4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10144a4:	e037883a 	mov	sp,fp
 10144a8:	dfc00117 	ldw	ra,4(sp)
 10144ac:	df000017 	ldw	fp,0(sp)
 10144b0:	dec00204 	addi	sp,sp,8
 10144b4:	f800283a 	ret

010144b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10144b8:	deffff04 	addi	sp,sp,-4
 10144bc:	df000015 	stw	fp,0(sp)
 10144c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10144c4:	000170fa 	wrctl	ienable,zero
}
 10144c8:	e037883a 	mov	sp,fp
 10144cc:	df000017 	ldw	fp,0(sp)
 10144d0:	dec00104 	addi	sp,sp,4
 10144d4:	f800283a 	ret

010144d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10144d8:	defffa04 	addi	sp,sp,-24
 10144dc:	dfc00515 	stw	ra,20(sp)
 10144e0:	df000415 	stw	fp,16(sp)
 10144e4:	df000404 	addi	fp,sp,16
 10144e8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10144ec:	00804074 	movhi	r2,257
 10144f0:	109cef04 	addi	r2,r2,29628
 10144f4:	10800017 	ldw	r2,0(r2)
 10144f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10144fc:	00003306 	br	10145cc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1014500:	e0bffd17 	ldw	r2,-12(fp)
 1014504:	11000217 	ldw	r4,8(r2)
 1014508:	10064c80 	call	10064c8 <strlen>
 101450c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1014510:	e0bffd17 	ldw	r2,-12(fp)
 1014514:	10c00217 	ldw	r3,8(r2)
 1014518:	e0bffc17 	ldw	r2,-16(fp)
 101451c:	1885883a 	add	r2,r3,r2
 1014520:	10bfffc4 	addi	r2,r2,-1
 1014524:	10800003 	ldbu	r2,0(r2)
 1014528:	10803fcc 	andi	r2,r2,255
 101452c:	1080201c 	xori	r2,r2,128
 1014530:	10bfe004 	addi	r2,r2,-128
 1014534:	10800bd8 	cmpnei	r2,r2,47
 1014538:	1000031e 	bne	r2,zero,1014548 <alt_find_file+0x70>
    {
      len -= 1;
 101453c:	e0bffc17 	ldw	r2,-16(fp)
 1014540:	10bfffc4 	addi	r2,r2,-1
 1014544:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1014548:	e0bffc17 	ldw	r2,-16(fp)
 101454c:	1007883a 	mov	r3,r2
 1014550:	e0bffe17 	ldw	r2,-8(fp)
 1014554:	1885883a 	add	r2,r3,r2
 1014558:	10800003 	ldbu	r2,0(r2)
 101455c:	10803fcc 	andi	r2,r2,255
 1014560:	1080201c 	xori	r2,r2,128
 1014564:	10bfe004 	addi	r2,r2,-128
 1014568:	10800be0 	cmpeqi	r2,r2,47
 101456c:	10000a1e 	bne	r2,zero,1014598 <alt_find_file+0xc0>
 1014570:	e0bffc17 	ldw	r2,-16(fp)
 1014574:	1007883a 	mov	r3,r2
 1014578:	e0bffe17 	ldw	r2,-8(fp)
 101457c:	1885883a 	add	r2,r3,r2
 1014580:	10800003 	ldbu	r2,0(r2)
 1014584:	10803fcc 	andi	r2,r2,255
 1014588:	1080201c 	xori	r2,r2,128
 101458c:	10bfe004 	addi	r2,r2,-128
 1014590:	1004c03a 	cmpne	r2,r2,zero
 1014594:	10000a1e 	bne	r2,zero,10145c0 <alt_find_file+0xe8>
 1014598:	e0bffd17 	ldw	r2,-12(fp)
 101459c:	11000217 	ldw	r4,8(r2)
 10145a0:	e1bffc17 	ldw	r6,-16(fp)
 10145a4:	e17ffe17 	ldw	r5,-8(fp)
 10145a8:	10147540 	call	1014754 <memcmp>
 10145ac:	1004c03a 	cmpne	r2,r2,zero
 10145b0:	1000031e 	bne	r2,zero,10145c0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10145b4:	e0bffd17 	ldw	r2,-12(fp)
 10145b8:	e0bfff15 	stw	r2,-4(fp)
 10145bc:	00000806 	br	10145e0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10145c0:	e0bffd17 	ldw	r2,-12(fp)
 10145c4:	10800017 	ldw	r2,0(r2)
 10145c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10145cc:	00c04074 	movhi	r3,257
 10145d0:	18dcef04 	addi	r3,r3,29628
 10145d4:	e0bffd17 	ldw	r2,-12(fp)
 10145d8:	10ffc91e 	bne	r2,r3,1014500 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10145dc:	e03fff15 	stw	zero,-4(fp)
 10145e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10145e4:	e037883a 	mov	sp,fp
 10145e8:	dfc00117 	ldw	ra,4(sp)
 10145ec:	df000017 	ldw	fp,0(sp)
 10145f0:	dec00204 	addi	sp,sp,8
 10145f4:	f800283a 	ret

010145f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10145f8:	defffc04 	addi	sp,sp,-16
 10145fc:	df000315 	stw	fp,12(sp)
 1014600:	df000304 	addi	fp,sp,12
 1014604:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1014608:	00bffa04 	movi	r2,-24
 101460c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1014610:	e03ffe15 	stw	zero,-8(fp)
 1014614:	00001e06 	br	1014690 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1014618:	e0bffe17 	ldw	r2,-8(fp)
 101461c:	00c04074 	movhi	r3,257
 1014620:	18d7eb04 	addi	r3,r3,24492
 1014624:	10800324 	muli	r2,r2,12
 1014628:	10c5883a 	add	r2,r2,r3
 101462c:	10800017 	ldw	r2,0(r2)
 1014630:	1004c03a 	cmpne	r2,r2,zero
 1014634:	1000131e 	bne	r2,zero,1014684 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1014638:	e0bffe17 	ldw	r2,-8(fp)
 101463c:	00c04074 	movhi	r3,257
 1014640:	18d7eb04 	addi	r3,r3,24492
 1014644:	10800324 	muli	r2,r2,12
 1014648:	10c7883a 	add	r3,r2,r3
 101464c:	e0bfff17 	ldw	r2,-4(fp)
 1014650:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1014654:	00804074 	movhi	r2,257
 1014658:	109cf304 	addi	r2,r2,29644
 101465c:	10c00017 	ldw	r3,0(r2)
 1014660:	e0bffe17 	ldw	r2,-8(fp)
 1014664:	1880040e 	bge	r3,r2,1014678 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1014668:	00c04074 	movhi	r3,257
 101466c:	18dcf304 	addi	r3,r3,29644
 1014670:	e0bffe17 	ldw	r2,-8(fp)
 1014674:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1014678:	e0bffe17 	ldw	r2,-8(fp)
 101467c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1014680:	00000606 	br	101469c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1014684:	e0bffe17 	ldw	r2,-8(fp)
 1014688:	10800044 	addi	r2,r2,1
 101468c:	e0bffe15 	stw	r2,-8(fp)
 1014690:	e0bffe17 	ldw	r2,-8(fp)
 1014694:	10800810 	cmplti	r2,r2,32
 1014698:	103fdf1e 	bne	r2,zero,1014618 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 101469c:	e0bffd17 	ldw	r2,-12(fp)
}
 10146a0:	e037883a 	mov	sp,fp
 10146a4:	df000017 	ldw	fp,0(sp)
 10146a8:	dec00104 	addi	sp,sp,4
 10146ac:	f800283a 	ret

010146b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10146b0:	defffb04 	addi	sp,sp,-20
 10146b4:	df000415 	stw	fp,16(sp)
 10146b8:	df000404 	addi	fp,sp,16
 10146bc:	e13ffe15 	stw	r4,-8(fp)
 10146c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10146c4:	e0bfff17 	ldw	r2,-4(fp)
 10146c8:	10840070 	cmpltui	r2,r2,4097
 10146cc:	1000021e 	bne	r2,zero,10146d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10146d0:	00840004 	movi	r2,4096
 10146d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 10146d8:	e0fffe17 	ldw	r3,-8(fp)
 10146dc:	e0bfff17 	ldw	r2,-4(fp)
 10146e0:	1885883a 	add	r2,r3,r2
 10146e4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10146e8:	e0bffe17 	ldw	r2,-8(fp)
 10146ec:	e0bffd15 	stw	r2,-12(fp)
 10146f0:	00000506 	br	1014708 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 10146f4:	e0bffd17 	ldw	r2,-12(fp)
 10146f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10146fc:	e0bffd17 	ldw	r2,-12(fp)
 1014700:	10800804 	addi	r2,r2,32
 1014704:	e0bffd15 	stw	r2,-12(fp)
 1014708:	e0fffd17 	ldw	r3,-12(fp)
 101470c:	e0bffc17 	ldw	r2,-16(fp)
 1014710:	18bff836 	bltu	r3,r2,10146f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1014714:	e0bffe17 	ldw	r2,-8(fp)
 1014718:	108007cc 	andi	r2,r2,31
 101471c:	1005003a 	cmpeq	r2,r2,zero
 1014720:	1000021e 	bne	r2,zero,101472c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1014724:	e0bffd17 	ldw	r2,-12(fp)
 1014728:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 101472c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1014730:	e037883a 	mov	sp,fp
 1014734:	df000017 	ldw	fp,0(sp)
 1014738:	dec00104 	addi	sp,sp,4
 101473c:	f800283a 	ret

01014740 <atexit>:
 1014740:	200b883a 	mov	r5,r4
 1014744:	000d883a 	mov	r6,zero
 1014748:	0009883a 	mov	r4,zero
 101474c:	000f883a 	mov	r7,zero
 1014750:	10147c81 	jmpi	10147c8 <__register_exitproc>

01014754 <memcmp>:
 1014754:	00c000c4 	movi	r3,3
 1014758:	1980032e 	bgeu	r3,r6,1014768 <memcmp+0x14>
 101475c:	2144b03a 	or	r2,r4,r5
 1014760:	10c4703a 	and	r2,r2,r3
 1014764:	10000f26 	beq	r2,zero,10147a4 <memcmp+0x50>
 1014768:	31ffffc4 	addi	r7,r6,-1
 101476c:	3000061e 	bne	r6,zero,1014788 <memcmp+0x34>
 1014770:	00000a06 	br	101479c <memcmp+0x48>
 1014774:	39ffffc4 	addi	r7,r7,-1
 1014778:	00bfffc4 	movi	r2,-1
 101477c:	21000044 	addi	r4,r4,1
 1014780:	29400044 	addi	r5,r5,1
 1014784:	38800526 	beq	r7,r2,101479c <memcmp+0x48>
 1014788:	20c00003 	ldbu	r3,0(r4)
 101478c:	28800003 	ldbu	r2,0(r5)
 1014790:	18bff826 	beq	r3,r2,1014774 <memcmp+0x20>
 1014794:	1885c83a 	sub	r2,r3,r2
 1014798:	f800283a 	ret
 101479c:	0005883a 	mov	r2,zero
 10147a0:	f800283a 	ret
 10147a4:	180f883a 	mov	r7,r3
 10147a8:	20c00017 	ldw	r3,0(r4)
 10147ac:	28800017 	ldw	r2,0(r5)
 10147b0:	18bfed1e 	bne	r3,r2,1014768 <memcmp+0x14>
 10147b4:	31bfff04 	addi	r6,r6,-4
 10147b8:	21000104 	addi	r4,r4,4
 10147bc:	29400104 	addi	r5,r5,4
 10147c0:	39bff936 	bltu	r7,r6,10147a8 <memcmp+0x54>
 10147c4:	003fe806 	br	1014768 <memcmp+0x14>

010147c8 <__register_exitproc>:
 10147c8:	defffa04 	addi	sp,sp,-24
 10147cc:	00804074 	movhi	r2,257
 10147d0:	109cea04 	addi	r2,r2,29608
 10147d4:	dc000015 	stw	r16,0(sp)
 10147d8:	14000017 	ldw	r16,0(r2)
 10147dc:	dd000415 	stw	r20,16(sp)
 10147e0:	2829883a 	mov	r20,r5
 10147e4:	81405217 	ldw	r5,328(r16)
 10147e8:	dcc00315 	stw	r19,12(sp)
 10147ec:	dc800215 	stw	r18,8(sp)
 10147f0:	dc400115 	stw	r17,4(sp)
 10147f4:	dfc00515 	stw	ra,20(sp)
 10147f8:	2023883a 	mov	r17,r4
 10147fc:	3027883a 	mov	r19,r6
 1014800:	3825883a 	mov	r18,r7
 1014804:	28002526 	beq	r5,zero,101489c <__register_exitproc+0xd4>
 1014808:	29000117 	ldw	r4,4(r5)
 101480c:	008007c4 	movi	r2,31
 1014810:	11002716 	blt	r2,r4,10148b0 <__register_exitproc+0xe8>
 1014814:	8800101e 	bne	r17,zero,1014858 <__register_exitproc+0x90>
 1014818:	2105883a 	add	r2,r4,r4
 101481c:	1085883a 	add	r2,r2,r2
 1014820:	20c00044 	addi	r3,r4,1
 1014824:	1145883a 	add	r2,r2,r5
 1014828:	0009883a 	mov	r4,zero
 101482c:	15000215 	stw	r20,8(r2)
 1014830:	28c00115 	stw	r3,4(r5)
 1014834:	2005883a 	mov	r2,r4
 1014838:	dfc00517 	ldw	ra,20(sp)
 101483c:	dd000417 	ldw	r20,16(sp)
 1014840:	dcc00317 	ldw	r19,12(sp)
 1014844:	dc800217 	ldw	r18,8(sp)
 1014848:	dc400117 	ldw	r17,4(sp)
 101484c:	dc000017 	ldw	r16,0(sp)
 1014850:	dec00604 	addi	sp,sp,24
 1014854:	f800283a 	ret
 1014858:	29802204 	addi	r6,r5,136
 101485c:	00800044 	movi	r2,1
 1014860:	110e983a 	sll	r7,r2,r4
 1014864:	30c04017 	ldw	r3,256(r6)
 1014868:	2105883a 	add	r2,r4,r4
 101486c:	1085883a 	add	r2,r2,r2
 1014870:	1185883a 	add	r2,r2,r6
 1014874:	19c6b03a 	or	r3,r3,r7
 1014878:	14802015 	stw	r18,128(r2)
 101487c:	14c00015 	stw	r19,0(r2)
 1014880:	00800084 	movi	r2,2
 1014884:	30c04015 	stw	r3,256(r6)
 1014888:	88bfe31e 	bne	r17,r2,1014818 <__register_exitproc+0x50>
 101488c:	30804117 	ldw	r2,260(r6)
 1014890:	11c4b03a 	or	r2,r2,r7
 1014894:	30804115 	stw	r2,260(r6)
 1014898:	003fdf06 	br	1014818 <__register_exitproc+0x50>
 101489c:	008040b4 	movhi	r2,258
 10148a0:	10ab3804 	addi	r2,r2,-21280
 10148a4:	100b883a 	mov	r5,r2
 10148a8:	80805215 	stw	r2,328(r16)
 10148ac:	003fd606 	br	1014808 <__register_exitproc+0x40>
 10148b0:	00804034 	movhi	r2,256
 10148b4:	10964d04 	addi	r2,r2,22836
 10148b8:	1000021e 	bne	r2,zero,10148c4 <__register_exitproc+0xfc>
 10148bc:	013fffc4 	movi	r4,-1
 10148c0:	003fdc06 	br	1014834 <__register_exitproc+0x6c>
 10148c4:	01006404 	movi	r4,400
 10148c8:	103ee83a 	callr	r2
 10148cc:	1007883a 	mov	r3,r2
 10148d0:	103ffa26 	beq	r2,zero,10148bc <__register_exitproc+0xf4>
 10148d4:	80805217 	ldw	r2,328(r16)
 10148d8:	180b883a 	mov	r5,r3
 10148dc:	18000115 	stw	zero,4(r3)
 10148e0:	18800015 	stw	r2,0(r3)
 10148e4:	80c05215 	stw	r3,328(r16)
 10148e8:	18006215 	stw	zero,392(r3)
 10148ec:	18006315 	stw	zero,396(r3)
 10148f0:	0009883a 	mov	r4,zero
 10148f4:	883fc826 	beq	r17,zero,1014818 <__register_exitproc+0x50>
 10148f8:	003fd706 	br	1014858 <__register_exitproc+0x90>
 10148fc:	010085bc 	xorhi	r4,zero,534
