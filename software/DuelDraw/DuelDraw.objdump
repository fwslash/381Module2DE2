
DuelDraw.elf:     file format elf32-littlenios2
DuelDraw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001c4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001aa4c memsz 0x0001aa4c flags r-x
    LOAD off    0x0001ba6c vaddr 0x0101aa6c paddr 0x0101c990 align 2**12
         filesz 0x00001f24 memsz 0x00001f24 flags rw-
    LOAD off    0x0001e8b4 vaddr 0x0101e8b4 paddr 0x0101e8b4 align 2**12
         filesz 0x00000000 memsz 0x00001c60 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000199d8  010001c4  010001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ed0  01019b9c  01019b9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f24  0101aa6c  0101c990  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001c60  0101e8b4  0101e8b4  0001e8b4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001d990  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000013b8  00000000  00000000  0001d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002f51  00000000  00000000  0001ed70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003e6e7  00000000  00000000  00021cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c909  00000000  00000000  000603a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000222f8  00000000  00000000  0006ccb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000035d0  00000000  00000000  0008efac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003275  00000000  00000000  0009257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015587  00000000  00000000  000957f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000aad78  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b80  00000000  00000000  000aadd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000b163d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000b1640  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b164c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b164d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000b164e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000b1652  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000b1656  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000b165a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  000b1666  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000a2de7  00000000  00000000  000b168d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001c4 l    d  .text	00000000 .text
01019b9c l    d  .rodata	00000000 .rodata
0101aa6c l    d  .rwdata	00000000 .rwdata
0101e8b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0100020c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 player.c
00000000 l    df *ABS*	00000000 usb.c
01019c50 l     O .rodata	00000013 __func__.3392
01019c7c l     O .rodata	00000013 __func__.3409
01019c90 l     O .rodata	00000010 __func__.3428
00000000 l    df *ABS*	00000000 usb_ISO.c
00000000 l    df *ABS*	00000000 usb_chap_9.c
00000000 l    df *ABS*	00000000 usb_config.c
00000000 l    df *ABS*	00000000 usb_device_bus.c
00000000 l    df *ABS*	00000000 usb_device_hal.c
00000000 l    df *ABS*	00000000 usb_isr.c
0101a27c l     O .rodata	0000000f __func__.4000
00000000 l    df *ABS*	00000000 usb_queue.c
0101a2a8 l     O .rodata	0000000e __func__.1882
00000000 l    df *ABS*	00000000 usbio.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0101ad20 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100655c l     F .text	00000058 __sprint_r
0101a38a l     O .rodata	00000010 blanks.3452
0101a37a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
0101a3a2 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01009d40 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
0101a4c5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
01009f0c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100b908 l     F .text	00000058 std
0100ba14 l     F .text	00000008 __fp_lock
0100ba1c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0101c968 l     O .rwdata	00000004 charset
0101a668 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0101a7b0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0100e740 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtod.c
0100ee04 l     F .text	00000048 match
0101b548 l     O .rwdata	00000014 fpi.1950
0101a7cc l     O .rodata	00000028 tinytens
0101b534 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
010111c8 l     F .text	00000058 __sprint_r
0101a804 l     O .rodata	00000010 blanks.3391
0101a7f4 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
010126b4 l     F .text	00000024 htinit
01012740 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
01012fa8 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
010141cc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010153f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01015ecc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01015f2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
01015f58 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0101608c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0101638c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0101652c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0101660c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01016768 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01016994 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0101c984 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01016c60 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101b704 l     O .rwdata	00001060 JTAG
0101c764 l     O .rwdata	00000030 audio_and_video_config_0
0101c794 l     O .rwdata	00000030 audio_0
0101c7c4 l     O .rwdata	0000002c character_lcd_0
0101c7f0 l     O .rwdata	00000038 ps2_0
0101c828 l     O .rwdata	00000034 usb_0
0101c85c l     O .rwdata	00000048 video_character_buffer_with_dma_0
0101c8a4 l     O .rwdata	00000054 video_pixel_buffer_dma
0101c8f8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01017070 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010172a8 l     F .text	0000022c altera_avalon_jtag_uart_irq
010174d4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_usb.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01018fc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010191b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
010192ec l     F .text	000000dc alt_file_locked
01019550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
01002c28 g     F .text	00000210 read_write_register
010061c0 g     F .text	0000001c putchar
0100d1b4 g     F .text	00000094 _mprec_log10
010041b0 g     F .text	00000068 Hal4D13_GetErrorCode
01002210 g     F .text	00000064 Chap9_StallEP0InControlRead
0100d2a0 g     F .text	00000088 __any_on
0101323c g     F .text	00000070 _isatty_r
0101a788 g     O .rodata	00000028 __mprec_tinytens
010167c8 g     F .text	0000006c alt_main
01006440 g     F .text	0000008c strcpy
01004360 g     F .text	00000168 Hal4D13_RegAccess
010040ec g     F .text	00000070 Hal4D13_LockDevice
0101e8c0 g     O .bss	00000004 ISP1362_BASE
010061e4 g     F .text	000000a0 _puts_r
01018434 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
01020284 g     O .bss	00000100 alt_irq
010132ac g     F .text	00000078 _lseek_r
01003c30 g     F .text	00000094 Hal4D13_SetIntEnable
01003ea0 g     F .text	00000054 Hal4D13_SetDMAConfig
0101c990 g       *ABS*	00000000 __flash_rwdata_start
0101aa6c g     O .rwdata	00000012 DeviceDescr
01017d34 g     F .text	00000034 alt_up_character_lcd_send_cmd
01014cec g     F .text	00000088 __eqdf2
01002f60 g     F .text	00000028 D13Bus_StallEP0
0101ace0 g     O .rwdata	00000040 _NAME_USB_VENDOR_REQUEST
01005224 g     F .text	000000d8 usb_fifo_push
01020514 g       *ABS*	00000000 __alt_heap_start
010018a0 g     F .text	00000230 Chap9_SetAddress
0100eb70 g     F .text	00000074 _kill_r
010021ac g     F .text	00000064 Chap9_StallEP0InControlWrite
01006148 g     F .text	00000044 printf
01000b18 g     F .text	0000002c usb_send_queue_is_empty
0100eab0 g     F .text	000000a0 _signal_r
010051d8 g     F .text	0000001c Isr_Ep0EDone
01002b14 g     F .text	0000002c ML_Reserved
0100ecc0 g     F .text	00000068 __sseek
0100b970 g     F .text	000000a4 __sinit
01018abc g     F .text	00000114 alt_up_char_buffer_string
010122e8 g     F .text	00000130 __swbuf_r
0101824c g     F .text	00000034 read_CE_bit
0100c8b0 g     F .text	00000084 _setlocale_r
0101e8f0 g     O .bss	00000002 IsoInPktLen
0100ba70 g     F .text	00000068 __sfmoreglue
010111ac g     F .text	0000001c ungetc
0101ab82 g     O .rwdata	0000001a strSerialNum
01016854 g     F .text	00000020 __malloc_unlock
01002c00 g     F .text	00000028 reserved
01000528 g     F .text	00000090 findChallengeIndex
010185e0 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0100ee4c g     F .text	000014e4 _strtod_r
0101c948 g     O .rwdata	00000004 rb_wr_ptr
010189ec g     F .text	000000d0 alt_up_char_buffer_draw
0101e92c g     O .bss	00000004 altera_avalon_timer_ts_freq
0100ccc8 g     F .text	000000e0 memmove
0100ba60 g     F .text	00000010 _cleanup
0100d328 g     F .text	000000bc _Balloc
01000210 g     F .text	00000060 asciify
01000c58 g     F .text	000000f0 usb_device_poll
010188e8 g     F .text	00000040 alt_up_usb_open_dev
01014dfc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
01017cb8 g     F .text	0000007c get_DDRAM_addr
01003f48 g     F .text	00000054 Hal4D13_SetDMACounter
01003ff0 g     F .text	00000054 Hal4D13_GetDataFromChipRam
01000000 g     F .entry	0000001c __reset
0101e8c4 g     O .bss	00000004 bD13flags
01005028 g     F .text	00000030 Isr_Ep03Done
01005058 g     F .text	00000030 Isr_Ep04Done
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100297c g     F .text	000000f4 config_endpoint
01012640 g     F .text	00000074 _fstat_r
0101e908 g     O .bss	00000004 errno
01009b04 g     F .text	00000024 __svfscanf
01015730 g     F .text	0000002c __make_fp
0101e920 g     O .bss	00000004 alt_argv
01024924 g       *ABS*	00000000 _gp
01002b40 g     F .text	00000098 CHECK_CHIP_ID
01016b10 g     F .text	00000030 usleep
010036f8 g     F .text	00000124 Hal4D13_ReadBulkEndpoint
010160ec g     F .text	00000020 getpid
0100461c g     F .text	00000050 usb_disable_all_interrupts
0101b584 g     O .rwdata	00000180 alt_fd_list
01002bd8 g     F .text	00000028 D13Bus_ControlEntry
01000fd8 g     F .text	000000e4 Hal4D13_ReadISOEndpoint
01000740 g     F .text	0000009c usb_recv_queue_pop
010061dc g     F .text	00000008 _putchar_r
01005168 g     F .text	0000001c Isr_Ep0ADone
01000b70 g     F .text	000000e8 usb_device_init
010190ec g     F .text	00000094 alt_find_dev
01006010 g     F .text	000000a0 memcpy
01012ff4 g     F .text	00000248 __hexnan
01017ecc g     F .text	0000004c alt_up_character_lcd_write_fd
0101e8bc g     O .bss	00000004 usb_send_cb
01018bd0 g     F .text	0000005c alt_up_char_buffer_clear
0100ba54 g     F .text	0000000c _cleanup_r
0101501c g     F .text	000000f8 __floatsidf
01019274 g     F .text	00000078 alt_io_redirect
01014f0c g     F .text	00000088 __ltdf2
01019b9c g       *ABS*	00000000 __DTOR_END__
0100514c g     F .text	0000001c Isr_Ep09Done
01006284 g     F .text	00000014 puts
0100cb64 g     F .text	00000040 mbrtowc
01002a9c g     F .text	0000001c suspend_change
01009b28 g     F .text	00000068 _vfscanf_r
0100d104 g     F .text	000000b0 __ratio
010042fc g     F .text	0000001c Hal4D13_ConfigDevice
010122c4 g     F .text	00000024 __vfiprintf_internal
010051f4 g     F .text	00000030 usb_fifo_init
010176ec g     F .text	00000224 altera_avalon_jtag_uart_read
010058bc g     F .text	00000014 malloc
0100618c g     F .text	00000034 _printf_r
01015530 g     F .text	00000008 __udivsi3
010162cc g     F .text	000000c0 isatty
01003ef4 g     F .text	00000054 Hal4D13_GetDMAConfig
0100e894 g     F .text	000000cc _raise_r
0100c860 g     F .text	0000002c iswspace
010056bc g     F .text	00000064 __assert_func
0101a698 g     O .rodata	000000c8 __mprec_tens
0100c88c g     F .text	00000008 __locale_charset
01001440 g     F .text	00000238 Chap9_ClearFeature
010051a0 g     F .text	0000001c Isr_Ep0CDone
01013434 g     F .text	000000a4 __fixunsdfsi
0101994c g     F .text	00000090 alt_icache_flush
01001ad0 g     F .text	000001dc Chap9_GetDescriptor
0101ab26 g     O .rwdata	00000032 REPORT_DESCRIPTOR
0101e8fc g     O .bss	00000004 __malloc_top_pad
0100eb6c g     F .text	00000004 _getpid_r
0101c928 g     O .rwdata	00000001 IsoDisable
0101ac5c g     O .rwdata	00000010 _NAME_USB_REQUEST_TYPE
01004098 g     F .text	00000054 Hal4D13_ReadCurrentFrameNumber
0101e8f2 g     O .bss	00000001 ALTERNATIVE_SETTING
01010c20 g     F .text	00000024 strtoul
0101c964 g     O .rwdata	00000004 __mb_cur_max
0100c894 g     F .text	0000000c _localeconv_r
01010c44 g     F .text	000002f0 _strtoull_r
0100da20 g     F .text	0000003c __i2b
0100c244 g     F .text	0000049c __sfvwrite_r
0101e8c8 g     O .bss	00000008 usb_send_queue
01002ab8 g     F .text	0000005c ML_AcknowledgeSETUP
0100e9e8 g     F .text	000000b4 __sigtramp_r
010042e0 g     F .text	0000001c Hal4D13_UnconfigDevice
01002274 g     F .text	0000009c Chap9_SingleTransmitEP0
01006298 g     F .text	00000070 _sbrk_r
01000f30 g     F .text	00000030 Wait4Ns
01000d48 g     F .text	000001e8 EnableIsoMode
0100090c g     F .text	00000188 usb_device_recv
01013324 g     F .text	00000078 _read_r
01002a70 g     F .text	0000002c reconnect_USB
01005114 g     F .text	0000001c Isr_Ep07Done
0101b528 g     O .rwdata	0000000c __lc_ctype
010031e4 g     F .text	00000038 Hal4D13_ResetDevice
0101c97c g     O .rwdata	00000004 alt_max_fd
01015a70 g     F .text	00000138 __unpack_d
0101251c g     F .text	00000110 _fclose_r
01018280 g     F .text	00000034 read_num_bytes_available
0101c934 g     O .rwdata	00000008 _NAME_USB_REQUEST_DIRECTION
0100b8d4 g     F .text	00000034 fflush
0101e900 g     O .bss	00000004 __malloc_max_sbrked_mem
01000b44 g     F .text	0000002c usb_recv_queue_is_empty
0101610c g     F .text	000001c0 alt_irq_register
010181e8 g     F .text	00000034 read_RI_bit
0100201c g     F .text	00000100 Chap9_SetInterface
01003cc4 g     F .text	0000008c Hal4D13_ReadInterruptRegister
0101abde g     O .rwdata	00000038 strManufacturer
0101465c g     F .text	00000074 __adddf3
01014064 g     F .text	00000078 __nesf2
0100cfe4 g     F .text	00000120 __b2d
0101e8ee g     O .bss	00000002 IsoOutPktLen
01013ab4 g     F .text	000005b0 __umoddi3
01016678 g     F .text	000000f0 lseek
010050e4 g     F .text	00000030 Isr_Ep06Done
0101c954 g     O .rwdata	00000004 _global_impure_ptr
01002310 g     F .text	0000017c Chap9_BurstTransmitEP0
0100df88 g     F .text	000005f4 _realloc_r
01800000 g       *ABS*	00000000 __alt_exception_stack_pointer
01020514 g       *ABS*	00000000 __bss_end
0101c94c g     O .rwdata	00000004 rb_rd_ptr
01019648 g     F .text	0000010c alt_tick
0100248c g     F .text	00000274 SetupToken_Handler
01000f60 g     F .text	00000078 ISOLOOP
01020184 g     O .bss	00000100 __hexdig
010134d8 g     F .text	000005dc __udivdi3
0101a760 g     O .rodata	00000028 __mprec_bigtens
0100dc7c g     F .text	00000120 __s2b
01009ef4 g     F .text	00000018 abort
01015260 g     F .text	00000194 __floatunsidf
0100cf04 g     F .text	00000060 __mcmp
010182e8 g     F .text	0000002c read_data_byte
0101ac18 g     O .rwdata	00000034 StandardDeviceRequest
0101e8d0 g     O .bss	00000008 usb_recv_queue
0101c960 g     O .rwdata	00000004 __ctype_ptr
0101ab9c g     O .rwdata	00000042 strProduct
0100ba3c g     F .text	00000018 __fp_lock_all
010028ec g     F .text	00000034 disconnect_USB
010195b0 g     F .text	00000098 alt_alarm_stop
010106b4 g     F .text	00000024 strtol
0101821c g     F .text	00000030 read_RE_bit
0101e918 g     O .bss	00000004 alt_irq_active
010000f8 g     F .exceptions	000000cc alt_irq_handler
0101b55c g     O .rwdata	00000028 alt_dev_null
010155c0 g     F .text	000000c8 __unpack_f
010181b4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010035d4 g     F .text	00000124 Hal4D13_ReadEndpoint
0101848c g     F .text	00000078 alt_up_ps2_write_data_byte
01018ecc g     F .text	00000044 alt_dcache_flush_all
0100cdd0 g     F .text	00000070 __hi0bits
01015114 g     F .text	000000d8 __fixdfsi
01005734 g     F .text	0000001c calloc
01003024 g     F .text	00000184 D13Bus_BurstTransmitEP0
0101e984 g     O .bss	00000400 IsoOutDataBuff
01010454 g     F .text	0000001c strtod
0101c990 g       *ABS*	00000000 __ram_rwdata_end
0101c974 g     O .rwdata	00000008 alt_dev_list
01016b40 g     F .text	00000120 write
0100dea0 g     F .text	000000e8 _putc_r
01017c90 g     F .text	00000028 alt_timestamp_freq
010005b8 g     F .text	00000034 usb_register_recv_callback
010140dc g     F .text	00000078 __gtsf2
0100345c g     F .text	000000c0 Hal4D13_SoftConnect
0101aa6c g       *ABS*	00000000 __ram_rodata_end
01015fb8 g     F .text	000000d4 fstat
0101e8d8 g     O .bss	00000008 ioRequest
010163ec g     F .text	00000140 kill
01014f94 g     F .text	00000088 __ledf2
0100db5c g     F .text	00000120 __pow5mult
0101e90c g     O .bss	00000004 __nlocale_changed
01011220 g     F .text	000010a4 ___vfiprintf_internal_r
01015538 g     F .text	00000008 __umodsi3
01003554 g     F .text	00000040 Hal4D13_ClearBuffer
010052fc g     F .text	00000044 usb_fifo_is_empty
0101c92c g     O .rwdata	00000002 IsoInPattern
01006308 g     F .text	00000034 _scanf_r
01020514 g       *ABS*	00000000 end
01018800 g     F .text	000000a8 alt_up_ps2_write_fd
01015c70 g     F .text	00000160 __pack_f
01003bb8 g     F .text	00000078 Hal4D13_GetIntEnable
01018928 g     F .text	00000084 alt_up_char_buffer_init
0101ab58 g     O .rwdata	00000018 strInterface
010171f0 g     F .text	000000b8 altera_avalon_jtag_uart_init
01003318 g     F .text	00000060 Hal4D13_GetMode
01019b98 g       *ABS*	00000000 __CTOR_LIST__
017ff800 g       *ABS*	00000000 __alt_stack_pointer
01015540 g     F .text	00000080 __clzsi2
01004940 g     F .text	00000030 Isr_SuspendChange
01017910 g     F .text	00000240 altera_avalon_jtag_uart_write
0100b960 g     F .text	00000004 __sfp_lock_acquire
010003c0 g     F .text	000000d8 makeNewPlayer
0100cbe4 g     F .text	000000e4 memchr
01017ddc g     F .text	00000078 alt_up_character_lcd_write
010065b4 g     F .text	00001eac ___vfprintf_internal_r
0100ec58 g     F .text	00000060 _sprintf_r
0100bf30 g     F .text	00000314 _free_r
0101ab06 g     O .rwdata	00000020 EP_Descr
010027c4 g     F .text	00000128 help_devreq
01009d44 g     F .text	000001b0 __call_exitprocs
0101e8f4 g     O .bss	00000004 inflight
0101e910 g     O .bss	00000004 __mlocale_changed
0101c95c g     O .rwdata	00000004 __malloc_sbrk_base
010001c4 g     F .text	0000004c _start
0101e930 g     O .bss	00000004 _alt_tick_rate
01004ea4 g     F .text	000000bc usb_check_send
010106d8 g     F .text	00000318 _strtoll_r
01005130 g     F .text	0000001c Isr_Ep08Done
0100d6ec g     F .text	0000014c __lshift
0101e934 g     O .bss	00000004 _alt_nticks
01003940 g     F .text	0000015c Hal4D13_WriteEndpoint
0100eb50 g     F .text	0000001c signal
01016874 g     F .text	00000120 read
01016cf4 g     F .text	0000037c alt_sys_init
01018040 g     F .text	000000b0 alt_up_character_lcd_shift_display
01004318 g     F .text	00000048 Hal4D13_SingleTransmitEP0
010006a4 g     F .text	0000009c usb_send_queue_pop
01019a64 g     F .text	00000134 __register_exitproc
0101870c g     F .text	00000058 alt_up_ps2_clear_fifo
01004970 g     F .text	00000030 Isr_SHORT_PACKET
0100d838 g     F .text	000001e8 __multiply
010180f0 g     F .text	00000090 alt_up_character_lcd_erase_pos
01003e20 g     F .text	00000080 Hal4D13_SetEndpointStatus
01017584 g     F .text	00000074 altera_avalon_jtag_uart_close
0101aa6c g       *ABS*	00000000 __ram_rwdata_start
0101aca0 g     O .rwdata	00000040 VendorDeviceRequest
01019b9c g       *ABS*	00000000 __ram_rodata_start
0101e938 g     O .bss	00000028 __malloc_current_mallinfo
0100d3e4 g     F .text	0000017c __d2b
0101e8b8 g     O .bss	00000004 usb_recv_cb
01002920 g     F .text	0000005c connect_USB
0101c944 g     O .rwdata	00000001 INT_Enabled
010170a8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
010109f0 g     F .text	00000230 _strtoul_r
01019894 g     F .text	000000b8 alt_get_fd
0101e8e0 g     O .bss	00000004 usb_send_cb_context
010046e4 g     F .text	000001b8 usb_isr
01018d80 g     F .text	0000014c alt_busy_sleep
01015ba8 g     F .text	000000c8 __fpcmp_parts_d
010124ac g     F .text	00000070 _close_r
01005184 g     F .text	0000001c Isr_Ep0BDone
01005418 g     F .text	00000028 usb_fifo_peek
01004504 g     F .text	0000003c Hal4D13_StallEP0InControlRead
010199f0 g     F .text	00000074 memcmp
01017158 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01020514 g       *ABS*	00000000 __alt_stack_base
010171a0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01009c04 g     F .text	0000013c __swsetup_r
0101ac4c g     O .rwdata	00000010 _NAME_USB_REQUEST_RECIPIENT
01004c8c g     F .text	00000218 Isr_Ep00TxDone
01014a94 g     F .text	00000258 __divdf3
0100bad8 g     F .text	000000f0 __sfp
0101c940 g     O .rwdata	00000004 _NAME_USB_CLASS_REQUEST
0100d248 g     F .text	00000058 __copybits
0101b120 g     O .rwdata	00000408 __malloc_av_
01001678 g     F .text	00000228 Chap9_SetFeature
0100b96c g     F .text	00000004 __sinit_lock_release
010146d0 g     F .text	000003c4 __muldf3
0100eda4 g     F .text	00000060 __sread
0100bdc4 g     F .text	00000040 fread
01019774 g     F .text	00000120 alt_find_file
010051bc g     F .text	0000001c Isr_Ep0DDone
01018f10 g     F .text	000000b4 alt_dev_llist_insert
01016834 g     F .text	00000020 __malloc_lock
01016a54 g     F .text	000000bc sbrk
01004a88 g     F .text	00000204 Isr_Ep00RxDone
0100489c g     F .text	000000a4 Isr_BusReset
0101c924 g     O .rwdata	00000004 packet_size
0100b6d8 g     F .text	000001fc _fflush_r
01005750 g     F .text	000000b4 _calloc_r
0101ed84 g     O .bss	00000400 IsoInDataBuff
01003d50 g     F .text	00000068 Hal4D13_GetEndpointStatusWInteruptClear
0100211c g     F .text	00000090 Chap9_StallEP0
0101e8b4 g       *ABS*	00000000 __bss_start
010060b0 g     F .text	00000098 memset
010032c4 g     F .text	00000054 Hal4D13_SetMode
01000270 g     F .text	00000150 main
0101e924 g     O .bss	00000004 alt_envp
0101e904 g     O .bss	00000004 __malloc_max_total_mem
010189ac g     F .text	00000040 alt_up_char_buffer_open_dev
01017100 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0101e8e4 g     O .bss	00000004 usb_recv_cb_context
01012418 g     F .text	0000001c __swbuf
01014154 g     F .text	00000078 __ltsf2
0100bbc8 g     F .text	000001fc _fread_r
01004fc0 g     F .text	00000068 Isr_Ep02Done
01017f90 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01000620 g     F .text	00000084 usb_recv_queue_push
0100ecb8 g     F .text	00000008 __sclose
017ff800 g       *ABS*	00000000 __alt_heap_limit
01004218 g     F .text	00000068 Hal4D13_GetEndpointConfig
01005340 g     F .text	000000d8 usb_fifo_pop
0101262c g     F .text	00000014 fclose
01018690 g     F .text	0000007c alt_up_ps2_read_data_byte
01002e38 g     F .text	000000f0 setup_dma_request
01010470 g     F .text	00000244 _strtol_r
010151ec g     F .text	00000074 __truncdfsf2
01017b50 g     F .text	000000a4 alt_timestamp_start
01020384 g     O .bss	00000190 _atexit0
0100a124 g     F .text	000015b4 _dtoa_r
010058d0 g     F .text	00000740 _malloc_r
0101aaf4 g     O .rwdata	00000009 InterfaceDescr0
0101c980 g     O .rwdata	00000004 alt_errno
01003378 g     F .text	00000060 Hal4D13_GetAddress
01010f34 g     F .text	000000dc __submore
01005880 g     F .text	00000028 _fiprintf_r
0100e9d8 g     F .text	00000010 _init_signal
0100c7a8 g     F .text	000000b8 _fwalk
0101e8ec g     O .bss	00000001 IsoMode
0100cba4 g     F .text	00000040 _mbtowc_r
010188a8 g     F .text	00000040 alt_up_ps2_open_dev
0100dd9c g     F .text	00000104 putc
01015470 g     F .text	00000060 __divsi3
0101a830 g     O .rodata	00000014 __thenan_df
010044c8 g     F .text	0000003c Hal4D13_StallEP0InControlWrite
01017d9c g     F .text	00000040 alt_up_character_lcd_open_dev
0100be04 g     F .text	0000012c _malloc_trim_r
010183e0 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
01019b9c g       *ABS*	00000000 __CTOR_END__
0101aafd g     O .rwdata	00000009 InterfaceDescr1
01017d68 g     F .text	00000034 alt_up_character_lcd_init
01006384 g     F .text	000000bc strcmp
010049a0 g     F .text	000000cc Isr_DmaEot
01019b9c g       *ABS*	00000000 __flash_rodata_start
01019b9c g       *ABS*	00000000 __DTOR_LIST__
010045d0 g     F .text	0000004c Read_HC_Config_Reg
01003594 g     F .text	00000040 Hal4D13_ValidBuffer
0100415c g     F .text	00000054 Hal4D13_ReadChipID
01002700 g     F .text	000000c4 DeviceRequest_Handler
01003a9c g     F .text	0000011c Hal4D13_WriteBulkEndpoint
01014d74 g     F .text	00000088 __nedf2
01016cc0 g     F .text	00000034 alt_irq_init
010169f4 g     F .text	00000060 alt_release_fd
010182b4 g     F .text	00000034 read_data_valid
0100ebe4 g     F .text	00000074 sprintf
01018180 g     F .text	00000034 alt_up_character_lcd_cursor_off
0101a844 g     O .rodata	00000100 __clz_tab
0101e914 g     O .bss	00000004 _PathLocale
01010330 g     F .text	00000124 strtof
01018574 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
010199dc g     F .text	00000014 atexit
01003270 g     F .text	00000054 Hal4D13_SetDevConfig
01012434 g     F .text	00000078 _write_r
0100321c g     F .text	00000054 Hal4D13_GetDevConfig
0100c934 g     F .text	0000001c setlocale
01004540 g     F .text	00000040 Hal4D13_IsSetupPktInvalid
01004f60 g     F .text	00000060 Isr_Ep01Done
0100633c g     F .text	00000048 scanf
0100557c g     F .text	00000140 usb_recv
0101e960 g     O .bss	00000024 ControlData
0100e88c g     F .text	00000008 nanf
0101c950 g     O .rwdata	00000004 _impure_ptr
0101e91c g     O .bss	00000004 alt_argc
0100cae4 g     F .text	00000080 _mbrtowc_r
0101e928 g     O .bss	00000004 altera_avalon_timer_ts_base
01019088 g     F .text	00000064 _do_dtors
01005088 g     F .text	0000005c Isr_Ep05Done
0100e57c g     F .text	000001c4 __srefill_r
01001cac g     F .text	000000c0 Chap9_GetConfiguration
01000020 g       .exceptions	00000000 alt_irq_entry
010010bc g     F .text	000000f4 Hal4D13_WriteISOEndpoint
0100cf64 g     F .text	00000080 __ulp
0100e75c g     F .text	00000040 __isinfd
0100ba24 g     F .text	00000018 __fp_unlock_all
0101c96c g     O .rwdata	00000008 alt_fs_list
0101aa7e g     O .rwdata	0000002e ConfigDescr_a
0101ab70 g     O .rwdata	00000012 strConfiguration
010007dc g     F .text	00000130 usb_device_send
01000020 g       *ABS*	00000000 __ram_exceptions_start
0100c8a0 g     F .text	00000010 localeconv
01017bf4 g     F .text	0000009c alt_timestamp
0101ac6c g     O .rwdata	00000034 _NAME_USB_STANDARD_REQUEST
010126d8 g     F .text	00000068 __hexdig_init
01004280 g     F .text	00000060 Hal4D13_SetEndpointConfig
0101c990 g       *ABS*	00000000 _edata
0100466c g     F .text	00000044 usb_reenable_all_interrupts
01020514 g       *ABS*	00000000 _end
010001c4 g       *ABS*	00000000 __ram_exceptions_end
01009b90 g     F .text	00000074 vfscanf
010175f8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01004580 g     F .text	00000050 Write_HC_Config_Reg
01000a94 g     F .text	00000084 usb_send_queue_push
010033d8 g     F .text	00000084 Hal4D13_SetAddressEnable
01000498 g     F .text	00000090 isNewPlayer
0100ed28 g     F .text	0000007c __swrite
0101e8e8 g     O .bss	00000003 bUSBCheck_Device_State
0101c958 g     O .rwdata	00000004 __malloc_trim_threshold
01004044 g     F .text	00000054 Hal4D13_SetDataToChipRam
01019754 g     F .text	00000020 altera_nios2_qsys_irq_init
01001f78 g     F .text	000000a4 Chap9_GetInterface
00000000 g       *ABS*	00000000 __alt_mem_onchip
01005804 g     F .text	00000038 exit
0100583c g     F .text	00000044 fiprintf
010054b8 g     F .text	000000c4 usb_send
01006540 g     F .text	0000001c _vfiprintf_r
0100c6e0 g     F .text	000000c8 _fwalk_reent
01018314 g     F .text	000000cc alt_up_ps2_init
0100d560 g     F .text	0000018c __mdiff
010154d0 g     F .text	00000060 __modsi3
017ff800 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100b964 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
01005440 g     F .text	00000078 make_packet
01017e54 g     F .text	00000078 alt_up_character_lcd_string
0100351c g     F .text	00000038 Hal4D13_AcknowledgeSETUP
0100e7cc g     F .text	000000c0 __sccl
01002f88 g     F .text	0000009c D13Bus_SingleTransmitEP0
01003f9c g     F .text	00000054 Hal4D13_GetDMACounter
0101a3c4 g     O .rodata	00000101 _ctype_
01015688 g     F .text	000000a8 __fpcmp_parts_f
0100e79c g     F .text	00000030 __isnand
01015f98 g     F .text	00000020 _exit
01018c2c g     F .text	00000154 alt_alarm_start
01003db8 g     F .text	00000068 Hal4D13_GetEndpointStatusWOInteruptClear
0101339c g     F .text	00000098 __muldi3
0101c92a g     O .rwdata	00000002 IsoOutPattern
0100c950 g     F .text	00000194 __smakebuf_r
010005ec g     F .text	00000034 usb_register_send_callback
01018504 g     F .text	00000070 alt_up_ps2_wait_for_ack
010064cc g     F .text	00000074 strlen
0100e974 g     F .text	00000064 _init_signal_r
010193c8 g     F .text	00000188 open
01014e84 g     F .text	00000088 __gedf2
010127f0 g     F .text	000007b8 __gethex
010011b0 g     F .text	00000290 Chap9_GetStatus
01005720 g     F .text	00000014 __assert
01019180 g     F .text	00000030 alt_icache_flush_all
01017f18 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101aaac g     O .rwdata	00000048 ConfigDescr
01008460 g     F .text	00000024 __vfprintf_internal
01018764 g     F .text	0000009c alt_up_ps2_read_fd
010145dc g     F .text	00000080 __subdf3
0101f184 g     O .bss	00001000 return_buf
0100ce40 g     F .text	000000c4 __lo0bits
01008484 g     F .text	00001680 __svfscanf_r
0101c988 g     O .rwdata	00000008 alt_alarm_list
01011010 g     F .text	0000019c _ungetc_r
01019024 g     F .text	00000064 _do_ctors
0100ea9c g     F .text	00000014 __sigtramp
0101e8f8 g     O .bss	00000004 status
0100381c g     F .text	00000124 Hal4D13_ReadEndpointWOClearBuffer
01004a6c g     F .text	0000001c Isr_SOF
01015dd0 g     F .text	000000fc close
010031a8 g     F .text	0000003c Hal4D13_AcquireD13
01001d6c g     F .text	0000020c Chap9_SetConfiguration
0101658c g     F .text	00000080 alt_load
0101575c g     F .text	00000314 __pack_d
010046b0 g     F .text	00000034 fn_usb_isr
0101c92e g     O .rwdata	00000004 strLanguage
0101c93c g     O .rwdata	00000004 ClassDeviceRequest
0100e960 g     F .text	00000014 raise
010058a8 g     F .text	00000014 free
0100b968 g     F .text	00000004 __sinit_lock_acquire
0100da5c g     F .text	00000100 __multadd
0100cda8 g     F .text	00000028 _Bfree
0101e8b4 g     O .bss	00000004 usb_initialized
01002f28 g     F .text	00000038 get_firmware_version



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08407114 	ori	at,at,452
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        movhi et, %hiadj(__alt_exception_stack_pointer - 80)
 1000020:	06006034 	movhi	et,384
        addi  et, et, %lo(__alt_exception_stack_pointer - 80) 
 1000024:	c63fec04 	addi	et,et,-80
        stw   sp, 76(et)
 1000028:	c6c01315 	stw	sp,76(et)
        mov   sp, et
 100002c:	c037883a 	mov	sp,et

#endif

#endif

        stw   ra,  0(sp)
 1000030:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000034:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 1000038:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 100003c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000040:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000044:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 1000048:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 100004c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000050:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000054:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 1000058:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 100005c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000060:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000064:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 1000068:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 100006c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000070:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000074:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 1000078:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 100007c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000080:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000084:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 1000088:	10000326 	beq	r2,zero,1000098 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
 100008c:	20000226 	beq	r4,zero,1000098 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000090:	10000f80 	call	10000f8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000094:	00000306 	br	10000a4 <alt_exception+0x84>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 1000098:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 100009c:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 10000a0:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000a8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000ac:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000b8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000bc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000c8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000cc:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000d0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000d8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000dc:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000e8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000ec:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)
 10000f0:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f4:	ef80083a 	eret

010000f8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000f8:	defff904 	addi	sp,sp,-28
 10000fc:	dfc00615 	stw	ra,24(sp)
 1000100:	df000515 	stw	fp,20(sp)
 1000104:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000108:	0005313a 	rdctl	r2,ipending
 100010c:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000110:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000114:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000118:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 100011c:	00800044 	movi	r2,1
 1000120:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000124:	e0ffff17 	ldw	r3,-4(fp)
 1000128:	e0bffe17 	ldw	r2,-8(fp)
 100012c:	1884703a 	and	r2,r3,r2
 1000130:	1005003a 	cmpeq	r2,r2,zero
 1000134:	1000171e 	bne	r2,zero,1000194 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1000138:	e0bffd17 	ldw	r2,-12(fp)
 100013c:	00c040b4 	movhi	r3,258
 1000140:	18c0a104 	addi	r3,r3,644
 1000144:	100490fa 	slli	r2,r2,3
 1000148:	10c5883a 	add	r2,r2,r3
 100014c:	11800017 	ldw	r6,0(r2)
 1000150:	e0bffd17 	ldw	r2,-12(fp)
 1000154:	00c040b4 	movhi	r3,258
 1000158:	18c0a104 	addi	r3,r3,644
 100015c:	100490fa 	slli	r2,r2,3
 1000160:	10c5883a 	add	r2,r2,r3
 1000164:	10800104 	addi	r2,r2,4
 1000168:	11000017 	ldw	r4,0(r2)
 100016c:	e17ffd17 	ldw	r5,-12(fp)
 1000170:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000174:	0005313a 	rdctl	r2,ipending
 1000178:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100017c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000180:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	1004c03a 	cmpne	r2,r2,zero
 100018c:	103fe21e 	bne	r2,zero,1000118 <alt_irq_handler+0x20>
 1000190:	00000706 	br	10001b0 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000194:	e0bffe17 	ldw	r2,-8(fp)
 1000198:	1085883a 	add	r2,r2,r2
 100019c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 10001a0:	e0bffd17 	ldw	r2,-12(fp)
 10001a4:	10800044 	addi	r2,r2,1
 10001a8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001ac:	003fdd06 	br	1000124 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001b0:	e037883a 	mov	sp,fp
 10001b4:	dfc00117 	ldw	ra,4(sp)
 10001b8:	df000017 	ldw	fp,0(sp)
 10001bc:	dec00204 	addi	sp,sp,8
 10001c0:	f800283a 	ret

Disassembly of section .text:

010001c4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001c4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001c8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001cc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001d0:	00bffd16 	blt	zero,r2,10001c8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001d4:	06c05ff4 	movhi	sp,383
    ori sp, sp, %lo(__alt_stack_pointer)
 10001d8:	defe0014 	ori	sp,sp,63488

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001dc:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001e0:	d6924914 	ori	gp,gp,18724
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001e4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001e8:	10ba2d14 	ori	r2,r2,59572

    movhi r3, %hi(__bss_end)
 10001ec:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001f0:	18c14514 	ori	r3,r3,1300

    beq r2, r3, 1f
 10001f4:	10c00326 	beq	r2,r3,1000204 <_start+0x40>

0:
    stw zero, (r2)
 10001f8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001fc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000200:	10fffd36 	bltu	r2,r3,10001f8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000204:	101658c0 	call	101658c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000208:	10167c80 	call	10167c8 <alt_main>

0100020c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100020c:	003fff06 	br	100020c <alt_after_alt_main>

01000210 <asciify>:
#include "player.h"
#include "unistd.h"

#include <assert.h>

char asciify(char c) {
 1000210:	defffd04 	addi	sp,sp,-12
 1000214:	df000215 	stw	fp,8(sp)
 1000218:	df000204 	addi	fp,sp,8
 100021c:	e13ffe05 	stb	r4,-8(fp)
	if (0x0 <= c && 0xa > c)
 1000220:	e0bffe07 	ldb	r2,-8(fp)
 1000224:	1004803a 	cmplt	r2,r2,zero
 1000228:	10000a1e 	bne	r2,zero,1000254 <asciify+0x44>
 100022c:	e0bffe07 	ldb	r2,-8(fp)
 1000230:	10800288 	cmpgei	r2,r2,10
 1000234:	1000071e 	bne	r2,zero,1000254 <asciify+0x44>
		return c | 0x30;
 1000238:	e0bffe03 	ldbu	r2,-8(fp)
 100023c:	10800c14 	ori	r2,r2,48
 1000240:	10803fcc 	andi	r2,r2,255
 1000244:	1080201c 	xori	r2,r2,128
 1000248:	10bfe004 	addi	r2,r2,-128
 100024c:	e0bfff15 	stw	r2,-4(fp)
 1000250:	00000206 	br	100025c <asciify+0x4c>
	return c;
 1000254:	e0bffe07 	ldb	r2,-8(fp)
 1000258:	e0bfff15 	stw	r2,-4(fp)
 100025c:	e0bfff17 	ldw	r2,-4(fp)
}
 1000260:	e037883a 	mov	sp,fp
 1000264:	df000017 	ldw	fp,0(sp)
 1000268:	dec00104 	addi	sp,sp,4
 100026c:	f800283a 	ret

01000270 <main>:

int main() {
 1000270:	deffc804 	addi	sp,sp,-224
 1000274:	dfc03715 	stw	ra,220(sp)
 1000278:	df003615 	stw	fp,216(sp)
 100027c:	df003604 	addi	fp,sp,216
	int i, index;
	int targetID;
	int numOfPlayers = 0;
 1000280:	e03fcf15 	stw	zero,-196(fp)
	unsigned char protocol;
	char* androidID = (char*) malloc(sizeof(char) * 17);
 1000284:	01000444 	movi	r4,17
 1000288:	10058bc0 	call	10058bc <malloc>
 100028c:	e0bfcd15 	stw	r2,-204(fp)
	player_t player_list[10];
	packet* p = (packet*) malloc(sizeof(packet));
 1000290:	01000204 	movi	r4,8
 1000294:	10058bc0 	call	10058bc <malloc>
 1000298:	e0bfcc15 	stw	r2,-208(fp)
	p->data = (char*) malloc(sizeof(char) * 100);
 100029c:	01001904 	movi	r4,100
 10002a0:	10058bc0 	call	10058bc <malloc>
 10002a4:	1007883a 	mov	r3,r2
 10002a8:	e0bfcc17 	ldw	r2,-208(fp)
 10002ac:	10c00115 	stw	r3,4(r2)
	i = 0;
 10002b0:	e03fd115 	stw	zero,-188(fp)

	printf("USB Initialization\n");
 10002b4:	010040b4 	movhi	r4,258
 10002b8:	2126e704 	addi	r4,r4,-25700
 10002bc:	10062840 	call	1006284 <puts>
	alt_up_usb_dev * usb_dev;
	usb_dev = alt_up_usb_open_dev(USB_0_NAME);
 10002c0:	010040b4 	movhi	r4,258
 10002c4:	2126ec04 	addi	r4,r4,-25680
 10002c8:	10188e80 	call	10188e8 <alt_up_usb_open_dev>
 10002cc:	e0bfcb15 	stw	r2,-212(fp)
	usb_device_init(usb_dev, USB_0_IRQ);
 10002d0:	e13fcb17 	ldw	r4,-212(fp)
 10002d4:	01400104 	movi	r5,4
 10002d8:	1000b700 	call	1000b70 <usb_device_init>

	printf("Polling USB device.  Run middleman now!\n");
 10002dc:	010040b4 	movhi	r4,258
 10002e0:	2126ef04 	addi	r4,r4,-25668
 10002e4:	10062840 	call	1006284 <puts>
	alt_timestamp_start();
 10002e8:	1017b500 	call	1017b50 <alt_timestamp_start>
	int clocks = 0;
 10002ec:	e03fca15 	stw	zero,-216(fp)
	while (clocks < 50000000 * 5) {
 10002f0:	00000306 	br	1000300 <main+0x90>
		clocks = alt_timestamp();
 10002f4:	1017bf40 	call	1017bf4 <alt_timestamp>
 10002f8:	e0bfca15 	stw	r2,-216(fp)
		usb_device_poll();
 10002fc:	1000c580 	call	1000c58 <usb_device_poll>
	usb_device_init(usb_dev, USB_0_IRQ);

	printf("Polling USB device.  Run middleman now!\n");
	alt_timestamp_start();
	int clocks = 0;
	while (clocks < 50000000 * 5) {
 1000300:	e0ffca17 	ldw	r3,-216(fp)
 1000304:	0083b9f4 	movhi	r2,3815
 1000308:	10ac9fc4 	addi	r2,r2,-19841
 100030c:	10fff90e 	bge	r2,r3,10002f4 <main+0x84>
		clocks = alt_timestamp();
		usb_device_poll();
	}
	printf("Done polling USB\n");
 1000310:	010040b4 	movhi	r4,258
 1000314:	2126f904 	addi	r4,r4,-25628
 1000318:	10062840 	call	1006284 <puts>

	printf("Initializing loop\n");
 100031c:	010040b4 	movhi	r4,258
 1000320:	2126fe04 	addi	r4,r4,-25608
 1000324:	10062840 	call	1006284 <puts>
 1000328:	00000006 	br	100032c <main+0xbc>

	while (1) {
		if (!usb_recv_queue_is_empty()) {
 100032c:	1000b440 	call	1000b44 <usb_recv_queue_is_empty>
 1000330:	1004c03a 	cmpne	r2,r2,zero
 1000334:	103ffd1e 	bne	r2,zero,100032c <main+0xbc>
			p = usb_recv();
 1000338:	100557c0 	call	100557c <usb_recv>
 100033c:	e0bfcc15 	stw	r2,-208(fp)
			 break;
			 default:
			 printf("Unknown protocol found: %c\n", protocol);
			 break;
			 }*/
			printf("Current session: %d sent %s\n", p->client_id, p->data);
 1000340:	e0bfcc17 	ldw	r2,-208(fp)
 1000344:	10800003 	ldbu	r2,0(r2)
 1000348:	11403fcc 	andi	r5,r2,255
 100034c:	e0bfcc17 	ldw	r2,-208(fp)
 1000350:	11800117 	ldw	r6,4(r2)
 1000354:	010040b4 	movhi	r4,258
 1000358:	21270304 	addi	r4,r4,-25588
 100035c:	10061480 	call	1006148 <printf>
			char data[100];
			printf("Enter Client ID");
 1000360:	010040b4 	movhi	r4,258
 1000364:	21270b04 	addi	r4,r4,-25556
 1000368:	10061480 	call	1006148 <printf>
			scanf("%d", &targetID);
 100036c:	e17fd204 	addi	r5,fp,-184
 1000370:	010040b4 	movhi	r4,258
 1000374:	21270f04 	addi	r4,r4,-25540
 1000378:	100633c0 	call	100633c <scanf>
			printf("Enter Data");
 100037c:	010040b4 	movhi	r4,258
 1000380:	21271004 	addi	r4,r4,-25536
 1000384:	10061480 	call	1006148 <printf>
			scanf("%s", data);
 1000388:	e17fe704 	addi	r5,fp,-100
 100038c:	010040b4 	movhi	r4,258
 1000390:	21271304 	addi	r4,r4,-25524
 1000394:	100633c0 	call	100633c <scanf>
			p = make_packet(targetID, data);
 1000398:	e0bfd217 	ldw	r2,-184(fp)
 100039c:	11003fcc 	andi	r4,r2,255
 10003a0:	2100201c 	xori	r4,r4,128
 10003a4:	213fe004 	addi	r4,r4,-128
 10003a8:	e17fe704 	addi	r5,fp,-100
 10003ac:	10054400 	call	1005440 <make_packet>
 10003b0:	e0bfcc15 	stw	r2,-208(fp)
			usb_send(p);
 10003b4:	e13fcc17 	ldw	r4,-208(fp)
 10003b8:	10054b80 	call	10054b8 <usb_send>
		}
	}
 10003bc:	003fdb06 	br	100032c <main+0xbc>

010003c0 <makeNewPlayer>:
 */

#include "player.h"

void makeNewPlayer(player_t list[], int* numberOfPlayers, int clientID,
		char* androidID) {
 10003c0:	defff704 	addi	sp,sp,-36
 10003c4:	dfc00815 	stw	ra,32(sp)
 10003c8:	df000715 	stw	fp,28(sp)
 10003cc:	df000704 	addi	fp,sp,28
 10003d0:	e13ffc15 	stw	r4,-16(fp)
 10003d4:	e17ffd15 	stw	r5,-12(fp)
 10003d8:	e1bffe15 	stw	r6,-8(fp)
 10003dc:	e1ffff15 	stw	r7,-4(fp)
	int i = isNewPlayer(list, *numberOfPlayers, androidID);
 10003e0:	e0bffd17 	ldw	r2,-12(fp)
 10003e4:	11400017 	ldw	r5,0(r2)
 10003e8:	e13ffc17 	ldw	r4,-16(fp)
 10003ec:	e1bfff17 	ldw	r6,-4(fp)
 10003f0:	10004980 	call	1000498 <isNewPlayer>
 10003f4:	e0bff915 	stw	r2,-28(fp)
	if (i == -1) {
 10003f8:	e0bff917 	ldw	r2,-28(fp)
 10003fc:	10bfffd8 	cmpnei	r2,r2,-1
 1000400:	1000191e 	bne	r2,zero,1000468 <makeNewPlayer+0xa8>
		player_t player = { clientID, 0 };
 1000404:	e0bffe17 	ldw	r2,-8(fp)
 1000408:	e0bffa05 	stb	r2,-24(fp)
 100040c:	e03ffb15 	stw	zero,-20(fp)
		player.android_id = (char*) malloc(sizeof(char) * 17);
 1000410:	01000444 	movi	r4,17
 1000414:	10058bc0 	call	10058bc <malloc>
 1000418:	e0bffb15 	stw	r2,-20(fp)
		strcpy(player.android_id, androidID);
 100041c:	e13ffb17 	ldw	r4,-20(fp)
 1000420:	e17fff17 	ldw	r5,-4(fp)
 1000424:	10064400 	call	1006440 <strcpy>
		list[*numberOfPlayers] = player;
 1000428:	e0bffd17 	ldw	r2,-12(fp)
 100042c:	10800017 	ldw	r2,0(r2)
 1000430:	100490fa 	slli	r2,r2,3
 1000434:	1007883a 	mov	r3,r2
 1000438:	e0bffc17 	ldw	r2,-16(fp)
 100043c:	1887883a 	add	r3,r3,r2
 1000440:	e0bffa17 	ldw	r2,-24(fp)
 1000444:	18800015 	stw	r2,0(r3)
 1000448:	e0bffb17 	ldw	r2,-20(fp)
 100044c:	18800115 	stw	r2,4(r3)
		(*numberOfPlayers)++;
 1000450:	e0bffd17 	ldw	r2,-12(fp)
 1000454:	10800017 	ldw	r2,0(r2)
 1000458:	10c00044 	addi	r3,r2,1
 100045c:	e0bffd17 	ldw	r2,-12(fp)
 1000460:	10c00015 	stw	r3,0(r2)
 1000464:	00000706 	br	1000484 <makeNewPlayer+0xc4>
	} else {
		list[i].client_id = clientID;
 1000468:	e0bff917 	ldw	r2,-28(fp)
 100046c:	100490fa 	slli	r2,r2,3
 1000470:	1007883a 	mov	r3,r2
 1000474:	e0bffc17 	ldw	r2,-16(fp)
 1000478:	1887883a 	add	r3,r3,r2
 100047c:	e0bffe17 	ldw	r2,-8(fp)
 1000480:	18800005 	stb	r2,0(r3)
	}
}
 1000484:	e037883a 	mov	sp,fp
 1000488:	dfc00117 	ldw	ra,4(sp)
 100048c:	df000017 	ldw	fp,0(sp)
 1000490:	dec00204 	addi	sp,sp,8
 1000494:	f800283a 	ret

01000498 <isNewPlayer>:

int isNewPlayer(player_t list[], int numberOfPlayers, char* androidID) {
 1000498:	defff904 	addi	sp,sp,-28
 100049c:	dfc00615 	stw	ra,24(sp)
 10004a0:	df000515 	stw	fp,20(sp)
 10004a4:	df000504 	addi	fp,sp,20
 10004a8:	e13ffc15 	stw	r4,-16(fp)
 10004ac:	e17ffd15 	stw	r5,-12(fp)
 10004b0:	e1bffe15 	stw	r6,-8(fp)
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 10004b4:	e03ffb15 	stw	zero,-20(fp)
 10004b8:	00001006 	br	10004fc <isNewPlayer+0x64>
		if (strcmp(list[i].android_id, androidID) == 0)
 10004bc:	e0bffb17 	ldw	r2,-20(fp)
 10004c0:	100490fa 	slli	r2,r2,3
 10004c4:	1007883a 	mov	r3,r2
 10004c8:	e0bffc17 	ldw	r2,-16(fp)
 10004cc:	1885883a 	add	r2,r3,r2
 10004d0:	11000117 	ldw	r4,4(r2)
 10004d4:	e17ffe17 	ldw	r5,-8(fp)
 10004d8:	10063840 	call	1006384 <strcmp>
 10004dc:	1004c03a 	cmpne	r2,r2,zero
 10004e0:	1000031e 	bne	r2,zero,10004f0 <isNewPlayer+0x58>
			return i;
 10004e4:	e0bffb17 	ldw	r2,-20(fp)
 10004e8:	e0bfff15 	stw	r2,-4(fp)
 10004ec:	00000806 	br	1000510 <isNewPlayer+0x78>
	}
}

int isNewPlayer(player_t list[], int numberOfPlayers, char* androidID) {
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 10004f0:	e0bffb17 	ldw	r2,-20(fp)
 10004f4:	10800044 	addi	r2,r2,1
 10004f8:	e0bffb15 	stw	r2,-20(fp)
 10004fc:	e0fffb17 	ldw	r3,-20(fp)
 1000500:	e0bffd17 	ldw	r2,-12(fp)
 1000504:	18bfed16 	blt	r3,r2,10004bc <isNewPlayer+0x24>
		if (strcmp(list[i].android_id, androidID) == 0)
			return i;
	}
	return -1;
 1000508:	00bfffc4 	movi	r2,-1
 100050c:	e0bfff15 	stw	r2,-4(fp)
 1000510:	e0bfff17 	ldw	r2,-4(fp)
}
 1000514:	e037883a 	mov	sp,fp
 1000518:	dfc00117 	ldw	ra,4(sp)
 100051c:	df000017 	ldw	fp,0(sp)
 1000520:	dec00204 	addi	sp,sp,8
 1000524:	f800283a 	ret

01000528 <findChallengeIndex>:

int findChallengeIndex(player_t list[], int numberOfPlayers, char* androidID) {
 1000528:	defff904 	addi	sp,sp,-28
 100052c:	dfc00615 	stw	ra,24(sp)
 1000530:	df000515 	stw	fp,20(sp)
 1000534:	df000504 	addi	fp,sp,20
 1000538:	e13ffc15 	stw	r4,-16(fp)
 100053c:	e17ffd15 	stw	r5,-12(fp)
 1000540:	e1bffe15 	stw	r6,-8(fp)
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 1000544:	e03ffb15 	stw	zero,-20(fp)
 1000548:	00001006 	br	100058c <findChallengeIndex+0x64>
		if (strcpy(list[i].android_id, androidID) == 0)
 100054c:	e0bffb17 	ldw	r2,-20(fp)
 1000550:	100490fa 	slli	r2,r2,3
 1000554:	1007883a 	mov	r3,r2
 1000558:	e0bffc17 	ldw	r2,-16(fp)
 100055c:	1885883a 	add	r2,r3,r2
 1000560:	11000117 	ldw	r4,4(r2)
 1000564:	e17ffe17 	ldw	r5,-8(fp)
 1000568:	10064400 	call	1006440 <strcpy>
 100056c:	1004c03a 	cmpne	r2,r2,zero
 1000570:	1000031e 	bne	r2,zero,1000580 <findChallengeIndex+0x58>
			return i;
 1000574:	e0bffb17 	ldw	r2,-20(fp)
 1000578:	e0bfff15 	stw	r2,-4(fp)
 100057c:	00000806 	br	10005a0 <findChallengeIndex+0x78>
	return -1;
}

int findChallengeIndex(player_t list[], int numberOfPlayers, char* androidID) {
	int i;
	for (i = 0; i < numberOfPlayers; i++) {
 1000580:	e0bffb17 	ldw	r2,-20(fp)
 1000584:	10800044 	addi	r2,r2,1
 1000588:	e0bffb15 	stw	r2,-20(fp)
 100058c:	e0fffb17 	ldw	r3,-20(fp)
 1000590:	e0bffd17 	ldw	r2,-12(fp)
 1000594:	18bfed16 	blt	r3,r2,100054c <findChallengeIndex+0x24>
		if (strcpy(list[i].android_id, androidID) == 0)
			return i;
	}
	return -1;
 1000598:	00bfffc4 	movi	r2,-1
 100059c:	e0bfff15 	stw	r2,-4(fp)
 10005a0:	e0bfff17 	ldw	r2,-4(fp)
}
 10005a4:	e037883a 	mov	sp,fp
 10005a8:	dfc00117 	ldw	ra,4(sp)
 10005ac:	df000017 	ldw	fp,0(sp)
 10005b0:	dec00204 	addi	sp,sp,8
 10005b4:	f800283a 	ret

010005b8 <usb_register_recv_callback>:
void (*usb_send_cb)(void*) = NULL;
void * usb_send_cb_context;

const int packet_size = 64;

void usb_register_recv_callback(void (*fcn)(void*), void * context) {
 10005b8:	defffd04 	addi	sp,sp,-12
 10005bc:	df000215 	stw	fp,8(sp)
 10005c0:	df000204 	addi	fp,sp,8
 10005c4:	e13ffe15 	stw	r4,-8(fp)
 10005c8:	e17fff15 	stw	r5,-4(fp)
	usb_recv_cb = fcn;
 10005cc:	e0bffe17 	ldw	r2,-8(fp)
 10005d0:	d0a7e515 	stw	r2,-24684(gp)
	usb_recv_cb_context = context;
 10005d4:	e0bfff17 	ldw	r2,-4(fp)
 10005d8:	d0a7f015 	stw	r2,-24640(gp)
}
 10005dc:	e037883a 	mov	sp,fp
 10005e0:	df000017 	ldw	fp,0(sp)
 10005e4:	dec00104 	addi	sp,sp,4
 10005e8:	f800283a 	ret

010005ec <usb_register_send_callback>:

void usb_register_send_callback(void (*fcn)(void*), void * context) {
 10005ec:	defffd04 	addi	sp,sp,-12
 10005f0:	df000215 	stw	fp,8(sp)
 10005f4:	df000204 	addi	fp,sp,8
 10005f8:	e13ffe15 	stw	r4,-8(fp)
 10005fc:	e17fff15 	stw	r5,-4(fp)
	usb_send_cb = fcn;
 1000600:	e0bffe17 	ldw	r2,-8(fp)
 1000604:	d0a7e615 	stw	r2,-24680(gp)
	usb_send_cb_context = context;
 1000608:	e0bfff17 	ldw	r2,-4(fp)
 100060c:	d0a7ef15 	stw	r2,-24644(gp)
}
 1000610:	e037883a 	mov	sp,fp
 1000614:	df000017 	ldw	fp,0(sp)
 1000618:	dec00104 	addi	sp,sp,4
 100061c:	f800283a 	ret

01000620 <usb_recv_queue_push>:

void usb_recv_queue_push(unsigned char * data, unsigned int len) {
 1000620:	defff904 	addi	sp,sp,-28
 1000624:	dfc00615 	stw	ra,24(sp)
 1000628:	df000515 	stw	fp,20(sp)
 100062c:	df000504 	addi	fp,sp,20
 1000630:	e13ffe15 	stw	r4,-8(fp)
 1000634:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000638:	0005303a 	rdctl	r2,status
 100063c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000640:	e0fffc17 	ldw	r3,-16(fp)
 1000644:	00bfff84 	movi	r2,-2
 1000648:	1884703a 	and	r2,r3,r2
 100064c:	1001703a 	wrctl	status,r2
  
  return context;
 1000650:	e0bffc17 	ldw	r2,-16(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 1000654:	e0bffd15 	stw	r2,-12(fp)
	usb_fifo_push(&usb_recv_queue, data, len);
 1000658:	d127eb04 	addi	r4,gp,-24660
 100065c:	e17ffe17 	ldw	r5,-8(fp)
 1000660:	e1bfff17 	ldw	r6,-4(fp)
 1000664:	10052240 	call	1005224 <usb_fifo_push>
	alt_irq_enable_all(c);
 1000668:	e0bffd17 	ldw	r2,-12(fp)
 100066c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000670:	e0bffb17 	ldw	r2,-20(fp)
 1000674:	1001703a 	wrctl	status,r2
	if (usb_recv_cb)
 1000678:	d0a7e517 	ldw	r2,-24684(gp)
 100067c:	1005003a 	cmpeq	r2,r2,zero
 1000680:	1000031e 	bne	r2,zero,1000690 <usb_recv_queue_push+0x70>
		usb_recv_cb(usb_recv_cb_context);
 1000684:	d0a7e517 	ldw	r2,-24684(gp)
 1000688:	d127f017 	ldw	r4,-24640(gp)
 100068c:	103ee83a 	callr	r2
}
 1000690:	e037883a 	mov	sp,fp
 1000694:	dfc00117 	ldw	ra,4(sp)
 1000698:	df000017 	ldw	fp,0(sp)
 100069c:	dec00204 	addi	sp,sp,8
 10006a0:	f800283a 	ret

010006a4 <usb_send_queue_pop>:

void usb_send_queue_pop(unsigned char ** data, unsigned int * len) {
 10006a4:	defff804 	addi	sp,sp,-32
 10006a8:	dfc00715 	stw	ra,28(sp)
 10006ac:	df000615 	stw	fp,24(sp)
 10006b0:	df000604 	addi	fp,sp,24
 10006b4:	e13ffe15 	stw	r4,-8(fp)
 10006b8:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10006bc:	0005303a 	rdctl	r2,status
 10006c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10006c4:	e0fffb17 	ldw	r3,-20(fp)
 10006c8:	00bfff84 	movi	r2,-2
 10006cc:	1884703a 	and	r2,r3,r2
 10006d0:	1001703a 	wrctl	status,r2
  
  return context;
 10006d4:	e0bffb17 	ldw	r2,-20(fp)
	unsigned int c;
	unsigned int offset;

	c = alt_irq_disable_all();
 10006d8:	e0bffc15 	stw	r2,-16(fp)
	usb_fifo_pop(&usb_send_queue, data, len, &offset);
 10006dc:	e1fffd04 	addi	r7,fp,-12
 10006e0:	d127e904 	addi	r4,gp,-24668
 10006e4:	e17ffe17 	ldw	r5,-8(fp)
 10006e8:	e1bfff17 	ldw	r6,-4(fp)
 10006ec:	10053400 	call	1005340 <usb_fifo_pop>
	alt_irq_enable_all(c);
 10006f0:	e0bffc17 	ldw	r2,-16(fp)
 10006f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10006f8:	e0bffa17 	ldw	r2,-24(fp)
 10006fc:	1001703a 	wrctl	status,r2

	assert(! offset);
 1000700:	e0bffd17 	ldw	r2,-12(fp)
 1000704:	1005003a 	cmpeq	r2,r2,zero
 1000708:	1000081e 	bne	r2,zero,100072c <usb_send_queue_pop+0x88>
 100070c:	010040b4 	movhi	r4,258
 1000710:	21271904 	addi	r4,r4,-25500
 1000714:	01401104 	movi	r5,68
 1000718:	018040b4 	movhi	r6,258
 100071c:	31a71404 	addi	r6,r6,-25520
 1000720:	01c040b4 	movhi	r7,258
 1000724:	39e71c04 	addi	r7,r7,-25488
 1000728:	10056bc0 	call	10056bc <__assert_func>
}
 100072c:	e037883a 	mov	sp,fp
 1000730:	dfc00117 	ldw	ra,4(sp)
 1000734:	df000017 	ldw	fp,0(sp)
 1000738:	dec00204 	addi	sp,sp,8
 100073c:	f800283a 	ret

01000740 <usb_recv_queue_pop>:

void usb_recv_queue_pop(unsigned char ** data, unsigned int * len) {
 1000740:	defff804 	addi	sp,sp,-32
 1000744:	dfc00715 	stw	ra,28(sp)
 1000748:	df000615 	stw	fp,24(sp)
 100074c:	df000604 	addi	fp,sp,24
 1000750:	e13ffe15 	stw	r4,-8(fp)
 1000754:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000758:	0005303a 	rdctl	r2,status
 100075c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000760:	e0fffb17 	ldw	r3,-20(fp)
 1000764:	00bfff84 	movi	r2,-2
 1000768:	1884703a 	and	r2,r3,r2
 100076c:	1001703a 	wrctl	status,r2
  
  return context;
 1000770:	e0bffb17 	ldw	r2,-20(fp)
	unsigned int c;
	unsigned int offset;

	c = alt_irq_disable_all();
 1000774:	e0bffc15 	stw	r2,-16(fp)
	usb_fifo_pop(&usb_recv_queue, data, len, &offset);
 1000778:	e1fffd04 	addi	r7,fp,-12
 100077c:	d127eb04 	addi	r4,gp,-24660
 1000780:	e17ffe17 	ldw	r5,-8(fp)
 1000784:	e1bfff17 	ldw	r6,-4(fp)
 1000788:	10053400 	call	1005340 <usb_fifo_pop>
	alt_irq_enable_all(c);
 100078c:	e0bffc17 	ldw	r2,-16(fp)
 1000790:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000794:	e0bffa17 	ldw	r2,-24(fp)
 1000798:	1001703a 	wrctl	status,r2

	assert(! offset);
 100079c:	e0bffd17 	ldw	r2,-12(fp)
 10007a0:	1005003a 	cmpeq	r2,r2,zero
 10007a4:	1000081e 	bne	r2,zero,10007c8 <usb_recv_queue_pop+0x88>
 10007a8:	010040b4 	movhi	r4,258
 10007ac:	21271904 	addi	r4,r4,-25500
 10007b0:	014013c4 	movi	r5,79
 10007b4:	018040b4 	movhi	r6,258
 10007b8:	31a71f04 	addi	r6,r6,-25476
 10007bc:	01c040b4 	movhi	r7,258
 10007c0:	39e71c04 	addi	r7,r7,-25488
 10007c4:	10056bc0 	call	10056bc <__assert_func>
}
 10007c8:	e037883a 	mov	sp,fp
 10007cc:	dfc00117 	ldw	ra,4(sp)
 10007d0:	df000017 	ldw	fp,0(sp)
 10007d4:	dec00204 	addi	sp,sp,8
 10007d8:	f800283a 	ret

010007dc <usb_device_send>:

void usb_device_send(unsigned char * buf, unsigned int len) {
 10007dc:	defff604 	addi	sp,sp,-40
 10007e0:	dfc00915 	stw	ra,36(sp)
 10007e4:	df000815 	stw	fp,32(sp)
 10007e8:	df000804 	addi	fp,sp,32
 10007ec:	e13ffe15 	stw	r4,-8(fp)
 10007f0:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10007f4:	0005303a 	rdctl	r2,status
 10007f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10007fc:	e0fff917 	ldw	r3,-28(fp)
 1000800:	00bfff84 	movi	r2,-2
 1000804:	1884703a 	and	r2,r3,r2
 1000808:	1001703a 	wrctl	status,r2
  
  return context;
 100080c:	e0bff917 	ldw	r2,-28(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 1000810:	e0bffd15 	stw	r2,-12(fp)

	unsigned int remaining = len;
 1000814:	e0bfff17 	ldw	r2,-4(fp)
 1000818:	e0bffc15 	stw	r2,-16(fp)
	while (remaining) {
 100081c:	00002f06 	br	10008dc <usb_device_send+0x100>
		// This packet size
		int size = packet_size;
 1000820:	d0a00017 	ldw	r2,-32768(gp)
 1000824:	e0bffb15 	stw	r2,-20(fp)
		if (remaining < size)
 1000828:	e0fffb17 	ldw	r3,-20(fp)
 100082c:	e0bffc17 	ldw	r2,-16(fp)
 1000830:	10c0022e 	bgeu	r2,r3,100083c <usb_device_send+0x60>
			size = remaining;
 1000834:	e0bffc17 	ldw	r2,-16(fp)
 1000838:	e0bffb15 	stw	r2,-20(fp)

		unsigned char * new_buf = calloc(sizeof(unsigned char), size);
 100083c:	e17ffb17 	ldw	r5,-20(fp)
 1000840:	01000044 	movi	r4,1
 1000844:	10057340 	call	1005734 <calloc>
 1000848:	e0bffa15 	stw	r2,-24(fp)
		assert(new_buf);
 100084c:	e0bffa17 	ldw	r2,-24(fp)
 1000850:	1004c03a 	cmpne	r2,r2,zero
 1000854:	1000081e 	bne	r2,zero,1000878 <usb_device_send+0x9c>
 1000858:	010040b4 	movhi	r4,258
 100085c:	21271904 	addi	r4,r4,-25500
 1000860:	01401784 	movi	r5,94
 1000864:	018040b4 	movhi	r6,258
 1000868:	31a72404 	addi	r6,r6,-25456
 100086c:	01c040b4 	movhi	r7,258
 1000870:	39e72804 	addi	r7,r7,-25440
 1000874:	10056bc0 	call	10056bc <__assert_func>
		memcpy(new_buf, buf + (len - remaining), size);
 1000878:	e0ffff17 	ldw	r3,-4(fp)
 100087c:	e0bffc17 	ldw	r2,-16(fp)
 1000880:	1885c83a 	sub	r2,r3,r2
 1000884:	1007883a 	mov	r3,r2
 1000888:	e0bffe17 	ldw	r2,-8(fp)
 100088c:	1887883a 	add	r3,r3,r2
 1000890:	e1bffb17 	ldw	r6,-20(fp)
 1000894:	e0bffa17 	ldw	r2,-24(fp)
 1000898:	1009883a 	mov	r4,r2
 100089c:	180b883a 	mov	r5,r3
 10008a0:	10060100 	call	1006010 <memcpy>
		usb_send_queue_push(new_buf, size);
 10008a4:	e17ffb17 	ldw	r5,-20(fp)
 10008a8:	e13ffa17 	ldw	r4,-24(fp)
 10008ac:	1000a940 	call	1000a94 <usb_send_queue_push>

		if (remaining == packet_size)
 10008b0:	d0a00017 	ldw	r2,-32768(gp)
 10008b4:	1007883a 	mov	r3,r2
 10008b8:	e0bffc17 	ldw	r2,-16(fp)
 10008bc:	1880031e 	bne	r3,r2,10008cc <usb_device_send+0xf0>
			usb_send_queue_push(NULL, 0);
 10008c0:	0009883a 	mov	r4,zero
 10008c4:	000b883a 	mov	r5,zero
 10008c8:	1000a940 	call	1000a94 <usb_send_queue_push>

		remaining -= size;
 10008cc:	e0bffb17 	ldw	r2,-20(fp)
 10008d0:	e0fffc17 	ldw	r3,-16(fp)
 10008d4:	1885c83a 	sub	r2,r3,r2
 10008d8:	e0bffc15 	stw	r2,-16(fp)
void usb_device_send(unsigned char * buf, unsigned int len) {
	unsigned int c;
	c = alt_irq_disable_all();

	unsigned int remaining = len;
	while (remaining) {
 10008dc:	e0bffc17 	ldw	r2,-16(fp)
 10008e0:	1004c03a 	cmpne	r2,r2,zero
 10008e4:	103fce1e 	bne	r2,zero,1000820 <usb_device_send+0x44>
		if (remaining == packet_size)
			usb_send_queue_push(NULL, 0);

		remaining -= size;
	}
	alt_irq_enable_all(c);
 10008e8:	e0bffd17 	ldw	r2,-12(fp)
 10008ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10008f0:	e0bff817 	ldw	r2,-32(fp)
 10008f4:	1001703a 	wrctl	status,r2
}
 10008f8:	e037883a 	mov	sp,fp
 10008fc:	dfc00117 	ldw	ra,4(sp)
 1000900:	df000017 	ldw	fp,0(sp)
 1000904:	dec00204 	addi	sp,sp,8
 1000908:	f800283a 	ret

0100090c <usb_device_recv>:

int usb_device_recv(unsigned char * buf, unsigned int len) {
 100090c:	defff304 	addi	sp,sp,-52
 1000910:	dfc00c15 	stw	ra,48(sp)
 1000914:	df000b15 	stw	fp,44(sp)
 1000918:	df000b04 	addi	fp,sp,44
 100091c:	e13ffe15 	stw	r4,-8(fp)
 1000920:	e17fff15 	stw	r5,-4(fp)
	unsigned int remaining = len;
 1000924:	e0bfff17 	ldw	r2,-4(fp)
 1000928:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100092c:	0005303a 	rdctl	r2,status
 1000930:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000934:	e0fff617 	ldw	r3,-40(fp)
 1000938:	00bfff84 	movi	r2,-2
 100093c:	1884703a 	and	r2,r3,r2
 1000940:	1001703a 	wrctl	status,r2
  
  return context;
 1000944:	e0bff617 	ldw	r2,-40(fp)

	unsigned int c;
	c = alt_irq_disable_all();
 1000948:	e0bff915 	stw	r2,-28(fp)
	while (remaining) {
 100094c:	00004206 	br	1000a58 <usb_device_recv+0x14c>
		// Get pointer to next packet
		usb_packet * packet = usb_fifo_peek(&usb_recv_queue);
 1000950:	d127eb04 	addi	r4,gp,-24660
 1000954:	10054180 	call	1005418 <usb_fifo_peek>
 1000958:	e0bff815 	stw	r2,-32(fp)

		if (!packet)
 100095c:	e0bff817 	ldw	r2,-32(fp)
 1000960:	1005003a 	cmpeq	r2,r2,zero
 1000964:	10003f1e 	bne	r2,zero,1000a64 <usb_device_recv+0x158>
			break;

		unsigned int left_in_packet = packet->len - packet->offset;
 1000968:	e0bff817 	ldw	r2,-32(fp)
 100096c:	10c00017 	ldw	r3,0(r2)
 1000970:	e0bff817 	ldw	r2,-32(fp)
 1000974:	10800117 	ldw	r2,4(r2)
 1000978:	1885c83a 	sub	r2,r3,r2
 100097c:	e0bff715 	stw	r2,-36(fp)

		if (left_in_packet <= remaining) {
 1000980:	e0fff717 	ldw	r3,-36(fp)
 1000984:	e0bffa17 	ldw	r2,-24(fp)
 1000988:	10c01c36 	bltu	r2,r3,10009fc <usb_device_recv+0xf0>
			// Pop packet
			unsigned char * packet_data;
			unsigned int packet_len;
			unsigned int packet_offset;
			usb_fifo_pop(&usb_recv_queue, &packet_data, &packet_len,
 100098c:	e17ffb04 	addi	r5,fp,-20
 1000990:	e1bffc04 	addi	r6,fp,-16
 1000994:	e1fffd04 	addi	r7,fp,-12
 1000998:	d127eb04 	addi	r4,gp,-24660
 100099c:	10053400 	call	1005340 <usb_fifo_pop>
					&packet_offset);
			memcpy(buf + (len - remaining), packet_data + packet_offset,
 10009a0:	e0ffff17 	ldw	r3,-4(fp)
 10009a4:	e0bffa17 	ldw	r2,-24(fp)
 10009a8:	1885c83a 	sub	r2,r3,r2
 10009ac:	1007883a 	mov	r3,r2
 10009b0:	e0bffe17 	ldw	r2,-8(fp)
 10009b4:	1889883a 	add	r4,r3,r2
 10009b8:	e0fffb17 	ldw	r3,-20(fp)
 10009bc:	e0bffd17 	ldw	r2,-12(fp)
 10009c0:	188b883a 	add	r5,r3,r2
 10009c4:	e0fffc17 	ldw	r3,-16(fp)
 10009c8:	e0bffd17 	ldw	r2,-12(fp)
 10009cc:	1885c83a 	sub	r2,r3,r2
 10009d0:	100d883a 	mov	r6,r2
 10009d4:	10060100 	call	1006010 <memcpy>
					packet_len - packet_offset);
			free(packet_data);
 10009d8:	e13ffb17 	ldw	r4,-20(fp)
 10009dc:	10058a80 	call	10058a8 <free>
			remaining -= packet_len - packet_offset;
 10009e0:	e0fffc17 	ldw	r3,-16(fp)
 10009e4:	e0bffd17 	ldw	r2,-12(fp)
 10009e8:	1887c83a 	sub	r3,r3,r2
 10009ec:	e0bffa17 	ldw	r2,-24(fp)
 10009f0:	10c5c83a 	sub	r2,r2,r3
 10009f4:	e0bffa15 	stw	r2,-24(fp)
 10009f8:	00001706 	br	1000a58 <usb_device_recv+0x14c>
		} else {
			// Take partial packet
			memcpy(buf + (len - remaining), packet->data + packet->offset,
 10009fc:	e0ffff17 	ldw	r3,-4(fp)
 1000a00:	e0bffa17 	ldw	r2,-24(fp)
 1000a04:	1885c83a 	sub	r2,r3,r2
 1000a08:	1007883a 	mov	r3,r2
 1000a0c:	e0bffe17 	ldw	r2,-8(fp)
 1000a10:	1889883a 	add	r4,r3,r2
 1000a14:	e0bff817 	ldw	r2,-32(fp)
 1000a18:	10c00217 	ldw	r3,8(r2)
 1000a1c:	e0bff817 	ldw	r2,-32(fp)
 1000a20:	10800117 	ldw	r2,4(r2)
 1000a24:	1885883a 	add	r2,r3,r2
 1000a28:	100b883a 	mov	r5,r2
 1000a2c:	e1bffa17 	ldw	r6,-24(fp)
 1000a30:	10060100 	call	1006010 <memcpy>
					remaining);
			packet->offset += remaining;
 1000a34:	e0bff817 	ldw	r2,-32(fp)
 1000a38:	10800117 	ldw	r2,4(r2)
 1000a3c:	1007883a 	mov	r3,r2
 1000a40:	e0bffa17 	ldw	r2,-24(fp)
 1000a44:	1885883a 	add	r2,r3,r2
 1000a48:	1007883a 	mov	r3,r2
 1000a4c:	e0bff817 	ldw	r2,-32(fp)
 1000a50:	10c00115 	stw	r3,4(r2)
			remaining = 0;
 1000a54:	e03ffa15 	stw	zero,-24(fp)
int usb_device_recv(unsigned char * buf, unsigned int len) {
	unsigned int remaining = len;

	unsigned int c;
	c = alt_irq_disable_all();
	while (remaining) {
 1000a58:	e0bffa17 	ldw	r2,-24(fp)
 1000a5c:	1004c03a 	cmpne	r2,r2,zero
 1000a60:	103fbb1e 	bne	r2,zero,1000950 <usb_device_recv+0x44>
			packet->offset += remaining;
			remaining = 0;
		}
	}

	alt_irq_enable_all(c);
 1000a64:	e0bff917 	ldw	r2,-28(fp)
 1000a68:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000a6c:	e0bff517 	ldw	r2,-44(fp)
 1000a70:	1001703a 	wrctl	status,r2
	return len - remaining;
 1000a74:	e0ffff17 	ldw	r3,-4(fp)
 1000a78:	e0bffa17 	ldw	r2,-24(fp)
 1000a7c:	1885c83a 	sub	r2,r3,r2
}
 1000a80:	e037883a 	mov	sp,fp
 1000a84:	dfc00117 	ldw	ra,4(sp)
 1000a88:	df000017 	ldw	fp,0(sp)
 1000a8c:	dec00204 	addi	sp,sp,8
 1000a90:	f800283a 	ret

01000a94 <usb_send_queue_push>:

void usb_send_queue_push(unsigned char * data, unsigned int len) {
 1000a94:	defff904 	addi	sp,sp,-28
 1000a98:	dfc00615 	stw	ra,24(sp)
 1000a9c:	df000515 	stw	fp,20(sp)
 1000aa0:	df000504 	addi	fp,sp,20
 1000aa4:	e13ffe15 	stw	r4,-8(fp)
 1000aa8:	e17fff15 	stw	r5,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000aac:	0005303a 	rdctl	r2,status
 1000ab0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000ab4:	e0fffc17 	ldw	r3,-16(fp)
 1000ab8:	00bfff84 	movi	r2,-2
 1000abc:	1884703a 	and	r2,r3,r2
 1000ac0:	1001703a 	wrctl	status,r2
  
  return context;
 1000ac4:	e0bffc17 	ldw	r2,-16(fp)
	unsigned int c;
	c = alt_irq_disable_all();
 1000ac8:	e0bffd15 	stw	r2,-12(fp)
	usb_fifo_push(&usb_send_queue, data, len);
 1000acc:	d127e904 	addi	r4,gp,-24668
 1000ad0:	e17ffe17 	ldw	r5,-8(fp)
 1000ad4:	e1bfff17 	ldw	r6,-4(fp)
 1000ad8:	10052240 	call	1005224 <usb_fifo_push>
	alt_irq_enable_all(c);
 1000adc:	e0bffd17 	ldw	r2,-12(fp)
 1000ae0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000ae4:	e0bffb17 	ldw	r2,-20(fp)
 1000ae8:	1001703a 	wrctl	status,r2
	if (usb_send_cb)
 1000aec:	d0a7e617 	ldw	r2,-24680(gp)
 1000af0:	1005003a 	cmpeq	r2,r2,zero
 1000af4:	1000031e 	bne	r2,zero,1000b04 <usb_send_queue_push+0x70>
		usb_send_cb(usb_send_cb_context);
 1000af8:	d0a7e617 	ldw	r2,-24680(gp)
 1000afc:	d127ef17 	ldw	r4,-24644(gp)
 1000b00:	103ee83a 	callr	r2
}
 1000b04:	e037883a 	mov	sp,fp
 1000b08:	dfc00117 	ldw	ra,4(sp)
 1000b0c:	df000017 	ldw	fp,0(sp)
 1000b10:	dec00204 	addi	sp,sp,8
 1000b14:	f800283a 	ret

01000b18 <usb_send_queue_is_empty>:

int usb_send_queue_is_empty() {
 1000b18:	defffe04 	addi	sp,sp,-8
 1000b1c:	dfc00115 	stw	ra,4(sp)
 1000b20:	df000015 	stw	fp,0(sp)
 1000b24:	d839883a 	mov	fp,sp
	return usb_fifo_is_empty(&usb_send_queue);
 1000b28:	d127e904 	addi	r4,gp,-24668
 1000b2c:	10052fc0 	call	10052fc <usb_fifo_is_empty>
}
 1000b30:	e037883a 	mov	sp,fp
 1000b34:	dfc00117 	ldw	ra,4(sp)
 1000b38:	df000017 	ldw	fp,0(sp)
 1000b3c:	dec00204 	addi	sp,sp,8
 1000b40:	f800283a 	ret

01000b44 <usb_recv_queue_is_empty>:
int usb_recv_queue_is_empty() {
 1000b44:	defffe04 	addi	sp,sp,-8
 1000b48:	dfc00115 	stw	ra,4(sp)
 1000b4c:	df000015 	stw	fp,0(sp)
 1000b50:	d839883a 	mov	fp,sp
	return usb_fifo_is_empty(&usb_recv_queue);
 1000b54:	d127eb04 	addi	r4,gp,-24660
 1000b58:	10052fc0 	call	10052fc <usb_fifo_is_empty>
}
 1000b5c:	e037883a 	mov	sp,fp
 1000b60:	dfc00117 	ldw	ra,4(sp)
 1000b64:	df000017 	ldw	fp,0(sp)
 1000b68:	dec00204 	addi	sp,sp,8
 1000b6c:	f800283a 	ret

01000b70 <usb_device_init>:

void usb_device_init(alt_up_usb_dev * usb_dev, alt_u32 usb_irq_id) {
 1000b70:	defffc04 	addi	sp,sp,-16
 1000b74:	dfc00315 	stw	ra,12(sp)
 1000b78:	df000215 	stw	fp,8(sp)
 1000b7c:	df000204 	addi	fp,sp,8
 1000b80:	e13ffe15 	stw	r4,-8(fp)
 1000b84:	e17fff15 	stw	r5,-4(fp)
	ISP1362_BASE = usb_dev->base;
 1000b88:	e0bffe17 	ldw	r2,-8(fp)
 1000b8c:	10800a17 	ldw	r2,40(r2)
 1000b90:	d0a7e715 	stw	r2,-24676(gp)

	usb_fifo_init(&usb_recv_queue);
 1000b94:	d127eb04 	addi	r4,gp,-24660
 1000b98:	10051f40 	call	10051f4 <usb_fifo_init>
	usb_fifo_init(&usb_send_queue);
 1000b9c:	d127e904 	addi	r4,gp,-24668
 1000ba0:	10051f40 	call	10051f4 <usb_fifo_init>

	usb_disable_all_interrupts();
 1000ba4:	100461c0 	call	100461c <usb_disable_all_interrupts>
	disconnect_USB();
 1000ba8:	10028ec0 	call	10028ec <disconnect_USB>
	usleep(1000000);
 1000bac:	010003f4 	movhi	r4,15
 1000bb0:	21109004 	addi	r4,r4,16960
 1000bb4:	1016b100 	call	1016b10 <usleep>
	Hal4D13_ResetDevice();
 1000bb8:	10031e40 	call	10031e4 <Hal4D13_ResetDevice>
	bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1000bbc:	d0a7f103 	ldbu	r2,-24636(gp)
 1000bc0:	10800054 	ori	r2,r2,1
 1000bc4:	d0a7f105 	stb	r2,-24636(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1000bc8:	d0e7f103 	ldbu	r3,-24636(gp)
 1000bcc:	00bfff44 	movi	r2,-3
 1000bd0:	1884703a 	and	r2,r3,r2
 1000bd4:	d0a7f105 	stb	r2,-24636(gp)
	bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1000bd8:	d0e7f103 	ldbu	r3,-24636(gp)
 1000bdc:	00bffec4 	movi	r2,-5
 1000be0:	1884703a 	and	r2,r3,r2
 1000be4:	d0a7f105 	stb	r2,-24636(gp)
	bUSBCheck_Device_State.State_bits.RESET_BITS = 0;
 1000be8:	008040b4 	movhi	r2,258
 1000bec:	10ba3a84 	addi	r2,r2,-5910
 1000bf0:	10000005 	stb	zero,0(r2)
	usleep(1000000);
 1000bf4:	010003f4 	movhi	r4,15
 1000bf8:	21109004 	addi	r4,r4,16960
 1000bfc:	1016b100 	call	1016b10 <usleep>
	reconnect_USB();
 1000c00:	1002a700 	call	1002a70 <reconnect_USB>
	CHECK_CHIP_ID();
 1000c04:	1002b400 	call	1002b40 <CHECK_CHIP_ID>
	Hal4D13_AcquireD13(usb_irq_id, (void*) usb_isr);
 1000c08:	e0bfff17 	ldw	r2,-4(fp)
 1000c0c:	11003fcc 	andi	r4,r2,255
 1000c10:	01404034 	movhi	r5,256
 1000c14:	2951b904 	addi	r5,r5,18148
 1000c18:	10031a80 	call	10031a8 <Hal4D13_AcquireD13>
	usb_reenable_all_interrupts();
 1000c1c:	100466c0 	call	100466c <usb_reenable_all_interrupts>
	bD13flags.bits.verbose = 1;
 1000c20:	d0a7e817 	ldw	r2,-24672(gp)
 1000c24:	10804034 	orhi	r2,r2,256
 1000c28:	d0a7e815 	stw	r2,-24672(gp)
	usb_register_send_callback(usb_check_send, NULL);
 1000c2c:	01004034 	movhi	r4,256
 1000c30:	2113a904 	addi	r4,r4,20132
 1000c34:	000b883a 	mov	r5,zero
 1000c38:	10005ec0 	call	10005ec <usb_register_send_callback>
	usb_initialized = 1;
 1000c3c:	00800044 	movi	r2,1
 1000c40:	d0a7e415 	stw	r2,-24688(gp)
}
 1000c44:	e037883a 	mov	sp,fp
 1000c48:	dfc00117 	ldw	ra,4(sp)
 1000c4c:	df000017 	ldw	fp,0(sp)
 1000c50:	dec00204 	addi	sp,sp,8
 1000c54:	f800283a 	ret

01000c58 <usb_device_poll>:

void usb_device_poll() {
 1000c58:	defffe04 	addi	sp,sp,-8
 1000c5c:	dfc00115 	stw	ra,4(sp)
 1000c60:	df000015 	stw	fp,0(sp)
 1000c64:	d839883a 	mov	fp,sp
	if (!usb_initialized) {
 1000c68:	d0a7e417 	ldw	r2,-24688(gp)
 1000c6c:	1004c03a 	cmpne	r2,r2,zero
 1000c70:	1000051e 	bne	r2,zero,1000c88 <usb_device_poll+0x30>
		printf("You called usb_device_poll before calling usb_device_init().  Exiting program.\n");
 1000c74:	010040b4 	movhi	r4,258
 1000c78:	21272a04 	addi	r4,r4,-25432
 1000c7c:	10062840 	call	1006284 <puts>
		exit(-1);
 1000c80:	013fffc4 	movi	r4,-1
 1000c84:	10058040 	call	1005804 <exit>
	}
	if (bUSBCheck_Device_State.State_bits.RESET_BITS == 1) {
 1000c88:	008040b4 	movhi	r2,258
 1000c8c:	10ba3a84 	addi	r2,r2,-5910
 1000c90:	10800003 	ldbu	r2,0(r2)
 1000c94:	10803fcc 	andi	r2,r2,255
 1000c98:	10800058 	cmpnei	r2,r2,1
 1000c9c:	1000021e 	bne	r2,zero,1000ca8 <usb_device_poll+0x50>
		usb_disable_all_interrupts();
 1000ca0:	100461c0 	call	100461c <usb_disable_all_interrupts>
		return;
 1000ca4:	00002306 	br	1000d34 <usb_device_poll+0xdc>
	}
	if (bD13flags.bits.suspend) {
 1000ca8:	d0a7e817 	ldw	r2,-24672(gp)
 1000cac:	1080008c 	andi	r2,r2,2
 1000cb0:	1005003a 	cmpeq	r2,r2,zero
 1000cb4:	1000071e 	bne	r2,zero,1000cd4 <usb_device_poll+0x7c>
		usb_disable_all_interrupts();
 1000cb8:	100461c0 	call	100461c <usb_disable_all_interrupts>
		bD13flags.bits.suspend = 0;
 1000cbc:	d0a7e817 	ldw	r2,-24672(gp)
 1000cc0:	00ffff44 	movi	r3,-3
 1000cc4:	10c4703a 	and	r2,r2,r3
 1000cc8:	d0a7e815 	stw	r2,-24672(gp)
		usb_reenable_all_interrupts();
 1000ccc:	100466c0 	call	100466c <usb_reenable_all_interrupts>
		suspend_change();
 1000cd0:	1002a9c0 	call	1002a9c <suspend_change>
	} // Suspend Change Handler
	if (bD13flags.bits.DCP_state == USBFSM4DCP_SETUPPROC) {
 1000cd4:	d0a7e817 	ldw	r2,-24672(gp)
 1000cd8:	1083c00c 	andi	r2,r2,3840
 1000cdc:	10814018 	cmpnei	r2,r2,1280
 1000ce0:	1000031e 	bne	r2,zero,1000cf0 <usb_device_poll+0x98>
		usb_disable_all_interrupts();
 1000ce4:	100461c0 	call	100461c <usb_disable_all_interrupts>
		SetupToken_Handler();
 1000ce8:	100248c0 	call	100248c <SetupToken_Handler>
		usb_reenable_all_interrupts();
 1000cec:	100466c0 	call	100466c <usb_reenable_all_interrupts>
	} // Setup Token Handler
	if ((bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC)
 1000cf0:	d0a7e817 	ldw	r2,-24672(gp)
 1000cf4:	1083c00c 	andi	r2,r2,3840
 1000cf8:	1080c018 	cmpnei	r2,r2,768
 1000cfc:	10000d1e 	bne	r2,zero,1000d34 <usb_device_poll+0xdc>
 1000d00:	008040b4 	movhi	r2,258
 1000d04:	10ba5804 	addi	r2,r2,-5792
 1000d08:	10800003 	ldbu	r2,0(r2)
 1000d0c:	10803fcc 	andi	r2,r2,255
 1000d10:	1004c03a 	cmpne	r2,r2,zero
 1000d14:	1000071e 	bne	r2,zero,1000d34 <usb_device_poll+0xdc>
			&& !ControlData.Abort) {
		usb_disable_all_interrupts();
 1000d18:	100461c0 	call	100461c <usb_disable_all_interrupts>
		bD13flags.bits.DCP_state = 0x00;
 1000d1c:	d0a7e817 	ldw	r2,-24672(gp)
 1000d20:	00fc3fc4 	movi	r3,-3841
 1000d24:	10c4703a 	and	r2,r2,r3
 1000d28:	d0a7e815 	stw	r2,-24672(gp)
		DeviceRequest_Handler();
 1000d2c:	10027000 	call	1002700 <DeviceRequest_Handler>
		usb_reenable_all_interrupts();
 1000d30:	100466c0 	call	100466c <usb_reenable_all_interrupts>
	} // Device Request Handler
}
 1000d34:	e037883a 	mov	sp,fp
 1000d38:	dfc00117 	ldw	ra,4(sp)
 1000d3c:	df000017 	ldw	fp,0(sp)
 1000d40:	dec00204 	addi	sp,sp,8
 1000d44:	f800283a 	ret

01000d48 <EnableIsoMode>:
unsigned short IsoInPattern=0xF8;
unsigned short IsoInPktLen=0;
unsigned short IsoInDataBuff[ISO_FIFOSIZE_512];

void EnableIsoMode()
{
 1000d48:	defffe04 	addi	sp,sp,-8
 1000d4c:	dfc00115 	stw	ra,4(sp)
 1000d50:	df000015 	stw	fp,0(sp)
 1000d54:	d839883a 	mov	fp,sp
    IsoMode = 0;
 1000d58:	d027f205 	stb	zero,-24632(gp)
    if( ControlData.DeviceRequest.wLength == 0)
 1000d5c:	008040b4 	movhi	r2,258
 1000d60:	10ba5804 	addi	r2,r2,-5792
 1000d64:	1080020b 	ldhu	r2,8(r2)
 1000d68:	10bfffcc 	andi	r2,r2,65535
 1000d6c:	1004c03a 	cmpne	r2,r2,zero
 1000d70:	1000691e 	bne	r2,zero,1000f18 <EnableIsoMode+0x1d0>
    {
        IsoMode &= ~ControlData.DeviceRequest.wIndex;
 1000d74:	008040b4 	movhi	r2,258
 1000d78:	10ba5804 	addi	r2,r2,-5792
 1000d7c:	1080018b 	ldhu	r2,6(r2)
 1000d80:	0084303a 	nor	r2,zero,r2
 1000d84:	1007883a 	mov	r3,r2
 1000d88:	d0a7f203 	ldbu	r2,-24632(gp)
 1000d8c:	1884703a 	and	r2,r3,r2
 1000d90:	d0a7f205 	stb	r2,-24632(gp)
        IsoMode |= ControlData.DeviceRequest.wValue;
 1000d94:	008040b4 	movhi	r2,258
 1000d98:	10ba5804 	addi	r2,r2,-5792
 1000d9c:	1080010b 	ldhu	r2,4(r2)
 1000da0:	1007883a 	mov	r3,r2
 1000da4:	d0a7f203 	ldbu	r2,-24632(gp)
 1000da8:	1884b03a 	or	r2,r3,r2
 1000dac:	d0a7f205 	stb	r2,-24632(gp)

        printf("IsoMode %x\n",IsoMode );
 1000db0:	d0a7f203 	ldbu	r2,-24632(gp)
 1000db4:	11403fcc 	andi	r5,r2,255
 1000db8:	010040b4 	movhi	r4,258
 1000dbc:	21273e04 	addi	r4,r4,-25352
 1000dc0:	10061480 	call	1006148 <printf>

        if(IsoMode&ISO_LOOP)
 1000dc4:	d0a7f203 	ldbu	r2,-24632(gp)
 1000dc8:	10803fcc 	andi	r2,r2,255
 1000dcc:	1080010c 	andi	r2,r2,4
 1000dd0:	1005003a 	cmpeq	r2,r2,zero
 1000dd4:	1000121e 	bne	r2,zero,1000e20 <EnableIsoMode+0xd8>
        {

           RaiseIRQL();
 1000dd8:	100461c0 	call	100461c <usb_disable_all_interrupts>
           bD13flags.bits.ISO_state = ISO_LOOP;
 1000ddc:	010040b4 	movhi	r4,258
 1000de0:	213a3104 	addi	r4,r4,-5948
 1000de4:	20c00017 	ldw	r3,0(r4)
 1000de8:	00bffff4 	movhi	r2,65535
 1000dec:	1087ffc4 	addi	r2,r2,8191
 1000df0:	1884703a 	and	r2,r3,r2
 1000df4:	10a00014 	ori	r2,r2,32768
 1000df8:	20800015 	stw	r2,0(r4)
           LowerIRQL();
 1000dfc:	100466c0 	call	100466c <usb_reenable_all_interrupts>

           IsoDisable =0;
 1000e00:	d0200105 	stb	zero,-32764(gp)
           IsoInPattern = 0;
 1000e04:	d020020d 	sth	zero,-32760(gp)
           IsoInPktLen = ISO_FIFOSIZE_512;
 1000e08:	00808004 	movi	r2,512
 1000e0c:	d0a7f30d 	sth	r2,-24628(gp)
           IsoOutPattern = 0;
 1000e10:	d020018d 	sth	zero,-32762(gp)
           IsoOutPktLen = ISO_FIFOSIZE_512;
 1000e14:	00808004 	movi	r2,512
 1000e18:	d0a7f28d 	sth	r2,-24630(gp)
 1000e1c:	00003a06 	br	1000f08 <EnableIsoMode+0x1c0>

        }
        else
        {

             if(IsoMode&ISO_OUT)
 1000e20:	d0a7f203 	ldbu	r2,-24632(gp)
 1000e24:	10803fcc 	andi	r2,r2,255
 1000e28:	1080008c 	andi	r2,r2,2
 1000e2c:	1005003a 	cmpeq	r2,r2,zero
 1000e30:	1000151e 	bne	r2,zero,1000e88 <EnableIsoMode+0x140>
             {

               RaiseIRQL();
 1000e34:	100461c0 	call	100461c <usb_disable_all_interrupts>
               bD13flags.bits.ISO_state = ISO_OUT;
 1000e38:	010040b4 	movhi	r4,258
 1000e3c:	213a3104 	addi	r4,r4,-5948
 1000e40:	20c00017 	ldw	r3,0(r4)
 1000e44:	00bffff4 	movhi	r2,65535
 1000e48:	1087ffc4 	addi	r2,r2,8191
 1000e4c:	1884703a 	and	r2,r3,r2
 1000e50:	10900014 	ori	r2,r2,16384
 1000e54:	20800015 	stw	r2,0(r4)
               LowerIRQL();
 1000e58:	100466c0 	call	100466c <usb_reenable_all_interrupts>

               IsoDisable =0;
 1000e5c:	d0200105 	stb	zero,-32764(gp)
               IsoOutPattern = 0;
 1000e60:	d020018d 	sth	zero,-32762(gp)
               IsoOutPktLen = ISO_FIFOSIZE_512;
 1000e64:	00808004 	movi	r2,512
 1000e68:	d0a7f28d 	sth	r2,-24630(gp)
               printf("Iso-Out Pattern %x, PktLen %u bytes\n",IsoInPattern,IsoOutPktLen);
 1000e6c:	d0a0020b 	ldhu	r2,-32760(gp)
 1000e70:	117fffcc 	andi	r5,r2,65535
 1000e74:	d0a7f28b 	ldhu	r2,-24630(gp)
 1000e78:	11bfffcc 	andi	r6,r2,65535
 1000e7c:	010040b4 	movhi	r4,258
 1000e80:	21274104 	addi	r4,r4,-25340
 1000e84:	10061480 	call	1006148 <printf>

             }
             if(IsoMode&ISO_IN)
 1000e88:	d0a7f203 	ldbu	r2,-24632(gp)
 1000e8c:	10803fcc 	andi	r2,r2,255
 1000e90:	1080004c 	andi	r2,r2,1
 1000e94:	10803fcc 	andi	r2,r2,255
 1000e98:	1005003a 	cmpeq	r2,r2,zero
 1000e9c:	10001a1e 	bne	r2,zero,1000f08 <EnableIsoMode+0x1c0>
             {
                bD13flags.bits.ISO_state = ISO_IN;
 1000ea0:	010040b4 	movhi	r4,258
 1000ea4:	213a3104 	addi	r4,r4,-5948
 1000ea8:	20c00017 	ldw	r3,0(r4)
 1000eac:	00bffff4 	movhi	r2,65535
 1000eb0:	1087ffc4 	addi	r2,r2,8191
 1000eb4:	1884703a 	and	r2,r3,r2
 1000eb8:	10880014 	ori	r2,r2,8192
 1000ebc:	20800015 	stw	r2,0(r4)

               IsoDisable =0;
 1000ec0:	d0200105 	stb	zero,-32764(gp)
               IsoInPattern = 0;
 1000ec4:	d020020d 	sth	zero,-32760(gp)
               IsoInPktLen = ISO_FIFOSIZE_512;
 1000ec8:	00808004 	movi	r2,512
 1000ecc:	d0a7f30d 	sth	r2,-24628(gp)

                IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+EPINDEX4EP06);
 1000ed0:	008040b4 	movhi	r2,258
 1000ed4:	10ba3004 	addi	r2,r2,-5952
 1000ed8:	10800017 	ldw	r2,0(r2)
 1000edc:	10800304 	addi	r2,r2,12
 1000ee0:	1007883a 	mov	r3,r2
 1000ee4:	008019c4 	movi	r2,103
 1000ee8:	18800035 	stwio	r2,0(r3)
                printf("Iso-IN  Pattern %x, PktLen %u bytes\n",IsoInPattern,IsoInPktLen);
 1000eec:	d0a0020b 	ldhu	r2,-32760(gp)
 1000ef0:	117fffcc 	andi	r5,r2,65535
 1000ef4:	d0a7f30b 	ldhu	r2,-24628(gp)
 1000ef8:	11bfffcc 	andi	r6,r2,65535
 1000efc:	010040b4 	movhi	r4,258
 1000f00:	21274b04 	addi	r4,r4,-25300
 1000f04:	10061480 	call	1006148 <printf>
             }

        }

        Chap9_SingleTransmitEP0(0, 0);
 1000f08:	0009883a 	mov	r4,zero
 1000f0c:	000b883a 	mov	r5,zero
 1000f10:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1000f14:	00000106 	br	1000f1c <EnableIsoMode+0x1d4>
    }
    else
    {
        Chap9_StallEP0();
 1000f18:	100211c0 	call	100211c <Chap9_StallEP0>
    }
}
 1000f1c:	e037883a 	mov	sp,fp
 1000f20:	dfc00117 	ldw	ra,4(sp)
 1000f24:	df000017 	ldw	fp,0(sp)
 1000f28:	dec00204 	addi	sp,sp,8
 1000f2c:	f800283a 	ret

01000f30 <Wait4Ns>:


void Wait4Ns( unsigned long timeNs)
{
 1000f30:	defffd04 	addi	sp,sp,-12
 1000f34:	dfc00215 	stw	ra,8(sp)
 1000f38:	df000115 	stw	fp,4(sp)
 1000f3c:	df000104 	addi	fp,sp,4
 1000f40:	e13fff15 	stw	r4,-4(fp)
    usleep(timeNs);
 1000f44:	e13fff17 	ldw	r4,-4(fp)
 1000f48:	1016b100 	call	1016b10 <usleep>
}
 1000f4c:	e037883a 	mov	sp,fp
 1000f50:	dfc00117 	ldw	ra,4(sp)
 1000f54:	df000017 	ldw	fp,0(sp)
 1000f58:	dec00204 	addi	sp,sp,8
 1000f5c:	f800283a 	ret

01000f60 <ISOLOOP>:

USHORT ISOLOOP(UCHAR bOUTEPIndex, UCHAR bINEPIndex, USHORT len)
{
 1000f60:	defefa04 	addi	sp,sp,-1048
 1000f64:	dfc10515 	stw	ra,1044(sp)
 1000f68:	df010415 	stw	fp,1040(sp)
 1000f6c:	df010404 	addi	fp,sp,1040
 1000f70:	e13ffd05 	stb	r4,-12(fp)
 1000f74:	e17ffe05 	stb	r5,-8(fp)
 1000f78:	e1bfff0d 	sth	r6,-4(fp)
    USHORT  ISOBuffer[512];
    UCHAR   ep_last;
    USHORT  j=0;
 1000f7c:	e03efc0d 	sth	zero,-1040(fp)

    ep_last = (UCHAR)Hal4D13_GetEndpointStatusWInteruptClear(bOUTEPIndex);
 1000f80:	e13ffd03 	ldbu	r4,-12(fp)
 1000f84:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1000f88:	e0befc85 	stb	r2,-1038(fp)
    if(ep_last & 0x60)
 1000f8c:	e0befc83 	ldbu	r2,-1038(fp)
 1000f90:	1080180c 	andi	r2,r2,96
 1000f94:	1005003a 	cmpeq	r2,r2,zero
 1000f98:	1000091e 	bne	r2,zero,1000fc0 <ISOLOOP+0x60>
    {
        j = Hal4D13_ReadISOEndpoint(bOUTEPIndex, ISOBuffer, len);
 1000f9c:	e13ffd03 	ldbu	r4,-12(fp)
 1000fa0:	e1bfff0b 	ldhu	r6,-4(fp)
 1000fa4:	e17efd04 	addi	r5,fp,-1036
 1000fa8:	1000fd80 	call	1000fd8 <Hal4D13_ReadISOEndpoint>
 1000fac:	e0befc0d 	sth	r2,-1040(fp)
        Hal4D13_WriteISOEndpoint(bINEPIndex, ISOBuffer, j);
 1000fb0:	e13ffe03 	ldbu	r4,-8(fp)
 1000fb4:	e1befc0b 	ldhu	r6,-1040(fp)
 1000fb8:	e17efd04 	addi	r5,fp,-1036
 1000fbc:	10010bc0 	call	10010bc <Hal4D13_WriteISOEndpoint>
    }

    return j;
 1000fc0:	e0befc0b 	ldhu	r2,-1040(fp)
}
 1000fc4:	e037883a 	mov	sp,fp
 1000fc8:	dfc00117 	ldw	ra,4(sp)
 1000fcc:	df000017 	ldw	fp,0(sp)
 1000fd0:	dec00204 	addi	sp,sp,8
 1000fd4:	f800283a 	ret

01000fd8 <Hal4D13_ReadISOEndpoint>:

USHORT Hal4D13_ReadISOEndpoint(UCHAR bEPIndex, USHORT ISOBuffer[512], USHORT len)
{
 1000fd8:	defffb04 	addi	sp,sp,-20
 1000fdc:	df000415 	stw	fp,16(sp)
 1000fe0:	df000404 	addi	fp,sp,16
 1000fe4:	e17ffe15 	stw	r5,-8(fp)
 1000fe8:	e13ffd05 	stb	r4,-12(fp)
 1000fec:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i, j;

    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1000ff0:	008040b4 	movhi	r2,258
 1000ff4:	10ba3004 	addi	r2,r2,-5952
 1000ff8:	10800017 	ldw	r2,0(r2)
 1000ffc:	11000304 	addi	r4,r2,12
 1001000:	e0bffd03 	ldbu	r2,-12(fp)
 1001004:	10c00404 	addi	r3,r2,16
 1001008:	2005883a 	mov	r2,r4
 100100c:	10c00035 	stwio	r3,0(r2)

    j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1001010:	008040b4 	movhi	r2,258
 1001014:	10ba3004 	addi	r2,r2,-5952
 1001018:	10800017 	ldw	r2,0(r2)
 100101c:	10800204 	addi	r2,r2,8
 1001020:	10800037 	ldwio	r2,0(r2)
 1001024:	e0bffc0d 	sth	r2,-16(fp)

    if(j != len)
 1001028:	e0fffc0b 	ldhu	r3,-16(fp)
 100102c:	e0bfff0b 	ldhu	r2,-4(fp)
 1001030:	18800226 	beq	r3,r2,100103c <Hal4D13_ReadISOEndpoint+0x64>
        j = len;
 1001034:	e0bfff0b 	ldhu	r2,-4(fp)
 1001038:	e0bffc0d 	sth	r2,-16(fp)

    for(i=0; i<j; i++)
 100103c:	e03ffc8d 	sth	zero,-14(fp)
 1001040:	00000e06 	br	100107c <Hal4D13_ReadISOEndpoint+0xa4>
    {
        ISOBuffer[i] = IORD(ISP1362_BASE,D13_DATA_PORT);
 1001044:	e0bffc8b 	ldhu	r2,-14(fp)
 1001048:	1085883a 	add	r2,r2,r2
 100104c:	1007883a 	mov	r3,r2
 1001050:	e0bffe17 	ldw	r2,-8(fp)
 1001054:	1887883a 	add	r3,r3,r2
 1001058:	008040b4 	movhi	r2,258
 100105c:	10ba3004 	addi	r2,r2,-5952
 1001060:	10800017 	ldw	r2,0(r2)
 1001064:	10800204 	addi	r2,r2,8
 1001068:	10800037 	ldwio	r2,0(r2)
 100106c:	1880000d 	sth	r2,0(r3)
    j = IORD(ISP1362_BASE,D13_DATA_PORT);

    if(j != len)
        j = len;

    for(i=0; i<j; i++)
 1001070:	e0bffc8b 	ldhu	r2,-14(fp)
 1001074:	10800044 	addi	r2,r2,1
 1001078:	e0bffc8d 	sth	r2,-14(fp)
 100107c:	e0fffc8b 	ldhu	r3,-14(fp)
 1001080:	e0bffc0b 	ldhu	r2,-16(fp)
 1001084:	18bfef36 	bltu	r3,r2,1001044 <Hal4D13_ReadISOEndpoint+0x6c>
        ISOBuffer[i] = IORD(ISP1362_BASE,D13_DATA_PORT);

    }

    /* Clear Buffer */
    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 1001088:	008040b4 	movhi	r2,258
 100108c:	10ba3004 	addi	r2,r2,-5952
 1001090:	10800017 	ldw	r2,0(r2)
 1001094:	11000304 	addi	r4,r2,12
 1001098:	e0bffd03 	ldbu	r2,-12(fp)
 100109c:	10c01c04 	addi	r3,r2,112
 10010a0:	2005883a 	mov	r2,r4
 10010a4:	10c00035 	stwio	r3,0(r2)

    return j;
 10010a8:	e0bffc0b 	ldhu	r2,-16(fp)
}
 10010ac:	e037883a 	mov	sp,fp
 10010b0:	df000017 	ldw	fp,0(sp)
 10010b4:	dec00104 	addi	sp,sp,4
 10010b8:	f800283a 	ret

010010bc <Hal4D13_WriteISOEndpoint>:

USHORT Hal4D13_WriteISOEndpoint(UCHAR bEPIndex, USHORT ISOBuffer[512], USHORT len)
{
 10010bc:	defffa04 	addi	sp,sp,-24
 10010c0:	dfc00515 	stw	ra,20(sp)
 10010c4:	df000415 	stw	fp,16(sp)
 10010c8:	df000404 	addi	fp,sp,16
 10010cc:	e17ffe15 	stw	r5,-8(fp)
 10010d0:	e13ffd05 	stb	r4,-12(fp)
 10010d4:	e1bfff0d 	sth	r6,-4(fp)
    USHORT i;

    if(bD13flags.bits.At_IRQL1 == 0)
 10010d8:	008040b4 	movhi	r2,258
 10010dc:	10ba3104 	addi	r2,r2,-5948
 10010e0:	10800017 	ldw	r2,0(r2)
 10010e4:	1080010c 	andi	r2,r2,4
 10010e8:	1004c03a 	cmpne	r2,r2,zero
 10010ec:	1000011e 	bne	r2,zero,10010f4 <Hal4D13_WriteISOEndpoint+0x38>
        RaiseIRQL();
 10010f0:	100461c0 	call	100461c <usb_disable_all_interrupts>

    IOWR(ISP1362_BASE,D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 10010f4:	008040b4 	movhi	r2,258
 10010f8:	10ba3004 	addi	r2,r2,-5952
 10010fc:	10800017 	ldw	r2,0(r2)
 1001100:	10800304 	addi	r2,r2,12
 1001104:	e0fffd03 	ldbu	r3,-12(fp)
 1001108:	10c00035 	stwio	r3,0(r2)

    IOWR(ISP1362_BASE,D13_DATA_PORT, 512);
 100110c:	008040b4 	movhi	r2,258
 1001110:	10ba3004 	addi	r2,r2,-5952
 1001114:	10800017 	ldw	r2,0(r2)
 1001118:	10800204 	addi	r2,r2,8
 100111c:	1007883a 	mov	r3,r2
 1001120:	00808004 	movi	r2,512
 1001124:	18800035 	stwio	r2,0(r3)

    /* Write Buffer */

    for(i=0; i<len; i++)
 1001128:	e03ffc0d 	sth	zero,-16(fp)
 100112c:	00001006 	br	1001170 <Hal4D13_WriteISOEndpoint+0xb4>
    {
        IOWR(ISP1362_BASE,D13_DATA_PORT, ISOBuffer[i]);
 1001130:	008040b4 	movhi	r2,258
 1001134:	10ba3004 	addi	r2,r2,-5952
 1001138:	10800017 	ldw	r2,0(r2)
 100113c:	11000204 	addi	r4,r2,8
 1001140:	e0bffc0b 	ldhu	r2,-16(fp)
 1001144:	1085883a 	add	r2,r2,r2
 1001148:	1007883a 	mov	r3,r2
 100114c:	e0bffe17 	ldw	r2,-8(fp)
 1001150:	1885883a 	add	r2,r3,r2
 1001154:	1080000b 	ldhu	r2,0(r2)
 1001158:	10ffffcc 	andi	r3,r2,65535
 100115c:	2005883a 	mov	r2,r4
 1001160:	10c00035 	stwio	r3,0(r2)

    IOWR(ISP1362_BASE,D13_DATA_PORT, 512);

    /* Write Buffer */

    for(i=0; i<len; i++)
 1001164:	e0bffc0b 	ldhu	r2,-16(fp)
 1001168:	10800044 	addi	r2,r2,1
 100116c:	e0bffc0d 	sth	r2,-16(fp)
 1001170:	e0fffc0b 	ldhu	r3,-16(fp)
 1001174:	e0bfff0b 	ldhu	r2,-4(fp)
 1001178:	18bfed36 	bltu	r3,r2,1001130 <Hal4D13_WriteISOEndpoint+0x74>
        IOWR(ISP1362_BASE,D13_DATA_PORT, ISOBuffer[i]);
    }



    if(bD13flags.bits.At_IRQL1 == 0)
 100117c:	008040b4 	movhi	r2,258
 1001180:	10ba3104 	addi	r2,r2,-5948
 1001184:	10800017 	ldw	r2,0(r2)
 1001188:	1080010c 	andi	r2,r2,4
 100118c:	1004c03a 	cmpne	r2,r2,zero
 1001190:	1000011e 	bne	r2,zero,1001198 <Hal4D13_WriteISOEndpoint+0xdc>
        LowerIRQL();
 1001194:	100466c0 	call	100466c <usb_reenable_all_interrupts>

    return i;
 1001198:	e0bffc0b 	ldhu	r2,-16(fp)
}
 100119c:	e037883a 	mov	sp,fp
 10011a0:	dfc00117 	ldw	ra,4(sp)
 10011a4:	df000017 	ldw	fp,0(sp)
 10011a8:	dec00204 	addi	sp,sp,8
 10011ac:	f800283a 	ret

010011b0 <Chap9_GetStatus>:
// *************************************************************************
// USB standard device requests
// *************************************************************************

void Chap9_GetStatus(void)
{
 10011b0:	defffa04 	addi	sp,sp,-24
 10011b4:	dfc00515 	stw	ra,20(sp)
 10011b8:	df000415 	stw	fp,16(sp)
 10011bc:	df000404 	addi	fp,sp,16
    UCHAR   endp, txdat[2];
    UCHAR   c;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 10011c0:	008040b4 	movhi	r2,258
 10011c4:	10ba5804 	addi	r2,r2,-5792
 10011c8:	10800083 	ldbu	r2,2(r2)
 10011cc:	108007cc 	andi	r2,r2,31
 10011d0:	e0bffc05 	stb	r2,-16(fp)


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 10011d4:	008040b4 	movhi	r2,258
 10011d8:	10ba3a04 	addi	r2,r2,-5912
 10011dc:	10800003 	ldbu	r2,0(r2)
 10011e0:	1080008c 	andi	r2,r2,2
 10011e4:	10803fcc 	andi	r2,r2,255
 10011e8:	1005003a 	cmpeq	r2,r2,zero
 10011ec:	10003e1e 	bne	r2,zero,10012e8 <Chap9_GetStatus+0x138>
    {
    switch(bRecipient)
 10011f0:	e0bffc03 	ldbu	r2,-16(fp)
 10011f4:	e0bfff15 	stw	r2,-4(fp)
 10011f8:	e0ffff17 	ldw	r3,-4(fp)
 10011fc:	18800060 	cmpeqi	r2,r3,1
 1001200:	1000171e 	bne	r2,zero,1001260 <Chap9_GetStatus+0xb0>
 1001204:	e0ffff17 	ldw	r3,-4(fp)
 1001208:	188000a0 	cmpeqi	r2,r3,2
 100120c:	1000161e 	bne	r2,zero,1001268 <Chap9_GetStatus+0xb8>
 1001210:	e0ffff17 	ldw	r3,-4(fp)
 1001214:	1805003a 	cmpeq	r2,r3,zero
 1001218:	1000011e 	bne	r2,zero,1001220 <Chap9_GetStatus+0x70>
 100121c:	00003006 	br	10012e0 <Chap9_GetStatus+0x130>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
 1001220:	008040b4 	movhi	r2,258
 1001224:	10ba3104 	addi	r2,r2,-5948
 1001228:	10800017 	ldw	r2,0(r2)
 100122c:	1080040c 	andi	r2,r2,16
 1001230:	1005003a 	cmpeq	r2,r2,zero
 1001234:	1000031e 	bne	r2,zero,1001244 <Chap9_GetStatus+0x94>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
 1001238:	008000c4 	movi	r2,3
 100123c:	e0bffcc5 	stb	r2,-13(fp)
 1001240:	00000206 	br	100124c <Chap9_GetStatus+0x9c>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
 1001244:	00800044 	movi	r2,1
 1001248:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
 100124c:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001250:	e13ffcc4 	addi	r4,fp,-13
 1001254:	01400084 	movi	r5,2
 1001258:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
                    break;
 100125c:	00007306 	br	100142c <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:

                    Chap9_StallEP0InControlRead();
 1001260:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
                    break;
 1001264:	00007106 	br	100142c <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001268:	008040b4 	movhi	r2,258
 100126c:	10ba5804 	addi	r2,r2,-5792
 1001270:	1080018b 	ldhu	r2,6(r2)
 1001274:	10bfffcc 	andi	r2,r2,65535
 1001278:	1004c03a 	cmpne	r2,r2,zero
 100127c:	1000161e 	bne	r2,zero,10012d8 <Chap9_GetStatus+0x128>
                    {
                        endp = -1;
 1001280:	00bfffc4 	movi	r2,-1
 1001284:	e0bffc85 	stb	r2,-14(fp)
                        c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
 1001288:	e0bffc83 	ldbu	r2,-14(fp)
 100128c:	10800044 	addi	r2,r2,1
 1001290:	11003fcc 	andi	r4,r2,255
 1001294:	1003db80 	call	1003db8 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1001298:	e0bffc45 	stb	r2,-15(fp)
                        if(c & D13REG_EPSTS_STALL)
 100129c:	e0bffc43 	ldbu	r2,-15(fp)
 10012a0:	10803fcc 	andi	r2,r2,255
 10012a4:	1080201c 	xori	r2,r2,128
 10012a8:	10bfe004 	addi	r2,r2,-128
 10012ac:	1004403a 	cmpge	r2,r2,zero
 10012b0:	1000031e 	bne	r2,zero,10012c0 <Chap9_GetStatus+0x110>
                            txdat[0] = ENDPSTS_HALT;   /* Halt */
 10012b4:	00800044 	movi	r2,1
 10012b8:	e0bffcc5 	stb	r2,-13(fp)
 10012bc:	00000106 	br	10012c4 <Chap9_GetStatus+0x114>
                        else
                            txdat[0] = 0;
 10012c0:	e03ffcc5 	stb	zero,-13(fp)

                        txdat[1] = 0;
 10012c4:	e03ffd05 	stb	zero,-12(fp)

                        Chap9_SingleTransmitEP0(txdat, 2);
 10012c8:	e13ffcc4 	addi	r4,fp,-13
 10012cc:	01400084 	movi	r5,2
 10012d0:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 10012d4:	00005506 	br	100142c <Chap9_GetStatus+0x27c>
                    }
                    else
                        Chap9_StallEP0InControlRead();
 10012d8:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>

                    break;
 10012dc:	00005306 	br	100142c <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
 10012e0:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
 10012e4:	00005106 	br	100142c <Chap9_GetStatus+0x27c>
    }


    else
    {
        if(ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wLength == 2 )
 10012e8:	008040b4 	movhi	r2,258
 10012ec:	10ba5804 	addi	r2,r2,-5792
 10012f0:	1080010b 	ldhu	r2,4(r2)
 10012f4:	10bfffcc 	andi	r2,r2,65535
 10012f8:	1004c03a 	cmpne	r2,r2,zero
 10012fc:	10004b1e 	bne	r2,zero,100142c <Chap9_GetStatus+0x27c>
 1001300:	008040b4 	movhi	r2,258
 1001304:	10ba5804 	addi	r2,r2,-5792
 1001308:	1080020b 	ldhu	r2,8(r2)
 100130c:	10bfffcc 	andi	r2,r2,65535
 1001310:	10800098 	cmpnei	r2,r2,2
 1001314:	1000451e 	bne	r2,zero,100142c <Chap9_GetStatus+0x27c>
        {
            switch(bRecipient)
 1001318:	e0bffc03 	ldbu	r2,-16(fp)
 100131c:	e0bffe15 	stw	r2,-8(fp)
 1001320:	e0fffe17 	ldw	r3,-8(fp)
 1001324:	18800060 	cmpeqi	r2,r3,1
 1001328:	1000171e 	bne	r2,zero,1001388 <Chap9_GetStatus+0x1d8>
 100132c:	e0fffe17 	ldw	r3,-8(fp)
 1001330:	188000a0 	cmpeqi	r2,r3,2
 1001334:	10001a1e 	bne	r2,zero,10013a0 <Chap9_GetStatus+0x1f0>
 1001338:	e0fffe17 	ldw	r3,-8(fp)
 100133c:	1805003a 	cmpeq	r2,r3,zero
 1001340:	1000011e 	bne	r2,zero,1001348 <Chap9_GetStatus+0x198>
 1001344:	00003806 	br	1001428 <Chap9_GetStatus+0x278>
            {
            case USB_RECIPIENT_DEVICE:
                    if(bD13flags.bits.remote_wakeup == 1)
 1001348:	008040b4 	movhi	r2,258
 100134c:	10ba3104 	addi	r2,r2,-5948
 1001350:	10800017 	ldw	r2,0(r2)
 1001354:	1080040c 	andi	r2,r2,16
 1001358:	1005003a 	cmpeq	r2,r2,zero
 100135c:	1000031e 	bne	r2,zero,100136c <Chap9_GetStatus+0x1bc>
                        txdat[0] = DEVSTS_SELFPOWERED|DEVSTS_REMOTEWAKEUP;   /* remote wakeup and Self-powered */
 1001360:	008000c4 	movi	r2,3
 1001364:	e0bffcc5 	stb	r2,-13(fp)
 1001368:	00000206 	br	1001374 <Chap9_GetStatus+0x1c4>
                    else
                        txdat[0] = DEVSTS_SELFPOWERED;   /* Self-powered*/
 100136c:	00800044 	movi	r2,1
 1001370:	e0bffcc5 	stb	r2,-13(fp)
                    txdat[1]=0;
 1001374:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001378:	e13ffcc4 	addi	r4,fp,-13
 100137c:	01400084 	movi	r5,2
 1001380:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
                    break;
 1001384:	00002906 	br	100142c <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_INTERFACE:
                    txdat[0]=0;
 1001388:	e03ffcc5 	stb	zero,-13(fp)
                    txdat[1]=0;
 100138c:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001390:	e13ffcc4 	addi	r4,fp,-13
 1001394:	01400084 	movi	r5,2
 1001398:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
                    break;
 100139c:	00002306 	br	100142c <Chap9_GetStatus+0x27c>

            case USB_RECIPIENT_ENDPOINT:

                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 10013a0:	008040b4 	movhi	r2,258
 10013a4:	10ba5804 	addi	r2,r2,-5792
 10013a8:	1080018b 	ldhu	r2,6(r2)
 10013ac:	10bfffcc 	andi	r2,r2,65535
 10013b0:	1004c03a 	cmpne	r2,r2,zero
 10013b4:	1000031e 	bne	r2,zero,10013c4 <Chap9_GetStatus+0x214>
                        endp = -1;
 10013b8:	00bfffc4 	movi	r2,-1
 10013bc:	e0bffc85 	stb	r2,-14(fp)
 10013c0:	00000506 	br	10013d8 <Chap9_GetStatus+0x228>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 10013c4:	008040b4 	movhi	r2,258
 10013c8:	10ba5804 	addi	r2,r2,-5792
 10013cc:	1080018b 	ldhu	r2,6(r2)
 10013d0:	108003cc 	andi	r2,r2,15
 10013d4:	e0bffc85 	stb	r2,-14(fp)

                    c = Hal4D13_GetEndpointStatusWOInteruptClear(endp + 1);
 10013d8:	e0bffc83 	ldbu	r2,-14(fp)
 10013dc:	10800044 	addi	r2,r2,1
 10013e0:	11003fcc 	andi	r4,r2,255
 10013e4:	1003db80 	call	1003db8 <Hal4D13_GetEndpointStatusWOInteruptClear>
 10013e8:	e0bffc45 	stb	r2,-15(fp)
                    if(c & D13REG_EPSTS_STALL)
 10013ec:	e0bffc43 	ldbu	r2,-15(fp)
 10013f0:	10803fcc 	andi	r2,r2,255
 10013f4:	1080201c 	xori	r2,r2,128
 10013f8:	10bfe004 	addi	r2,r2,-128
 10013fc:	1004403a 	cmpge	r2,r2,zero
 1001400:	1000031e 	bne	r2,zero,1001410 <Chap9_GetStatus+0x260>
                        txdat[0] = ENDPSTS_HALT;   /* Halt */
 1001404:	00800044 	movi	r2,1
 1001408:	e0bffcc5 	stb	r2,-13(fp)
 100140c:	00000106 	br	1001414 <Chap9_GetStatus+0x264>
                    else
                        txdat[0] = 0;
 1001410:	e03ffcc5 	stb	zero,-13(fp)

                    txdat[1] = 0;
 1001414:	e03ffd05 	stb	zero,-12(fp)

                    Chap9_SingleTransmitEP0(txdat, 2);
 1001418:	e13ffcc4 	addi	r4,fp,-13
 100141c:	01400084 	movi	r5,2
 1001420:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
                    break;
 1001424:	00000106 	br	100142c <Chap9_GetStatus+0x27c>

            default:
                    Chap9_StallEP0InControlRead();
 1001428:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
                    break;
            }
        }
    }

}
 100142c:	e037883a 	mov	sp,fp
 1001430:	dfc00117 	ldw	ra,4(sp)
 1001434:	df000017 	ldw	fp,0(sp)
 1001438:	dec00204 	addi	sp,sp,8
 100143c:	f800283a 	ret

01001440 <Chap9_ClearFeature>:

void Chap9_ClearFeature(void)
{
 1001440:	defffb04 	addi	sp,sp,-20
 1001444:	dfc00415 	stw	ra,16(sp)
 1001448:	df000315 	stw	fp,12(sp)
 100144c:	df000304 	addi	fp,sp,12
    UCHAR   endp;
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 1001450:	008040b4 	movhi	r2,258
 1001454:	10ba5804 	addi	r2,r2,-5792
 1001458:	10800083 	ldbu	r2,2(r2)
 100145c:	108007cc 	andi	r2,r2,31
 1001460:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
 1001464:	008040b4 	movhi	r2,258
 1001468:	10ba5804 	addi	r2,r2,-5792
 100146c:	1080010b 	ldhu	r2,4(r2)
 1001470:	e0bffd0d 	sth	r2,-12(fp)

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001474:	008040b4 	movhi	r2,258
 1001478:	10ba3a04 	addi	r2,r2,-5912
 100147c:	10800003 	ldbu	r2,0(r2)
 1001480:	1080008c 	andi	r2,r2,2
 1001484:	10803fcc 	andi	r2,r2,255
 1001488:	1005003a 	cmpeq	r2,r2,zero
 100148c:	1000351e 	bne	r2,zero,1001564 <Chap9_ClearFeature+0x124>
    {
        if( ControlData.DeviceRequest.wLength == 0 )
 1001490:	008040b4 	movhi	r2,258
 1001494:	10ba5804 	addi	r2,r2,-5792
 1001498:	1080020b 	ldhu	r2,8(r2)
 100149c:	10bfffcc 	andi	r2,r2,65535
 10014a0:	1004c03a 	cmpne	r2,r2,zero
 10014a4:	10006f1e 	bne	r2,zero,1001664 <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
 10014a8:	e0bffd83 	ldbu	r2,-10(fp)
 10014ac:	e0bfff15 	stw	r2,-4(fp)
 10014b0:	e0ffff17 	ldw	r3,-4(fp)
 10014b4:	1805003a 	cmpeq	r2,r3,zero
 10014b8:	1000041e 	bne	r2,zero,10014cc <Chap9_ClearFeature+0x8c>
 10014bc:	e0ffff17 	ldw	r3,-4(fp)
 10014c0:	188000a0 	cmpeqi	r2,r3,2
 10014c4:	1000101e 	bne	r2,zero,1001508 <Chap9_ClearFeature+0xc8>
 10014c8:	00002406 	br	100155c <Chap9_ClearFeature+0x11c>
            {
            case USB_RECIPIENT_DEVICE:
                        if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 10014cc:	e0bffd0b 	ldhu	r2,-12(fp)
 10014d0:	10800058 	cmpnei	r2,r2,1
 10014d4:	10000a1e 	bne	r2,zero,1001500 <Chap9_ClearFeature+0xc0>
                        {
                        bD13flags.bits.remote_wakeup = 0;
 10014d8:	010040b4 	movhi	r4,258
 10014dc:	213a3104 	addi	r4,r4,-5948
 10014e0:	20c00017 	ldw	r3,0(r4)
 10014e4:	00bffbc4 	movi	r2,-17
 10014e8:	1884703a 	and	r2,r3,r2
 10014ec:	20800015 	stw	r2,0(r4)
                        Chap9_SingleTransmitEP0(0, 0);
 10014f0:	0009883a 	mov	r4,zero
 10014f4:	000b883a 	mov	r5,zero
 10014f8:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 10014fc:	00005906 	br	1001664 <Chap9_ClearFeature+0x224>
                        }
                        else
                            Chap9_StallEP0InControlWrite();
 1001500:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>

                        break;
 1001504:	00005706 	br	1001664 <Chap9_ClearFeature+0x224>



            case USB_RECIPIENT_ENDPOINT:

                        if(wFeature == USB_FEATURE_ENDPOINT_STALL)
 1001508:	e0bffd0b 	ldhu	r2,-12(fp)
 100150c:	1004c03a 	cmpne	r2,r2,zero
 1001510:	1000101e 	bne	r2,zero,1001554 <Chap9_ClearFeature+0x114>
                        {
                            if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001514:	008040b4 	movhi	r2,258
 1001518:	10ba5804 	addi	r2,r2,-5792
 100151c:	1080018b 	ldhu	r2,6(r2)
 1001520:	10bfffcc 	andi	r2,r2,65535
 1001524:	1004c03a 	cmpne	r2,r2,zero
 1001528:	1000081e 	bne	r2,zero,100154c <Chap9_ClearFeature+0x10c>
                            {
                                endp = 0;
 100152c:	e03ffdc5 	stb	zero,-9(fp)
                                Hal4D13_SetEndpointStatus(endp, 0);
 1001530:	e13ffdc3 	ldbu	r4,-9(fp)
 1001534:	000b883a 	mov	r5,zero
 1001538:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>

                                Chap9_SingleTransmitEP0(0, 0);
 100153c:	0009883a 	mov	r4,zero
 1001540:	000b883a 	mov	r5,zero
 1001544:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001548:	00004606 	br	1001664 <Chap9_ClearFeature+0x224>
                            }
                            else
                            {
                                Chap9_StallEP0InControlWrite();
 100154c:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
                                break;
 1001550:	00004406 	br	1001664 <Chap9_ClearFeature+0x224>
                            }

                        }

                        else
                            Chap9_StallEP0InControlWrite();
 1001554:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>

                        break;
 1001558:	00004206 	br	1001664 <Chap9_ClearFeature+0x224>


            default:
                        Chap9_StallEP0InControlWrite();
 100155c:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
 1001560:	00004006 	br	1001664 <Chap9_ClearFeature+0x224>
    }

    else
    {

        if( ControlData.DeviceRequest.wLength == 0 )
 1001564:	008040b4 	movhi	r2,258
 1001568:	10ba5804 	addi	r2,r2,-5792
 100156c:	1080020b 	ldhu	r2,8(r2)
 1001570:	10bfffcc 	andi	r2,r2,65535
 1001574:	1004c03a 	cmpne	r2,r2,zero
 1001578:	10003a1e 	bne	r2,zero,1001664 <Chap9_ClearFeature+0x224>
        {
            switch(bRecipient)
 100157c:	e0bffd83 	ldbu	r2,-10(fp)
 1001580:	e0bffe15 	stw	r2,-8(fp)
 1001584:	e0fffe17 	ldw	r3,-8(fp)
 1001588:	1805003a 	cmpeq	r2,r3,zero
 100158c:	1000041e 	bne	r2,zero,10015a0 <Chap9_ClearFeature+0x160>
 1001590:	e0fffe17 	ldw	r3,-8(fp)
 1001594:	188000a0 	cmpeqi	r2,r3,2
 1001598:	1000101e 	bne	r2,zero,10015dc <Chap9_ClearFeature+0x19c>
 100159c:	00003006 	br	1001660 <Chap9_ClearFeature+0x220>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 10015a0:	e0bffd0b 	ldhu	r2,-12(fp)
 10015a4:	10800058 	cmpnei	r2,r2,1
 10015a8:	10000a1e 	bne	r2,zero,10015d4 <Chap9_ClearFeature+0x194>
                {
                    bD13flags.bits.remote_wakeup = 0;
 10015ac:	010040b4 	movhi	r4,258
 10015b0:	213a3104 	addi	r4,r4,-5948
 10015b4:	20c00017 	ldw	r3,0(r4)
 10015b8:	00bffbc4 	movi	r2,-17
 10015bc:	1884703a 	and	r2,r3,r2
 10015c0:	20800015 	stw	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
 10015c4:	0009883a 	mov	r4,zero
 10015c8:	000b883a 	mov	r5,zero
 10015cc:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 10015d0:	00002406 	br	1001664 <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 10015d4:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
                }

                break;
 10015d8:	00002206 	br	1001664 <Chap9_ClearFeature+0x224>

                case USB_RECIPIENT_ENDPOINT:

                if(wFeature == USB_FEATURE_ENDPOINT_STALL)
 10015dc:	e0bffd0b 	ldhu	r2,-12(fp)
 10015e0:	1004c03a 	cmpne	r2,r2,zero
 10015e4:	10001c1e 	bne	r2,zero,1001658 <Chap9_ClearFeature+0x218>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 10015e8:	008040b4 	movhi	r2,258
 10015ec:	10ba5804 	addi	r2,r2,-5792
 10015f0:	1080018b 	ldhu	r2,6(r2)
 10015f4:	10bfffcc 	andi	r2,r2,65535
 10015f8:	1004c03a 	cmpne	r2,r2,zero
 10015fc:	1000031e 	bne	r2,zero,100160c <Chap9_ClearFeature+0x1cc>
                            endp = -1;
 1001600:	00bfffc4 	movi	r2,-1
 1001604:	e0bffdc5 	stb	r2,-9(fp)
 1001608:	00000506 	br	1001620 <Chap9_ClearFeature+0x1e0>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 100160c:	008040b4 	movhi	r2,258
 1001610:	10ba5804 	addi	r2,r2,-5792
 1001614:	1080018b 	ldhu	r2,6(r2)
 1001618:	108003cc 	andi	r2,r2,15
 100161c:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, 0);
 1001620:	e0bffdc3 	ldbu	r2,-9(fp)
 1001624:	10800044 	addi	r2,r2,1
 1001628:	11003fcc 	andi	r4,r2,255
 100162c:	000b883a 	mov	r5,zero
 1001630:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
                    Hal4D13_SetEndpointStatus(endp+1, 0);
 1001634:	e0bffdc3 	ldbu	r2,-9(fp)
 1001638:	10800044 	addi	r2,r2,1
 100163c:	11003fcc 	andi	r4,r2,255
 1001640:	000b883a 	mov	r5,zero
 1001644:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
 1001648:	0009883a 	mov	r4,zero
 100164c:	000b883a 	mov	r5,zero
 1001650:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001654:	00000306 	br	1001664 <Chap9_ClearFeature+0x224>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 1001658:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
                }
                break;
 100165c:	00000106 	br	1001664 <Chap9_ClearFeature+0x224>

            default:
                    Chap9_StallEP0InControlWrite();
 1001660:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
                    break;
            }
      }
    }

}
 1001664:	e037883a 	mov	sp,fp
 1001668:	dfc00117 	ldw	ra,4(sp)
 100166c:	df000017 	ldw	fp,0(sp)
 1001670:	dec00204 	addi	sp,sp,8
 1001674:	f800283a 	ret

01001678 <Chap9_SetFeature>:

void Chap9_SetFeature(void)
{
 1001678:	defffb04 	addi	sp,sp,-20
 100167c:	dfc00415 	stw	ra,16(sp)
 1001680:	df000315 	stw	fp,12(sp)
 1001684:	df000304 	addi	fp,sp,12
  UCHAR   endp = 0;
 1001688:	e03ffdc5 	stb	zero,-9(fp)
    UCHAR   bRecipient = ControlData.DeviceRequest.bmRequestType & USB_RECIPIENT;
 100168c:	008040b4 	movhi	r2,258
 1001690:	10ba5804 	addi	r2,r2,-5792
 1001694:	10800083 	ldbu	r2,2(r2)
 1001698:	108007cc 	andi	r2,r2,31
 100169c:	e0bffd85 	stb	r2,-10(fp)
    USHORT  wFeature = ControlData.DeviceRequest.wValue;
 10016a0:	008040b4 	movhi	r2,258
 10016a4:	10ba5804 	addi	r2,r2,-5792
 10016a8:	1080010b 	ldhu	r2,4(r2)
 10016ac:	e0bffd0d 	sth	r2,-12(fp)
  

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 10016b0:	008040b4 	movhi	r2,258
 10016b4:	10ba3a04 	addi	r2,r2,-5912
 10016b8:	10800003 	ldbu	r2,0(r2)
 10016bc:	1080008c 	andi	r2,r2,2
 10016c0:	10803fcc 	andi	r2,r2,255
 10016c4:	1005003a 	cmpeq	r2,r2,zero
 10016c8:	10002f1e 	bne	r2,zero,1001788 <Chap9_SetFeature+0x110>
    {
        switch(bRecipient)
 10016cc:	e0bffd83 	ldbu	r2,-10(fp)
 10016d0:	e0bfff15 	stw	r2,-4(fp)
 10016d4:	e0ffff17 	ldw	r3,-4(fp)
 10016d8:	1805003a 	cmpeq	r2,r3,zero
 10016dc:	1000041e 	bne	r2,zero,10016f0 <Chap9_SetFeature+0x78>
 10016e0:	e0ffff17 	ldw	r3,-4(fp)
 10016e4:	188000a0 	cmpeqi	r2,r3,2
 10016e8:	10000f1e 	bne	r2,zero,1001728 <Chap9_SetFeature+0xb0>
 10016ec:	00002406 	br	1001780 <Chap9_SetFeature+0x108>
        {
        case USB_RECIPIENT_DEVICE:
            if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 10016f0:	e0bffd0b 	ldhu	r2,-12(fp)
 10016f4:	10800058 	cmpnei	r2,r2,1
 10016f8:	1000091e 	bne	r2,zero,1001720 <Chap9_SetFeature+0xa8>
            {
                bD13flags.bits.remote_wakeup = 1;
 10016fc:	008040b4 	movhi	r2,258
 1001700:	10ba3104 	addi	r2,r2,-5948
 1001704:	10c00017 	ldw	r3,0(r2)
 1001708:	18c00414 	ori	r3,r3,16
 100170c:	10c00015 	stw	r3,0(r2)
                Chap9_SingleTransmitEP0(0, 0);
 1001710:	0009883a 	mov	r4,zero
 1001714:	000b883a 	mov	r5,zero
 1001718:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 100171c:	00005b06 	br	100188c <Chap9_SetFeature+0x214>
            }
            else
            {
                Chap9_StallEP0InControlWrite();
 1001720:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
            }
            break;
 1001724:	00005906 	br	100188c <Chap9_SetFeature+0x214>

        case USB_RECIPIENT_ENDPOINT:
            if( wFeature == USB_FEATURE_ENDPOINT_STALL)
 1001728:	e0bffd0b 	ldhu	r2,-12(fp)
 100172c:	1004c03a 	cmpne	r2,r2,zero
 1001730:	1000111e 	bne	r2,zero,1001778 <Chap9_SetFeature+0x100>
            {
                if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001734:	008040b4 	movhi	r2,258
 1001738:	10ba5804 	addi	r2,r2,-5792
 100173c:	1080018b 	ldhu	r2,6(r2)
 1001740:	10bfffcc 	andi	r2,r2,65535
 1001744:	1004c03a 	cmpne	r2,r2,zero
 1001748:	1000021e 	bne	r2,zero,1001754 <Chap9_SetFeature+0xdc>
                    endp = -1;
 100174c:	00bfffc4 	movi	r2,-1
 1001750:	e0bffdc5 	stb	r2,-9(fp)

                Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
 1001754:	e0bffdc3 	ldbu	r2,-9(fp)
 1001758:	10800044 	addi	r2,r2,1
 100175c:	11003fcc 	andi	r4,r2,255
 1001760:	01402004 	movi	r5,128
 1001764:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
                Chap9_SingleTransmitEP0(0, 0);
 1001768:	0009883a 	mov	r4,zero
 100176c:	000b883a 	mov	r5,zero
 1001770:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001774:	00004506 	br	100188c <Chap9_SetFeature+0x214>

            }
            else
                Chap9_StallEP0InControlWrite();
 1001778:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>

            break;
 100177c:	00004306 	br	100188c <Chap9_SetFeature+0x214>
        default:
            Chap9_StallEP0InControlWrite();
 1001780:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
 1001784:	00004106 	br	100188c <Chap9_SetFeature+0x214>
    }


    else
    {
        if( ControlData.DeviceRequest.wLength == 0 )
 1001788:	008040b4 	movhi	r2,258
 100178c:	10ba5804 	addi	r2,r2,-5792
 1001790:	1080020b 	ldhu	r2,8(r2)
 1001794:	10bfffcc 	andi	r2,r2,65535
 1001798:	1004c03a 	cmpne	r2,r2,zero
 100179c:	10003b1e 	bne	r2,zero,100188c <Chap9_SetFeature+0x214>
        {
            switch(bRecipient)
 10017a0:	e0bffd83 	ldbu	r2,-10(fp)
 10017a4:	e0bffe15 	stw	r2,-8(fp)
 10017a8:	e0fffe17 	ldw	r3,-8(fp)
 10017ac:	1805003a 	cmpeq	r2,r3,zero
 10017b0:	1000041e 	bne	r2,zero,10017c4 <Chap9_SetFeature+0x14c>
 10017b4:	e0fffe17 	ldw	r3,-8(fp)
 10017b8:	188000a0 	cmpeqi	r2,r3,2
 10017bc:	10000f1e 	bne	r2,zero,10017fc <Chap9_SetFeature+0x184>
 10017c0:	00003106 	br	1001888 <Chap9_SetFeature+0x210>
            {
            case USB_RECIPIENT_DEVICE:
                if(wFeature == USB_FEATURE_REMOTE_WAKEUP)
 10017c4:	e0bffd0b 	ldhu	r2,-12(fp)
 10017c8:	10800058 	cmpnei	r2,r2,1
 10017cc:	1000091e 	bne	r2,zero,10017f4 <Chap9_SetFeature+0x17c>
                {
                    bD13flags.bits.remote_wakeup = 1;
 10017d0:	008040b4 	movhi	r2,258
 10017d4:	10ba3104 	addi	r2,r2,-5948
 10017d8:	10c00017 	ldw	r3,0(r2)
 10017dc:	18c00414 	ori	r3,r3,16
 10017e0:	10c00015 	stw	r3,0(r2)
                    Chap9_SingleTransmitEP0(0, 0);
 10017e4:	0009883a 	mov	r4,zero
 10017e8:	000b883a 	mov	r5,zero
 10017ec:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 10017f0:	00002606 	br	100188c <Chap9_SetFeature+0x214>
                }
                else
                {
                    Chap9_StallEP0InControlWrite();
 10017f4:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
                }
                break;
 10017f8:	00002406 	br	100188c <Chap9_SetFeature+0x214>
            case USB_RECIPIENT_ENDPOINT:
                if( wFeature == USB_FEATURE_ENDPOINT_STALL)
 10017fc:	e0bffd0b 	ldhu	r2,-12(fp)
 1001800:	1004c03a 	cmpne	r2,r2,zero
 1001804:	1000171e 	bne	r2,zero,1001864 <Chap9_SetFeature+0x1ec>
                {
                    if( ControlData.DeviceRequest.wIndex == 0x00 )
 1001808:	008040b4 	movhi	r2,258
 100180c:	10ba5804 	addi	r2,r2,-5792
 1001810:	1080018b 	ldhu	r2,6(r2)
 1001814:	10bfffcc 	andi	r2,r2,65535
 1001818:	1004c03a 	cmpne	r2,r2,zero
 100181c:	1000031e 	bne	r2,zero,100182c <Chap9_SetFeature+0x1b4>
                        endp = -1;
 1001820:	00bfffc4 	movi	r2,-1
 1001824:	e0bffdc5 	stb	r2,-9(fp)
 1001828:	00000506 	br	1001840 <Chap9_SetFeature+0x1c8>
                    else
                        endp = (UCHAR)(ControlData.DeviceRequest.wIndex & MAX_ENDPOINTS);
 100182c:	008040b4 	movhi	r2,258
 1001830:	10ba5804 	addi	r2,r2,-5792
 1001834:	1080018b 	ldhu	r2,6(r2)
 1001838:	108003cc 	andi	r2,r2,15
 100183c:	e0bffdc5 	stb	r2,-9(fp)

                    Hal4D13_SetEndpointStatus(endp+1, D13REG_EPSTS_STALL);
 1001840:	e0bffdc3 	ldbu	r2,-9(fp)
 1001844:	10800044 	addi	r2,r2,1
 1001848:	11003fcc 	andi	r4,r2,255
 100184c:	01402004 	movi	r5,128
 1001850:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>

                    Chap9_SingleTransmitEP0(0, 0);
 1001854:	0009883a 	mov	r4,zero
 1001858:	000b883a 	mov	r5,zero
 100185c:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001860:	00000a06 	br	100188c <Chap9_SetFeature+0x214>

                }
                else
                {
                    Hal4D13_SetEndpointStatus(endp+1, 0);
 1001864:	e0bffdc3 	ldbu	r2,-9(fp)
 1001868:	10800044 	addi	r2,r2,1
 100186c:	11003fcc 	andi	r4,r2,255
 1001870:	000b883a 	mov	r5,zero
 1001874:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
                    Chap9_SingleTransmitEP0(0, 0);
 1001878:	0009883a 	mov	r4,zero
 100187c:	000b883a 	mov	r5,zero
 1001880:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
                }
                break;
 1001884:	00000106 	br	100188c <Chap9_SetFeature+0x214>
            default:
                Chap9_StallEP0InControlWrite();
 1001888:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
        }
    }



}
 100188c:	e037883a 	mov	sp,fp
 1001890:	dfc00117 	ldw	ra,4(sp)
 1001894:	df000017 	ldw	fp,0(sp)
 1001898:	dec00204 	addi	sp,sp,8
 100189c:	f800283a 	ret

010018a0 <Chap9_SetAddress>:

void Chap9_SetAddress(void)
{
 10018a0:	defffd04 	addi	sp,sp,-12
 10018a4:	dfc00215 	stw	ra,8(sp)
 10018a8:	df000115 	stw	fp,4(sp)
 10018ac:	df000104 	addi	fp,sp,4

    UCHAR   j;

    {
        RaiseIRQL();
 10018b0:	100461c0 	call	100461c <usb_disable_all_interrupts>
        usb_disable_all_interrupts();
 10018b4:	100461c0 	call	100461c <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 10018b8:	008040b4 	movhi	r2,258
 10018bc:	10ba5804 	addi	r2,r2,-5792
 10018c0:	10800003 	ldbu	r2,0(r2)
 10018c4:	10803fcc 	andi	r2,r2,255
 10018c8:	1004c03a 	cmpne	r2,r2,zero
 10018cc:	1000791e 	bne	r2,zero,1001ab4 <Chap9_SetAddress+0x214>
        {
            if(bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE)
 10018d0:	008040b4 	movhi	r2,258
 10018d4:	10ba3a04 	addi	r2,r2,-5912
 10018d8:	10800003 	ldbu	r2,0(r2)
 10018dc:	1080004c 	andi	r2,r2,1
 10018e0:	10803fcc 	andi	r2,r2,255
 10018e4:	1005003a 	cmpeq	r2,r2,zero
 10018e8:	1000231e 	bne	r2,zero,1001978 <Chap9_SetAddress+0xd8>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) != 0 )
 10018ec:	008040b4 	movhi	r2,258
 10018f0:	10ba5804 	addi	r2,r2,-5792
 10018f4:	1080010b 	ldhu	r2,4(r2)
 10018f8:	10bfffcc 	andi	r2,r2,65535
 10018fc:	10801fcc 	andi	r2,r2,127
 1001900:	1005003a 	cmpeq	r2,r2,zero
 1001904:	1000161e 	bne	r2,zero,1001960 <Chap9_SetAddress+0xc0>
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
 1001908:	010040b4 	movhi	r4,258
 100190c:	213a3a04 	addi	r4,r4,-5912
 1001910:	20c00003 	ldbu	r3,0(r4)
 1001914:	00bfff84 	movi	r2,-2
 1001918:	1884703a 	and	r2,r3,r2
 100191c:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 1001920:	008040b4 	movhi	r2,258
 1001924:	10ba5804 	addi	r2,r2,-5792
 1001928:	1080010b 	ldhu	r2,4(r2)
 100192c:	10803fcc 	andi	r2,r2,255
 1001930:	11001fcc 	andi	r4,r2,127
 1001934:	01400044 	movi	r5,1
 1001938:	10033d80 	call	10033d8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 100193c:	00c040b4 	movhi	r3,258
 1001940:	18fa3a04 	addi	r3,r3,-5912
 1001944:	18800003 	ldbu	r2,0(r3)
 1001948:	10800094 	ori	r2,r2,2
 100194c:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
 1001950:	0009883a 	mov	r4,zero
 1001954:	000b883a 	mov	r5,zero
 1001958:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 100195c:	00005506 	br	1001ab4 <Chap9_SetAddress+0x214>

                }

                else
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1001960:	00c040b4 	movhi	r3,258
 1001964:	18fa3a04 	addi	r3,r3,-5912
 1001968:	18800003 	ldbu	r2,0(r3)
 100196c:	10800054 	ori	r2,r2,1
 1001970:	18800005 	stb	r2,0(r3)
 1001974:	00004f06 	br	1001ab4 <Chap9_SetAddress+0x214>
            }

            else if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001978:	008040b4 	movhi	r2,258
 100197c:	10ba3a04 	addi	r2,r2,-5912
 1001980:	10800003 	ldbu	r2,0(r2)
 1001984:	1080008c 	andi	r2,r2,2
 1001988:	10803fcc 	andi	r2,r2,255
 100198c:	1005003a 	cmpeq	r2,r2,zero
 1001990:	1000331e 	bne	r2,zero,1001a60 <Chap9_SetAddress+0x1c0>
            {
                if((ControlData.DeviceRequest.wValue & DEVICE_ADDRESS_MASK) == 0 )
 1001994:	008040b4 	movhi	r2,258
 1001998:	10ba5804 	addi	r2,r2,-5792
 100199c:	1080010b 	ldhu	r2,4(r2)
 10019a0:	10bfffcc 	andi	r2,r2,65535
 10019a4:	10801fcc 	andi	r2,r2,127
 10019a8:	1004c03a 	cmpne	r2,r2,zero
 10019ac:	1000161e 	bne	r2,zero,1001a08 <Chap9_SetAddress+0x168>
                {
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 10019b0:	008040b4 	movhi	r2,258
 10019b4:	10ba5804 	addi	r2,r2,-5792
 10019b8:	1080010b 	ldhu	r2,4(r2)
 10019bc:	10803fcc 	andi	r2,r2,255
 10019c0:	11001fcc 	andi	r4,r2,127
 10019c4:	01400044 	movi	r5,1
 10019c8:	10033d80 	call	10033d8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 10019cc:	00c040b4 	movhi	r3,258
 10019d0:	18fa3a04 	addi	r3,r3,-5912
 10019d4:	18800003 	ldbu	r2,0(r3)
 10019d8:	10800054 	ori	r2,r2,1
 10019dc:	18800005 	stb	r2,0(r3)
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 10019e0:	010040b4 	movhi	r4,258
 10019e4:	213a3a04 	addi	r4,r4,-5912
 10019e8:	20c00003 	ldbu	r3,0(r4)
 10019ec:	00bfff44 	movi	r2,-3
 10019f0:	1884703a 	and	r2,r3,r2
 10019f4:	20800005 	stb	r2,0(r4)
                    Chap9_SingleTransmitEP0(0, 0);
 10019f8:	0009883a 	mov	r4,zero
 10019fc:	000b883a 	mov	r5,zero
 1001a00:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001a04:	00002b06 	br	1001ab4 <Chap9_SetAddress+0x214>

                }

                else
                {
                    bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 0;
 1001a08:	010040b4 	movhi	r4,258
 1001a0c:	213a3a04 	addi	r4,r4,-5912
 1001a10:	20c00003 	ldbu	r3,0(r4)
 1001a14:	00bfff84 	movi	r2,-2
 1001a18:	1884703a 	and	r2,r3,r2
 1001a1c:	20800005 	stb	r2,0(r4)
                    Hal4D13_SetAddressEnable((UCHAR)(ControlData.DeviceRequest.wValue &
 1001a20:	008040b4 	movhi	r2,258
 1001a24:	10ba5804 	addi	r2,r2,-5792
 1001a28:	1080010b 	ldhu	r2,4(r2)
 1001a2c:	10803fcc 	andi	r2,r2,255
 1001a30:	11001fcc 	andi	r4,r2,127
 1001a34:	01400044 	movi	r5,1
 1001a38:	10033d80 	call	10033d8 <Hal4D13_SetAddressEnable>
                                            DEVICE_ADDRESS_MASK), 1);
                    bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001a3c:	00c040b4 	movhi	r3,258
 1001a40:	18fa3a04 	addi	r3,r3,-5912
 1001a44:	18800003 	ldbu	r2,0(r3)
 1001a48:	10800094 	ori	r2,r2,2
 1001a4c:	18800005 	stb	r2,0(r3)
                    Chap9_SingleTransmitEP0(0, 0);
 1001a50:	0009883a 	mov	r4,zero
 1001a54:	000b883a 	mov	r5,zero
 1001a58:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001a5c:	00001506 	br	1001ab4 <Chap9_SetAddress+0x214>
            }

            else
            {

                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1001a60:	010040b4 	movhi	r4,258
 1001a64:	213a3a04 	addi	r4,r4,-5912
 1001a68:	20c00003 	ldbu	r3,0(r4)
 1001a6c:	00bffec4 	movi	r2,-5
 1001a70:	1884703a 	and	r2,r3,r2
 1001a74:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001a78:	010040b4 	movhi	r4,258
 1001a7c:	213a3a04 	addi	r4,r4,-5912
 1001a80:	20c00003 	ldbu	r3,0(r4)
 1001a84:	00bfff44 	movi	r2,-3
 1001a88:	1884703a 	and	r2,r3,r2
 1001a8c:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 1001a90:	00c040b4 	movhi	r3,258
 1001a94:	18fa3a04 	addi	r3,r3,-5912
 1001a98:	18800003 	ldbu	r2,0(r3)
 1001a9c:	10800054 	ori	r2,r2,1
 1001aa0:	18800005 	stb	r2,0(r3)
                j = DEV_BEHAVIOUR_NOT_SPECIFIED;
 1001aa4:	e03fff05 	stb	zero,-4(fp)
                Chap9_SingleTransmitEP0(&j, 0);
 1001aa8:	e13fff04 	addi	r4,fp,-4
 1001aac:	000b883a 	mov	r5,zero
 1001ab0:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
            }

        }
        LowerIRQL();
 1001ab4:	100466c0 	call	100466c <usb_reenable_all_interrupts>
        usb_reenable_all_interrupts();
 1001ab8:	100466c0 	call	100466c <usb_reenable_all_interrupts>

    }
//    printf("USB Addr %x\n",Hal4D13_GetAddress());
}
 1001abc:	e037883a 	mov	sp,fp
 1001ac0:	dfc00117 	ldw	ra,4(sp)
 1001ac4:	df000017 	ldw	fp,0(sp)
 1001ac8:	dec00204 	addi	sp,sp,8
 1001acc:	f800283a 	ret

01001ad0 <Chap9_GetDescriptor>:


void Chap9_GetDescriptor(void)
{
 1001ad0:	defffb04 	addi	sp,sp,-20
 1001ad4:	dfc00415 	stw	ra,16(sp)
 1001ad8:	df000315 	stw	fp,12(sp)
 1001adc:	df000304 	addi	fp,sp,12
    UCHAR   bDescriptor =      MSB(ControlData.DeviceRequest.wValue);
 1001ae0:	008040b4 	movhi	r2,258
 1001ae4:	10ba5804 	addi	r2,r2,-5792
 1001ae8:	1080010b 	ldhu	r2,4(r2)
 1001aec:	10bfffcc 	andi	r2,r2,65535
 1001af0:	1004d23a 	srli	r2,r2,8
 1001af4:	1007883a 	mov	r3,r2
 1001af8:	00bfffc4 	movi	r2,-1
 1001afc:	1884703a 	and	r2,r3,r2
 1001b00:	e0bffd45 	stb	r2,-11(fp)
    UCHAR   bDescriptorIndex = LSB(ControlData.DeviceRequest.wValue);
 1001b04:	008040b4 	movhi	r2,258
 1001b08:	10ba5804 	addi	r2,r2,-5792
 1001b0c:	1080010b 	ldhu	r2,4(r2)
 1001b10:	1007883a 	mov	r3,r2
 1001b14:	00bfffc4 	movi	r2,-1
 1001b18:	1884703a 	and	r2,r3,r2
 1001b1c:	e0bffd05 	stb	r2,-12(fp)
  //printf("bDescri %d",bDescriptor);
 // printf("Index %d\n",bDescriptorIndex);
//  printf("USB_DEVICE_DESCRIPTORsize %d\n",sizeof(USB_DEVICE_DESCRIPTOR));
 // printf("CONFIGURATIONsize %d\n",sizeof(USB_CONFIGURATION_DESCRIPTOR_a));
    switch(bDescriptor)
 1001b20:	e0bffd43 	ldbu	r2,-11(fp)
 1001b24:	e0bfff15 	stw	r2,-4(fp)
 1001b28:	e0ffff17 	ldw	r3,-4(fp)
 1001b2c:	188000a0 	cmpeqi	r2,r3,2
 1001b30:	10000c1e 	bne	r2,zero,1001b64 <Chap9_GetDescriptor+0x94>
 1001b34:	e13fff17 	ldw	r4,-4(fp)
 1001b38:	208000e0 	cmpeqi	r2,r4,3
 1001b3c:	10000e1e 	bne	r2,zero,1001b78 <Chap9_GetDescriptor+0xa8>
 1001b40:	e0ffff17 	ldw	r3,-4(fp)
 1001b44:	18800060 	cmpeqi	r2,r3,1
 1001b48:	1000011e 	bne	r2,zero,1001b50 <Chap9_GetDescriptor+0x80>
 1001b4c:	00005106 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
    //sDevice sConfiguration
    //sizeof(struct CONFIGURATION)
//sizeof( struct DEVICE)

    case USB_DEVICE_DESCRIPTOR_TYPE:{//1
        Chap9_BurstTransmitEP0( (PUCHAR)&DeviceDescr , sizeof(USB_DEVICE_DESCRIPTOR));
 1001b50:	010040b4 	movhi	r4,258
 1001b54:	212a9b04 	addi	r4,r4,-21908
 1001b58:	01400484 	movi	r5,18
 1001b5c:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
//      Chap9_BurstTransmitEP0((PUCHAR)&sDevice,sizeof(struct DEVICE));
        break;}
 1001b60:	00004d06 	br	1001c98 <Chap9_GetDescriptor+0x1c8>
    case USB_CONFIGURATION_DESCRIPTOR_TYPE:{//2
//      Chap9_BurstTransmitEP0((PUCHAR)&ConfigDescr, CONFIG_DESCRIPTOR_LENGTH);

      
            //printf("\nConfigDescr     \n");  
          Chap9_BurstTransmitEP0((PUCHAR)&ConfigDescr_a, sizeof(USB_CONFIGURATION_DESCRIPTOR_a));//sizeof(USB_CONFIGURATION_DESCRIPTOR));
 1001b64:	010040b4 	movhi	r4,258
 1001b68:	212a9f84 	addi	r4,r4,-21890
 1001b6c:	01400b84 	movi	r5,46
 1001b70:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
   //       printf("\nInterfaceDescr0  ");    Chap9_BurstTransmitEP0((PUCHAR)&InterfaceDescr0, sizeof(USB_INTERFACE_DESCRIPTOR));
//          printf("\nEP1_TXDesc       ");     Chap9_BurstTransmitEP0((PUCHAR)&EP1_TXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
  //        printf("\nEP1_RXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP1_RXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
    //      printf("\nEP2_TXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP2_TXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
      //    printf("\nEP2_RXDescr      ");    Chap9_BurstTransmitEP0((PUCHAR)&EP2_RXDescr, sizeof(USB_ENDPOINT_DESCRIPTOR));
        break;}
 1001b74:	00004806 	br	1001c98 <Chap9_GetDescriptor+0x1c8>
    case USB_STRING_DESCRIPTOR_TYPE://3
        switch(bDescriptorIndex)
 1001b78:	e13ffd03 	ldbu	r4,-12(fp)
 1001b7c:	e13ffe15 	stw	r4,-8(fp)
 1001b80:	e0fffe17 	ldw	r3,-8(fp)
 1001b84:	188001a8 	cmpgeui	r2,r3,6
 1001b88:	10003e1e 	bne	r2,zero,1001c84 <Chap9_GetDescriptor+0x1b4>
 1001b8c:	e13ffe17 	ldw	r4,-8(fp)
 1001b90:	e13ffe17 	ldw	r4,-8(fp)
 1001b94:	2105883a 	add	r2,r4,r4
 1001b98:	1087883a 	add	r3,r2,r2
 1001b9c:	00804034 	movhi	r2,256
 1001ba0:	1086ec04 	addi	r2,r2,7088
 1001ba4:	1885883a 	add	r2,r3,r2
 1001ba8:	10800017 	ldw	r2,0(r2)
 1001bac:	1000683a 	jmp	r2
 1001bb0:	01001bc8 	cmpgei	r4,zero,111
 1001bb4:	01001be4 	muli	r4,zero,111
 1001bb8:	01001c04 	movi	r4,112
 1001bbc:	01001c24 	muli	r4,zero,112
 1001bc0:	01001c44 	movi	r4,113
 1001bc4:	01001c64 	muli	r4,zero,113
        {
        case STR_INDEX_LANGUAGE:
            printf("\n str1     \n");
 1001bc8:	010040b4 	movhi	r4,258
 1001bcc:	21275504 	addi	r4,r4,-25260
 1001bd0:	10062840 	call	1006284 <puts>
      Chap9_BurstTransmitEP0((PUCHAR)&strLanguage, sizeof(USB_STRING_LANGUAGE_DESCRIPTOR));
 1001bd4:	d1200284 	addi	r4,gp,-32758
 1001bd8:	01400104 	movi	r5,4
 1001bdc:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001be0:	00002c06 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_MANUFACTURER:
            printf("\n str2     \n");Chap9_BurstTransmitEP0((PUCHAR)&strManufacturer, sizeof(USB_STRING_MANUFACTURER_DESCRIPTOR));
 1001be4:	010040b4 	movhi	r4,258
 1001be8:	21275804 	addi	r4,r4,-25248
 1001bec:	10062840 	call	1006284 <puts>
 1001bf0:	010040b4 	movhi	r4,258
 1001bf4:	212af784 	addi	r4,r4,-21538
 1001bf8:	01400e04 	movi	r5,56
 1001bfc:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001c00:	00002406 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_PRODUCT:
            printf("\n str3     \n");Chap9_BurstTransmitEP0((PUCHAR)&strProduct, sizeof(USB_STRING_PRODUCT_DESCRIPTOR));
 1001c04:	010040b4 	movhi	r4,258
 1001c08:	21275b04 	addi	r4,r4,-25236
 1001c0c:	10062840 	call	1006284 <puts>
 1001c10:	010040b4 	movhi	r4,258
 1001c14:	212ae704 	addi	r4,r4,-21604
 1001c18:	01401084 	movi	r5,66
 1001c1c:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001c20:	00001c06 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_SERIALNUMBER:
            printf("\n str4     \n");Chap9_BurstTransmitEP0((PUCHAR)&strSerialNum, sizeof(USB_STRING_SERIALNUMBER_DESCRIPTOR));
 1001c24:	010040b4 	movhi	r4,258
 1001c28:	21275e04 	addi	r4,r4,-25224
 1001c2c:	10062840 	call	1006284 <puts>
 1001c30:	010040b4 	movhi	r4,258
 1001c34:	212ae084 	addi	r4,r4,-21630
 1001c38:	01400684 	movi	r5,26
 1001c3c:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001c40:	00001406 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_CONFIGURATION:
            printf("\n str5     \n");Chap9_BurstTransmitEP0((PUCHAR)&strConfiguration, sizeof(USB_STRING_CONFIGURATION_DESCRIPTOR) );
 1001c44:	010040b4 	movhi	r4,258
 1001c48:	21276104 	addi	r4,r4,-25212
 1001c4c:	10062840 	call	1006284 <puts>
 1001c50:	010040b4 	movhi	r4,258
 1001c54:	212adc04 	addi	r4,r4,-21648
 1001c58:	01400484 	movi	r5,18
 1001c5c:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001c60:	00000c06 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        case STR_INDEX_INTERFACE:
            printf("\n str6     \n");Chap9_BurstTransmitEP0((PUCHAR)&strInterface, sizeof(USB_STRING_INTERFACE_DESCRIPTOR) );
 1001c64:	010040b4 	movhi	r4,258
 1001c68:	21276404 	addi	r4,r4,-25200
 1001c6c:	10062840 	call	1006284 <puts>
 1001c70:	010040b4 	movhi	r4,258
 1001c74:	212ad604 	addi	r4,r4,-21672
 1001c78:	01400604 	movi	r5,24
 1001c7c:	10023100 	call	1002310 <Chap9_BurstTransmitEP0>
            break;
 1001c80:	00000406 	br	1001c94 <Chap9_GetDescriptor+0x1c4>
        default:
            printf("\n str7     \n");Chap9_StallEP0InControlRead();
 1001c84:	010040b4 	movhi	r4,258
 1001c88:	21276704 	addi	r4,r4,-25188
 1001c8c:	10062840 	call	1006284 <puts>
 1001c90:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
        }
    case USB_INTERFACE_DESCRIPTOR_TYPE:
    case USB_ENDPOINT_DESCRIPTOR_TYPE:
    case USB_POWER_DESCRIPTOR_TYPE:
    default:
        Chap9_StallEP0InControlRead();
 1001c94:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
        break;
    }
}
 1001c98:	e037883a 	mov	sp,fp
 1001c9c:	dfc00117 	ldw	ra,4(sp)
 1001ca0:	df000017 	ldw	fp,0(sp)
 1001ca4:	dec00204 	addi	sp,sp,8
 1001ca8:	f800283a 	ret

01001cac <Chap9_GetConfiguration>:

void Chap9_GetConfiguration(void)
{
 1001cac:	defffd04 	addi	sp,sp,-12
 1001cb0:	dfc00215 	stw	ra,8(sp)
 1001cb4:	df000115 	stw	fp,4(sp)
 1001cb8:	df000104 	addi	fp,sp,4
    UCHAR   c = bD13flags.bits.configuration;
 1001cbc:	008040b4 	movhi	r2,258
 1001cc0:	10ba3104 	addi	r2,r2,-5948
 1001cc4:	10800017 	ldw	r2,0(r2)
 1001cc8:	1004d0fa 	srli	r2,r2,3
 1001ccc:	1080004c 	andi	r2,r2,1
 1001cd0:	e0bfff05 	stb	r2,-4(fp)
    UCHAR   j;

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001cd4:	008040b4 	movhi	r2,258
 1001cd8:	10ba3a04 	addi	r2,r2,-5912
 1001cdc:	10800003 	ldbu	r2,0(r2)
 1001ce0:	1080008c 	andi	r2,r2,2
 1001ce4:	10803fcc 	andi	r2,r2,255
 1001ce8:	1005003a 	cmpeq	r2,r2,zero
 1001cec:	1000051e 	bne	r2,zero,1001d04 <Chap9_GetConfiguration+0x58>
    {
        j = 0;
 1001cf0:	e03fff45 	stb	zero,-3(fp)
        Chap9_SingleTransmitEP0(&j, 1);
 1001cf4:	e13fff44 	addi	r4,fp,-3
 1001cf8:	01400044 	movi	r5,1
 1001cfc:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001d00:	00001506 	br	1001d58 <Chap9_GetConfiguration+0xac>
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1)
 1001d04:	008040b4 	movhi	r2,258
 1001d08:	10ba5804 	addi	r2,r2,-5792
 1001d0c:	1080010b 	ldhu	r2,4(r2)
 1001d10:	10bfffcc 	andi	r2,r2,65535
 1001d14:	1004c03a 	cmpne	r2,r2,zero
 1001d18:	10000f1e 	bne	r2,zero,1001d58 <Chap9_GetConfiguration+0xac>
 1001d1c:	008040b4 	movhi	r2,258
 1001d20:	10ba5804 	addi	r2,r2,-5792
 1001d24:	1080018b 	ldhu	r2,6(r2)
 1001d28:	10bfffcc 	andi	r2,r2,65535
 1001d2c:	1004c03a 	cmpne	r2,r2,zero
 1001d30:	1000091e 	bne	r2,zero,1001d58 <Chap9_GetConfiguration+0xac>
 1001d34:	008040b4 	movhi	r2,258
 1001d38:	10ba5804 	addi	r2,r2,-5792
 1001d3c:	1080020b 	ldhu	r2,8(r2)
 1001d40:	10bfffcc 	andi	r2,r2,65535
 1001d44:	10800058 	cmpnei	r2,r2,1
 1001d48:	1000031e 	bne	r2,zero,1001d58 <Chap9_GetConfiguration+0xac>
        {

        Chap9_SingleTransmitEP0(&c, 1);
 1001d4c:	e13fff04 	addi	r4,fp,-4
 1001d50:	01400044 	movi	r5,1
 1001d54:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
        }
    }

}
 1001d58:	e037883a 	mov	sp,fp
 1001d5c:	dfc00117 	ldw	ra,4(sp)
 1001d60:	df000017 	ldw	fp,0(sp)
 1001d64:	dec00204 	addi	sp,sp,8
 1001d68:	f800283a 	ret

01001d6c <Chap9_SetConfiguration>:

void Chap9_SetConfiguration(void)
{
 1001d6c:	defffe04 	addi	sp,sp,-8
 1001d70:	dfc00115 	stw	ra,4(sp)
 1001d74:	df000015 	stw	fp,0(sp)
 1001d78:	d839883a 	mov	fp,sp
  
    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001d7c:	008040b4 	movhi	r2,258
 1001d80:	10ba3a04 	addi	r2,r2,-5912
 1001d84:	10800003 	ldbu	r2,0(r2)
 1001d88:	1080008c 	andi	r2,r2,2
 1001d8c:	10803fcc 	andi	r2,r2,255
 1001d90:	1005003a 	cmpeq	r2,r2,zero
 1001d94:	10003d1e 	bne	r2,zero,1001e8c <Chap9_SetConfiguration+0x120>
    {
        if(ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 0)
 1001d98:	008040b4 	movhi	r2,258
 1001d9c:	10ba5804 	addi	r2,r2,-5792
 1001da0:	1080018b 	ldhu	r2,6(r2)
 1001da4:	10bfffcc 	andi	r2,r2,65535
 1001da8:	1004c03a 	cmpne	r2,r2,zero
 1001dac:	10006d1e 	bne	r2,zero,1001f64 <Chap9_SetConfiguration+0x1f8>
 1001db0:	008040b4 	movhi	r2,258
 1001db4:	10ba5804 	addi	r2,r2,-5792
 1001db8:	1080020b 	ldhu	r2,8(r2)
 1001dbc:	10bfffcc 	andi	r2,r2,65535
 1001dc0:	1004c03a 	cmpne	r2,r2,zero
 1001dc4:	1000671e 	bne	r2,zero,1001f64 <Chap9_SetConfiguration+0x1f8>
        {
            if (ControlData.DeviceRequest.wValue == 0)
 1001dc8:	008040b4 	movhi	r2,258
 1001dcc:	10ba5804 	addi	r2,r2,-5792
 1001dd0:	1080010b 	ldhu	r2,4(r2)
 1001dd4:	10bfffcc 	andi	r2,r2,65535
 1001dd8:	1004c03a 	cmpne	r2,r2,zero
 1001ddc:	10000f1e 	bne	r2,zero,1001e1c <Chap9_SetConfiguration+0xb0>
            {
                /* put device in unconfigured state */
                bD13flags.bits.configuration = 0;
 1001de0:	010040b4 	movhi	r4,258
 1001de4:	213a3104 	addi	r4,r4,-5948
 1001de8:	20c00017 	ldw	r3,0(r4)
 1001dec:	00bffdc4 	movi	r2,-9
 1001df0:	1884703a 	and	r2,r3,r2
 1001df4:	20800015 	stw	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001df8:	00c040b4 	movhi	r3,258
 1001dfc:	18fa3a04 	addi	r3,r3,-5912
 1001e00:	18800003 	ldbu	r2,0(r3)
 1001e04:	10800094 	ori	r2,r2,2
 1001e08:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
 1001e0c:	0009883a 	mov	r4,zero
 1001e10:	000b883a 	mov	r5,zero
 1001e14:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001e18:	00005206 	br	1001f64 <Chap9_SetConfiguration+0x1f8>
            }
            else if (ControlData.DeviceRequest.wValue == 1)
 1001e1c:	008040b4 	movhi	r2,258
 1001e20:	10ba5804 	addi	r2,r2,-5792
 1001e24:	1080010b 	ldhu	r2,4(r2)
 1001e28:	10bfffcc 	andi	r2,r2,65535
 1001e2c:	10800058 	cmpnei	r2,r2,1
 1001e30:	1000141e 	bne	r2,zero,1001e84 <Chap9_SetConfiguration+0x118>
            {
                /* Configure device */
                bD13flags.bits.configuration = 1;
 1001e34:	00c040b4 	movhi	r3,258
 1001e38:	18fa3104 	addi	r3,r3,-5948
 1001e3c:	18800017 	ldw	r2,0(r3)
 1001e40:	10800214 	ori	r2,r2,8
 1001e44:	18800015 	stw	r2,0(r3)
                bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001e48:	010040b4 	movhi	r4,258
 1001e4c:	213a3a04 	addi	r4,r4,-5912
 1001e50:	20c00003 	ldbu	r3,0(r4)
 1001e54:	00bfff44 	movi	r2,-3
 1001e58:	1884703a 	and	r2,r3,r2
 1001e5c:	20800005 	stb	r2,0(r4)
                bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
 1001e60:	00c040b4 	movhi	r3,258
 1001e64:	18fa3a04 	addi	r3,r3,-5912
 1001e68:	18800003 	ldbu	r2,0(r3)
 1001e6c:	10800114 	ori	r2,r2,4
 1001e70:	18800005 	stb	r2,0(r3)
                Chap9_SingleTransmitEP0(0, 0);
 1001e74:	0009883a 	mov	r4,zero
 1001e78:	000b883a 	mov	r5,zero
 1001e7c:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001e80:	00003806 	br	1001f64 <Chap9_SetConfiguration+0x1f8>
            }

            else
                Chap9_StallEP0InControlWrite();
 1001e84:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
 1001e88:	00003606 	br	1001f64 <Chap9_SetConfiguration+0x1f8>
        }
    }

    else
    {
        if (ControlData.DeviceRequest.wValue == 0)
 1001e8c:	008040b4 	movhi	r2,258
 1001e90:	10ba5804 	addi	r2,r2,-5792
 1001e94:	1080010b 	ldhu	r2,4(r2)
 1001e98:	10bfffcc 	andi	r2,r2,65535
 1001e9c:	1004c03a 	cmpne	r2,r2,zero
 1001ea0:	1000151e 	bne	r2,zero,1001ef8 <Chap9_SetConfiguration+0x18c>
        {
            /* put device in unconfigured state */
            bD13flags.bits.configuration = 0;
 1001ea4:	010040b4 	movhi	r4,258
 1001ea8:	213a3104 	addi	r4,r4,-5948
 1001eac:	20c00017 	ldw	r3,0(r4)
 1001eb0:	00bffdc4 	movi	r2,-9
 1001eb4:	1884703a 	and	r2,r3,r2
 1001eb8:	20800015 	stw	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 1;
 1001ebc:	00c040b4 	movhi	r3,258
 1001ec0:	18fa3a04 	addi	r3,r3,-5912
 1001ec4:	18800003 	ldbu	r2,0(r3)
 1001ec8:	10800094 	ori	r2,r2,2
 1001ecc:	18800005 	stb	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1001ed0:	010040b4 	movhi	r4,258
 1001ed4:	213a3a04 	addi	r4,r4,-5912
 1001ed8:	20c00003 	ldbu	r3,0(r4)
 1001edc:	00bffec4 	movi	r2,-5
 1001ee0:	1884703a 	and	r2,r3,r2
 1001ee4:	20800005 	stb	r2,0(r4)
            Chap9_SingleTransmitEP0(0, 0);
 1001ee8:	0009883a 	mov	r4,zero
 1001eec:	000b883a 	mov	r5,zero
 1001ef0:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001ef4:	00001b06 	br	1001f64 <Chap9_SetConfiguration+0x1f8>

        }

        else if (ControlData.DeviceRequest.wValue == 1)
 1001ef8:	008040b4 	movhi	r2,258
 1001efc:	10ba5804 	addi	r2,r2,-5792
 1001f00:	1080010b 	ldhu	r2,4(r2)
 1001f04:	10bfffcc 	andi	r2,r2,65535
 1001f08:	10800058 	cmpnei	r2,r2,1
 1001f0c:	1000141e 	bne	r2,zero,1001f60 <Chap9_SetConfiguration+0x1f4>
        {
            /* Configure device */
            bD13flags.bits.configuration = 1;
 1001f10:	00c040b4 	movhi	r3,258
 1001f14:	18fa3104 	addi	r3,r3,-5948
 1001f18:	18800017 	ldw	r2,0(r3)
 1001f1c:	10800214 	ori	r2,r2,8
 1001f20:	18800015 	stw	r2,0(r3)
            bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 1001f24:	010040b4 	movhi	r4,258
 1001f28:	213a3a04 	addi	r4,r4,-5912
 1001f2c:	20c00003 	ldbu	r3,0(r4)
 1001f30:	00bfff44 	movi	r2,-3
 1001f34:	1884703a 	and	r2,r3,r2
 1001f38:	20800005 	stb	r2,0(r4)
            bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 1;
 1001f3c:	00c040b4 	movhi	r3,258
 1001f40:	18fa3a04 	addi	r3,r3,-5912
 1001f44:	18800003 	ldbu	r2,0(r3)
 1001f48:	10800114 	ori	r2,r2,4
 1001f4c:	18800005 	stb	r2,0(r3)
            Chap9_SingleTransmitEP0(0, 0);
 1001f50:	0009883a 	mov	r4,zero
 1001f54:	000b883a 	mov	r5,zero
 1001f58:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
 1001f5c:	00000106 	br	1001f64 <Chap9_SetConfiguration+0x1f8>
        }
        else
            Chap9_StallEP0InControlWrite();
 1001f60:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
    }

}
 1001f64:	e037883a 	mov	sp,fp
 1001f68:	dfc00117 	ldw	ra,4(sp)
 1001f6c:	df000017 	ldw	fp,0(sp)
 1001f70:	dec00204 	addi	sp,sp,8
 1001f74:	f800283a 	ret

01001f78 <Chap9_GetInterface>:

void Chap9_GetInterface(void)
{
 1001f78:	defffe04 	addi	sp,sp,-8
 1001f7c:	dfc00115 	stw	ra,4(sp)
 1001f80:	df000015 	stw	fp,0(sp)
 1001f84:	d839883a 	mov	fp,sp

    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1001f88:	008040b4 	movhi	r2,258
 1001f8c:	10ba3a04 	addi	r2,r2,-5912
 1001f90:	10800003 	ldbu	r2,0(r2)
 1001f94:	1080008c 	andi	r2,r2,2
 1001f98:	10803fcc 	andi	r2,r2,255
 1001f9c:	1005003a 	cmpeq	r2,r2,zero
 1001fa0:	1000021e 	bne	r2,zero,1001fac <Chap9_GetInterface+0x34>
        Chap9_StallEP0InControlRead();
 1001fa4:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
 1001fa8:	00001706 	br	1002008 <Chap9_GetInterface+0x90>


    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
 1001fac:	008040b4 	movhi	r2,258
 1001fb0:	10ba5804 	addi	r2,r2,-5792
 1001fb4:	1080010b 	ldhu	r2,4(r2)
 1001fb8:	10bfffcc 	andi	r2,r2,65535
 1001fbc:	1004c03a 	cmpne	r2,r2,zero
 1001fc0:	1000101e 	bne	r2,zero,1002004 <Chap9_GetInterface+0x8c>
 1001fc4:	008040b4 	movhi	r2,258
 1001fc8:	10ba5804 	addi	r2,r2,-5792
 1001fcc:	1080018b 	ldhu	r2,6(r2)
 1001fd0:	10bfffcc 	andi	r2,r2,65535
 1001fd4:	1004c03a 	cmpne	r2,r2,zero
 1001fd8:	10000a1e 	bne	r2,zero,1002004 <Chap9_GetInterface+0x8c>
 1001fdc:	008040b4 	movhi	r2,258
 1001fe0:	10ba5804 	addi	r2,r2,-5792
 1001fe4:	1080020b 	ldhu	r2,8(r2)
 1001fe8:	10bfffcc 	andi	r2,r2,65535
 1001fec:	10800058 	cmpnei	r2,r2,1
 1001ff0:	1000041e 	bne	r2,zero,1002004 <Chap9_GetInterface+0x8c>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
 1001ff4:	d127f384 	addi	r4,gp,-24626
 1001ff8:	01400044 	movi	r5,1
 1001ffc:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>


    else
    {

        if ((ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0 && ControlData.DeviceRequest.wLength == 1))
 1002000:	00000106 	br	1002008 <Chap9_GetInterface+0x90>
            Chap9_SingleTransmitEP0(&ALTERNATIVE_SETTING, 1);      //txdat
        else
            Chap9_StallEP0InControlRead();
 1002004:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
    }

}
 1002008:	e037883a 	mov	sp,fp
 100200c:	dfc00117 	ldw	ra,4(sp)
 1002010:	df000017 	ldw	fp,0(sp)
 1002014:	dec00204 	addi	sp,sp,8
 1002018:	f800283a 	ret

0100201c <Chap9_SetInterface>:

void Chap9_SetInterface(void)
{
 100201c:	defffd04 	addi	sp,sp,-12
 1002020:	dfc00215 	stw	ra,8(sp)
 1002024:	df000115 	stw	fp,4(sp)
 1002028:	df000104 	addi	fp,sp,4
    UCHAR   dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
 100202c:	008040b4 	movhi	r2,258
 1002030:	10ba5804 	addi	r2,r2,-5792
 1002034:	10c00083 	ldbu	r3,2(r2)
 1002038:	00bfe004 	movi	r2,-128
 100203c:	1884703a 	and	r2,r3,r2
 1002040:	e0bfff05 	stb	r2,-4(fp)

    if(dir)
 1002044:	e0bfff03 	ldbu	r2,-4(fp)
 1002048:	1005003a 	cmpeq	r2,r2,zero
 100204c:	1000011e 	bne	r2,zero,1002054 <Chap9_SetInterface+0x38>
        Chap9_StallEP0InControlRead();
 1002050:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>


    if(bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE)
 1002054:	008040b4 	movhi	r2,258
 1002058:	10ba3a04 	addi	r2,r2,-5912
 100205c:	10800003 	ldbu	r2,0(r2)
 1002060:	1080008c 	andi	r2,r2,2
 1002064:	10803fcc 	andi	r2,r2,255
 1002068:	1005003a 	cmpeq	r2,r2,zero
 100206c:	1000021e 	bne	r2,zero,1002078 <Chap9_SetInterface+0x5c>
        Chap9_StallEP0InControlRead();
 1002070:	10022100 	call	1002210 <Chap9_StallEP0InControlRead>
 1002074:	00002406 	br	1002108 <Chap9_SetInterface+0xec>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
 1002078:	008040b4 	movhi	r2,258
 100207c:	10ba5804 	addi	r2,r2,-5792
 1002080:	1080010b 	ldhu	r2,4(r2)
 1002084:	10bfffcc 	andi	r2,r2,65535
 1002088:	1004c03a 	cmpne	r2,r2,zero
 100208c:	10000b1e 	bne	r2,zero,10020bc <Chap9_SetInterface+0xa0>
 1002090:	008040b4 	movhi	r2,258
 1002094:	10ba5804 	addi	r2,r2,-5792
 1002098:	1080018b 	ldhu	r2,6(r2)
 100209c:	10bfffcc 	andi	r2,r2,65535
 10020a0:	1004c03a 	cmpne	r2,r2,zero
 10020a4:	1000051e 	bne	r2,zero,10020bc <Chap9_SetInterface+0xa0>
        {
            ALTERNATIVE_SETTING = 0;
 10020a8:	d027f385 	stb	zero,-24626(gp)
            Chap9_SingleTransmitEP0(0,0);
 10020ac:	0009883a 	mov	r4,zero
 10020b0:	000b883a 	mov	r5,zero
 10020b4:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>


    else
    {

        if (ControlData.DeviceRequest.wValue == 0 && ControlData.DeviceRequest.wIndex == 0)
 10020b8:	00001306 	br	1002108 <Chap9_SetInterface+0xec>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
 10020bc:	008040b4 	movhi	r2,258
 10020c0:	10ba5804 	addi	r2,r2,-5792
 10020c4:	1080010b 	ldhu	r2,4(r2)
 10020c8:	10bfffcc 	andi	r2,r2,65535
 10020cc:	10800058 	cmpnei	r2,r2,1
 10020d0:	10000c1e 	bne	r2,zero,1002104 <Chap9_SetInterface+0xe8>
 10020d4:	008040b4 	movhi	r2,258
 10020d8:	10ba5804 	addi	r2,r2,-5792
 10020dc:	1080018b 	ldhu	r2,6(r2)
 10020e0:	10bfffcc 	andi	r2,r2,65535
 10020e4:	1004c03a 	cmpne	r2,r2,zero
 10020e8:	1000061e 	bne	r2,zero,1002104 <Chap9_SetInterface+0xe8>
        {
            ALTERNATIVE_SETTING = 1;
 10020ec:	00800044 	movi	r2,1
 10020f0:	d0a7f385 	stb	r2,-24626(gp)
            Chap9_SingleTransmitEP0(0,0);
 10020f4:	0009883a 	mov	r4,zero
 10020f8:	000b883a 	mov	r5,zero
 10020fc:	10022740 	call	1002274 <Chap9_SingleTransmitEP0>
        {
            ALTERNATIVE_SETTING = 0;
            Chap9_SingleTransmitEP0(0,0);
        }

        else if (ControlData.DeviceRequest.wValue == 1 && ControlData.DeviceRequest.wIndex == 0)
 1002100:	00000106 	br	1002108 <Chap9_SetInterface+0xec>
            ALTERNATIVE_SETTING = 1;
            Chap9_SingleTransmitEP0(0,0);
        }
        else
        {
            Chap9_StallEP0InControlWrite();
 1002104:	10021ac0 	call	10021ac <Chap9_StallEP0InControlWrite>
        }
    }

}
 1002108:	e037883a 	mov	sp,fp
 100210c:	dfc00117 	ldw	ra,4(sp)
 1002110:	df000017 	ldw	fp,0(sp)
 1002114:	dec00204 	addi	sp,sp,8
 1002118:	f800283a 	ret

0100211c <Chap9_StallEP0>:
// *************************************************************************
// Chap9 support functions
// *************************************************************************

void Chap9_StallEP0(void)
{
 100211c:	defffd04 	addi	sp,sp,-12
 1002120:	dfc00215 	stw	ra,8(sp)
 1002124:	df000115 	stw	fp,4(sp)
 1002128:	df000104 	addi	fp,sp,4
    UCHAR dir;
    dir = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_DIR_MASK;
 100212c:	008040b4 	movhi	r2,258
 1002130:	10ba5804 	addi	r2,r2,-5792
 1002134:	10c00083 	ldbu	r3,2(r2)
 1002138:	00bfe004 	movi	r2,-128
 100213c:	1884703a 	and	r2,r3,r2
 1002140:	e0bfff05 	stb	r2,-4(fp)
    if(dir)
 1002144:	e0bfff03 	ldbu	r2,-4(fp)
 1002148:	1005003a 	cmpeq	r2,r2,zero
 100214c:	1000021e 	bne	r2,zero,1002158 <Chap9_StallEP0+0x3c>
    {
        Hal4D13_StallEP0InControlRead();
 1002150:	10045040 	call	1004504 <Hal4D13_StallEP0InControlRead>
 1002154:	00000106 	br	100215c <Chap9_StallEP0+0x40>
    }
    else
    {
        Hal4D13_StallEP0InControlWrite();
 1002158:	10044c80 	call	10044c8 <Hal4D13_StallEP0InControlWrite>
    }

    RaiseIRQL();
 100215c:	100461c0 	call	100461c <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 1002160:	008040b4 	movhi	r2,258
 1002164:	10ba5804 	addi	r2,r2,-5792
 1002168:	10800003 	ldbu	r2,0(r2)
 100216c:	10803fcc 	andi	r2,r2,255
 1002170:	1004c03a 	cmpne	r2,r2,zero
 1002174:	1000071e 	bne	r2,zero,1002194 <Chap9_StallEP0+0x78>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1002178:	010040b4 	movhi	r4,258
 100217c:	213a3104 	addi	r4,r4,-5948
 1002180:	20c00017 	ldw	r3,0(r4)
 1002184:	00bc3fc4 	movi	r2,-3841
 1002188:	1884703a 	and	r2,r3,r2
 100218c:	1081c014 	ori	r2,r2,1792
 1002190:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 1002194:	100466c0 	call	100466c <usb_reenable_all_interrupts>
}
 1002198:	e037883a 	mov	sp,fp
 100219c:	dfc00117 	ldw	ra,4(sp)
 10021a0:	df000017 	ldw	fp,0(sp)
 10021a4:	dec00204 	addi	sp,sp,8
 10021a8:	f800283a 	ret

010021ac <Chap9_StallEP0InControlWrite>:
void Chap9_StallEP0InControlWrite(void)
{
 10021ac:	defffe04 	addi	sp,sp,-8
 10021b0:	dfc00115 	stw	ra,4(sp)
 10021b4:	df000015 	stw	fp,0(sp)
 10021b8:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlWrite();
 10021bc:	10044c80 	call	10044c8 <Hal4D13_StallEP0InControlWrite>

    RaiseIRQL();
 10021c0:	100461c0 	call	100461c <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 10021c4:	008040b4 	movhi	r2,258
 10021c8:	10ba5804 	addi	r2,r2,-5792
 10021cc:	10800003 	ldbu	r2,0(r2)
 10021d0:	10803fcc 	andi	r2,r2,255
 10021d4:	1004c03a 	cmpne	r2,r2,zero
 10021d8:	1000071e 	bne	r2,zero,10021f8 <Chap9_StallEP0InControlWrite+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 10021dc:	010040b4 	movhi	r4,258
 10021e0:	213a3104 	addi	r4,r4,-5948
 10021e4:	20c00017 	ldw	r3,0(r4)
 10021e8:	00bc3fc4 	movi	r2,-3841
 10021ec:	1884703a 	and	r2,r3,r2
 10021f0:	1081c014 	ori	r2,r2,1792
 10021f4:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 10021f8:	100466c0 	call	100466c <usb_reenable_all_interrupts>
}
 10021fc:	e037883a 	mov	sp,fp
 1002200:	dfc00117 	ldw	ra,4(sp)
 1002204:	df000017 	ldw	fp,0(sp)
 1002208:	dec00204 	addi	sp,sp,8
 100220c:	f800283a 	ret

01002210 <Chap9_StallEP0InControlRead>:

void Chap9_StallEP0InControlRead(void)
{
 1002210:	defffe04 	addi	sp,sp,-8
 1002214:	dfc00115 	stw	ra,4(sp)
 1002218:	df000015 	stw	fp,0(sp)
 100221c:	d839883a 	mov	fp,sp
    Hal4D13_StallEP0InControlRead();
 1002220:	10045040 	call	1004504 <Hal4D13_StallEP0InControlRead>
    RaiseIRQL();
 1002224:	100461c0 	call	100461c <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 1002228:	008040b4 	movhi	r2,258
 100222c:	10ba5804 	addi	r2,r2,-5792
 1002230:	10800003 	ldbu	r2,0(r2)
 1002234:	10803fcc 	andi	r2,r2,255
 1002238:	1004c03a 	cmpne	r2,r2,zero
 100223c:	1000071e 	bne	r2,zero,100225c <Chap9_StallEP0InControlRead+0x4c>
    {
        bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1002240:	010040b4 	movhi	r4,258
 1002244:	213a3104 	addi	r4,r4,-5948
 1002248:	20c00017 	ldw	r3,0(r4)
 100224c:	00bc3fc4 	movi	r2,-3841
 1002250:	1884703a 	and	r2,r3,r2
 1002254:	1081c014 	ori	r2,r2,1792
 1002258:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 100225c:	100466c0 	call	100466c <usb_reenable_all_interrupts>
}
 1002260:	e037883a 	mov	sp,fp
 1002264:	dfc00117 	ldw	ra,4(sp)
 1002268:	df000017 	ldw	fp,0(sp)
 100226c:	dec00204 	addi	sp,sp,8
 1002270:	f800283a 	ret

01002274 <Chap9_SingleTransmitEP0>:

void Chap9_SingleTransmitEP0(PUCHAR buf, USHORT len)
{
 1002274:	defffc04 	addi	sp,sp,-16
 1002278:	dfc00315 	stw	ra,12(sp)
 100227c:	df000215 	stw	fp,8(sp)
 1002280:	df000204 	addi	fp,sp,8
 1002284:	e13ffe15 	stw	r4,-8(fp)
 1002288:	e17fff0d 	sth	r5,-4(fp)

    Hal4D13_SingleTransmitEP0(buf, len);
 100228c:	e17fff0b 	ldhu	r5,-4(fp)
 1002290:	e13ffe17 	ldw	r4,-8(fp)
 1002294:	10043180 	call	1004318 <Hal4D13_SingleTransmitEP0>

    RaiseIRQL();
 1002298:	100461c0 	call	100461c <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 100229c:	008040b4 	movhi	r2,258
 10022a0:	10ba5804 	addi	r2,r2,-5792
 10022a4:	10800003 	ldbu	r2,0(r2)
 10022a8:	10803fcc 	andi	r2,r2,255
 10022ac:	1004c03a 	cmpne	r2,r2,zero
 10022b0:	1000111e 	bne	r2,zero,10022f8 <Chap9_SingleTransmitEP0+0x84>
    {
        ControlData.wLength = ControlData.wCount = len;
 10022b4:	00c040b4 	movhi	r3,258
 10022b8:	18fa5804 	addi	r3,r3,-5792
 10022bc:	e0bfff0b 	ldhu	r2,-4(fp)
 10022c0:	1880030d 	sth	r2,12(r3)
 10022c4:	008040b4 	movhi	r2,258
 10022c8:	10ba5804 	addi	r2,r2,-5792
 10022cc:	10c0030b 	ldhu	r3,12(r2)
 10022d0:	008040b4 	movhi	r2,258
 10022d4:	10ba5804 	addi	r2,r2,-5792
 10022d8:	10c0028d 	sth	r3,10(r2)
        bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 10022dc:	010040b4 	movhi	r4,258
 10022e0:	213a3104 	addi	r4,r4,-5948
 10022e4:	20c00017 	ldw	r3,0(r4)
 10022e8:	00bc3fc4 	movi	r2,-3841
 10022ec:	1884703a 	and	r2,r3,r2
 10022f0:	10810014 	ori	r2,r2,1024
 10022f4:	20800015 	stw	r2,0(r4)

    }
    LowerIRQL();
 10022f8:	100466c0 	call	100466c <usb_reenable_all_interrupts>
}
 10022fc:	e037883a 	mov	sp,fp
 1002300:	dfc00117 	ldw	ra,4(sp)
 1002304:	df000017 	ldw	fp,0(sp)
 1002308:	dec00204 	addi	sp,sp,8
 100230c:	f800283a 	ret

01002310 <Chap9_BurstTransmitEP0>:

void Chap9_BurstTransmitEP0(PUCHAR pData, USHORT len)
{
 1002310:	defffc04 	addi	sp,sp,-16
 1002314:	dfc00315 	stw	ra,12(sp)
 1002318:	df000215 	stw	fp,8(sp)
 100231c:	df000204 	addi	fp,sp,8
 1002320:	e13ffe15 	stw	r4,-8(fp)
 1002324:	e17fff0d 	sth	r5,-4(fp)
    ControlData.wCount = 0;
 1002328:	008040b4 	movhi	r2,258
 100232c:	10ba5804 	addi	r2,r2,-5792
 1002330:	1000030d 	sth	zero,12(r2)
    if(ControlData.wLength > len)
 1002334:	008040b4 	movhi	r2,258
 1002338:	10ba5804 	addi	r2,r2,-5792
 100233c:	1080028b 	ldhu	r2,10(r2)
 1002340:	10ffffcc 	andi	r3,r2,65535
 1002344:	e0bfff0b 	ldhu	r2,-4(fp)
 1002348:	10c0042e 	bgeu	r2,r3,100235c <Chap9_BurstTransmitEP0+0x4c>
        ControlData.wLength = len;
 100234c:	00c040b4 	movhi	r3,258
 1002350:	18fa5804 	addi	r3,r3,-5792
 1002354:	e0bfff0b 	ldhu	r2,-4(fp)
 1002358:	1880028d 	sth	r2,10(r3)

    ControlData.Addr.pData = pData;
 100235c:	00c040b4 	movhi	r3,258
 1002360:	18fa5804 	addi	r3,r3,-5792
 1002364:	e0bffe17 	ldw	r2,-8(fp)
 1002368:	18800415 	stw	r2,16(r3)

        if( ControlData.wLength >= EP0_PACKET_SIZE)
 100236c:	008040b4 	movhi	r2,258
 1002370:	10ba5804 	addi	r2,r2,-5792
 1002374:	1080028b 	ldhu	r2,10(r2)
 1002378:	10bfffcc 	andi	r2,r2,65535
 100237c:	10801030 	cmpltui	r2,r2,64
 1002380:	10001c1e 	bne	r2,zero,10023f4 <Chap9_BurstTransmitEP0+0xe4>
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, EP0_PACKET_SIZE);
 1002384:	01000044 	movi	r4,1
 1002388:	e17ffe17 	ldw	r5,-8(fp)
 100238c:	01801004 	movi	r6,64
 1002390:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
 1002394:	100461c0 	call	100461c <usb_disable_all_interrupts>
            if(!ControlData.Abort)
 1002398:	008040b4 	movhi	r2,258
 100239c:	10ba5804 	addi	r2,r2,-5792
 10023a0:	10800003 	ldbu	r2,0(r2)
 10023a4:	10803fcc 	andi	r2,r2,255
 10023a8:	1004c03a 	cmpne	r2,r2,zero
 10023ac:	10000f1e 	bne	r2,zero,10023ec <Chap9_BurstTransmitEP0+0xdc>
            {
                ControlData.wCount += EP0_PACKET_SIZE;
 10023b0:	008040b4 	movhi	r2,258
 10023b4:	10ba5804 	addi	r2,r2,-5792
 10023b8:	1080030b 	ldhu	r2,12(r2)
 10023bc:	10801004 	addi	r2,r2,64
 10023c0:	1007883a 	mov	r3,r2
 10023c4:	008040b4 	movhi	r2,258
 10023c8:	10ba5804 	addi	r2,r2,-5792
 10023cc:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 10023d0:	010040b4 	movhi	r4,258
 10023d4:	213a3104 	addi	r4,r4,-5948
 10023d8:	20c00017 	ldw	r3,0(r4)
 10023dc:	00bc3fc4 	movi	r2,-3841
 10023e0:	1884703a 	and	r2,r3,r2
 10023e4:	10804014 	ori	r2,r2,256
 10023e8:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
 10023ec:	100466c0 	call	100466c <usb_reenable_all_interrupts>
 10023f0:	00002106 	br	1002478 <Chap9_BurstTransmitEP0+0x168>
        }
        else
        {
            Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, ControlData.wLength);
 10023f4:	008040b4 	movhi	r2,258
 10023f8:	10ba5804 	addi	r2,r2,-5792
 10023fc:	1080028b 	ldhu	r2,10(r2)
 1002400:	11bfffcc 	andi	r6,r2,65535
 1002404:	01000044 	movi	r4,1
 1002408:	e17ffe17 	ldw	r5,-8(fp)
 100240c:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>

            RaiseIRQL();
 1002410:	100461c0 	call	100461c <usb_disable_all_interrupts>
            if(!ControlData.Abort)
 1002414:	008040b4 	movhi	r2,258
 1002418:	10ba5804 	addi	r2,r2,-5792
 100241c:	10800003 	ldbu	r2,0(r2)
 1002420:	10803fcc 	andi	r2,r2,255
 1002424:	1004c03a 	cmpne	r2,r2,zero
 1002428:	1000121e 	bne	r2,zero,1002474 <Chap9_BurstTransmitEP0+0x164>
            {
                ControlData.wCount += ControlData.wLength;
 100242c:	008040b4 	movhi	r2,258
 1002430:	10ba5804 	addi	r2,r2,-5792
 1002434:	10c0030b 	ldhu	r3,12(r2)
 1002438:	008040b4 	movhi	r2,258
 100243c:	10ba5804 	addi	r2,r2,-5792
 1002440:	1080028b 	ldhu	r2,10(r2)
 1002444:	1885883a 	add	r2,r3,r2
 1002448:	1007883a 	mov	r3,r2
 100244c:	008040b4 	movhi	r2,258
 1002450:	10ba5804 	addi	r2,r2,-5792
 1002454:	10c0030d 	sth	r3,12(r2)
                bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1002458:	010040b4 	movhi	r4,258
 100245c:	213a3104 	addi	r4,r4,-5948
 1002460:	20c00017 	ldw	r3,0(r4)
 1002464:	00bc3fc4 	movi	r2,-3841
 1002468:	1884703a 	and	r2,r3,r2
 100246c:	10810014 	ori	r2,r2,1024
 1002470:	20800015 	stw	r2,0(r4)

            }
            LowerIRQL();
 1002474:	100466c0 	call	100466c <usb_reenable_all_interrupts>
        }
}
 1002478:	e037883a 	mov	sp,fp
 100247c:	dfc00117 	ldw	ra,4(sp)
 1002480:	df000017 	ldw	fp,0(sp)
 1002484:	dec00204 	addi	sp,sp,8
 1002488:	f800283a 	ret

0100248c <SetupToken_Handler>:
		{ "Iso mode enable", "Philips D13bus handler", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "RESERVED", "RESERVED",
				"RESERVED", "RESERVED", "RESERVED", "read Firmware version ",
				"RESERVED", "RESERVED", "RESERVED", };

void SetupToken_Handler(void) {
 100248c:	defffd04 	addi	sp,sp,-12
 1002490:	dfc00215 	stw	ra,8(sp)
 1002494:	df000115 	stw	fp,4(sp)
 1002498:	df000104 	addi	fp,sp,4
	unsigned short j;
	RaiseIRQL();
 100249c:	100461c0 	call	100461c <usb_disable_all_interrupts>
	bD13flags.bits.At_IRQL1 = 1;
 10024a0:	00c040b4 	movhi	r3,258
 10024a4:	18fa3104 	addi	r3,r3,-5948
 10024a8:	18800017 	ldw	r2,0(r3)
 10024ac:	10800114 	ori	r2,r2,4
 10024b0:	18800015 	stw	r2,0(r3)
	ControlData.Abort = FALSE;
 10024b4:	008040b4 	movhi	r2,258
 10024b8:	10ba5804 	addi	r2,r2,-5792
 10024bc:	10000005 	stb	zero,0(r2)

	ControlData.wLength = 0;
 10024c0:	008040b4 	movhi	r2,258
 10024c4:	10ba5804 	addi	r2,r2,-5792
 10024c8:	1000028d 	sth	zero,10(r2)
	ControlData.wCount = 0;
 10024cc:	008040b4 	movhi	r2,258
 10024d0:	10ba5804 	addi	r2,r2,-5792
 10024d4:	1000030d 	sth	zero,12(r2)

	j = Hal4D13_ReadEndpointWOClearBuffer(EPINDEX4EP0_CONTROL_OUT,
 10024d8:	014040b4 	movhi	r5,258
 10024dc:	297a5884 	addi	r5,r5,-5790
 10024e0:	0009883a 	mov	r4,zero
 10024e4:	01800204 	movi	r6,8
 10024e8:	100381c0 	call	100381c <Hal4D13_ReadEndpointWOClearBuffer>
 10024ec:	e0bfff0d 	sth	r2,-4(fp)
	 ControlData.DeviceRequest.bRequest,
	 ControlData.DeviceRequest.wValue,
	 ControlData.DeviceRequest.wIndex,
	 ControlData.DeviceRequest.wLength);
	 */
	if (j == sizeof(DEVICE_REQUEST))
 10024f0:	e0bfff0b 	ldhu	r2,-4(fp)
 10024f4:	10800218 	cmpnei	r2,r2,8
 10024f8:	1000711e 	bne	r2,zero,10026c0 <SetupToken_Handler+0x234>
		//printf("ControlData.DeviceRequest.bRequest:0x%X\n",ControlData.DeviceRequest.bRequest);//1BYTE
		//printf("ControlData.DeviceRequest.wValue:0x%X\n",ControlData.DeviceRequest.wValue); //2BYTE
		//printf("ControlData.DeviceRequest.wIndex:0x%X\n",ControlData.DeviceRequest.wIndex); //2BYTE
		//printf("ControlData.DeviceRequest.wLength:0x%X\n",ControlData.DeviceRequest.wLength);//2BYTE

		bD13flags.bits.At_IRQL1 = 0;
 10024fc:	010040b4 	movhi	r4,258
 1002500:	213a3104 	addi	r4,r4,-5948
 1002504:	20c00017 	ldw	r3,0(r4)
 1002508:	00bffec4 	movi	r2,-5
 100250c:	1884703a 	and	r2,r3,r2
 1002510:	20800015 	stw	r2,0(r4)
		LowerIRQL();
 1002514:	100466c0 	call	100466c <usb_reenable_all_interrupts>
		ControlData.wLength = ControlData.DeviceRequest.wLength;
 1002518:	008040b4 	movhi	r2,258
 100251c:	10ba5804 	addi	r2,r2,-5792
 1002520:	10c0020b 	ldhu	r3,8(r2)
 1002524:	008040b4 	movhi	r2,258
 1002528:	10ba5804 	addi	r2,r2,-5792
 100252c:	10c0028d 	sth	r3,10(r2)
		ControlData.wCount = 0;
 1002530:	008040b4 	movhi	r2,258
 1002534:	10ba5804 	addi	r2,r2,-5792
 1002538:	1000030d 	sth	zero,12(r2)

		if (ControlData.DeviceRequest.bmRequestType
 100253c:	008040b4 	movhi	r2,258
 1002540:	10ba5804 	addi	r2,r2,-5792
 1002544:	10800083 	ldbu	r2,2(r2)
 1002548:	10803fcc 	andi	r2,r2,255
 100254c:	1080201c 	xori	r2,r2,128
 1002550:	10bfe004 	addi	r2,r2,-128
 1002554:	1004403a 	cmpge	r2,r2,zero
 1002558:	1000221e 	bne	r2,zero,10025e4 <SetupToken_Handler+0x158>
				& (UCHAR) USB_ENDPOINT_DIRECTION_MASK) {
			/* get command */
			RaiseIRQL();
 100255c:	100461c0 	call	100461c <usb_disable_all_interrupts>
			ML_AcknowledgeSETUP();
 1002560:	1002ab80 	call	1002ab8 <ML_AcknowledgeSETUP>
			if ((ControlData.DeviceRequest.bRequest == 0)
 1002564:	008040b4 	movhi	r2,258
 1002568:	10ba5804 	addi	r2,r2,-5792
 100256c:	108000c3 	ldbu	r2,3(r2)
 1002570:	10803fcc 	andi	r2,r2,255
 1002574:	1005003a 	cmpeq	r2,r2,zero
 1002578:	1007883a 	mov	r3,r2
 100257c:	008040b4 	movhi	r2,258
 1002580:	10ba5804 	addi	r2,r2,-5792
 1002584:	10800083 	ldbu	r2,2(r2)
 1002588:	10803fcc 	andi	r2,r2,255
 100258c:	10803020 	cmpeqi	r2,r2,192
 1002590:	1884703a 	and	r2,r3,r2
 1002594:	10803fcc 	andi	r2,r2,255
 1002598:	1005003a 	cmpeq	r2,r2,zero
 100259c:	1000081e 	bne	r2,zero,10025c0 <SetupToken_Handler+0x134>
					& (ControlData.DeviceRequest.bmRequestType == 0xc0))
				bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 10025a0:	010040b4 	movhi	r4,258
 10025a4:	213a3104 	addi	r4,r4,-5948
 10025a8:	20c00017 	ldw	r3,0(r4)
 10025ac:	00bc3fc4 	movi	r2,-3841
 10025b0:	1884703a 	and	r2,r3,r2
 10025b4:	10810014 	ori	r2,r2,1024
 10025b8:	20800015 	stw	r2,0(r4)
 10025bc:	00000706 	br	10025dc <SetupToken_Handler+0x150>
			else
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 10025c0:	010040b4 	movhi	r4,258
 10025c4:	213a3104 	addi	r4,r4,-5948
 10025c8:	20c00017 	ldw	r3,0(r4)
 10025cc:	00bc3fc4 	movi	r2,-3841
 10025d0:	1884703a 	and	r2,r3,r2
 10025d4:	1080c014 	ori	r2,r2,768
 10025d8:	20800015 	stw	r2,0(r4)

			LowerIRQL();
 10025dc:	100466c0 	call	100466c <usb_reenable_all_interrupts>
 10025e0:	00004206 	br	10026ec <SetupToken_Handler+0x260>
		} else {
			/* set command */

			if (ControlData.DeviceRequest.wLength == 0) {
 10025e4:	008040b4 	movhi	r2,258
 10025e8:	10ba5804 	addi	r2,r2,-5792
 10025ec:	1080020b 	ldhu	r2,8(r2)
 10025f0:	10bfffcc 	andi	r2,r2,65535
 10025f4:	1004c03a 	cmpne	r2,r2,zero
 10025f8:	10000b1e 	bne	r2,zero,1002628 <SetupToken_Handler+0x19c>
				/* Set command  without Data stage*/
				RaiseIRQL();
 10025fc:	100461c0 	call	100461c <usb_disable_all_interrupts>
				ML_AcknowledgeSETUP();
 1002600:	1002ab80 	call	1002ab8 <ML_AcknowledgeSETUP>
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 1002604:	010040b4 	movhi	r4,258
 1002608:	213a3104 	addi	r4,r4,-5948
 100260c:	20c00017 	ldw	r3,0(r4)
 1002610:	00bc3fc4 	movi	r2,-3841
 1002614:	1884703a 	and	r2,r3,r2
 1002618:	1080c014 	ori	r2,r2,768
 100261c:	20800015 	stw	r2,0(r4)
				LowerIRQL();
 1002620:	100466c0 	call	100466c <usb_reenable_all_interrupts>
 1002624:	00003106 	br	10026ec <SetupToken_Handler+0x260>
			} else {
				/*
				 // Set command  with Data stage
				 // get Data Buffer
				 */
				if (ControlData.DeviceRequest.wLength <= MAX_CONTROLDATA_SIZE) {
 1002628:	008040b4 	movhi	r2,258
 100262c:	10ba5804 	addi	r2,r2,-5792
 1002630:	1080020b 	ldhu	r2,8(r2)
 1002634:	10bfffcc 	andi	r2,r2,65535
 1002638:	10800468 	cmpgeui	r2,r2,17
 100263c:	10000b1e 	bne	r2,zero,100266c <SetupToken_Handler+0x1e0>
					/* set command with OUT token */
					RaiseIRQL();
 1002640:	100461c0 	call	100461c <usb_disable_all_interrupts>
					bD13flags.bits.DCP_state = USBFSM4DCP_DATAOUT;
 1002644:	010040b4 	movhi	r4,258
 1002648:	213a3104 	addi	r4,r4,-5948
 100264c:	20c00017 	ldw	r3,0(r4)
 1002650:	00bc3fc4 	movi	r2,-3841
 1002654:	1884703a 	and	r2,r3,r2
 1002658:	10808014 	ori	r2,r2,512
 100265c:	20800015 	stw	r2,0(r4)
					LowerIRQL();
 1002660:	100466c0 	call	100466c <usb_reenable_all_interrupts>
					ML_AcknowledgeSETUP();
 1002664:	1002ab80 	call	1002ab8 <ML_AcknowledgeSETUP>
 1002668:	00002006 	br	10026ec <SetupToken_Handler+0x260>

				} else {
					RaiseIRQL();
 100266c:	100461c0 	call	100461c <usb_disable_all_interrupts>
					ML_AcknowledgeSETUP();
 1002670:	1002ab80 	call	1002ab8 <ML_AcknowledgeSETUP>
					Hal4D13_StallEP0InControlWrite();
 1002674:	10044c80 	call	10044c8 <Hal4D13_StallEP0InControlWrite>
					bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1002678:	010040b4 	movhi	r4,258
 100267c:	213a3104 	addi	r4,r4,-5948
 1002680:	20c00017 	ldw	r3,0(r4)
 1002684:	00bc3fc4 	movi	r2,-3841
 1002688:	1884703a 	and	r2,r3,r2
 100268c:	1081c014 	ori	r2,r2,1792
 1002690:	20800015 	stw	r2,0(r4)
					printf(
 1002694:	008040b4 	movhi	r2,258
 1002698:	10ba3104 	addi	r2,r2,-5948
 100269c:	10800017 	ldw	r2,0(r2)
 10026a0:	1004d23a 	srli	r2,r2,8
 10026a4:	108003cc 	andi	r2,r2,15
 10026a8:	11403fcc 	andi	r5,r2,255
 10026ac:	010040b4 	movhi	r4,258
 10026b0:	2127c704 	addi	r4,r4,-24804
 10026b4:	10061480 	call	1006148 <printf>
							"bD13flags.bits.DCP_state = x%hx\n Unknow set up command\n",
							bD13flags.bits.DCP_state);
					LowerIRQL();
 10026b8:	100466c0 	call	100466c <usb_reenable_all_interrupts>
 10026bc:	00000b06 	br	10026ec <SetupToken_Handler+0x260>
				}
			}
		}
	} else {
		printf("wrong setup command\n");
 10026c0:	010040b4 	movhi	r4,258
 10026c4:	2127d504 	addi	r4,r4,-24748
 10026c8:	10062840 	call	1006284 <puts>
		bD13flags.bits.At_IRQL1 = 0;
 10026cc:	010040b4 	movhi	r4,258
 10026d0:	213a3104 	addi	r4,r4,-5948
 10026d4:	20c00017 	ldw	r3,0(r4)
 10026d8:	00bffec4 	movi	r2,-5
 10026dc:	1884703a 	and	r2,r3,r2
 10026e0:	20800015 	stw	r2,0(r4)
		LowerIRQL();
 10026e4:	100466c0 	call	100466c <usb_reenable_all_interrupts>
		Chap9_StallEP0();
 10026e8:	100211c0 	call	100211c <Chap9_StallEP0>
	}

	// printf("To_Ha_end\n");
}
 10026ec:	e037883a 	mov	sp,fp
 10026f0:	dfc00117 	ldw	ra,4(sp)
 10026f4:	df000017 	ldw	fp,0(sp)
 10026f8:	dec00204 	addi	sp,sp,8
 10026fc:	f800283a 	ret

01002700 <DeviceRequest_Handler>:

void DeviceRequest_Handler(void) {
 1002700:	defffd04 	addi	sp,sp,-12
 1002704:	dfc00215 	stw	ra,8(sp)
 1002708:	df000115 	stw	fp,4(sp)
 100270c:	df000104 	addi	fp,sp,4
	UCHAR type, req;

	type = ControlData.DeviceRequest.bmRequestType & USB_REQUEST_TYPE_MASK;
 1002710:	008040b4 	movhi	r2,258
 1002714:	10ba5804 	addi	r2,r2,-5792
 1002718:	10800083 	ldbu	r2,2(r2)
 100271c:	1080180c 	andi	r2,r2,96
 1002720:	e0bfff45 	stb	r2,-3(fp)
	req = ControlData.DeviceRequest.bRequest & USB_REQUEST_MASK;
 1002724:	008040b4 	movhi	r2,258
 1002728:	10ba5804 	addi	r2,r2,-5792
 100272c:	108000c3 	ldbu	r2,3(r2)
 1002730:	e0bfff05 	stb	r2,-4(fp)
	//if (bD13flags.bits.verbose==1)
	//   printf("type = 0x%02x, req = 0x%02x\n", type, req);

	// help_devreq(type, req); /* print out device request */

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
 1002734:	e0bfff43 	ldbu	r2,-3(fp)
 1002738:	1004c03a 	cmpne	r2,r2,zero
 100273c:	10000c1e 	bne	r2,zero,1002770 <DeviceRequest_Handler+0x70>
 1002740:	e0bfff03 	ldbu	r2,-4(fp)
 1002744:	10800368 	cmpgeui	r2,r2,13
 1002748:	1000091e 	bne	r2,zero,1002770 <DeviceRequest_Handler+0x70>
		(*StandardDeviceRequest[req])();
 100274c:	e0bfff03 	ldbu	r2,-4(fp)
 1002750:	00c040b4 	movhi	r3,258
 1002754:	18eb0604 	addi	r3,r3,-21480
 1002758:	1085883a 	add	r2,r2,r2
 100275c:	1085883a 	add	r2,r2,r2
 1002760:	10c5883a 	add	r2,r2,r3
 1002764:	10800017 	ldw	r2,0(r2)
 1002768:	103ee83a 	callr	r2
	//if (bD13flags.bits.verbose==1)
	//   printf("type = 0x%02x, req = 0x%02x\n", type, req);

	// help_devreq(type, req); /* print out device request */

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
 100276c:	00001006 	br	10027b0 <DeviceRequest_Handler+0xb0>
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST))
		(*ClassDeviceRequest[req])();
	else if ((type == USB_VENDOR_REQUEST) && (req < MAX_VENDOR_REQUEST))
 1002770:	e0bfff43 	ldbu	r2,-3(fp)
 1002774:	10801018 	cmpnei	r2,r2,64
 1002778:	10000c1e 	bne	r2,zero,10027ac <DeviceRequest_Handler+0xac>
 100277c:	e0bfff03 	ldbu	r2,-4(fp)
 1002780:	108003e8 	cmpgeui	r2,r2,15
 1002784:	1000091e 	bne	r2,zero,10027ac <DeviceRequest_Handler+0xac>
		(*VendorDeviceRequest[req])();
 1002788:	e0bfff03 	ldbu	r2,-4(fp)
 100278c:	00c040b4 	movhi	r3,258
 1002790:	18eb2804 	addi	r3,r3,-21344
 1002794:	1085883a 	add	r2,r2,r2
 1002798:	1085883a 	add	r2,r2,r2
 100279c:	10c5883a 	add	r2,r2,r3
 10027a0:	10800017 	ldw	r2,0(r2)
 10027a4:	103ee83a 	callr	r2

	if ((type == USB_STANDARD_REQUEST) && (req < MAX_STANDARD_REQUEST)) {
		(*StandardDeviceRequest[req])();
	} else if ((type == USB_CLASS_REQUEST) && (req < MAX_CLASS_REQUEST))
		(*ClassDeviceRequest[req])();
	else if ((type == USB_VENDOR_REQUEST) && (req < MAX_VENDOR_REQUEST))
 10027a8:	00000106 	br	10027b0 <DeviceRequest_Handler+0xb0>
		(*VendorDeviceRequest[req])();
	else {
		Chap9_StallEP0();
 10027ac:	100211c0 	call	100211c <Chap9_StallEP0>
	}
}
 10027b0:	e037883a 	mov	sp,fp
 10027b4:	dfc00117 	ldw	ra,4(sp)
 10027b8:	df000017 	ldw	fp,0(sp)
 10027bc:	dec00204 	addi	sp,sp,8
 10027c0:	f800283a 	ret

010027c4 <help_devreq>:

void help_devreq(UCHAR type, UCHAR req) {
 10027c4:	defffb04 	addi	sp,sp,-20
 10027c8:	dfc00415 	stw	ra,16(sp)
 10027cc:	df000315 	stw	fp,12(sp)
 10027d0:	df000304 	addi	fp,sp,12
 10027d4:	e13ffe05 	stb	r4,-8(fp)
 10027d8:	e17fff05 	stb	r5,-4(fp)
	UCHAR typ = type;
 10027dc:	e0bffe03 	ldbu	r2,-8(fp)
 10027e0:	e0bffd05 	stb	r2,-12(fp)
	typ >>= 5;
 10027e4:	e0bffd03 	ldbu	r2,-12(fp)
 10027e8:	1004d17a 	srli	r2,r2,5
 10027ec:	e0bffd05 	stb	r2,-12(fp)

	if (type == USB_STANDARD_REQUEST) {
 10027f0:	e0bffe03 	ldbu	r2,-8(fp)
 10027f4:	1004c03a 	cmpne	r2,r2,zero
 10027f8:	1000121e 	bne	r2,zero,1002844 <help_devreq+0x80>
		printf("Request Type = %s, Request = %s.\n",
 10027fc:	e0bffd03 	ldbu	r2,-12(fp)
 1002800:	00c040b4 	movhi	r3,258
 1002804:	18eb1704 	addi	r3,r3,-21412
 1002808:	1085883a 	add	r2,r2,r2
 100280c:	1085883a 	add	r2,r2,r2
 1002810:	10c5883a 	add	r2,r2,r3
 1002814:	11400017 	ldw	r5,0(r2)
 1002818:	e0bfff03 	ldbu	r2,-4(fp)
 100281c:	00c040b4 	movhi	r3,258
 1002820:	18eb1b04 	addi	r3,r3,-21396
 1002824:	1085883a 	add	r2,r2,r2
 1002828:	1085883a 	add	r2,r2,r2
 100282c:	10c5883a 	add	r2,r2,r3
 1002830:	11800017 	ldw	r6,0(r2)
 1002834:	010040b4 	movhi	r4,258
 1002838:	2127da04 	addi	r4,r4,-24728
 100283c:	10061480 	call	1006148 <printf>
 1002840:	00002506 	br	10028d8 <help_devreq+0x114>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_STANDARD_REQUEST[req]);
	} else if (type == USB_CLASS_REQUEST) {
 1002844:	e0bffe03 	ldbu	r2,-8(fp)
 1002848:	10800818 	cmpnei	r2,r2,32
 100284c:	1000111e 	bne	r2,zero,1002894 <help_devreq+0xd0>
		printf("Request Type = %s, Request = %s.\n",
 1002850:	e0bffd03 	ldbu	r2,-12(fp)
 1002854:	00c040b4 	movhi	r3,258
 1002858:	18eb1704 	addi	r3,r3,-21412
 100285c:	1085883a 	add	r2,r2,r2
 1002860:	1085883a 	add	r2,r2,r2
 1002864:	10c5883a 	add	r2,r2,r3
 1002868:	11400017 	ldw	r5,0(r2)
 100286c:	e0bfff03 	ldbu	r2,-4(fp)
 1002870:	1085883a 	add	r2,r2,r2
 1002874:	1087883a 	add	r3,r2,r2
 1002878:	d0a00704 	addi	r2,gp,-32740
 100287c:	1885883a 	add	r2,r3,r2
 1002880:	11800017 	ldw	r6,0(r2)
 1002884:	010040b4 	movhi	r4,258
 1002888:	2127da04 	addi	r4,r4,-24728
 100288c:	10061480 	call	1006148 <printf>
 1002890:	00001106 	br	10028d8 <help_devreq+0x114>
				_NAME_USB_REQUEST_TYPE[typ], _NAME_USB_CLASS_REQUEST[req]);
	} else {
		if (bD13flags.bits.verbose)
 1002894:	008040b4 	movhi	r2,258
 1002898:	10ba3104 	addi	r2,r2,-5948
 100289c:	10800017 	ldw	r2,0(r2)
 10028a0:	1080402c 	andhi	r2,r2,256
 10028a4:	1005003a 	cmpeq	r2,r2,zero
 10028a8:	10000b1e 	bne	r2,zero,10028d8 <help_devreq+0x114>
			printf("Request Type = %s, bRequest = 0x%x.\n",
 10028ac:	e0bffd03 	ldbu	r2,-12(fp)
 10028b0:	00c040b4 	movhi	r3,258
 10028b4:	18eb1704 	addi	r3,r3,-21412
 10028b8:	1085883a 	add	r2,r2,r2
 10028bc:	1085883a 	add	r2,r2,r2
 10028c0:	10c5883a 	add	r2,r2,r3
 10028c4:	11400017 	ldw	r5,0(r2)
 10028c8:	e1bfff03 	ldbu	r6,-4(fp)
 10028cc:	010040b4 	movhi	r4,258
 10028d0:	2127e304 	addi	r4,r4,-24692
 10028d4:	10061480 	call	1006148 <printf>
					_NAME_USB_REQUEST_TYPE[typ], req);
	}
}
 10028d8:	e037883a 	mov	sp,fp
 10028dc:	dfc00117 	ldw	ra,4(sp)
 10028e0:	df000017 	ldw	fp,0(sp)
 10028e4:	dec00204 	addi	sp,sp,8
 10028e8:	f800283a 	ret

010028ec <disconnect_USB>:

void disconnect_USB(void) {
 10028ec:	defffe04 	addi	sp,sp,-8
 10028f0:	dfc00115 	stw	ra,4(sp)
 10028f4:	df000015 	stw	fp,0(sp)
 10028f8:	d839883a 	mov	fp,sp
//	printf("USB disconnect\n");
	Hal4D13_SetDevConfig(
 10028fc:	010c0104 	movi	r4,12292
 1002900:	10032700 	call	1003270 <Hal4D13_SetDevConfig>
			D13REG_DEVCNFG_NOLAZYCLOCK | D13REG_DEVCNFG_PWROFF
					| D13REG_DEVCNFG_CLOCKRUNNING);
	Hal4D13_SetMode(
 1002904:	01000204 	movi	r4,8
 1002908:	10032c40 	call	10032c4 <Hal4D13_SetMode>

	D13REG_MODE_INT_EN);

}
 100290c:	e037883a 	mov	sp,fp
 1002910:	dfc00117 	ldw	ra,4(sp)
 1002914:	df000017 	ldw	fp,0(sp)
 1002918:	dec00204 	addi	sp,sp,8
 100291c:	f800283a 	ret

01002920 <connect_USB>:

void connect_USB(void) {
 1002920:	defffe04 	addi	sp,sp,-8
 1002924:	dfc00115 	stw	ra,4(sp)
 1002928:	df000015 	stw	fp,0(sp)
 100292c:	d839883a 	mov	fp,sp

	RaiseIRQL();
 1002930:	100461c0 	call	100461c <usb_disable_all_interrupts>
//	printf("USB connect\n");
	bD13flags.value = 0; /* reset event flags*/
 1002934:	008040b4 	movhi	r2,258
 1002938:	10ba3104 	addi	r2,r2,-5948
 100293c:	10000015 	stw	zero,0(r2)
	bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
 1002940:	010040b4 	movhi	r4,258
 1002944:	213a3104 	addi	r4,r4,-5948
 1002948:	20c00017 	ldw	r3,0(r4)
 100294c:	00bc3fc4 	movi	r2,-3841
 1002950:	1884703a 	and	r2,r3,r2
 1002954:	20800015 	stw	r2,0(r4)
	config_endpoint();
 1002958:	100297c0 	call	100297c <config_endpoint>

	LowerIRQL();
 100295c:	100466c0 	call	100466c <usb_reenable_all_interrupts>

	Hal4D13_SetMode(D13REG_MODE_SOFTCONNECT | D13REG_MODE_DMA16 |
 1002960:	01002244 	movi	r4,137
 1002964:	10032c40 	call	10032c4 <Hal4D13_SetMode>
			D13REG_MODE_INT_EN
//| D13REG_MODE_SUSPND            

			);

}
 1002968:	e037883a 	mov	sp,fp
 100296c:	dfc00117 	ldw	ra,4(sp)
 1002970:	df000017 	ldw	fp,0(sp)
 1002974:	dec00204 	addi	sp,sp,8
 1002978:	f800283a 	ret

0100297c <config_endpoint>:

void config_endpoint(void) {
 100297c:	defffe04 	addi	sp,sp,-8
 1002980:	dfc00115 	stw	ra,4(sp)
 1002984:	df000015 	stw	fp,0(sp)
 1002988:	d839883a 	mov	fp,sp
	/*Control Endpoint*/
//	printf("USB config\n");
	Hal4D13_SetEndpointConfig(D13REG_EPCNFG_FIFO_EN | D13REG_EPCNFG_NONISOSZ_64,
 100298c:	010020c4 	movi	r4,131
 1002990:	000b883a 	mov	r5,zero
 1002994:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			EPINDEX4EP0_CONTROL_OUT);
	Hal4D13_SetEndpointConfig(
 1002998:	010030c4 	movi	r4,195
 100299c:	01400044 	movi	r5,1
 10029a0:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_FIFO_EN | D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_NONISOSZ_64, EPINDEX4EP0_CONTROL_IN);
	/*Control Endpoint*/

	/*port1 is OUT*/
	Hal4D13_SetEndpointConfig(
 10029a4:	010028c4 	movi	r4,163
 10029a8:	01400084 	movi	r5,2
 10029ac:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_DBLBUF_EN |
			D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP01);

	/*port2 is IN*/
	Hal4D13_SetEndpointConfig(
 10029b0:	010038c4 	movi	r4,227
 10029b4:	014000c4 	movi	r5,3
 10029b8:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP02);
	/*DISABLED*/

	/*Bulk Enpoints Double Buffered*/
	Hal4D13_SetEndpointConfig(
 10029bc:	010008c4 	movi	r4,35
 10029c0:	01400104 	movi	r5,4
 10029c4:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_NONISOSZ_64, EPINDEX4EP03);
	Hal4D13_SetEndpointConfig(
 10029c8:	010018c4 	movi	r4,99
 10029cc:	01400144 	movi	r5,5
 10029d0:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_IN_EN | D13REG_EPCNFG_NONISOSZ_64,
			EPINDEX4EP04);
	/*Bulk Enpoints Double Buffered*/

	/*Isochronous Endpoints*/
	Hal4D13_SetEndpointConfig(
 10029d4:	01000c04 	movi	r4,48
 10029d8:	01400184 	movi	r5,6
 10029dc:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP05);
	Hal4D13_SetEndpointConfig(
 10029e0:	01001c04 	movi	r4,112
 10029e4:	014001c4 	movi	r5,7
 10029e8:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN
					| D13REG_EPCNFG_IN_EN, EPINDEX4EP06);
	/*Isochronous Endpoints*/

	/*DISABLED*/
	Hal4D13_SetEndpointConfig(
 10029ec:	01000c04 	movi	r4,48
 10029f0:	01400204 	movi	r5,8
 10029f4:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP07);
	Hal4D13_SetEndpointConfig(
 10029f8:	01001c04 	movi	r4,112
 10029fc:	01400244 	movi	r5,9
 1002a00:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_16
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP08);
	Hal4D13_SetEndpointConfig(
 1002a04:	01000c04 	movi	r4,48
 1002a08:	01400284 	movi	r5,10
 1002a0c:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_16 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP09);
	Hal4D13_SetEndpointConfig(
 1002a10:	01001c04 	movi	r4,112
 1002a14:	014002c4 	movi	r5,11
 1002a18:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_16
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0A);
	Hal4D13_SetEndpointConfig(
 1002a1c:	01000cc4 	movi	r4,51
 1002a20:	01400304 	movi	r5,12
 1002a24:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_64 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP0B);
	Hal4D13_SetEndpointConfig(
 1002a28:	01001cc4 	movi	r4,115
 1002a2c:	01400344 	movi	r5,13
 1002a30:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_IN_EN
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_64
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0C);
	Hal4D13_SetEndpointConfig(
 1002a34:	01000cc4 	movi	r4,51
 1002a38:	01400384 	movi	r5,14
 1002a3c:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
			/*D13REG_EPCNFG_FIFO_EN|*/D13REG_EPCNFG_DBLBUF_EN
					| D13REG_EPCNFG_ISOSZ_64 | D13REG_EPCNFG_ISO_EN,
			EPINDEX4EP0D);
	Hal4D13_SetEndpointConfig(
 1002a40:	01001cc4 	movi	r4,115
 1002a44:	014003c4 	movi	r5,15
 1002a48:	10042800 	call	1004280 <Hal4D13_SetEndpointConfig>
					| D13REG_EPCNFG_DBLBUF_EN | D13REG_EPCNFG_ISOSZ_64
					| D13REG_EPCNFG_ISO_EN, EPINDEX4EP0E);
	/*DISABLED*/

	/*Set interrupt configuration*/
	Hal4D13_SetIntEnable(
 1002a4c:	0103c1c4 	movi	r4,3847
 1002a50:	1003c300 	call	1003c30 <Hal4D13_SetIntEnable>
					//          |D13REG_INTSRC_EP06
					| D13REG_INTSRC_SUSPEND | D13REG_INTSRC_RESUME
					| D13REG_INTSRC_BUSRESET);

	/*Set Hardware Configuration*/
	Hal4D13_SetDevConfig(
 1002a54:	0108d004 	movi	r4,9024
 1002a58:	10032700 	call	1003270 <Hal4D13_SetDevConfig>
			D13REG_DEVCNFG_NOLAZYCLOCK | D13REG_DEVCNFG_CLOCKDIV_120M
					| D13REG_DEVCNFG_DMARQPOL
//            |D13REG_DEVCNFG_EXPULLUP
			);

}
 1002a5c:	e037883a 	mov	sp,fp
 1002a60:	dfc00117 	ldw	ra,4(sp)
 1002a64:	df000017 	ldw	fp,0(sp)
 1002a68:	dec00204 	addi	sp,sp,8
 1002a6c:	f800283a 	ret

01002a70 <reconnect_USB>:

void reconnect_USB(void) {
 1002a70:	defffe04 	addi	sp,sp,-8
 1002a74:	dfc00115 	stw	ra,4(sp)
 1002a78:	df000015 	stw	fp,0(sp)
 1002a7c:	d839883a 	mov	fp,sp
	disconnect_USB();
 1002a80:	10028ec0 	call	10028ec <disconnect_USB>
	connect_USB();
 1002a84:	10029200 	call	1002920 <connect_USB>
}
 1002a88:	e037883a 	mov	sp,fp
 1002a8c:	dfc00117 	ldw	ra,4(sp)
 1002a90:	df000017 	ldw	fp,0(sp)
 1002a94:	dec00204 	addi	sp,sp,8
 1002a98:	f800283a 	ret

01002a9c <suspend_change>:

void suspend_change(void) {
 1002a9c:	deffff04 	addi	sp,sp,-4
 1002aa0:	df000015 	stw	fp,0(sp)
 1002aa4:	d839883a 	mov	fp,sp
//    printf("SUSPEND CHANGE \n");
	// disconnect_USB();
//  Suspend_Device_Controller();
}
 1002aa8:	e037883a 	mov	sp,fp
 1002aac:	df000017 	ldw	fp,0(sp)
 1002ab0:	dec00104 	addi	sp,sp,4
 1002ab4:	f800283a 	ret

01002ab8 <ML_AcknowledgeSETUP>:

void ML_AcknowledgeSETUP(void) {
 1002ab8:	defffe04 	addi	sp,sp,-8
 1002abc:	dfc00115 	stw	ra,4(sp)
 1002ac0:	df000015 	stw	fp,0(sp)
 1002ac4:	d839883a 	mov	fp,sp

	if (Hal4D13_IsSetupPktInvalid() || ControlData.Abort) {
 1002ac8:	10045400 	call	1004540 <Hal4D13_IsSetupPktInvalid>
 1002acc:	10803fcc 	andi	r2,r2,255
 1002ad0:	1004c03a 	cmpne	r2,r2,zero
 1002ad4:	10000a1e 	bne	r2,zero,1002b00 <ML_AcknowledgeSETUP+0x48>
 1002ad8:	008040b4 	movhi	r2,258
 1002adc:	10ba5804 	addi	r2,r2,-5792
 1002ae0:	10800003 	ldbu	r2,0(r2)
 1002ae4:	10803fcc 	andi	r2,r2,255
 1002ae8:	1005003a 	cmpeq	r2,r2,zero
 1002aec:	1000011e 	bne	r2,zero,1002af4 <ML_AcknowledgeSETUP+0x3c>
		return;
 1002af0:	00000306 	br	1002b00 <ML_AcknowledgeSETUP+0x48>
	}

	Hal4D13_AcknowledgeSETUP();
 1002af4:	100351c0 	call	100351c <Hal4D13_AcknowledgeSETUP>
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
 1002af8:	0009883a 	mov	r4,zero
 1002afc:	10035540 	call	1003554 <Hal4D13_ClearBuffer>
}
 1002b00:	e037883a 	mov	sp,fp
 1002b04:	dfc00117 	ldw	ra,4(sp)
 1002b08:	df000017 	ldw	fp,0(sp)
 1002b0c:	dec00204 	addi	sp,sp,8
 1002b10:	f800283a 	ret

01002b14 <ML_Reserved>:

void ML_Reserved(void) {
 1002b14:	defffe04 	addi	sp,sp,-8
 1002b18:	dfc00115 	stw	ra,4(sp)
 1002b1c:	df000015 	stw	fp,0(sp)
 1002b20:	d839883a 	mov	fp,sp
	Hal4D13_ClearBuffer(EPINDEX4EP0_CONTROL_OUT);
 1002b24:	0009883a 	mov	r4,zero
 1002b28:	10035540 	call	1003554 <Hal4D13_ClearBuffer>
}
 1002b2c:	e037883a 	mov	sp,fp
 1002b30:	dfc00117 	ldw	ra,4(sp)
 1002b34:	df000017 	ldw	fp,0(sp)
 1002b38:	dec00204 	addi	sp,sp,8
 1002b3c:	f800283a 	ret

01002b40 <CHECK_CHIP_ID>:

unsigned short CHECK_CHIP_ID(void) {
 1002b40:	defffb04 	addi	sp,sp,-20
 1002b44:	dfc00415 	stw	ra,16(sp)
 1002b48:	df000315 	stw	fp,12(sp)
 1002b4c:	df000304 	addi	fp,sp,12
	unsigned short CHIP_ID;
	unsigned char LOW_ID, HIGH_ID;

	CHIP_ID = Hal4D13_ReadChipID();
 1002b50:	100415c0 	call	100415c <Hal4D13_ReadChipID>
 1002b54:	e0bffd8d 	sth	r2,-10(fp)
	LOW_ID = (unsigned char) CHIP_ID;
 1002b58:	e0bffd8b 	ldhu	r2,-10(fp)
 1002b5c:	e0bffd45 	stb	r2,-11(fp)
	HIGH_ID = (unsigned char) (CHIP_ID >> 8);
 1002b60:	e0bffd8b 	ldhu	r2,-10(fp)
 1002b64:	1004d23a 	srli	r2,r2,8
 1002b68:	e0bffd05 	stb	r2,-12(fp)

	switch (HIGH_ID) {
 1002b6c:	e0bffd03 	ldbu	r2,-12(fp)
 1002b70:	e0bfff15 	stw	r2,-4(fp)
 1002b74:	e0ffff17 	ldw	r3,-4(fp)
 1002b78:	18800da0 	cmpeqi	r2,r3,54
 1002b7c:	1000091e 	bne	r2,zero,1002ba4 <CHECK_CHIP_ID+0x64>
 1002b80:	e0ffff17 	ldw	r3,-4(fp)
 1002b84:	18801860 	cmpeqi	r2,r3,97
 1002b88:	1000011e 	bne	r2,zero,1002b90 <CHECK_CHIP_ID+0x50>
 1002b8c:	00000a06 	br	1002bb8 <CHECK_CHIP_ID+0x78>
	case 0x61: {
//		printf("USB ChipID=0x%04x\n", CHIP_ID);
		CHIP_ID = 0x1161;
 1002b90:	00845844 	movi	r2,4449
 1002b94:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
 1002b98:	e0bffd8b 	ldhu	r2,-10(fp)
 1002b9c:	e0bffe15 	stw	r2,-8(fp)
 1002ba0:	00000706 	br	1002bc0 <CHECK_CHIP_ID+0x80>
		break;
	}

	case 0x36: {
//		printf("USB ChipID=0x%04x\n", CHIP_ID);
		CHIP_ID = 0x1362;
 1002ba4:	0084d884 	movi	r2,4962
 1002ba8:	e0bffd8d 	sth	r2,-10(fp)
		return CHIP_ID;
 1002bac:	e0fffd8b 	ldhu	r3,-10(fp)
 1002bb0:	e0fffe15 	stw	r3,-8(fp)
 1002bb4:	00000206 	br	1002bc0 <CHECK_CHIP_ID+0x80>
		break;
	}

	default: {
//		printf("USB Unknown ChipID=0x%04x\n", CHIP_ID);
		return CHIP_ID;
 1002bb8:	e0bffd8b 	ldhu	r2,-10(fp)
 1002bbc:	e0bffe15 	stw	r2,-8(fp)
 1002bc0:	e0bffe17 	ldw	r2,-8(fp)
		break;
	}

	}

}
 1002bc4:	e037883a 	mov	sp,fp
 1002bc8:	dfc00117 	ldw	ra,4(sp)
 1002bcc:	df000017 	ldw	fp,0(sp)
 1002bd0:	dec00204 	addi	sp,sp,8
 1002bd4:	f800283a 	ret

01002bd8 <D13Bus_ControlEntry>:
// *************************************************************************
// Subroutines
// *************************************************************************

void D13Bus_ControlEntry(void)
{
 1002bd8:	defffe04 	addi	sp,sp,-8
 1002bdc:	dfc00115 	stw	ra,4(sp)
 1002be0:	df000015 	stw	fp,0(sp)
 1002be4:	d839883a 	mov	fp,sp
    // No support now, just stall it.
    D13Bus_StallEP0();
 1002be8:	1002f600 	call	1002f60 <D13Bus_StallEP0>
}
 1002bec:	e037883a 	mov	sp,fp
 1002bf0:	dfc00117 	ldw	ra,4(sp)
 1002bf4:	df000017 	ldw	fp,0(sp)
 1002bf8:	dec00204 	addi	sp,sp,8
 1002bfc:	f800283a 	ret

01002c00 <reserved>:

void reserved(void)
{
 1002c00:	defffe04 	addi	sp,sp,-8
 1002c04:	dfc00115 	stw	ra,4(sp)
 1002c08:	df000015 	stw	fp,0(sp)
 1002c0c:	d839883a 	mov	fp,sp
    // Undefined commands, stall them
    D13Bus_StallEP0();
 1002c10:	1002f600 	call	1002f60 <D13Bus_StallEP0>
}
 1002c14:	e037883a 	mov	sp,fp
 1002c18:	dfc00117 	ldw	ra,4(sp)
 1002c1c:	df000017 	ldw	fp,0(sp)
 1002c20:	dec00204 	addi	sp,sp,8
 1002c24:	f800283a 	ret

01002c28 <read_write_register>:

void read_write_register(void)
{
 1002c28:	defffd04 	addi	sp,sp,-12
 1002c2c:	dfc00215 	stw	ra,8(sp)
 1002c30:	df000115 	stw	fp,4(sp)
 1002c34:	df000104 	addi	fp,sp,4
    unsigned char i;

    if(ControlData.DeviceRequest.bmRequestType & (unsigned char)USB_ENDPOINT_DIRECTION_MASK)
 1002c38:	008040b4 	movhi	r2,258
 1002c3c:	10ba5804 	addi	r2,r2,-5792
 1002c40:	10800083 	ldbu	r2,2(r2)
 1002c44:	10803fcc 	andi	r2,r2,255
 1002c48:	1080201c 	xori	r2,r2,128
 1002c4c:	10bfe004 	addi	r2,r2,-128
 1002c50:	1004403a 	cmpge	r2,r2,zero
 1002c54:	10002e1e 	bne	r2,zero,1002d10 <read_write_register+0xe8>
    {
        if(bD13flags.bits.verbose)
 1002c58:	008040b4 	movhi	r2,258
 1002c5c:	10ba3104 	addi	r2,r2,-5948
 1002c60:	10800017 	ldw	r2,0(r2)
 1002c64:	1080402c 	andhi	r2,r2,256
 1002c68:	1005003a 	cmpeq	r2,r2,zero
 1002c6c:	10000f1e 	bne	r2,zero,1002cac <read_write_register+0x84>
        {
            printf("Read Registers: Offset = 0x%x, Length = 0x%x, Index = 0x%x.\n",
 1002c70:	008040b4 	movhi	r2,258
 1002c74:	10ba5804 	addi	r2,r2,-5792
 1002c78:	1080010b 	ldhu	r2,4(r2)
 1002c7c:	117fffcc 	andi	r5,r2,65535
 1002c80:	008040b4 	movhi	r2,258
 1002c84:	10ba5804 	addi	r2,r2,-5792
 1002c88:	1080020b 	ldhu	r2,8(r2)
 1002c8c:	11bfffcc 	andi	r6,r2,65535
 1002c90:	008040b4 	movhi	r2,258
 1002c94:	10ba5804 	addi	r2,r2,-5792
 1002c98:	1080018b 	ldhu	r2,6(r2)
 1002c9c:	11ffffcc 	andi	r7,r2,65535
 1002ca0:	010040b4 	movhi	r4,258
 1002ca4:	2127ed04 	addi	r4,r4,-24652
 1002ca8:	10061480 	call	1006148 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);
        }

        if(ControlData.DeviceRequest.wIndex == GET_FIRMWARE_VERSION &&
 1002cac:	008040b4 	movhi	r2,258
 1002cb0:	10ba5804 	addi	r2,r2,-5792
 1002cb4:	1080018b 	ldhu	r2,6(r2)
 1002cb8:	10bfffcc 	andi	r2,r2,65535
 1002cbc:	10811c98 	cmpnei	r2,r2,1138
 1002cc0:	10000e1e 	bne	r2,zero,1002cfc <read_write_register+0xd4>
 1002cc4:	008040b4 	movhi	r2,258
 1002cc8:	10ba5804 	addi	r2,r2,-5792
 1002ccc:	1080010b 	ldhu	r2,4(r2)
 1002cd0:	10bfffcc 	andi	r2,r2,65535
 1002cd4:	1004c03a 	cmpne	r2,r2,zero
 1002cd8:	1000081e 	bne	r2,zero,1002cfc <read_write_register+0xd4>
 1002cdc:	008040b4 	movhi	r2,258
 1002ce0:	10ba5804 	addi	r2,r2,-5792
 1002ce4:	1080020b 	ldhu	r2,8(r2)
 1002ce8:	10bfffcc 	andi	r2,r2,65535
 1002cec:	10800058 	cmpnei	r2,r2,1
 1002cf0:	1000021e 	bne	r2,zero,1002cfc <read_write_register+0xd4>
            ControlData.DeviceRequest.wValue == 0 &&
            ControlData.DeviceRequest.wLength == 1)
            {
                get_firmware_version();
 1002cf4:	1002f280 	call	1002f28 <get_firmware_version>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);
        }

        if(ControlData.DeviceRequest.wIndex == GET_FIRMWARE_VERSION &&
 1002cf8:	00004a06 	br	1002e24 <read_write_register+0x1fc>
            {
                get_firmware_version();
            }
        else
        {
            Chap9_StallEP0();
 1002cfc:	100211c0 	call	100211c <Chap9_StallEP0>
            printf("stall: get firmware version\n");
 1002d00:	010040b4 	movhi	r4,258
 1002d04:	2127fd04 	addi	r4,r4,-24588
 1002d08:	10062840 	call	1006284 <puts>
 1002d0c:	00004506 	br	1002e24 <read_write_register+0x1fc>
        }

    }
    else
    {
        if(bD13flags.bits.verbose)
 1002d10:	008040b4 	movhi	r2,258
 1002d14:	10ba3104 	addi	r2,r2,-5948
 1002d18:	10800017 	ldw	r2,0(r2)
 1002d1c:	1080402c 	andhi	r2,r2,256
 1002d20:	1005003a 	cmpeq	r2,r2,zero
 1002d24:	10002a1e 	bne	r2,zero,1002dd0 <read_write_register+0x1a8>
        {

            printf("Write Registers: Offset = 0x%x, Length = 0x%x, Index = 0x%x.\n",
 1002d28:	008040b4 	movhi	r2,258
 1002d2c:	10ba5804 	addi	r2,r2,-5792
 1002d30:	1080010b 	ldhu	r2,4(r2)
 1002d34:	117fffcc 	andi	r5,r2,65535
 1002d38:	008040b4 	movhi	r2,258
 1002d3c:	10ba5804 	addi	r2,r2,-5792
 1002d40:	1080020b 	ldhu	r2,8(r2)
 1002d44:	11bfffcc 	andi	r6,r2,65535
 1002d48:	008040b4 	movhi	r2,258
 1002d4c:	10ba5804 	addi	r2,r2,-5792
 1002d50:	1080018b 	ldhu	r2,6(r2)
 1002d54:	11ffffcc 	andi	r7,r2,65535
 1002d58:	010040b4 	movhi	r4,258
 1002d5c:	21280404 	addi	r4,r4,-24560
 1002d60:	10061480 	call	1006148 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);

            printf("Data: ");
 1002d64:	010040b4 	movhi	r4,258
 1002d68:	21281404 	addi	r4,r4,-24496
 1002d6c:	10061480 	call	1006148 <printf>
            for(i = 0; i < ControlData.DeviceRequest.wLength; i ++)
 1002d70:	e03fff05 	stb	zero,-4(fp)
 1002d74:	00000d06 	br	1002dac <read_write_register+0x184>
                printf("0x%x, ", *((ControlData.dataBuffer)+i));
 1002d78:	e0bfff03 	ldbu	r2,-4(fp)
 1002d7c:	1007883a 	mov	r3,r2
 1002d80:	008040b4 	movhi	r2,258
 1002d84:	10ba5d04 	addi	r2,r2,-5772
 1002d88:	1885883a 	add	r2,r3,r2
 1002d8c:	10800003 	ldbu	r2,0(r2)
 1002d90:	11403fcc 	andi	r5,r2,255
 1002d94:	010040b4 	movhi	r4,258
 1002d98:	21281604 	addi	r4,r4,-24488
 1002d9c:	10061480 	call	1006148 <printf>
                ControlData.DeviceRequest.wValue,
                ControlData.DeviceRequest.wLength,
                ControlData.DeviceRequest.wIndex);

            printf("Data: ");
            for(i = 0; i < ControlData.DeviceRequest.wLength; i ++)
 1002da0:	e0bfff03 	ldbu	r2,-4(fp)
 1002da4:	10800044 	addi	r2,r2,1
 1002da8:	e0bfff05 	stb	r2,-4(fp)
 1002dac:	e0ffff03 	ldbu	r3,-4(fp)
 1002db0:	008040b4 	movhi	r2,258
 1002db4:	10ba5804 	addi	r2,r2,-5792
 1002db8:	1080020b 	ldhu	r2,8(r2)
 1002dbc:	18ffffcc 	andi	r3,r3,65535
 1002dc0:	10bfffcc 	andi	r2,r2,65535
 1002dc4:	18bfec36 	bltu	r3,r2,1002d78 <read_write_register+0x150>
                printf("0x%x, ", *((ControlData.dataBuffer)+i));
            printf("\n");
 1002dc8:	01000284 	movi	r4,10
 1002dcc:	10061c00 	call	10061c0 <putchar>
        }

        if(ControlData.DeviceRequest.wIndex == SETUP_DMA_REQUEST &&
 1002dd0:	008040b4 	movhi	r2,258
 1002dd4:	10ba5804 	addi	r2,r2,-5792
 1002dd8:	1080018b 	ldhu	r2,6(r2)
 1002ddc:	10bfffcc 	andi	r2,r2,65535
 1002de0:	10811c58 	cmpnei	r2,r2,1137
 1002de4:	10000f1e 	bne	r2,zero,1002e24 <read_write_register+0x1fc>
 1002de8:	008040b4 	movhi	r2,258
 1002dec:	10ba5804 	addi	r2,r2,-5792
 1002df0:	1080010b 	ldhu	r2,4(r2)
 1002df4:	10bfffcc 	andi	r2,r2,65535
 1002df8:	1004c03a 	cmpne	r2,r2,zero
 1002dfc:	1000091e 	bne	r2,zero,1002e24 <read_write_register+0x1fc>
 1002e00:	008040b4 	movhi	r2,258
 1002e04:	10ba5804 	addi	r2,r2,-5792
 1002e08:	1080020b 	ldhu	r2,8(r2)
 1002e0c:	10bfffcc 	andi	r2,r2,65535
 1002e10:	10800198 	cmpnei	r2,r2,6
 1002e14:	1000031e 	bne	r2,zero,1002e24 <read_write_register+0x1fc>
            ControlData.DeviceRequest.wValue == 0 &&
            ControlData.DeviceRequest.wLength == 6)
            {
                RaiseIRQL();
 1002e18:	100461c0 	call	100461c <usb_disable_all_interrupts>
                setup_dma_request();
 1002e1c:	1002e380 	call	1002e38 <setup_dma_request>
                LowerIRQL();
 1002e20:	100466c0 	call	100466c <usb_reenable_all_interrupts>
            }

    }
}
 1002e24:	e037883a 	mov	sp,fp
 1002e28:	dfc00117 	ldw	ra,4(sp)
 1002e2c:	df000017 	ldw	fp,0(sp)
 1002e30:	dec00204 	addi	sp,sp,8
 1002e34:	f800283a 	ret

01002e38 <setup_dma_request>:

void setup_dma_request()
{
 1002e38:	defffe04 	addi	sp,sp,-8
 1002e3c:	dfc00115 	stw	ra,4(sp)
 1002e40:	df000015 	stw	fp,0(sp)
 1002e44:	d839883a 	mov	fp,sp
    memcpy((unsigned char *)&ioRequest + ControlData.DeviceRequest.wValue,
 1002e48:	008040b4 	movhi	r2,258
 1002e4c:	10ba5804 	addi	r2,r2,-5792
 1002e50:	1080010b 	ldhu	r2,4(r2)
 1002e54:	10bfffcc 	andi	r2,r2,65535
 1002e58:	1007883a 	mov	r3,r2
 1002e5c:	008040b4 	movhi	r2,258
 1002e60:	10ba3604 	addi	r2,r2,-5928
 1002e64:	1887883a 	add	r3,r3,r2
 1002e68:	008040b4 	movhi	r2,258
 1002e6c:	10ba5804 	addi	r2,r2,-5792
 1002e70:	1080020b 	ldhu	r2,8(r2)
 1002e74:	11bfffcc 	andi	r6,r2,65535
 1002e78:	008040b4 	movhi	r2,258
 1002e7c:	10ba5d04 	addi	r2,r2,-5772
 1002e80:	1809883a 	mov	r4,r3
 1002e84:	100b883a 	mov	r5,r2
 1002e88:	10060100 	call	1006010 <memcpy>
        ControlData.dataBuffer,
        ControlData.DeviceRequest.wLength);

    ioRequest.uSize = SWAP(ioRequest.uSize);
 1002e8c:	008040b4 	movhi	r2,258
 1002e90:	10ba3604 	addi	r2,r2,-5928
 1002e94:	10c0010b 	ldhu	r3,4(r2)
 1002e98:	008040b4 	movhi	r2,258
 1002e9c:	10ba3604 	addi	r2,r2,-5928
 1002ea0:	10c0010d 	sth	r3,4(r2)
    ioRequest.uAddressL = SWAP(ioRequest.uAddressL);
 1002ea4:	008040b4 	movhi	r2,258
 1002ea8:	10ba3604 	addi	r2,r2,-5928
 1002eac:	10c0000b 	ldhu	r3,0(r2)
 1002eb0:	008040b4 	movhi	r2,258
 1002eb4:	10ba3604 	addi	r2,r2,-5928
 1002eb8:	10c0000d 	sth	r3,0(r2)
    printf("Setup Data: addL, addH, uSize =%x, %x, %x \n", \
 1002ebc:	008040b4 	movhi	r2,258
 1002ec0:	10ba3604 	addi	r2,r2,-5928
 1002ec4:	1080000b 	ldhu	r2,0(r2)
 1002ec8:	117fffcc 	andi	r5,r2,65535
 1002ecc:	008040b4 	movhi	r2,258
 1002ed0:	10ba3604 	addi	r2,r2,-5928
 1002ed4:	10800083 	ldbu	r2,2(r2)
 1002ed8:	11803fcc 	andi	r6,r2,255
 1002edc:	008040b4 	movhi	r2,258
 1002ee0:	10ba3604 	addi	r2,r2,-5928
 1002ee4:	1080010b 	ldhu	r2,4(r2)
 1002ee8:	11ffffcc 	andi	r7,r2,65535
 1002eec:	010040b4 	movhi	r4,258
 1002ef0:	21281804 	addi	r4,r4,-24480
 1002ef4:	10061480 	call	1006148 <printf>
        Chap9_StallEP0();
        printf("stall: ioRequest.uSize > DMA_BUFFER_SIZE.\n");
    }
    else
    {
        RaiseIRQL();
 1002ef8:	100461c0 	call	100461c <usb_disable_all_interrupts>
        bD13flags.bits.setup_dma = 1;
 1002efc:	00c040b4 	movhi	r3,258
 1002f00:	18fa3104 	addi	r3,r3,-5948
 1002f04:	18800017 	ldw	r2,0(r3)
 1002f08:	10800074 	orhi	r2,r2,1
 1002f0c:	18800015 	stw	r2,0(r3)
        LowerIRQL();
 1002f10:	100466c0 	call	100466c <usb_reenable_all_interrupts>
    }
}
 1002f14:	e037883a 	mov	sp,fp
 1002f18:	dfc00117 	ldw	ra,4(sp)
 1002f1c:	df000017 	ldw	fp,0(sp)
 1002f20:	dec00204 	addi	sp,sp,8
 1002f24:	f800283a 	ret

01002f28 <get_firmware_version>:

void get_firmware_version()
{
 1002f28:	defffd04 	addi	sp,sp,-12
 1002f2c:	dfc00215 	stw	ra,8(sp)
 1002f30:	df000115 	stw	fp,4(sp)
 1002f34:	df000104 	addi	fp,sp,4
    unsigned char i;

    i = 0x01; 
 1002f38:	00800044 	movi	r2,1
 1002f3c:	e0bfff05 	stb	r2,-4(fp)
    D13Bus_SingleTransmitEP0(&i, 1);
 1002f40:	e13fff04 	addi	r4,fp,-4
 1002f44:	01400044 	movi	r5,1
 1002f48:	1002f880 	call	1002f88 <D13Bus_SingleTransmitEP0>
}
 1002f4c:	e037883a 	mov	sp,fp
 1002f50:	dfc00117 	ldw	ra,4(sp)
 1002f54:	df000017 	ldw	fp,0(sp)
 1002f58:	dec00204 	addi	sp,sp,8
 1002f5c:	f800283a 	ret

01002f60 <D13Bus_StallEP0>:
// *************************************************************************
// D13Bus support functions
// *************************************************************************

void D13Bus_StallEP0(void)
{
 1002f60:	defffe04 	addi	sp,sp,-8
 1002f64:	dfc00115 	stw	ra,4(sp)
 1002f68:	df000015 	stw	fp,0(sp)
 1002f6c:	d839883a 	mov	fp,sp
    Chap9_StallEP0();
 1002f70:	100211c0 	call	100211c <Chap9_StallEP0>
}
 1002f74:	e037883a 	mov	sp,fp
 1002f78:	dfc00117 	ldw	ra,4(sp)
 1002f7c:	df000017 	ldw	fp,0(sp)
 1002f80:	dec00204 	addi	sp,sp,8
 1002f84:	f800283a 	ret

01002f88 <D13Bus_SingleTransmitEP0>:

void D13Bus_SingleTransmitEP0(UCHAR * buf, UCHAR len)
{
 1002f88:	defffc04 	addi	sp,sp,-16
 1002f8c:	dfc00315 	stw	ra,12(sp)
 1002f90:	df000215 	stw	fp,8(sp)
 1002f94:	df000204 	addi	fp,sp,8
 1002f98:	e13ffe15 	stw	r4,-8(fp)
 1002f9c:	e17fff05 	stb	r5,-4(fp)
    Hal4D13_SingleTransmitEP0(buf, len);
 1002fa0:	e17fff03 	ldbu	r5,-4(fp)
 1002fa4:	e13ffe17 	ldw	r4,-8(fp)
 1002fa8:	10043180 	call	1004318 <Hal4D13_SingleTransmitEP0>

    RaiseIRQL();
 1002fac:	100461c0 	call	100461c <usb_disable_all_interrupts>
    if(!ControlData.Abort)
 1002fb0:	008040b4 	movhi	r2,258
 1002fb4:	10ba5804 	addi	r2,r2,-5792
 1002fb8:	10800003 	ldbu	r2,0(r2)
 1002fbc:	10803fcc 	andi	r2,r2,255
 1002fc0:	1004c03a 	cmpne	r2,r2,zero
 1002fc4:	1000111e 	bne	r2,zero,100300c <D13Bus_SingleTransmitEP0+0x84>
    {
        ControlData.wLength = ControlData.wCount = len;
 1002fc8:	e0ffff03 	ldbu	r3,-4(fp)
 1002fcc:	008040b4 	movhi	r2,258
 1002fd0:	10ba5804 	addi	r2,r2,-5792
 1002fd4:	10c0030d 	sth	r3,12(r2)
 1002fd8:	008040b4 	movhi	r2,258
 1002fdc:	10ba5804 	addi	r2,r2,-5792
 1002fe0:	10c0030b 	ldhu	r3,12(r2)
 1002fe4:	008040b4 	movhi	r2,258
 1002fe8:	10ba5804 	addi	r2,r2,-5792
 1002fec:	10c0028d 	sth	r3,10(r2)
        bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1002ff0:	010040b4 	movhi	r4,258
 1002ff4:	213a3104 	addi	r4,r4,-5948
 1002ff8:	20c00017 	ldw	r3,0(r4)
 1002ffc:	00bc3fc4 	movi	r2,-3841
 1003000:	1884703a 	and	r2,r3,r2
 1003004:	10810014 	ori	r2,r2,1024
 1003008:	20800015 	stw	r2,0(r4)
    }
    LowerIRQL();
 100300c:	100466c0 	call	100466c <usb_reenable_all_interrupts>

}
 1003010:	e037883a 	mov	sp,fp
 1003014:	dfc00117 	ldw	ra,4(sp)
 1003018:	df000017 	ldw	fp,0(sp)
 100301c:	dec00204 	addi	sp,sp,8
 1003020:	f800283a 	ret

01003024 <D13Bus_BurstTransmitEP0>:

void D13Bus_BurstTransmitEP0(UCHAR * pData, USHORT len)
{
 1003024:	defffc04 	addi	sp,sp,-16
 1003028:	dfc00315 	stw	ra,12(sp)
 100302c:	df000215 	stw	fp,8(sp)
 1003030:	df000204 	addi	fp,sp,8
 1003034:	e13ffe15 	stw	r4,-8(fp)
 1003038:	e17fff0d 	sth	r5,-4(fp)
    ControlData.wCount = 0;
 100303c:	008040b4 	movhi	r2,258
 1003040:	10ba5804 	addi	r2,r2,-5792
 1003044:	1000030d 	sth	zero,12(r2)
    if(ControlData.wLength > len)
 1003048:	008040b4 	movhi	r2,258
 100304c:	10ba5804 	addi	r2,r2,-5792
 1003050:	1080028b 	ldhu	r2,10(r2)
 1003054:	10ffffcc 	andi	r3,r2,65535
 1003058:	e0bfff0b 	ldhu	r2,-4(fp)
 100305c:	10c0042e 	bgeu	r2,r3,1003070 <D13Bus_BurstTransmitEP0+0x4c>
        ControlData.wLength = len;
 1003060:	00c040b4 	movhi	r3,258
 1003064:	18fa5804 	addi	r3,r3,-5792
 1003068:	e0bfff0b 	ldhu	r2,-4(fp)
 100306c:	1880028d 	sth	r2,10(r3)

    ControlData.Addr.pData = pData;
 1003070:	00c040b4 	movhi	r3,258
 1003074:	18fa5804 	addi	r3,r3,-5792
 1003078:	e0bffe17 	ldw	r2,-8(fp)
 100307c:	18800415 	stw	r2,16(r3)
    if( ControlData.wLength >= EP0_PACKET_SIZE)
 1003080:	008040b4 	movhi	r2,258
 1003084:	10ba5804 	addi	r2,r2,-5792
 1003088:	1080028b 	ldhu	r2,10(r2)
 100308c:	10bfffcc 	andi	r2,r2,65535
 1003090:	10801030 	cmpltui	r2,r2,64
 1003094:	10001e1e 	bne	r2,zero,1003110 <D13Bus_BurstTransmitEP0+0xec>
    {
        Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, ControlData.Addr.pData, EP0_PACKET_SIZE);
 1003098:	008040b4 	movhi	r2,258
 100309c:	10ba5804 	addi	r2,r2,-5792
 10030a0:	11400417 	ldw	r5,16(r2)
 10030a4:	01000044 	movi	r4,1
 10030a8:	01801004 	movi	r6,64
 10030ac:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>
        RaiseIRQL();
 10030b0:	100461c0 	call	100461c <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 10030b4:	008040b4 	movhi	r2,258
 10030b8:	10ba5804 	addi	r2,r2,-5792
 10030bc:	10800003 	ldbu	r2,0(r2)
 10030c0:	10803fcc 	andi	r2,r2,255
 10030c4:	1004c03a 	cmpne	r2,r2,zero
 10030c8:	10000f1e 	bne	r2,zero,1003108 <D13Bus_BurstTransmitEP0+0xe4>
        {
            ControlData.wCount += EP0_PACKET_SIZE;
 10030cc:	008040b4 	movhi	r2,258
 10030d0:	10ba5804 	addi	r2,r2,-5792
 10030d4:	1080030b 	ldhu	r2,12(r2)
 10030d8:	10801004 	addi	r2,r2,64
 10030dc:	1007883a 	mov	r3,r2
 10030e0:	008040b4 	movhi	r2,258
 10030e4:	10ba5804 	addi	r2,r2,-5792
 10030e8:	10c0030d 	sth	r3,12(r2)
            bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 10030ec:	010040b4 	movhi	r4,258
 10030f0:	213a3104 	addi	r4,r4,-5948
 10030f4:	20c00017 	ldw	r3,0(r4)
 10030f8:	00bc3fc4 	movi	r2,-3841
 10030fc:	1884703a 	and	r2,r3,r2
 1003100:	10804014 	ori	r2,r2,256
 1003104:	20800015 	stw	r2,0(r4)
        }

        LowerIRQL();
 1003108:	100466c0 	call	100466c <usb_reenable_all_interrupts>
 100310c:	00002106 	br	1003194 <D13Bus_BurstTransmitEP0+0x170>

    }
    else
    {
        Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, pData, ControlData.wLength);
 1003110:	008040b4 	movhi	r2,258
 1003114:	10ba5804 	addi	r2,r2,-5792
 1003118:	1080028b 	ldhu	r2,10(r2)
 100311c:	11bfffcc 	andi	r6,r2,65535
 1003120:	01000044 	movi	r4,1
 1003124:	e17ffe17 	ldw	r5,-8(fp)
 1003128:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>
        RaiseIRQL();
 100312c:	100461c0 	call	100461c <usb_disable_all_interrupts>
        if(!ControlData.Abort)
 1003130:	008040b4 	movhi	r2,258
 1003134:	10ba5804 	addi	r2,r2,-5792
 1003138:	10800003 	ldbu	r2,0(r2)
 100313c:	10803fcc 	andi	r2,r2,255
 1003140:	1004c03a 	cmpne	r2,r2,zero
 1003144:	1000121e 	bne	r2,zero,1003190 <D13Bus_BurstTransmitEP0+0x16c>
        {
            ControlData.wCount += ControlData.wLength;
 1003148:	008040b4 	movhi	r2,258
 100314c:	10ba5804 	addi	r2,r2,-5792
 1003150:	10c0030b 	ldhu	r3,12(r2)
 1003154:	008040b4 	movhi	r2,258
 1003158:	10ba5804 	addi	r2,r2,-5792
 100315c:	1080028b 	ldhu	r2,10(r2)
 1003160:	1885883a 	add	r2,r3,r2
 1003164:	1007883a 	mov	r3,r2
 1003168:	008040b4 	movhi	r2,258
 100316c:	10ba5804 	addi	r2,r2,-5792
 1003170:	10c0030d 	sth	r3,12(r2)
            bD13flags.bits.DCP_state = USBFSM4DCP_DATAIN;
 1003174:	010040b4 	movhi	r4,258
 1003178:	213a3104 	addi	r4,r4,-5948
 100317c:	20c00017 	ldw	r3,0(r4)
 1003180:	00bc3fc4 	movi	r2,-3841
 1003184:	1884703a 	and	r2,r3,r2
 1003188:	10804014 	ori	r2,r2,256
 100318c:	20800015 	stw	r2,0(r4)
        }
        LowerIRQL();
 1003190:	100466c0 	call	100466c <usb_reenable_all_interrupts>
    }
}
 1003194:	e037883a 	mov	sp,fp
 1003198:	dfc00117 	ldw	ra,4(sp)
 100319c:	df000017 	ldw	fp,0(sp)
 10031a0:	dec00204 	addi	sp,sp,8
 10031a4:	f800283a 	ret

010031a8 <Hal4D13_AcquireD13>:
 // ************************************************************************
 // Subroutines -- 1
 // ************************************************************************
 */

void Hal4D13_AcquireD13(unsigned char g_host_IRQ_num, void *usb_isr) {
 10031a8:	defffc04 	addi	sp,sp,-16
 10031ac:	dfc00315 	stw	ra,12(sp)
 10031b0:	df000215 	stw	fp,8(sp)
 10031b4:	df000204 	addi	fp,sp,8
 10031b8:	e17fff15 	stw	r5,-4(fp)
 10031bc:	e13ffe05 	stb	r4,-8(fp)
	alt_irq_register(g_host_IRQ_num, NULL, usb_isr);
 10031c0:	e13ffe03 	ldbu	r4,-8(fp)
 10031c4:	e1bfff17 	ldw	r6,-4(fp)
 10031c8:	000b883a 	mov	r5,zero
 10031cc:	101610c0 	call	101610c <alt_irq_register>
}
 10031d0:	e037883a 	mov	sp,fp
 10031d4:	dfc00117 	ldw	ra,4(sp)
 10031d8:	df000017 	ldw	fp,0(sp)
 10031dc:	dec00204 	addi	sp,sp,8
 10031e0:	f800283a 	ret

010031e4 <Hal4D13_ResetDevice>:

void Hal4D13_ResetDevice(void) {
 10031e4:	deffff04 	addi	sp,sp,-4
 10031e8:	df000015 	stw	fp,0(sp)
 10031ec:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RESET);
 10031f0:	008040b4 	movhi	r2,258
 10031f4:	10ba3004 	addi	r2,r2,-5952
 10031f8:	10800017 	ldw	r2,0(r2)
 10031fc:	10800304 	addi	r2,r2,12
 1003200:	1007883a 	mov	r3,r2
 1003204:	00803d84 	movi	r2,246
 1003208:	18800035 	stwio	r2,0(r3)
}
 100320c:	e037883a 	mov	sp,fp
 1003210:	df000017 	ldw	fp,0(sp)
 1003214:	dec00104 	addi	sp,sp,4
 1003218:	f800283a 	ret

0100321c <Hal4D13_GetDevConfig>:

USHORT Hal4D13_GetDevConfig(void) {
 100321c:	defffe04 	addi	sp,sp,-8
 1003220:	df000115 	stw	fp,4(sp)
 1003224:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_CNFG);
 1003228:	008040b4 	movhi	r2,258
 100322c:	10ba3004 	addi	r2,r2,-5952
 1003230:	10800017 	ldw	r2,0(r2)
 1003234:	10800304 	addi	r2,r2,12
 1003238:	1007883a 	mov	r3,r2
 100323c:	00802ec4 	movi	r2,187
 1003240:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003244:	008040b4 	movhi	r2,258
 1003248:	10ba3004 	addi	r2,r2,-5952
 100324c:	10800017 	ldw	r2,0(r2)
 1003250:	10800204 	addi	r2,r2,8
 1003254:	10800037 	ldwio	r2,0(r2)
 1003258:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 100325c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003260:	e037883a 	mov	sp,fp
 1003264:	df000017 	ldw	fp,0(sp)
 1003268:	dec00104 	addi	sp,sp,4
 100326c:	f800283a 	ret

01003270 <Hal4D13_SetDevConfig>:

void Hal4D13_SetDevConfig(USHORT wDevCnfg) {
 1003270:	defffe04 	addi	sp,sp,-8
 1003274:	df000115 	stw	fp,4(sp)
 1003278:	df000104 	addi	fp,sp,4
 100327c:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_CNFG);
 1003280:	008040b4 	movhi	r2,258
 1003284:	10ba3004 	addi	r2,r2,-5952
 1003288:	10800017 	ldw	r2,0(r2)
 100328c:	10800304 	addi	r2,r2,12
 1003290:	1007883a 	mov	r3,r2
 1003294:	00802e84 	movi	r2,186
 1003298:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDevCnfg);
 100329c:	008040b4 	movhi	r2,258
 10032a0:	10ba3004 	addi	r2,r2,-5952
 10032a4:	10800017 	ldw	r2,0(r2)
 10032a8:	10800204 	addi	r2,r2,8
 10032ac:	e0ffff0b 	ldhu	r3,-4(fp)
 10032b0:	10c00035 	stwio	r3,0(r2)
}
 10032b4:	e037883a 	mov	sp,fp
 10032b8:	df000017 	ldw	fp,0(sp)
 10032bc:	dec00104 	addi	sp,sp,4
 10032c0:	f800283a 	ret

010032c4 <Hal4D13_SetMode>:

void Hal4D13_SetMode(UCHAR bMode) {
 10032c4:	defffe04 	addi	sp,sp,-8
 10032c8:	df000115 	stw	fp,4(sp)
 10032cc:	df000104 	addi	fp,sp,4
 10032d0:	e13fff05 	stb	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
 10032d4:	008040b4 	movhi	r2,258
 10032d8:	10ba3004 	addi	r2,r2,-5952
 10032dc:	10800017 	ldw	r2,0(r2)
 10032e0:	10800304 	addi	r2,r2,12
 10032e4:	1007883a 	mov	r3,r2
 10032e8:	00802e04 	movi	r2,184
 10032ec:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, bMode);
 10032f0:	008040b4 	movhi	r2,258
 10032f4:	10ba3004 	addi	r2,r2,-5952
 10032f8:	10800017 	ldw	r2,0(r2)
 10032fc:	10800204 	addi	r2,r2,8
 1003300:	e0ffff03 	ldbu	r3,-4(fp)
 1003304:	10c00035 	stwio	r3,0(r2)
}
 1003308:	e037883a 	mov	sp,fp
 100330c:	df000017 	ldw	fp,0(sp)
 1003310:	dec00104 	addi	sp,sp,4
 1003314:	f800283a 	ret

01003318 <Hal4D13_GetMode>:

UCHAR Hal4D13_GetMode(void) {
 1003318:	defffe04 	addi	sp,sp,-8
 100331c:	df000115 	stw	fp,4(sp)
 1003320:	df000104 	addi	fp,sp,4
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
 1003324:	008040b4 	movhi	r2,258
 1003328:	10ba3004 	addi	r2,r2,-5952
 100332c:	10800017 	ldw	r2,0(r2)
 1003330:	10800304 	addi	r2,r2,12
 1003334:	1007883a 	mov	r3,r2
 1003338:	00802e44 	movi	r2,185
 100333c:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003340:	008040b4 	movhi	r2,258
 1003344:	10ba3004 	addi	r2,r2,-5952
 1003348:	10800017 	ldw	r2,0(r2)
 100334c:	10800204 	addi	r2,r2,8
 1003350:	10800037 	ldwio	r2,0(r2)
 1003354:	1007883a 	mov	r3,r2
 1003358:	00bfffc4 	movi	r2,-1
 100335c:	1884703a 	and	r2,r3,r2
 1003360:	e0bfff05 	stb	r2,-4(fp)
	return c;
 1003364:	e0bfff03 	ldbu	r2,-4(fp)
}
 1003368:	e037883a 	mov	sp,fp
 100336c:	df000017 	ldw	fp,0(sp)
 1003370:	dec00104 	addi	sp,sp,4
 1003374:	f800283a 	ret

01003378 <Hal4D13_GetAddress>:

UCHAR Hal4D13_GetAddress(void) {
 1003378:	defffe04 	addi	sp,sp,-8
 100337c:	df000115 	stw	fp,4(sp)
 1003380:	df000104 	addi	fp,sp,4
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_ADDR);
 1003384:	008040b4 	movhi	r2,258
 1003388:	10ba3004 	addi	r2,r2,-5952
 100338c:	10800017 	ldw	r2,0(r2)
 1003390:	10800304 	addi	r2,r2,12
 1003394:	1007883a 	mov	r3,r2
 1003398:	00802dc4 	movi	r2,183
 100339c:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 10033a0:	008040b4 	movhi	r2,258
 10033a4:	10ba3004 	addi	r2,r2,-5952
 10033a8:	10800017 	ldw	r2,0(r2)
 10033ac:	10800204 	addi	r2,r2,8
 10033b0:	10800037 	ldwio	r2,0(r2)
 10033b4:	1007883a 	mov	r3,r2
 10033b8:	00bfffc4 	movi	r2,-1
 10033bc:	1884703a 	and	r2,r3,r2
 10033c0:	e0bfff05 	stb	r2,-4(fp)
	return c;
 10033c4:	e0bfff03 	ldbu	r2,-4(fp)
}
 10033c8:	e037883a 	mov	sp,fp
 10033cc:	df000017 	ldw	fp,0(sp)
 10033d0:	dec00104 	addi	sp,sp,4
 10033d4:	f800283a 	ret

010033d8 <Hal4D13_SetAddressEnable>:

void Hal4D13_SetAddressEnable(UCHAR bAddress, UCHAR bEnable) {
 10033d8:	defffd04 	addi	sp,sp,-12
 10033dc:	df000215 	stw	fp,8(sp)
 10033e0:	df000204 	addi	fp,sp,8
 10033e4:	e13ffe05 	stb	r4,-8(fp)
 10033e8:	e17fff05 	stb	r5,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_ADDR);
 10033ec:	008040b4 	movhi	r2,258
 10033f0:	10ba3004 	addi	r2,r2,-5952
 10033f4:	10800017 	ldw	r2,0(r2)
 10033f8:	10800304 	addi	r2,r2,12
 10033fc:	1007883a 	mov	r3,r2
 1003400:	00802d84 	movi	r2,182
 1003404:	18800035 	stwio	r2,0(r3)
	if (bEnable)
 1003408:	e0bfff03 	ldbu	r2,-4(fp)
 100340c:	1005003a 	cmpeq	r2,r2,zero
 1003410:	1000051e 	bne	r2,zero,1003428 <Hal4D13_SetAddressEnable+0x50>
		bAddress |= D13REG_DEVADDR_EN;
 1003414:	e0bffe03 	ldbu	r2,-8(fp)
 1003418:	00ffe004 	movi	r3,-128
 100341c:	10c4b03a 	or	r2,r2,r3
 1003420:	e0bffe05 	stb	r2,-8(fp)
 1003424:	00000306 	br	1003434 <Hal4D13_SetAddressEnable+0x5c>
	else
		bAddress &= D13REG_DEVADDR_MASK;
 1003428:	e0bffe03 	ldbu	r2,-8(fp)
 100342c:	10801fcc 	andi	r2,r2,127
 1003430:	e0bffe05 	stb	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_DATA_PORT, bAddress);
 1003434:	008040b4 	movhi	r2,258
 1003438:	10ba3004 	addi	r2,r2,-5952
 100343c:	10800017 	ldw	r2,0(r2)
 1003440:	10800204 	addi	r2,r2,8
 1003444:	e0fffe03 	ldbu	r3,-8(fp)
 1003448:	10c00035 	stwio	r3,0(r2)
}
 100344c:	e037883a 	mov	sp,fp
 1003450:	df000017 	ldw	fp,0(sp)
 1003454:	dec00104 	addi	sp,sp,4
 1003458:	f800283a 	ret

0100345c <Hal4D13_SoftConnect>:

void Hal4D13_SoftConnect(UCHAR bEnable) {
 100345c:	defffd04 	addi	sp,sp,-12
 1003460:	df000215 	stw	fp,8(sp)
 1003464:	df000204 	addi	fp,sp,8
 1003468:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_MODE);
 100346c:	008040b4 	movhi	r2,258
 1003470:	10ba3004 	addi	r2,r2,-5952
 1003474:	10800017 	ldw	r2,0(r2)
 1003478:	10800304 	addi	r2,r2,12
 100347c:	1007883a 	mov	r3,r2
 1003480:	00802e44 	movi	r2,185
 1003484:	18800035 	stwio	r2,0(r3)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003488:	008040b4 	movhi	r2,258
 100348c:	10ba3004 	addi	r2,r2,-5952
 1003490:	10800017 	ldw	r2,0(r2)
 1003494:	10800204 	addi	r2,r2,8
 1003498:	10800037 	ldwio	r2,0(r2)
 100349c:	1007883a 	mov	r3,r2
 10034a0:	00bfffc4 	movi	r2,-1
 10034a4:	1884703a 	and	r2,r3,r2
 10034a8:	e0bffe05 	stb	r2,-8(fp)
	if (bEnable)
 10034ac:	e0bfff03 	ldbu	r2,-4(fp)
 10034b0:	1005003a 	cmpeq	r2,r2,zero
 10034b4:	1000041e 	bne	r2,zero,10034c8 <Hal4D13_SoftConnect+0x6c>
		c |= D13REG_MODE_SOFTCONNECT;
 10034b8:	e0bffe03 	ldbu	r2,-8(fp)
 10034bc:	10800054 	ori	r2,r2,1
 10034c0:	e0bffe05 	stb	r2,-8(fp)
 10034c4:	00000406 	br	10034d8 <Hal4D13_SoftConnect+0x7c>
	else
		c &= ~D13REG_MODE_SOFTCONNECT;
 10034c8:	e0bffe03 	ldbu	r2,-8(fp)
 10034cc:	00ffff84 	movi	r3,-2
 10034d0:	10c4703a 	and	r2,r2,r3
 10034d4:	e0bffe05 	stb	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_MODE);
 10034d8:	008040b4 	movhi	r2,258
 10034dc:	10ba3004 	addi	r2,r2,-5952
 10034e0:	10800017 	ldw	r2,0(r2)
 10034e4:	10800304 	addi	r2,r2,12
 10034e8:	1007883a 	mov	r3,r2
 10034ec:	00802e04 	movi	r2,184
 10034f0:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 10034f4:	008040b4 	movhi	r2,258
 10034f8:	10ba3004 	addi	r2,r2,-5952
 10034fc:	10800017 	ldw	r2,0(r2)
 1003500:	10800204 	addi	r2,r2,8
 1003504:	e0fffe03 	ldbu	r3,-8(fp)
 1003508:	10c00035 	stwio	r3,0(r2)
}
 100350c:	e037883a 	mov	sp,fp
 1003510:	df000017 	ldw	fp,0(sp)
 1003514:	dec00104 	addi	sp,sp,4
 1003518:	f800283a 	ret

0100351c <Hal4D13_AcknowledgeSETUP>:

void Hal4D13_AcknowledgeSETUP(void) {
 100351c:	deffff04 	addi	sp,sp,-4
 1003520:	df000015 	stw	fp,0(sp)
 1003524:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_ACK_SETUP);
 1003528:	008040b4 	movhi	r2,258
 100352c:	10ba3004 	addi	r2,r2,-5952
 1003530:	10800017 	ldw	r2,0(r2)
 1003534:	10800304 	addi	r2,r2,12
 1003538:	1007883a 	mov	r3,r2
 100353c:	00803d04 	movi	r2,244
 1003540:	18800035 	stwio	r2,0(r3)
}
 1003544:	e037883a 	mov	sp,fp
 1003548:	df000017 	ldw	fp,0(sp)
 100354c:	dec00104 	addi	sp,sp,4
 1003550:	f800283a 	ret

01003554 <Hal4D13_ClearBuffer>:

void Hal4D13_ClearBuffer(UCHAR bEPIndex) {
 1003554:	defffe04 	addi	sp,sp,-8
 1003558:	df000115 	stw	fp,4(sp)
 100355c:	df000104 	addi	fp,sp,4
 1003560:	e13fff05 	stb	r4,-4(fp)
	/* Select Endpoint */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF + bEPIndex);
 1003564:	008040b4 	movhi	r2,258
 1003568:	10ba3004 	addi	r2,r2,-5952
 100356c:	10800017 	ldw	r2,0(r2)
 1003570:	11000304 	addi	r4,r2,12
 1003574:	e0bfff03 	ldbu	r2,-4(fp)
 1003578:	10c01c04 	addi	r3,r2,112
 100357c:	2005883a 	mov	r2,r4
 1003580:	10c00035 	stwio	r3,0(r2)
}
 1003584:	e037883a 	mov	sp,fp
 1003588:	df000017 	ldw	fp,0(sp)
 100358c:	dec00104 	addi	sp,sp,4
 1003590:	f800283a 	ret

01003594 <Hal4D13_ValidBuffer>:

void Hal4D13_ValidBuffer(UCHAR bEPIndex) {
 1003594:	defffe04 	addi	sp,sp,-8
 1003598:	df000115 	stw	fp,4(sp)
 100359c:	df000104 	addi	fp,sp,4
 10035a0:	e13fff05 	stb	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF + bEPIndex);
 10035a4:	008040b4 	movhi	r2,258
 10035a8:	10ba3004 	addi	r2,r2,-5952
 10035ac:	10800017 	ldw	r2,0(r2)
 10035b0:	11000304 	addi	r4,r2,12
 10035b4:	e0bfff03 	ldbu	r2,-4(fp)
 10035b8:	10c01804 	addi	r3,r2,96
 10035bc:	2005883a 	mov	r2,r4
 10035c0:	10c00035 	stwio	r3,0(r2)
}
 10035c4:	e037883a 	mov	sp,fp
 10035c8:	df000017 	ldw	fp,0(sp)
 10035cc:	dec00104 	addi	sp,sp,4
 10035d0:	f800283a 	ret

010035d4 <Hal4D13_ReadEndpoint>:

USHORT Hal4D13_ReadEndpoint(UCHAR bEPIndex, UCHAR *buf, USHORT len) {
 10035d4:	defffa04 	addi	sp,sp,-24
 10035d8:	df000515 	stw	fp,20(sp)
 10035dc:	df000504 	addi	fp,sp,20
 10035e0:	e17ffe15 	stw	r5,-8(fp)
 10035e4:	e13ffd05 	stb	r4,-12(fp)
 10035e8:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 10035ec:	008040b4 	movhi	r2,258
 10035f0:	10ba3004 	addi	r2,r2,-5952
 10035f4:	10800017 	ldw	r2,0(r2)
 10035f8:	11000304 	addi	r4,r2,12
 10035fc:	e0bffd03 	ldbu	r2,-12(fp)
 1003600:	10c00404 	addi	r3,r2,16
 1003604:	2005883a 	mov	r2,r4
 1003608:	10c00035 	stwio	r3,0(r2)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 100360c:	008040b4 	movhi	r2,258
 1003610:	10ba3004 	addi	r2,r2,-5952
 1003614:	10800017 	ldw	r2,0(r2)
 1003618:	10800204 	addi	r2,r2,8
 100361c:	10800037 	ldwio	r2,0(r2)
 1003620:	e0bffb8d 	sth	r2,-18(fp)
//	printf("Endpoint has %d bytes available\n", j);
	if (j > len)
 1003624:	e0fffb8b 	ldhu	r3,-18(fp)
 1003628:	e0bfff0b 	ldhu	r2,-4(fp)
 100362c:	10c0022e 	bgeu	r2,r3,1003638 <Hal4D13_ReadEndpoint+0x64>
		j = len;
 1003630:	e0bfff0b 	ldhu	r2,-4(fp)
 1003634:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 1003638:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 100363c:	00001e06 	br	10036b8 <Hal4D13_ReadEndpoint+0xe4>
	//for(i=0; i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003640:	008040b4 	movhi	r2,258
 1003644:	10ba3004 	addi	r2,r2,-5952
 1003648:	10800017 	ldw	r2,0(r2)
 100364c:	10800204 	addi	r2,r2,8
 1003650:	10800037 	ldwio	r2,0(r2)
 1003654:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c;
 1003658:	e0bffb0b 	ldhu	r2,-20(fp)
 100365c:	1007883a 	mov	r3,r2
 1003660:	e0bffe17 	ldw	r2,-8(fp)
 1003664:	10c00005 	stb	r3,0(r2)
		i++; //<<
 1003668:	e0bffc0b 	ldhu	r2,-16(fp)
 100366c:	10800044 	addi	r2,r2,1
 1003670:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 1003674:	e0fffc0b 	ldhu	r3,-16(fp)
 1003678:	e0bffb8b 	ldhu	r2,-18(fp)
 100367c:	1880112e 	bgeu	r3,r2,10036c4 <Hal4D13_ReadEndpoint+0xf0>
			break; //<<
		buf++;
 1003680:	e0bffe17 	ldw	r2,-8(fp)
 1003684:	10800044 	addi	r2,r2,1
 1003688:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8);
 100368c:	e0bffb0b 	ldhu	r2,-20(fp)
 1003690:	1004d23a 	srli	r2,r2,8
 1003694:	1007883a 	mov	r3,r2
 1003698:	e0bffe17 	ldw	r2,-8(fp)
 100369c:	10c00005 	stb	r3,0(r2)
		i++; //<<
 10036a0:	e0bffc0b 	ldhu	r2,-16(fp)
 10036a4:	10800044 	addi	r2,r2,1
 10036a8:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 10036ac:	e0bffe17 	ldw	r2,-8(fp)
 10036b0:	10800044 	addi	r2,r2,1
 10036b4:	e0bffe15 	stw	r2,-8(fp)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
//	printf("Endpoint has %d bytes available\n", j);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 10036b8:	e0fffc0b 	ldhu	r3,-16(fp)
 10036bc:	e0bffb8b 	ldhu	r2,-18(fp)
 10036c0:	18bfdf36 	bltu	r3,r2,1003640 <Hal4D13_ReadEndpoint+0x6c>
		*buf = (UCHAR) (c >> 8);
		i++; //<<
		buf++;
	}
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 10036c4:	008040b4 	movhi	r2,258
 10036c8:	10ba3004 	addi	r2,r2,-5952
 10036cc:	10800017 	ldw	r2,0(r2)
 10036d0:	11000304 	addi	r4,r2,12
 10036d4:	e0bffd03 	ldbu	r2,-12(fp)
 10036d8:	10c01c04 	addi	r3,r2,112
 10036dc:	2005883a 	mov	r2,r4
 10036e0:	10c00035 	stwio	r3,0(r2)

//	printf("We read %d bytes from the endpoint\n", j);
	return j;
 10036e4:	e0bffb8b 	ldhu	r2,-18(fp)

}
 10036e8:	e037883a 	mov	sp,fp
 10036ec:	df000017 	ldw	fp,0(sp)
 10036f0:	dec00104 	addi	sp,sp,4
 10036f4:	f800283a 	ret

010036f8 <Hal4D13_ReadBulkEndpoint>:

USHORT Hal4D13_ReadBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 10036f8:	defffa04 	addi	sp,sp,-24
 10036fc:	df000515 	stw	fp,20(sp)
 1003700:	df000504 	addi	fp,sp,20
 1003704:	e17ffe15 	stw	r5,-8(fp)
 1003708:	e13ffd05 	stb	r4,-12(fp)
 100370c:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1003710:	008040b4 	movhi	r2,258
 1003714:	10ba3004 	addi	r2,r2,-5952
 1003718:	10800017 	ldw	r2,0(r2)
 100371c:	11000304 	addi	r4,r2,12
 1003720:	e0bffd03 	ldbu	r2,-12(fp)
 1003724:	10c00404 	addi	r3,r2,16
 1003728:	2005883a 	mov	r2,r4
 100372c:	10c00035 	stwio	r3,0(r2)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003730:	008040b4 	movhi	r2,258
 1003734:	10ba3004 	addi	r2,r2,-5952
 1003738:	10800017 	ldw	r2,0(r2)
 100373c:	10800204 	addi	r2,r2,8
 1003740:	10800037 	ldwio	r2,0(r2)
 1003744:	e0bffb8d 	sth	r2,-18(fp)
	if (j > len)
 1003748:	e0fffb8b 	ldhu	r3,-18(fp)
 100374c:	e0bfff0b 	ldhu	r2,-4(fp)
 1003750:	10c0022e 	bgeu	r2,r3,100375c <Hal4D13_ReadBulkEndpoint+0x64>
		j = len;
 1003754:	e0bfff0b 	ldhu	r2,-4(fp)
 1003758:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 100375c:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 1003760:	00001e06 	br	10037dc <Hal4D13_ReadBulkEndpoint+0xe4>
//  for(i=0; i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003764:	008040b4 	movhi	r2,258
 1003768:	10ba3004 	addi	r2,r2,-5952
 100376c:	10800017 	ldw	r2,0(r2)
 1003770:	10800204 	addi	r2,r2,8
 1003774:	10800037 	ldwio	r2,0(r2)
 1003778:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c;
 100377c:	e0bffb0b 	ldhu	r2,-20(fp)
 1003780:	1007883a 	mov	r3,r2
 1003784:	e0bffe17 	ldw	r2,-8(fp)
 1003788:	10c00005 	stb	r3,0(r2)
		i++; //<<
 100378c:	e0bffc0b 	ldhu	r2,-16(fp)
 1003790:	10800044 	addi	r2,r2,1
 1003794:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 1003798:	e0fffc0b 	ldhu	r3,-16(fp)
 100379c:	e0bffb8b 	ldhu	r2,-18(fp)
 10037a0:	1880112e 	bgeu	r3,r2,10037e8 <Hal4D13_ReadBulkEndpoint+0xf0>
			break; //<<
		buf++;
 10037a4:	e0bffe17 	ldw	r2,-8(fp)
 10037a8:	10800044 	addi	r2,r2,1
 10037ac:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8);
 10037b0:	e0bffb0b 	ldhu	r2,-20(fp)
 10037b4:	1004d23a 	srli	r2,r2,8
 10037b8:	1007883a 	mov	r3,r2
 10037bc:	e0bffe17 	ldw	r2,-8(fp)
 10037c0:	10c00005 	stb	r3,0(r2)

		i++; //<<
 10037c4:	e0bffc0b 	ldhu	r2,-16(fp)
 10037c8:	10800044 	addi	r2,r2,1
 10037cc:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 10037d0:	e0bffe17 	ldw	r2,-8(fp)
 10037d4:	10800044 	addi	r2,r2,1
 10037d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 10037dc:	e0fffc0b 	ldhu	r3,-16(fp)
 10037e0:	e0bffb8b 	ldhu	r2,-18(fp)
 10037e4:	18bfdf36 	bltu	r3,r2,1003764 <Hal4D13_ReadBulkEndpoint+0x6c>

		i++; //<<
		buf++;
	}
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 10037e8:	008040b4 	movhi	r2,258
 10037ec:	10ba3004 	addi	r2,r2,-5952
 10037f0:	10800017 	ldw	r2,0(r2)
 10037f4:	11000304 	addi	r4,r2,12
 10037f8:	e0bffd03 	ldbu	r2,-12(fp)
 10037fc:	10c01c04 	addi	r3,r2,112
 1003800:	2005883a 	mov	r2,r4
 1003804:	10c00035 	stwio	r3,0(r2)

	return j;
 1003808:	e0bffb8b 	ldhu	r2,-18(fp)
}
 100380c:	e037883a 	mov	sp,fp
 1003810:	df000017 	ldw	fp,0(sp)
 1003814:	dec00104 	addi	sp,sp,4
 1003818:	f800283a 	ret

0100381c <Hal4D13_ReadEndpointWOClearBuffer>:

USHORT Hal4D13_ReadEndpointWOClearBuffer(UCHAR bEPIndex, UCHAR * buf,
		USHORT len) {
 100381c:	defffa04 	addi	sp,sp,-24
 1003820:	df000515 	stw	fp,20(sp)
 1003824:	df000504 	addi	fp,sp,20
 1003828:	e17ffe15 	stw	r5,-8(fp)
 100382c:	e13ffd05 	stb	r4,-12(fp)
 1003830:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, j, c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_FIFO + bEPIndex);
 1003834:	008040b4 	movhi	r2,258
 1003838:	10ba3004 	addi	r2,r2,-5952
 100383c:	10800017 	ldw	r2,0(r2)
 1003840:	11000304 	addi	r4,r2,12
 1003844:	e0bffd03 	ldbu	r2,-12(fp)
 1003848:	10c00404 	addi	r3,r2,16
 100384c:	2005883a 	mov	r2,r4
 1003850:	10c00035 	stwio	r3,0(r2)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003854:	008040b4 	movhi	r2,258
 1003858:	10ba3004 	addi	r2,r2,-5952
 100385c:	10800017 	ldw	r2,0(r2)
 1003860:	10800204 	addi	r2,r2,8
 1003864:	10800037 	ldwio	r2,0(r2)
 1003868:	e0bffb8d 	sth	r2,-18(fp)
	if (j > len)
 100386c:	e0fffb8b 	ldhu	r3,-18(fp)
 1003870:	e0bfff0b 	ldhu	r2,-4(fp)
 1003874:	10c0022e 	bgeu	r2,r3,1003880 <Hal4D13_ReadEndpointWOClearBuffer+0x64>
		j = len;
 1003878:	e0bfff0b 	ldhu	r2,-4(fp)
 100387c:	e0bffb8d 	sth	r2,-18(fp)
	i = 0;
 1003880:	e03ffc0d 	sth	zero,-16(fp)
	while (i < j) //<<
 1003884:	00001e06 	br	1003900 <Hal4D13_ReadEndpointWOClearBuffer+0xe4>
	//for(i<j; i=i+2, buf++ )
	{
		c = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003888:	008040b4 	movhi	r2,258
 100388c:	10ba3004 	addi	r2,r2,-5952
 1003890:	10800017 	ldw	r2,0(r2)
 1003894:	10800204 	addi	r2,r2,8
 1003898:	10800037 	ldwio	r2,0(r2)
 100389c:	e0bffb0d 	sth	r2,-20(fp)
		*buf = (UCHAR) c; //printf("WOC= %02X ",*buf);//<<
 10038a0:	e0bffb0b 	ldhu	r2,-20(fp)
 10038a4:	1007883a 	mov	r3,r2
 10038a8:	e0bffe17 	ldw	r2,-8(fp)
 10038ac:	10c00005 	stb	r3,0(r2)
		i++; //<<
 10038b0:	e0bffc0b 	ldhu	r2,-16(fp)
 10038b4:	10800044 	addi	r2,r2,1
 10038b8:	e0bffc0d 	sth	r2,-16(fp)
		if (i >= j)
 10038bc:	e0fffc0b 	ldhu	r3,-16(fp)
 10038c0:	e0bffb8b 	ldhu	r2,-18(fp)
 10038c4:	1880112e 	bgeu	r3,r2,100390c <Hal4D13_ReadEndpointWOClearBuffer+0xf0>
			break; //<<
		buf++;
 10038c8:	e0bffe17 	ldw	r2,-8(fp)
 10038cc:	10800044 	addi	r2,r2,1
 10038d0:	e0bffe15 	stw	r2,-8(fp)
		*buf = (UCHAR) (c >> 8); //printf("WOC= %02X ",*buf);//<<
 10038d4:	e0bffb0b 	ldhu	r2,-20(fp)
 10038d8:	1004d23a 	srli	r2,r2,8
 10038dc:	1007883a 	mov	r3,r2
 10038e0:	e0bffe17 	ldw	r2,-8(fp)
 10038e4:	10c00005 	stb	r3,0(r2)
		i++; //<<
 10038e8:	e0bffc0b 	ldhu	r2,-16(fp)
 10038ec:	10800044 	addi	r2,r2,1
 10038f0:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 10038f4:	e0bffe17 	ldw	r2,-8(fp)
 10038f8:	10800044 	addi	r2,r2,1
 10038fc:	e0bffe15 	stw	r2,-8(fp)
	/* read Buffer */
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
	if (j > len)
		j = len;
	i = 0;
	while (i < j) //<<
 1003900:	e0fffc0b 	ldhu	r3,-16(fp)
 1003904:	e0bffb8b 	ldhu	r2,-18(fp)
 1003908:	18bfdf36 	bltu	r3,r2,1003888 <Hal4D13_ReadEndpointWOClearBuffer+0x6c>
		i++; //<<
		buf++;
	}
	// printf("\n",c);
	/* Clear Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLEAR_BUF+bEPIndex);
 100390c:	008040b4 	movhi	r2,258
 1003910:	10ba3004 	addi	r2,r2,-5952
 1003914:	10800017 	ldw	r2,0(r2)
 1003918:	11000304 	addi	r4,r2,12
 100391c:	e0bffd03 	ldbu	r2,-12(fp)
 1003920:	10c01c04 	addi	r3,r2,112
 1003924:	2005883a 	mov	r2,r4
 1003928:	10c00035 	stwio	r3,0(r2)

	return j;
 100392c:	e0bffb8b 	ldhu	r2,-18(fp)
}
 1003930:	e037883a 	mov	sp,fp
 1003934:	df000017 	ldw	fp,0(sp)
 1003938:	dec00104 	addi	sp,sp,4
 100393c:	f800283a 	ret

01003940 <Hal4D13_WriteEndpoint>:

USHORT Hal4D13_WriteEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 1003940:	defffb04 	addi	sp,sp,-20
 1003944:	df000415 	stw	fp,16(sp)
 1003948:	df000404 	addi	fp,sp,16
 100394c:	e17ffe15 	stw	r5,-8(fp)
 1003950:	e13ffd05 	stb	r4,-12(fp)
 1003954:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, c;
	/* Select Endpoint */

	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 1003958:	008040b4 	movhi	r2,258
 100395c:	10ba3004 	addi	r2,r2,-5952
 1003960:	10800017 	ldw	r2,0(r2)
 1003964:	10800304 	addi	r2,r2,12
 1003968:	e0fffd03 	ldbu	r3,-12(fp)
 100396c:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
 1003970:	008040b4 	movhi	r2,258
 1003974:	10ba3004 	addi	r2,r2,-5952
 1003978:	10800017 	ldw	r2,0(r2)
 100397c:	10800204 	addi	r2,r2,8
 1003980:	e0ffff0b 	ldhu	r3,-4(fp)
 1003984:	10c00035 	stwio	r3,0(r2)
	if (len == 0)
 1003988:	e0bfff0b 	ldhu	r2,-4(fp)
 100398c:	1004c03a 	cmpne	r2,r2,zero
 1003990:	1000051e 	bne	r2,zero,10039a8 <Hal4D13_WriteEndpoint+0x68>
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
 1003994:	008040b4 	movhi	r2,258
 1003998:	10ba3004 	addi	r2,r2,-5952
 100399c:	10800017 	ldw	r2,0(r2)
 10039a0:	10800204 	addi	r2,r2,8
 10039a4:	10000035 	stwio	zero,0(r2)
	/* Write Buffer */

	//for(i=0; i<len; i=i+2, buf++ )
	i = 0;
 10039a8:	e03ffc8d 	sth	zero,-14(fp)
	while (i < len) {
 10039ac:	00002b06 	br	1003a5c <Hal4D13_WriteEndpoint+0x11c>
		c = *buf;
 10039b0:	e0bffe17 	ldw	r2,-8(fp)
 10039b4:	10800003 	ldbu	r2,0(r2)
 10039b8:	10803fcc 	andi	r2,r2,255
 10039bc:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 10039c0:	e0bffe17 	ldw	r2,-8(fp)
 10039c4:	10800044 	addi	r2,r2,1
 10039c8:	e0bffe15 	stw	r2,-8(fp)
		i++;
 10039cc:	e0bffc8b 	ldhu	r2,-14(fp)
 10039d0:	10800044 	addi	r2,r2,1
 10039d4:	e0bffc8d 	sth	r2,-14(fp)
		if (i >= len) {
 10039d8:	e0fffc8b 	ldhu	r3,-14(fp)
 10039dc:	e0bfff0b 	ldhu	r2,-4(fp)
 10039e0:	18800636 	bltu	r3,r2,10039fc <Hal4D13_WriteEndpoint+0xbc>
			IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 10039e4:	008040b4 	movhi	r2,258
 10039e8:	10ba3004 	addi	r2,r2,-5952
 10039ec:	10800017 	ldw	r2,0(r2)
 10039f0:	10800204 	addi	r2,r2,8
 10039f4:	e0fffc0b 	ldhu	r3,-16(fp)
 10039f8:	10c00035 	stwio	r3,0(r2)
		} //printf("w=%04x  ",c);break; }
		c = (c & 0xff) + (*buf << 8 & 0xff00);
 10039fc:	e0bffc0b 	ldhu	r2,-16(fp)
 1003a00:	10803fcc 	andi	r2,r2,255
 1003a04:	1009883a 	mov	r4,r2
 1003a08:	e0bffe17 	ldw	r2,-8(fp)
 1003a0c:	10800003 	ldbu	r2,0(r2)
 1003a10:	10803fcc 	andi	r2,r2,255
 1003a14:	1004923a 	slli	r2,r2,8
 1003a18:	1007883a 	mov	r3,r2
 1003a1c:	00bfc004 	movi	r2,-256
 1003a20:	1884703a 	and	r2,r3,r2
 1003a24:	2085883a 	add	r2,r4,r2
 1003a28:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003a2c:	e0bffe17 	ldw	r2,-8(fp)
 1003a30:	10800044 	addi	r2,r2,1
 1003a34:	e0bffe15 	stw	r2,-8(fp)
		i++;
 1003a38:	e0bffc8b 	ldhu	r2,-14(fp)
 1003a3c:	10800044 	addi	r2,r2,1
 1003a40:	e0bffc8d 	sth	r2,-14(fp)
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1003a44:	008040b4 	movhi	r2,258
 1003a48:	10ba3004 	addi	r2,r2,-5952
 1003a4c:	10800017 	ldw	r2,0(r2)
 1003a50:	10800204 	addi	r2,r2,8
 1003a54:	e0fffc0b 	ldhu	r3,-16(fp)
 1003a58:	10c00035 	stwio	r3,0(r2)
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
	/* Write Buffer */

	//for(i=0; i<len; i=i+2, buf++ )
	i = 0;
	while (i < len) {
 1003a5c:	e0fffc8b 	ldhu	r3,-14(fp)
 1003a60:	e0bfff0b 	ldhu	r2,-4(fp)
 1003a64:	18bfd236 	bltu	r3,r2,10039b0 <Hal4D13_WriteEndpoint+0x70>
//    printf("w=%04x  ",c);
	}
//  printf("\nlen=%d i=%d\n",len,i);

	/* Validate Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
 1003a68:	008040b4 	movhi	r2,258
 1003a6c:	10ba3004 	addi	r2,r2,-5952
 1003a70:	10800017 	ldw	r2,0(r2)
 1003a74:	11000304 	addi	r4,r2,12
 1003a78:	e0bffd03 	ldbu	r2,-12(fp)
 1003a7c:	10c01804 	addi	r3,r2,96
 1003a80:	2005883a 	mov	r2,r4
 1003a84:	10c00035 	stwio	r3,0(r2)
	// printf("\n");
	return i;
 1003a88:	e0bffc8b 	ldhu	r2,-14(fp)
}
 1003a8c:	e037883a 	mov	sp,fp
 1003a90:	df000017 	ldw	fp,0(sp)
 1003a94:	dec00104 	addi	sp,sp,4
 1003a98:	f800283a 	ret

01003a9c <Hal4D13_WriteBulkEndpoint>:

USHORT Hal4D13_WriteBulkEndpoint(UCHAR bEPIndex, UCHAR * buf, USHORT len) {
 1003a9c:	defffb04 	addi	sp,sp,-20
 1003aa0:	df000415 	stw	fp,16(sp)
 1003aa4:	df000404 	addi	fp,sp,16
 1003aa8:	e17ffe15 	stw	r5,-8(fp)
 1003aac:	e13ffd05 	stb	r4,-12(fp)
 1003ab0:	e1bfff0d 	sth	r6,-4(fp)
	USHORT i, c;
	/* Select Endpoint */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_FIFO + bEPIndex);
 1003ab4:	008040b4 	movhi	r2,258
 1003ab8:	10ba3004 	addi	r2,r2,-5952
 1003abc:	10800017 	ldw	r2,0(r2)
 1003ac0:	10800304 	addi	r2,r2,12
 1003ac4:	e0fffd03 	ldbu	r3,-12(fp)
 1003ac8:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
 1003acc:	008040b4 	movhi	r2,258
 1003ad0:	10ba3004 	addi	r2,r2,-5952
 1003ad4:	10800017 	ldw	r2,0(r2)
 1003ad8:	10800204 	addi	r2,r2,8
 1003adc:	e0ffff0b 	ldhu	r3,-4(fp)
 1003ae0:	10c00035 	stwio	r3,0(r2)
	if (len == 0)
 1003ae4:	e0bfff0b 	ldhu	r2,-4(fp)
 1003ae8:	1004c03a 	cmpne	r2,r2,zero
 1003aec:	1000051e 	bne	r2,zero,1003b04 <Hal4D13_WriteBulkEndpoint+0x68>
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);
 1003af0:	008040b4 	movhi	r2,258
 1003af4:	10ba3004 	addi	r2,r2,-5952
 1003af8:	10800017 	ldw	r2,0(r2)
 1003afc:	10800204 	addi	r2,r2,8
 1003b00:	10000035 	stwio	zero,0(r2)

	/* Write Buffer */
	for (i = 0; i < len; i = i + 2, buf++) {
 1003b04:	e03ffc8d 	sth	zero,-14(fp)
 1003b08:	00001b06 	br	1003b78 <Hal4D13_WriteBulkEndpoint+0xdc>
		c = *buf;
 1003b0c:	e0bffe17 	ldw	r2,-8(fp)
 1003b10:	10800003 	ldbu	r2,0(r2)
 1003b14:	10803fcc 	andi	r2,r2,255
 1003b18:	e0bffc0d 	sth	r2,-16(fp)
		buf++;
 1003b1c:	e0bffe17 	ldw	r2,-8(fp)
 1003b20:	10800044 	addi	r2,r2,1
 1003b24:	e0bffe15 	stw	r2,-8(fp)
		c += (USHORT) (*buf << 8);
 1003b28:	e0bffe17 	ldw	r2,-8(fp)
 1003b2c:	10800003 	ldbu	r2,0(r2)
 1003b30:	10803fcc 	andi	r2,r2,255
 1003b34:	1004923a 	slli	r2,r2,8
 1003b38:	1007883a 	mov	r3,r2
 1003b3c:	e0bffc0b 	ldhu	r2,-16(fp)
 1003b40:	10c5883a 	add	r2,r2,r3
 1003b44:	e0bffc0d 	sth	r2,-16(fp)
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1003b48:	008040b4 	movhi	r2,258
 1003b4c:	10ba3004 	addi	r2,r2,-5952
 1003b50:	10800017 	ldw	r2,0(r2)
 1003b54:	10800204 	addi	r2,r2,8
 1003b58:	e0fffc0b 	ldhu	r3,-16(fp)
 1003b5c:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, len);
	if (len == 0)
		IOWR(ISP1362_BASE, D13_DATA_PORT, 0);

	/* Write Buffer */
	for (i = 0; i < len; i = i + 2, buf++) {
 1003b60:	e0bffc8b 	ldhu	r2,-14(fp)
 1003b64:	10800084 	addi	r2,r2,2
 1003b68:	e0bffc8d 	sth	r2,-14(fp)
 1003b6c:	e0bffe17 	ldw	r2,-8(fp)
 1003b70:	10800044 	addi	r2,r2,1
 1003b74:	e0bffe15 	stw	r2,-8(fp)
 1003b78:	e0fffc8b 	ldhu	r3,-14(fp)
 1003b7c:	e0bfff0b 	ldhu	r2,-4(fp)
 1003b80:	18bfe236 	bltu	r3,r2,1003b0c <Hal4D13_WriteBulkEndpoint+0x70>
		buf++;
		c += (USHORT) (*buf << 8);
		IOWR(ISP1362_BASE, D13_DATA_PORT, c);
	}
	/* Validate Buffer */
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_VALID_BUF+bEPIndex);
 1003b84:	008040b4 	movhi	r2,258
 1003b88:	10ba3004 	addi	r2,r2,-5952
 1003b8c:	10800017 	ldw	r2,0(r2)
 1003b90:	11000304 	addi	r4,r2,12
 1003b94:	e0bffd03 	ldbu	r2,-12(fp)
 1003b98:	10c01804 	addi	r3,r2,96
 1003b9c:	2005883a 	mov	r2,r4
 1003ba0:	10c00035 	stwio	r3,0(r2)
	return len;
 1003ba4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003ba8:	e037883a 	mov	sp,fp
 1003bac:	df000017 	ldw	fp,0(sp)
 1003bb0:	dec00104 	addi	sp,sp,4
 1003bb4:	f800283a 	ret

01003bb8 <Hal4D13_GetIntEnable>:

ULONG Hal4D13_GetIntEnable(void) {
 1003bb8:	defffe04 	addi	sp,sp,-8
 1003bbc:	df000115 	stw	fp,4(sp)
 1003bc0:	df000104 	addi	fp,sp,4
	ULONG i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_INTEN);
 1003bc4:	008040b4 	movhi	r2,258
 1003bc8:	10ba3004 	addi	r2,r2,-5952
 1003bcc:	10800017 	ldw	r2,0(r2)
 1003bd0:	10800304 	addi	r2,r2,12
 1003bd4:	1007883a 	mov	r3,r2
 1003bd8:	008030c4 	movi	r2,195
 1003bdc:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003be0:	008040b4 	movhi	r2,258
 1003be4:	10ba3004 	addi	r2,r2,-5952
 1003be8:	10800017 	ldw	r2,0(r2)
 1003bec:	10800204 	addi	r2,r2,8
 1003bf0:	10800037 	ldwio	r2,0(r2)
 1003bf4:	e0bfff15 	stw	r2,-4(fp)
	i += (((ULONG) IORD(ISP1362_BASE,D13_DATA_PORT)) << 16);
 1003bf8:	008040b4 	movhi	r2,258
 1003bfc:	10ba3004 	addi	r2,r2,-5952
 1003c00:	10800017 	ldw	r2,0(r2)
 1003c04:	10800204 	addi	r2,r2,8
 1003c08:	10800037 	ldwio	r2,0(r2)
 1003c0c:	1006943a 	slli	r3,r2,16
 1003c10:	e0bfff17 	ldw	r2,-4(fp)
 1003c14:	10c5883a 	add	r2,r2,r3
 1003c18:	e0bfff15 	stw	r2,-4(fp)
	return i;
 1003c1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003c20:	e037883a 	mov	sp,fp
 1003c24:	df000017 	ldw	fp,0(sp)
 1003c28:	dec00104 	addi	sp,sp,4
 1003c2c:	f800283a 	ret

01003c30 <Hal4D13_SetIntEnable>:

void Hal4D13_SetIntEnable(ULONG dIntEn) {
 1003c30:	defffe04 	addi	sp,sp,-8
 1003c34:	df000115 	stw	fp,4(sp)
 1003c38:	df000104 	addi	fp,sp,4
 1003c3c:	e13fff15 	stw	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_INTEN);
 1003c40:	008040b4 	movhi	r2,258
 1003c44:	10ba3004 	addi	r2,r2,-5952
 1003c48:	10800017 	ldw	r2,0(r2)
 1003c4c:	10800304 	addi	r2,r2,12
 1003c50:	1007883a 	mov	r3,r2
 1003c54:	00803084 	movi	r2,194
 1003c58:	18800035 	stwio	r2,0(r3)
	dIntEn = (dIntEn & 0x0FFFFFF);
 1003c5c:	e0ffff17 	ldw	r3,-4(fp)
 1003c60:	00804034 	movhi	r2,256
 1003c64:	10bfffc4 	addi	r2,r2,-1
 1003c68:	1884703a 	and	r2,r3,r2
 1003c6c:	e0bfff15 	stw	r2,-4(fp)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)dIntEn);
 1003c70:	008040b4 	movhi	r2,258
 1003c74:	10ba3004 	addi	r2,r2,-5952
 1003c78:	10800017 	ldw	r2,0(r2)
 1003c7c:	11000204 	addi	r4,r2,8
 1003c80:	e0bfff17 	ldw	r2,-4(fp)
 1003c84:	10ffffcc 	andi	r3,r2,65535
 1003c88:	2005883a 	mov	r2,r4
 1003c8c:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)(dIntEn >> 16));
 1003c90:	008040b4 	movhi	r2,258
 1003c94:	10ba3004 	addi	r2,r2,-5952
 1003c98:	10800017 	ldw	r2,0(r2)
 1003c9c:	11000204 	addi	r4,r2,8
 1003ca0:	e0bfff17 	ldw	r2,-4(fp)
 1003ca4:	1004d43a 	srli	r2,r2,16
 1003ca8:	10ffffcc 	andi	r3,r2,65535
 1003cac:	2005883a 	mov	r2,r4
 1003cb0:	10c00035 	stwio	r3,0(r2)
}
 1003cb4:	e037883a 	mov	sp,fp
 1003cb8:	df000017 	ldw	fp,0(sp)
 1003cbc:	dec00104 	addi	sp,sp,4
 1003cc0:	f800283a 	ret

01003cc4 <Hal4D13_ReadInterruptRegister>:

ULONG Hal4D13_ReadInterruptRegister(void) {
 1003cc4:	defffd04 	addi	sp,sp,-12
 1003cc8:	df000215 	stw	fp,8(sp)
 1003ccc:	df000204 	addi	fp,sp,8
	ULONG j, i = 0;
 1003cd0:	e03ffe15 	stw	zero,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_INT_SRC);
 1003cd4:	008040b4 	movhi	r2,258
 1003cd8:	10ba3004 	addi	r2,r2,-5952
 1003cdc:	10800017 	ldw	r2,0(r2)
 1003ce0:	10800304 	addi	r2,r2,12
 1003ce4:	1007883a 	mov	r3,r2
 1003ce8:	00803004 	movi	r2,192
 1003cec:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003cf0:	008040b4 	movhi	r2,258
 1003cf4:	10ba3004 	addi	r2,r2,-5952
 1003cf8:	10800017 	ldw	r2,0(r2)
 1003cfc:	10800204 	addi	r2,r2,8
 1003d00:	10800037 	ldwio	r2,0(r2)
 1003d04:	e0bffe15 	stw	r2,-8(fp)
	j = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003d08:	008040b4 	movhi	r2,258
 1003d0c:	10ba3004 	addi	r2,r2,-5952
 1003d10:	10800017 	ldw	r2,0(r2)
 1003d14:	10800204 	addi	r2,r2,8
 1003d18:	10800037 	ldwio	r2,0(r2)
 1003d1c:	e0bfff15 	stw	r2,-4(fp)
	j = ((j << 16) & 0xffff0000) + (i & 0xffff);
 1003d20:	e0bfff17 	ldw	r2,-4(fp)
 1003d24:	1004943a 	slli	r2,r2,16
 1003d28:	10ffffec 	andhi	r3,r2,65535
 1003d2c:	e0bffe17 	ldw	r2,-8(fp)
 1003d30:	10bfffcc 	andi	r2,r2,65535
 1003d34:	1885883a 	add	r2,r3,r2
 1003d38:	e0bfff15 	stw	r2,-4(fp)
	return i;
 1003d3c:	e0bffe17 	ldw	r2,-8(fp)
}
 1003d40:	e037883a 	mov	sp,fp
 1003d44:	df000017 	ldw	fp,0(sp)
 1003d48:	dec00104 	addi	sp,sp,4
 1003d4c:	f800283a 	ret

01003d50 <Hal4D13_GetEndpointStatusWInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWInteruptClear(UCHAR bEPIndex) {
 1003d50:	defffd04 	addi	sp,sp,-12
 1003d54:	df000215 	stw	fp,8(sp)
 1003d58:	df000204 	addi	fp,sp,8
 1003d5c:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RDSTS_CLRINT + bEPIndex);
 1003d60:	008040b4 	movhi	r2,258
 1003d64:	10ba3004 	addi	r2,r2,-5952
 1003d68:	10800017 	ldw	r2,0(r2)
 1003d6c:	11000304 	addi	r4,r2,12
 1003d70:	e0bfff03 	ldbu	r2,-4(fp)
 1003d74:	10c01404 	addi	r3,r2,80
 1003d78:	2005883a 	mov	r2,r4
 1003d7c:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003d80:	008040b4 	movhi	r2,258
 1003d84:	10ba3004 	addi	r2,r2,-5952
 1003d88:	10800017 	ldw	r2,0(r2)
 1003d8c:	10800204 	addi	r2,r2,8
 1003d90:	10800037 	ldwio	r2,0(r2)
 1003d94:	1007883a 	mov	r3,r2
 1003d98:	00bfffc4 	movi	r2,-1
 1003d9c:	1884703a 	and	r2,r3,r2
 1003da0:	e0bffe05 	stb	r2,-8(fp)
	return c;
 1003da4:	e0bffe03 	ldbu	r2,-8(fp)
}
 1003da8:	e037883a 	mov	sp,fp
 1003dac:	df000017 	ldw	fp,0(sp)
 1003db0:	dec00104 	addi	sp,sp,4
 1003db4:	f800283a 	ret

01003db8 <Hal4D13_GetEndpointStatusWOInteruptClear>:

UCHAR Hal4D13_GetEndpointStatusWOInteruptClear(UCHAR bEPIndex) {
 1003db8:	defffd04 	addi	sp,sp,-12
 1003dbc:	df000215 	stw	fp,8(sp)
 1003dc0:	df000204 	addi	fp,sp,8
 1003dc4:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RDSTS + bEPIndex);
 1003dc8:	008040b4 	movhi	r2,258
 1003dcc:	10ba3004 	addi	r2,r2,-5952
 1003dd0:	10800017 	ldw	r2,0(r2)
 1003dd4:	11000304 	addi	r4,r2,12
 1003dd8:	e0bfff03 	ldbu	r2,-4(fp)
 1003ddc:	10c03404 	addi	r3,r2,208
 1003de0:	2005883a 	mov	r2,r4
 1003de4:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1003de8:	008040b4 	movhi	r2,258
 1003dec:	10ba3004 	addi	r2,r2,-5952
 1003df0:	10800017 	ldw	r2,0(r2)
 1003df4:	10800204 	addi	r2,r2,8
 1003df8:	10800037 	ldwio	r2,0(r2)
 1003dfc:	1007883a 	mov	r3,r2
 1003e00:	00bfffc4 	movi	r2,-1
 1003e04:	1884703a 	and	r2,r3,r2
 1003e08:	e0bffe05 	stb	r2,-8(fp)
	return c;
 1003e0c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1003e10:	e037883a 	mov	sp,fp
 1003e14:	df000017 	ldw	fp,0(sp)
 1003e18:	dec00104 	addi	sp,sp,4
 1003e1c:	f800283a 	ret

01003e20 <Hal4D13_SetEndpointStatus>:

void Hal4D13_SetEndpointStatus(UCHAR bEPIndex, UCHAR bStalled) {
 1003e20:	defffd04 	addi	sp,sp,-12
 1003e24:	df000215 	stw	fp,8(sp)
 1003e28:	df000204 	addi	fp,sp,8
 1003e2c:	e13ffe05 	stb	r4,-8(fp)
 1003e30:	e17fff05 	stb	r5,-4(fp)
	if (bStalled & 0x80) {
 1003e34:	e0bfff03 	ldbu	r2,-4(fp)
 1003e38:	10803fcc 	andi	r2,r2,255
 1003e3c:	1080201c 	xori	r2,r2,128
 1003e40:	10bfe004 	addi	r2,r2,-128
 1003e44:	1004403a 	cmpge	r2,r2,zero
 1003e48:	1000091e 	bne	r2,zero,1003e70 <Hal4D13_SetEndpointStatus+0x50>
		IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_WR_STS + bEPIndex);
 1003e4c:	008040b4 	movhi	r2,258
 1003e50:	10ba3004 	addi	r2,r2,-5952
 1003e54:	10800017 	ldw	r2,0(r2)
 1003e58:	11000304 	addi	r4,r2,12
 1003e5c:	e0bffe03 	ldbu	r2,-8(fp)
 1003e60:	10c01004 	addi	r3,r2,64
 1003e64:	2005883a 	mov	r2,r4
 1003e68:	10c00035 	stwio	r3,0(r2)
 1003e6c:	00000806 	br	1003e90 <Hal4D13_SetEndpointStatus+0x70>
	} else {
		// clear endpoint stall.
		IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_CLR_STALL + bEPIndex);
 1003e70:	008040b4 	movhi	r2,258
 1003e74:	10ba3004 	addi	r2,r2,-5952
 1003e78:	10800017 	ldw	r2,0(r2)
 1003e7c:	11000304 	addi	r4,r2,12
 1003e80:	e0bffe03 	ldbu	r2,-8(fp)
 1003e84:	10c02004 	addi	r3,r2,128
 1003e88:	2005883a 	mov	r2,r4
 1003e8c:	10c00035 	stwio	r3,0(r2)
	}
}
 1003e90:	e037883a 	mov	sp,fp
 1003e94:	df000017 	ldw	fp,0(sp)
 1003e98:	dec00104 	addi	sp,sp,4
 1003e9c:	f800283a 	ret

01003ea0 <Hal4D13_SetDMAConfig>:

void Hal4D13_SetDMAConfig(USHORT wDMACnfg) {
 1003ea0:	defffe04 	addi	sp,sp,-8
 1003ea4:	df000115 	stw	fp,4(sp)
 1003ea8:	df000104 	addi	fp,sp,4
 1003eac:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_WR_CNFG);
 1003eb0:	008040b4 	movhi	r2,258
 1003eb4:	10ba3004 	addi	r2,r2,-5952
 1003eb8:	10800017 	ldw	r2,0(r2)
 1003ebc:	10800304 	addi	r2,r2,12
 1003ec0:	1007883a 	mov	r3,r2
 1003ec4:	00803c04 	movi	r2,240
 1003ec8:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDMACnfg);
 1003ecc:	008040b4 	movhi	r2,258
 1003ed0:	10ba3004 	addi	r2,r2,-5952
 1003ed4:	10800017 	ldw	r2,0(r2)
 1003ed8:	10800204 	addi	r2,r2,8
 1003edc:	e0ffff0b 	ldhu	r3,-4(fp)
 1003ee0:	10c00035 	stwio	r3,0(r2)
}
 1003ee4:	e037883a 	mov	sp,fp
 1003ee8:	df000017 	ldw	fp,0(sp)
 1003eec:	dec00104 	addi	sp,sp,4
 1003ef0:	f800283a 	ret

01003ef4 <Hal4D13_GetDMAConfig>:

USHORT Hal4D13_GetDMAConfig(void) {
 1003ef4:	defffe04 	addi	sp,sp,-8
 1003ef8:	df000115 	stw	fp,4(sp)
 1003efc:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_RD_CNFG);
 1003f00:	008040b4 	movhi	r2,258
 1003f04:	10ba3004 	addi	r2,r2,-5952
 1003f08:	10800017 	ldw	r2,0(r2)
 1003f0c:	10800304 	addi	r2,r2,12
 1003f10:	1007883a 	mov	r3,r2
 1003f14:	00803c44 	movi	r2,241
 1003f18:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003f1c:	008040b4 	movhi	r2,258
 1003f20:	10ba3004 	addi	r2,r2,-5952
 1003f24:	10800017 	ldw	r2,0(r2)
 1003f28:	10800204 	addi	r2,r2,8
 1003f2c:	10800037 	ldwio	r2,0(r2)
 1003f30:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1003f34:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003f38:	e037883a 	mov	sp,fp
 1003f3c:	df000017 	ldw	fp,0(sp)
 1003f40:	dec00104 	addi	sp,sp,4
 1003f44:	f800283a 	ret

01003f48 <Hal4D13_SetDMACounter>:

void Hal4D13_SetDMACounter(USHORT wDMACounter) {
 1003f48:	defffe04 	addi	sp,sp,-8
 1003f4c:	df000115 	stw	fp,4(sp)
 1003f50:	df000104 	addi	fp,sp,4
 1003f54:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_WR_COUNT);
 1003f58:	008040b4 	movhi	r2,258
 1003f5c:	10ba3004 	addi	r2,r2,-5952
 1003f60:	10800017 	ldw	r2,0(r2)
 1003f64:	10800304 	addi	r2,r2,12
 1003f68:	1007883a 	mov	r3,r2
 1003f6c:	00803c84 	movi	r2,242
 1003f70:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wDMACounter);
 1003f74:	008040b4 	movhi	r2,258
 1003f78:	10ba3004 	addi	r2,r2,-5952
 1003f7c:	10800017 	ldw	r2,0(r2)
 1003f80:	10800204 	addi	r2,r2,8
 1003f84:	e0ffff0b 	ldhu	r3,-4(fp)
 1003f88:	10c00035 	stwio	r3,0(r2)
}
 1003f8c:	e037883a 	mov	sp,fp
 1003f90:	df000017 	ldw	fp,0(sp)
 1003f94:	dec00104 	addi	sp,sp,4
 1003f98:	f800283a 	ret

01003f9c <Hal4D13_GetDMACounter>:

USHORT Hal4D13_GetDMACounter(void) {
 1003f9c:	defffe04 	addi	sp,sp,-8
 1003fa0:	df000115 	stw	fp,4(sp)
 1003fa4:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DMA_RD_COUNT);
 1003fa8:	008040b4 	movhi	r2,258
 1003fac:	10ba3004 	addi	r2,r2,-5952
 1003fb0:	10800017 	ldw	r2,0(r2)
 1003fb4:	10800304 	addi	r2,r2,12
 1003fb8:	1007883a 	mov	r3,r2
 1003fbc:	00803cc4 	movi	r2,243
 1003fc0:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1003fc4:	008040b4 	movhi	r2,258
 1003fc8:	10ba3004 	addi	r2,r2,-5952
 1003fcc:	10800017 	ldw	r2,0(r2)
 1003fd0:	10800204 	addi	r2,r2,8
 1003fd4:	10800037 	ldwio	r2,0(r2)
 1003fd8:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1003fdc:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1003fe0:	e037883a 	mov	sp,fp
 1003fe4:	df000017 	ldw	fp,0(sp)
 1003fe8:	dec00104 	addi	sp,sp,4
 1003fec:	f800283a 	ret

01003ff0 <Hal4D13_GetDataFromChipRam>:

USHORT Hal4D13_GetDataFromChipRam(void) {
 1003ff0:	defffe04 	addi	sp,sp,-8
 1003ff4:	df000115 	stw	fp,4(sp)
 1003ff8:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_RAM);
 1003ffc:	008040b4 	movhi	r2,258
 1004000:	10ba3004 	addi	r2,r2,-5952
 1004004:	10800017 	ldw	r2,0(r2)
 1004008:	10800304 	addi	r2,r2,12
 100400c:	1007883a 	mov	r3,r2
 1004010:	00802cc4 	movi	r2,179
 1004014:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1004018:	008040b4 	movhi	r2,258
 100401c:	10ba3004 	addi	r2,r2,-5952
 1004020:	10800017 	ldw	r2,0(r2)
 1004024:	10800204 	addi	r2,r2,8
 1004028:	10800037 	ldwio	r2,0(r2)
 100402c:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 1004030:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1004034:	e037883a 	mov	sp,fp
 1004038:	df000017 	ldw	fp,0(sp)
 100403c:	dec00104 	addi	sp,sp,4
 1004040:	f800283a 	ret

01004044 <Hal4D13_SetDataToChipRam>:

void Hal4D13_SetDataToChipRam(USHORT wData) {
 1004044:	defffe04 	addi	sp,sp,-8
 1004048:	df000115 	stw	fp,4(sp)
 100404c:	df000104 	addi	fp,sp,4
 1004050:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_WR_RAM);
 1004054:	008040b4 	movhi	r2,258
 1004058:	10ba3004 	addi	r2,r2,-5952
 100405c:	10800017 	ldw	r2,0(r2)
 1004060:	10800304 	addi	r2,r2,12
 1004064:	1007883a 	mov	r3,r2
 1004068:	00802c84 	movi	r2,178
 100406c:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, wData);
 1004070:	008040b4 	movhi	r2,258
 1004074:	10ba3004 	addi	r2,r2,-5952
 1004078:	10800017 	ldw	r2,0(r2)
 100407c:	10800204 	addi	r2,r2,8
 1004080:	e0ffff0b 	ldhu	r3,-4(fp)
 1004084:	10c00035 	stwio	r3,0(r2)
}
 1004088:	e037883a 	mov	sp,fp
 100408c:	df000017 	ldw	fp,0(sp)
 1004090:	dec00104 	addi	sp,sp,4
 1004094:	f800283a 	ret

01004098 <Hal4D13_ReadCurrentFrameNumber>:

USHORT Hal4D13_ReadCurrentFrameNumber(void) {
 1004098:	defffe04 	addi	sp,sp,-8
 100409c:	df000115 	stw	fp,4(sp)
 10040a0:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_RD_FRMNUM);
 10040a4:	008040b4 	movhi	r2,258
 10040a8:	10ba3004 	addi	r2,r2,-5952
 10040ac:	10800017 	ldw	r2,0(r2)
 10040b0:	10800304 	addi	r2,r2,12
 10040b4:	1007883a 	mov	r3,r2
 10040b8:	00802d04 	movi	r2,180
 10040bc:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 10040c0:	008040b4 	movhi	r2,258
 10040c4:	10ba3004 	addi	r2,r2,-5952
 10040c8:	10800017 	ldw	r2,0(r2)
 10040cc:	10800204 	addi	r2,r2,8
 10040d0:	10800037 	ldwio	r2,0(r2)
 10040d4:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 10040d8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10040dc:	e037883a 	mov	sp,fp
 10040e0:	df000017 	ldw	fp,0(sp)
 10040e4:	dec00104 	addi	sp,sp,4
 10040e8:	f800283a 	ret

010040ec <Hal4D13_LockDevice>:

void Hal4D13_LockDevice(UCHAR bTrue) {
 10040ec:	defffd04 	addi	sp,sp,-12
 10040f0:	df000215 	stw	fp,8(sp)
 10040f4:	df000204 	addi	fp,sp,8
 10040f8:	e13fff05 	stb	r4,-4(fp)
	USHORT c;
	if (bTrue)
 10040fc:	e0bfff03 	ldbu	r2,-4(fp)
 1004100:	1005003a 	cmpeq	r2,r2,zero
 1004104:	1000021e 	bne	r2,zero,1004110 <Hal4D13_LockDevice+0x24>
		c = 0;
 1004108:	e03ffe0d 	sth	zero,-8(fp)
 100410c:	00000206 	br	1004118 <Hal4D13_LockDevice+0x2c>
	else
		c = 0xAA37;
 1004110:	00aa8dc4 	movi	r2,-21961
 1004114:	e0bffe0d 	sth	r2,-8(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_LOCK);
 1004118:	008040b4 	movhi	r2,258
 100411c:	10ba3004 	addi	r2,r2,-5952
 1004120:	10800017 	ldw	r2,0(r2)
 1004124:	10800304 	addi	r2,r2,12
 1004128:	1007883a 	mov	r3,r2
 100412c:	00802c04 	movi	r2,176
 1004130:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, D13_DATA_PORT, c);
 1004134:	008040b4 	movhi	r2,258
 1004138:	10ba3004 	addi	r2,r2,-5952
 100413c:	10800017 	ldw	r2,0(r2)
 1004140:	10800204 	addi	r2,r2,8
 1004144:	e0fffe0b 	ldhu	r3,-8(fp)
 1004148:	10c00035 	stwio	r3,0(r2)
}
 100414c:	e037883a 	mov	sp,fp
 1004150:	df000017 	ldw	fp,0(sp)
 1004154:	dec00104 	addi	sp,sp,4
 1004158:	f800283a 	ret

0100415c <Hal4D13_ReadChipID>:

USHORT Hal4D13_ReadChipID(void) {
 100415c:	defffe04 	addi	sp,sp,-8
 1004160:	df000115 	stw	fp,4(sp)
 1004164:	df000104 	addi	fp,sp,4
	USHORT i;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_DEV_RD_CHIPID);
 1004168:	008040b4 	movhi	r2,258
 100416c:	10ba3004 	addi	r2,r2,-5952
 1004170:	10800017 	ldw	r2,0(r2)
 1004174:	10800304 	addi	r2,r2,12
 1004178:	1007883a 	mov	r3,r2
 100417c:	00802d44 	movi	r2,181
 1004180:	18800035 	stwio	r2,0(r3)
	i = IORD(ISP1362_BASE,D13_DATA_PORT);
 1004184:	008040b4 	movhi	r2,258
 1004188:	10ba3004 	addi	r2,r2,-5952
 100418c:	10800017 	ldw	r2,0(r2)
 1004190:	10800204 	addi	r2,r2,8
 1004194:	10800037 	ldwio	r2,0(r2)
 1004198:	e0bfff0d 	sth	r2,-4(fp)
	return i;
 100419c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10041a0:	e037883a 	mov	sp,fp
 10041a4:	df000017 	ldw	fp,0(sp)
 10041a8:	dec00104 	addi	sp,sp,4
 10041ac:	f800283a 	ret

010041b0 <Hal4D13_GetErrorCode>:

UCHAR Hal4D13_GetErrorCode(UCHAR bEPIndex) {
 10041b0:	defffd04 	addi	sp,sp,-12
 10041b4:	df000215 	stw	fp,8(sp)
 10041b8:	df000204 	addi	fp,sp,8
 10041bc:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_ERR+bEPIndex);
 10041c0:	008040b4 	movhi	r2,258
 10041c4:	10ba3004 	addi	r2,r2,-5952
 10041c8:	10800017 	ldw	r2,0(r2)
 10041cc:	11000304 	addi	r4,r2,12
 10041d0:	e0bfff03 	ldbu	r2,-4(fp)
 10041d4:	10c02804 	addi	r3,r2,160
 10041d8:	2005883a 	mov	r2,r4
 10041dc:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 10041e0:	008040b4 	movhi	r2,258
 10041e4:	10ba3004 	addi	r2,r2,-5952
 10041e8:	10800017 	ldw	r2,0(r2)
 10041ec:	10800204 	addi	r2,r2,8
 10041f0:	10800037 	ldwio	r2,0(r2)
 10041f4:	1007883a 	mov	r3,r2
 10041f8:	00bfffc4 	movi	r2,-1
 10041fc:	1884703a 	and	r2,r3,r2
 1004200:	e0bffe05 	stb	r2,-8(fp)
	return c;
 1004204:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004208:	e037883a 	mov	sp,fp
 100420c:	df000017 	ldw	fp,0(sp)
 1004210:	dec00104 	addi	sp,sp,4
 1004214:	f800283a 	ret

01004218 <Hal4D13_GetEndpointConfig>:

UCHAR Hal4D13_GetEndpointConfig(UCHAR bEPIndex) {
 1004218:	defffd04 	addi	sp,sp,-12
 100421c:	df000215 	stw	fp,8(sp)
 1004220:	df000204 	addi	fp,sp,8
 1004224:	e13fff05 	stb	r4,-4(fp)
	UCHAR c;
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, D13CMD_EP_RD_CNFG+bEPIndex);
 1004228:	008040b4 	movhi	r2,258
 100422c:	10ba3004 	addi	r2,r2,-5952
 1004230:	10800017 	ldw	r2,0(r2)
 1004234:	11000304 	addi	r4,r2,12
 1004238:	e0bfff03 	ldbu	r2,-4(fp)
 100423c:	10c00c04 	addi	r3,r2,48
 1004240:	2005883a 	mov	r2,r4
 1004244:	10c00035 	stwio	r3,0(r2)
	c = (UCHAR) (IORD(ISP1362_BASE,D13_DATA_PORT) & 0x0ff);
 1004248:	008040b4 	movhi	r2,258
 100424c:	10ba3004 	addi	r2,r2,-5952
 1004250:	10800017 	ldw	r2,0(r2)
 1004254:	10800204 	addi	r2,r2,8
 1004258:	10800037 	ldwio	r2,0(r2)
 100425c:	1007883a 	mov	r3,r2
 1004260:	00bfffc4 	movi	r2,-1
 1004264:	1884703a 	and	r2,r3,r2
 1004268:	e0bffe05 	stb	r2,-8(fp)
	return c;
 100426c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1004270:	e037883a 	mov	sp,fp
 1004274:	df000017 	ldw	fp,0(sp)
 1004278:	dec00104 	addi	sp,sp,4
 100427c:	f800283a 	ret

01004280 <Hal4D13_SetEndpointConfig>:

void Hal4D13_SetEndpointConfig(UCHAR bEPConfig, UCHAR bEPIndex) {
 1004280:	defffd04 	addi	sp,sp,-12
 1004284:	df000215 	stw	fp,8(sp)
 1004288:	df000204 	addi	fp,sp,8
 100428c:	e13ffe05 	stb	r4,-8(fp)
 1004290:	e17fff05 	stb	r5,-4(fp)
	IOWR(ISP1362_BASE, D13_COMMAND_PORT, (USHORT)(D13CMD_EP_WR_CNFG+bEPIndex));
 1004294:	008040b4 	movhi	r2,258
 1004298:	10ba3004 	addi	r2,r2,-5952
 100429c:	10800017 	ldw	r2,0(r2)
 10042a0:	11000304 	addi	r4,r2,12
 10042a4:	e0bfff03 	ldbu	r2,-4(fp)
 10042a8:	10800804 	addi	r2,r2,32
 10042ac:	10ffffcc 	andi	r3,r2,65535
 10042b0:	2005883a 	mov	r2,r4
 10042b4:	10c00035 	stwio	r3,0(r2)
	IOWR(ISP1362_BASE, D13_DATA_PORT, (USHORT)bEPConfig);
 10042b8:	008040b4 	movhi	r2,258
 10042bc:	10ba3004 	addi	r2,r2,-5952
 10042c0:	10800017 	ldw	r2,0(r2)
 10042c4:	10800204 	addi	r2,r2,8
 10042c8:	e0fffe03 	ldbu	r3,-8(fp)
 10042cc:	10c00035 	stwio	r3,0(r2)
}
 10042d0:	e037883a 	mov	sp,fp
 10042d4:	df000017 	ldw	fp,0(sp)
 10042d8:	dec00104 	addi	sp,sp,4
 10042dc:	f800283a 	ret

010042e0 <Hal4D13_UnconfigDevice>:
/*
 // ************************************************************************
 // Subroutines -- 3
 // ************************************************************************
 */
void Hal4D13_UnconfigDevice(void) {
 10042e0:	deffff04 	addi	sp,sp,-4
 10042e4:	df000015 	stw	fp,0(sp)
 10042e8:	d839883a 	mov	fp,sp
}
 10042ec:	e037883a 	mov	sp,fp
 10042f0:	df000017 	ldw	fp,0(sp)
 10042f4:	dec00104 	addi	sp,sp,4
 10042f8:	f800283a 	ret

010042fc <Hal4D13_ConfigDevice>:

void Hal4D13_ConfigDevice(void) {
 10042fc:	deffff04 	addi	sp,sp,-4
 1004300:	df000015 	stw	fp,0(sp)
 1004304:	d839883a 	mov	fp,sp
}
 1004308:	e037883a 	mov	sp,fp
 100430c:	df000017 	ldw	fp,0(sp)
 1004310:	dec00104 	addi	sp,sp,4
 1004314:	f800283a 	ret

01004318 <Hal4D13_SingleTransmitEP0>:

void Hal4D13_SingleTransmitEP0(UCHAR * buf, USHORT len) {
 1004318:	defffc04 	addi	sp,sp,-16
 100431c:	dfc00315 	stw	ra,12(sp)
 1004320:	df000215 	stw	fp,8(sp)
 1004324:	df000204 	addi	fp,sp,8
 1004328:	e13ffe15 	stw	r4,-8(fp)
 100432c:	e17fff0d 	sth	r5,-4(fp)
	if (len <= EP0_PACKET_SIZE) {
 1004330:	e0bfff0b 	ldhu	r2,-4(fp)
 1004334:	10801068 	cmpgeui	r2,r2,65
 1004338:	1000041e 	bne	r2,zero,100434c <Hal4D13_SingleTransmitEP0+0x34>
		Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN, buf, len);
 100433c:	e1bfff0b 	ldhu	r6,-4(fp)
 1004340:	01000044 	movi	r4,1
 1004344:	e17ffe17 	ldw	r5,-8(fp)
 1004348:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>
	}
}
 100434c:	e037883a 	mov	sp,fp
 1004350:	dfc00117 	ldw	ra,4(sp)
 1004354:	df000017 	ldw	fp,0(sp)
 1004358:	dec00204 	addi	sp,sp,8
 100435c:	f800283a 	ret

01004360 <Hal4D13_RegAccess>:

void Hal4D13_RegAccess(void) {
 1004360:	defffc04 	addi	sp,sp,-16
 1004364:	dfc00315 	stw	ra,12(sp)
 1004368:	df000215 	stw	fp,8(sp)
 100436c:	df000204 	addi	fp,sp,8
	USHORT c;
	USHORT i;
	ULONG l;

	Hal4D13_ResetDevice();
 1004370:	10031e40 	call	10031e4 <Hal4D13_ResetDevice>
	printf("Reseting\n");
 1004374:	010040b4 	movhi	r4,258
 1004378:	21282304 	addi	r4,r4,-24436
 100437c:	10062840 	call	1006284 <puts>

	i = Hal4D13_ReadChipID();
 1004380:	100415c0 	call	100415c <Hal4D13_ReadChipID>
 1004384:	e0bfff0d 	sth	r2,-4(fp)
	printf(" ChipId = %hx\n", i);
 1004388:	e17fff0b 	ldhu	r5,-4(fp)
 100438c:	010040b4 	movhi	r4,258
 1004390:	21282604 	addi	r4,r4,-24424
 1004394:	10061480 	call	1006148 <printf>

	i = Hal4D13_GetDataFromChipRam();
 1004398:	1003ff00 	call	1003ff0 <Hal4D13_GetDataFromChipRam>
 100439c:	e0bfff0d 	sth	r2,-4(fp)
	printf(" Chip RAM = %hx\n", i);
 10043a0:	e17fff0b 	ldhu	r5,-4(fp)
 10043a4:	010040b4 	movhi	r4,258
 10043a8:	21282a04 	addi	r4,r4,-24408
 10043ac:	10061480 	call	1006148 <printf>

	printf("Writing 0x55AA,");
 10043b0:	010040b4 	movhi	r4,258
 10043b4:	21282f04 	addi	r4,r4,-24388
 10043b8:	10061480 	call	1006148 <printf>
	Hal4D13_SetDataToChipRam(0x55AA);
 10043bc:	01156a84 	movi	r4,21930
 10043c0:	10040440 	call	1004044 <Hal4D13_SetDataToChipRam>
	i = Hal4D13_GetDataFromChipRam();
 10043c4:	1003ff00 	call	1003ff0 <Hal4D13_GetDataFromChipRam>
 10043c8:	e0bfff0d 	sth	r2,-4(fp)
	printf(" Chip RAM = %hx\n", i);
 10043cc:	e17fff0b 	ldhu	r5,-4(fp)
 10043d0:	010040b4 	movhi	r4,258
 10043d4:	21282a04 	addi	r4,r4,-24408
 10043d8:	10061480 	call	1006148 <printf>

	l = Hal4D13_GetIntEnable();
 10043dc:	1003bb80 	call	1003bb8 <Hal4D13_GetIntEnable>
 10043e0:	e0bffe15 	stw	r2,-8(fp)
	printf("Hal4D13_GetIntEnable = %lx\n", l);
 10043e4:	010040b4 	movhi	r4,258
 10043e8:	21283304 	addi	r4,r4,-24372
 10043ec:	e17ffe17 	ldw	r5,-8(fp)
 10043f0:	10061480 	call	1006148 <printf>

	l = Hal4D13_ReadInterruptRegister();
 10043f4:	1003cc40 	call	1003cc4 <Hal4D13_ReadInterruptRegister>
 10043f8:	e0bffe15 	stw	r2,-8(fp)
	printf("Hal4D13_ReadInterruptRegister = %lx\n", l);
 10043fc:	010040b4 	movhi	r4,258
 1004400:	21283a04 	addi	r4,r4,-24344
 1004404:	e17ffe17 	ldw	r5,-8(fp)
 1004408:	10061480 	call	1006148 <printf>

	i = Hal4D13_GetDevConfig();
 100440c:	100321c0 	call	100321c <Hal4D13_GetDevConfig>
 1004410:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDevConfig = %hx\n", i);
 1004414:	e17fff0b 	ldhu	r5,-4(fp)
 1004418:	010040b4 	movhi	r4,258
 100441c:	21284404 	addi	r4,r4,-24304
 1004420:	10061480 	call	1006148 <printf>

	i = Hal4D13_GetDMAConfig();
 1004424:	1003ef40 	call	1003ef4 <Hal4D13_GetDMAConfig>
 1004428:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDMAConfig = %hx\n", i);
 100442c:	e17fff0b 	ldhu	r5,-4(fp)
 1004430:	010040b4 	movhi	r4,258
 1004434:	21284b04 	addi	r4,r4,-24276
 1004438:	10061480 	call	1006148 <printf>

	i = Hal4D13_GetDMACounter();
 100443c:	1003f9c0 	call	1003f9c <Hal4D13_GetDMACounter>
 1004440:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_GetDMACounter = %hx\n", i);
 1004444:	e17fff0b 	ldhu	r5,-4(fp)
 1004448:	010040b4 	movhi	r4,258
 100444c:	21285204 	addi	r4,r4,-24248
 1004450:	10061480 	call	1006148 <printf>

	i = Hal4D13_ReadCurrentFrameNumber();
 1004454:	10040980 	call	1004098 <Hal4D13_ReadCurrentFrameNumber>
 1004458:	e0bfff0d 	sth	r2,-4(fp)
	printf("Hal4D13_ReadCurrentFrameNumber = %hx\n", i);
 100445c:	e17fff0b 	ldhu	r5,-4(fp)
 1004460:	010040b4 	movhi	r4,258
 1004464:	21285a04 	addi	r4,r4,-24216
 1004468:	10061480 	call	1006148 <printf>

	c = Hal4D13_GetMode();
 100446c:	10033180 	call	1003318 <Hal4D13_GetMode>
 1004470:	10803fcc 	andi	r2,r2,255
 1004474:	e0bfff8d 	sth	r2,-2(fp)
	printf("Hal4D13_GetMode = %x\n", c);
 1004478:	e17fff8b 	ldhu	r5,-2(fp)
 100447c:	010040b4 	movhi	r4,258
 1004480:	21286404 	addi	r4,r4,-24176
 1004484:	10061480 	call	1006148 <printf>

	c = Hal4D13_GetEndpointStatusWOInteruptClear(EPINDEX4EP0_CONTROL_OUT);
 1004488:	0009883a 	mov	r4,zero
 100448c:	1003db80 	call	1003db8 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1004490:	10803fcc 	andi	r2,r2,255
 1004494:	e0bfff8d 	sth	r2,-2(fp)
	printf("Hal4D13_GetEndpointStatus EP0 = %x\n", c);
 1004498:	e17fff8b 	ldhu	r5,-2(fp)
 100449c:	010040b4 	movhi	r4,258
 10044a0:	21286a04 	addi	r4,r4,-24152
 10044a4:	10061480 	call	1006148 <printf>

	c = Hal4D13_GetAddress();
 10044a8:	10033780 	call	1003378 <Hal4D13_GetAddress>
 10044ac:	10803fcc 	andi	r2,r2,255
 10044b0:	e0bfff8d 	sth	r2,-2(fp)
//  printf("Hal4D13_GetAddress = %x\n",c);
}
 10044b4:	e037883a 	mov	sp,fp
 10044b8:	dfc00117 	ldw	ra,4(sp)
 10044bc:	df000017 	ldw	fp,0(sp)
 10044c0:	dec00204 	addi	sp,sp,8
 10044c4:	f800283a 	ret

010044c8 <Hal4D13_StallEP0InControlWrite>:

void Hal4D13_StallEP0InControlWrite(void) {
 10044c8:	defffe04 	addi	sp,sp,-8
 10044cc:	dfc00115 	stw	ra,4(sp)
 10044d0:	df000015 	stw	fp,0(sp)
 10044d4:	d839883a 	mov	fp,sp
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
 10044d8:	01000044 	movi	r4,1
 10044dc:	01402004 	movi	r5,128
 10044e0:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
 10044e4:	0009883a 	mov	r4,zero
 10044e8:	01402004 	movi	r5,128
 10044ec:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
}
 10044f0:	e037883a 	mov	sp,fp
 10044f4:	dfc00117 	ldw	ra,4(sp)
 10044f8:	df000017 	ldw	fp,0(sp)
 10044fc:	dec00204 	addi	sp,sp,8
 1004500:	f800283a 	ret

01004504 <Hal4D13_StallEP0InControlRead>:

void Hal4D13_StallEP0InControlRead(void) {
 1004504:	defffe04 	addi	sp,sp,-8
 1004508:	dfc00115 	stw	ra,4(sp)
 100450c:	df000015 	stw	fp,0(sp)
 1004510:	d839883a 	mov	fp,sp
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_OUT, D13REG_EPSTS_STALL);
 1004514:	0009883a 	mov	r4,zero
 1004518:	01402004 	movi	r5,128
 100451c:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
	Hal4D13_SetEndpointStatus(EPINDEX4EP0_CONTROL_IN, D13REG_EPSTS_STALL);
 1004520:	01000044 	movi	r4,1
 1004524:	01402004 	movi	r5,128
 1004528:	1003e200 	call	1003e20 <Hal4D13_SetEndpointStatus>
}
 100452c:	e037883a 	mov	sp,fp
 1004530:	dfc00117 	ldw	ra,4(sp)
 1004534:	df000017 	ldw	fp,0(sp)
 1004538:	dec00204 	addi	sp,sp,8
 100453c:	f800283a 	ret

01004540 <Hal4D13_IsSetupPktInvalid>:

BOOLEAN Hal4D13_IsSetupPktInvalid(void) {
 1004540:	defffd04 	addi	sp,sp,-12
 1004544:	dfc00215 	stw	ra,8(sp)
 1004548:	df000115 	stw	fp,4(sp)
 100454c:	df000104 	addi	fp,sp,4
	USHORT SetupPacketInvalid;
	SetupPacketInvalid = Hal4D13_GetEndpointStatusWOInteruptClear(
 1004550:	0009883a 	mov	r4,zero
 1004554:	1003db80 	call	1003db8 <Hal4D13_GetEndpointStatusWOInteruptClear>
 1004558:	10803fcc 	andi	r2,r2,255
 100455c:	1080020c 	andi	r2,r2,8
 1004560:	e0bfff0d 	sth	r2,-4(fp)
			EPINDEX4EP0_CONTROL_OUT) & D13REG_EPSTS_OVWR;
	return SetupPacketInvalid;
 1004564:	e0bfff0b 	ldhu	r2,-4(fp)
 1004568:	10803fcc 	andi	r2,r2,255
}
 100456c:	e037883a 	mov	sp,fp
 1004570:	dfc00117 	ldw	ra,4(sp)
 1004574:	df000017 	ldw	fp,0(sp)
 1004578:	dec00204 	addi	sp,sp,8
 100457c:	f800283a 	ret

01004580 <Write_HC_Config_Reg>:

void Write_HC_Config_Reg(unsigned short Config) {
 1004580:	defffe04 	addi	sp,sp,-8
 1004584:	df000115 	stw	fp,4(sp)
 1004588:	df000104 	addi	fp,sp,4
 100458c:	e13fff0d 	sth	r4,-4(fp)
	IOWR(ISP1362_BASE, HC_COMMAND_PORT, HCCMD_WR_CNFG_REG);
 1004590:	008040b4 	movhi	r2,258
 1004594:	10ba3004 	addi	r2,r2,-5952
 1004598:	10800017 	ldw	r2,0(r2)
 100459c:	10800104 	addi	r2,r2,4
 10045a0:	1007883a 	mov	r3,r2
 10045a4:	00802804 	movi	r2,160
 10045a8:	18800035 	stwio	r2,0(r3)
	IOWR(ISP1362_BASE, HC_DATA_PORT, Config);
 10045ac:	008040b4 	movhi	r2,258
 10045b0:	10ba3004 	addi	r2,r2,-5952
 10045b4:	10800017 	ldw	r2,0(r2)
 10045b8:	e0ffff0b 	ldhu	r3,-4(fp)
 10045bc:	10c00035 	stwio	r3,0(r2)
}
 10045c0:	e037883a 	mov	sp,fp
 10045c4:	df000017 	ldw	fp,0(sp)
 10045c8:	dec00104 	addi	sp,sp,4
 10045cc:	f800283a 	ret

010045d0 <Read_HC_Config_Reg>:

unsigned short Read_HC_Config_Reg(void) {
 10045d0:	deffff04 	addi	sp,sp,-4
 10045d4:	df000015 	stw	fp,0(sp)
 10045d8:	d839883a 	mov	fp,sp
	IOWR(ISP1362_BASE, HC_COMMAND_PORT, HCCMD_RD_CNFG_REG);
 10045dc:	008040b4 	movhi	r2,258
 10045e0:	10ba3004 	addi	r2,r2,-5952
 10045e4:	10800017 	ldw	r2,0(r2)
 10045e8:	10800104 	addi	r2,r2,4
 10045ec:	1007883a 	mov	r3,r2
 10045f0:	00800804 	movi	r2,32
 10045f4:	18800035 	stwio	r2,0(r3)
	return IORD(ISP1362_BASE,HC_DATA_PORT);
 10045f8:	008040b4 	movhi	r2,258
 10045fc:	10ba3004 	addi	r2,r2,-5952
 1004600:	10800017 	ldw	r2,0(r2)
 1004604:	10800037 	ldwio	r2,0(r2)
 1004608:	10bfffcc 	andi	r2,r2,65535
}
 100460c:	e037883a 	mov	sp,fp
 1004610:	df000017 	ldw	fp,0(sp)
 1004614:	dec00104 	addi	sp,sp,4
 1004618:	f800283a 	ret

0100461c <usb_disable_all_interrupts>:

alt_irq_context status;
unsigned char INT_Enabled=1;

void usb_disable_all_interrupts(void)
{
 100461c:	defffe04 	addi	sp,sp,-8
 1004620:	df000115 	stw	fp,4(sp)
 1004624:	df000104 	addi	fp,sp,4
  if(INT_Enabled)
 1004628:	d0a00803 	ldbu	r2,-32736(gp)
 100462c:	10803fcc 	andi	r2,r2,255
 1004630:	1005003a 	cmpeq	r2,r2,zero
 1004634:	1000091e 	bne	r2,zero,100465c <usb_disable_all_interrupts+0x40>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004638:	0005303a 	rdctl	r2,status
 100463c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004640:	e0ffff17 	ldw	r3,-4(fp)
 1004644:	00bfff84 	movi	r2,-2
 1004648:	1884703a 	and	r2,r3,r2
 100464c:	1001703a 	wrctl	status,r2
  
  return context;
 1004650:	e0bfff17 	ldw	r2,-4(fp)
  {
    status=alt_irq_disable_all();
 1004654:	d0a7f515 	stw	r2,-24620(gp)
    INT_Enabled=0;
 1004658:	d0200805 	stb	zero,-32736(gp)
  }
}
 100465c:	e037883a 	mov	sp,fp
 1004660:	df000017 	ldw	fp,0(sp)
 1004664:	dec00104 	addi	sp,sp,4
 1004668:	f800283a 	ret

0100466c <usb_reenable_all_interrupts>:

void usb_reenable_all_interrupts(void)
{
 100466c:	defffe04 	addi	sp,sp,-8
 1004670:	df000115 	stw	fp,4(sp)
 1004674:	df000104 	addi	fp,sp,4
  if(!INT_Enabled)
 1004678:	d0a00803 	ldbu	r2,-32736(gp)
 100467c:	10803fcc 	andi	r2,r2,255
 1004680:	1004c03a 	cmpne	r2,r2,zero
 1004684:	1000061e 	bne	r2,zero,10046a0 <usb_reenable_all_interrupts+0x34>
  {
    alt_irq_enable_all(status);
 1004688:	d0a7f517 	ldw	r2,-24620(gp)
 100468c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004690:	e0bfff17 	ldw	r2,-4(fp)
 1004694:	1001703a 	wrctl	status,r2
    INT_Enabled=1;
 1004698:	00800044 	movi	r2,1
 100469c:	d0a00805 	stb	r2,-32736(gp)
  }
}
 10046a0:	e037883a 	mov	sp,fp
 10046a4:	df000017 	ldw	fp,0(sp)
 10046a8:	dec00104 	addi	sp,sp,4
 10046ac:	f800283a 	ret

010046b0 <fn_usb_isr>:



void fn_usb_isr(void) {
 10046b0:	defffe04 	addi	sp,sp,-8
 10046b4:	dfc00115 	stw	ra,4(sp)
 10046b8:	df000015 	stw	fp,0(sp)
 10046bc:	d839883a 	mov	fp,sp
	usb_disable_all_interrupts();
 10046c0:	100461c0 	call	100461c <usb_disable_all_interrupts>
	Hal4D13_LockDevice(0);
 10046c4:	0009883a 	mov	r4,zero
 10046c8:	10040ec0 	call	10040ec <Hal4D13_LockDevice>
	usb_reenable_all_interrupts();
 10046cc:	100466c0 	call	100466c <usb_reenable_all_interrupts>
}
 10046d0:	e037883a 	mov	sp,fp
 10046d4:	dfc00117 	ldw	ra,4(sp)
 10046d8:	df000017 	ldw	fp,0(sp)
 10046dc:	dec00204 	addi	sp,sp,8
 10046e0:	f800283a 	ret

010046e4 <usb_isr>:

void usb_isr(void) {
 10046e4:	defffd04 	addi	sp,sp,-12
 10046e8:	dfc00215 	stw	ra,8(sp)
 10046ec:	df000115 	stw	fp,4(sp)
 10046f0:	df000104 	addi	fp,sp,4
//	printf("USB ISR\n");
	ULONG i_st;
	usb_disable_all_interrupts();
 10046f4:	100461c0 	call	100461c <usb_disable_all_interrupts>
	Hal4D13_LockDevice(0);
 10046f8:	0009883a 	mov	r4,zero
 10046fc:	10040ec0 	call	10040ec <Hal4D13_LockDevice>
	bD13flags.bits.At_IRQL1 = 1;
 1004700:	00c040b4 	movhi	r3,258
 1004704:	18fa3104 	addi	r3,r3,-5948
 1004708:	18800017 	ldw	r2,0(r3)
 100470c:	10800114 	ori	r2,r2,4
 1004710:	18800015 	stw	r2,0(r3)
	i_st = Hal4D13_ReadInterruptRegister();
 1004714:	1003cc40 	call	1003cc4 <Hal4D13_ReadInterruptRegister>
 1004718:	e0bfff15 	stw	r2,-4(fp)
	if (i_st != 0) {
 100471c:	e0bfff17 	ldw	r2,-4(fp)
 1004720:	1005003a 	cmpeq	r2,r2,zero
 1004724:	1000511e 	bne	r2,zero,100486c <usb_isr+0x188>
		if (i_st & D13REG_INTSRC_BUSRESET)
 1004728:	e0bfff17 	ldw	r2,-4(fp)
 100472c:	1080004c 	andi	r2,r2,1
 1004730:	10803fcc 	andi	r2,r2,255
 1004734:	1005003a 	cmpeq	r2,r2,zero
 1004738:	1000021e 	bne	r2,zero,1004744 <usb_isr+0x60>
			Isr_BusReset();
 100473c:	100489c0 	call	100489c <Isr_BusReset>
 1004740:	00004a06 	br	100486c <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_SUSPEND)
 1004744:	e0bfff17 	ldw	r2,-4(fp)
 1004748:	1080010c 	andi	r2,r2,4
 100474c:	1005003a 	cmpeq	r2,r2,zero
 1004750:	1000021e 	bne	r2,zero,100475c <usb_isr+0x78>
			Isr_SuspendChange();
 1004754:	10049400 	call	1004940 <Isr_SuspendChange>
 1004758:	00004406 	br	100486c <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_EOT)
 100475c:	e0bfff17 	ldw	r2,-4(fp)
 1004760:	1080020c 	andi	r2,r2,8
 1004764:	1005003a 	cmpeq	r2,r2,zero
 1004768:	1000021e 	bne	r2,zero,1004774 <usb_isr+0x90>
			Isr_DmaEot();
 100476c:	10049a00 	call	10049a0 <Isr_DmaEot>
 1004770:	00003e06 	br	100486c <usb_isr+0x188>
		else if (i_st & (D13REG_INTSRC_SOF | D13REG_INTSRC_PSEUDO_SOF))
 1004774:	e0bfff17 	ldw	r2,-4(fp)
 1004778:	10800c0c 	andi	r2,r2,48
 100477c:	1005003a 	cmpeq	r2,r2,zero
 1004780:	1000021e 	bne	r2,zero,100478c <usb_isr+0xa8>
			Isr_SOF();
 1004784:	1004a6c0 	call	1004a6c <Isr_SOF>
 1004788:	00003806 	br	100486c <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_SHORT_PACKET)
 100478c:	e0bfff17 	ldw	r2,-4(fp)
 1004790:	1080100c 	andi	r2,r2,64
 1004794:	1005003a 	cmpeq	r2,r2,zero
 1004798:	1000021e 	bne	r2,zero,10047a4 <usb_isr+0xc0>
			Isr_SHORT_PACKET();
 100479c:	10049700 	call	1004970 <Isr_SHORT_PACKET>
 10047a0:	00003206 	br	100486c <usb_isr+0x188>
		else if (i_st & D13REG_INTSRC_RESUME) {
 10047a4:	e0bfff17 	ldw	r2,-4(fp)
 10047a8:	1080008c 	andi	r2,r2,2
 10047ac:	1005003a 	cmpeq	r2,r2,zero
 10047b0:	1000061e 	bne	r2,zero,10047cc <usb_isr+0xe8>
			printf("RESUME\n");
 10047b4:	010040b4 	movhi	r4,258
 10047b8:	21287304 	addi	r4,r4,-24116
 10047bc:	10062840 	call	1006284 <puts>
			Hal4D13_LockDevice(0);
 10047c0:	0009883a 	mov	r4,zero
 10047c4:	10040ec0 	call	10040ec <Hal4D13_LockDevice>
 10047c8:	00002806 	br	100486c <usb_isr+0x188>
		} else {
			if (i_st & D13REG_INTSRC_EP0OUT)
 10047cc:	e0bfff17 	ldw	r2,-4(fp)
 10047d0:	1080400c 	andi	r2,r2,256
 10047d4:	1005003a 	cmpeq	r2,r2,zero
 10047d8:	1000011e 	bne	r2,zero,10047e0 <usb_isr+0xfc>
				Isr_Ep00RxDone();
 10047dc:	1004a880 	call	1004a88 <Isr_Ep00RxDone>
			if (i_st & D13REG_INTSRC_EP0IN)
 10047e0:	e0bfff17 	ldw	r2,-4(fp)
 10047e4:	1080800c 	andi	r2,r2,512
 10047e8:	1005003a 	cmpeq	r2,r2,zero
 10047ec:	1000011e 	bne	r2,zero,10047f4 <usb_isr+0x110>
				Isr_Ep00TxDone();
 10047f0:	1004c8c0 	call	1004c8c <Isr_Ep00TxDone>
			if (i_st & D13REG_INTSRC_EP01) {
 10047f4:	e0bfff17 	ldw	r2,-4(fp)
 10047f8:	1081000c 	andi	r2,r2,1024
 10047fc:	1005003a 	cmpeq	r2,r2,zero
 1004800:	1000011e 	bne	r2,zero,1004808 <usb_isr+0x124>
//				printf("ISR EP1\n");
				Isr_Ep01Done();
 1004804:	1004f600 	call	1004f60 <Isr_Ep01Done>
			}
			if (i_st & D13REG_INTSRC_EP02) {
 1004808:	e0bfff17 	ldw	r2,-4(fp)
 100480c:	1082000c 	andi	r2,r2,2048
 1004810:	1005003a 	cmpeq	r2,r2,zero
 1004814:	1000011e 	bne	r2,zero,100481c <usb_isr+0x138>
//				printf("ISR IP2\n");
				Isr_Ep02Done();
 1004818:	1004fc00 	call	1004fc0 <Isr_Ep02Done>
			}
			if (i_st & D13REG_INTSRC_EP03)
 100481c:	e0bfff17 	ldw	r2,-4(fp)
 1004820:	1084000c 	andi	r2,r2,4096
 1004824:	1005003a 	cmpeq	r2,r2,zero
 1004828:	1000011e 	bne	r2,zero,1004830 <usb_isr+0x14c>
				Isr_Ep03Done();
 100482c:	10050280 	call	1005028 <Isr_Ep03Done>
			if (i_st & D13REG_INTSRC_EP04)
 1004830:	e0bfff17 	ldw	r2,-4(fp)
 1004834:	1088000c 	andi	r2,r2,8192
 1004838:	1005003a 	cmpeq	r2,r2,zero
 100483c:	1000011e 	bne	r2,zero,1004844 <usb_isr+0x160>
				Isr_Ep04Done();
 1004840:	10050580 	call	1005058 <Isr_Ep04Done>
			if (i_st & D13REG_INTSRC_EP05)
 1004844:	e0bfff17 	ldw	r2,-4(fp)
 1004848:	1090000c 	andi	r2,r2,16384
 100484c:	1005003a 	cmpeq	r2,r2,zero
 1004850:	1000011e 	bne	r2,zero,1004858 <usb_isr+0x174>
				Isr_Ep05Done();
 1004854:	10050880 	call	1005088 <Isr_Ep05Done>
			if (i_st & D13REG_INTSRC_EP06)
 1004858:	e0bfff17 	ldw	r2,-4(fp)
 100485c:	10a0000c 	andi	r2,r2,32768
 1004860:	1005003a 	cmpeq	r2,r2,zero
 1004864:	1000011e 	bne	r2,zero,100486c <usb_isr+0x188>
				Isr_Ep06Done();
 1004868:	10050e40 	call	10050e4 <Isr_Ep06Done>
		}
	}
	usb_reenable_all_interrupts();
 100486c:	100466c0 	call	100466c <usb_reenable_all_interrupts>
	bD13flags.bits.At_IRQL1 = 0;
 1004870:	010040b4 	movhi	r4,258
 1004874:	213a3104 	addi	r4,r4,-5948
 1004878:	20c00017 	ldw	r3,0(r4)
 100487c:	00bffec4 	movi	r2,-5
 1004880:	1884703a 	and	r2,r3,r2
 1004884:	20800015 	stw	r2,0(r4)
}
 1004888:	e037883a 	mov	sp,fp
 100488c:	dfc00117 	ldw	ra,4(sp)
 1004890:	df000017 	ldw	fp,0(sp)
 1004894:	dec00204 	addi	sp,sp,8
 1004898:	f800283a 	ret

0100489c <Isr_BusReset>:

void Isr_BusReset(void) {
 100489c:	defffe04 	addi	sp,sp,-8
 10048a0:	dfc00115 	stw	ra,4(sp)
 10048a4:	df000015 	stw	fp,0(sp)
 10048a8:	d839883a 	mov	fp,sp
//	printf("USB Bus Reset\n");
	reconnect_USB();
 10048ac:	1002a700 	call	1002a70 <reconnect_USB>
	bD13flags.bits.DCP_state = 0x00;
 10048b0:	010040b4 	movhi	r4,258
 10048b4:	213a3104 	addi	r4,r4,-5948
 10048b8:	20c00017 	ldw	r3,0(r4)
 10048bc:	00bc3fc4 	movi	r2,-3841
 10048c0:	1884703a 	and	r2,r3,r2
 10048c4:	20800015 	stw	r2,0(r4)
	bD13flags.bits.dma_disable = 0x00;
 10048c8:	010040b4 	movhi	r4,258
 10048cc:	213a3104 	addi	r4,r4,-5948
 10048d0:	20c00017 	ldw	r3,0(r4)
 10048d4:	00bfff34 	movhi	r2,65532
 10048d8:	10bfffc4 	addi	r2,r2,-1
 10048dc:	1884703a 	and	r2,r3,r2
 10048e0:	20800015 	stw	r2,0(r4)

	bUSBCheck_Device_State.State_bits.DEVICE_DEFAULT_STATE = 1;
 10048e4:	00c040b4 	movhi	r3,258
 10048e8:	18fa3a04 	addi	r3,r3,-5912
 10048ec:	18800003 	ldbu	r2,0(r3)
 10048f0:	10800054 	ori	r2,r2,1
 10048f4:	18800005 	stb	r2,0(r3)
	bUSBCheck_Device_State.State_bits.DEVICE_ADDRESS_STATE = 0;
 10048f8:	010040b4 	movhi	r4,258
 10048fc:	213a3a04 	addi	r4,r4,-5912
 1004900:	20c00003 	ldbu	r3,0(r4)
 1004904:	00bfff44 	movi	r2,-3
 1004908:	1884703a 	and	r2,r3,r2
 100490c:	20800005 	stb	r2,0(r4)
	bUSBCheck_Device_State.State_bits.DEVICE_CONFIGURATION_STATE = 0;
 1004910:	010040b4 	movhi	r4,258
 1004914:	213a3a04 	addi	r4,r4,-5912
 1004918:	20c00003 	ldbu	r3,0(r4)
 100491c:	00bffec4 	movi	r2,-5
 1004920:	1884703a 	and	r2,r3,r2
 1004924:	20800005 	stb	r2,0(r4)
	config_endpoint();
 1004928:	100297c0 	call	100297c <config_endpoint>
}
 100492c:	e037883a 	mov	sp,fp
 1004930:	dfc00117 	ldw	ra,4(sp)
 1004934:	df000017 	ldw	fp,0(sp)
 1004938:	dec00204 	addi	sp,sp,8
 100493c:	f800283a 	ret

01004940 <Isr_SuspendChange>:

void Isr_SuspendChange(void) {
 1004940:	deffff04 	addi	sp,sp,-4
 1004944:	df000015 	stw	fp,0(sp)
 1004948:	d839883a 	mov	fp,sp
	bD13flags.bits.suspend = 1;
 100494c:	008040b4 	movhi	r2,258
 1004950:	10ba3104 	addi	r2,r2,-5948
 1004954:	10c00017 	ldw	r3,0(r2)
 1004958:	18c00094 	ori	r3,r3,2
 100495c:	10c00015 	stw	r3,0(r2)
}
 1004960:	e037883a 	mov	sp,fp
 1004964:	df000017 	ldw	fp,0(sp)
 1004968:	dec00104 	addi	sp,sp,4
 100496c:	f800283a 	ret

01004970 <Isr_SHORT_PACKET>:

void Isr_SHORT_PACKET(void) {
 1004970:	defffe04 	addi	sp,sp,-8
 1004974:	dfc00115 	stw	ra,4(sp)
 1004978:	df000015 	stw	fp,0(sp)
 100497c:	d839883a 	mov	fp,sp
	printf("SHORT PACKET INTERRUPT\n");
 1004980:	010040b4 	movhi	r4,258
 1004984:	21287504 	addi	r4,r4,-24108
 1004988:	10062840 	call	1006284 <puts>
}
 100498c:	e037883a 	mov	sp,fp
 1004990:	dfc00117 	ldw	ra,4(sp)
 1004994:	df000017 	ldw	fp,0(sp)
 1004998:	dec00204 	addi	sp,sp,8
 100499c:	f800283a 	ret

010049a0 <Isr_DmaEot>:

void Isr_DmaEot(void) {
 10049a0:	defffe04 	addi	sp,sp,-8
 10049a4:	dfc00115 	stw	ra,4(sp)
 10049a8:	df000015 	stw	fp,0(sp)
 10049ac:	d839883a 	mov	fp,sp
	bD13flags.bits.dma_disable = 0;
 10049b0:	010040b4 	movhi	r4,258
 10049b4:	213a3104 	addi	r4,r4,-5948
 10049b8:	20c00017 	ldw	r3,0(r4)
 10049bc:	00bfff34 	movhi	r2,65532
 10049c0:	10bfffc4 	addi	r2,r2,-1
 10049c4:	1884703a 	and	r2,r3,r2
 10049c8:	20800015 	stw	r2,0(r4)

	if (bD13flags.bits.dma_state == DMA_PENDING)
 10049cc:	008040b4 	movhi	r2,258
 10049d0:	10ba3104 	addi	r2,r2,-5948
 10049d4:	10800017 	ldw	r2,0(r2)
 10049d8:	10c0062c 	andhi	r3,r2,24
 10049dc:	00800434 	movhi	r2,16
 10049e0:	1880061e 	bne	r3,r2,10049fc <Isr_DmaEot+0x5c>
		bD13flags.bits.setup_dma = 1;
 10049e4:	008040b4 	movhi	r2,258
 10049e8:	10ba3104 	addi	r2,r2,-5948
 10049ec:	10c00017 	ldw	r3,0(r2)
 10049f0:	18c00074 	orhi	r3,r3,1
 10049f4:	10c00015 	stw	r3,0(r2)
 10049f8:	00000706 	br	1004a18 <Isr_DmaEot+0x78>
	else
		bD13flags.bits.dma_state = DMA_IDLE;
 10049fc:	010040b4 	movhi	r4,258
 1004a00:	213a3104 	addi	r4,r4,-5948
 1004a04:	20c00017 	ldw	r3,0(r4)
 1004a08:	00bffa34 	movhi	r2,65512
 1004a0c:	10bfffc4 	addi	r2,r2,-1
 1004a10:	1884703a 	and	r2,r3,r2
 1004a14:	20800015 	stw	r2,0(r4)
	printf("EOT reached!!!\n");
 1004a18:	010040b4 	movhi	r4,258
 1004a1c:	21287b04 	addi	r4,r4,-24084
 1004a20:	10062840 	call	1006284 <puts>
	if (bD13flags.bits.verbose == 1)
 1004a24:	008040b4 	movhi	r2,258
 1004a28:	10ba3104 	addi	r2,r2,-5948
 1004a2c:	10800017 	ldw	r2,0(r2)
 1004a30:	1080402c 	andhi	r2,r2,256
 1004a34:	1005003a 	cmpeq	r2,r2,zero
 1004a38:	1000051e 	bne	r2,zero,1004a50 <Isr_DmaEot+0xb0>
		printf("dma_counter = %x\n", Hal4D13_GetDMACounter());
 1004a3c:	1003f9c0 	call	1003f9c <Hal4D13_GetDMACounter>
 1004a40:	117fffcc 	andi	r5,r2,65535
 1004a44:	010040b4 	movhi	r4,258
 1004a48:	21287f04 	addi	r4,r4,-24068
 1004a4c:	10061480 	call	1006148 <printf>
	printf("\n");
 1004a50:	01000284 	movi	r4,10
 1004a54:	10061c00 	call	10061c0 <putchar>
}
 1004a58:	e037883a 	mov	sp,fp
 1004a5c:	dfc00117 	ldw	ra,4(sp)
 1004a60:	df000017 	ldw	fp,0(sp)
 1004a64:	dec00204 	addi	sp,sp,8
 1004a68:	f800283a 	ret

01004a6c <Isr_SOF>:

void Isr_SOF(void) {
 1004a6c:	deffff04 	addi	sp,sp,-4
 1004a70:	df000015 	stw	fp,0(sp)
 1004a74:	d839883a 	mov	fp,sp

}
 1004a78:	e037883a 	mov	sp,fp
 1004a7c:	df000017 	ldw	fp,0(sp)
 1004a80:	dec00104 	addi	sp,sp,4
 1004a84:	f800283a 	ret

01004a88 <Isr_Ep00RxDone>:

void Isr_Ep00RxDone(void) {
 1004a88:	defffc04 	addi	sp,sp,-16
 1004a8c:	dfc00315 	stw	ra,12(sp)
 1004a90:	df000215 	stw	fp,8(sp)
 1004a94:	df000204 	addi	fp,sp,8
	UCHAR ep_last, i;
//	printf("RX %d\n", bUSBCheck_Device_State.State_bits.FOUR_RESERVED_BITS++);
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_OUT); /* Clear interrupt flag */
 1004a98:	0009883a 	mov	r4,zero
 1004a9c:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004aa0:	e0bffe45 	stb	r2,-7(fp)

	if (ep_last & D13REG_EPSTS_SETUP) {
 1004aa4:	e0bffe43 	ldbu	r2,-7(fp)
 1004aa8:	1080010c 	andi	r2,r2,4
 1004aac:	1005003a 	cmpeq	r2,r2,zero
 1004ab0:	10001a1e 	bne	r2,zero,1004b1c <Isr_Ep00RxDone+0x94>
		if (bD13flags.bits.DCP_state == USBFSM4DCP_REQUESTPROC) {
 1004ab4:	008040b4 	movhi	r2,258
 1004ab8:	10ba3104 	addi	r2,r2,-5948
 1004abc:	10800017 	ldw	r2,0(r2)
 1004ac0:	1083c00c 	andi	r2,r2,3840
 1004ac4:	1080c018 	cmpnei	r2,r2,768
 1004ac8:	10000c1e 	bne	r2,zero,1004afc <Isr_Ep00RxDone+0x74>
			ControlData.Abort = 1;
 1004acc:	00c040b4 	movhi	r3,258
 1004ad0:	18fa5804 	addi	r3,r3,-5792
 1004ad4:	00800044 	movi	r2,1
 1004ad8:	18800005 	stb	r2,0(r3)
			bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
 1004adc:	010040b4 	movhi	r4,258
 1004ae0:	213a3104 	addi	r4,r4,-5948
 1004ae4:	20c00017 	ldw	r3,0(r4)
 1004ae8:	00bc3fc4 	movi	r2,-3841
 1004aec:	1884703a 	and	r2,r3,r2
 1004af0:	10814014 	ori	r2,r2,1280
 1004af4:	20800015 	stw	r2,0(r4)
 1004af8:	00005f06 	br	1004c78 <Isr_Ep00RxDone+0x1f0>
		} else
			bD13flags.bits.DCP_state = USBFSM4DCP_SETUPPROC;
 1004afc:	010040b4 	movhi	r4,258
 1004b00:	213a3104 	addi	r4,r4,-5948
 1004b04:	20c00017 	ldw	r3,0(r4)
 1004b08:	00bc3fc4 	movi	r2,-3841
 1004b0c:	1884703a 	and	r2,r3,r2
 1004b10:	10814014 	ori	r2,r2,1280
 1004b14:	20800015 	stw	r2,0(r4)
 1004b18:	00005706 	br	1004c78 <Isr_Ep00RxDone+0x1f0>
	} else /* not a setup packet, just a Data Out Packet */
	{
		switch (bD13flags.bits.DCP_state) {
 1004b1c:	008040b4 	movhi	r2,258
 1004b20:	10ba3104 	addi	r2,r2,-5948
 1004b24:	10800017 	ldw	r2,0(r2)
 1004b28:	1004d23a 	srli	r2,r2,8
 1004b2c:	108003cc 	andi	r2,r2,15
 1004b30:	10803fcc 	andi	r2,r2,255
 1004b34:	e0bfff15 	stw	r2,-4(fp)
 1004b38:	e0ffff17 	ldw	r3,-4(fp)
 1004b3c:	18800228 	cmpgeui	r2,r3,8
 1004b40:	1000411e 	bne	r2,zero,1004c48 <Isr_Ep00RxDone+0x1c0>
 1004b44:	e13fff17 	ldw	r4,-4(fp)
 1004b48:	e13fff17 	ldw	r4,-4(fp)
 1004b4c:	2105883a 	add	r2,r4,r4
 1004b50:	1087883a 	add	r3,r2,r2
 1004b54:	00804034 	movhi	r2,256
 1004b58:	1092da04 	addi	r2,r2,19304
 1004b5c:	1885883a 	add	r2,r3,r2
 1004b60:	10800017 	ldw	r2,0(r2)
 1004b64:	1000683a 	jmp	r2
 1004b68:	01004c48 	cmpgei	r4,zero,305
 1004b6c:	01004c78 	rdprs	r4,zero,305
 1004b70:	01004b88 	cmpgei	r4,zero,302
 1004b74:	01004c78 	rdprs	r4,zero,305
 1004b78:	01004c2c 	andhi	r4,zero,304
 1004b7c:	01004c78 	rdprs	r4,zero,305
 1004b80:	01004c48 	cmpgei	r4,zero,305
 1004b84:	01004c78 	rdprs	r4,zero,305
		case USBFSM4DCP_DATAOUT:

			i = Hal4D13_ReadEndpoint(EPINDEX4EP0_CONTROL_OUT,
 1004b88:	008040b4 	movhi	r2,258
 1004b8c:	10ba5804 	addi	r2,r2,-5792
 1004b90:	1080030b 	ldhu	r2,12(r2)
 1004b94:	10bfffcc 	andi	r2,r2,65535
 1004b98:	1007883a 	mov	r3,r2
 1004b9c:	008040b4 	movhi	r2,258
 1004ba0:	10ba5d04 	addi	r2,r2,-5772
 1004ba4:	188b883a 	add	r5,r3,r2
 1004ba8:	0009883a 	mov	r4,zero
 1004bac:	01801004 	movi	r6,64
 1004bb0:	10035d40 	call	10035d4 <Hal4D13_ReadEndpoint>
 1004bb4:	e0bffe05 	stb	r2,-8(fp)
					ControlData.dataBuffer + ControlData.wCount,
					EP0_PACKET_SIZE);

			ControlData.wCount += i;
 1004bb8:	008040b4 	movhi	r2,258
 1004bbc:	10ba5804 	addi	r2,r2,-5792
 1004bc0:	10c0030b 	ldhu	r3,12(r2)
 1004bc4:	e0bffe03 	ldbu	r2,-8(fp)
 1004bc8:	1885883a 	add	r2,r3,r2
 1004bcc:	1007883a 	mov	r3,r2
 1004bd0:	008040b4 	movhi	r2,258
 1004bd4:	10ba5804 	addi	r2,r2,-5792
 1004bd8:	10c0030d 	sth	r3,12(r2)
			if (i != EP0_PACKET_SIZE
 1004bdc:	e0bffe03 	ldbu	r2,-8(fp)
 1004be0:	10801018 	cmpnei	r2,r2,64
 1004be4:	1000091e 	bne	r2,zero,1004c0c <Isr_Ep00RxDone+0x184>
 1004be8:	008040b4 	movhi	r2,258
 1004bec:	10ba5804 	addi	r2,r2,-5792
 1004bf0:	10c0030b 	ldhu	r3,12(r2)
 1004bf4:	008040b4 	movhi	r2,258
 1004bf8:	10ba5804 	addi	r2,r2,-5792
 1004bfc:	1080028b 	ldhu	r2,10(r2)
 1004c00:	18ffffcc 	andi	r3,r3,65535
 1004c04:	10bfffcc 	andi	r2,r2,65535
 1004c08:	18801b36 	bltu	r3,r2,1004c78 <Isr_Ep00RxDone+0x1f0>
					|| ControlData.wCount >= ControlData.wLength) {
				bD13flags.bits.DCP_state = USBFSM4DCP_REQUESTPROC;
 1004c0c:	010040b4 	movhi	r4,258
 1004c10:	213a3104 	addi	r4,r4,-5948
 1004c14:	20c00017 	ldw	r3,0(r4)
 1004c18:	00bc3fc4 	movi	r2,-3841
 1004c1c:	1884703a 	and	r2,r3,r2
 1004c20:	1080c014 	ori	r2,r2,768
 1004c24:	20800015 	stw	r2,0(r4)

			}
			break;
 1004c28:	00001306 	br	1004c78 <Isr_Ep00RxDone+0x1f0>
		case USBFSM4DCP_HANDSHAKE:

			bD13flags.bits.DCP_state = USBFSM4DCP_IDLE;
 1004c2c:	010040b4 	movhi	r4,258
 1004c30:	213a3104 	addi	r4,r4,-5948
 1004c34:	20c00017 	ldw	r3,0(r4)
 1004c38:	00bc3fc4 	movi	r2,-3841
 1004c3c:	1884703a 	and	r2,r3,r2
 1004c40:	20800015 	stw	r2,0(r4)
			break;
 1004c44:	00000c06 	br	1004c78 <Isr_Ep00RxDone+0x1f0>

		case USBFSM4DCP_DATAIN:
			break;

		default:
			printf("Fatal Error: Isr_Ep0RxDone ReadLastTranactionStatus=%x\n",
 1004c48:	e17ffe43 	ldbu	r5,-7(fp)
 1004c4c:	010040b4 	movhi	r4,258
 1004c50:	21288404 	addi	r4,r4,-24048
 1004c54:	10061480 	call	1006148 <printf>
					ep_last);
			bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1004c58:	010040b4 	movhi	r4,258
 1004c5c:	213a3104 	addi	r4,r4,-5948
 1004c60:	20c00017 	ldw	r3,0(r4)
 1004c64:	00bc3fc4 	movi	r2,-3841
 1004c68:	1884703a 	and	r2,r3,r2
 1004c6c:	1081c014 	ori	r2,r2,1792
 1004c70:	20800015 	stw	r2,0(r4)
			Hal4D13_StallEP0InControlWrite();
 1004c74:	10044c80 	call	10044c8 <Hal4D13_StallEP0InControlWrite>
			break;
		}
	}
	return;
}
 1004c78:	e037883a 	mov	sp,fp
 1004c7c:	dfc00117 	ldw	ra,4(sp)
 1004c80:	df000017 	ldw	fp,0(sp)
 1004c84:	dec00204 	addi	sp,sp,8
 1004c88:	f800283a 	ret

01004c8c <Isr_Ep00TxDone>:

void Isr_Ep00TxDone(void) {
 1004c8c:	defffc04 	addi	sp,sp,-16
 1004c90:	dfc00315 	stw	ra,12(sp)
 1004c94:	df000215 	stw	fp,8(sp)
 1004c98:	df000204 	addi	fp,sp,8
	short i = ControlData.wLength - ControlData.wCount;
 1004c9c:	008040b4 	movhi	r2,258
 1004ca0:	10ba5804 	addi	r2,r2,-5792
 1004ca4:	10c0028b 	ldhu	r3,10(r2)
 1004ca8:	008040b4 	movhi	r2,258
 1004cac:	10ba5804 	addi	r2,r2,-5792
 1004cb0:	1080030b 	ldhu	r2,12(r2)
 1004cb4:	1885c83a 	sub	r2,r3,r2
 1004cb8:	e0bffe8d 	sth	r2,-6(fp)
	UCHAR ep_last;
	Hal4D13_ReadInterruptRegister();
 1004cbc:	1003cc40 	call	1003cc4 <Hal4D13_ReadInterruptRegister>
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0_CONTROL_IN); /* Clear interrupt flag */
 1004cc0:	01000044 	movi	r4,1
 1004cc4:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004cc8:	e0bffe05 	stb	r2,-8(fp)

	switch (bD13flags.bits.DCP_state) {
 1004ccc:	008040b4 	movhi	r2,258
 1004cd0:	10ba3104 	addi	r2,r2,-5948
 1004cd4:	10800017 	ldw	r2,0(r2)
 1004cd8:	1004d23a 	srli	r2,r2,8
 1004cdc:	108003cc 	andi	r2,r2,15
 1004ce0:	10803fcc 	andi	r2,r2,255
 1004ce4:	e0bfff15 	stw	r2,-4(fp)
 1004ce8:	e0ffff17 	ldw	r3,-4(fp)
 1004cec:	18800228 	cmpgeui	r2,r3,8
 1004cf0:	1000561e 	bne	r2,zero,1004e4c <Isr_Ep00TxDone+0x1c0>
 1004cf4:	e13fff17 	ldw	r4,-4(fp)
 1004cf8:	e13fff17 	ldw	r4,-4(fp)
 1004cfc:	2105883a 	add	r2,r4,r4
 1004d00:	1087883a 	add	r3,r2,r2
 1004d04:	00804034 	movhi	r2,256
 1004d08:	10934604 	addi	r2,r2,19736
 1004d0c:	1885883a 	add	r2,r3,r2
 1004d10:	10800017 	ldw	r2,0(r2)
 1004d14:	1000683a 	jmp	r2
 1004d18:	01004e90 	cmplti	r4,zero,314
 1004d1c:	01004d38 	rdprs	r4,zero,308
 1004d20:	01004e90 	cmplti	r4,zero,314
 1004d24:	01004e90 	cmplti	r4,zero,314
 1004d28:	01004e90 	cmplti	r4,zero,314
 1004d2c:	01004e90 	cmplti	r4,zero,314
 1004d30:	01004e4c 	andi	r4,zero,313
 1004d34:	01004e90 	cmplti	r4,zero,314
	case USBFSM4DCP_HANDSHAKE:
		break;
	case USBFSM4DCP_DATAIN:
		if (i >= EP0_PACKET_SIZE) {
 1004d38:	e0bffe8f 	ldh	r2,-6(fp)
 1004d3c:	10801010 	cmplti	r2,r2,64
 1004d40:	1000141e 	bne	r2,zero,1004d94 <Isr_Ep00TxDone+0x108>
			Hal4D13_WriteEndpoint(EPINDEX4EP0_CONTROL_IN,
 1004d44:	008040b4 	movhi	r2,258
 1004d48:	10ba5804 	addi	r2,r2,-5792
 1004d4c:	10c00417 	ldw	r3,16(r2)
 1004d50:	008040b4 	movhi	r2,258
 1004d54:	10ba5804 	addi	r2,r2,-5792
 1004d58:	1080030b 	ldhu	r2,12(r2)
 1004d5c:	10bfffcc 	andi	r2,r2,65535
 1004d60:	188b883a 	add	r5,r3,r2
 1004d64:	01000044 	movi	r4,1
 1004d68:	01801004 	movi	r6,64
 1004d6c:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>
					ControlData.Addr.pData + ControlData.wCount,
					EP0_PACKET_SIZE);
			ControlData.wCount += EP0_PACKET_SIZE;
 1004d70:	008040b4 	movhi	r2,258
 1004d74:	10ba5804 	addi	r2,r2,-5792
 1004d78:	1080030b 	ldhu	r2,12(r2)
 1004d7c:	10801004 	addi	r2,r2,64
 1004d80:	1007883a 	mov	r3,r2
 1004d84:	008040b4 	movhi	r2,258
 1004d88:	10ba5804 	addi	r2,r2,-5792
 1004d8c:	10c0030d 	sth	r3,12(r2)
 1004d90:	00003f06 	br	1004e90 <Isr_Ep00TxDone+0x204>
			// State remains at USBFSM4DCP_DATAIN
		} else if (i != 0) {
 1004d94:	e0bffe8f 	ldh	r2,-6(fp)
 1004d98:	1005003a 	cmpeq	r2,r2,zero
 1004d9c:	10001d1e 	bne	r2,zero,1004e14 <Isr_Ep00TxDone+0x188>
			Hal4D13_WriteEndpoint(1,
 1004da0:	008040b4 	movhi	r2,258
 1004da4:	10ba5804 	addi	r2,r2,-5792
 1004da8:	10c00417 	ldw	r3,16(r2)
 1004dac:	008040b4 	movhi	r2,258
 1004db0:	10ba5804 	addi	r2,r2,-5792
 1004db4:	1080030b 	ldhu	r2,12(r2)
 1004db8:	10bfffcc 	andi	r2,r2,65535
 1004dbc:	188b883a 	add	r5,r3,r2
 1004dc0:	e0bffe8b 	ldhu	r2,-6(fp)
 1004dc4:	11bfffcc 	andi	r6,r2,65535
 1004dc8:	01000044 	movi	r4,1
 1004dcc:	10039400 	call	1003940 <Hal4D13_WriteEndpoint>
					ControlData.Addr.pData + ControlData.wCount, i);
			ControlData.wCount += i;
 1004dd0:	008040b4 	movhi	r2,258
 1004dd4:	10ba5804 	addi	r2,r2,-5792
 1004dd8:	10c0030b 	ldhu	r3,12(r2)
 1004ddc:	e0bffe8b 	ldhu	r2,-6(fp)
 1004de0:	1885883a 	add	r2,r3,r2
 1004de4:	1007883a 	mov	r3,r2
 1004de8:	008040b4 	movhi	r2,258
 1004dec:	10ba5804 	addi	r2,r2,-5792
 1004df0:	10c0030d 	sth	r3,12(r2)
			bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1004df4:	010040b4 	movhi	r4,258
 1004df8:	213a3104 	addi	r4,r4,-5948
 1004dfc:	20c00017 	ldw	r3,0(r4)
 1004e00:	00bc3fc4 	movi	r2,-3841
 1004e04:	1884703a 	and	r2,r3,r2
 1004e08:	10810014 	ori	r2,r2,1024
 1004e0c:	20800015 	stw	r2,0(r4)
 1004e10:	00001f06 	br	1004e90 <Isr_Ep00TxDone+0x204>
		} else if (i == 0) {
 1004e14:	e0bffe8f 	ldh	r2,-6(fp)
 1004e18:	1004c03a 	cmpne	r2,r2,zero
 1004e1c:	10001c1e 	bne	r2,zero,1004e90 <Isr_Ep00TxDone+0x204>
			bD13flags.bits.DCP_state = USBFSM4DCP_HANDSHAKE;
 1004e20:	010040b4 	movhi	r4,258
 1004e24:	213a3104 	addi	r4,r4,-5948
 1004e28:	20c00017 	ldw	r3,0(r4)
 1004e2c:	00bc3fc4 	movi	r2,-3841
 1004e30:	1884703a 	and	r2,r3,r2
 1004e34:	10810014 	ori	r2,r2,1024
 1004e38:	20800015 	stw	r2,0(r4)
			Hal4D13_SingleTransmitEP0(0, 0);
 1004e3c:	0009883a 	mov	r4,zero
 1004e40:	000b883a 	mov	r5,zero
 1004e44:	10043180 	call	1004318 <Hal4D13_SingleTransmitEP0>
		}
		break;
 1004e48:	00001106 	br	1004e90 <Isr_Ep00TxDone+0x204>
	case USBFSM4DCP_STALL:
		break;
	case USBFSM4DCP_DATAOUT:
		break;
	default:
		printf("Fatal Error: Isr_Ep0TxDone Unexpected FSMState=%x\n",
 1004e4c:	008040b4 	movhi	r2,258
 1004e50:	10ba3104 	addi	r2,r2,-5948
 1004e54:	10800017 	ldw	r2,0(r2)
 1004e58:	1004d23a 	srli	r2,r2,8
 1004e5c:	108003cc 	andi	r2,r2,15
 1004e60:	11403fcc 	andi	r5,r2,255
 1004e64:	010040b4 	movhi	r4,258
 1004e68:	21289204 	addi	r4,r4,-23992
 1004e6c:	10061480 	call	1006148 <printf>
				bD13flags.bits.DCP_state);
		bD13flags.bits.DCP_state = USBFSM4DCP_STALL;
 1004e70:	010040b4 	movhi	r4,258
 1004e74:	213a3104 	addi	r4,r4,-5948
 1004e78:	20c00017 	ldw	r3,0(r4)
 1004e7c:	00bc3fc4 	movi	r2,-3841
 1004e80:	1884703a 	and	r2,r3,r2
 1004e84:	1081c014 	ori	r2,r2,1792
 1004e88:	20800015 	stw	r2,0(r4)
		Hal4D13_StallEP0InControlRead();
 1004e8c:	10045040 	call	1004504 <Hal4D13_StallEP0InControlRead>
		break;
	}
}
 1004e90:	e037883a 	mov	sp,fp
 1004e94:	dfc00117 	ldw	ra,4(sp)
 1004e98:	df000017 	ldw	fp,0(sp)
 1004e9c:	dec00204 	addi	sp,sp,8
 1004ea0:	f800283a 	ret

01004ea4 <usb_check_send>:
volatile unsigned char return_buf[4096];
volatile unsigned char * rb_wr_ptr = return_buf;
volatile unsigned char * rb_rd_ptr = return_buf;
volatile int inflight = 0;

void usb_check_send(void * context) {
 1004ea4:	defffa04 	addi	sp,sp,-24
 1004ea8:	dfc00515 	stw	ra,20(sp)
 1004eac:	df000415 	stw	fp,16(sp)
 1004eb0:	df000404 	addi	fp,sp,16
 1004eb4:	e13fff15 	stw	r4,-4(fp)
	while (inflight < 2 && !usb_send_queue_is_empty()) {
 1004eb8:	00001e06 	br	1004f34 <usb_check_send+0x90>
		unsigned char * data;
		unsigned int len;
		usb_send_queue_pop(&data, &len);
 1004ebc:	e13ffd04 	addi	r4,fp,-12
 1004ec0:	e17ffe04 	addi	r5,fp,-8
 1004ec4:	10006a40 	call	10006a4 <usb_send_queue_pop>

		assert(len <= 64);
 1004ec8:	e0bffe17 	ldw	r2,-8(fp)
 1004ecc:	10801070 	cmpltui	r2,r2,65
 1004ed0:	1000081e 	bne	r2,zero,1004ef4 <usb_check_send+0x50>
 1004ed4:	010040b4 	movhi	r4,258
 1004ed8:	2128a304 	addi	r4,r4,-23924
 1004edc:	01403f04 	movi	r5,252
 1004ee0:	018040b4 	movhi	r6,258
 1004ee4:	31a89f04 	addi	r6,r6,-23940
 1004ee8:	01c040b4 	movhi	r7,258
 1004eec:	39e8a704 	addi	r7,r7,-23908
 1004ef0:	10056bc0 	call	10056bc <__assert_func>

		inflight++;
 1004ef4:	d0a7f417 	ldw	r2,-24624(gp)
 1004ef8:	10800044 	addi	r2,r2,1
 1004efc:	d0a7f415 	stw	r2,-24624(gp)
//		printf("EP 2 sending %d bytes\n", len);
		Hal4D13_WriteBulkEndpoint(EPINDEX4EP02, data, len);
 1004f00:	e17ffd17 	ldw	r5,-12(fp)
 1004f04:	e0bffe17 	ldw	r2,-8(fp)
 1004f08:	11bfffcc 	andi	r6,r2,65535
 1004f0c:	010000c4 	movi	r4,3
 1004f10:	1003a9c0 	call	1003a9c <Hal4D13_WriteBulkEndpoint>
		if (data)
 1004f14:	e0bffd17 	ldw	r2,-12(fp)
 1004f18:	1005003a 	cmpeq	r2,r2,zero
 1004f1c:	1000021e 	bne	r2,zero,1004f28 <usb_check_send+0x84>
			free(data);
 1004f20:	e13ffd17 	ldw	r4,-12(fp)
 1004f24:	10058a80 	call	10058a8 <free>

		unsigned char c;
		c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
 1004f28:	010000c4 	movi	r4,3
 1004f2c:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004f30:	e0bffc05 	stb	r2,-16(fp)
volatile unsigned char * rb_wr_ptr = return_buf;
volatile unsigned char * rb_rd_ptr = return_buf;
volatile int inflight = 0;

void usb_check_send(void * context) {
	while (inflight < 2 && !usb_send_queue_is_empty()) {
 1004f34:	d0a7f417 	ldw	r2,-24624(gp)
 1004f38:	10800088 	cmpgei	r2,r2,2
 1004f3c:	1000031e 	bne	r2,zero,1004f4c <usb_check_send+0xa8>
 1004f40:	1000b180 	call	1000b18 <usb_send_queue_is_empty>
 1004f44:	1005003a 	cmpeq	r2,r2,zero
 1004f48:	103fdc1e 	bne	r2,zero,1004ebc <usb_check_send+0x18>

//		printf("cc = %02hhx\n", c);
//		Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
	}
//	printf("Inflight %d, Empty %d\n", inflight, usb_send_queue_is_empty());
}
 1004f4c:	e037883a 	mov	sp,fp
 1004f50:	dfc00117 	ldw	ra,4(sp)
 1004f54:	df000017 	ldw	fp,0(sp)
 1004f58:	dec00204 	addi	sp,sp,8
 1004f5c:	f800283a 	ret

01004f60 <Isr_Ep01Done>:

void Isr_Ep01Done(void) {
 1004f60:	defffc04 	addi	sp,sp,-16
 1004f64:	dfc00315 	stw	ra,12(sp)
 1004f68:	df000215 	stw	fp,8(sp)
 1004f6c:	df000204 	addi	fp,sp,8
//	UCHAR c;
//	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP01);

	unsigned char * buf = calloc(sizeof(unsigned char), 64);
 1004f70:	01000044 	movi	r4,1
 1004f74:	01401004 	movi	r5,64
 1004f78:	10057340 	call	1005734 <calloc>
 1004f7c:	e0bfff15 	stw	r2,-4(fp)

	int recvd = Hal4D13_ReadEndpoint(EPINDEX4EP01, buf, 64);
 1004f80:	01000084 	movi	r4,2
 1004f84:	e17fff17 	ldw	r5,-4(fp)
 1004f88:	01801004 	movi	r6,64
 1004f8c:	10035d40 	call	10035d4 <Hal4D13_ReadEndpoint>
 1004f90:	10bfffcc 	andi	r2,r2,65535
 1004f94:	e0bffe15 	stw	r2,-8(fp)
//	printf("EP 1 received %d bytes\n", recvd);
//	printf("%02hhx %02hhx %02hhx\n", buf[0], buf[1], buf[2]);
//	usleep(10000);
	usb_recv_queue_push(buf, recvd);
 1004f98:	e17ffe17 	ldw	r5,-8(fp)
 1004f9c:	e13fff17 	ldw	r4,-4(fp)
 1004fa0:	10006200 	call	1000620 <usb_recv_queue_push>

	Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP01); /* Clear interrupt flag*/
 1004fa4:	01000084 	movi	r4,2
 1004fa8:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
}
 1004fac:	e037883a 	mov	sp,fp
 1004fb0:	dfc00117 	ldw	ra,4(sp)
 1004fb4:	df000017 	ldw	fp,0(sp)
 1004fb8:	dec00204 	addi	sp,sp,8
 1004fbc:	f800283a 	ret

01004fc0 <Isr_Ep02Done>:

void Isr_Ep02Done(void) {
 1004fc0:	defffd04 	addi	sp,sp,-12
 1004fc4:	dfc00215 	stw	ra,8(sp)
 1004fc8:	df000115 	stw	fp,4(sp)
 1004fcc:	df000104 	addi	fp,sp,4
//	printf("EP 2 sent message\n");
	unsigned char c;
	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);
 1004fd0:	010000c4 	movi	r4,3
 1004fd4:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1004fd8:	e0bfff05 	stb	r2,-4(fp)

//	printf("c = %02hhx\n", c);
	if ((c & 0x40) || (c & 0x20))
 1004fdc:	e0bfff03 	ldbu	r2,-4(fp)
 1004fe0:	1080100c 	andi	r2,r2,64
 1004fe4:	1004c03a 	cmpne	r2,r2,zero
 1004fe8:	1000041e 	bne	r2,zero,1004ffc <Isr_Ep02Done+0x3c>
 1004fec:	e0bfff03 	ldbu	r2,-4(fp)
 1004ff0:	1080080c 	andi	r2,r2,32
 1004ff4:	1005003a 	cmpeq	r2,r2,zero
 1004ff8:	1000031e 	bne	r2,zero,1005008 <Isr_Ep02Done+0x48>
		inflight = 1;
 1004ffc:	00800044 	movi	r2,1
 1005000:	d0a7f415 	stw	r2,-24624(gp)
//	printf("EP 2 sent message\n");
	unsigned char c;
	c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP02);

//	printf("c = %02hhx\n", c);
	if ((c & 0x40) || (c & 0x20))
 1005004:	00000106 	br	100500c <Isr_Ep02Done+0x4c>
		inflight = 1;
	else
		inflight = 0;
 1005008:	d027f415 	stw	zero,-24624(gp)

//	printf("Now inflight: %d\n", inflight);
	usb_check_send(NULL);
 100500c:	0009883a 	mov	r4,zero
 1005010:	1004ea40 	call	1004ea4 <usb_check_send>
}
 1005014:	e037883a 	mov	sp,fp
 1005018:	dfc00117 	ldw	ra,4(sp)
 100501c:	df000017 	ldw	fp,0(sp)
 1005020:	dec00204 	addi	sp,sp,8
 1005024:	f800283a 	ret

01005028 <Isr_Ep03Done>:

void Isr_Ep03Done(void) {
 1005028:	defffd04 	addi	sp,sp,-12
 100502c:	dfc00215 	stw	ra,8(sp)
 1005030:	df000115 	stw	fp,4(sp)
 1005034:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP03); /* Clear interrupt flag*/
 1005038:	01000104 	movi	r4,4
 100503c:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1005040:	e0bfff05 	stb	r2,-4(fp)
}
 1005044:	e037883a 	mov	sp,fp
 1005048:	dfc00117 	ldw	ra,4(sp)
 100504c:	df000017 	ldw	fp,0(sp)
 1005050:	dec00204 	addi	sp,sp,8
 1005054:	f800283a 	ret

01005058 <Isr_Ep04Done>:

void Isr_Ep04Done(void) {
 1005058:	defffd04 	addi	sp,sp,-12
 100505c:	dfc00215 	stw	ra,8(sp)
 1005060:	df000115 	stw	fp,4(sp)
 1005064:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP04); /* Clear interrupt flag*/
 1005068:	01000144 	movi	r4,5
 100506c:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 1005070:	e0bfff05 	stb	r2,-4(fp)
}
 1005074:	e037883a 	mov	sp,fp
 1005078:	dfc00117 	ldw	ra,4(sp)
 100507c:	df000017 	ldw	fp,0(sp)
 1005080:	dec00204 	addi	sp,sp,8
 1005084:	f800283a 	ret

01005088 <Isr_Ep05Done>:

void Isr_Ep05Done(void) {
 1005088:	defefd04 	addi	sp,sp,-1036
 100508c:	dfc10215 	stw	ra,1032(sp)
 1005090:	df010115 	stw	fp,1028(sp)
 1005094:	df010104 	addi	fp,sp,1028
	UCHAR ep_last, DoubleBuff = 1;
 1005098:	00800044 	movi	r2,1
 100509c:	e0beff85 	stb	r2,-1026(fp)
	USHORT ISO_Buffer[512], len;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP05); // Clear interrupt flag
 10050a0:	01000184 	movi	r4,6
 10050a4:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 10050a8:	e0beffc5 	stb	r2,-1025(fp)
	if ((ep_last & (D13REG_EPSTS_DBF0 | D13REG_EPSTS_DBF1)) == 0x00)
 10050ac:	e0beffc3 	ldbu	r2,-1025(fp)
 10050b0:	1080180c 	andi	r2,r2,96
 10050b4:	1004c03a 	cmpne	r2,r2,zero
 10050b8:	1000031e 	bne	r2,zero,10050c8 <Isr_Ep05Done+0x40>
		DoubleBuff = 2;
 10050bc:	00800084 	movi	r2,2
 10050c0:	e0beff85 	stb	r2,-1026(fp)
 10050c4:	00000206 	br	10050d0 <Isr_Ep05Done+0x48>
	else
		DoubleBuff = 1;
 10050c8:	00800044 	movi	r2,1
 10050cc:	e0beff85 	stb	r2,-1026(fp)
				len = Hal4D13_ReadISOEndpoint(EPINDEX4EP05, ISO_Buffer, 512);
				Hal4D13_WriteISOEndpoint(EPINDEX4EP06, ISO_Buffer, len);
			}
		}
	}
}
 10050d0:	e037883a 	mov	sp,fp
 10050d4:	dfc00117 	ldw	ra,4(sp)
 10050d8:	df000017 	ldw	fp,0(sp)
 10050dc:	dec00204 	addi	sp,sp,8
 10050e0:	f800283a 	ret

010050e4 <Isr_Ep06Done>:

void Isr_Ep06Done(void) {
 10050e4:	defffd04 	addi	sp,sp,-12
 10050e8:	dfc00215 	stw	ra,8(sp)
 10050ec:	df000115 	stw	fp,4(sp)
 10050f0:	df000104 	addi	fp,sp,4
	UCHAR ep_last;
	ep_last = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP06); /* Clear interrupt flag*/
 10050f4:	010001c4 	movi	r4,7
 10050f8:	1003d500 	call	1003d50 <Hal4D13_GetEndpointStatusWInteruptClear>
 10050fc:	e0bfff05 	stb	r2,-4(fp)
}
 1005100:	e037883a 	mov	sp,fp
 1005104:	dfc00117 	ldw	ra,4(sp)
 1005108:	df000017 	ldw	fp,0(sp)
 100510c:	dec00204 	addi	sp,sp,8
 1005110:	f800283a 	ret

01005114 <Isr_Ep07Done>:

void Isr_Ep07Done(void) {
 1005114:	deffff04 	addi	sp,sp,-4
 1005118:	df000015 	stw	fp,0(sp)
 100511c:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP07); /* Clear interrupt flag */
}
 1005120:	e037883a 	mov	sp,fp
 1005124:	df000017 	ldw	fp,0(sp)
 1005128:	dec00104 	addi	sp,sp,4
 100512c:	f800283a 	ret

01005130 <Isr_Ep08Done>:
void Isr_Ep08Done(void) {
 1005130:	deffff04 	addi	sp,sp,-4
 1005134:	df000015 	stw	fp,0(sp)
 1005138:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP08); /* Clear interrupt flag */
}
 100513c:	e037883a 	mov	sp,fp
 1005140:	df000017 	ldw	fp,0(sp)
 1005144:	dec00104 	addi	sp,sp,4
 1005148:	f800283a 	ret

0100514c <Isr_Ep09Done>:
void Isr_Ep09Done(void) {
 100514c:	deffff04 	addi	sp,sp,-4
 1005150:	df000015 	stw	fp,0(sp)
 1005154:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP09); /* Clear interrupt flag */
}
 1005158:	e037883a 	mov	sp,fp
 100515c:	df000017 	ldw	fp,0(sp)
 1005160:	dec00104 	addi	sp,sp,4
 1005164:	f800283a 	ret

01005168 <Isr_Ep0ADone>:
void Isr_Ep0ADone(void) {
 1005168:	deffff04 	addi	sp,sp,-4
 100516c:	df000015 	stw	fp,0(sp)
 1005170:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0A); /* Clear interrupt flag */
}
 1005174:	e037883a 	mov	sp,fp
 1005178:	df000017 	ldw	fp,0(sp)
 100517c:	dec00104 	addi	sp,sp,4
 1005180:	f800283a 	ret

01005184 <Isr_Ep0BDone>:
void Isr_Ep0BDone(void) {
 1005184:	deffff04 	addi	sp,sp,-4
 1005188:	df000015 	stw	fp,0(sp)
 100518c:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0B); /* Clear interrupt flag */
}
 1005190:	e037883a 	mov	sp,fp
 1005194:	df000017 	ldw	fp,0(sp)
 1005198:	dec00104 	addi	sp,sp,4
 100519c:	f800283a 	ret

010051a0 <Isr_Ep0CDone>:
void Isr_Ep0CDone(void) {
 10051a0:	deffff04 	addi	sp,sp,-4
 10051a4:	df000015 	stw	fp,0(sp)
 10051a8:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0C); /* Clear interrupt flag */
}
 10051ac:	e037883a 	mov	sp,fp
 10051b0:	df000017 	ldw	fp,0(sp)
 10051b4:	dec00104 	addi	sp,sp,4
 10051b8:	f800283a 	ret

010051bc <Isr_Ep0DDone>:
void Isr_Ep0DDone(void) {
 10051bc:	deffff04 	addi	sp,sp,-4
 10051c0:	df000015 	stw	fp,0(sp)
 10051c4:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0D); /* Clear interrupt flag */
}
 10051c8:	e037883a 	mov	sp,fp
 10051cc:	df000017 	ldw	fp,0(sp)
 10051d0:	dec00104 	addi	sp,sp,4
 10051d4:	f800283a 	ret

010051d8 <Isr_Ep0EDone>:
void Isr_Ep0EDone(void) {
 10051d8:	deffff04 	addi	sp,sp,-4
 10051dc:	df000015 	stw	fp,0(sp)
 10051e0:	d839883a 	mov	fp,sp
//  UCHAR  c;
//  c = Hal4D13_GetEndpointStatusWInteruptClear(EPINDEX4EP0E); /* Clear interrupt flag */
}
 10051e4:	e037883a 	mov	sp,fp
 10051e8:	df000017 	ldw	fp,0(sp)
 10051ec:	dec00104 	addi	sp,sp,4
 10051f0:	f800283a 	ret

010051f4 <usb_fifo_init>:
#include <stdlib.h>
#include <assert.h>



void usb_fifo_init(usb_fifo * fifo) {
 10051f4:	defffe04 	addi	sp,sp,-8
 10051f8:	df000115 	stw	fp,4(sp)
 10051fc:	df000104 	addi	fp,sp,4
 1005200:	e13fff15 	stw	r4,-4(fp)
	fifo->head = NULL;
 1005204:	e0bfff17 	ldw	r2,-4(fp)
 1005208:	10000015 	stw	zero,0(r2)
	fifo->tail = NULL;
 100520c:	e0bfff17 	ldw	r2,-4(fp)
 1005210:	10000115 	stw	zero,4(r2)
}
 1005214:	e037883a 	mov	sp,fp
 1005218:	df000017 	ldw	fp,0(sp)
 100521c:	dec00104 	addi	sp,sp,4
 1005220:	f800283a 	ret

01005224 <usb_fifo_push>:

void usb_fifo_push(usb_fifo * fifo, unsigned char * data, unsigned int len) {
 1005224:	defffa04 	addi	sp,sp,-24
 1005228:	dfc00515 	stw	ra,20(sp)
 100522c:	df000415 	stw	fp,16(sp)
 1005230:	df000404 	addi	fp,sp,16
 1005234:	e13ffd15 	stw	r4,-12(fp)
 1005238:	e17ffe15 	stw	r5,-8(fp)
 100523c:	e1bfff15 	stw	r6,-4(fp)
	usb_packet * new_packet = malloc(sizeof(usb_packet));
 1005240:	01000404 	movi	r4,16
 1005244:	10058bc0 	call	10058bc <malloc>
 1005248:	e0bffc15 	stw	r2,-16(fp)
	assert(new_packet);
 100524c:	e0bffc17 	ldw	r2,-16(fp)
 1005250:	1004c03a 	cmpne	r2,r2,zero
 1005254:	1000081e 	bne	r2,zero,1005278 <usb_fifo_push+0x54>
 1005258:	010040b4 	movhi	r4,258
 100525c:	2128ae04 	addi	r4,r4,-23880
 1005260:	014003c4 	movi	r5,15
 1005264:	018040b4 	movhi	r6,258
 1005268:	31a8aa04 	addi	r6,r6,-23896
 100526c:	01c040b4 	movhi	r7,258
 1005270:	39e8b204 	addi	r7,r7,-23864
 1005274:	10056bc0 	call	10056bc <__assert_func>
	new_packet->len = len;
 1005278:	e0ffff17 	ldw	r3,-4(fp)
 100527c:	e0bffc17 	ldw	r2,-16(fp)
 1005280:	10c00015 	stw	r3,0(r2)
	new_packet->offset = 0;
 1005284:	e0bffc17 	ldw	r2,-16(fp)
 1005288:	10000115 	stw	zero,4(r2)
	new_packet->data = data;
 100528c:	e0fffc17 	ldw	r3,-16(fp)
 1005290:	e0bffe17 	ldw	r2,-8(fp)
 1005294:	18800215 	stw	r2,8(r3)

	new_packet->next = NULL;
 1005298:	e0bffc17 	ldw	r2,-16(fp)
 100529c:	10000315 	stw	zero,12(r2)
	if (! fifo->head)
 10052a0:	e0bffd17 	ldw	r2,-12(fp)
 10052a4:	10800017 	ldw	r2,0(r2)
 10052a8:	1004c03a 	cmpne	r2,r2,zero
 10052ac:	1000031e 	bne	r2,zero,10052bc <usb_fifo_push+0x98>
		fifo->head = new_packet;
 10052b0:	e0fffd17 	ldw	r3,-12(fp)
 10052b4:	e0bffc17 	ldw	r2,-16(fp)
 10052b8:	18800015 	stw	r2,0(r3)
	if (fifo->tail)
 10052bc:	e0bffd17 	ldw	r2,-12(fp)
 10052c0:	10800117 	ldw	r2,4(r2)
 10052c4:	1005003a 	cmpeq	r2,r2,zero
 10052c8:	1000041e 	bne	r2,zero,10052dc <usb_fifo_push+0xb8>
		fifo->tail->next = new_packet;
 10052cc:	e0bffd17 	ldw	r2,-12(fp)
 10052d0:	10c00117 	ldw	r3,4(r2)
 10052d4:	e0bffc17 	ldw	r2,-16(fp)
 10052d8:	18800315 	stw	r2,12(r3)
	fifo->tail = new_packet;
 10052dc:	e0fffd17 	ldw	r3,-12(fp)
 10052e0:	e0bffc17 	ldw	r2,-16(fp)
 10052e4:	18800115 	stw	r2,4(r3)
}
 10052e8:	e037883a 	mov	sp,fp
 10052ec:	dfc00117 	ldw	ra,4(sp)
 10052f0:	df000017 	ldw	fp,0(sp)
 10052f4:	dec00204 	addi	sp,sp,8
 10052f8:	f800283a 	ret

010052fc <usb_fifo_is_empty>:

int usb_fifo_is_empty(usb_fifo * fifo) {
 10052fc:	defffd04 	addi	sp,sp,-12
 1005300:	df000215 	stw	fp,8(sp)
 1005304:	df000204 	addi	fp,sp,8
 1005308:	e13ffe15 	stw	r4,-8(fp)
	if (fifo->head == NULL)
 100530c:	e0bffe17 	ldw	r2,-8(fp)
 1005310:	10800017 	ldw	r2,0(r2)
 1005314:	1004c03a 	cmpne	r2,r2,zero
 1005318:	1000031e 	bne	r2,zero,1005328 <usb_fifo_is_empty+0x2c>
		return 1;
 100531c:	00800044 	movi	r2,1
 1005320:	e0bfff15 	stw	r2,-4(fp)
 1005324:	00000106 	br	100532c <usb_fifo_is_empty+0x30>
	else
		return 0;
 1005328:	e03fff15 	stw	zero,-4(fp)
 100532c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005330:	e037883a 	mov	sp,fp
 1005334:	df000017 	ldw	fp,0(sp)
 1005338:	dec00104 	addi	sp,sp,4
 100533c:	f800283a 	ret

01005340 <usb_fifo_pop>:

void usb_fifo_pop(usb_fifo * fifo, unsigned char ** data, unsigned int * len, unsigned int * offset) {
 1005340:	defff904 	addi	sp,sp,-28
 1005344:	dfc00615 	stw	ra,24(sp)
 1005348:	df000515 	stw	fp,20(sp)
 100534c:	df000504 	addi	fp,sp,20
 1005350:	e13ffc15 	stw	r4,-16(fp)
 1005354:	e17ffd15 	stw	r5,-12(fp)
 1005358:	e1bffe15 	stw	r6,-8(fp)
 100535c:	e1ffff15 	stw	r7,-4(fp)
	if (usb_fifo_is_empty(fifo)) {
 1005360:	e13ffc17 	ldw	r4,-16(fp)
 1005364:	10052fc0 	call	10052fc <usb_fifo_is_empty>
 1005368:	1005003a 	cmpeq	r2,r2,zero
 100536c:	1000071e 	bne	r2,zero,100538c <usb_fifo_pop+0x4c>
		*data = NULL;
 1005370:	e0bffd17 	ldw	r2,-12(fp)
 1005374:	10000015 	stw	zero,0(r2)
		*len = 0;
 1005378:	e0bffe17 	ldw	r2,-8(fp)
 100537c:	10000015 	stw	zero,0(r2)
		*offset = 0;
 1005380:	e0bfff17 	ldw	r2,-4(fp)
 1005384:	10000015 	stw	zero,0(r2)
		return;
 1005388:	00001e06 	br	1005404 <usb_fifo_pop+0xc4>
	}

	usb_packet * packet_removed = fifo->head;
 100538c:	e0bffc17 	ldw	r2,-16(fp)
 1005390:	10800017 	ldw	r2,0(r2)
 1005394:	e0bffb15 	stw	r2,-20(fp)
	fifo->head = fifo->head->next;
 1005398:	e0bffc17 	ldw	r2,-16(fp)
 100539c:	10800017 	ldw	r2,0(r2)
 10053a0:	10c00317 	ldw	r3,12(r2)
 10053a4:	e0bffc17 	ldw	r2,-16(fp)
 10053a8:	10c00015 	stw	r3,0(r2)
	if (! fifo->head)
 10053ac:	e0bffc17 	ldw	r2,-16(fp)
 10053b0:	10800017 	ldw	r2,0(r2)
 10053b4:	1004c03a 	cmpne	r2,r2,zero
 10053b8:	1000021e 	bne	r2,zero,10053c4 <usb_fifo_pop+0x84>
		fifo->tail = NULL;
 10053bc:	e0bffc17 	ldw	r2,-16(fp)
 10053c0:	10000115 	stw	zero,4(r2)

	*data = packet_removed->data;
 10053c4:	e0bffb17 	ldw	r2,-20(fp)
 10053c8:	10c00217 	ldw	r3,8(r2)
 10053cc:	e0bffd17 	ldw	r2,-12(fp)
 10053d0:	10c00015 	stw	r3,0(r2)
	*len = packet_removed->len;
 10053d4:	e0bffb17 	ldw	r2,-20(fp)
 10053d8:	10800017 	ldw	r2,0(r2)
 10053dc:	1007883a 	mov	r3,r2
 10053e0:	e0bffe17 	ldw	r2,-8(fp)
 10053e4:	10c00015 	stw	r3,0(r2)
	*offset = packet_removed->offset;
 10053e8:	e0bffb17 	ldw	r2,-20(fp)
 10053ec:	10800117 	ldw	r2,4(r2)
 10053f0:	1007883a 	mov	r3,r2
 10053f4:	e0bfff17 	ldw	r2,-4(fp)
 10053f8:	10c00015 	stw	r3,0(r2)
	free(packet_removed);
 10053fc:	e13ffb17 	ldw	r4,-20(fp)
 1005400:	10058a80 	call	10058a8 <free>

}
 1005404:	e037883a 	mov	sp,fp
 1005408:	dfc00117 	ldw	ra,4(sp)
 100540c:	df000017 	ldw	fp,0(sp)
 1005410:	dec00204 	addi	sp,sp,8
 1005414:	f800283a 	ret

01005418 <usb_fifo_peek>:

usb_packet * usb_fifo_peek(usb_fifo * fifo) {
 1005418:	defffe04 	addi	sp,sp,-8
 100541c:	df000115 	stw	fp,4(sp)
 1005420:	df000104 	addi	fp,sp,4
 1005424:	e13fff15 	stw	r4,-4(fp)
	return fifo->head;
 1005428:	e0bfff17 	ldw	r2,-4(fp)
 100542c:	10800017 	ldw	r2,0(r2)
}
 1005430:	e037883a 	mov	sp,fp
 1005434:	df000017 	ldw	fp,0(sp)
 1005438:	dec00104 	addi	sp,sp,4
 100543c:	f800283a 	ret

01005440 <make_packet>:
 *  Created on: 2014. 11. 11.
 *      Author: Harry
 */
#include "usbio.h"

packet* make_packet(char client_id, char* data) {
 1005440:	defffb04 	addi	sp,sp,-20
 1005444:	dfc00415 	stw	ra,16(sp)
 1005448:	df000315 	stw	fp,12(sp)
 100544c:	df000304 	addi	fp,sp,12
 1005450:	e17fff15 	stw	r5,-4(fp)
 1005454:	e13ffe05 	stb	r4,-8(fp)
	packet* p = (packet*) malloc(sizeof(packet));
 1005458:	01000204 	movi	r4,8
 100545c:	10058bc0 	call	10058bc <malloc>
 1005460:	e0bffd15 	stw	r2,-12(fp)
	p->client_id = (unsigned char) (client_id & 0xff);
 1005464:	e0fffe03 	ldbu	r3,-8(fp)
 1005468:	00bfffc4 	movi	r2,-1
 100546c:	1884703a 	and	r2,r3,r2
 1005470:	1007883a 	mov	r3,r2
 1005474:	e0bffd17 	ldw	r2,-12(fp)
 1005478:	10c00005 	stb	r3,0(r2)
	p->byte_count = (unsigned char) strlen(data);
 100547c:	e13fff17 	ldw	r4,-4(fp)
 1005480:	10064cc0 	call	10064cc <strlen>
 1005484:	1007883a 	mov	r3,r2
 1005488:	e0bffd17 	ldw	r2,-12(fp)
 100548c:	10c00045 	stb	r3,1(r2)
	strcpy(p->data, data);
 1005490:	e0bffd17 	ldw	r2,-12(fp)
 1005494:	11000117 	ldw	r4,4(r2)
 1005498:	e17fff17 	ldw	r5,-4(fp)
 100549c:	10064400 	call	1006440 <strcpy>
	return p;
 10054a0:	e0bffd17 	ldw	r2,-12(fp)
}
 10054a4:	e037883a 	mov	sp,fp
 10054a8:	dfc00117 	ldw	ra,4(sp)
 10054ac:	df000017 	ldw	fp,0(sp)
 10054b0:	dec00204 	addi	sp,sp,8
 10054b4:	f800283a 	ret

010054b8 <usb_send>:

int usb_send(packet* p) {
 10054b8:	defff904 	addi	sp,sp,-28
 10054bc:	dfc00615 	stw	ra,24(sp)
 10054c0:	df000515 	stw	fp,20(sp)
 10054c4:	dc000415 	stw	r16,16(sp)
 10054c8:	df000404 	addi	fp,sp,16
 10054cc:	e13ffe15 	stw	r4,-8(fp)
	unsigned char length = p->byte_count;
 10054d0:	e0bffe17 	ldw	r2,-8(fp)
 10054d4:	10800043 	ldbu	r2,1(r2)
 10054d8:	e0bffd05 	stb	r2,-12(fp)
	if (length > 100) {
 10054dc:	e0bffd03 	ldbu	r2,-12(fp)
 10054e0:	10801970 	cmpltui	r2,r2,101
 10054e4:	1000031e 	bne	r2,zero,10054f4 <usb_send+0x3c>
		return -1;
 10054e8:	00bfffc4 	movi	r2,-1
 10054ec:	e0bfff15 	stw	r2,-4(fp)
 10054f0:	00001b06 	br	1005560 <usb_send+0xa8>
	}
	usb_device_send(&(p->client_id), 1);
 10054f4:	e13ffe17 	ldw	r4,-8(fp)
 10054f8:	01400044 	movi	r5,1
 10054fc:	10007dc0 	call	10007dc <usb_device_send>
	char* data = calloc(sizeof(unsigned char), length + 1);
 1005500:	e0bffd03 	ldbu	r2,-12(fp)
 1005504:	10800044 	addi	r2,r2,1
 1005508:	100b883a 	mov	r5,r2
 100550c:	01000044 	movi	r4,1
 1005510:	10057340 	call	1005734 <calloc>
 1005514:	e0bffc15 	stw	r2,-16(fp)
	data[0] = length;
 1005518:	e0fffd03 	ldbu	r3,-12(fp)
 100551c:	e0bffc17 	ldw	r2,-16(fp)
 1005520:	10c00005 	stb	r3,0(r2)
	strcpy(data + 1, p->data);
 1005524:	e0bffc17 	ldw	r2,-16(fp)
 1005528:	11000044 	addi	r4,r2,1
 100552c:	e0bffe17 	ldw	r2,-8(fp)
 1005530:	11400117 	ldw	r5,4(r2)
 1005534:	10064400 	call	1006440 <strcpy>
	usb_device_send((unsigned char *) data, (unsigned int) strlen(data));
 1005538:	e43ffc17 	ldw	r16,-16(fp)
 100553c:	e13ffc17 	ldw	r4,-16(fp)
 1005540:	10064cc0 	call	10064cc <strlen>
 1005544:	100b883a 	mov	r5,r2
 1005548:	8009883a 	mov	r4,r16
 100554c:	10007dc0 	call	10007dc <usb_device_send>

	while(!usb_send_queue_is_empty());
 1005550:	1000b180 	call	1000b18 <usb_send_queue_is_empty>
 1005554:	1005003a 	cmpeq	r2,r2,zero
 1005558:	103ffd1e 	bne	r2,zero,1005550 <usb_send+0x98>

//	printf("Sent \"%s\" to device ID %d.\n", p->data, p->client_id);

	return 0;
 100555c:	e03fff15 	stw	zero,-4(fp)
 1005560:	e0bfff17 	ldw	r2,-4(fp)
}
 1005564:	e037883a 	mov	sp,fp
 1005568:	dfc00217 	ldw	ra,8(sp)
 100556c:	df000117 	ldw	fp,4(sp)
 1005570:	dc000017 	ldw	r16,0(sp)
 1005574:	dec00304 	addi	sp,sp,12
 1005578:	f800283a 	ret

0100557c <usb_recv>:

packet* usb_recv() {
 100557c:	defff904 	addi	sp,sp,-28
 1005580:	dfc00615 	stw	ra,24(sp)
 1005584:	df000515 	stw	fp,20(sp)
 1005588:	df000504 	addi	fp,sp,20
	if (usb_recv_queue_is_empty())
 100558c:	1000b440 	call	1000b44 <usb_recv_queue_is_empty>
 1005590:	1005003a 	cmpeq	r2,r2,zero
 1005594:	1000021e 	bne	r2,zero,10055a0 <usb_recv+0x24>
		return NULL;
 1005598:	e03fff15 	stw	zero,-4(fp)
 100559c:	00004106 	br	10056a4 <usb_recv+0x128>
	packet* recv_packet = (packet*) malloc(sizeof(packet));
 10055a0:	01000204 	movi	r4,8
 10055a4:	10058bc0 	call	10058bc <malloc>
 10055a8:	e0bffe15 	stw	r2,-8(fp)
//	recv_packet->client_id = 0;
//	recv_packet->byte_count = 0;
//	strcpy(recv_packet->data, "");
	int total_recvd = 0;
 10055ac:	e03ffd15 	stw	zero,-12(fp)
	int byte_to_recv = 1;
 10055b0:	00800044 	movi	r2,1
 10055b4:	e0bffc15 	stw	r2,-16(fp)
	int bytes_recvd = 0;
 10055b8:	e03ffb15 	stw	zero,-20(fp)

	/**
	 * Get client id.
	 */
	while (total_recvd < 1) {
 10055bc:	00000b06 	br	10055ec <usb_recv+0x70>
		byte_to_recv = usb_device_recv(
 10055c0:	e13ffe17 	ldw	r4,-8(fp)
 10055c4:	01400044 	movi	r5,1
 10055c8:	100090c0 	call	100090c <usb_device_recv>
 10055cc:	e0bffc15 	stw	r2,-16(fp)
				(unsigned char*) &(recv_packet->client_id), 1);
		if (byte_to_recv > 0) {
 10055d0:	e0bffc17 	ldw	r2,-16(fp)
 10055d4:	10800050 	cmplti	r2,r2,1
 10055d8:	1000041e 	bne	r2,zero,10055ec <usb_recv+0x70>
			total_recvd += byte_to_recv;
 10055dc:	e0bffd17 	ldw	r2,-12(fp)
 10055e0:	e0fffc17 	ldw	r3,-16(fp)
 10055e4:	10c5883a 	add	r2,r2,r3
 10055e8:	e0bffd15 	stw	r2,-12(fp)
	int bytes_recvd = 0;

	/**
	 * Get client id.
	 */
	while (total_recvd < 1) {
 10055ec:	e0bffd17 	ldw	r2,-12(fp)
 10055f0:	10800050 	cmplti	r2,r2,1
 10055f4:	103ff21e 	bne	r2,zero,10055c0 <usb_recv+0x44>
		if (byte_to_recv > 0) {
			total_recvd += byte_to_recv;
		}
	}

	total_recvd = 0;
 10055f8:	e03ffd15 	stw	zero,-12(fp)

	/*
	 * Get byte count.
	 */
	while (total_recvd < 1) {
 10055fc:	00000c06 	br	1005630 <usb_recv+0xb4>
		byte_to_recv = usb_device_recv(
 1005600:	e0bffe17 	ldw	r2,-8(fp)
 1005604:	11000044 	addi	r4,r2,1
 1005608:	01400044 	movi	r5,1
 100560c:	100090c0 	call	100090c <usb_device_recv>
 1005610:	e0bffc15 	stw	r2,-16(fp)
				(unsigned char*) &(recv_packet->byte_count), 1);
		if (byte_to_recv > 0) {
 1005614:	e0bffc17 	ldw	r2,-16(fp)
 1005618:	10800050 	cmplti	r2,r2,1
 100561c:	1000041e 	bne	r2,zero,1005630 <usb_recv+0xb4>
			total_recvd += byte_to_recv;
 1005620:	e0bffd17 	ldw	r2,-12(fp)
 1005624:	e0fffc17 	ldw	r3,-16(fp)
 1005628:	10c5883a 	add	r2,r2,r3
 100562c:	e0bffd15 	stw	r2,-12(fp)
	total_recvd = 0;

	/*
	 * Get byte count.
	 */
	while (total_recvd < 1) {
 1005630:	e0bffd17 	ldw	r2,-12(fp)
 1005634:	10800050 	cmplti	r2,r2,1
 1005638:	103ff11e 	bne	r2,zero,1005600 <usb_recv+0x84>
	}

	/**
	 * Receive data via USB
	 */
	byte_to_recv = (int) recv_packet->byte_count;
 100563c:	e0bffe17 	ldw	r2,-8(fp)
 1005640:	10800043 	ldbu	r2,1(r2)
 1005644:	10803fcc 	andi	r2,r2,255
 1005648:	e0bffc15 	stw	r2,-16(fp)
	total_recvd = 0;
 100564c:	e03ffd15 	stw	zero,-12(fp)

	while (total_recvd < byte_to_recv) {
 1005650:	00000f06 	br	1005690 <usb_recv+0x114>
		bytes_recvd = usb_device_recv(
 1005654:	e0bffe17 	ldw	r2,-8(fp)
 1005658:	10c00117 	ldw	r3,4(r2)
 100565c:	e0bffd17 	ldw	r2,-12(fp)
 1005660:	1885883a 	add	r2,r3,r2
 1005664:	1009883a 	mov	r4,r2
 1005668:	01400044 	movi	r5,1
 100566c:	100090c0 	call	100090c <usb_device_recv>
 1005670:	e0bffb15 	stw	r2,-20(fp)
				(unsigned char*) (recv_packet->data + total_recvd), 1);
		if (bytes_recvd > 0)
 1005674:	e0bffb17 	ldw	r2,-20(fp)
 1005678:	10800050 	cmplti	r2,r2,1
 100567c:	1000041e 	bne	r2,zero,1005690 <usb_recv+0x114>
			total_recvd += bytes_recvd;
 1005680:	e0bffd17 	ldw	r2,-12(fp)
 1005684:	e0fffb17 	ldw	r3,-20(fp)
 1005688:	10c5883a 	add	r2,r2,r3
 100568c:	e0bffd15 	stw	r2,-12(fp)
	 * Receive data via USB
	 */
	byte_to_recv = (int) recv_packet->byte_count;
	total_recvd = 0;

	while (total_recvd < byte_to_recv) {
 1005690:	e0fffd17 	ldw	r3,-12(fp)
 1005694:	e0bffc17 	ldw	r2,-16(fp)
 1005698:	18bfee16 	blt	r3,r2,1005654 <usb_recv+0xd8>
				(unsigned char*) (recv_packet->data + total_recvd), 1);
		if (bytes_recvd > 0)
			total_recvd += bytes_recvd;
	}

	return recv_packet;
 100569c:	e0bffe17 	ldw	r2,-8(fp)
 10056a0:	e0bfff15 	stw	r2,-4(fp)
 10056a4:	e0bfff17 	ldw	r2,-4(fp)
}
 10056a8:	e037883a 	mov	sp,fp
 10056ac:	dfc00117 	ldw	ra,4(sp)
 10056b0:	df000017 	ldw	fp,0(sp)
 10056b4:	dec00204 	addi	sp,sp,8
 10056b8:	f800283a 	ret

010056bc <__assert_func>:
 10056bc:	008040b4 	movhi	r2,258
 10056c0:	10b25404 	addi	r2,r2,-14000
 10056c4:	10c00017 	ldw	r3,0(r2)
 10056c8:	defffc04 	addi	sp,sp,-16
 10056cc:	2011883a 	mov	r8,r4
 10056d0:	dfc00315 	stw	ra,12(sp)
 10056d4:	3005883a 	mov	r2,r6
 10056d8:	2813883a 	mov	r9,r5
 10056dc:	19000317 	ldw	r4,12(r3)
 10056e0:	30000b26 	beq	r6,zero,1005710 <__assert_func+0x54>
 10056e4:	00c040b4 	movhi	r3,258
 10056e8:	18e8c104 	addi	r3,r3,-23804
 10056ec:	380d883a 	mov	r6,r7
 10056f0:	014040b4 	movhi	r5,258
 10056f4:	2968b504 	addi	r5,r5,-23852
 10056f8:	400f883a 	mov	r7,r8
 10056fc:	da400015 	stw	r9,0(sp)
 1005700:	d8c00115 	stw	r3,4(sp)
 1005704:	d8800215 	stw	r2,8(sp)
 1005708:	100583c0 	call	100583c <fiprintf>
 100570c:	1009ef40 	call	1009ef4 <abort>
 1005710:	008040b4 	movhi	r2,258
 1005714:	10a8c404 	addi	r2,r2,-23792
 1005718:	1007883a 	mov	r3,r2
 100571c:	003ff306 	br	10056ec <__assert_func+0x30>

01005720 <__assert>:
 1005720:	deffff04 	addi	sp,sp,-4
 1005724:	300f883a 	mov	r7,r6
 1005728:	000d883a 	mov	r6,zero
 100572c:	dfc00015 	stw	ra,0(sp)
 1005730:	10056bc0 	call	10056bc <__assert_func>

01005734 <calloc>:
 1005734:	018040b4 	movhi	r6,258
 1005738:	31b25404 	addi	r6,r6,-14000
 100573c:	2007883a 	mov	r3,r4
 1005740:	31000017 	ldw	r4,0(r6)
 1005744:	280d883a 	mov	r6,r5
 1005748:	180b883a 	mov	r5,r3
 100574c:	10057501 	jmpi	1005750 <_calloc_r>

01005750 <_calloc_r>:
 1005750:	298b383a 	mul	r5,r5,r6
 1005754:	defffe04 	addi	sp,sp,-8
 1005758:	dc000015 	stw	r16,0(sp)
 100575c:	dfc00115 	stw	ra,4(sp)
 1005760:	10058d00 	call	10058d0 <_malloc_r>
 1005764:	1021883a 	mov	r16,r2
 1005768:	01c00904 	movi	r7,36
 100576c:	10000d26 	beq	r2,zero,10057a4 <_calloc_r+0x54>
 1005770:	10ffff17 	ldw	r3,-4(r2)
 1005774:	1009883a 	mov	r4,r2
 1005778:	00bfff04 	movi	r2,-4
 100577c:	1886703a 	and	r3,r3,r2
 1005780:	1887883a 	add	r3,r3,r2
 1005784:	180d883a 	mov	r6,r3
 1005788:	000b883a 	mov	r5,zero
 100578c:	38c01736 	bltu	r7,r3,10057ec <_calloc_r+0x9c>
 1005790:	008004c4 	movi	r2,19
 1005794:	10c00836 	bltu	r2,r3,10057b8 <_calloc_r+0x68>
 1005798:	20000215 	stw	zero,8(r4)
 100579c:	20000015 	stw	zero,0(r4)
 10057a0:	20000115 	stw	zero,4(r4)
 10057a4:	8005883a 	mov	r2,r16
 10057a8:	dfc00117 	ldw	ra,4(sp)
 10057ac:	dc000017 	ldw	r16,0(sp)
 10057b0:	dec00204 	addi	sp,sp,8
 10057b4:	f800283a 	ret
 10057b8:	008006c4 	movi	r2,27
 10057bc:	80000015 	stw	zero,0(r16)
 10057c0:	80000115 	stw	zero,4(r16)
 10057c4:	81000204 	addi	r4,r16,8
 10057c8:	10fff32e 	bgeu	r2,r3,1005798 <_calloc_r+0x48>
 10057cc:	80000215 	stw	zero,8(r16)
 10057d0:	80000315 	stw	zero,12(r16)
 10057d4:	81000404 	addi	r4,r16,16
 10057d8:	19ffef1e 	bne	r3,r7,1005798 <_calloc_r+0x48>
 10057dc:	81000604 	addi	r4,r16,24
 10057e0:	80000415 	stw	zero,16(r16)
 10057e4:	80000515 	stw	zero,20(r16)
 10057e8:	003feb06 	br	1005798 <_calloc_r+0x48>
 10057ec:	10060b00 	call	10060b0 <memset>
 10057f0:	8005883a 	mov	r2,r16
 10057f4:	dfc00117 	ldw	ra,4(sp)
 10057f8:	dc000017 	ldw	r16,0(sp)
 10057fc:	dec00204 	addi	sp,sp,8
 1005800:	f800283a 	ret

01005804 <exit>:
 1005804:	defffe04 	addi	sp,sp,-8
 1005808:	000b883a 	mov	r5,zero
 100580c:	dc000015 	stw	r16,0(sp)
 1005810:	dfc00115 	stw	ra,4(sp)
 1005814:	2021883a 	mov	r16,r4
 1005818:	1009d440 	call	1009d44 <__call_exitprocs>
 100581c:	008040b4 	movhi	r2,258
 1005820:	10b25504 	addi	r2,r2,-13996
 1005824:	11000017 	ldw	r4,0(r2)
 1005828:	20800f17 	ldw	r2,60(r4)
 100582c:	10000126 	beq	r2,zero,1005834 <exit+0x30>
 1005830:	103ee83a 	callr	r2
 1005834:	8009883a 	mov	r4,r16
 1005838:	1015f980 	call	1015f98 <_exit>

0100583c <fiprintf>:
 100583c:	defffc04 	addi	sp,sp,-16
 1005840:	2007883a 	mov	r3,r4
 1005844:	dfc00115 	stw	ra,4(sp)
 1005848:	d9800215 	stw	r6,8(sp)
 100584c:	d9c00315 	stw	r7,12(sp)
 1005850:	018040b4 	movhi	r6,258
 1005854:	31b25404 	addi	r6,r6,-14000
 1005858:	31000017 	ldw	r4,0(r6)
 100585c:	d8800204 	addi	r2,sp,8
 1005860:	280d883a 	mov	r6,r5
 1005864:	100f883a 	mov	r7,r2
 1005868:	180b883a 	mov	r5,r3
 100586c:	d8800015 	stw	r2,0(sp)
 1005870:	10065400 	call	1006540 <_vfiprintf_r>
 1005874:	dfc00117 	ldw	ra,4(sp)
 1005878:	dec00404 	addi	sp,sp,16
 100587c:	f800283a 	ret

01005880 <_fiprintf_r>:
 1005880:	defffd04 	addi	sp,sp,-12
 1005884:	dfc00115 	stw	ra,4(sp)
 1005888:	d9c00215 	stw	r7,8(sp)
 100588c:	d8800204 	addi	r2,sp,8
 1005890:	100f883a 	mov	r7,r2
 1005894:	d8800015 	stw	r2,0(sp)
 1005898:	10065400 	call	1006540 <_vfiprintf_r>
 100589c:	dfc00117 	ldw	ra,4(sp)
 10058a0:	dec00304 	addi	sp,sp,12
 10058a4:	f800283a 	ret

010058a8 <free>:
 10058a8:	008040b4 	movhi	r2,258
 10058ac:	10b25404 	addi	r2,r2,-14000
 10058b0:	200b883a 	mov	r5,r4
 10058b4:	11000017 	ldw	r4,0(r2)
 10058b8:	100bf301 	jmpi	100bf30 <_free_r>

010058bc <malloc>:
 10058bc:	008040b4 	movhi	r2,258
 10058c0:	10b25404 	addi	r2,r2,-14000
 10058c4:	200b883a 	mov	r5,r4
 10058c8:	11000017 	ldw	r4,0(r2)
 10058cc:	10058d01 	jmpi	10058d0 <_malloc_r>

010058d0 <_malloc_r>:
 10058d0:	defff604 	addi	sp,sp,-40
 10058d4:	28c002c4 	addi	r3,r5,11
 10058d8:	00800584 	movi	r2,22
 10058dc:	dc800215 	stw	r18,8(sp)
 10058e0:	dfc00915 	stw	ra,36(sp)
 10058e4:	df000815 	stw	fp,32(sp)
 10058e8:	ddc00715 	stw	r23,28(sp)
 10058ec:	dd800615 	stw	r22,24(sp)
 10058f0:	dd400515 	stw	r21,20(sp)
 10058f4:	dd000415 	stw	r20,16(sp)
 10058f8:	dcc00315 	stw	r19,12(sp)
 10058fc:	dc400115 	stw	r17,4(sp)
 1005900:	dc000015 	stw	r16,0(sp)
 1005904:	2025883a 	mov	r18,r4
 1005908:	10c01236 	bltu	r2,r3,1005954 <_malloc_r+0x84>
 100590c:	04400404 	movi	r17,16
 1005910:	8940142e 	bgeu	r17,r5,1005964 <_malloc_r+0x94>
 1005914:	00800304 	movi	r2,12
 1005918:	0007883a 	mov	r3,zero
 100591c:	90800015 	stw	r2,0(r18)
 1005920:	1805883a 	mov	r2,r3
 1005924:	dfc00917 	ldw	ra,36(sp)
 1005928:	df000817 	ldw	fp,32(sp)
 100592c:	ddc00717 	ldw	r23,28(sp)
 1005930:	dd800617 	ldw	r22,24(sp)
 1005934:	dd400517 	ldw	r21,20(sp)
 1005938:	dd000417 	ldw	r20,16(sp)
 100593c:	dcc00317 	ldw	r19,12(sp)
 1005940:	dc800217 	ldw	r18,8(sp)
 1005944:	dc400117 	ldw	r17,4(sp)
 1005948:	dc000017 	ldw	r16,0(sp)
 100594c:	dec00a04 	addi	sp,sp,40
 1005950:	f800283a 	ret
 1005954:	00bffe04 	movi	r2,-8
 1005958:	18a2703a 	and	r17,r3,r2
 100595c:	883fed16 	blt	r17,zero,1005914 <_malloc_r+0x44>
 1005960:	897fec36 	bltu	r17,r5,1005914 <_malloc_r+0x44>
 1005964:	9009883a 	mov	r4,r18
 1005968:	10168340 	call	1016834 <__malloc_lock>
 100596c:	00807dc4 	movi	r2,503
 1005970:	14402b2e 	bgeu	r2,r17,1005a20 <_malloc_r+0x150>
 1005974:	8806d27a 	srli	r3,r17,9
 1005978:	18003f1e 	bne	r3,zero,1005a78 <_malloc_r+0x1a8>
 100597c:	880cd0fa 	srli	r6,r17,3
 1005980:	300490fa 	slli	r2,r6,3
 1005984:	02c040b4 	movhi	r11,258
 1005988:	5aec4804 	addi	r11,r11,-20192
 100598c:	12cb883a 	add	r5,r2,r11
 1005990:	2c000317 	ldw	r16,12(r5)
 1005994:	580f883a 	mov	r7,r11
 1005998:	2c00041e 	bne	r5,r16,10059ac <_malloc_r+0xdc>
 100599c:	00000a06 	br	10059c8 <_malloc_r+0xf8>
 10059a0:	1800860e 	bge	r3,zero,1005bbc <_malloc_r+0x2ec>
 10059a4:	84000317 	ldw	r16,12(r16)
 10059a8:	2c000726 	beq	r5,r16,10059c8 <_malloc_r+0xf8>
 10059ac:	80800117 	ldw	r2,4(r16)
 10059b0:	00ffff04 	movi	r3,-4
 10059b4:	10c8703a 	and	r4,r2,r3
 10059b8:	2447c83a 	sub	r3,r4,r17
 10059bc:	008003c4 	movi	r2,15
 10059c0:	10fff70e 	bge	r2,r3,10059a0 <_malloc_r+0xd0>
 10059c4:	31bfffc4 	addi	r6,r6,-1
 10059c8:	32400044 	addi	r9,r6,1
 10059cc:	028040b4 	movhi	r10,258
 10059d0:	52ac4a04 	addi	r10,r10,-20184
 10059d4:	54000217 	ldw	r16,8(r10)
 10059d8:	8280a026 	beq	r16,r10,1005c5c <_malloc_r+0x38c>
 10059dc:	80800117 	ldw	r2,4(r16)
 10059e0:	00ffff04 	movi	r3,-4
 10059e4:	10ca703a 	and	r5,r2,r3
 10059e8:	2c4dc83a 	sub	r6,r5,r17
 10059ec:	008003c4 	movi	r2,15
 10059f0:	11808316 	blt	r2,r6,1005c00 <_malloc_r+0x330>
 10059f4:	52800315 	stw	r10,12(r10)
 10059f8:	52800215 	stw	r10,8(r10)
 10059fc:	30002916 	blt	r6,zero,1005aa4 <_malloc_r+0x1d4>
 1005a00:	8147883a 	add	r3,r16,r5
 1005a04:	18800117 	ldw	r2,4(r3)
 1005a08:	9009883a 	mov	r4,r18
 1005a0c:	10800054 	ori	r2,r2,1
 1005a10:	18800115 	stw	r2,4(r3)
 1005a14:	10168540 	call	1016854 <__malloc_unlock>
 1005a18:	80c00204 	addi	r3,r16,8
 1005a1c:	003fc006 	br	1005920 <_malloc_r+0x50>
 1005a20:	02c040b4 	movhi	r11,258
 1005a24:	5aec4804 	addi	r11,r11,-20192
 1005a28:	8ac5883a 	add	r2,r17,r11
 1005a2c:	14000317 	ldw	r16,12(r2)
 1005a30:	580f883a 	mov	r7,r11
 1005a34:	8806d0fa 	srli	r3,r17,3
 1005a38:	14006c26 	beq	r2,r16,1005bec <_malloc_r+0x31c>
 1005a3c:	80c00117 	ldw	r3,4(r16)
 1005a40:	00bfff04 	movi	r2,-4
 1005a44:	81800317 	ldw	r6,12(r16)
 1005a48:	1886703a 	and	r3,r3,r2
 1005a4c:	80c7883a 	add	r3,r16,r3
 1005a50:	18800117 	ldw	r2,4(r3)
 1005a54:	81400217 	ldw	r5,8(r16)
 1005a58:	9009883a 	mov	r4,r18
 1005a5c:	10800054 	ori	r2,r2,1
 1005a60:	18800115 	stw	r2,4(r3)
 1005a64:	31400215 	stw	r5,8(r6)
 1005a68:	29800315 	stw	r6,12(r5)
 1005a6c:	10168540 	call	1016854 <__malloc_unlock>
 1005a70:	80c00204 	addi	r3,r16,8
 1005a74:	003faa06 	br	1005920 <_malloc_r+0x50>
 1005a78:	00800104 	movi	r2,4
 1005a7c:	10c0052e 	bgeu	r2,r3,1005a94 <_malloc_r+0x1c4>
 1005a80:	00800504 	movi	r2,20
 1005a84:	10c07836 	bltu	r2,r3,1005c68 <_malloc_r+0x398>
 1005a88:	198016c4 	addi	r6,r3,91
 1005a8c:	300490fa 	slli	r2,r6,3
 1005a90:	003fbc06 	br	1005984 <_malloc_r+0xb4>
 1005a94:	8804d1ba 	srli	r2,r17,6
 1005a98:	11800e04 	addi	r6,r2,56
 1005a9c:	300490fa 	slli	r2,r6,3
 1005aa0:	003fb806 	br	1005984 <_malloc_r+0xb4>
 1005aa4:	00807fc4 	movi	r2,511
 1005aa8:	1140bb36 	bltu	r2,r5,1005d98 <_malloc_r+0x4c8>
 1005aac:	2806d0fa 	srli	r3,r5,3
 1005ab0:	573ffe04 	addi	fp,r10,-8
 1005ab4:	00800044 	movi	r2,1
 1005ab8:	180890fa 	slli	r4,r3,3
 1005abc:	1807d0ba 	srai	r3,r3,2
 1005ac0:	e1c00117 	ldw	r7,4(fp)
 1005ac4:	5909883a 	add	r4,r11,r4
 1005ac8:	21400217 	ldw	r5,8(r4)
 1005acc:	10c4983a 	sll	r2,r2,r3
 1005ad0:	81000315 	stw	r4,12(r16)
 1005ad4:	81400215 	stw	r5,8(r16)
 1005ad8:	388eb03a 	or	r7,r7,r2
 1005adc:	2c000315 	stw	r16,12(r5)
 1005ae0:	24000215 	stw	r16,8(r4)
 1005ae4:	e1c00115 	stw	r7,4(fp)
 1005ae8:	4807883a 	mov	r3,r9
 1005aec:	4800cd16 	blt	r9,zero,1005e24 <_malloc_r+0x554>
 1005af0:	1807d0ba 	srai	r3,r3,2
 1005af4:	00800044 	movi	r2,1
 1005af8:	10c8983a 	sll	r4,r2,r3
 1005afc:	39004436 	bltu	r7,r4,1005c10 <_malloc_r+0x340>
 1005b00:	21c4703a 	and	r2,r4,r7
 1005b04:	10000a1e 	bne	r2,zero,1005b30 <_malloc_r+0x260>
 1005b08:	2109883a 	add	r4,r4,r4
 1005b0c:	00bfff04 	movi	r2,-4
 1005b10:	4884703a 	and	r2,r9,r2
 1005b14:	3906703a 	and	r3,r7,r4
 1005b18:	12400104 	addi	r9,r2,4
 1005b1c:	1800041e 	bne	r3,zero,1005b30 <_malloc_r+0x260>
 1005b20:	2109883a 	add	r4,r4,r4
 1005b24:	3904703a 	and	r2,r7,r4
 1005b28:	4a400104 	addi	r9,r9,4
 1005b2c:	103ffc26 	beq	r2,zero,1005b20 <_malloc_r+0x250>
 1005b30:	480490fa 	slli	r2,r9,3
 1005b34:	4819883a 	mov	r12,r9
 1005b38:	023fff04 	movi	r8,-4
 1005b3c:	589b883a 	add	r13,r11,r2
 1005b40:	6807883a 	mov	r3,r13
 1005b44:	014003c4 	movi	r5,15
 1005b48:	1c000317 	ldw	r16,12(r3)
 1005b4c:	1c00041e 	bne	r3,r16,1005b60 <_malloc_r+0x290>
 1005b50:	0000a706 	br	1005df0 <_malloc_r+0x520>
 1005b54:	3000ab0e 	bge	r6,zero,1005e04 <_malloc_r+0x534>
 1005b58:	84000317 	ldw	r16,12(r16)
 1005b5c:	1c00a426 	beq	r3,r16,1005df0 <_malloc_r+0x520>
 1005b60:	80800117 	ldw	r2,4(r16)
 1005b64:	1204703a 	and	r2,r2,r8
 1005b68:	144dc83a 	sub	r6,r2,r17
 1005b6c:	29bff90e 	bge	r5,r6,1005b54 <_malloc_r+0x284>
 1005b70:	81000317 	ldw	r4,12(r16)
 1005b74:	80c00217 	ldw	r3,8(r16)
 1005b78:	89400054 	ori	r5,r17,1
 1005b7c:	8445883a 	add	r2,r16,r17
 1005b80:	20c00215 	stw	r3,8(r4)
 1005b84:	19000315 	stw	r4,12(r3)
 1005b88:	81400115 	stw	r5,4(r16)
 1005b8c:	1187883a 	add	r3,r2,r6
 1005b90:	31000054 	ori	r4,r6,1
 1005b94:	50800315 	stw	r2,12(r10)
 1005b98:	50800215 	stw	r2,8(r10)
 1005b9c:	19800015 	stw	r6,0(r3)
 1005ba0:	11000115 	stw	r4,4(r2)
 1005ba4:	12800215 	stw	r10,8(r2)
 1005ba8:	12800315 	stw	r10,12(r2)
 1005bac:	9009883a 	mov	r4,r18
 1005bb0:	10168540 	call	1016854 <__malloc_unlock>
 1005bb4:	80c00204 	addi	r3,r16,8
 1005bb8:	003f5906 	br	1005920 <_malloc_r+0x50>
 1005bbc:	8109883a 	add	r4,r16,r4
 1005bc0:	20800117 	ldw	r2,4(r4)
 1005bc4:	80c00217 	ldw	r3,8(r16)
 1005bc8:	81400317 	ldw	r5,12(r16)
 1005bcc:	10800054 	ori	r2,r2,1
 1005bd0:	20800115 	stw	r2,4(r4)
 1005bd4:	28c00215 	stw	r3,8(r5)
 1005bd8:	19400315 	stw	r5,12(r3)
 1005bdc:	9009883a 	mov	r4,r18
 1005be0:	10168540 	call	1016854 <__malloc_unlock>
 1005be4:	80c00204 	addi	r3,r16,8
 1005be8:	003f4d06 	br	1005920 <_malloc_r+0x50>
 1005bec:	80800204 	addi	r2,r16,8
 1005bf0:	14000317 	ldw	r16,12(r2)
 1005bf4:	143f911e 	bne	r2,r16,1005a3c <_malloc_r+0x16c>
 1005bf8:	1a400084 	addi	r9,r3,2
 1005bfc:	003f7306 	br	10059cc <_malloc_r+0xfc>
 1005c00:	88c00054 	ori	r3,r17,1
 1005c04:	8445883a 	add	r2,r16,r17
 1005c08:	80c00115 	stw	r3,4(r16)
 1005c0c:	003fdf06 	br	1005b8c <_malloc_r+0x2bc>
 1005c10:	e4000217 	ldw	r16,8(fp)
 1005c14:	00bfff04 	movi	r2,-4
 1005c18:	80c00117 	ldw	r3,4(r16)
 1005c1c:	802d883a 	mov	r22,r16
 1005c20:	18aa703a 	and	r21,r3,r2
 1005c24:	ac401636 	bltu	r21,r17,1005c80 <_malloc_r+0x3b0>
 1005c28:	ac49c83a 	sub	r4,r21,r17
 1005c2c:	008003c4 	movi	r2,15
 1005c30:	1100130e 	bge	r2,r4,1005c80 <_malloc_r+0x3b0>
 1005c34:	88800054 	ori	r2,r17,1
 1005c38:	8447883a 	add	r3,r16,r17
 1005c3c:	80800115 	stw	r2,4(r16)
 1005c40:	20800054 	ori	r2,r4,1
 1005c44:	18800115 	stw	r2,4(r3)
 1005c48:	e0c00215 	stw	r3,8(fp)
 1005c4c:	9009883a 	mov	r4,r18
 1005c50:	10168540 	call	1016854 <__malloc_unlock>
 1005c54:	80c00204 	addi	r3,r16,8
 1005c58:	003f3106 	br	1005920 <_malloc_r+0x50>
 1005c5c:	39c00117 	ldw	r7,4(r7)
 1005c60:	573ffe04 	addi	fp,r10,-8
 1005c64:	003fa006 	br	1005ae8 <_malloc_r+0x218>
 1005c68:	00801504 	movi	r2,84
 1005c6c:	10c06736 	bltu	r2,r3,1005e0c <_malloc_r+0x53c>
 1005c70:	8804d33a 	srli	r2,r17,12
 1005c74:	11801b84 	addi	r6,r2,110
 1005c78:	300490fa 	slli	r2,r6,3
 1005c7c:	003f4106 	br	1005984 <_malloc_r+0xb4>
 1005c80:	d0a7f617 	ldw	r2,-24616(gp)
 1005c84:	d0e00e17 	ldw	r3,-32712(gp)
 1005c88:	053fffc4 	movi	r20,-1
 1005c8c:	10800404 	addi	r2,r2,16
 1005c90:	88a7883a 	add	r19,r17,r2
 1005c94:	1d000326 	beq	r3,r20,1005ca4 <_malloc_r+0x3d4>
 1005c98:	98c3ffc4 	addi	r3,r19,4095
 1005c9c:	00bc0004 	movi	r2,-4096
 1005ca0:	18a6703a 	and	r19,r3,r2
 1005ca4:	9009883a 	mov	r4,r18
 1005ca8:	980b883a 	mov	r5,r19
 1005cac:	10062980 	call	1006298 <_sbrk_r>
 1005cb0:	1009883a 	mov	r4,r2
 1005cb4:	15000426 	beq	r2,r20,1005cc8 <_malloc_r+0x3f8>
 1005cb8:	854b883a 	add	r5,r16,r21
 1005cbc:	1029883a 	mov	r20,r2
 1005cc0:	11405a2e 	bgeu	r2,r5,1005e2c <_malloc_r+0x55c>
 1005cc4:	87000c26 	beq	r16,fp,1005cf8 <_malloc_r+0x428>
 1005cc8:	e4000217 	ldw	r16,8(fp)
 1005ccc:	80c00117 	ldw	r3,4(r16)
 1005cd0:	00bfff04 	movi	r2,-4
 1005cd4:	1884703a 	and	r2,r3,r2
 1005cd8:	14400336 	bltu	r2,r17,1005ce8 <_malloc_r+0x418>
 1005cdc:	1449c83a 	sub	r4,r2,r17
 1005ce0:	008003c4 	movi	r2,15
 1005ce4:	113fd316 	blt	r2,r4,1005c34 <_malloc_r+0x364>
 1005ce8:	9009883a 	mov	r4,r18
 1005cec:	10168540 	call	1016854 <__malloc_unlock>
 1005cf0:	0007883a 	mov	r3,zero
 1005cf4:	003f0a06 	br	1005920 <_malloc_r+0x50>
 1005cf8:	05c040b4 	movhi	r23,258
 1005cfc:	bdfa4e04 	addi	r23,r23,-5832
 1005d00:	b8800017 	ldw	r2,0(r23)
 1005d04:	988d883a 	add	r6,r19,r2
 1005d08:	b9800015 	stw	r6,0(r23)
 1005d0c:	d0e00e17 	ldw	r3,-32712(gp)
 1005d10:	00bfffc4 	movi	r2,-1
 1005d14:	18808e26 	beq	r3,r2,1005f50 <_malloc_r+0x680>
 1005d18:	2145c83a 	sub	r2,r4,r5
 1005d1c:	3085883a 	add	r2,r6,r2
 1005d20:	b8800015 	stw	r2,0(r23)
 1005d24:	20c001cc 	andi	r3,r4,7
 1005d28:	18005f1e 	bne	r3,zero,1005ea8 <_malloc_r+0x5d8>
 1005d2c:	000b883a 	mov	r5,zero
 1005d30:	a4c5883a 	add	r2,r20,r19
 1005d34:	1083ffcc 	andi	r2,r2,4095
 1005d38:	00c40004 	movi	r3,4096
 1005d3c:	1887c83a 	sub	r3,r3,r2
 1005d40:	28e7883a 	add	r19,r5,r3
 1005d44:	9009883a 	mov	r4,r18
 1005d48:	980b883a 	mov	r5,r19
 1005d4c:	10062980 	call	1006298 <_sbrk_r>
 1005d50:	1007883a 	mov	r3,r2
 1005d54:	00bfffc4 	movi	r2,-1
 1005d58:	18807a26 	beq	r3,r2,1005f44 <_malloc_r+0x674>
 1005d5c:	1d05c83a 	sub	r2,r3,r20
 1005d60:	9885883a 	add	r2,r19,r2
 1005d64:	10c00054 	ori	r3,r2,1
 1005d68:	b8800017 	ldw	r2,0(r23)
 1005d6c:	a021883a 	mov	r16,r20
 1005d70:	a0c00115 	stw	r3,4(r20)
 1005d74:	9885883a 	add	r2,r19,r2
 1005d78:	b8800015 	stw	r2,0(r23)
 1005d7c:	e5000215 	stw	r20,8(fp)
 1005d80:	b7003626 	beq	r22,fp,1005e5c <_malloc_r+0x58c>
 1005d84:	018003c4 	movi	r6,15
 1005d88:	35404b36 	bltu	r6,r21,1005eb8 <_malloc_r+0x5e8>
 1005d8c:	00800044 	movi	r2,1
 1005d90:	a0800115 	stw	r2,4(r20)
 1005d94:	003fcd06 	br	1005ccc <_malloc_r+0x3fc>
 1005d98:	2808d27a 	srli	r4,r5,9
 1005d9c:	2000371e 	bne	r4,zero,1005e7c <_malloc_r+0x5ac>
 1005da0:	2808d0fa 	srli	r4,r5,3
 1005da4:	200690fa 	slli	r3,r4,3
 1005da8:	1ad1883a 	add	r8,r3,r11
 1005dac:	41800217 	ldw	r6,8(r8)
 1005db0:	41805b26 	beq	r8,r6,1005f20 <_malloc_r+0x650>
 1005db4:	30800117 	ldw	r2,4(r6)
 1005db8:	00ffff04 	movi	r3,-4
 1005dbc:	10c4703a 	and	r2,r2,r3
 1005dc0:	2880022e 	bgeu	r5,r2,1005dcc <_malloc_r+0x4fc>
 1005dc4:	31800217 	ldw	r6,8(r6)
 1005dc8:	41bffa1e 	bne	r8,r6,1005db4 <_malloc_r+0x4e4>
 1005dcc:	32000317 	ldw	r8,12(r6)
 1005dd0:	39c00117 	ldw	r7,4(r7)
 1005dd4:	82000315 	stw	r8,12(r16)
 1005dd8:	81800215 	stw	r6,8(r16)
 1005ddc:	070040b4 	movhi	fp,258
 1005de0:	e72c4804 	addi	fp,fp,-20192
 1005de4:	34000315 	stw	r16,12(r6)
 1005de8:	44000215 	stw	r16,8(r8)
 1005dec:	003f3e06 	br	1005ae8 <_malloc_r+0x218>
 1005df0:	63000044 	addi	r12,r12,1
 1005df4:	608000cc 	andi	r2,r12,3
 1005df8:	10005d26 	beq	r2,zero,1005f70 <_malloc_r+0x6a0>
 1005dfc:	18c00204 	addi	r3,r3,8
 1005e00:	003f5106 	br	1005b48 <_malloc_r+0x278>
 1005e04:	8089883a 	add	r4,r16,r2
 1005e08:	003f6d06 	br	1005bc0 <_malloc_r+0x2f0>
 1005e0c:	00805504 	movi	r2,340
 1005e10:	10c02036 	bltu	r2,r3,1005e94 <_malloc_r+0x5c4>
 1005e14:	8804d3fa 	srli	r2,r17,15
 1005e18:	11801dc4 	addi	r6,r2,119
 1005e1c:	300490fa 	slli	r2,r6,3
 1005e20:	003ed806 	br	1005984 <_malloc_r+0xb4>
 1005e24:	48c000c4 	addi	r3,r9,3
 1005e28:	003f3106 	br	1005af0 <_malloc_r+0x220>
 1005e2c:	05c040b4 	movhi	r23,258
 1005e30:	bdfa4e04 	addi	r23,r23,-5832
 1005e34:	b8800017 	ldw	r2,0(r23)
 1005e38:	988d883a 	add	r6,r19,r2
 1005e3c:	b9800015 	stw	r6,0(r23)
 1005e40:	293fb21e 	bne	r5,r4,1005d0c <_malloc_r+0x43c>
 1005e44:	2083ffcc 	andi	r2,r4,4095
 1005e48:	103fb01e 	bne	r2,zero,1005d0c <_malloc_r+0x43c>
 1005e4c:	e4000217 	ldw	r16,8(fp)
 1005e50:	9d45883a 	add	r2,r19,r21
 1005e54:	10800054 	ori	r2,r2,1
 1005e58:	80800115 	stw	r2,4(r16)
 1005e5c:	b8c00017 	ldw	r3,0(r23)
 1005e60:	d0a7f717 	ldw	r2,-24612(gp)
 1005e64:	10c0012e 	bgeu	r2,r3,1005e6c <_malloc_r+0x59c>
 1005e68:	d0e7f715 	stw	r3,-24612(gp)
 1005e6c:	d0a7f817 	ldw	r2,-24608(gp)
 1005e70:	10ff962e 	bgeu	r2,r3,1005ccc <_malloc_r+0x3fc>
 1005e74:	d0e7f815 	stw	r3,-24608(gp)
 1005e78:	003f9406 	br	1005ccc <_malloc_r+0x3fc>
 1005e7c:	00800104 	movi	r2,4
 1005e80:	11001e36 	bltu	r2,r4,1005efc <_malloc_r+0x62c>
 1005e84:	2804d1ba 	srli	r2,r5,6
 1005e88:	11000e04 	addi	r4,r2,56
 1005e8c:	200690fa 	slli	r3,r4,3
 1005e90:	003fc506 	br	1005da8 <_malloc_r+0x4d8>
 1005e94:	00815504 	movi	r2,1364
 1005e98:	10c01d2e 	bgeu	r2,r3,1005f10 <_malloc_r+0x640>
 1005e9c:	01801f84 	movi	r6,126
 1005ea0:	0080fc04 	movi	r2,1008
 1005ea4:	003eb706 	br	1005984 <_malloc_r+0xb4>
 1005ea8:	00800204 	movi	r2,8
 1005eac:	10cbc83a 	sub	r5,r2,r3
 1005eb0:	2169883a 	add	r20,r4,r5
 1005eb4:	003f9e06 	br	1005d30 <_malloc_r+0x460>
 1005eb8:	00bffe04 	movi	r2,-8
 1005ebc:	a93ffd04 	addi	r4,r21,-12
 1005ec0:	2088703a 	and	r4,r4,r2
 1005ec4:	b10b883a 	add	r5,r22,r4
 1005ec8:	00c00144 	movi	r3,5
 1005ecc:	28c00215 	stw	r3,8(r5)
 1005ed0:	28c00115 	stw	r3,4(r5)
 1005ed4:	b0800117 	ldw	r2,4(r22)
 1005ed8:	1080004c 	andi	r2,r2,1
 1005edc:	2084b03a 	or	r2,r4,r2
 1005ee0:	b0800115 	stw	r2,4(r22)
 1005ee4:	313fdd2e 	bgeu	r6,r4,1005e5c <_malloc_r+0x58c>
 1005ee8:	b1400204 	addi	r5,r22,8
 1005eec:	9009883a 	mov	r4,r18
 1005ef0:	100bf300 	call	100bf30 <_free_r>
 1005ef4:	e4000217 	ldw	r16,8(fp)
 1005ef8:	003fd806 	br	1005e5c <_malloc_r+0x58c>
 1005efc:	00800504 	movi	r2,20
 1005f00:	11001536 	bltu	r2,r4,1005f58 <_malloc_r+0x688>
 1005f04:	210016c4 	addi	r4,r4,91
 1005f08:	200690fa 	slli	r3,r4,3
 1005f0c:	003fa606 	br	1005da8 <_malloc_r+0x4d8>
 1005f10:	8804d4ba 	srli	r2,r17,18
 1005f14:	11801f04 	addi	r6,r2,124
 1005f18:	300490fa 	slli	r2,r6,3
 1005f1c:	003e9906 	br	1005984 <_malloc_r+0xb4>
 1005f20:	2009d0ba 	srai	r4,r4,2
 1005f24:	014040b4 	movhi	r5,258
 1005f28:	296c4804 	addi	r5,r5,-20192
 1005f2c:	00c00044 	movi	r3,1
 1005f30:	28800117 	ldw	r2,4(r5)
 1005f34:	1906983a 	sll	r3,r3,r4
 1005f38:	10c4b03a 	or	r2,r2,r3
 1005f3c:	28800115 	stw	r2,4(r5)
 1005f40:	003fa306 	br	1005dd0 <_malloc_r+0x500>
 1005f44:	0027883a 	mov	r19,zero
 1005f48:	00c00044 	movi	r3,1
 1005f4c:	003f8606 	br	1005d68 <_malloc_r+0x498>
 1005f50:	d1200e15 	stw	r4,-32712(gp)
 1005f54:	003f7306 	br	1005d24 <_malloc_r+0x454>
 1005f58:	00801504 	movi	r2,84
 1005f5c:	11001936 	bltu	r2,r4,1005fc4 <_malloc_r+0x6f4>
 1005f60:	2804d33a 	srli	r2,r5,12
 1005f64:	11001b84 	addi	r4,r2,110
 1005f68:	200690fa 	slli	r3,r4,3
 1005f6c:	003f8e06 	br	1005da8 <_malloc_r+0x4d8>
 1005f70:	480b883a 	mov	r5,r9
 1005f74:	6807883a 	mov	r3,r13
 1005f78:	288000cc 	andi	r2,r5,3
 1005f7c:	18fffe04 	addi	r3,r3,-8
 1005f80:	297fffc4 	addi	r5,r5,-1
 1005f84:	10001526 	beq	r2,zero,1005fdc <_malloc_r+0x70c>
 1005f88:	18800217 	ldw	r2,8(r3)
 1005f8c:	10fffa26 	beq	r2,r3,1005f78 <_malloc_r+0x6a8>
 1005f90:	2109883a 	add	r4,r4,r4
 1005f94:	393f1e36 	bltu	r7,r4,1005c10 <_malloc_r+0x340>
 1005f98:	203f1d26 	beq	r4,zero,1005c10 <_malloc_r+0x340>
 1005f9c:	21c4703a 	and	r2,r4,r7
 1005fa0:	10000226 	beq	r2,zero,1005fac <_malloc_r+0x6dc>
 1005fa4:	6013883a 	mov	r9,r12
 1005fa8:	003ee106 	br	1005b30 <_malloc_r+0x260>
 1005fac:	2109883a 	add	r4,r4,r4
 1005fb0:	3904703a 	and	r2,r7,r4
 1005fb4:	63000104 	addi	r12,r12,4
 1005fb8:	103ffc26 	beq	r2,zero,1005fac <_malloc_r+0x6dc>
 1005fbc:	6013883a 	mov	r9,r12
 1005fc0:	003edb06 	br	1005b30 <_malloc_r+0x260>
 1005fc4:	00805504 	movi	r2,340
 1005fc8:	11000836 	bltu	r2,r4,1005fec <_malloc_r+0x71c>
 1005fcc:	2804d3fa 	srli	r2,r5,15
 1005fd0:	11001dc4 	addi	r4,r2,119
 1005fd4:	200690fa 	slli	r3,r4,3
 1005fd8:	003f7306 	br	1005da8 <_malloc_r+0x4d8>
 1005fdc:	0104303a 	nor	r2,zero,r4
 1005fe0:	388e703a 	and	r7,r7,r2
 1005fe4:	e1c00115 	stw	r7,4(fp)
 1005fe8:	003fe906 	br	1005f90 <_malloc_r+0x6c0>
 1005fec:	00815504 	movi	r2,1364
 1005ff0:	1100032e 	bgeu	r2,r4,1006000 <_malloc_r+0x730>
 1005ff4:	01001f84 	movi	r4,126
 1005ff8:	00c0fc04 	movi	r3,1008
 1005ffc:	003f6a06 	br	1005da8 <_malloc_r+0x4d8>
 1006000:	2804d4ba 	srli	r2,r5,18
 1006004:	11001f04 	addi	r4,r2,124
 1006008:	200690fa 	slli	r3,r4,3
 100600c:	003f6606 	br	1005da8 <_malloc_r+0x4d8>

01006010 <memcpy>:
 1006010:	01c003c4 	movi	r7,15
 1006014:	2007883a 	mov	r3,r4
 1006018:	3980032e 	bgeu	r7,r6,1006028 <memcpy+0x18>
 100601c:	2904b03a 	or	r2,r5,r4
 1006020:	108000cc 	andi	r2,r2,3
 1006024:	10000926 	beq	r2,zero,100604c <memcpy+0x3c>
 1006028:	30000626 	beq	r6,zero,1006044 <memcpy+0x34>
 100602c:	30cd883a 	add	r6,r6,r3
 1006030:	28800003 	ldbu	r2,0(r5)
 1006034:	29400044 	addi	r5,r5,1
 1006038:	18800005 	stb	r2,0(r3)
 100603c:	18c00044 	addi	r3,r3,1
 1006040:	30fffb1e 	bne	r6,r3,1006030 <memcpy+0x20>
 1006044:	2005883a 	mov	r2,r4
 1006048:	f800283a 	ret
 100604c:	3811883a 	mov	r8,r7
 1006050:	200f883a 	mov	r7,r4
 1006054:	28c00017 	ldw	r3,0(r5)
 1006058:	31bffc04 	addi	r6,r6,-16
 100605c:	38c00015 	stw	r3,0(r7)
 1006060:	28800117 	ldw	r2,4(r5)
 1006064:	38800115 	stw	r2,4(r7)
 1006068:	28c00217 	ldw	r3,8(r5)
 100606c:	38c00215 	stw	r3,8(r7)
 1006070:	28800317 	ldw	r2,12(r5)
 1006074:	29400404 	addi	r5,r5,16
 1006078:	38800315 	stw	r2,12(r7)
 100607c:	39c00404 	addi	r7,r7,16
 1006080:	41bff436 	bltu	r8,r6,1006054 <memcpy+0x44>
 1006084:	008000c4 	movi	r2,3
 1006088:	1180072e 	bgeu	r2,r6,10060a8 <memcpy+0x98>
 100608c:	1007883a 	mov	r3,r2
 1006090:	28800017 	ldw	r2,0(r5)
 1006094:	31bfff04 	addi	r6,r6,-4
 1006098:	29400104 	addi	r5,r5,4
 100609c:	38800015 	stw	r2,0(r7)
 10060a0:	39c00104 	addi	r7,r7,4
 10060a4:	19bffa36 	bltu	r3,r6,1006090 <memcpy+0x80>
 10060a8:	3807883a 	mov	r3,r7
 10060ac:	003fde06 	br	1006028 <memcpy+0x18>

010060b0 <memset>:
 10060b0:	008000c4 	movi	r2,3
 10060b4:	29403fcc 	andi	r5,r5,255
 10060b8:	2007883a 	mov	r3,r4
 10060bc:	1180022e 	bgeu	r2,r6,10060c8 <memset+0x18>
 10060c0:	2084703a 	and	r2,r4,r2
 10060c4:	10000826 	beq	r2,zero,10060e8 <memset+0x38>
 10060c8:	30000526 	beq	r6,zero,10060e0 <memset+0x30>
 10060cc:	2805883a 	mov	r2,r5
 10060d0:	30cd883a 	add	r6,r6,r3
 10060d4:	18800005 	stb	r2,0(r3)
 10060d8:	18c00044 	addi	r3,r3,1
 10060dc:	19bffd1e 	bne	r3,r6,10060d4 <memset+0x24>
 10060e0:	2005883a 	mov	r2,r4
 10060e4:	f800283a 	ret
 10060e8:	2804923a 	slli	r2,r5,8
 10060ec:	020003c4 	movi	r8,15
 10060f0:	200f883a 	mov	r7,r4
 10060f4:	2884b03a 	or	r2,r5,r2
 10060f8:	1006943a 	slli	r3,r2,16
 10060fc:	10c6b03a 	or	r3,r2,r3
 1006100:	41800a2e 	bgeu	r8,r6,100612c <memset+0x7c>
 1006104:	4005883a 	mov	r2,r8
 1006108:	31bffc04 	addi	r6,r6,-16
 100610c:	38c00015 	stw	r3,0(r7)
 1006110:	38c00115 	stw	r3,4(r7)
 1006114:	38c00215 	stw	r3,8(r7)
 1006118:	38c00315 	stw	r3,12(r7)
 100611c:	39c00404 	addi	r7,r7,16
 1006120:	11bff936 	bltu	r2,r6,1006108 <memset+0x58>
 1006124:	008000c4 	movi	r2,3
 1006128:	1180052e 	bgeu	r2,r6,1006140 <memset+0x90>
 100612c:	31bfff04 	addi	r6,r6,-4
 1006130:	008000c4 	movi	r2,3
 1006134:	38c00015 	stw	r3,0(r7)
 1006138:	39c00104 	addi	r7,r7,4
 100613c:	11bffb36 	bltu	r2,r6,100612c <memset+0x7c>
 1006140:	3807883a 	mov	r3,r7
 1006144:	003fe006 	br	10060c8 <memset+0x18>

01006148 <printf>:
 1006148:	defffb04 	addi	sp,sp,-20
 100614c:	dfc00115 	stw	ra,4(sp)
 1006150:	d9400215 	stw	r5,8(sp)
 1006154:	d9800315 	stw	r6,12(sp)
 1006158:	d9c00415 	stw	r7,16(sp)
 100615c:	008040b4 	movhi	r2,258
 1006160:	10b25404 	addi	r2,r2,-14000
 1006164:	10c00017 	ldw	r3,0(r2)
 1006168:	200b883a 	mov	r5,r4
 100616c:	d8800204 	addi	r2,sp,8
 1006170:	19000217 	ldw	r4,8(r3)
 1006174:	100d883a 	mov	r6,r2
 1006178:	d8800015 	stw	r2,0(sp)
 100617c:	10084600 	call	1008460 <__vfprintf_internal>
 1006180:	dfc00117 	ldw	ra,4(sp)
 1006184:	dec00504 	addi	sp,sp,20
 1006188:	f800283a 	ret

0100618c <_printf_r>:
 100618c:	defffc04 	addi	sp,sp,-16
 1006190:	dfc00115 	stw	ra,4(sp)
 1006194:	d9800215 	stw	r6,8(sp)
 1006198:	d9c00315 	stw	r7,12(sp)
 100619c:	280d883a 	mov	r6,r5
 10061a0:	21400217 	ldw	r5,8(r4)
 10061a4:	d8c00204 	addi	r3,sp,8
 10061a8:	180f883a 	mov	r7,r3
 10061ac:	d8c00015 	stw	r3,0(sp)
 10061b0:	10065b40 	call	10065b4 <___vfprintf_internal_r>
 10061b4:	dfc00117 	ldw	ra,4(sp)
 10061b8:	dec00404 	addi	sp,sp,16
 10061bc:	f800283a 	ret

010061c0 <putchar>:
 10061c0:	008040b4 	movhi	r2,258
 10061c4:	10b25404 	addi	r2,r2,-14000
 10061c8:	11800017 	ldw	r6,0(r2)
 10061cc:	200b883a 	mov	r5,r4
 10061d0:	3009883a 	mov	r4,r6
 10061d4:	31800217 	ldw	r6,8(r6)
 10061d8:	100dea01 	jmpi	100dea0 <_putc_r>

010061dc <_putchar_r>:
 10061dc:	21800217 	ldw	r6,8(r4)
 10061e0:	100dea01 	jmpi	100dea0 <_putc_r>

010061e4 <_puts_r>:
 10061e4:	defff604 	addi	sp,sp,-40
 10061e8:	dc400715 	stw	r17,28(sp)
 10061ec:	2023883a 	mov	r17,r4
 10061f0:	2809883a 	mov	r4,r5
 10061f4:	dfc00915 	stw	ra,36(sp)
 10061f8:	dcc00815 	stw	r19,32(sp)
 10061fc:	2827883a 	mov	r19,r5
 1006200:	10064cc0 	call	10064cc <strlen>
 1006204:	89400217 	ldw	r5,8(r17)
 1006208:	00c040b4 	movhi	r3,258
 100620c:	18e8c604 	addi	r3,r3,-23784
 1006210:	01c00044 	movi	r7,1
 1006214:	12000044 	addi	r8,r2,1
 1006218:	d8c00515 	stw	r3,20(sp)
 100621c:	d9c00615 	stw	r7,24(sp)
 1006220:	d8c00304 	addi	r3,sp,12
 1006224:	01c00084 	movi	r7,2
 1006228:	8809883a 	mov	r4,r17
 100622c:	d80d883a 	mov	r6,sp
 1006230:	d8c00015 	stw	r3,0(sp)
 1006234:	dcc00315 	stw	r19,12(sp)
 1006238:	da000215 	stw	r8,8(sp)
 100623c:	d9c00115 	stw	r7,4(sp)
 1006240:	d8800415 	stw	r2,16(sp)
 1006244:	100c2440 	call	100c244 <__sfvwrite_r>
 1006248:	00ffffc4 	movi	r3,-1
 100624c:	10000626 	beq	r2,zero,1006268 <_puts_r+0x84>
 1006250:	1805883a 	mov	r2,r3
 1006254:	dfc00917 	ldw	ra,36(sp)
 1006258:	dcc00817 	ldw	r19,32(sp)
 100625c:	dc400717 	ldw	r17,28(sp)
 1006260:	dec00a04 	addi	sp,sp,40
 1006264:	f800283a 	ret
 1006268:	00c00284 	movi	r3,10
 100626c:	1805883a 	mov	r2,r3
 1006270:	dfc00917 	ldw	ra,36(sp)
 1006274:	dcc00817 	ldw	r19,32(sp)
 1006278:	dc400717 	ldw	r17,28(sp)
 100627c:	dec00a04 	addi	sp,sp,40
 1006280:	f800283a 	ret

01006284 <puts>:
 1006284:	008040b4 	movhi	r2,258
 1006288:	10b25404 	addi	r2,r2,-14000
 100628c:	200b883a 	mov	r5,r4
 1006290:	11000017 	ldw	r4,0(r2)
 1006294:	10061e41 	jmpi	10061e4 <_puts_r>

01006298 <_sbrk_r>:
 1006298:	defffd04 	addi	sp,sp,-12
 100629c:	dc000015 	stw	r16,0(sp)
 10062a0:	040040b4 	movhi	r16,258
 10062a4:	843a4204 	addi	r16,r16,-5880
 10062a8:	dc400115 	stw	r17,4(sp)
 10062ac:	80000015 	stw	zero,0(r16)
 10062b0:	2023883a 	mov	r17,r4
 10062b4:	2809883a 	mov	r4,r5
 10062b8:	dfc00215 	stw	ra,8(sp)
 10062bc:	1016a540 	call	1016a54 <sbrk>
 10062c0:	1007883a 	mov	r3,r2
 10062c4:	00bfffc4 	movi	r2,-1
 10062c8:	18800626 	beq	r3,r2,10062e4 <_sbrk_r+0x4c>
 10062cc:	1805883a 	mov	r2,r3
 10062d0:	dfc00217 	ldw	ra,8(sp)
 10062d4:	dc400117 	ldw	r17,4(sp)
 10062d8:	dc000017 	ldw	r16,0(sp)
 10062dc:	dec00304 	addi	sp,sp,12
 10062e0:	f800283a 	ret
 10062e4:	80800017 	ldw	r2,0(r16)
 10062e8:	103ff826 	beq	r2,zero,10062cc <_sbrk_r+0x34>
 10062ec:	88800015 	stw	r2,0(r17)
 10062f0:	1805883a 	mov	r2,r3
 10062f4:	dfc00217 	ldw	ra,8(sp)
 10062f8:	dc400117 	ldw	r17,4(sp)
 10062fc:	dc000017 	ldw	r16,0(sp)
 1006300:	dec00304 	addi	sp,sp,12
 1006304:	f800283a 	ret

01006308 <_scanf_r>:
 1006308:	defffc04 	addi	sp,sp,-16
 100630c:	dfc00115 	stw	ra,4(sp)
 1006310:	d9800215 	stw	r6,8(sp)
 1006314:	d9c00315 	stw	r7,12(sp)
 1006318:	280d883a 	mov	r6,r5
 100631c:	21400117 	ldw	r5,4(r4)
 1006320:	d8c00204 	addi	r3,sp,8
 1006324:	180f883a 	mov	r7,r3
 1006328:	d8c00015 	stw	r3,0(sp)
 100632c:	10084840 	call	1008484 <__svfscanf_r>
 1006330:	dfc00117 	ldw	ra,4(sp)
 1006334:	dec00404 	addi	sp,sp,16
 1006338:	f800283a 	ret

0100633c <scanf>:
 100633c:	defffb04 	addi	sp,sp,-20
 1006340:	dfc00115 	stw	ra,4(sp)
 1006344:	d9400215 	stw	r5,8(sp)
 1006348:	d9800315 	stw	r6,12(sp)
 100634c:	d9c00415 	stw	r7,16(sp)
 1006350:	008040b4 	movhi	r2,258
 1006354:	10b25404 	addi	r2,r2,-14000
 1006358:	11400017 	ldw	r5,0(r2)
 100635c:	200d883a 	mov	r6,r4
 1006360:	d8800204 	addi	r2,sp,8
 1006364:	2809883a 	mov	r4,r5
 1006368:	29400117 	ldw	r5,4(r5)
 100636c:	100f883a 	mov	r7,r2
 1006370:	d8800015 	stw	r2,0(sp)
 1006374:	10084840 	call	1008484 <__svfscanf_r>
 1006378:	dfc00117 	ldw	ra,4(sp)
 100637c:	dec00504 	addi	sp,sp,20
 1006380:	f800283a 	ret

01006384 <strcmp>:
 1006384:	2144b03a 	or	r2,r4,r5
 1006388:	108000cc 	andi	r2,r2,3
 100638c:	10001d1e 	bne	r2,zero,1006404 <strcmp+0x80>
 1006390:	200f883a 	mov	r7,r4
 1006394:	28800017 	ldw	r2,0(r5)
 1006398:	21000017 	ldw	r4,0(r4)
 100639c:	280d883a 	mov	r6,r5
 10063a0:	2080161e 	bne	r4,r2,10063fc <strcmp+0x78>
 10063a4:	023fbff4 	movhi	r8,65279
 10063a8:	423fbfc4 	addi	r8,r8,-257
 10063ac:	2207883a 	add	r3,r4,r8
 10063b0:	01602074 	movhi	r5,32897
 10063b4:	29602004 	addi	r5,r5,-32640
 10063b8:	1946703a 	and	r3,r3,r5
 10063bc:	0104303a 	nor	r2,zero,r4
 10063c0:	10c4703a 	and	r2,r2,r3
 10063c4:	10001c1e 	bne	r2,zero,1006438 <strcmp+0xb4>
 10063c8:	4013883a 	mov	r9,r8
 10063cc:	2811883a 	mov	r8,r5
 10063d0:	00000106 	br	10063d8 <strcmp+0x54>
 10063d4:	1800181e 	bne	r3,zero,1006438 <strcmp+0xb4>
 10063d8:	39c00104 	addi	r7,r7,4
 10063dc:	39000017 	ldw	r4,0(r7)
 10063e0:	31800104 	addi	r6,r6,4
 10063e4:	31400017 	ldw	r5,0(r6)
 10063e8:	2245883a 	add	r2,r4,r9
 10063ec:	1204703a 	and	r2,r2,r8
 10063f0:	0106303a 	nor	r3,zero,r4
 10063f4:	1886703a 	and	r3,r3,r2
 10063f8:	217ff626 	beq	r4,r5,10063d4 <strcmp+0x50>
 10063fc:	3809883a 	mov	r4,r7
 1006400:	300b883a 	mov	r5,r6
 1006404:	20c00007 	ldb	r3,0(r4)
 1006408:	1800051e 	bne	r3,zero,1006420 <strcmp+0x9c>
 100640c:	00000606 	br	1006428 <strcmp+0xa4>
 1006410:	21000044 	addi	r4,r4,1
 1006414:	20c00007 	ldb	r3,0(r4)
 1006418:	29400044 	addi	r5,r5,1
 100641c:	18000226 	beq	r3,zero,1006428 <strcmp+0xa4>
 1006420:	28800007 	ldb	r2,0(r5)
 1006424:	18bffa26 	beq	r3,r2,1006410 <strcmp+0x8c>
 1006428:	20c00003 	ldbu	r3,0(r4)
 100642c:	28800003 	ldbu	r2,0(r5)
 1006430:	1885c83a 	sub	r2,r3,r2
 1006434:	f800283a 	ret
 1006438:	0005883a 	mov	r2,zero
 100643c:	f800283a 	ret

01006440 <strcpy>:
 1006440:	2904b03a 	or	r2,r5,r4
 1006444:	108000cc 	andi	r2,r2,3
 1006448:	10000826 	beq	r2,zero,100646c <strcpy+0x2c>
 100644c:	2007883a 	mov	r3,r4
 1006450:	28800003 	ldbu	r2,0(r5)
 1006454:	29400044 	addi	r5,r5,1
 1006458:	18800005 	stb	r2,0(r3)
 100645c:	18c00044 	addi	r3,r3,1
 1006460:	103ffb1e 	bne	r2,zero,1006450 <strcpy+0x10>
 1006464:	2005883a 	mov	r2,r4
 1006468:	f800283a 	ret
 100646c:	29800017 	ldw	r6,0(r5)
 1006470:	023fbff4 	movhi	r8,65279
 1006474:	423fbfc4 	addi	r8,r8,-257
 1006478:	02a02074 	movhi	r10,32897
 100647c:	52a02004 	addi	r10,r10,-32640
 1006480:	3205883a 	add	r2,r6,r8
 1006484:	0186303a 	nor	r3,zero,r6
 1006488:	10c4703a 	and	r2,r2,r3
 100648c:	1284703a 	and	r2,r2,r10
 1006490:	200f883a 	mov	r7,r4
 1006494:	10000b1e 	bne	r2,zero,10064c4 <strcpy+0x84>
 1006498:	4013883a 	mov	r9,r8
 100649c:	5011883a 	mov	r8,r10
 10064a0:	39800015 	stw	r6,0(r7)
 10064a4:	29400104 	addi	r5,r5,4
 10064a8:	29800017 	ldw	r6,0(r5)
 10064ac:	39c00104 	addi	r7,r7,4
 10064b0:	3245883a 	add	r2,r6,r9
 10064b4:	0186303a 	nor	r3,zero,r6
 10064b8:	10c4703a 	and	r2,r2,r3
 10064bc:	1204703a 	and	r2,r2,r8
 10064c0:	103ff726 	beq	r2,zero,10064a0 <strcpy+0x60>
 10064c4:	3807883a 	mov	r3,r7
 10064c8:	003fe106 	br	1006450 <strcpy+0x10>

010064cc <strlen>:
 10064cc:	208000cc 	andi	r2,r4,3
 10064d0:	2011883a 	mov	r8,r4
 10064d4:	1000161e 	bne	r2,zero,1006530 <strlen+0x64>
 10064d8:	20c00017 	ldw	r3,0(r4)
 10064dc:	017fbff4 	movhi	r5,65279
 10064e0:	297fbfc4 	addi	r5,r5,-257
 10064e4:	01e02074 	movhi	r7,32897
 10064e8:	39e02004 	addi	r7,r7,-32640
 10064ec:	1945883a 	add	r2,r3,r5
 10064f0:	11c4703a 	and	r2,r2,r7
 10064f4:	00c6303a 	nor	r3,zero,r3
 10064f8:	1886703a 	and	r3,r3,r2
 10064fc:	18000c1e 	bne	r3,zero,1006530 <strlen+0x64>
 1006500:	280d883a 	mov	r6,r5
 1006504:	380b883a 	mov	r5,r7
 1006508:	21000104 	addi	r4,r4,4
 100650c:	20800017 	ldw	r2,0(r4)
 1006510:	1187883a 	add	r3,r2,r6
 1006514:	1946703a 	and	r3,r3,r5
 1006518:	0084303a 	nor	r2,zero,r2
 100651c:	10c4703a 	and	r2,r2,r3
 1006520:	103ff926 	beq	r2,zero,1006508 <strlen+0x3c>
 1006524:	20800007 	ldb	r2,0(r4)
 1006528:	10000326 	beq	r2,zero,1006538 <strlen+0x6c>
 100652c:	21000044 	addi	r4,r4,1
 1006530:	20800007 	ldb	r2,0(r4)
 1006534:	103ffd1e 	bne	r2,zero,100652c <strlen+0x60>
 1006538:	2205c83a 	sub	r2,r4,r8
 100653c:	f800283a 	ret

01006540 <_vfiprintf_r>:
 1006540:	defffe04 	addi	sp,sp,-8
 1006544:	dfc00115 	stw	ra,4(sp)
 1006548:	d9c00015 	stw	r7,0(sp)
 100654c:	10112200 	call	1011220 <___vfiprintf_internal_r>
 1006550:	dfc00117 	ldw	ra,4(sp)
 1006554:	dec00204 	addi	sp,sp,8
 1006558:	f800283a 	ret

0100655c <__sprint_r>:
 100655c:	30800217 	ldw	r2,8(r6)
 1006560:	defffe04 	addi	sp,sp,-8
 1006564:	dc000015 	stw	r16,0(sp)
 1006568:	dfc00115 	stw	ra,4(sp)
 100656c:	3021883a 	mov	r16,r6
 1006570:	0007883a 	mov	r3,zero
 1006574:	1000061e 	bne	r2,zero,1006590 <__sprint_r+0x34>
 1006578:	1805883a 	mov	r2,r3
 100657c:	30000115 	stw	zero,4(r6)
 1006580:	dfc00117 	ldw	ra,4(sp)
 1006584:	dc000017 	ldw	r16,0(sp)
 1006588:	dec00204 	addi	sp,sp,8
 100658c:	f800283a 	ret
 1006590:	100c2440 	call	100c244 <__sfvwrite_r>
 1006594:	1007883a 	mov	r3,r2
 1006598:	1805883a 	mov	r2,r3
 100659c:	80000115 	stw	zero,4(r16)
 10065a0:	80000215 	stw	zero,8(r16)
 10065a4:	dfc00117 	ldw	ra,4(sp)
 10065a8:	dc000017 	ldw	r16,0(sp)
 10065ac:	dec00204 	addi	sp,sp,8
 10065b0:	f800283a 	ret

010065b4 <___vfprintf_internal_r>:
 10065b4:	defea404 	addi	sp,sp,-1392
 10065b8:	dd815815 	stw	r22,1376(sp)
 10065bc:	dc015215 	stw	r16,1352(sp)
 10065c0:	d9c15115 	stw	r7,1348(sp)
 10065c4:	dfc15b15 	stw	ra,1388(sp)
 10065c8:	df015a15 	stw	fp,1384(sp)
 10065cc:	ddc15915 	stw	r23,1380(sp)
 10065d0:	dd415715 	stw	r21,1372(sp)
 10065d4:	dd015615 	stw	r20,1368(sp)
 10065d8:	dcc15515 	stw	r19,1364(sp)
 10065dc:	dc815415 	stw	r18,1360(sp)
 10065e0:	dc415315 	stw	r17,1356(sp)
 10065e4:	282d883a 	mov	r22,r5
 10065e8:	3021883a 	mov	r16,r6
 10065ec:	d9014f15 	stw	r4,1340(sp)
 10065f0:	100c8940 	call	100c894 <_localeconv_r>
 10065f4:	10800017 	ldw	r2,0(r2)
 10065f8:	d9c15117 	ldw	r7,1348(sp)
 10065fc:	d8814915 	stw	r2,1316(sp)
 1006600:	d8814f17 	ldw	r2,1340(sp)
 1006604:	10000226 	beq	r2,zero,1006610 <___vfprintf_internal_r+0x5c>
 1006608:	10800e17 	ldw	r2,56(r2)
 100660c:	10020d26 	beq	r2,zero,1006e44 <___vfprintf_internal_r+0x890>
 1006610:	b080030b 	ldhu	r2,12(r22)
 1006614:	1080020c 	andi	r2,r2,8
 1006618:	10020e26 	beq	r2,zero,1006e54 <___vfprintf_internal_r+0x8a0>
 100661c:	b0800417 	ldw	r2,16(r22)
 1006620:	10020c26 	beq	r2,zero,1006e54 <___vfprintf_internal_r+0x8a0>
 1006624:	b200030b 	ldhu	r8,12(r22)
 1006628:	00800284 	movi	r2,10
 100662c:	40c0068c 	andi	r3,r8,26
 1006630:	18802f1e 	bne	r3,r2,10066f0 <___vfprintf_internal_r+0x13c>
 1006634:	b080038f 	ldh	r2,14(r22)
 1006638:	10002d16 	blt	r2,zero,10066f0 <___vfprintf_internal_r+0x13c>
 100663c:	b240038b 	ldhu	r9,14(r22)
 1006640:	b2800717 	ldw	r10,28(r22)
 1006644:	b2c00917 	ldw	r11,36(r22)
 1006648:	d9014f17 	ldw	r4,1340(sp)
 100664c:	dc402904 	addi	r17,sp,164
 1006650:	d8804004 	addi	r2,sp,256
 1006654:	00c10004 	movi	r3,1024
 1006658:	423fff4c 	andi	r8,r8,65533
 100665c:	800d883a 	mov	r6,r16
 1006660:	880b883a 	mov	r5,r17
 1006664:	da002c0d 	sth	r8,176(sp)
 1006668:	da402c8d 	sth	r9,178(sp)
 100666c:	da803015 	stw	r10,192(sp)
 1006670:	dac03215 	stw	r11,200(sp)
 1006674:	d8802d15 	stw	r2,180(sp)
 1006678:	d8c02e15 	stw	r3,184(sp)
 100667c:	d8802915 	stw	r2,164(sp)
 1006680:	d8c02b15 	stw	r3,172(sp)
 1006684:	d8002f15 	stw	zero,188(sp)
 1006688:	10065b40 	call	10065b4 <___vfprintf_internal_r>
 100668c:	d8814b15 	stw	r2,1324(sp)
 1006690:	10000416 	blt	r2,zero,10066a4 <___vfprintf_internal_r+0xf0>
 1006694:	d9014f17 	ldw	r4,1340(sp)
 1006698:	880b883a 	mov	r5,r17
 100669c:	100b6d80 	call	100b6d8 <_fflush_r>
 10066a0:	1002321e 	bne	r2,zero,1006f6c <___vfprintf_internal_r+0x9b8>
 10066a4:	d8802c0b 	ldhu	r2,176(sp)
 10066a8:	1080100c 	andi	r2,r2,64
 10066ac:	10000326 	beq	r2,zero,10066bc <___vfprintf_internal_r+0x108>
 10066b0:	b080030b 	ldhu	r2,12(r22)
 10066b4:	10801014 	ori	r2,r2,64
 10066b8:	b080030d 	sth	r2,12(r22)
 10066bc:	d8814b17 	ldw	r2,1324(sp)
 10066c0:	dfc15b17 	ldw	ra,1388(sp)
 10066c4:	df015a17 	ldw	fp,1384(sp)
 10066c8:	ddc15917 	ldw	r23,1380(sp)
 10066cc:	dd815817 	ldw	r22,1376(sp)
 10066d0:	dd415717 	ldw	r21,1372(sp)
 10066d4:	dd015617 	ldw	r20,1368(sp)
 10066d8:	dcc15517 	ldw	r19,1364(sp)
 10066dc:	dc815417 	ldw	r18,1360(sp)
 10066e0:	dc415317 	ldw	r17,1356(sp)
 10066e4:	dc015217 	ldw	r16,1352(sp)
 10066e8:	dec15c04 	addi	sp,sp,1392
 10066ec:	f800283a 	ret
 10066f0:	0005883a 	mov	r2,zero
 10066f4:	0007883a 	mov	r3,zero
 10066f8:	dd401904 	addi	r21,sp,100
 10066fc:	d8814215 	stw	r2,1288(sp)
 1006700:	802f883a 	mov	r23,r16
 1006704:	d8c14315 	stw	r3,1292(sp)
 1006708:	d8014b15 	stw	zero,1324(sp)
 100670c:	d8014815 	stw	zero,1312(sp)
 1006710:	d8014415 	stw	zero,1296(sp)
 1006714:	d8014715 	stw	zero,1308(sp)
 1006718:	dd400c15 	stw	r21,48(sp)
 100671c:	d8000e15 	stw	zero,56(sp)
 1006720:	d8000d15 	stw	zero,52(sp)
 1006724:	b8800007 	ldb	r2,0(r23)
 1006728:	10001926 	beq	r2,zero,1006790 <___vfprintf_internal_r+0x1dc>
 100672c:	00c00944 	movi	r3,37
 1006730:	10c01726 	beq	r2,r3,1006790 <___vfprintf_internal_r+0x1dc>
 1006734:	b821883a 	mov	r16,r23
 1006738:	00000106 	br	1006740 <___vfprintf_internal_r+0x18c>
 100673c:	10c00326 	beq	r2,r3,100674c <___vfprintf_internal_r+0x198>
 1006740:	84000044 	addi	r16,r16,1
 1006744:	80800007 	ldb	r2,0(r16)
 1006748:	103ffc1e 	bne	r2,zero,100673c <___vfprintf_internal_r+0x188>
 100674c:	85e7c83a 	sub	r19,r16,r23
 1006750:	98000e26 	beq	r19,zero,100678c <___vfprintf_internal_r+0x1d8>
 1006754:	dc800e17 	ldw	r18,56(sp)
 1006758:	dc400d17 	ldw	r17,52(sp)
 100675c:	008001c4 	movi	r2,7
 1006760:	94e5883a 	add	r18,r18,r19
 1006764:	8c400044 	addi	r17,r17,1
 1006768:	adc00015 	stw	r23,0(r21)
 100676c:	dc800e15 	stw	r18,56(sp)
 1006770:	acc00115 	stw	r19,4(r21)
 1006774:	dc400d15 	stw	r17,52(sp)
 1006778:	14428b16 	blt	r2,r17,10071a8 <___vfprintf_internal_r+0xbf4>
 100677c:	ad400204 	addi	r21,r21,8
 1006780:	d9014b17 	ldw	r4,1324(sp)
 1006784:	24c9883a 	add	r4,r4,r19
 1006788:	d9014b15 	stw	r4,1324(sp)
 100678c:	802f883a 	mov	r23,r16
 1006790:	b8800007 	ldb	r2,0(r23)
 1006794:	10013c26 	beq	r2,zero,1006c88 <___vfprintf_internal_r+0x6d4>
 1006798:	bdc00044 	addi	r23,r23,1
 100679c:	d8000405 	stb	zero,16(sp)
 10067a0:	b8c00007 	ldb	r3,0(r23)
 10067a4:	04ffffc4 	movi	r19,-1
 10067a8:	d8014c15 	stw	zero,1328(sp)
 10067ac:	d8014a15 	stw	zero,1320(sp)
 10067b0:	d8c14d15 	stw	r3,1332(sp)
 10067b4:	bdc00044 	addi	r23,r23,1
 10067b8:	d9414d17 	ldw	r5,1332(sp)
 10067bc:	00801604 	movi	r2,88
 10067c0:	28fff804 	addi	r3,r5,-32
 10067c4:	10c06036 	bltu	r2,r3,1006948 <___vfprintf_internal_r+0x394>
 10067c8:	18c5883a 	add	r2,r3,r3
 10067cc:	1085883a 	add	r2,r2,r2
 10067d0:	00c04034 	movhi	r3,256
 10067d4:	18d9f904 	addi	r3,r3,26596
 10067d8:	10c5883a 	add	r2,r2,r3
 10067dc:	11000017 	ldw	r4,0(r2)
 10067e0:	2000683a 	jmp	r4
 10067e4:	01007758 	cmpnei	r4,zero,477
 10067e8:	01006948 	cmpgei	r4,zero,421
 10067ec:	01006948 	cmpgei	r4,zero,421
 10067f0:	01007744 	movi	r4,477
 10067f4:	01006948 	cmpgei	r4,zero,421
 10067f8:	01006948 	cmpgei	r4,zero,421
 10067fc:	01006948 	cmpgei	r4,zero,421
 1006800:	01006948 	cmpgei	r4,zero,421
 1006804:	01006948 	cmpgei	r4,zero,421
 1006808:	01006948 	cmpgei	r4,zero,421
 100680c:	01007524 	muli	r4,zero,468
 1006810:	01007734 	movhi	r4,476
 1006814:	01006948 	cmpgei	r4,zero,421
 1006818:	0100753c 	xorhi	r4,zero,468
 100681c:	010077d0 	cmplti	r4,zero,479
 1006820:	01006948 	cmpgei	r4,zero,421
 1006824:	010077bc 	xorhi	r4,zero,478
 1006828:	01007784 	movi	r4,478
 100682c:	01007784 	movi	r4,478
 1006830:	01007784 	movi	r4,478
 1006834:	01007784 	movi	r4,478
 1006838:	01007784 	movi	r4,478
 100683c:	01007784 	movi	r4,478
 1006840:	01007784 	movi	r4,478
 1006844:	01007784 	movi	r4,478
 1006848:	01007784 	movi	r4,478
 100684c:	01006948 	cmpgei	r4,zero,421
 1006850:	01006948 	cmpgei	r4,zero,421
 1006854:	01006948 	cmpgei	r4,zero,421
 1006858:	01006948 	cmpgei	r4,zero,421
 100685c:	01006948 	cmpgei	r4,zero,421
 1006860:	01006948 	cmpgei	r4,zero,421
 1006864:	01006948 	cmpgei	r4,zero,421
 1006868:	01006948 	cmpgei	r4,zero,421
 100686c:	01006948 	cmpgei	r4,zero,421
 1006870:	01006948 	cmpgei	r4,zero,421
 1006874:	01006fa0 	cmpeqi	r4,zero,446
 1006878:	0100760c 	andi	r4,zero,472
 100687c:	01006948 	cmpgei	r4,zero,421
 1006880:	0100760c 	andi	r4,zero,472
 1006884:	01006948 	cmpgei	r4,zero,421
 1006888:	01006948 	cmpgei	r4,zero,421
 100688c:	01006948 	cmpgei	r4,zero,421
 1006890:	01006948 	cmpgei	r4,zero,421
 1006894:	01007770 	cmpltui	r4,zero,477
 1006898:	01006948 	cmpgei	r4,zero,421
 100689c:	01006948 	cmpgei	r4,zero,421
 10068a0:	01007054 	movui	r4,449
 10068a4:	01006948 	cmpgei	r4,zero,421
 10068a8:	01006948 	cmpgei	r4,zero,421
 10068ac:	01006948 	cmpgei	r4,zero,421
 10068b0:	01006948 	cmpgei	r4,zero,421
 10068b4:	01006948 	cmpgei	r4,zero,421
 10068b8:	010070a0 	cmpeqi	r4,zero,450
 10068bc:	01006948 	cmpgei	r4,zero,421
 10068c0:	01006948 	cmpgei	r4,zero,421
 10068c4:	010076c0 	call	10076c <__alt_mem_onchip+0x10076c>
 10068c8:	01006948 	cmpgei	r4,zero,421
 10068cc:	01006948 	cmpgei	r4,zero,421
 10068d0:	01006948 	cmpgei	r4,zero,421
 10068d4:	01006948 	cmpgei	r4,zero,421
 10068d8:	01006948 	cmpgei	r4,zero,421
 10068dc:	01006948 	cmpgei	r4,zero,421
 10068e0:	01006948 	cmpgei	r4,zero,421
 10068e4:	01006948 	cmpgei	r4,zero,421
 10068e8:	01006948 	cmpgei	r4,zero,421
 10068ec:	01006948 	cmpgei	r4,zero,421
 10068f0:	01007694 	movui	r4,474
 10068f4:	01006fac 	andhi	r4,zero,446
 10068f8:	0100760c 	andi	r4,zero,472
 10068fc:	0100760c 	andi	r4,zero,472
 1006900:	0100760c 	andi	r4,zero,472
 1006904:	010075f8 	rdprs	r4,zero,471
 1006908:	01006fac 	andhi	r4,zero,446
 100690c:	01006948 	cmpgei	r4,zero,421
 1006910:	01006948 	cmpgei	r4,zero,421
 1006914:	01007580 	call	100758 <__alt_mem_onchip+0x100758>
 1006918:	01006948 	cmpgei	r4,zero,421
 100691c:	01007550 	cmplti	r4,zero,469
 1006920:	01007060 	cmpeqi	r4,zero,449
 1006924:	010075b0 	cmpltui	r4,zero,470
 1006928:	0100759c 	xori	r4,zero,470
 100692c:	01006948 	cmpgei	r4,zero,421
 1006930:	0100782c 	andhi	r4,zero,480
 1006934:	01006948 	cmpgei	r4,zero,421
 1006938:	010070ac 	andhi	r4,zero,450
 100693c:	01006948 	cmpgei	r4,zero,421
 1006940:	01006948 	cmpgei	r4,zero,421
 1006944:	01007724 	muli	r4,zero,476
 1006948:	d9014d17 	ldw	r4,1332(sp)
 100694c:	2000ce26 	beq	r4,zero,1006c88 <___vfprintf_internal_r+0x6d4>
 1006950:	01400044 	movi	r5,1
 1006954:	d9800f04 	addi	r6,sp,60
 1006958:	d9c14015 	stw	r7,1280(sp)
 100695c:	d9414515 	stw	r5,1300(sp)
 1006960:	d9814115 	stw	r6,1284(sp)
 1006964:	280f883a 	mov	r7,r5
 1006968:	d9000f05 	stb	r4,60(sp)
 100696c:	d8000405 	stb	zero,16(sp)
 1006970:	d8014615 	stw	zero,1304(sp)
 1006974:	d8c14c17 	ldw	r3,1328(sp)
 1006978:	1880008c 	andi	r2,r3,2
 100697c:	1005003a 	cmpeq	r2,r2,zero
 1006980:	d8815015 	stw	r2,1344(sp)
 1006984:	1000031e 	bne	r2,zero,1006994 <___vfprintf_internal_r+0x3e0>
 1006988:	d9014517 	ldw	r4,1300(sp)
 100698c:	21000084 	addi	r4,r4,2
 1006990:	d9014515 	stw	r4,1300(sp)
 1006994:	d9414c17 	ldw	r5,1328(sp)
 1006998:	2940210c 	andi	r5,r5,132
 100699c:	d9414e15 	stw	r5,1336(sp)
 10069a0:	28002d1e 	bne	r5,zero,1006a58 <___vfprintf_internal_r+0x4a4>
 10069a4:	d9814a17 	ldw	r6,1320(sp)
 10069a8:	d8814517 	ldw	r2,1300(sp)
 10069ac:	30a1c83a 	sub	r16,r6,r2
 10069b0:	0400290e 	bge	zero,r16,1006a58 <___vfprintf_internal_r+0x4a4>
 10069b4:	00800404 	movi	r2,16
 10069b8:	1404580e 	bge	r2,r16,1007b1c <___vfprintf_internal_r+0x1568>
 10069bc:	dc800e17 	ldw	r18,56(sp)
 10069c0:	dc400d17 	ldw	r17,52(sp)
 10069c4:	1027883a 	mov	r19,r2
 10069c8:	070040b4 	movhi	fp,258
 10069cc:	e728e284 	addi	fp,fp,-23670
 10069d0:	050001c4 	movi	r20,7
 10069d4:	00000306 	br	10069e4 <___vfprintf_internal_r+0x430>
 10069d8:	843ffc04 	addi	r16,r16,-16
 10069dc:	ad400204 	addi	r21,r21,8
 10069e0:	9c00130e 	bge	r19,r16,1006a30 <___vfprintf_internal_r+0x47c>
 10069e4:	94800404 	addi	r18,r18,16
 10069e8:	8c400044 	addi	r17,r17,1
 10069ec:	af000015 	stw	fp,0(r21)
 10069f0:	acc00115 	stw	r19,4(r21)
 10069f4:	dc800e15 	stw	r18,56(sp)
 10069f8:	dc400d15 	stw	r17,52(sp)
 10069fc:	a47ff60e 	bge	r20,r17,10069d8 <___vfprintf_internal_r+0x424>
 1006a00:	d9014f17 	ldw	r4,1340(sp)
 1006a04:	b00b883a 	mov	r5,r22
 1006a08:	d9800c04 	addi	r6,sp,48
 1006a0c:	d9c15115 	stw	r7,1348(sp)
 1006a10:	100655c0 	call	100655c <__sprint_r>
 1006a14:	d9c15117 	ldw	r7,1348(sp)
 1006a18:	10009e1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006a1c:	843ffc04 	addi	r16,r16,-16
 1006a20:	dc800e17 	ldw	r18,56(sp)
 1006a24:	dc400d17 	ldw	r17,52(sp)
 1006a28:	dd401904 	addi	r21,sp,100
 1006a2c:	9c3fed16 	blt	r19,r16,10069e4 <___vfprintf_internal_r+0x430>
 1006a30:	9425883a 	add	r18,r18,r16
 1006a34:	8c400044 	addi	r17,r17,1
 1006a38:	008001c4 	movi	r2,7
 1006a3c:	af000015 	stw	fp,0(r21)
 1006a40:	ac000115 	stw	r16,4(r21)
 1006a44:	dc800e15 	stw	r18,56(sp)
 1006a48:	dc400d15 	stw	r17,52(sp)
 1006a4c:	1441f516 	blt	r2,r17,1007224 <___vfprintf_internal_r+0xc70>
 1006a50:	ad400204 	addi	r21,r21,8
 1006a54:	00000206 	br	1006a60 <___vfprintf_internal_r+0x4ac>
 1006a58:	dc800e17 	ldw	r18,56(sp)
 1006a5c:	dc400d17 	ldw	r17,52(sp)
 1006a60:	d8800407 	ldb	r2,16(sp)
 1006a64:	10000b26 	beq	r2,zero,1006a94 <___vfprintf_internal_r+0x4e0>
 1006a68:	00800044 	movi	r2,1
 1006a6c:	94800044 	addi	r18,r18,1
 1006a70:	8c400044 	addi	r17,r17,1
 1006a74:	a8800115 	stw	r2,4(r21)
 1006a78:	d8c00404 	addi	r3,sp,16
 1006a7c:	008001c4 	movi	r2,7
 1006a80:	a8c00015 	stw	r3,0(r21)
 1006a84:	dc800e15 	stw	r18,56(sp)
 1006a88:	dc400d15 	stw	r17,52(sp)
 1006a8c:	1441da16 	blt	r2,r17,10071f8 <___vfprintf_internal_r+0xc44>
 1006a90:	ad400204 	addi	r21,r21,8
 1006a94:	d9015017 	ldw	r4,1344(sp)
 1006a98:	20000b1e 	bne	r4,zero,1006ac8 <___vfprintf_internal_r+0x514>
 1006a9c:	d8800444 	addi	r2,sp,17
 1006aa0:	94800084 	addi	r18,r18,2
 1006aa4:	8c400044 	addi	r17,r17,1
 1006aa8:	a8800015 	stw	r2,0(r21)
 1006aac:	00c00084 	movi	r3,2
 1006ab0:	008001c4 	movi	r2,7
 1006ab4:	a8c00115 	stw	r3,4(r21)
 1006ab8:	dc800e15 	stw	r18,56(sp)
 1006abc:	dc400d15 	stw	r17,52(sp)
 1006ac0:	1441c216 	blt	r2,r17,10071cc <___vfprintf_internal_r+0xc18>
 1006ac4:	ad400204 	addi	r21,r21,8
 1006ac8:	d9414e17 	ldw	r5,1336(sp)
 1006acc:	00802004 	movi	r2,128
 1006ad0:	2880b126 	beq	r5,r2,1006d98 <___vfprintf_internal_r+0x7e4>
 1006ad4:	d8c14617 	ldw	r3,1304(sp)
 1006ad8:	19e1c83a 	sub	r16,r3,r7
 1006adc:	0400260e 	bge	zero,r16,1006b78 <___vfprintf_internal_r+0x5c4>
 1006ae0:	00800404 	movi	r2,16
 1006ae4:	1403c90e 	bge	r2,r16,1007a0c <___vfprintf_internal_r+0x1458>
 1006ae8:	1027883a 	mov	r19,r2
 1006aec:	070040b4 	movhi	fp,258
 1006af0:	e728de84 	addi	fp,fp,-23686
 1006af4:	050001c4 	movi	r20,7
 1006af8:	00000306 	br	1006b08 <___vfprintf_internal_r+0x554>
 1006afc:	843ffc04 	addi	r16,r16,-16
 1006b00:	ad400204 	addi	r21,r21,8
 1006b04:	9c00130e 	bge	r19,r16,1006b54 <___vfprintf_internal_r+0x5a0>
 1006b08:	94800404 	addi	r18,r18,16
 1006b0c:	8c400044 	addi	r17,r17,1
 1006b10:	af000015 	stw	fp,0(r21)
 1006b14:	acc00115 	stw	r19,4(r21)
 1006b18:	dc800e15 	stw	r18,56(sp)
 1006b1c:	dc400d15 	stw	r17,52(sp)
 1006b20:	a47ff60e 	bge	r20,r17,1006afc <___vfprintf_internal_r+0x548>
 1006b24:	d9014f17 	ldw	r4,1340(sp)
 1006b28:	b00b883a 	mov	r5,r22
 1006b2c:	d9800c04 	addi	r6,sp,48
 1006b30:	d9c15115 	stw	r7,1348(sp)
 1006b34:	100655c0 	call	100655c <__sprint_r>
 1006b38:	d9c15117 	ldw	r7,1348(sp)
 1006b3c:	1000551e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006b40:	843ffc04 	addi	r16,r16,-16
 1006b44:	dc800e17 	ldw	r18,56(sp)
 1006b48:	dc400d17 	ldw	r17,52(sp)
 1006b4c:	dd401904 	addi	r21,sp,100
 1006b50:	9c3fed16 	blt	r19,r16,1006b08 <___vfprintf_internal_r+0x554>
 1006b54:	9425883a 	add	r18,r18,r16
 1006b58:	8c400044 	addi	r17,r17,1
 1006b5c:	008001c4 	movi	r2,7
 1006b60:	af000015 	stw	fp,0(r21)
 1006b64:	ac000115 	stw	r16,4(r21)
 1006b68:	dc800e15 	stw	r18,56(sp)
 1006b6c:	dc400d15 	stw	r17,52(sp)
 1006b70:	14418216 	blt	r2,r17,100717c <___vfprintf_internal_r+0xbc8>
 1006b74:	ad400204 	addi	r21,r21,8
 1006b78:	d9014c17 	ldw	r4,1328(sp)
 1006b7c:	2080400c 	andi	r2,r4,256
 1006b80:	10004a1e 	bne	r2,zero,1006cac <___vfprintf_internal_r+0x6f8>
 1006b84:	d9414117 	ldw	r5,1284(sp)
 1006b88:	91e5883a 	add	r18,r18,r7
 1006b8c:	8c400044 	addi	r17,r17,1
 1006b90:	008001c4 	movi	r2,7
 1006b94:	a9400015 	stw	r5,0(r21)
 1006b98:	a9c00115 	stw	r7,4(r21)
 1006b9c:	dc800e15 	stw	r18,56(sp)
 1006ba0:	dc400d15 	stw	r17,52(sp)
 1006ba4:	14416716 	blt	r2,r17,1007144 <___vfprintf_internal_r+0xb90>
 1006ba8:	a8c00204 	addi	r3,r21,8
 1006bac:	d9814c17 	ldw	r6,1328(sp)
 1006bb0:	3080010c 	andi	r2,r6,4
 1006bb4:	10002826 	beq	r2,zero,1006c58 <___vfprintf_internal_r+0x6a4>
 1006bb8:	d8814a17 	ldw	r2,1320(sp)
 1006bbc:	d9014517 	ldw	r4,1300(sp)
 1006bc0:	1121c83a 	sub	r16,r2,r4
 1006bc4:	0400240e 	bge	zero,r16,1006c58 <___vfprintf_internal_r+0x6a4>
 1006bc8:	00800404 	movi	r2,16
 1006bcc:	14044f0e 	bge	r2,r16,1007d0c <___vfprintf_internal_r+0x1758>
 1006bd0:	dc400d17 	ldw	r17,52(sp)
 1006bd4:	1027883a 	mov	r19,r2
 1006bd8:	070040b4 	movhi	fp,258
 1006bdc:	e728e284 	addi	fp,fp,-23670
 1006be0:	050001c4 	movi	r20,7
 1006be4:	00000306 	br	1006bf4 <___vfprintf_internal_r+0x640>
 1006be8:	843ffc04 	addi	r16,r16,-16
 1006bec:	18c00204 	addi	r3,r3,8
 1006bf0:	9c00110e 	bge	r19,r16,1006c38 <___vfprintf_internal_r+0x684>
 1006bf4:	94800404 	addi	r18,r18,16
 1006bf8:	8c400044 	addi	r17,r17,1
 1006bfc:	1f000015 	stw	fp,0(r3)
 1006c00:	1cc00115 	stw	r19,4(r3)
 1006c04:	dc800e15 	stw	r18,56(sp)
 1006c08:	dc400d15 	stw	r17,52(sp)
 1006c0c:	a47ff60e 	bge	r20,r17,1006be8 <___vfprintf_internal_r+0x634>
 1006c10:	d9014f17 	ldw	r4,1340(sp)
 1006c14:	b00b883a 	mov	r5,r22
 1006c18:	d9800c04 	addi	r6,sp,48
 1006c1c:	100655c0 	call	100655c <__sprint_r>
 1006c20:	10001c1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006c24:	843ffc04 	addi	r16,r16,-16
 1006c28:	dc800e17 	ldw	r18,56(sp)
 1006c2c:	dc400d17 	ldw	r17,52(sp)
 1006c30:	d8c01904 	addi	r3,sp,100
 1006c34:	9c3fef16 	blt	r19,r16,1006bf4 <___vfprintf_internal_r+0x640>
 1006c38:	9425883a 	add	r18,r18,r16
 1006c3c:	8c400044 	addi	r17,r17,1
 1006c40:	008001c4 	movi	r2,7
 1006c44:	1f000015 	stw	fp,0(r3)
 1006c48:	1c000115 	stw	r16,4(r3)
 1006c4c:	dc800e15 	stw	r18,56(sp)
 1006c50:	dc400d15 	stw	r17,52(sp)
 1006c54:	1440cb16 	blt	r2,r17,1006f84 <___vfprintf_internal_r+0x9d0>
 1006c58:	d8814a17 	ldw	r2,1320(sp)
 1006c5c:	d9414517 	ldw	r5,1300(sp)
 1006c60:	1140010e 	bge	r2,r5,1006c68 <___vfprintf_internal_r+0x6b4>
 1006c64:	2805883a 	mov	r2,r5
 1006c68:	d9814b17 	ldw	r6,1324(sp)
 1006c6c:	308d883a 	add	r6,r6,r2
 1006c70:	d9814b15 	stw	r6,1324(sp)
 1006c74:	90013b1e 	bne	r18,zero,1007164 <___vfprintf_internal_r+0xbb0>
 1006c78:	d9c14017 	ldw	r7,1280(sp)
 1006c7c:	dd401904 	addi	r21,sp,100
 1006c80:	d8000d15 	stw	zero,52(sp)
 1006c84:	003ea706 	br	1006724 <___vfprintf_internal_r+0x170>
 1006c88:	d8800e17 	ldw	r2,56(sp)
 1006c8c:	10053f1e 	bne	r2,zero,100818c <___vfprintf_internal_r+0x1bd8>
 1006c90:	d8000d15 	stw	zero,52(sp)
 1006c94:	b080030b 	ldhu	r2,12(r22)
 1006c98:	1080100c 	andi	r2,r2,64
 1006c9c:	103e8726 	beq	r2,zero,10066bc <___vfprintf_internal_r+0x108>
 1006ca0:	00bfffc4 	movi	r2,-1
 1006ca4:	d8814b15 	stw	r2,1324(sp)
 1006ca8:	003e8406 	br	10066bc <___vfprintf_internal_r+0x108>
 1006cac:	d9814d17 	ldw	r6,1332(sp)
 1006cb0:	00801944 	movi	r2,101
 1006cb4:	11806e16 	blt	r2,r6,1006e70 <___vfprintf_internal_r+0x8bc>
 1006cb8:	d9414717 	ldw	r5,1308(sp)
 1006cbc:	00c00044 	movi	r3,1
 1006cc0:	1943430e 	bge	r3,r5,10079d0 <___vfprintf_internal_r+0x141c>
 1006cc4:	d8814117 	ldw	r2,1284(sp)
 1006cc8:	94800044 	addi	r18,r18,1
 1006ccc:	8c400044 	addi	r17,r17,1
 1006cd0:	a8800015 	stw	r2,0(r21)
 1006cd4:	008001c4 	movi	r2,7
 1006cd8:	a8c00115 	stw	r3,4(r21)
 1006cdc:	dc800e15 	stw	r18,56(sp)
 1006ce0:	dc400d15 	stw	r17,52(sp)
 1006ce4:	1441ca16 	blt	r2,r17,1007410 <___vfprintf_internal_r+0xe5c>
 1006ce8:	a8c00204 	addi	r3,r21,8
 1006cec:	d9014917 	ldw	r4,1316(sp)
 1006cf0:	00800044 	movi	r2,1
 1006cf4:	94800044 	addi	r18,r18,1
 1006cf8:	8c400044 	addi	r17,r17,1
 1006cfc:	18800115 	stw	r2,4(r3)
 1006d00:	008001c4 	movi	r2,7
 1006d04:	19000015 	stw	r4,0(r3)
 1006d08:	dc800e15 	stw	r18,56(sp)
 1006d0c:	dc400d15 	stw	r17,52(sp)
 1006d10:	1441b616 	blt	r2,r17,10073ec <___vfprintf_internal_r+0xe38>
 1006d14:	1cc00204 	addi	r19,r3,8
 1006d18:	d9014217 	ldw	r4,1288(sp)
 1006d1c:	d9414317 	ldw	r5,1292(sp)
 1006d20:	000d883a 	mov	r6,zero
 1006d24:	000f883a 	mov	r7,zero
 1006d28:	1014d740 	call	1014d74 <__nedf2>
 1006d2c:	10017426 	beq	r2,zero,1007300 <___vfprintf_internal_r+0xd4c>
 1006d30:	d9414717 	ldw	r5,1308(sp)
 1006d34:	d9814117 	ldw	r6,1284(sp)
 1006d38:	8c400044 	addi	r17,r17,1
 1006d3c:	2c85883a 	add	r2,r5,r18
 1006d40:	14bfffc4 	addi	r18,r2,-1
 1006d44:	28bfffc4 	addi	r2,r5,-1
 1006d48:	30c00044 	addi	r3,r6,1
 1006d4c:	98800115 	stw	r2,4(r19)
 1006d50:	008001c4 	movi	r2,7
 1006d54:	98c00015 	stw	r3,0(r19)
 1006d58:	dc800e15 	stw	r18,56(sp)
 1006d5c:	dc400d15 	stw	r17,52(sp)
 1006d60:	14418e16 	blt	r2,r17,100739c <___vfprintf_internal_r+0xde8>
 1006d64:	9cc00204 	addi	r19,r19,8
 1006d68:	d9414817 	ldw	r5,1312(sp)
 1006d6c:	d8800804 	addi	r2,sp,32
 1006d70:	8c400044 	addi	r17,r17,1
 1006d74:	9165883a 	add	r18,r18,r5
 1006d78:	98800015 	stw	r2,0(r19)
 1006d7c:	008001c4 	movi	r2,7
 1006d80:	99400115 	stw	r5,4(r19)
 1006d84:	dc800e15 	stw	r18,56(sp)
 1006d88:	dc400d15 	stw	r17,52(sp)
 1006d8c:	1440ed16 	blt	r2,r17,1007144 <___vfprintf_internal_r+0xb90>
 1006d90:	98c00204 	addi	r3,r19,8
 1006d94:	003f8506 	br	1006bac <___vfprintf_internal_r+0x5f8>
 1006d98:	d9814a17 	ldw	r6,1320(sp)
 1006d9c:	d8814517 	ldw	r2,1300(sp)
 1006da0:	30a1c83a 	sub	r16,r6,r2
 1006da4:	043f4b0e 	bge	zero,r16,1006ad4 <___vfprintf_internal_r+0x520>
 1006da8:	00800404 	movi	r2,16
 1006dac:	1404340e 	bge	r2,r16,1007e80 <___vfprintf_internal_r+0x18cc>
 1006db0:	1027883a 	mov	r19,r2
 1006db4:	070040b4 	movhi	fp,258
 1006db8:	e728de84 	addi	fp,fp,-23686
 1006dbc:	050001c4 	movi	r20,7
 1006dc0:	00000306 	br	1006dd0 <___vfprintf_internal_r+0x81c>
 1006dc4:	843ffc04 	addi	r16,r16,-16
 1006dc8:	ad400204 	addi	r21,r21,8
 1006dcc:	9c00130e 	bge	r19,r16,1006e1c <___vfprintf_internal_r+0x868>
 1006dd0:	94800404 	addi	r18,r18,16
 1006dd4:	8c400044 	addi	r17,r17,1
 1006dd8:	af000015 	stw	fp,0(r21)
 1006ddc:	acc00115 	stw	r19,4(r21)
 1006de0:	dc800e15 	stw	r18,56(sp)
 1006de4:	dc400d15 	stw	r17,52(sp)
 1006de8:	a47ff60e 	bge	r20,r17,1006dc4 <___vfprintf_internal_r+0x810>
 1006dec:	d9014f17 	ldw	r4,1340(sp)
 1006df0:	b00b883a 	mov	r5,r22
 1006df4:	d9800c04 	addi	r6,sp,48
 1006df8:	d9c15115 	stw	r7,1348(sp)
 1006dfc:	100655c0 	call	100655c <__sprint_r>
 1006e00:	d9c15117 	ldw	r7,1348(sp)
 1006e04:	103fa31e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006e08:	843ffc04 	addi	r16,r16,-16
 1006e0c:	dc800e17 	ldw	r18,56(sp)
 1006e10:	dc400d17 	ldw	r17,52(sp)
 1006e14:	dd401904 	addi	r21,sp,100
 1006e18:	9c3fed16 	blt	r19,r16,1006dd0 <___vfprintf_internal_r+0x81c>
 1006e1c:	9425883a 	add	r18,r18,r16
 1006e20:	8c400044 	addi	r17,r17,1
 1006e24:	008001c4 	movi	r2,7
 1006e28:	af000015 	stw	fp,0(r21)
 1006e2c:	ac000115 	stw	r16,4(r21)
 1006e30:	dc800e15 	stw	r18,56(sp)
 1006e34:	dc400d15 	stw	r17,52(sp)
 1006e38:	14416116 	blt	r2,r17,10073c0 <___vfprintf_internal_r+0xe0c>
 1006e3c:	ad400204 	addi	r21,r21,8
 1006e40:	003f2406 	br	1006ad4 <___vfprintf_internal_r+0x520>
 1006e44:	d9014f17 	ldw	r4,1340(sp)
 1006e48:	100b9700 	call	100b970 <__sinit>
 1006e4c:	d9c15117 	ldw	r7,1348(sp)
 1006e50:	003def06 	br	1006610 <___vfprintf_internal_r+0x5c>
 1006e54:	d9014f17 	ldw	r4,1340(sp)
 1006e58:	b00b883a 	mov	r5,r22
 1006e5c:	d9c15115 	stw	r7,1348(sp)
 1006e60:	1009c040 	call	1009c04 <__swsetup_r>
 1006e64:	d9c15117 	ldw	r7,1348(sp)
 1006e68:	103dee26 	beq	r2,zero,1006624 <___vfprintf_internal_r+0x70>
 1006e6c:	003f8c06 	br	1006ca0 <___vfprintf_internal_r+0x6ec>
 1006e70:	d9014217 	ldw	r4,1288(sp)
 1006e74:	d9414317 	ldw	r5,1292(sp)
 1006e78:	000d883a 	mov	r6,zero
 1006e7c:	000f883a 	mov	r7,zero
 1006e80:	1014cec0 	call	1014cec <__eqdf2>
 1006e84:	1000f21e 	bne	r2,zero,1007250 <___vfprintf_internal_r+0xc9c>
 1006e88:	008040b4 	movhi	r2,258
 1006e8c:	10a8de04 	addi	r2,r2,-23688
 1006e90:	94800044 	addi	r18,r18,1
 1006e94:	8c400044 	addi	r17,r17,1
 1006e98:	a8800015 	stw	r2,0(r21)
 1006e9c:	00c00044 	movi	r3,1
 1006ea0:	008001c4 	movi	r2,7
 1006ea4:	a8c00115 	stw	r3,4(r21)
 1006ea8:	dc800e15 	stw	r18,56(sp)
 1006eac:	dc400d15 	stw	r17,52(sp)
 1006eb0:	1442fa16 	blt	r2,r17,1007a9c <___vfprintf_internal_r+0x14e8>
 1006eb4:	a8c00204 	addi	r3,r21,8
 1006eb8:	d8800517 	ldw	r2,20(sp)
 1006ebc:	d9014717 	ldw	r4,1308(sp)
 1006ec0:	11015c0e 	bge	r2,r4,1007434 <___vfprintf_internal_r+0xe80>
 1006ec4:	dc400d17 	ldw	r17,52(sp)
 1006ec8:	d9814917 	ldw	r6,1316(sp)
 1006ecc:	00800044 	movi	r2,1
 1006ed0:	94800044 	addi	r18,r18,1
 1006ed4:	8c400044 	addi	r17,r17,1
 1006ed8:	18800115 	stw	r2,4(r3)
 1006edc:	008001c4 	movi	r2,7
 1006ee0:	19800015 	stw	r6,0(r3)
 1006ee4:	dc800e15 	stw	r18,56(sp)
 1006ee8:	dc400d15 	stw	r17,52(sp)
 1006eec:	14431016 	blt	r2,r17,1007b30 <___vfprintf_internal_r+0x157c>
 1006ef0:	18c00204 	addi	r3,r3,8
 1006ef4:	d8814717 	ldw	r2,1308(sp)
 1006ef8:	143fffc4 	addi	r16,r2,-1
 1006efc:	043f2b0e 	bge	zero,r16,1006bac <___vfprintf_internal_r+0x5f8>
 1006f00:	00800404 	movi	r2,16
 1006f04:	1402a20e 	bge	r2,r16,1007990 <___vfprintf_internal_r+0x13dc>
 1006f08:	dc400d17 	ldw	r17,52(sp)
 1006f0c:	1027883a 	mov	r19,r2
 1006f10:	070040b4 	movhi	fp,258
 1006f14:	e728de84 	addi	fp,fp,-23686
 1006f18:	050001c4 	movi	r20,7
 1006f1c:	00000306 	br	1006f2c <___vfprintf_internal_r+0x978>
 1006f20:	18c00204 	addi	r3,r3,8
 1006f24:	843ffc04 	addi	r16,r16,-16
 1006f28:	9c029c0e 	bge	r19,r16,100799c <___vfprintf_internal_r+0x13e8>
 1006f2c:	94800404 	addi	r18,r18,16
 1006f30:	8c400044 	addi	r17,r17,1
 1006f34:	1f000015 	stw	fp,0(r3)
 1006f38:	1cc00115 	stw	r19,4(r3)
 1006f3c:	dc800e15 	stw	r18,56(sp)
 1006f40:	dc400d15 	stw	r17,52(sp)
 1006f44:	a47ff60e 	bge	r20,r17,1006f20 <___vfprintf_internal_r+0x96c>
 1006f48:	d9014f17 	ldw	r4,1340(sp)
 1006f4c:	b00b883a 	mov	r5,r22
 1006f50:	d9800c04 	addi	r6,sp,48
 1006f54:	100655c0 	call	100655c <__sprint_r>
 1006f58:	103f4e1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006f5c:	dc800e17 	ldw	r18,56(sp)
 1006f60:	dc400d17 	ldw	r17,52(sp)
 1006f64:	d8c01904 	addi	r3,sp,100
 1006f68:	003fee06 	br	1006f24 <___vfprintf_internal_r+0x970>
 1006f6c:	d8802c0b 	ldhu	r2,176(sp)
 1006f70:	00ffffc4 	movi	r3,-1
 1006f74:	d8c14b15 	stw	r3,1324(sp)
 1006f78:	1080100c 	andi	r2,r2,64
 1006f7c:	103dcc1e 	bne	r2,zero,10066b0 <___vfprintf_internal_r+0xfc>
 1006f80:	003dce06 	br	10066bc <___vfprintf_internal_r+0x108>
 1006f84:	d9014f17 	ldw	r4,1340(sp)
 1006f88:	b00b883a 	mov	r5,r22
 1006f8c:	d9800c04 	addi	r6,sp,48
 1006f90:	100655c0 	call	100655c <__sprint_r>
 1006f94:	103f3f1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1006f98:	dc800e17 	ldw	r18,56(sp)
 1006f9c:	003f2e06 	br	1006c58 <___vfprintf_internal_r+0x6a4>
 1006fa0:	d9414c17 	ldw	r5,1328(sp)
 1006fa4:	29400414 	ori	r5,r5,16
 1006fa8:	d9414c15 	stw	r5,1328(sp)
 1006fac:	d9814c17 	ldw	r6,1328(sp)
 1006fb0:	3080080c 	andi	r2,r6,32
 1006fb4:	10014f1e 	bne	r2,zero,10074f4 <___vfprintf_internal_r+0xf40>
 1006fb8:	d8c14c17 	ldw	r3,1328(sp)
 1006fbc:	1880040c 	andi	r2,r3,16
 1006fc0:	1002ea1e 	bne	r2,zero,1007b6c <___vfprintf_internal_r+0x15b8>
 1006fc4:	d9014c17 	ldw	r4,1328(sp)
 1006fc8:	2080100c 	andi	r2,r4,64
 1006fcc:	1002e726 	beq	r2,zero,1007b6c <___vfprintf_internal_r+0x15b8>
 1006fd0:	3880000f 	ldh	r2,0(r7)
 1006fd4:	39c00104 	addi	r7,r7,4
 1006fd8:	d9c14015 	stw	r7,1280(sp)
 1006fdc:	1023d7fa 	srai	r17,r2,31
 1006fe0:	1021883a 	mov	r16,r2
 1006fe4:	88037216 	blt	r17,zero,1007db0 <___vfprintf_internal_r+0x17fc>
 1006fe8:	01000044 	movi	r4,1
 1006fec:	98000416 	blt	r19,zero,1007000 <___vfprintf_internal_r+0xa4c>
 1006ff0:	d8c14c17 	ldw	r3,1328(sp)
 1006ff4:	00bfdfc4 	movi	r2,-129
 1006ff8:	1886703a 	and	r3,r3,r2
 1006ffc:	d8c14c15 	stw	r3,1328(sp)
 1007000:	8444b03a 	or	r2,r16,r17
 1007004:	1002261e 	bne	r2,zero,10078a0 <___vfprintf_internal_r+0x12ec>
 1007008:	9802251e 	bne	r19,zero,10078a0 <___vfprintf_internal_r+0x12ec>
 100700c:	20803fcc 	andi	r2,r4,255
 1007010:	10029b26 	beq	r2,zero,1007a80 <___vfprintf_internal_r+0x14cc>
 1007014:	d8c01904 	addi	r3,sp,100
 1007018:	dd000f04 	addi	r20,sp,60
 100701c:	d8c14115 	stw	r3,1284(sp)
 1007020:	d8c14117 	ldw	r3,1284(sp)
 1007024:	dcc14515 	stw	r19,1300(sp)
 1007028:	a0c5c83a 	sub	r2,r20,r3
 100702c:	11c00a04 	addi	r7,r2,40
 1007030:	99c0010e 	bge	r19,r7,1007038 <___vfprintf_internal_r+0xa84>
 1007034:	d9c14515 	stw	r7,1300(sp)
 1007038:	dcc14615 	stw	r19,1304(sp)
 100703c:	d8800407 	ldb	r2,16(sp)
 1007040:	103e4c26 	beq	r2,zero,1006974 <___vfprintf_internal_r+0x3c0>
 1007044:	d8814517 	ldw	r2,1300(sp)
 1007048:	10800044 	addi	r2,r2,1
 100704c:	d8814515 	stw	r2,1300(sp)
 1007050:	003e4806 	br	1006974 <___vfprintf_internal_r+0x3c0>
 1007054:	d9814c17 	ldw	r6,1328(sp)
 1007058:	31800414 	ori	r6,r6,16
 100705c:	d9814c15 	stw	r6,1328(sp)
 1007060:	d8c14c17 	ldw	r3,1328(sp)
 1007064:	1880080c 	andi	r2,r3,32
 1007068:	1001271e 	bne	r2,zero,1007508 <___vfprintf_internal_r+0xf54>
 100706c:	d9414c17 	ldw	r5,1328(sp)
 1007070:	2880040c 	andi	r2,r5,16
 1007074:	1002b61e 	bne	r2,zero,1007b50 <___vfprintf_internal_r+0x159c>
 1007078:	d9814c17 	ldw	r6,1328(sp)
 100707c:	3080100c 	andi	r2,r6,64
 1007080:	1002b326 	beq	r2,zero,1007b50 <___vfprintf_internal_r+0x159c>
 1007084:	3c00000b 	ldhu	r16,0(r7)
 1007088:	0009883a 	mov	r4,zero
 100708c:	39c00104 	addi	r7,r7,4
 1007090:	0023883a 	mov	r17,zero
 1007094:	d9c14015 	stw	r7,1280(sp)
 1007098:	d8000405 	stb	zero,16(sp)
 100709c:	003fd306 	br	1006fec <___vfprintf_internal_r+0xa38>
 10070a0:	d9014c17 	ldw	r4,1328(sp)
 10070a4:	21000414 	ori	r4,r4,16
 10070a8:	d9014c15 	stw	r4,1328(sp)
 10070ac:	d9414c17 	ldw	r5,1328(sp)
 10070b0:	2880080c 	andi	r2,r5,32
 10070b4:	1001081e 	bne	r2,zero,10074d8 <___vfprintf_internal_r+0xf24>
 10070b8:	d8c14c17 	ldw	r3,1328(sp)
 10070bc:	1880040c 	andi	r2,r3,16
 10070c0:	1002b01e 	bne	r2,zero,1007b84 <___vfprintf_internal_r+0x15d0>
 10070c4:	d9014c17 	ldw	r4,1328(sp)
 10070c8:	2080100c 	andi	r2,r4,64
 10070cc:	1002ad26 	beq	r2,zero,1007b84 <___vfprintf_internal_r+0x15d0>
 10070d0:	3c00000b 	ldhu	r16,0(r7)
 10070d4:	01000044 	movi	r4,1
 10070d8:	39c00104 	addi	r7,r7,4
 10070dc:	0023883a 	mov	r17,zero
 10070e0:	d9c14015 	stw	r7,1280(sp)
 10070e4:	d8000405 	stb	zero,16(sp)
 10070e8:	003fc006 	br	1006fec <___vfprintf_internal_r+0xa38>
 10070ec:	d9014f17 	ldw	r4,1340(sp)
 10070f0:	b00b883a 	mov	r5,r22
 10070f4:	d9800c04 	addi	r6,sp,48
 10070f8:	100655c0 	call	100655c <__sprint_r>
 10070fc:	103ee51e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007100:	dc800e17 	ldw	r18,56(sp)
 1007104:	d8c01904 	addi	r3,sp,100
 1007108:	d9814c17 	ldw	r6,1328(sp)
 100710c:	3080004c 	andi	r2,r6,1
 1007110:	1005003a 	cmpeq	r2,r2,zero
 1007114:	103ea51e 	bne	r2,zero,1006bac <___vfprintf_internal_r+0x5f8>
 1007118:	00800044 	movi	r2,1
 100711c:	dc400d17 	ldw	r17,52(sp)
 1007120:	18800115 	stw	r2,4(r3)
 1007124:	d8814917 	ldw	r2,1316(sp)
 1007128:	94800044 	addi	r18,r18,1
 100712c:	8c400044 	addi	r17,r17,1
 1007130:	18800015 	stw	r2,0(r3)
 1007134:	008001c4 	movi	r2,7
 1007138:	dc800e15 	stw	r18,56(sp)
 100713c:	dc400d15 	stw	r17,52(sp)
 1007140:	14421e0e 	bge	r2,r17,10079bc <___vfprintf_internal_r+0x1408>
 1007144:	d9014f17 	ldw	r4,1340(sp)
 1007148:	b00b883a 	mov	r5,r22
 100714c:	d9800c04 	addi	r6,sp,48
 1007150:	100655c0 	call	100655c <__sprint_r>
 1007154:	103ecf1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007158:	dc800e17 	ldw	r18,56(sp)
 100715c:	d8c01904 	addi	r3,sp,100
 1007160:	003e9206 	br	1006bac <___vfprintf_internal_r+0x5f8>
 1007164:	d9014f17 	ldw	r4,1340(sp)
 1007168:	b00b883a 	mov	r5,r22
 100716c:	d9800c04 	addi	r6,sp,48
 1007170:	100655c0 	call	100655c <__sprint_r>
 1007174:	103ec026 	beq	r2,zero,1006c78 <___vfprintf_internal_r+0x6c4>
 1007178:	003ec606 	br	1006c94 <___vfprintf_internal_r+0x6e0>
 100717c:	d9014f17 	ldw	r4,1340(sp)
 1007180:	b00b883a 	mov	r5,r22
 1007184:	d9800c04 	addi	r6,sp,48
 1007188:	d9c15115 	stw	r7,1348(sp)
 100718c:	100655c0 	call	100655c <__sprint_r>
 1007190:	d9c15117 	ldw	r7,1348(sp)
 1007194:	103ebf1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007198:	dc800e17 	ldw	r18,56(sp)
 100719c:	dc400d17 	ldw	r17,52(sp)
 10071a0:	dd401904 	addi	r21,sp,100
 10071a4:	003e7406 	br	1006b78 <___vfprintf_internal_r+0x5c4>
 10071a8:	d9014f17 	ldw	r4,1340(sp)
 10071ac:	b00b883a 	mov	r5,r22
 10071b0:	d9800c04 	addi	r6,sp,48
 10071b4:	d9c15115 	stw	r7,1348(sp)
 10071b8:	100655c0 	call	100655c <__sprint_r>
 10071bc:	d9c15117 	ldw	r7,1348(sp)
 10071c0:	103eb41e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10071c4:	dd401904 	addi	r21,sp,100
 10071c8:	003d6d06 	br	1006780 <___vfprintf_internal_r+0x1cc>
 10071cc:	d9014f17 	ldw	r4,1340(sp)
 10071d0:	b00b883a 	mov	r5,r22
 10071d4:	d9800c04 	addi	r6,sp,48
 10071d8:	d9c15115 	stw	r7,1348(sp)
 10071dc:	100655c0 	call	100655c <__sprint_r>
 10071e0:	d9c15117 	ldw	r7,1348(sp)
 10071e4:	103eab1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10071e8:	dc800e17 	ldw	r18,56(sp)
 10071ec:	dc400d17 	ldw	r17,52(sp)
 10071f0:	dd401904 	addi	r21,sp,100
 10071f4:	003e3406 	br	1006ac8 <___vfprintf_internal_r+0x514>
 10071f8:	d9014f17 	ldw	r4,1340(sp)
 10071fc:	b00b883a 	mov	r5,r22
 1007200:	d9800c04 	addi	r6,sp,48
 1007204:	d9c15115 	stw	r7,1348(sp)
 1007208:	100655c0 	call	100655c <__sprint_r>
 100720c:	d9c15117 	ldw	r7,1348(sp)
 1007210:	103ea01e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007214:	dc800e17 	ldw	r18,56(sp)
 1007218:	dc400d17 	ldw	r17,52(sp)
 100721c:	dd401904 	addi	r21,sp,100
 1007220:	003e1c06 	br	1006a94 <___vfprintf_internal_r+0x4e0>
 1007224:	d9014f17 	ldw	r4,1340(sp)
 1007228:	b00b883a 	mov	r5,r22
 100722c:	d9800c04 	addi	r6,sp,48
 1007230:	d9c15115 	stw	r7,1348(sp)
 1007234:	100655c0 	call	100655c <__sprint_r>
 1007238:	d9c15117 	ldw	r7,1348(sp)
 100723c:	103e951e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007240:	dc800e17 	ldw	r18,56(sp)
 1007244:	dc400d17 	ldw	r17,52(sp)
 1007248:	dd401904 	addi	r21,sp,100
 100724c:	003e0406 	br	1006a60 <___vfprintf_internal_r+0x4ac>
 1007250:	d9000517 	ldw	r4,20(sp)
 1007254:	0102520e 	bge	zero,r4,1007ba0 <___vfprintf_internal_r+0x15ec>
 1007258:	d9814717 	ldw	r6,1308(sp)
 100725c:	21807a16 	blt	r4,r6,1007448 <___vfprintf_internal_r+0xe94>
 1007260:	d8814117 	ldw	r2,1284(sp)
 1007264:	91a5883a 	add	r18,r18,r6
 1007268:	8c400044 	addi	r17,r17,1
 100726c:	a8800015 	stw	r2,0(r21)
 1007270:	008001c4 	movi	r2,7
 1007274:	a9800115 	stw	r6,4(r21)
 1007278:	dc800e15 	stw	r18,56(sp)
 100727c:	dc400d15 	stw	r17,52(sp)
 1007280:	1442f616 	blt	r2,r17,1007e5c <___vfprintf_internal_r+0x18a8>
 1007284:	a8c00204 	addi	r3,r21,8
 1007288:	d9414717 	ldw	r5,1308(sp)
 100728c:	2161c83a 	sub	r16,r4,r5
 1007290:	043f9d0e 	bge	zero,r16,1007108 <___vfprintf_internal_r+0xb54>
 1007294:	00800404 	movi	r2,16
 1007298:	1402130e 	bge	r2,r16,1007ae8 <___vfprintf_internal_r+0x1534>
 100729c:	dc400d17 	ldw	r17,52(sp)
 10072a0:	1027883a 	mov	r19,r2
 10072a4:	070040b4 	movhi	fp,258
 10072a8:	e728de84 	addi	fp,fp,-23686
 10072ac:	050001c4 	movi	r20,7
 10072b0:	00000306 	br	10072c0 <___vfprintf_internal_r+0xd0c>
 10072b4:	18c00204 	addi	r3,r3,8
 10072b8:	843ffc04 	addi	r16,r16,-16
 10072bc:	9c020d0e 	bge	r19,r16,1007af4 <___vfprintf_internal_r+0x1540>
 10072c0:	94800404 	addi	r18,r18,16
 10072c4:	8c400044 	addi	r17,r17,1
 10072c8:	1f000015 	stw	fp,0(r3)
 10072cc:	1cc00115 	stw	r19,4(r3)
 10072d0:	dc800e15 	stw	r18,56(sp)
 10072d4:	dc400d15 	stw	r17,52(sp)
 10072d8:	a47ff60e 	bge	r20,r17,10072b4 <___vfprintf_internal_r+0xd00>
 10072dc:	d9014f17 	ldw	r4,1340(sp)
 10072e0:	b00b883a 	mov	r5,r22
 10072e4:	d9800c04 	addi	r6,sp,48
 10072e8:	100655c0 	call	100655c <__sprint_r>
 10072ec:	103e691e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10072f0:	dc800e17 	ldw	r18,56(sp)
 10072f4:	dc400d17 	ldw	r17,52(sp)
 10072f8:	d8c01904 	addi	r3,sp,100
 10072fc:	003fee06 	br	10072b8 <___vfprintf_internal_r+0xd04>
 1007300:	d8814717 	ldw	r2,1308(sp)
 1007304:	143fffc4 	addi	r16,r2,-1
 1007308:	043e970e 	bge	zero,r16,1006d68 <___vfprintf_internal_r+0x7b4>
 100730c:	00800404 	movi	r2,16
 1007310:	1400180e 	bge	r2,r16,1007374 <___vfprintf_internal_r+0xdc0>
 1007314:	1029883a 	mov	r20,r2
 1007318:	070040b4 	movhi	fp,258
 100731c:	e728de84 	addi	fp,fp,-23686
 1007320:	054001c4 	movi	r21,7
 1007324:	00000306 	br	1007334 <___vfprintf_internal_r+0xd80>
 1007328:	9cc00204 	addi	r19,r19,8
 100732c:	843ffc04 	addi	r16,r16,-16
 1007330:	a400120e 	bge	r20,r16,100737c <___vfprintf_internal_r+0xdc8>
 1007334:	94800404 	addi	r18,r18,16
 1007338:	8c400044 	addi	r17,r17,1
 100733c:	9f000015 	stw	fp,0(r19)
 1007340:	9d000115 	stw	r20,4(r19)
 1007344:	dc800e15 	stw	r18,56(sp)
 1007348:	dc400d15 	stw	r17,52(sp)
 100734c:	ac7ff60e 	bge	r21,r17,1007328 <___vfprintf_internal_r+0xd74>
 1007350:	d9014f17 	ldw	r4,1340(sp)
 1007354:	b00b883a 	mov	r5,r22
 1007358:	d9800c04 	addi	r6,sp,48
 100735c:	100655c0 	call	100655c <__sprint_r>
 1007360:	103e4c1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007364:	dc800e17 	ldw	r18,56(sp)
 1007368:	dc400d17 	ldw	r17,52(sp)
 100736c:	dcc01904 	addi	r19,sp,100
 1007370:	003fee06 	br	100732c <___vfprintf_internal_r+0xd78>
 1007374:	070040b4 	movhi	fp,258
 1007378:	e728de84 	addi	fp,fp,-23686
 100737c:	9425883a 	add	r18,r18,r16
 1007380:	8c400044 	addi	r17,r17,1
 1007384:	008001c4 	movi	r2,7
 1007388:	9f000015 	stw	fp,0(r19)
 100738c:	9c000115 	stw	r16,4(r19)
 1007390:	dc800e15 	stw	r18,56(sp)
 1007394:	dc400d15 	stw	r17,52(sp)
 1007398:	147e720e 	bge	r2,r17,1006d64 <___vfprintf_internal_r+0x7b0>
 100739c:	d9014f17 	ldw	r4,1340(sp)
 10073a0:	b00b883a 	mov	r5,r22
 10073a4:	d9800c04 	addi	r6,sp,48
 10073a8:	100655c0 	call	100655c <__sprint_r>
 10073ac:	103e391e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10073b0:	dc800e17 	ldw	r18,56(sp)
 10073b4:	dc400d17 	ldw	r17,52(sp)
 10073b8:	dcc01904 	addi	r19,sp,100
 10073bc:	003e6a06 	br	1006d68 <___vfprintf_internal_r+0x7b4>
 10073c0:	d9014f17 	ldw	r4,1340(sp)
 10073c4:	b00b883a 	mov	r5,r22
 10073c8:	d9800c04 	addi	r6,sp,48
 10073cc:	d9c15115 	stw	r7,1348(sp)
 10073d0:	100655c0 	call	100655c <__sprint_r>
 10073d4:	d9c15117 	ldw	r7,1348(sp)
 10073d8:	103e2e1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10073dc:	dc800e17 	ldw	r18,56(sp)
 10073e0:	dc400d17 	ldw	r17,52(sp)
 10073e4:	dd401904 	addi	r21,sp,100
 10073e8:	003dba06 	br	1006ad4 <___vfprintf_internal_r+0x520>
 10073ec:	d9014f17 	ldw	r4,1340(sp)
 10073f0:	b00b883a 	mov	r5,r22
 10073f4:	d9800c04 	addi	r6,sp,48
 10073f8:	100655c0 	call	100655c <__sprint_r>
 10073fc:	103e251e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007400:	dc800e17 	ldw	r18,56(sp)
 1007404:	dc400d17 	ldw	r17,52(sp)
 1007408:	dcc01904 	addi	r19,sp,100
 100740c:	003e4206 	br	1006d18 <___vfprintf_internal_r+0x764>
 1007410:	d9014f17 	ldw	r4,1340(sp)
 1007414:	b00b883a 	mov	r5,r22
 1007418:	d9800c04 	addi	r6,sp,48
 100741c:	100655c0 	call	100655c <__sprint_r>
 1007420:	103e1c1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007424:	dc800e17 	ldw	r18,56(sp)
 1007428:	dc400d17 	ldw	r17,52(sp)
 100742c:	d8c01904 	addi	r3,sp,100
 1007430:	003e2e06 	br	1006cec <___vfprintf_internal_r+0x738>
 1007434:	d9414c17 	ldw	r5,1328(sp)
 1007438:	2880004c 	andi	r2,r5,1
 100743c:	1005003a 	cmpeq	r2,r2,zero
 1007440:	103dda1e 	bne	r2,zero,1006bac <___vfprintf_internal_r+0x5f8>
 1007444:	003e9f06 	br	1006ec4 <___vfprintf_internal_r+0x910>
 1007448:	d8c14117 	ldw	r3,1284(sp)
 100744c:	9125883a 	add	r18,r18,r4
 1007450:	8c400044 	addi	r17,r17,1
 1007454:	008001c4 	movi	r2,7
 1007458:	a8c00015 	stw	r3,0(r21)
 100745c:	a9000115 	stw	r4,4(r21)
 1007460:	dc800e15 	stw	r18,56(sp)
 1007464:	dc400d15 	stw	r17,52(sp)
 1007468:	14426616 	blt	r2,r17,1007e04 <___vfprintf_internal_r+0x1850>
 100746c:	a8c00204 	addi	r3,r21,8
 1007470:	d9414917 	ldw	r5,1316(sp)
 1007474:	00800044 	movi	r2,1
 1007478:	94800044 	addi	r18,r18,1
 100747c:	8c400044 	addi	r17,r17,1
 1007480:	18800115 	stw	r2,4(r3)
 1007484:	008001c4 	movi	r2,7
 1007488:	19400015 	stw	r5,0(r3)
 100748c:	dc800e15 	stw	r18,56(sp)
 1007490:	dc400d15 	stw	r17,52(sp)
 1007494:	2021883a 	mov	r16,r4
 1007498:	14425016 	blt	r2,r17,1007ddc <___vfprintf_internal_r+0x1828>
 100749c:	19400204 	addi	r5,r3,8
 10074a0:	d9814717 	ldw	r6,1308(sp)
 10074a4:	8c400044 	addi	r17,r17,1
 10074a8:	dc400d15 	stw	r17,52(sp)
 10074ac:	3107c83a 	sub	r3,r6,r4
 10074b0:	d9014117 	ldw	r4,1284(sp)
 10074b4:	90e5883a 	add	r18,r18,r3
 10074b8:	28c00115 	stw	r3,4(r5)
 10074bc:	8105883a 	add	r2,r16,r4
 10074c0:	28800015 	stw	r2,0(r5)
 10074c4:	008001c4 	movi	r2,7
 10074c8:	dc800e15 	stw	r18,56(sp)
 10074cc:	147f1d16 	blt	r2,r17,1007144 <___vfprintf_internal_r+0xb90>
 10074d0:	28c00204 	addi	r3,r5,8
 10074d4:	003db506 	br	1006bac <___vfprintf_internal_r+0x5f8>
 10074d8:	3c000017 	ldw	r16,0(r7)
 10074dc:	3c400117 	ldw	r17,4(r7)
 10074e0:	39800204 	addi	r6,r7,8
 10074e4:	01000044 	movi	r4,1
 10074e8:	d9814015 	stw	r6,1280(sp)
 10074ec:	d8000405 	stb	zero,16(sp)
 10074f0:	003ebe06 	br	1006fec <___vfprintf_internal_r+0xa38>
 10074f4:	3c000017 	ldw	r16,0(r7)
 10074f8:	3c400117 	ldw	r17,4(r7)
 10074fc:	38800204 	addi	r2,r7,8
 1007500:	d8814015 	stw	r2,1280(sp)
 1007504:	003eb706 	br	1006fe4 <___vfprintf_internal_r+0xa30>
 1007508:	3c000017 	ldw	r16,0(r7)
 100750c:	3c400117 	ldw	r17,4(r7)
 1007510:	39000204 	addi	r4,r7,8
 1007514:	d9014015 	stw	r4,1280(sp)
 1007518:	0009883a 	mov	r4,zero
 100751c:	d8000405 	stb	zero,16(sp)
 1007520:	003eb206 	br	1006fec <___vfprintf_internal_r+0xa38>
 1007524:	38c00017 	ldw	r3,0(r7)
 1007528:	39c00104 	addi	r7,r7,4
 100752c:	d8c14a15 	stw	r3,1320(sp)
 1007530:	1800d10e 	bge	r3,zero,1007878 <___vfprintf_internal_r+0x12c4>
 1007534:	00c7c83a 	sub	r3,zero,r3
 1007538:	d8c14a15 	stw	r3,1320(sp)
 100753c:	d9014c17 	ldw	r4,1328(sp)
 1007540:	b8c00007 	ldb	r3,0(r23)
 1007544:	21000114 	ori	r4,r4,4
 1007548:	d9014c15 	stw	r4,1328(sp)
 100754c:	003c9806 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007550:	d9814c17 	ldw	r6,1328(sp)
 1007554:	3080080c 	andi	r2,r6,32
 1007558:	1001f026 	beq	r2,zero,1007d1c <___vfprintf_internal_r+0x1768>
 100755c:	d9014b17 	ldw	r4,1324(sp)
 1007560:	38800017 	ldw	r2,0(r7)
 1007564:	39c00104 	addi	r7,r7,4
 1007568:	d9c14015 	stw	r7,1280(sp)
 100756c:	2007d7fa 	srai	r3,r4,31
 1007570:	d9c14017 	ldw	r7,1280(sp)
 1007574:	11000015 	stw	r4,0(r2)
 1007578:	10c00115 	stw	r3,4(r2)
 100757c:	003c6906 	br	1006724 <___vfprintf_internal_r+0x170>
 1007580:	b8c00007 	ldb	r3,0(r23)
 1007584:	00801b04 	movi	r2,108
 1007588:	18824f26 	beq	r3,r2,1007ec8 <___vfprintf_internal_r+0x1914>
 100758c:	d9414c17 	ldw	r5,1328(sp)
 1007590:	29400414 	ori	r5,r5,16
 1007594:	d9414c15 	stw	r5,1328(sp)
 1007598:	003c8506 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 100759c:	d9814c17 	ldw	r6,1328(sp)
 10075a0:	b8c00007 	ldb	r3,0(r23)
 10075a4:	31800814 	ori	r6,r6,32
 10075a8:	d9814c15 	stw	r6,1328(sp)
 10075ac:	003c8006 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 10075b0:	d8814c17 	ldw	r2,1328(sp)
 10075b4:	3c000017 	ldw	r16,0(r7)
 10075b8:	00c01e04 	movi	r3,120
 10075bc:	10800094 	ori	r2,r2,2
 10075c0:	d8814c15 	stw	r2,1328(sp)
 10075c4:	39c00104 	addi	r7,r7,4
 10075c8:	014040b4 	movhi	r5,258
 10075cc:	2968c704 	addi	r5,r5,-23780
 10075d0:	00800c04 	movi	r2,48
 10075d4:	0023883a 	mov	r17,zero
 10075d8:	01000084 	movi	r4,2
 10075dc:	d9c14015 	stw	r7,1280(sp)
 10075e0:	d8c14d15 	stw	r3,1332(sp)
 10075e4:	d9414415 	stw	r5,1296(sp)
 10075e8:	d8800445 	stb	r2,17(sp)
 10075ec:	d8c00485 	stb	r3,18(sp)
 10075f0:	d8000405 	stb	zero,16(sp)
 10075f4:	003e7d06 	br	1006fec <___vfprintf_internal_r+0xa38>
 10075f8:	d8814c17 	ldw	r2,1328(sp)
 10075fc:	b8c00007 	ldb	r3,0(r23)
 1007600:	10801014 	ori	r2,r2,64
 1007604:	d8814c15 	stw	r2,1328(sp)
 1007608:	003c6906 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 100760c:	d9414c17 	ldw	r5,1328(sp)
 1007610:	2880020c 	andi	r2,r5,8
 1007614:	1001df26 	beq	r2,zero,1007d94 <___vfprintf_internal_r+0x17e0>
 1007618:	39800017 	ldw	r6,0(r7)
 100761c:	38800204 	addi	r2,r7,8
 1007620:	d8814015 	stw	r2,1280(sp)
 1007624:	d9814215 	stw	r6,1288(sp)
 1007628:	39c00117 	ldw	r7,4(r7)
 100762c:	d9c14315 	stw	r7,1292(sp)
 1007630:	d9014217 	ldw	r4,1288(sp)
 1007634:	d9414317 	ldw	r5,1292(sp)
 1007638:	100e75c0 	call	100e75c <__isinfd>
 100763c:	10021726 	beq	r2,zero,1007e9c <___vfprintf_internal_r+0x18e8>
 1007640:	d9014217 	ldw	r4,1288(sp)
 1007644:	d9414317 	ldw	r5,1292(sp)
 1007648:	000d883a 	mov	r6,zero
 100764c:	000f883a 	mov	r7,zero
 1007650:	1014f0c0 	call	1014f0c <__ltdf2>
 1007654:	1002ca16 	blt	r2,zero,1008180 <___vfprintf_internal_r+0x1bcc>
 1007658:	d9414d17 	ldw	r5,1332(sp)
 100765c:	008011c4 	movi	r2,71
 1007660:	11420a16 	blt	r2,r5,1007e8c <___vfprintf_internal_r+0x18d8>
 1007664:	018040b4 	movhi	r6,258
 1007668:	31a8cc04 	addi	r6,r6,-23760
 100766c:	d9814115 	stw	r6,1284(sp)
 1007670:	d9014c17 	ldw	r4,1328(sp)
 1007674:	00c000c4 	movi	r3,3
 1007678:	00bfdfc4 	movi	r2,-129
 100767c:	2088703a 	and	r4,r4,r2
 1007680:	180f883a 	mov	r7,r3
 1007684:	d8c14515 	stw	r3,1300(sp)
 1007688:	d9014c15 	stw	r4,1328(sp)
 100768c:	d8014615 	stw	zero,1304(sp)
 1007690:	003e6a06 	br	100703c <___vfprintf_internal_r+0xa88>
 1007694:	38800017 	ldw	r2,0(r7)
 1007698:	00c00044 	movi	r3,1
 100769c:	39c00104 	addi	r7,r7,4
 10076a0:	d9c14015 	stw	r7,1280(sp)
 10076a4:	d9000f04 	addi	r4,sp,60
 10076a8:	180f883a 	mov	r7,r3
 10076ac:	d8c14515 	stw	r3,1300(sp)
 10076b0:	d9014115 	stw	r4,1284(sp)
 10076b4:	d8800f05 	stb	r2,60(sp)
 10076b8:	d8000405 	stb	zero,16(sp)
 10076bc:	003cac06 	br	1006970 <___vfprintf_internal_r+0x3bc>
 10076c0:	014040b4 	movhi	r5,258
 10076c4:	2968d204 	addi	r5,r5,-23736
 10076c8:	d9414415 	stw	r5,1296(sp)
 10076cc:	d9814c17 	ldw	r6,1328(sp)
 10076d0:	3080080c 	andi	r2,r6,32
 10076d4:	1000f926 	beq	r2,zero,1007abc <___vfprintf_internal_r+0x1508>
 10076d8:	3c000017 	ldw	r16,0(r7)
 10076dc:	3c400117 	ldw	r17,4(r7)
 10076e0:	38800204 	addi	r2,r7,8
 10076e4:	d8814015 	stw	r2,1280(sp)
 10076e8:	d9414c17 	ldw	r5,1328(sp)
 10076ec:	2880004c 	andi	r2,r5,1
 10076f0:	1005003a 	cmpeq	r2,r2,zero
 10076f4:	1000b31e 	bne	r2,zero,10079c4 <___vfprintf_internal_r+0x1410>
 10076f8:	8444b03a 	or	r2,r16,r17
 10076fc:	1000b126 	beq	r2,zero,10079c4 <___vfprintf_internal_r+0x1410>
 1007700:	d9814d17 	ldw	r6,1332(sp)
 1007704:	29400094 	ori	r5,r5,2
 1007708:	00800c04 	movi	r2,48
 100770c:	01000084 	movi	r4,2
 1007710:	d9414c15 	stw	r5,1328(sp)
 1007714:	d8800445 	stb	r2,17(sp)
 1007718:	d9800485 	stb	r6,18(sp)
 100771c:	d8000405 	stb	zero,16(sp)
 1007720:	003e3206 	br	1006fec <___vfprintf_internal_r+0xa38>
 1007724:	018040b4 	movhi	r6,258
 1007728:	31a8c704 	addi	r6,r6,-23780
 100772c:	d9814415 	stw	r6,1296(sp)
 1007730:	003fe606 	br	10076cc <___vfprintf_internal_r+0x1118>
 1007734:	00800ac4 	movi	r2,43
 1007738:	d8800405 	stb	r2,16(sp)
 100773c:	b8c00007 	ldb	r3,0(r23)
 1007740:	003c1b06 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007744:	d8814c17 	ldw	r2,1328(sp)
 1007748:	b8c00007 	ldb	r3,0(r23)
 100774c:	10800054 	ori	r2,r2,1
 1007750:	d8814c15 	stw	r2,1328(sp)
 1007754:	003c1606 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007758:	d8800407 	ldb	r2,16(sp)
 100775c:	1000461e 	bne	r2,zero,1007878 <___vfprintf_internal_r+0x12c4>
 1007760:	00800804 	movi	r2,32
 1007764:	d8800405 	stb	r2,16(sp)
 1007768:	b8c00007 	ldb	r3,0(r23)
 100776c:	003c1006 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007770:	d9814c17 	ldw	r6,1328(sp)
 1007774:	b8c00007 	ldb	r3,0(r23)
 1007778:	31800214 	ori	r6,r6,8
 100777c:	d9814c15 	stw	r6,1328(sp)
 1007780:	003c0b06 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007784:	0007883a 	mov	r3,zero
 1007788:	01000244 	movi	r4,9
 100778c:	188002a4 	muli	r2,r3,10
 1007790:	b8c00007 	ldb	r3,0(r23)
 1007794:	d9814d17 	ldw	r6,1332(sp)
 1007798:	bdc00044 	addi	r23,r23,1
 100779c:	d8c14d15 	stw	r3,1332(sp)
 10077a0:	d9414d17 	ldw	r5,1332(sp)
 10077a4:	3085883a 	add	r2,r6,r2
 10077a8:	10fff404 	addi	r3,r2,-48
 10077ac:	28bff404 	addi	r2,r5,-48
 10077b0:	20bff62e 	bgeu	r4,r2,100778c <___vfprintf_internal_r+0x11d8>
 10077b4:	d8c14a15 	stw	r3,1320(sp)
 10077b8:	003bff06 	br	10067b8 <___vfprintf_internal_r+0x204>
 10077bc:	d9414c17 	ldw	r5,1328(sp)
 10077c0:	b8c00007 	ldb	r3,0(r23)
 10077c4:	29402014 	ori	r5,r5,128
 10077c8:	d9414c15 	stw	r5,1328(sp)
 10077cc:	003bf806 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 10077d0:	b8c00007 	ldb	r3,0(r23)
 10077d4:	00800a84 	movi	r2,42
 10077d8:	bdc00044 	addi	r23,r23,1
 10077dc:	18831526 	beq	r3,r2,1008434 <___vfprintf_internal_r+0x1e80>
 10077e0:	d8c14d15 	stw	r3,1332(sp)
 10077e4:	18bff404 	addi	r2,r3,-48
 10077e8:	00c00244 	movi	r3,9
 10077ec:	18827836 	bltu	r3,r2,10081d0 <___vfprintf_internal_r+0x1c1c>
 10077f0:	000d883a 	mov	r6,zero
 10077f4:	308002a4 	muli	r2,r6,10
 10077f8:	b9800007 	ldb	r6,0(r23)
 10077fc:	d9414d17 	ldw	r5,1332(sp)
 1007800:	bdc00044 	addi	r23,r23,1
 1007804:	d9814d15 	stw	r6,1332(sp)
 1007808:	d9014d17 	ldw	r4,1332(sp)
 100780c:	1145883a 	add	r2,r2,r5
 1007810:	11bff404 	addi	r6,r2,-48
 1007814:	20bff404 	addi	r2,r4,-48
 1007818:	18bff62e 	bgeu	r3,r2,10077f4 <___vfprintf_internal_r+0x1240>
 100781c:	3027883a 	mov	r19,r6
 1007820:	303be50e 	bge	r6,zero,10067b8 <___vfprintf_internal_r+0x204>
 1007824:	04ffffc4 	movi	r19,-1
 1007828:	003be306 	br	10067b8 <___vfprintf_internal_r+0x204>
 100782c:	d8000405 	stb	zero,16(sp)
 1007830:	39800017 	ldw	r6,0(r7)
 1007834:	39c00104 	addi	r7,r7,4
 1007838:	d9c14015 	stw	r7,1280(sp)
 100783c:	d9814115 	stw	r6,1284(sp)
 1007840:	3001c926 	beq	r6,zero,1007f68 <___vfprintf_internal_r+0x19b4>
 1007844:	98000e16 	blt	r19,zero,1007880 <___vfprintf_internal_r+0x12cc>
 1007848:	d9014117 	ldw	r4,1284(sp)
 100784c:	000b883a 	mov	r5,zero
 1007850:	980d883a 	mov	r6,r19
 1007854:	100cbe40 	call	100cbe4 <memchr>
 1007858:	10025926 	beq	r2,zero,10081c0 <___vfprintf_internal_r+0x1c0c>
 100785c:	d8c14117 	ldw	r3,1284(sp)
 1007860:	10cfc83a 	sub	r7,r2,r3
 1007864:	99c19e16 	blt	r19,r7,1007ee0 <___vfprintf_internal_r+0x192c>
 1007868:	d9c14515 	stw	r7,1300(sp)
 100786c:	38000916 	blt	r7,zero,1007894 <___vfprintf_internal_r+0x12e0>
 1007870:	d8014615 	stw	zero,1304(sp)
 1007874:	003df106 	br	100703c <___vfprintf_internal_r+0xa88>
 1007878:	b8c00007 	ldb	r3,0(r23)
 100787c:	003bcc06 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007880:	d9014117 	ldw	r4,1284(sp)
 1007884:	10064cc0 	call	10064cc <strlen>
 1007888:	d8814515 	stw	r2,1300(sp)
 100788c:	100f883a 	mov	r7,r2
 1007890:	103ff70e 	bge	r2,zero,1007870 <___vfprintf_internal_r+0x12bc>
 1007894:	d8014515 	stw	zero,1300(sp)
 1007898:	d8014615 	stw	zero,1304(sp)
 100789c:	003de706 	br	100703c <___vfprintf_internal_r+0xa88>
 10078a0:	20c03fcc 	andi	r3,r4,255
 10078a4:	00800044 	movi	r2,1
 10078a8:	18802d26 	beq	r3,r2,1007960 <___vfprintf_internal_r+0x13ac>
 10078ac:	18800e36 	bltu	r3,r2,10078e8 <___vfprintf_internal_r+0x1334>
 10078b0:	00800084 	movi	r2,2
 10078b4:	1880fa26 	beq	r3,r2,1007ca0 <___vfprintf_internal_r+0x16ec>
 10078b8:	010040b4 	movhi	r4,258
 10078bc:	2128d704 	addi	r4,r4,-23716
 10078c0:	10064cc0 	call	10064cc <strlen>
 10078c4:	100f883a 	mov	r7,r2
 10078c8:	dcc14515 	stw	r19,1300(sp)
 10078cc:	9880010e 	bge	r19,r2,10078d4 <___vfprintf_internal_r+0x1320>
 10078d0:	d8814515 	stw	r2,1300(sp)
 10078d4:	008040b4 	movhi	r2,258
 10078d8:	10a8d704 	addi	r2,r2,-23716
 10078dc:	dcc14615 	stw	r19,1304(sp)
 10078e0:	d8814115 	stw	r2,1284(sp)
 10078e4:	003dd506 	br	100703c <___vfprintf_internal_r+0xa88>
 10078e8:	d9401904 	addi	r5,sp,100
 10078ec:	dd000f04 	addi	r20,sp,60
 10078f0:	d9414115 	stw	r5,1284(sp)
 10078f4:	880a977a 	slli	r5,r17,29
 10078f8:	d9814117 	ldw	r6,1284(sp)
 10078fc:	8004d0fa 	srli	r2,r16,3
 1007900:	8806d0fa 	srli	r3,r17,3
 1007904:	810001cc 	andi	r4,r16,7
 1007908:	2884b03a 	or	r2,r5,r2
 100790c:	31bfffc4 	addi	r6,r6,-1
 1007910:	21000c04 	addi	r4,r4,48
 1007914:	d9814115 	stw	r6,1284(sp)
 1007918:	10cab03a 	or	r5,r2,r3
 100791c:	31000005 	stb	r4,0(r6)
 1007920:	1021883a 	mov	r16,r2
 1007924:	1823883a 	mov	r17,r3
 1007928:	283ff21e 	bne	r5,zero,10078f4 <___vfprintf_internal_r+0x1340>
 100792c:	d8c14c17 	ldw	r3,1328(sp)
 1007930:	1880004c 	andi	r2,r3,1
 1007934:	1005003a 	cmpeq	r2,r2,zero
 1007938:	103db91e 	bne	r2,zero,1007020 <___vfprintf_internal_r+0xa6c>
 100793c:	20803fcc 	andi	r2,r4,255
 1007940:	1080201c 	xori	r2,r2,128
 1007944:	10bfe004 	addi	r2,r2,-128
 1007948:	00c00c04 	movi	r3,48
 100794c:	10fdb426 	beq	r2,r3,1007020 <___vfprintf_internal_r+0xa6c>
 1007950:	31bfffc4 	addi	r6,r6,-1
 1007954:	d9814115 	stw	r6,1284(sp)
 1007958:	30c00005 	stb	r3,0(r6)
 100795c:	003db006 	br	1007020 <___vfprintf_internal_r+0xa6c>
 1007960:	88800068 	cmpgeui	r2,r17,1
 1007964:	10002c1e 	bne	r2,zero,1007a18 <___vfprintf_internal_r+0x1464>
 1007968:	8800021e 	bne	r17,zero,1007974 <___vfprintf_internal_r+0x13c0>
 100796c:	00800244 	movi	r2,9
 1007970:	14002936 	bltu	r2,r16,1007a18 <___vfprintf_internal_r+0x1464>
 1007974:	d90018c4 	addi	r4,sp,99
 1007978:	dd000f04 	addi	r20,sp,60
 100797c:	d9014115 	stw	r4,1284(sp)
 1007980:	d9014117 	ldw	r4,1284(sp)
 1007984:	80800c04 	addi	r2,r16,48
 1007988:	20800005 	stb	r2,0(r4)
 100798c:	003da406 	br	1007020 <___vfprintf_internal_r+0xa6c>
 1007990:	dc400d17 	ldw	r17,52(sp)
 1007994:	070040b4 	movhi	fp,258
 1007998:	e728de84 	addi	fp,fp,-23686
 100799c:	9425883a 	add	r18,r18,r16
 10079a0:	8c400044 	addi	r17,r17,1
 10079a4:	008001c4 	movi	r2,7
 10079a8:	1f000015 	stw	fp,0(r3)
 10079ac:	1c000115 	stw	r16,4(r3)
 10079b0:	dc800e15 	stw	r18,56(sp)
 10079b4:	dc400d15 	stw	r17,52(sp)
 10079b8:	147de216 	blt	r2,r17,1007144 <___vfprintf_internal_r+0xb90>
 10079bc:	18c00204 	addi	r3,r3,8
 10079c0:	003c7a06 	br	1006bac <___vfprintf_internal_r+0x5f8>
 10079c4:	01000084 	movi	r4,2
 10079c8:	d8000405 	stb	zero,16(sp)
 10079cc:	003d8706 	br	1006fec <___vfprintf_internal_r+0xa38>
 10079d0:	d9814c17 	ldw	r6,1328(sp)
 10079d4:	30c4703a 	and	r2,r6,r3
 10079d8:	1005003a 	cmpeq	r2,r2,zero
 10079dc:	103cb926 	beq	r2,zero,1006cc4 <___vfprintf_internal_r+0x710>
 10079e0:	d9014117 	ldw	r4,1284(sp)
 10079e4:	94800044 	addi	r18,r18,1
 10079e8:	8c400044 	addi	r17,r17,1
 10079ec:	008001c4 	movi	r2,7
 10079f0:	a9000015 	stw	r4,0(r21)
 10079f4:	a8c00115 	stw	r3,4(r21)
 10079f8:	dc800e15 	stw	r18,56(sp)
 10079fc:	dc400d15 	stw	r17,52(sp)
 1007a00:	147e6616 	blt	r2,r17,100739c <___vfprintf_internal_r+0xde8>
 1007a04:	acc00204 	addi	r19,r21,8
 1007a08:	003cd706 	br	1006d68 <___vfprintf_internal_r+0x7b4>
 1007a0c:	070040b4 	movhi	fp,258
 1007a10:	e728de84 	addi	fp,fp,-23686
 1007a14:	003c4f06 	br	1006b54 <___vfprintf_internal_r+0x5a0>
 1007a18:	dd000f04 	addi	r20,sp,60
 1007a1c:	dc801904 	addi	r18,sp,100
 1007a20:	8009883a 	mov	r4,r16
 1007a24:	880b883a 	mov	r5,r17
 1007a28:	01800284 	movi	r6,10
 1007a2c:	000f883a 	mov	r7,zero
 1007a30:	1013ab40 	call	1013ab4 <__umoddi3>
 1007a34:	12000c04 	addi	r8,r2,48
 1007a38:	94bfffc4 	addi	r18,r18,-1
 1007a3c:	8009883a 	mov	r4,r16
 1007a40:	880b883a 	mov	r5,r17
 1007a44:	01800284 	movi	r6,10
 1007a48:	000f883a 	mov	r7,zero
 1007a4c:	92000005 	stb	r8,0(r18)
 1007a50:	10134d80 	call	10134d8 <__udivdi3>
 1007a54:	1009883a 	mov	r4,r2
 1007a58:	1021883a 	mov	r16,r2
 1007a5c:	18800068 	cmpgeui	r2,r3,1
 1007a60:	1823883a 	mov	r17,r3
 1007a64:	103fee1e 	bne	r2,zero,1007a20 <___vfprintf_internal_r+0x146c>
 1007a68:	1800021e 	bne	r3,zero,1007a74 <___vfprintf_internal_r+0x14c0>
 1007a6c:	00800244 	movi	r2,9
 1007a70:	113feb36 	bltu	r2,r4,1007a20 <___vfprintf_internal_r+0x146c>
 1007a74:	94bfffc4 	addi	r18,r18,-1
 1007a78:	dc814115 	stw	r18,1284(sp)
 1007a7c:	003fc006 	br	1007980 <___vfprintf_internal_r+0x13cc>
 1007a80:	d9014c17 	ldw	r4,1328(sp)
 1007a84:	2080004c 	andi	r2,r4,1
 1007a88:	10009a1e 	bne	r2,zero,1007cf4 <___vfprintf_internal_r+0x1740>
 1007a8c:	d9401904 	addi	r5,sp,100
 1007a90:	dd000f04 	addi	r20,sp,60
 1007a94:	d9414115 	stw	r5,1284(sp)
 1007a98:	003d6106 	br	1007020 <___vfprintf_internal_r+0xa6c>
 1007a9c:	d9014f17 	ldw	r4,1340(sp)
 1007aa0:	b00b883a 	mov	r5,r22
 1007aa4:	d9800c04 	addi	r6,sp,48
 1007aa8:	100655c0 	call	100655c <__sprint_r>
 1007aac:	103c791e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007ab0:	dc800e17 	ldw	r18,56(sp)
 1007ab4:	d8c01904 	addi	r3,sp,100
 1007ab8:	003cff06 	br	1006eb8 <___vfprintf_internal_r+0x904>
 1007abc:	d8c14c17 	ldw	r3,1328(sp)
 1007ac0:	1880040c 	andi	r2,r3,16
 1007ac4:	1000711e 	bne	r2,zero,1007c8c <___vfprintf_internal_r+0x16d8>
 1007ac8:	d9014c17 	ldw	r4,1328(sp)
 1007acc:	2080100c 	andi	r2,r4,64
 1007ad0:	10006e26 	beq	r2,zero,1007c8c <___vfprintf_internal_r+0x16d8>
 1007ad4:	3c00000b 	ldhu	r16,0(r7)
 1007ad8:	0023883a 	mov	r17,zero
 1007adc:	39c00104 	addi	r7,r7,4
 1007ae0:	d9c14015 	stw	r7,1280(sp)
 1007ae4:	003f0006 	br	10076e8 <___vfprintf_internal_r+0x1134>
 1007ae8:	dc400d17 	ldw	r17,52(sp)
 1007aec:	070040b4 	movhi	fp,258
 1007af0:	e728de84 	addi	fp,fp,-23686
 1007af4:	9425883a 	add	r18,r18,r16
 1007af8:	8c400044 	addi	r17,r17,1
 1007afc:	008001c4 	movi	r2,7
 1007b00:	1f000015 	stw	fp,0(r3)
 1007b04:	1c000115 	stw	r16,4(r3)
 1007b08:	dc800e15 	stw	r18,56(sp)
 1007b0c:	dc400d15 	stw	r17,52(sp)
 1007b10:	147d7616 	blt	r2,r17,10070ec <___vfprintf_internal_r+0xb38>
 1007b14:	18c00204 	addi	r3,r3,8
 1007b18:	003d7b06 	br	1007108 <___vfprintf_internal_r+0xb54>
 1007b1c:	dc800e17 	ldw	r18,56(sp)
 1007b20:	dc400d17 	ldw	r17,52(sp)
 1007b24:	070040b4 	movhi	fp,258
 1007b28:	e728e284 	addi	fp,fp,-23670
 1007b2c:	003bc006 	br	1006a30 <___vfprintf_internal_r+0x47c>
 1007b30:	d9014f17 	ldw	r4,1340(sp)
 1007b34:	b00b883a 	mov	r5,r22
 1007b38:	d9800c04 	addi	r6,sp,48
 1007b3c:	100655c0 	call	100655c <__sprint_r>
 1007b40:	103c541e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007b44:	dc800e17 	ldw	r18,56(sp)
 1007b48:	d8c01904 	addi	r3,sp,100
 1007b4c:	003ce906 	br	1006ef4 <___vfprintf_internal_r+0x940>
 1007b50:	3c000017 	ldw	r16,0(r7)
 1007b54:	0009883a 	mov	r4,zero
 1007b58:	39c00104 	addi	r7,r7,4
 1007b5c:	0023883a 	mov	r17,zero
 1007b60:	d9c14015 	stw	r7,1280(sp)
 1007b64:	d8000405 	stb	zero,16(sp)
 1007b68:	003d2006 	br	1006fec <___vfprintf_internal_r+0xa38>
 1007b6c:	38800017 	ldw	r2,0(r7)
 1007b70:	39c00104 	addi	r7,r7,4
 1007b74:	d9c14015 	stw	r7,1280(sp)
 1007b78:	1023d7fa 	srai	r17,r2,31
 1007b7c:	1021883a 	mov	r16,r2
 1007b80:	003d1806 	br	1006fe4 <___vfprintf_internal_r+0xa30>
 1007b84:	3c000017 	ldw	r16,0(r7)
 1007b88:	01000044 	movi	r4,1
 1007b8c:	39c00104 	addi	r7,r7,4
 1007b90:	0023883a 	mov	r17,zero
 1007b94:	d9c14015 	stw	r7,1280(sp)
 1007b98:	d8000405 	stb	zero,16(sp)
 1007b9c:	003d1306 	br	1006fec <___vfprintf_internal_r+0xa38>
 1007ba0:	008040b4 	movhi	r2,258
 1007ba4:	10a8de04 	addi	r2,r2,-23688
 1007ba8:	94800044 	addi	r18,r18,1
 1007bac:	8c400044 	addi	r17,r17,1
 1007bb0:	a8800015 	stw	r2,0(r21)
 1007bb4:	00c00044 	movi	r3,1
 1007bb8:	008001c4 	movi	r2,7
 1007bbc:	a8c00115 	stw	r3,4(r21)
 1007bc0:	dc800e15 	stw	r18,56(sp)
 1007bc4:	dc400d15 	stw	r17,52(sp)
 1007bc8:	1440ca16 	blt	r2,r17,1007ef4 <___vfprintf_internal_r+0x1940>
 1007bcc:	a8c00204 	addi	r3,r21,8
 1007bd0:	2000061e 	bne	r4,zero,1007bec <___vfprintf_internal_r+0x1638>
 1007bd4:	d9414717 	ldw	r5,1308(sp)
 1007bd8:	2800041e 	bne	r5,zero,1007bec <___vfprintf_internal_r+0x1638>
 1007bdc:	d9814c17 	ldw	r6,1328(sp)
 1007be0:	3080004c 	andi	r2,r6,1
 1007be4:	1005003a 	cmpeq	r2,r2,zero
 1007be8:	103bf01e 	bne	r2,zero,1006bac <___vfprintf_internal_r+0x5f8>
 1007bec:	00800044 	movi	r2,1
 1007bf0:	dc400d17 	ldw	r17,52(sp)
 1007bf4:	18800115 	stw	r2,4(r3)
 1007bf8:	d8814917 	ldw	r2,1316(sp)
 1007bfc:	94800044 	addi	r18,r18,1
 1007c00:	8c400044 	addi	r17,r17,1
 1007c04:	18800015 	stw	r2,0(r3)
 1007c08:	008001c4 	movi	r2,7
 1007c0c:	dc800e15 	stw	r18,56(sp)
 1007c10:	dc400d15 	stw	r17,52(sp)
 1007c14:	1440ca16 	blt	r2,r17,1007f40 <___vfprintf_internal_r+0x198c>
 1007c18:	18c00204 	addi	r3,r3,8
 1007c1c:	0121c83a 	sub	r16,zero,r4
 1007c20:	0400500e 	bge	zero,r16,1007d64 <___vfprintf_internal_r+0x17b0>
 1007c24:	00800404 	movi	r2,16
 1007c28:	1400800e 	bge	r2,r16,1007e2c <___vfprintf_internal_r+0x1878>
 1007c2c:	1027883a 	mov	r19,r2
 1007c30:	070040b4 	movhi	fp,258
 1007c34:	e728de84 	addi	fp,fp,-23686
 1007c38:	050001c4 	movi	r20,7
 1007c3c:	00000306 	br	1007c4c <___vfprintf_internal_r+0x1698>
 1007c40:	18c00204 	addi	r3,r3,8
 1007c44:	843ffc04 	addi	r16,r16,-16
 1007c48:	9c007a0e 	bge	r19,r16,1007e34 <___vfprintf_internal_r+0x1880>
 1007c4c:	94800404 	addi	r18,r18,16
 1007c50:	8c400044 	addi	r17,r17,1
 1007c54:	1f000015 	stw	fp,0(r3)
 1007c58:	1cc00115 	stw	r19,4(r3)
 1007c5c:	dc800e15 	stw	r18,56(sp)
 1007c60:	dc400d15 	stw	r17,52(sp)
 1007c64:	a47ff60e 	bge	r20,r17,1007c40 <___vfprintf_internal_r+0x168c>
 1007c68:	d9014f17 	ldw	r4,1340(sp)
 1007c6c:	b00b883a 	mov	r5,r22
 1007c70:	d9800c04 	addi	r6,sp,48
 1007c74:	100655c0 	call	100655c <__sprint_r>
 1007c78:	103c061e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007c7c:	dc800e17 	ldw	r18,56(sp)
 1007c80:	dc400d17 	ldw	r17,52(sp)
 1007c84:	d8c01904 	addi	r3,sp,100
 1007c88:	003fee06 	br	1007c44 <___vfprintf_internal_r+0x1690>
 1007c8c:	3c000017 	ldw	r16,0(r7)
 1007c90:	0023883a 	mov	r17,zero
 1007c94:	39c00104 	addi	r7,r7,4
 1007c98:	d9c14015 	stw	r7,1280(sp)
 1007c9c:	003e9206 	br	10076e8 <___vfprintf_internal_r+0x1134>
 1007ca0:	d9401904 	addi	r5,sp,100
 1007ca4:	dd000f04 	addi	r20,sp,60
 1007ca8:	d9414115 	stw	r5,1284(sp)
 1007cac:	d9814417 	ldw	r6,1296(sp)
 1007cb0:	880a973a 	slli	r5,r17,28
 1007cb4:	8004d13a 	srli	r2,r16,4
 1007cb8:	810003cc 	andi	r4,r16,15
 1007cbc:	3109883a 	add	r4,r6,r4
 1007cc0:	2884b03a 	or	r2,r5,r2
 1007cc4:	21400003 	ldbu	r5,0(r4)
 1007cc8:	d9014117 	ldw	r4,1284(sp)
 1007ccc:	8806d13a 	srli	r3,r17,4
 1007cd0:	1021883a 	mov	r16,r2
 1007cd4:	213fffc4 	addi	r4,r4,-1
 1007cd8:	d9014115 	stw	r4,1284(sp)
 1007cdc:	d9814117 	ldw	r6,1284(sp)
 1007ce0:	10c8b03a 	or	r4,r2,r3
 1007ce4:	1823883a 	mov	r17,r3
 1007ce8:	31400005 	stb	r5,0(r6)
 1007cec:	203fef1e 	bne	r4,zero,1007cac <___vfprintf_internal_r+0x16f8>
 1007cf0:	003ccb06 	br	1007020 <___vfprintf_internal_r+0xa6c>
 1007cf4:	00800c04 	movi	r2,48
 1007cf8:	d98018c4 	addi	r6,sp,99
 1007cfc:	dd000f04 	addi	r20,sp,60
 1007d00:	d88018c5 	stb	r2,99(sp)
 1007d04:	d9814115 	stw	r6,1284(sp)
 1007d08:	003cc506 	br	1007020 <___vfprintf_internal_r+0xa6c>
 1007d0c:	dc400d17 	ldw	r17,52(sp)
 1007d10:	070040b4 	movhi	fp,258
 1007d14:	e728e284 	addi	fp,fp,-23670
 1007d18:	003bc706 	br	1006c38 <___vfprintf_internal_r+0x684>
 1007d1c:	d9414c17 	ldw	r5,1328(sp)
 1007d20:	2880040c 	andi	r2,r5,16
 1007d24:	10007c26 	beq	r2,zero,1007f18 <___vfprintf_internal_r+0x1964>
 1007d28:	38800017 	ldw	r2,0(r7)
 1007d2c:	39c00104 	addi	r7,r7,4
 1007d30:	d9c14015 	stw	r7,1280(sp)
 1007d34:	d9814b17 	ldw	r6,1324(sp)
 1007d38:	d9c14017 	ldw	r7,1280(sp)
 1007d3c:	11800015 	stw	r6,0(r2)
 1007d40:	003a7806 	br	1006724 <___vfprintf_internal_r+0x170>
 1007d44:	d9014f17 	ldw	r4,1340(sp)
 1007d48:	b00b883a 	mov	r5,r22
 1007d4c:	d9800c04 	addi	r6,sp,48
 1007d50:	100655c0 	call	100655c <__sprint_r>
 1007d54:	103bcf1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007d58:	dc800e17 	ldw	r18,56(sp)
 1007d5c:	dc400d17 	ldw	r17,52(sp)
 1007d60:	d8c01904 	addi	r3,sp,100
 1007d64:	d9014717 	ldw	r4,1308(sp)
 1007d68:	d9414117 	ldw	r5,1284(sp)
 1007d6c:	8c400044 	addi	r17,r17,1
 1007d70:	9125883a 	add	r18,r18,r4
 1007d74:	008001c4 	movi	r2,7
 1007d78:	19400015 	stw	r5,0(r3)
 1007d7c:	19000115 	stw	r4,4(r3)
 1007d80:	dc800e15 	stw	r18,56(sp)
 1007d84:	dc400d15 	stw	r17,52(sp)
 1007d88:	147cee16 	blt	r2,r17,1007144 <___vfprintf_internal_r+0xb90>
 1007d8c:	18c00204 	addi	r3,r3,8
 1007d90:	003b8606 	br	1006bac <___vfprintf_internal_r+0x5f8>
 1007d94:	38c00017 	ldw	r3,0(r7)
 1007d98:	39000204 	addi	r4,r7,8
 1007d9c:	d9014015 	stw	r4,1280(sp)
 1007da0:	d8c14215 	stw	r3,1288(sp)
 1007da4:	39c00117 	ldw	r7,4(r7)
 1007da8:	d9c14315 	stw	r7,1292(sp)
 1007dac:	003e2006 	br	1007630 <___vfprintf_internal_r+0x107c>
 1007db0:	0005883a 	mov	r2,zero
 1007db4:	1409c83a 	sub	r4,r2,r16
 1007db8:	1105803a 	cmpltu	r2,r2,r4
 1007dbc:	044bc83a 	sub	r5,zero,r17
 1007dc0:	2885c83a 	sub	r2,r5,r2
 1007dc4:	2021883a 	mov	r16,r4
 1007dc8:	1023883a 	mov	r17,r2
 1007dcc:	01000044 	movi	r4,1
 1007dd0:	00800b44 	movi	r2,45
 1007dd4:	d8800405 	stb	r2,16(sp)
 1007dd8:	003c8406 	br	1006fec <___vfprintf_internal_r+0xa38>
 1007ddc:	d9014f17 	ldw	r4,1340(sp)
 1007de0:	b00b883a 	mov	r5,r22
 1007de4:	d9800c04 	addi	r6,sp,48
 1007de8:	100655c0 	call	100655c <__sprint_r>
 1007dec:	103ba91e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007df0:	dc800e17 	ldw	r18,56(sp)
 1007df4:	dc400d17 	ldw	r17,52(sp)
 1007df8:	d9000517 	ldw	r4,20(sp)
 1007dfc:	d9401904 	addi	r5,sp,100
 1007e00:	003da706 	br	10074a0 <___vfprintf_internal_r+0xeec>
 1007e04:	d9014f17 	ldw	r4,1340(sp)
 1007e08:	b00b883a 	mov	r5,r22
 1007e0c:	d9800c04 	addi	r6,sp,48
 1007e10:	100655c0 	call	100655c <__sprint_r>
 1007e14:	103b9f1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007e18:	dc800e17 	ldw	r18,56(sp)
 1007e1c:	dc400d17 	ldw	r17,52(sp)
 1007e20:	d9000517 	ldw	r4,20(sp)
 1007e24:	d8c01904 	addi	r3,sp,100
 1007e28:	003d9106 	br	1007470 <___vfprintf_internal_r+0xebc>
 1007e2c:	070040b4 	movhi	fp,258
 1007e30:	e728de84 	addi	fp,fp,-23686
 1007e34:	9425883a 	add	r18,r18,r16
 1007e38:	8c400044 	addi	r17,r17,1
 1007e3c:	008001c4 	movi	r2,7
 1007e40:	1f000015 	stw	fp,0(r3)
 1007e44:	1c000115 	stw	r16,4(r3)
 1007e48:	dc800e15 	stw	r18,56(sp)
 1007e4c:	dc400d15 	stw	r17,52(sp)
 1007e50:	147fbc16 	blt	r2,r17,1007d44 <___vfprintf_internal_r+0x1790>
 1007e54:	18c00204 	addi	r3,r3,8
 1007e58:	003fc206 	br	1007d64 <___vfprintf_internal_r+0x17b0>
 1007e5c:	d9014f17 	ldw	r4,1340(sp)
 1007e60:	b00b883a 	mov	r5,r22
 1007e64:	d9800c04 	addi	r6,sp,48
 1007e68:	100655c0 	call	100655c <__sprint_r>
 1007e6c:	103b891e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007e70:	dc800e17 	ldw	r18,56(sp)
 1007e74:	d9000517 	ldw	r4,20(sp)
 1007e78:	d8c01904 	addi	r3,sp,100
 1007e7c:	003d0206 	br	1007288 <___vfprintf_internal_r+0xcd4>
 1007e80:	070040b4 	movhi	fp,258
 1007e84:	e728de84 	addi	fp,fp,-23686
 1007e88:	003be406 	br	1006e1c <___vfprintf_internal_r+0x868>
 1007e8c:	008040b4 	movhi	r2,258
 1007e90:	10a8cd04 	addi	r2,r2,-23756
 1007e94:	d8814115 	stw	r2,1284(sp)
 1007e98:	003df506 	br	1007670 <___vfprintf_internal_r+0x10bc>
 1007e9c:	d9014217 	ldw	r4,1288(sp)
 1007ea0:	d9414317 	ldw	r5,1292(sp)
 1007ea4:	100e79c0 	call	100e79c <__isnand>
 1007ea8:	10003926 	beq	r2,zero,1007f90 <___vfprintf_internal_r+0x19dc>
 1007eac:	d9414d17 	ldw	r5,1332(sp)
 1007eb0:	008011c4 	movi	r2,71
 1007eb4:	1140ce16 	blt	r2,r5,10081f0 <___vfprintf_internal_r+0x1c3c>
 1007eb8:	018040b4 	movhi	r6,258
 1007ebc:	31a8ce04 	addi	r6,r6,-23752
 1007ec0:	d9814115 	stw	r6,1284(sp)
 1007ec4:	003dea06 	br	1007670 <___vfprintf_internal_r+0x10bc>
 1007ec8:	d9014c17 	ldw	r4,1328(sp)
 1007ecc:	bdc00044 	addi	r23,r23,1
 1007ed0:	b8c00007 	ldb	r3,0(r23)
 1007ed4:	21000814 	ori	r4,r4,32
 1007ed8:	d9014c15 	stw	r4,1328(sp)
 1007edc:	003a3406 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 1007ee0:	dcc14515 	stw	r19,1300(sp)
 1007ee4:	98011016 	blt	r19,zero,1008328 <___vfprintf_internal_r+0x1d74>
 1007ee8:	980f883a 	mov	r7,r19
 1007eec:	d8014615 	stw	zero,1304(sp)
 1007ef0:	003c5206 	br	100703c <___vfprintf_internal_r+0xa88>
 1007ef4:	d9014f17 	ldw	r4,1340(sp)
 1007ef8:	b00b883a 	mov	r5,r22
 1007efc:	d9800c04 	addi	r6,sp,48
 1007f00:	100655c0 	call	100655c <__sprint_r>
 1007f04:	103b631e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007f08:	dc800e17 	ldw	r18,56(sp)
 1007f0c:	d9000517 	ldw	r4,20(sp)
 1007f10:	d8c01904 	addi	r3,sp,100
 1007f14:	003f2e06 	br	1007bd0 <___vfprintf_internal_r+0x161c>
 1007f18:	d8c14c17 	ldw	r3,1328(sp)
 1007f1c:	1880100c 	andi	r2,r3,64
 1007f20:	1000a026 	beq	r2,zero,10081a4 <___vfprintf_internal_r+0x1bf0>
 1007f24:	38800017 	ldw	r2,0(r7)
 1007f28:	39c00104 	addi	r7,r7,4
 1007f2c:	d9c14015 	stw	r7,1280(sp)
 1007f30:	d9014b17 	ldw	r4,1324(sp)
 1007f34:	d9c14017 	ldw	r7,1280(sp)
 1007f38:	1100000d 	sth	r4,0(r2)
 1007f3c:	0039f906 	br	1006724 <___vfprintf_internal_r+0x170>
 1007f40:	d9014f17 	ldw	r4,1340(sp)
 1007f44:	b00b883a 	mov	r5,r22
 1007f48:	d9800c04 	addi	r6,sp,48
 1007f4c:	100655c0 	call	100655c <__sprint_r>
 1007f50:	103b501e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 1007f54:	dc800e17 	ldw	r18,56(sp)
 1007f58:	dc400d17 	ldw	r17,52(sp)
 1007f5c:	d9000517 	ldw	r4,20(sp)
 1007f60:	d8c01904 	addi	r3,sp,100
 1007f64:	003f2d06 	br	1007c1c <___vfprintf_internal_r+0x1668>
 1007f68:	00800184 	movi	r2,6
 1007f6c:	14c09a36 	bltu	r2,r19,10081d8 <___vfprintf_internal_r+0x1c24>
 1007f70:	dcc14515 	stw	r19,1300(sp)
 1007f74:	9800010e 	bge	r19,zero,1007f7c <___vfprintf_internal_r+0x19c8>
 1007f78:	d8014515 	stw	zero,1300(sp)
 1007f7c:	008040b4 	movhi	r2,258
 1007f80:	10a8d004 	addi	r2,r2,-23744
 1007f84:	980f883a 	mov	r7,r19
 1007f88:	d8814115 	stw	r2,1284(sp)
 1007f8c:	003a7806 	br	1006970 <___vfprintf_internal_r+0x3bc>
 1007f90:	00bfffc4 	movi	r2,-1
 1007f94:	9880e226 	beq	r19,r2,1008320 <___vfprintf_internal_r+0x1d6c>
 1007f98:	d9414d17 	ldw	r5,1332(sp)
 1007f9c:	008019c4 	movi	r2,103
 1007fa0:	2880dc26 	beq	r5,r2,1008314 <___vfprintf_internal_r+0x1d60>
 1007fa4:	008011c4 	movi	r2,71
 1007fa8:	2880da26 	beq	r5,r2,1008314 <___vfprintf_internal_r+0x1d60>
 1007fac:	d9414c17 	ldw	r5,1328(sp)
 1007fb0:	d9014317 	ldw	r4,1292(sp)
 1007fb4:	d9814217 	ldw	r6,1288(sp)
 1007fb8:	29404014 	ori	r5,r5,256
 1007fbc:	d9414c15 	stw	r5,1328(sp)
 1007fc0:	2000cc16 	blt	r4,zero,10082f4 <___vfprintf_internal_r+0x1d40>
 1007fc4:	3021883a 	mov	r16,r6
 1007fc8:	2023883a 	mov	r17,r4
 1007fcc:	0039883a 	mov	fp,zero
 1007fd0:	d9414d17 	ldw	r5,1332(sp)
 1007fd4:	00801984 	movi	r2,102
 1007fd8:	2880b726 	beq	r5,r2,10082b8 <___vfprintf_internal_r+0x1d04>
 1007fdc:	00801184 	movi	r2,70
 1007fe0:	2880b526 	beq	r5,r2,10082b8 <___vfprintf_internal_r+0x1d04>
 1007fe4:	00801944 	movi	r2,101
 1007fe8:	2880c826 	beq	r5,r2,100830c <___vfprintf_internal_r+0x1d58>
 1007fec:	00801144 	movi	r2,69
 1007ff0:	2880c626 	beq	r5,r2,100830c <___vfprintf_internal_r+0x1d58>
 1007ff4:	9829883a 	mov	r20,r19
 1007ff8:	d9014f17 	ldw	r4,1340(sp)
 1007ffc:	d8800504 	addi	r2,sp,20
 1008000:	880d883a 	mov	r6,r17
 1008004:	d8800115 	stw	r2,4(sp)
 1008008:	d8c00604 	addi	r3,sp,24
 100800c:	d8800704 	addi	r2,sp,28
 1008010:	800b883a 	mov	r5,r16
 1008014:	01c00084 	movi	r7,2
 1008018:	d8c00215 	stw	r3,8(sp)
 100801c:	d8800315 	stw	r2,12(sp)
 1008020:	dd000015 	stw	r20,0(sp)
 1008024:	100a1240 	call	100a124 <_dtoa_r>
 1008028:	d9814d17 	ldw	r6,1332(sp)
 100802c:	d8814115 	stw	r2,1284(sp)
 1008030:	008019c4 	movi	r2,103
 1008034:	30809526 	beq	r6,r2,100828c <___vfprintf_internal_r+0x1cd8>
 1008038:	d8c14d17 	ldw	r3,1332(sp)
 100803c:	008011c4 	movi	r2,71
 1008040:	18809226 	beq	r3,r2,100828c <___vfprintf_internal_r+0x1cd8>
 1008044:	d9414117 	ldw	r5,1284(sp)
 1008048:	d9814d17 	ldw	r6,1332(sp)
 100804c:	00801984 	movi	r2,102
 1008050:	2d25883a 	add	r18,r5,r20
 1008054:	30808626 	beq	r6,r2,1008270 <___vfprintf_internal_r+0x1cbc>
 1008058:	00801184 	movi	r2,70
 100805c:	30808426 	beq	r6,r2,1008270 <___vfprintf_internal_r+0x1cbc>
 1008060:	000d883a 	mov	r6,zero
 1008064:	000f883a 	mov	r7,zero
 1008068:	880b883a 	mov	r5,r17
 100806c:	8009883a 	mov	r4,r16
 1008070:	1014cec0 	call	1014cec <__eqdf2>
 1008074:	1000751e 	bne	r2,zero,100824c <___vfprintf_internal_r+0x1c98>
 1008078:	9005883a 	mov	r2,r18
 100807c:	dc800715 	stw	r18,28(sp)
 1008080:	d9014117 	ldw	r4,1284(sp)
 1008084:	d9414d17 	ldw	r5,1332(sp)
 1008088:	00c019c4 	movi	r3,103
 100808c:	1125c83a 	sub	r18,r2,r4
 1008090:	28c06826 	beq	r5,r3,1008234 <___vfprintf_internal_r+0x1c80>
 1008094:	008011c4 	movi	r2,71
 1008098:	28806626 	beq	r5,r2,1008234 <___vfprintf_internal_r+0x1c80>
 100809c:	d9000517 	ldw	r4,20(sp)
 10080a0:	d8c14d17 	ldw	r3,1332(sp)
 10080a4:	00801944 	movi	r2,101
 10080a8:	10c05516 	blt	r2,r3,1008200 <___vfprintf_internal_r+0x1c4c>
 10080ac:	213fffc4 	addi	r4,r4,-1
 10080b0:	d9000515 	stw	r4,20(sp)
 10080b4:	d8c00805 	stb	r3,32(sp)
 10080b8:	2021883a 	mov	r16,r4
 10080bc:	2000c116 	blt	r4,zero,10083c4 <___vfprintf_internal_r+0x1e10>
 10080c0:	00800ac4 	movi	r2,43
 10080c4:	d8800845 	stb	r2,33(sp)
 10080c8:	00800244 	movi	r2,9
 10080cc:	1400af0e 	bge	r2,r16,100838c <___vfprintf_internal_r+0x1dd8>
 10080d0:	1027883a 	mov	r19,r2
 10080d4:	dc400b84 	addi	r17,sp,46
 10080d8:	8009883a 	mov	r4,r16
 10080dc:	01400284 	movi	r5,10
 10080e0:	10154d00 	call	10154d0 <__modsi3>
 10080e4:	10800c04 	addi	r2,r2,48
 10080e8:	8c7fffc4 	addi	r17,r17,-1
 10080ec:	8009883a 	mov	r4,r16
 10080f0:	01400284 	movi	r5,10
 10080f4:	88800005 	stb	r2,0(r17)
 10080f8:	10154700 	call	1015470 <__divsi3>
 10080fc:	1021883a 	mov	r16,r2
 1008100:	98bff516 	blt	r19,r2,10080d8 <___vfprintf_internal_r+0x1b24>
 1008104:	10c00c04 	addi	r3,r2,48
 1008108:	d88009c4 	addi	r2,sp,39
 100810c:	108001c4 	addi	r2,r2,7
 1008110:	897fffc4 	addi	r5,r17,-1
 1008114:	88ffffc5 	stb	r3,-1(r17)
 1008118:	2880a72e 	bgeu	r5,r2,10083b8 <___vfprintf_internal_r+0x1e04>
 100811c:	1009883a 	mov	r4,r2
 1008120:	d9800804 	addi	r6,sp,32
 1008124:	d8c00884 	addi	r3,sp,34
 1008128:	28800003 	ldbu	r2,0(r5)
 100812c:	29400044 	addi	r5,r5,1
 1008130:	18800005 	stb	r2,0(r3)
 1008134:	18c00044 	addi	r3,r3,1
 1008138:	293ffb36 	bltu	r5,r4,1008128 <___vfprintf_internal_r+0x1b74>
 100813c:	1987c83a 	sub	r3,r3,r6
 1008140:	00800044 	movi	r2,1
 1008144:	d8c14815 	stw	r3,1312(sp)
 1008148:	90cf883a 	add	r7,r18,r3
 100814c:	1480960e 	bge	r2,r18,10083a8 <___vfprintf_internal_r+0x1df4>
 1008150:	39c00044 	addi	r7,r7,1
 1008154:	d9c14515 	stw	r7,1300(sp)
 1008158:	38003416 	blt	r7,zero,100822c <___vfprintf_internal_r+0x1c78>
 100815c:	e0803fcc 	andi	r2,fp,255
 1008160:	1080201c 	xori	r2,r2,128
 1008164:	10bfe004 	addi	r2,r2,-128
 1008168:	10004e26 	beq	r2,zero,10082a4 <___vfprintf_internal_r+0x1cf0>
 100816c:	00800b44 	movi	r2,45
 1008170:	dc814715 	stw	r18,1308(sp)
 1008174:	d8014615 	stw	zero,1304(sp)
 1008178:	d8800405 	stb	r2,16(sp)
 100817c:	003bb106 	br	1007044 <___vfprintf_internal_r+0xa90>
 1008180:	00800b44 	movi	r2,45
 1008184:	d8800405 	stb	r2,16(sp)
 1008188:	003d3306 	br	1007658 <___vfprintf_internal_r+0x10a4>
 100818c:	d9014f17 	ldw	r4,1340(sp)
 1008190:	b00b883a 	mov	r5,r22
 1008194:	d9800c04 	addi	r6,sp,48
 1008198:	100655c0 	call	100655c <__sprint_r>
 100819c:	103abd1e 	bne	r2,zero,1006c94 <___vfprintf_internal_r+0x6e0>
 10081a0:	003abb06 	br	1006c90 <___vfprintf_internal_r+0x6dc>
 10081a4:	38800017 	ldw	r2,0(r7)
 10081a8:	39c00104 	addi	r7,r7,4
 10081ac:	d9c14015 	stw	r7,1280(sp)
 10081b0:	d9414b17 	ldw	r5,1324(sp)
 10081b4:	d9c14017 	ldw	r7,1280(sp)
 10081b8:	11400015 	stw	r5,0(r2)
 10081bc:	00395906 	br	1006724 <___vfprintf_internal_r+0x170>
 10081c0:	980f883a 	mov	r7,r19
 10081c4:	dcc14515 	stw	r19,1300(sp)
 10081c8:	d8014615 	stw	zero,1304(sp)
 10081cc:	003b9b06 	br	100703c <___vfprintf_internal_r+0xa88>
 10081d0:	0027883a 	mov	r19,zero
 10081d4:	00397806 	br	10067b8 <___vfprintf_internal_r+0x204>
 10081d8:	00c040b4 	movhi	r3,258
 10081dc:	18e8d004 	addi	r3,r3,-23744
 10081e0:	100f883a 	mov	r7,r2
 10081e4:	d8814515 	stw	r2,1300(sp)
 10081e8:	d8c14115 	stw	r3,1284(sp)
 10081ec:	0039e006 	br	1006970 <___vfprintf_internal_r+0x3bc>
 10081f0:	008040b4 	movhi	r2,258
 10081f4:	10a8cf04 	addi	r2,r2,-23748
 10081f8:	d8814115 	stw	r2,1284(sp)
 10081fc:	003d1c06 	br	1007670 <___vfprintf_internal_r+0x10bc>
 1008200:	d9414d17 	ldw	r5,1332(sp)
 1008204:	00801984 	movi	r2,102
 1008208:	28804926 	beq	r5,r2,1008330 <___vfprintf_internal_r+0x1d7c>
 100820c:	200f883a 	mov	r7,r4
 1008210:	24805716 	blt	r4,r18,1008370 <___vfprintf_internal_r+0x1dbc>
 1008214:	d9414c17 	ldw	r5,1328(sp)
 1008218:	2880004c 	andi	r2,r5,1
 100821c:	10000126 	beq	r2,zero,1008224 <___vfprintf_internal_r+0x1c70>
 1008220:	21c00044 	addi	r7,r4,1
 1008224:	d9c14515 	stw	r7,1300(sp)
 1008228:	383fcc0e 	bge	r7,zero,100815c <___vfprintf_internal_r+0x1ba8>
 100822c:	d8014515 	stw	zero,1300(sp)
 1008230:	003fca06 	br	100815c <___vfprintf_internal_r+0x1ba8>
 1008234:	d9000517 	ldw	r4,20(sp)
 1008238:	00bfff04 	movi	r2,-4
 100823c:	1100480e 	bge	r2,r4,1008360 <___vfprintf_internal_r+0x1dac>
 1008240:	99004716 	blt	r19,r4,1008360 <___vfprintf_internal_r+0x1dac>
 1008244:	d8c14d15 	stw	r3,1332(sp)
 1008248:	003ff006 	br	100820c <___vfprintf_internal_r+0x1c58>
 100824c:	d8800717 	ldw	r2,28(sp)
 1008250:	14bf8b2e 	bgeu	r2,r18,1008080 <___vfprintf_internal_r+0x1acc>
 1008254:	9007883a 	mov	r3,r18
 1008258:	01000c04 	movi	r4,48
 100825c:	11000005 	stb	r4,0(r2)
 1008260:	10800044 	addi	r2,r2,1
 1008264:	d8800715 	stw	r2,28(sp)
 1008268:	18bffc1e 	bne	r3,r2,100825c <___vfprintf_internal_r+0x1ca8>
 100826c:	003f8406 	br	1008080 <___vfprintf_internal_r+0x1acc>
 1008270:	d8814117 	ldw	r2,1284(sp)
 1008274:	10c00007 	ldb	r3,0(r2)
 1008278:	00800c04 	movi	r2,48
 100827c:	18805b26 	beq	r3,r2,10083ec <___vfprintf_internal_r+0x1e38>
 1008280:	d9000517 	ldw	r4,20(sp)
 1008284:	9125883a 	add	r18,r18,r4
 1008288:	003f7506 	br	1008060 <___vfprintf_internal_r+0x1aac>
 100828c:	d9014c17 	ldw	r4,1328(sp)
 1008290:	2080004c 	andi	r2,r4,1
 1008294:	1005003a 	cmpeq	r2,r2,zero
 1008298:	103f6a26 	beq	r2,zero,1008044 <___vfprintf_internal_r+0x1a90>
 100829c:	d8800717 	ldw	r2,28(sp)
 10082a0:	003f7706 	br	1008080 <___vfprintf_internal_r+0x1acc>
 10082a4:	d9c14515 	stw	r7,1300(sp)
 10082a8:	38004d16 	blt	r7,zero,10083e0 <___vfprintf_internal_r+0x1e2c>
 10082ac:	dc814715 	stw	r18,1308(sp)
 10082b0:	d8014615 	stw	zero,1304(sp)
 10082b4:	003b6106 	br	100703c <___vfprintf_internal_r+0xa88>
 10082b8:	d9014f17 	ldw	r4,1340(sp)
 10082bc:	d8800504 	addi	r2,sp,20
 10082c0:	d8800115 	stw	r2,4(sp)
 10082c4:	d8c00604 	addi	r3,sp,24
 10082c8:	d8800704 	addi	r2,sp,28
 10082cc:	800b883a 	mov	r5,r16
 10082d0:	880d883a 	mov	r6,r17
 10082d4:	01c000c4 	movi	r7,3
 10082d8:	d8c00215 	stw	r3,8(sp)
 10082dc:	d8800315 	stw	r2,12(sp)
 10082e0:	dcc00015 	stw	r19,0(sp)
 10082e4:	9829883a 	mov	r20,r19
 10082e8:	100a1240 	call	100a124 <_dtoa_r>
 10082ec:	d8814115 	stw	r2,1284(sp)
 10082f0:	003f5106 	br	1008038 <___vfprintf_internal_r+0x1a84>
 10082f4:	d8c14217 	ldw	r3,1288(sp)
 10082f8:	d9014317 	ldw	r4,1292(sp)
 10082fc:	07000b44 	movi	fp,45
 1008300:	1821883a 	mov	r16,r3
 1008304:	2460003c 	xorhi	r17,r4,32768
 1008308:	003f3106 	br	1007fd0 <___vfprintf_internal_r+0x1a1c>
 100830c:	9d000044 	addi	r20,r19,1
 1008310:	003f3906 	br	1007ff8 <___vfprintf_internal_r+0x1a44>
 1008314:	983f251e 	bne	r19,zero,1007fac <___vfprintf_internal_r+0x19f8>
 1008318:	04c00044 	movi	r19,1
 100831c:	003f2306 	br	1007fac <___vfprintf_internal_r+0x19f8>
 1008320:	04c00184 	movi	r19,6
 1008324:	003f2106 	br	1007fac <___vfprintf_internal_r+0x19f8>
 1008328:	d8014515 	stw	zero,1300(sp)
 100832c:	003eee06 	br	1007ee8 <___vfprintf_internal_r+0x1934>
 1008330:	200f883a 	mov	r7,r4
 1008334:	0100370e 	bge	zero,r4,1008414 <___vfprintf_internal_r+0x1e60>
 1008338:	9800031e 	bne	r19,zero,1008348 <___vfprintf_internal_r+0x1d94>
 100833c:	d9814c17 	ldw	r6,1328(sp)
 1008340:	3080004c 	andi	r2,r6,1
 1008344:	103fb726 	beq	r2,zero,1008224 <___vfprintf_internal_r+0x1c70>
 1008348:	20800044 	addi	r2,r4,1
 100834c:	98a7883a 	add	r19,r19,r2
 1008350:	dcc14515 	stw	r19,1300(sp)
 1008354:	980f883a 	mov	r7,r19
 1008358:	983f800e 	bge	r19,zero,100815c <___vfprintf_internal_r+0x1ba8>
 100835c:	003fb306 	br	100822c <___vfprintf_internal_r+0x1c78>
 1008360:	d9814d17 	ldw	r6,1332(sp)
 1008364:	31bfff84 	addi	r6,r6,-2
 1008368:	d9814d15 	stw	r6,1332(sp)
 100836c:	003f4c06 	br	10080a0 <___vfprintf_internal_r+0x1aec>
 1008370:	0100180e 	bge	zero,r4,10083d4 <___vfprintf_internal_r+0x1e20>
 1008374:	00800044 	movi	r2,1
 1008378:	1485883a 	add	r2,r2,r18
 100837c:	d8814515 	stw	r2,1300(sp)
 1008380:	100f883a 	mov	r7,r2
 1008384:	103f750e 	bge	r2,zero,100815c <___vfprintf_internal_r+0x1ba8>
 1008388:	003fa806 	br	100822c <___vfprintf_internal_r+0x1c78>
 100838c:	80c00c04 	addi	r3,r16,48
 1008390:	00800c04 	movi	r2,48
 1008394:	d8c008c5 	stb	r3,35(sp)
 1008398:	d9800804 	addi	r6,sp,32
 100839c:	d8c00904 	addi	r3,sp,36
 10083a0:	d8800885 	stb	r2,34(sp)
 10083a4:	003f6506 	br	100813c <___vfprintf_internal_r+0x1b88>
 10083a8:	d9014c17 	ldw	r4,1328(sp)
 10083ac:	2084703a 	and	r2,r4,r2
 10083b0:	103f9c26 	beq	r2,zero,1008224 <___vfprintf_internal_r+0x1c70>
 10083b4:	003f6606 	br	1008150 <___vfprintf_internal_r+0x1b9c>
 10083b8:	d9800804 	addi	r6,sp,32
 10083bc:	d8c00884 	addi	r3,sp,34
 10083c0:	003f5e06 	br	100813c <___vfprintf_internal_r+0x1b88>
 10083c4:	00800b44 	movi	r2,45
 10083c8:	0121c83a 	sub	r16,zero,r4
 10083cc:	d8800845 	stb	r2,33(sp)
 10083d0:	003f3d06 	br	10080c8 <___vfprintf_internal_r+0x1b14>
 10083d4:	00800084 	movi	r2,2
 10083d8:	1105c83a 	sub	r2,r2,r4
 10083dc:	003fe606 	br	1008378 <___vfprintf_internal_r+0x1dc4>
 10083e0:	d8014515 	stw	zero,1300(sp)
 10083e4:	dc814715 	stw	r18,1308(sp)
 10083e8:	003fb106 	br	10082b0 <___vfprintf_internal_r+0x1cfc>
 10083ec:	000d883a 	mov	r6,zero
 10083f0:	000f883a 	mov	r7,zero
 10083f4:	8009883a 	mov	r4,r16
 10083f8:	880b883a 	mov	r5,r17
 10083fc:	1014d740 	call	1014d74 <__nedf2>
 1008400:	103f9f26 	beq	r2,zero,1008280 <___vfprintf_internal_r+0x1ccc>
 1008404:	00800044 	movi	r2,1
 1008408:	1509c83a 	sub	r4,r2,r20
 100840c:	d9000515 	stw	r4,20(sp)
 1008410:	003f9b06 	br	1008280 <___vfprintf_internal_r+0x1ccc>
 1008414:	98000d1e 	bne	r19,zero,100844c <___vfprintf_internal_r+0x1e98>
 1008418:	d8c14c17 	ldw	r3,1328(sp)
 100841c:	1880004c 	andi	r2,r3,1
 1008420:	10000a1e 	bne	r2,zero,100844c <___vfprintf_internal_r+0x1e98>
 1008424:	01000044 	movi	r4,1
 1008428:	200f883a 	mov	r7,r4
 100842c:	d9014515 	stw	r4,1300(sp)
 1008430:	003f4a06 	br	100815c <___vfprintf_internal_r+0x1ba8>
 1008434:	3cc00017 	ldw	r19,0(r7)
 1008438:	39c00104 	addi	r7,r7,4
 100843c:	983d0e0e 	bge	r19,zero,1007878 <___vfprintf_internal_r+0x12c4>
 1008440:	b8c00007 	ldb	r3,0(r23)
 1008444:	04ffffc4 	movi	r19,-1
 1008448:	0038d906 	br	10067b0 <___vfprintf_internal_r+0x1fc>
 100844c:	9cc00084 	addi	r19,r19,2
 1008450:	dcc14515 	stw	r19,1300(sp)
 1008454:	980f883a 	mov	r7,r19
 1008458:	983f400e 	bge	r19,zero,100815c <___vfprintf_internal_r+0x1ba8>
 100845c:	003f7306 	br	100822c <___vfprintf_internal_r+0x1c78>

01008460 <__vfprintf_internal>:
 1008460:	008040b4 	movhi	r2,258
 1008464:	10b25404 	addi	r2,r2,-14000
 1008468:	2013883a 	mov	r9,r4
 100846c:	11000017 	ldw	r4,0(r2)
 1008470:	2805883a 	mov	r2,r5
 1008474:	300f883a 	mov	r7,r6
 1008478:	480b883a 	mov	r5,r9
 100847c:	100d883a 	mov	r6,r2
 1008480:	10065b41 	jmpi	10065b4 <___vfprintf_internal_r>

01008484 <__svfscanf_r>:
 1008484:	deff4e04 	addi	sp,sp,-712
 1008488:	dd80ae15 	stw	r22,696(sp)
 100848c:	dd00ac15 	stw	r20,688(sp)
 1008490:	dc40a915 	stw	r17,676(sp)
 1008494:	dc00a815 	stw	r16,672(sp)
 1008498:	dfc0b115 	stw	ra,708(sp)
 100849c:	df00b015 	stw	fp,704(sp)
 10084a0:	ddc0af15 	stw	r23,700(sp)
 10084a4:	dd40ad15 	stw	r21,692(sp)
 10084a8:	dcc0ab15 	stw	r19,684(sp)
 10084ac:	dc80aa15 	stw	r18,680(sp)
 10084b0:	202d883a 	mov	r22,r4
 10084b4:	2821883a 	mov	r16,r5
 10084b8:	d9c0a415 	stw	r7,656(sp)
 10084bc:	3029883a 	mov	r20,r6
 10084c0:	d800a215 	stw	zero,648(sp)
 10084c4:	0023883a 	mov	r17,zero
 10084c8:	d800a115 	stw	zero,644(sp)
 10084cc:	d800a015 	stw	zero,640(sp)
 10084d0:	a1000007 	ldb	r4,0(r20)
 10084d4:	d9000115 	stw	r4,4(sp)
 10084d8:	20001f26 	beq	r4,zero,1008558 <__svfscanf_r+0xd4>
 10084dc:	048040b4 	movhi	r18,258
 10084e0:	94b25804 	addi	r18,r18,-13984
 10084e4:	91800017 	ldw	r6,0(r18)
 10084e8:	a5000044 	addi	r20,r20,1
 10084ec:	3107883a 	add	r3,r6,r4
 10084f0:	18800003 	ldbu	r2,0(r3)
 10084f4:	1080020c 	andi	r2,r2,8
 10084f8:	10002426 	beq	r2,zero,100858c <__svfscanf_r+0x108>
 10084fc:	80c00117 	ldw	r3,4(r16)
 1008500:	00c00e0e 	bge	zero,r3,100853c <__svfscanf_r+0xb8>
 1008504:	81400017 	ldw	r5,0(r16)
 1008508:	90800017 	ldw	r2,0(r18)
 100850c:	28c00003 	ldbu	r3,0(r5)
 1008510:	1887883a 	add	r3,r3,r2
 1008514:	19000003 	ldbu	r4,0(r3)
 1008518:	2100020c 	andi	r4,r4,8
 100851c:	203fec26 	beq	r4,zero,10084d0 <__svfscanf_r+0x4c>
 1008520:	80c00117 	ldw	r3,4(r16)
 1008524:	29800044 	addi	r6,r5,1
 1008528:	8c400044 	addi	r17,r17,1
 100852c:	18ffffc4 	addi	r3,r3,-1
 1008530:	81800015 	stw	r6,0(r16)
 1008534:	80c00115 	stw	r3,4(r16)
 1008538:	00fff216 	blt	zero,r3,1008504 <__svfscanf_r+0x80>
 100853c:	b009883a 	mov	r4,r22
 1008540:	800b883a 	mov	r5,r16
 1008544:	100e57c0 	call	100e57c <__srefill_r>
 1008548:	103fee26 	beq	r2,zero,1008504 <__svfscanf_r+0x80>
 100854c:	a1000007 	ldb	r4,0(r20)
 1008550:	d9000115 	stw	r4,4(sp)
 1008554:	203fe11e 	bne	r4,zero,10084dc <__svfscanf_r+0x58>
 1008558:	d880a217 	ldw	r2,648(sp)
 100855c:	dfc0b117 	ldw	ra,708(sp)
 1008560:	df00b017 	ldw	fp,704(sp)
 1008564:	ddc0af17 	ldw	r23,700(sp)
 1008568:	dd80ae17 	ldw	r22,696(sp)
 100856c:	dd40ad17 	ldw	r21,692(sp)
 1008570:	dd00ac17 	ldw	r20,688(sp)
 1008574:	dcc0ab17 	ldw	r19,684(sp)
 1008578:	dc80aa17 	ldw	r18,680(sp)
 100857c:	dc40a917 	ldw	r17,676(sp)
 1008580:	dc00a817 	ldw	r16,672(sp)
 1008584:	dec0b204 	addi	sp,sp,712
 1008588:	f800283a 	ret
 100858c:	00800944 	movi	r2,37
 1008590:	20801626 	beq	r4,r2,10085ec <__svfscanf_r+0x168>
 1008594:	80800117 	ldw	r2,4(r16)
 1008598:	00800b0e 	bge	zero,r2,10085c8 <__svfscanf_r+0x144>
 100859c:	81000017 	ldw	r4,0(r16)
 10085a0:	a0ffffc7 	ldb	r3,-1(r20)
 10085a4:	20800003 	ldbu	r2,0(r4)
 10085a8:	10ffeb1e 	bne	r2,r3,1008558 <__svfscanf_r+0xd4>
 10085ac:	80c00117 	ldw	r3,4(r16)
 10085b0:	21800044 	addi	r6,r4,1
 10085b4:	8c400044 	addi	r17,r17,1
 10085b8:	18ffffc4 	addi	r3,r3,-1
 10085bc:	80c00115 	stw	r3,4(r16)
 10085c0:	81800015 	stw	r6,0(r16)
 10085c4:	003fc206 	br	10084d0 <__svfscanf_r+0x4c>
 10085c8:	b009883a 	mov	r4,r22
 10085cc:	800b883a 	mov	r5,r16
 10085d0:	100e57c0 	call	100e57c <__srefill_r>
 10085d4:	103ff126 	beq	r2,zero,100859c <__svfscanf_r+0x118>
 10085d8:	d900a217 	ldw	r4,648(sp)
 10085dc:	2004c91e 	bne	r4,zero,1009904 <__svfscanf_r+0x1480>
 10085e0:	00bfffc4 	movi	r2,-1
 10085e4:	d880a215 	stw	r2,648(sp)
 10085e8:	003fdb06 	br	1008558 <__svfscanf_r+0xd4>
 10085ec:	d800a315 	stw	zero,652(sp)
 10085f0:	0027883a 	mov	r19,zero
 10085f4:	a0c00003 	ldbu	r3,0(r20)
 10085f8:	00801e04 	movi	r2,120
 10085fc:	a5000044 	addi	r20,r20,1
 1008600:	19403fcc 	andi	r5,r3,255
 1008604:	2940201c 	xori	r5,r5,128
 1008608:	297fe004 	addi	r5,r5,-128
 100860c:	10c08036 	bltu	r2,r3,1008810 <__svfscanf_r+0x38c>
 1008610:	18c5883a 	add	r2,r3,r3
 1008614:	1085883a 	add	r2,r2,r2
 1008618:	00c04074 	movhi	r3,257
 100861c:	18e18b04 	addi	r3,r3,-31188
 1008620:	10c5883a 	add	r2,r2,r3
 1008624:	11000017 	ldw	r4,0(r2)
 1008628:	2000683a 	jmp	r4
 100862c:	010085e0 	cmpeqi	r4,zero,535
 1008630:	01008810 	cmplti	r4,zero,544
 1008634:	01008810 	cmplti	r4,zero,544
 1008638:	01008810 	cmplti	r4,zero,544
 100863c:	01008810 	cmplti	r4,zero,544
 1008640:	01008810 	cmplti	r4,zero,544
 1008644:	01008810 	cmplti	r4,zero,544
 1008648:	01008810 	cmplti	r4,zero,544
 100864c:	01008810 	cmplti	r4,zero,544
 1008650:	01008810 	cmplti	r4,zero,544
 1008654:	01008810 	cmplti	r4,zero,544
 1008658:	01008810 	cmplti	r4,zero,544
 100865c:	01008810 	cmplti	r4,zero,544
 1008660:	01008810 	cmplti	r4,zero,544
 1008664:	01008810 	cmplti	r4,zero,544
 1008668:	01008810 	cmplti	r4,zero,544
 100866c:	01008810 	cmplti	r4,zero,544
 1008670:	01008810 	cmplti	r4,zero,544
 1008674:	01008810 	cmplti	r4,zero,544
 1008678:	01008810 	cmplti	r4,zero,544
 100867c:	01008810 	cmplti	r4,zero,544
 1008680:	01008810 	cmplti	r4,zero,544
 1008684:	01008810 	cmplti	r4,zero,544
 1008688:	01008810 	cmplti	r4,zero,544
 100868c:	01008810 	cmplti	r4,zero,544
 1008690:	01008810 	cmplti	r4,zero,544
 1008694:	01008810 	cmplti	r4,zero,544
 1008698:	01008810 	cmplti	r4,zero,544
 100869c:	01008810 	cmplti	r4,zero,544
 10086a0:	01008810 	cmplti	r4,zero,544
 10086a4:	01008810 	cmplti	r4,zero,544
 10086a8:	01008810 	cmplti	r4,zero,544
 10086ac:	01008810 	cmplti	r4,zero,544
 10086b0:	01008810 	cmplti	r4,zero,544
 10086b4:	01008810 	cmplti	r4,zero,544
 10086b8:	01008810 	cmplti	r4,zero,544
 10086bc:	01008810 	cmplti	r4,zero,544
 10086c0:	01008594 	movui	r4,534
 10086c4:	01008810 	cmplti	r4,zero,544
 10086c8:	01008810 	cmplti	r4,zero,544
 10086cc:	01008810 	cmplti	r4,zero,544
 10086d0:	01008810 	cmplti	r4,zero,544
 10086d4:	01009834 	movhi	r4,608
 10086d8:	01008810 	cmplti	r4,zero,544
 10086dc:	01008810 	cmplti	r4,zero,544
 10086e0:	01008810 	cmplti	r4,zero,544
 10086e4:	01008810 	cmplti	r4,zero,544
 10086e8:	01008810 	cmplti	r4,zero,544
 10086ec:	01009230 	cmpltui	r4,zero,584
 10086f0:	01009230 	cmpltui	r4,zero,584
 10086f4:	01009230 	cmpltui	r4,zero,584
 10086f8:	01009230 	cmpltui	r4,zero,584
 10086fc:	01009230 	cmpltui	r4,zero,584
 1008700:	01009230 	cmpltui	r4,zero,584
 1008704:	01009230 	cmpltui	r4,zero,584
 1008708:	01009230 	cmpltui	r4,zero,584
 100870c:	01009230 	cmpltui	r4,zero,584
 1008710:	01009230 	cmpltui	r4,zero,584
 1008714:	01008810 	cmplti	r4,zero,544
 1008718:	01008810 	cmplti	r4,zero,544
 100871c:	01008810 	cmplti	r4,zero,544
 1008720:	01008810 	cmplti	r4,zero,544
 1008724:	01008810 	cmplti	r4,zero,544
 1008728:	01008810 	cmplti	r4,zero,544
 100872c:	01008810 	cmplti	r4,zero,544
 1008730:	01008810 	cmplti	r4,zero,544
 1008734:	01008810 	cmplti	r4,zero,544
 1008738:	01008810 	cmplti	r4,zero,544
 100873c:	010099b0 	cmpltui	r4,zero,614
 1008740:	010099a8 	cmpgeui	r4,zero,614
 1008744:	01008810 	cmplti	r4,zero,544
 1008748:	010099a8 	cmpgeui	r4,zero,614
 100874c:	01008810 	cmplti	r4,zero,544
 1008750:	01008810 	cmplti	r4,zero,544
 1008754:	01008810 	cmplti	r4,zero,544
 1008758:	01008810 	cmplti	r4,zero,544
 100875c:	01009a40 	call	1009a4 <__alt_mem_onchip+0x1009a4>
 1008760:	01008810 	cmplti	r4,zero,544
 1008764:	01008810 	cmplti	r4,zero,544
 1008768:	010099f8 	rdprs	r4,zero,615
 100876c:	01008810 	cmplti	r4,zero,544
 1008770:	01008810 	cmplti	r4,zero,544
 1008774:	01008810 	cmplti	r4,zero,544
 1008778:	01008810 	cmplti	r4,zero,544
 100877c:	01008810 	cmplti	r4,zero,544
 1008780:	01008810 	cmplti	r4,zero,544
 1008784:	01008810 	cmplti	r4,zero,544
 1008788:	01008810 	cmplti	r4,zero,544
 100878c:	0100983c 	xorhi	r4,zero,608
 1008790:	01008810 	cmplti	r4,zero,544
 1008794:	01008810 	cmplti	r4,zero,544
 1008798:	010099dc 	xori	r4,zero,615
 100879c:	01008810 	cmplti	r4,zero,544
 10087a0:	01008810 	cmplti	r4,zero,544
 10087a4:	01008810 	cmplti	r4,zero,544
 10087a8:	01008810 	cmplti	r4,zero,544
 10087ac:	01008810 	cmplti	r4,zero,544
 10087b0:	01008810 	cmplti	r4,zero,544
 10087b4:	01008810 	cmplti	r4,zero,544
 10087b8:	010099d0 	cmplti	r4,zero,615
 10087bc:	010099b4 	movhi	r4,614
 10087c0:	010099a8 	cmpgeui	r4,zero,614
 10087c4:	010099a8 	cmpgeui	r4,zero,614
 10087c8:	010099a8 	cmpgeui	r4,zero,614
 10087cc:	010099a0 	cmpeqi	r4,zero,614
 10087d0:	01009a94 	movui	r4,618
 10087d4:	01008810 	cmplti	r4,zero,544
 10087d8:	01008810 	cmplti	r4,zero,544
 10087dc:	01009a80 	call	1009a8 <__alt_mem_onchip+0x1009a8>
 10087e0:	01008810 	cmplti	r4,zero,544
 10087e4:	01009a18 	cmpnei	r4,zero,616
 10087e8:	010099fc 	xorhi	r4,zero,615
 10087ec:	01009a50 	cmplti	r4,zero,617
 10087f0:	01008810 	cmplti	r4,zero,544
 10087f4:	01008810 	cmplti	r4,zero,544
 10087f8:	01009a48 	cmpgei	r4,zero,617
 10087fc:	01008810 	cmplti	r4,zero,544
 1008800:	01008d80 	call	1008d8 <__alt_mem_onchip+0x1008d8>
 1008804:	01008810 	cmplti	r4,zero,544
 1008808:	01008810 	cmplti	r4,zero,544
 100880c:	0100983c 	xorhi	r4,zero,608
 1008810:	2987883a 	add	r3,r5,r6
 1008814:	18800003 	ldbu	r2,0(r3)
 1008818:	1080004c 	andi	r2,r2,1
 100881c:	1005003a 	cmpeq	r2,r2,zero
 1008820:	10002c26 	beq	r2,zero,10088d4 <__svfscanf_r+0x450>
 1008824:	01004074 	movhi	r4,257
 1008828:	21011c04 	addi	r4,r4,1136
 100882c:	00800284 	movi	r2,10
 1008830:	d900a015 	stw	r4,640(sp)
 1008834:	054000c4 	movi	r21,3
 1008838:	d880a115 	stw	r2,644(sp)
 100883c:	80c00117 	ldw	r3,4(r16)
 1008840:	00c14a0e 	bge	zero,r3,1008d6c <__svfscanf_r+0x8e8>
 1008844:	9880100c 	andi	r2,r19,64
 1008848:	10001326 	beq	r2,zero,1008898 <__svfscanf_r+0x414>
 100884c:	00800104 	movi	r2,4
 1008850:	157f1f36 	bltu	r2,r21,10084d0 <__svfscanf_r+0x4c>
 1008854:	ad45883a 	add	r2,r21,r21
 1008858:	1085883a 	add	r2,r2,r2
 100885c:	00c04074 	movhi	r3,257
 1008860:	18e21c04 	addi	r3,r3,-30608
 1008864:	10c5883a 	add	r2,r2,r3
 1008868:	11000017 	ldw	r4,0(r2)
 100886c:	2000683a 	jmp	r4
 1008870:	010088dc 	xori	r4,zero,547
 1008874:	010089e8 	cmpgeui	r4,zero,551
 1008878:	01008a5c 	xori	r4,zero,553
 100887c:	01008d48 	cmpgei	r4,zero,565
 1008880:	01008b94 	movui	r4,558
 1008884:	b009883a 	mov	r4,r22
 1008888:	800b883a 	mov	r5,r16
 100888c:	100e57c0 	call	100e57c <__srefill_r>
 1008890:	103f511e 	bne	r2,zero,10085d8 <__svfscanf_r+0x154>
 1008894:	8c400044 	addi	r17,r17,1
 1008898:	81400017 	ldw	r5,0(r16)
 100889c:	90800017 	ldw	r2,0(r18)
 10088a0:	28c00003 	ldbu	r3,0(r5)
 10088a4:	1887883a 	add	r3,r3,r2
 10088a8:	19000003 	ldbu	r4,0(r3)
 10088ac:	2100020c 	andi	r4,r4,8
 10088b0:	203fe626 	beq	r4,zero,100884c <__svfscanf_r+0x3c8>
 10088b4:	80c00117 	ldw	r3,4(r16)
 10088b8:	18ffffc4 	addi	r3,r3,-1
 10088bc:	80c00115 	stw	r3,4(r16)
 10088c0:	00fff00e 	bge	zero,r3,1008884 <__svfscanf_r+0x400>
 10088c4:	29800044 	addi	r6,r5,1
 10088c8:	8c400044 	addi	r17,r17,1
 10088cc:	81800015 	stw	r6,0(r16)
 10088d0:	003ff106 	br	1008898 <__svfscanf_r+0x414>
 10088d4:	9cc00054 	ori	r19,r19,1
 10088d8:	003fd206 	br	1008824 <__svfscanf_r+0x3a0>
 10088dc:	d8c0a317 	ldw	r3,652(sp)
 10088e0:	1800021e 	bne	r3,zero,10088ec <__svfscanf_r+0x468>
 10088e4:	01000044 	movi	r4,1
 10088e8:	d900a315 	stw	r4,652(sp)
 10088ec:	9880004c 	andi	r2,r19,1
 10088f0:	1005003a 	cmpeq	r2,r2,zero
 10088f4:	1003d91e 	bne	r2,zero,100985c <__svfscanf_r+0x13d8>
 10088f8:	9d40040c 	andi	r21,r19,16
 10088fc:	a839003a 	cmpeq	fp,r21,zero
 1008900:	e0042526 	beq	fp,zero,1009998 <__svfscanf_r+0x1514>
 1008904:	d880a417 	ldw	r2,656(sp)
 1008908:	14c00017 	ldw	r19,0(r2)
 100890c:	10800104 	addi	r2,r2,4
 1008910:	d880a415 	stw	r2,656(sp)
 1008914:	d8c0a317 	ldw	r3,652(sp)
 1008918:	18041a26 	beq	r3,zero,1009984 <__svfscanf_r+0x1500>
 100891c:	010040b4 	movhi	r4,258
 1008920:	21325904 	addi	r4,r4,-13980
 1008924:	20800017 	ldw	r2,0(r4)
 1008928:	103f2b26 	beq	r2,zero,10085d8 <__svfscanf_r+0x154>
 100892c:	d8804404 	addi	r2,sp,272
 1008930:	0025883a 	mov	r18,zero
 1008934:	d880a615 	stw	r2,664(sp)
 1008938:	05ffffc4 	movi	r23,-1
 100893c:	80800017 	ldw	r2,0(r16)
 1008940:	80c00117 	ldw	r3,4(r16)
 1008944:	d900a617 	ldw	r4,664(sp)
 1008948:	12000003 	ldbu	r8,0(r2)
 100894c:	18ffffc4 	addi	r3,r3,-1
 1008950:	11800044 	addi	r6,r2,1
 1008954:	248f883a 	add	r7,r4,r18
 1008958:	80c00115 	stw	r3,4(r16)
 100895c:	81800015 	stw	r6,0(r16)
 1008960:	3a000005 	stb	r8,0(r7)
 1008964:	d9000204 	addi	r4,sp,8
 1008968:	000b883a 	mov	r5,zero
 100896c:	01800204 	movi	r6,8
 1008970:	10060b00 	call	10060b0 <memset>
 1008974:	d980a617 	ldw	r6,664(sp)
 1008978:	94800044 	addi	r18,r18,1
 100897c:	d8800204 	addi	r2,sp,8
 1008980:	b009883a 	mov	r4,r22
 1008984:	980b883a 	mov	r5,r19
 1008988:	900f883a 	mov	r7,r18
 100898c:	d8800015 	stw	r2,0(sp)
 1008990:	100cae40 	call	100cae4 <_mbrtowc_r>
 1008994:	1007883a 	mov	r3,r2
 1008998:	15ff0f26 	beq	r2,r23,10085d8 <__svfscanf_r+0x154>
 100899c:	1003f11e 	bne	r2,zero,1009964 <__svfscanf_r+0x14e0>
 10089a0:	a800011e 	bne	r21,zero,10089a8 <__svfscanf_r+0x524>
 10089a4:	98000015 	stw	zero,0(r19)
 10089a8:	d8c0a317 	ldw	r3,652(sp)
 10089ac:	8ca3883a 	add	r17,r17,r18
 10089b0:	18ffffc4 	addi	r3,r3,-1
 10089b4:	d8c0a315 	stw	r3,652(sp)
 10089b8:	e0000126 	beq	fp,zero,10089c0 <__svfscanf_r+0x53c>
 10089bc:	9cc00104 	addi	r19,r19,4
 10089c0:	0025883a 	mov	r18,zero
 10089c4:	80c00117 	ldw	r3,4(r16)
 10089c8:	00c3e90e 	bge	zero,r3,1009970 <__svfscanf_r+0x14ec>
 10089cc:	d900a317 	ldw	r4,652(sp)
 10089d0:	2003ec26 	beq	r4,zero,1009984 <__svfscanf_r+0x1500>
 10089d4:	00c040b4 	movhi	r3,258
 10089d8:	18f25904 	addi	r3,r3,-13980
 10089dc:	18800017 	ldw	r2,0(r3)
 10089e0:	90bfd61e 	bne	r18,r2,100893c <__svfscanf_r+0x4b8>
 10089e4:	003efc06 	br	10085d8 <__svfscanf_r+0x154>
 10089e8:	d880a317 	ldw	r2,652(sp)
 10089ec:	1000021e 	bne	r2,zero,10089f8 <__svfscanf_r+0x574>
 10089f0:	00ffffc4 	movi	r3,-1
 10089f4:	d8c0a315 	stw	r3,652(sp)
 10089f8:	9880040c 	andi	r2,r19,16
 10089fc:	10036526 	beq	r2,zero,1009794 <__svfscanf_r+0x1310>
 1008a00:	0027883a 	mov	r19,zero
 1008a04:	dd400404 	addi	r21,sp,16
 1008a08:	81000017 	ldw	r4,0(r16)
 1008a0c:	20800003 	ldbu	r2,0(r4)
 1008a10:	a885883a 	add	r2,r21,r2
 1008a14:	10c00007 	ldb	r3,0(r2)
 1008a18:	1803be26 	beq	r3,zero,1009914 <__svfscanf_r+0x1490>
 1008a1c:	80c00117 	ldw	r3,4(r16)
 1008a20:	21800044 	addi	r6,r4,1
 1008a24:	d900a317 	ldw	r4,652(sp)
 1008a28:	18ffffc4 	addi	r3,r3,-1
 1008a2c:	9cc00044 	addi	r19,r19,1
 1008a30:	81800015 	stw	r6,0(r16)
 1008a34:	80c00115 	stw	r3,4(r16)
 1008a38:	24c3b626 	beq	r4,r19,1009914 <__svfscanf_r+0x1490>
 1008a3c:	00fff216 	blt	zero,r3,1008a08 <__svfscanf_r+0x584>
 1008a40:	b009883a 	mov	r4,r22
 1008a44:	800b883a 	mov	r5,r16
 1008a48:	100e57c0 	call	100e57c <__srefill_r>
 1008a4c:	103fee26 	beq	r2,zero,1008a08 <__svfscanf_r+0x584>
 1008a50:	983ee126 	beq	r19,zero,10085d8 <__svfscanf_r+0x154>
 1008a54:	8ce3883a 	add	r17,r17,r19
 1008a58:	003e9d06 	br	10084d0 <__svfscanf_r+0x4c>
 1008a5c:	d900a317 	ldw	r4,652(sp)
 1008a60:	2000021e 	bne	r4,zero,1008a6c <__svfscanf_r+0x5e8>
 1008a64:	00bfffc4 	movi	r2,-1
 1008a68:	d880a315 	stw	r2,652(sp)
 1008a6c:	9880004c 	andi	r2,r19,1
 1008a70:	1005003a 	cmpeq	r2,r2,zero
 1008a74:	1001f41e 	bne	r2,zero,1009248 <__svfscanf_r+0xdc4>
 1008a78:	9dc0040c 	andi	r23,r19,16
 1008a7c:	b807003a 	cmpeq	r3,r23,zero
 1008a80:	d8c0a515 	stw	r3,660(sp)
 1008a84:	1803b21e 	bne	r3,zero,1009950 <__svfscanf_r+0x14cc>
 1008a88:	dd400104 	addi	r21,sp,4
 1008a8c:	0027883a 	mov	r19,zero
 1008a90:	073fffc4 	movi	fp,-1
 1008a94:	81400017 	ldw	r5,0(r16)
 1008a98:	90800017 	ldw	r2,0(r18)
 1008a9c:	29c00003 	ldbu	r7,0(r5)
 1008aa0:	38c03fcc 	andi	r3,r7,255
 1008aa4:	1887883a 	add	r3,r3,r2
 1008aa8:	19000003 	ldbu	r4,0(r3)
 1008aac:	2100020c 	andi	r4,r4,8
 1008ab0:	2000321e 	bne	r4,zero,1008b7c <__svfscanf_r+0x6f8>
 1008ab4:	d8c0a317 	ldw	r3,652(sp)
 1008ab8:	18003026 	beq	r3,zero,1008b7c <__svfscanf_r+0x6f8>
 1008abc:	008040b4 	movhi	r2,258
 1008ac0:	10b25904 	addi	r2,r2,-13980
 1008ac4:	10c00017 	ldw	r3,0(r2)
 1008ac8:	98fec326 	beq	r19,r3,10085d8 <__svfscanf_r+0x154>
 1008acc:	d8c04404 	addi	r3,sp,272
 1008ad0:	80800117 	ldw	r2,4(r16)
 1008ad4:	d8c0a615 	stw	r3,664(sp)
 1008ad8:	d900a617 	ldw	r4,664(sp)
 1008adc:	10ffffc4 	addi	r3,r2,-1
 1008ae0:	29800044 	addi	r6,r5,1
 1008ae4:	80c00115 	stw	r3,4(r16)
 1008ae8:	24c5883a 	add	r2,r4,r19
 1008aec:	81800015 	stw	r6,0(r16)
 1008af0:	d9000204 	addi	r4,sp,8
 1008af4:	000b883a 	mov	r5,zero
 1008af8:	01800204 	movi	r6,8
 1008afc:	11c00005 	stb	r7,0(r2)
 1008b00:	10060b00 	call	10060b0 <memset>
 1008b04:	d980a617 	ldw	r6,664(sp)
 1008b08:	9cc00044 	addi	r19,r19,1
 1008b0c:	d8800204 	addi	r2,sp,8
 1008b10:	b009883a 	mov	r4,r22
 1008b14:	a80b883a 	mov	r5,r21
 1008b18:	980f883a 	mov	r7,r19
 1008b1c:	d8800015 	stw	r2,0(sp)
 1008b20:	100cae40 	call	100cae4 <_mbrtowc_r>
 1008b24:	1007883a 	mov	r3,r2
 1008b28:	173eab26 	beq	r2,fp,10085d8 <__svfscanf_r+0x154>
 1008b2c:	1003851e 	bne	r2,zero,1009944 <__svfscanf_r+0x14c0>
 1008b30:	a8000015 	stw	zero,0(r21)
 1008b34:	a9000017 	ldw	r4,0(r21)
 1008b38:	100c8600 	call	100c860 <iswspace>
 1008b3c:	1003781e 	bne	r2,zero,1009920 <__svfscanf_r+0x149c>
 1008b40:	d900a317 	ldw	r4,652(sp)
 1008b44:	d880a517 	ldw	r2,660(sp)
 1008b48:	8ce3883a 	add	r17,r17,r19
 1008b4c:	213fffc4 	addi	r4,r4,-1
 1008b50:	d900a315 	stw	r4,652(sp)
 1008b54:	10000126 	beq	r2,zero,1008b5c <__svfscanf_r+0x6d8>
 1008b58:	ad400104 	addi	r21,r21,4
 1008b5c:	0027883a 	mov	r19,zero
 1008b60:	80c00117 	ldw	r3,4(r16)
 1008b64:	00ffcb16 	blt	zero,r3,1008a94 <__svfscanf_r+0x610>
 1008b68:	b009883a 	mov	r4,r22
 1008b6c:	800b883a 	mov	r5,r16
 1008b70:	100e57c0 	call	100e57c <__srefill_r>
 1008b74:	103fc726 	beq	r2,zero,1008a94 <__svfscanf_r+0x610>
 1008b78:	983e971e 	bne	r19,zero,10085d8 <__svfscanf_r+0x154>
 1008b7c:	b83e541e 	bne	r23,zero,10084d0 <__svfscanf_r+0x4c>
 1008b80:	d900a217 	ldw	r4,648(sp)
 1008b84:	a8000015 	stw	zero,0(r21)
 1008b88:	21000044 	addi	r4,r4,1
 1008b8c:	d900a215 	stw	r4,648(sp)
 1008b90:	003e4f06 	br	10084d0 <__svfscanf_r+0x4c>
 1008b94:	d900a317 	ldw	r4,652(sp)
 1008b98:	00805704 	movi	r2,348
 1008b9c:	20ffffc4 	addi	r3,r4,-1
 1008ba0:	10c1ed2e 	bgeu	r2,r3,1009358 <__svfscanf_r+0xed4>
 1008ba4:	00805744 	movi	r2,349
 1008ba8:	21bfa8c4 	addi	r6,r4,-349
 1008bac:	9d41e014 	ori	r21,r19,1920
 1008bb0:	d880a315 	stw	r2,652(sp)
 1008bb4:	d8c04404 	addi	r3,sp,272
 1008bb8:	d8c0a615 	stw	r3,664(sp)
 1008bbc:	182f883a 	mov	r23,r3
 1008bc0:	d8009f15 	stw	zero,636(sp)
 1008bc4:	d8009e15 	stw	zero,632(sp)
 1008bc8:	d8009d15 	stw	zero,628(sp)
 1008bcc:	d8009c15 	stw	zero,624(sp)
 1008bd0:	0039883a 	mov	fp,zero
 1008bd4:	0025883a 	mov	r18,zero
 1008bd8:	80800017 	ldw	r2,0(r16)
 1008bdc:	11400003 	ldbu	r5,0(r2)
 1008be0:	00801384 	movi	r2,78
 1008be4:	28fff544 	addi	r3,r5,-43
 1008be8:	18c03fcc 	andi	r3,r3,255
 1008bec:	10c07d36 	bltu	r2,r3,1008de4 <__svfscanf_r+0x960>
 1008bf0:	18c5883a 	add	r2,r3,r3
 1008bf4:	1085883a 	add	r2,r2,r2
 1008bf8:	00c04074 	movhi	r3,257
 1008bfc:	18e30304 	addi	r3,r3,-29684
 1008c00:	10c5883a 	add	r2,r2,r3
 1008c04:	11000017 	ldw	r4,0(r2)
 1008c08:	2000683a 	jmp	r4
 1008c0c:	01008d9c 	xori	r4,zero,566
 1008c10:	01008de4 	muli	r4,zero,567
 1008c14:	01008d9c 	xori	r4,zero,566
 1008c18:	01008f30 	cmpltui	r4,zero,572
 1008c1c:	01008de4 	muli	r4,zero,567
 1008c20:	01008f68 	cmpgeui	r4,zero,573
 1008c24:	01008f9c 	xori	r4,zero,574
 1008c28:	01008f9c 	xori	r4,zero,574
 1008c2c:	01008f9c 	xori	r4,zero,574
 1008c30:	01008f9c 	xori	r4,zero,574
 1008c34:	01008f9c 	xori	r4,zero,574
 1008c38:	01008f9c 	xori	r4,zero,574
 1008c3c:	01008f9c 	xori	r4,zero,574
 1008c40:	01008f9c 	xori	r4,zero,574
 1008c44:	01008f9c 	xori	r4,zero,574
 1008c48:	01008de4 	muli	r4,zero,567
 1008c4c:	01008de4 	muli	r4,zero,567
 1008c50:	01008de4 	muli	r4,zero,567
 1008c54:	01008de4 	muli	r4,zero,567
 1008c58:	01008de4 	muli	r4,zero,567
 1008c5c:	01008de4 	muli	r4,zero,567
 1008c60:	01008de4 	muli	r4,zero,567
 1008c64:	01008fbc 	xorhi	r4,zero,574
 1008c68:	01008de4 	muli	r4,zero,567
 1008c6c:	01008de4 	muli	r4,zero,567
 1008c70:	01008de4 	muli	r4,zero,567
 1008c74:	01008fcc 	andi	r4,zero,575
 1008c78:	01009068 	cmpgeui	r4,zero,577
 1008c7c:	01008de4 	muli	r4,zero,567
 1008c80:	01008de4 	muli	r4,zero,567
 1008c84:	01009084 	movi	r4,578
 1008c88:	01008de4 	muli	r4,zero,567
 1008c8c:	01008de4 	muli	r4,zero,567
 1008c90:	01008de4 	muli	r4,zero,567
 1008c94:	01008de4 	muli	r4,zero,567
 1008c98:	010090b0 	cmpltui	r4,zero,578
 1008c9c:	01008de4 	muli	r4,zero,567
 1008ca0:	01008de4 	muli	r4,zero,567
 1008ca4:	01008de4 	muli	r4,zero,567
 1008ca8:	01008de4 	muli	r4,zero,567
 1008cac:	01008de4 	muli	r4,zero,567
 1008cb0:	01009104 	movi	r4,580
 1008cb4:	01008de4 	muli	r4,zero,567
 1008cb8:	01008de4 	muli	r4,zero,567
 1008cbc:	01008de4 	muli	r4,zero,567
 1008cc0:	01008de4 	muli	r4,zero,567
 1008cc4:	01009214 	movui	r4,584
 1008cc8:	01008de4 	muli	r4,zero,567
 1008ccc:	01008de4 	muli	r4,zero,567
 1008cd0:	01008de4 	muli	r4,zero,567
 1008cd4:	01008de4 	muli	r4,zero,567
 1008cd8:	01008de4 	muli	r4,zero,567
 1008cdc:	01008de4 	muli	r4,zero,567
 1008ce0:	01008de4 	muli	r4,zero,567
 1008ce4:	01008fbc 	xorhi	r4,zero,574
 1008ce8:	01008de4 	muli	r4,zero,567
 1008cec:	01008de4 	muli	r4,zero,567
 1008cf0:	01008de4 	muli	r4,zero,567
 1008cf4:	01008fcc 	andi	r4,zero,575
 1008cf8:	01009068 	cmpgeui	r4,zero,577
 1008cfc:	01008de4 	muli	r4,zero,567
 1008d00:	01008de4 	muli	r4,zero,567
 1008d04:	01009084 	movi	r4,578
 1008d08:	01008de4 	muli	r4,zero,567
 1008d0c:	01008de4 	muli	r4,zero,567
 1008d10:	01008de4 	muli	r4,zero,567
 1008d14:	01008de4 	muli	r4,zero,567
 1008d18:	010090b0 	cmpltui	r4,zero,578
 1008d1c:	01008de4 	muli	r4,zero,567
 1008d20:	01008de4 	muli	r4,zero,567
 1008d24:	01008de4 	muli	r4,zero,567
 1008d28:	01008de4 	muli	r4,zero,567
 1008d2c:	01008de4 	muli	r4,zero,567
 1008d30:	01009104 	movi	r4,580
 1008d34:	01008de4 	muli	r4,zero,567
 1008d38:	01008de4 	muli	r4,zero,567
 1008d3c:	01008de4 	muli	r4,zero,567
 1008d40:	01008de4 	muli	r4,zero,567
 1008d44:	01009214 	movui	r4,584
 1008d48:	d900a317 	ldw	r4,652(sp)
 1008d4c:	00805704 	movi	r2,348
 1008d50:	20ffffc4 	addi	r3,r4,-1
 1008d54:	10c18c2e 	bgeu	r2,r3,1009388 <__svfscanf_r+0xf04>
 1008d58:	00805744 	movi	r2,349
 1008d5c:	257fa8c4 	addi	r21,r4,-349
 1008d60:	9c836014 	ori	r18,r19,3456
 1008d64:	d880a315 	stw	r2,652(sp)
 1008d68:	0001a106 	br	10093f0 <__svfscanf_r+0xf6c>
 1008d6c:	b009883a 	mov	r4,r22
 1008d70:	800b883a 	mov	r5,r16
 1008d74:	100e57c0 	call	100e57c <__srefill_r>
 1008d78:	103eb226 	beq	r2,zero,1008844 <__svfscanf_r+0x3c0>
 1008d7c:	003e1606 	br	10085d8 <__svfscanf_r+0x154>
 1008d80:	01000284 	movi	r4,10
 1008d84:	00804074 	movhi	r2,257
 1008d88:	10827c04 	addi	r2,r2,2544
 1008d8c:	054000c4 	movi	r21,3
 1008d90:	d900a115 	stw	r4,644(sp)
 1008d94:	d880a015 	stw	r2,640(sp)
 1008d98:	003ea806 	br	100883c <__svfscanf_r+0x3b8>
 1008d9c:	a880200c 	andi	r2,r21,128
 1008da0:	10001026 	beq	r2,zero,1008de4 <__svfscanf_r+0x960>
 1008da4:	00bfdfc4 	movi	r2,-129
 1008da8:	a8aa703a 	and	r21,r21,r2
 1008dac:	b9400005 	stb	r5,0(r23)
 1008db0:	bdc00044 	addi	r23,r23,1
 1008db4:	80c00117 	ldw	r3,4(r16)
 1008db8:	8c400044 	addi	r17,r17,1
 1008dbc:	18bfffc4 	addi	r2,r3,-1
 1008dc0:	80800115 	stw	r2,4(r16)
 1008dc4:	0080610e 	bge	zero,r2,1008f4c <__svfscanf_r+0xac8>
 1008dc8:	80800017 	ldw	r2,0(r16)
 1008dcc:	10800044 	addi	r2,r2,1
 1008dd0:	80800015 	stw	r2,0(r16)
 1008dd4:	d880a317 	ldw	r2,652(sp)
 1008dd8:	10bfffc4 	addi	r2,r2,-1
 1008ddc:	d880a315 	stw	r2,652(sp)
 1008de0:	103f7d1e 	bne	r2,zero,1008bd8 <__svfscanf_r+0x754>
 1008de4:	d8c09e17 	ldw	r3,632(sp)
 1008de8:	18000226 	beq	r3,zero,1008df4 <__svfscanf_r+0x970>
 1008dec:	00bfbfc4 	movi	r2,-257
 1008df0:	a8aa703a 	and	r21,r21,r2
 1008df4:	90ffffc4 	addi	r3,r18,-1
 1008df8:	00800044 	movi	r2,1
 1008dfc:	10c0cd2e 	bgeu	r2,r3,1009134 <__svfscanf_r+0xcb0>
 1008e00:	e1003fcc 	andi	r4,fp,255
 1008e04:	2100201c 	xori	r4,r4,128
 1008e08:	213fe004 	addi	r4,r4,-128
 1008e0c:	20ffffc4 	addi	r3,r4,-1
 1008e10:	00800184 	movi	r2,6
 1008e14:	10c01736 	bltu	r2,r3,1008e74 <__svfscanf_r+0x9f0>
 1008e18:	00c00084 	movi	r3,2
 1008e1c:	1900880e 	bge	r3,r4,1009040 <__svfscanf_r+0xbbc>
 1008e20:	008000c4 	movi	r2,3
 1008e24:	1100130e 	bge	r2,r4,1008e74 <__svfscanf_r+0x9f0>
 1008e28:	e4ffffc4 	addi	r19,fp,-1
 1008e2c:	b825883a 	mov	r18,r23
 1008e30:	94bfffc4 	addi	r18,r18,-1
 1008e34:	91400007 	ldb	r5,0(r18)
 1008e38:	b009883a 	mov	r4,r22
 1008e3c:	800d883a 	mov	r6,r16
 1008e40:	10110100 	call	1011010 <_ungetc_r>
 1008e44:	9cffffc4 	addi	r19,r19,-1
 1008e48:	98c03fcc 	andi	r3,r19,255
 1008e4c:	18c0201c 	xori	r3,r3,128
 1008e50:	18ffe004 	addi	r3,r3,-128
 1008e54:	00800084 	movi	r2,2
 1008e58:	18bff51e 	bne	r3,r2,1008e30 <__svfscanf_r+0x9ac>
 1008e5c:	e0bfff04 	addi	r2,fp,-4
 1008e60:	10803fcc 	andi	r2,r2,255
 1008e64:	b887c83a 	sub	r3,r23,r2
 1008e68:	8885c83a 	sub	r2,r17,r2
 1008e6c:	147fffc4 	addi	r17,r2,-1
 1008e70:	1dffffc4 	addi	r23,r3,-1
 1008e74:	a880400c 	andi	r2,r21,256
 1008e78:	10001226 	beq	r2,zero,1008ec4 <__svfscanf_r+0xa40>
 1008e7c:	a881000c 	andi	r2,r21,1024
 1008e80:	1000651e 	bne	r2,zero,1009018 <__svfscanf_r+0xb94>
 1008e84:	bdffffc4 	addi	r23,r23,-1
 1008e88:	b9400007 	ldb	r5,0(r23)
 1008e8c:	00801944 	movi	r2,101
 1008e90:	8c7fffc4 	addi	r17,r17,-1
 1008e94:	28800826 	beq	r5,r2,1008eb8 <__svfscanf_r+0xa34>
 1008e98:	00801144 	movi	r2,69
 1008e9c:	28800626 	beq	r5,r2,1008eb8 <__svfscanf_r+0xa34>
 1008ea0:	bdffffc4 	addi	r23,r23,-1
 1008ea4:	b009883a 	mov	r4,r22
 1008ea8:	800d883a 	mov	r6,r16
 1008eac:	10110100 	call	1011010 <_ungetc_r>
 1008eb0:	b9400007 	ldb	r5,0(r23)
 1008eb4:	8c7fffc4 	addi	r17,r17,-1
 1008eb8:	b009883a 	mov	r4,r22
 1008ebc:	800d883a 	mov	r6,r16
 1008ec0:	10110100 	call	1011010 <_ungetc_r>
 1008ec4:	a880040c 	andi	r2,r21,16
 1008ec8:	103d811e 	bne	r2,zero,10084d0 <__svfscanf_r+0x4c>
 1008ecc:	a8c1800c 	andi	r3,r21,1536
 1008ed0:	00810004 	movi	r2,1024
 1008ed4:	b8000005 	stb	zero,0(r23)
 1008ed8:	1880bb26 	beq	r3,r2,10091c8 <__svfscanf_r+0xd44>
 1008edc:	d8809d17 	ldw	r2,628(sp)
 1008ee0:	1000a61e 	bne	r2,zero,100917c <__svfscanf_r+0xcf8>
 1008ee4:	d940a617 	ldw	r5,664(sp)
 1008ee8:	b009883a 	mov	r4,r22
 1008eec:	000d883a 	mov	r6,zero
 1008ef0:	100ee4c0 	call	100ee4c <_strtod_r>
 1008ef4:	a900004c 	andi	r4,r21,1
 1008ef8:	2009003a 	cmpeq	r4,r4,zero
 1008efc:	1025883a 	mov	r18,r2
 1008f00:	1827883a 	mov	r19,r3
 1008f04:	2000951e 	bne	r4,zero,100915c <__svfscanf_r+0xcd8>
 1008f08:	d8c0a417 	ldw	r3,656(sp)
 1008f0c:	18800017 	ldw	r2,0(r3)
 1008f10:	1d400104 	addi	r21,r3,4
 1008f14:	14c00115 	stw	r19,4(r2)
 1008f18:	14800015 	stw	r18,0(r2)
 1008f1c:	d8c0a217 	ldw	r3,648(sp)
 1008f20:	dd40a415 	stw	r21,656(sp)
 1008f24:	18c00044 	addi	r3,r3,1
 1008f28:	d8c0a215 	stw	r3,648(sp)
 1008f2c:	003d6806 	br	10084d0 <__svfscanf_r+0x4c>
 1008f30:	a880800c 	andi	r2,r21,512
 1008f34:	103fab26 	beq	r2,zero,1008de4 <__svfscanf_r+0x960>
 1008f38:	d9009e17 	ldw	r4,632(sp)
 1008f3c:	00bf5fc4 	movi	r2,-641
 1008f40:	a8aa703a 	and	r21,r21,r2
 1008f44:	d9009f15 	stw	r4,636(sp)
 1008f48:	003f9806 	br	1008dac <__svfscanf_r+0x928>
 1008f4c:	b009883a 	mov	r4,r22
 1008f50:	800b883a 	mov	r5,r16
 1008f54:	d980a715 	stw	r6,668(sp)
 1008f58:	100e57c0 	call	100e57c <__srefill_r>
 1008f5c:	d980a717 	ldw	r6,668(sp)
 1008f60:	103f9c26 	beq	r2,zero,1008dd4 <__svfscanf_r+0x950>
 1008f64:	003f9f06 	br	1008de4 <__svfscanf_r+0x960>
 1008f68:	a880400c 	andi	r2,r21,256
 1008f6c:	10000b26 	beq	r2,zero,1008f9c <__svfscanf_r+0xb18>
 1008f70:	00bfdfc4 	movi	r2,-129
 1008f74:	a8aa703a 	and	r21,r21,r2
 1008f78:	d8809e17 	ldw	r2,632(sp)
 1008f7c:	10800044 	addi	r2,r2,1
 1008f80:	d8809e15 	stw	r2,632(sp)
 1008f84:	303f8b26 	beq	r6,zero,1008db4 <__svfscanf_r+0x930>
 1008f88:	d8c0a317 	ldw	r3,652(sp)
 1008f8c:	31bfffc4 	addi	r6,r6,-1
 1008f90:	18c00044 	addi	r3,r3,1
 1008f94:	d8c0a315 	stw	r3,652(sp)
 1008f98:	003f8606 	br	1008db4 <__svfscanf_r+0x930>
 1008f9c:	e0803fcc 	andi	r2,fp,255
 1008fa0:	1080201c 	xori	r2,r2,128
 1008fa4:	10bfe004 	addi	r2,r2,-128
 1008fa8:	9085883a 	add	r2,r18,r2
 1008fac:	103f8d1e 	bne	r2,zero,1008de4 <__svfscanf_r+0x960>
 1008fb0:	00bf9fc4 	movi	r2,-385
 1008fb4:	a8aa703a 	and	r21,r21,r2
 1008fb8:	003f7c06 	br	1008dac <__svfscanf_r+0x928>
 1008fbc:	00800044 	movi	r2,1
 1008fc0:	90bf881e 	bne	r18,r2,1008de4 <__svfscanf_r+0x960>
 1008fc4:	04800084 	movi	r18,2
 1008fc8:	003f7806 	br	1008dac <__svfscanf_r+0x928>
 1008fcc:	a8c1400c 	andi	r3,r21,1280
 1008fd0:	00810004 	movi	r2,1024
 1008fd4:	18800426 	beq	r3,r2,1008fe8 <__svfscanf_r+0xb64>
 1008fd8:	a884703a 	and	r2,r21,r2
 1008fdc:	103f8126 	beq	r2,zero,1008de4 <__svfscanf_r+0x960>
 1008fe0:	d8809e17 	ldw	r2,632(sp)
 1008fe4:	103f8326 	beq	r2,zero,1008df4 <__svfscanf_r+0x970>
 1008fe8:	a880800c 	andi	r2,r21,512
 1008fec:	1000051e 	bne	r2,zero,1009004 <__svfscanf_r+0xb80>
 1008ff0:	d8c09e17 	ldw	r3,632(sp)
 1008ff4:	d9009f17 	ldw	r4,636(sp)
 1008ff8:	ddc09c15 	stw	r23,624(sp)
 1008ffc:	1907c83a 	sub	r3,r3,r4
 1009000:	d8c09d15 	stw	r3,628(sp)
 1009004:	00be7fc4 	movi	r2,-1537
 1009008:	a884703a 	and	r2,r21,r2
 100900c:	15406014 	ori	r21,r2,384
 1009010:	d8009e15 	stw	zero,632(sp)
 1009014:	003f6506 	br	1008dac <__svfscanf_r+0x928>
 1009018:	d900a617 	ldw	r4,664(sp)
 100901c:	25fd4e2e 	bgeu	r4,r23,1008558 <__svfscanf_r+0xd4>
 1009020:	bdffffc4 	addi	r23,r23,-1
 1009024:	b9400007 	ldb	r5,0(r23)
 1009028:	b009883a 	mov	r4,r22
 100902c:	800d883a 	mov	r6,r16
 1009030:	10110100 	call	1011010 <_ungetc_r>
 1009034:	d880a617 	ldw	r2,664(sp)
 1009038:	15fff936 	bltu	r2,r23,1009020 <__svfscanf_r+0xb9c>
 100903c:	003d4606 	br	1008558 <__svfscanf_r+0xd4>
 1009040:	d900a617 	ldw	r4,664(sp)
 1009044:	25fd442e 	bgeu	r4,r23,1008558 <__svfscanf_r+0xd4>
 1009048:	bdffffc4 	addi	r23,r23,-1
 100904c:	b9400007 	ldb	r5,0(r23)
 1009050:	b009883a 	mov	r4,r22
 1009054:	800d883a 	mov	r6,r16
 1009058:	10110100 	call	1011010 <_ungetc_r>
 100905c:	d8c0a617 	ldw	r3,664(sp)
 1009060:	1dfff936 	bltu	r3,r23,1009048 <__svfscanf_r+0xbc4>
 1009064:	003d3c06 	br	1008558 <__svfscanf_r+0xd4>
 1009068:	e0c03fcc 	andi	r3,fp,255
 100906c:	18c0201c 	xori	r3,r3,128
 1009070:	18ffe004 	addi	r3,r3,-128
 1009074:	00800084 	movi	r2,2
 1009078:	18bf5a1e 	bne	r3,r2,1008de4 <__svfscanf_r+0x960>
 100907c:	070000c4 	movi	fp,3
 1009080:	003f4a06 	br	1008dac <__svfscanf_r+0x928>
 1009084:	e0c03fcc 	andi	r3,fp,255
 1009088:	18c0201c 	xori	r3,r3,128
 100908c:	18ffe004 	addi	r3,r3,-128
 1009090:	1800231e 	bne	r3,zero,1009120 <__svfscanf_r+0xc9c>
 1009094:	a8c1c00c 	andi	r3,r21,1792
 1009098:	0081c004 	movi	r2,1792
 100909c:	18bf511e 	bne	r3,r2,1008de4 <__svfscanf_r+0x960>
 10090a0:	00be1fc4 	movi	r2,-1921
 10090a4:	a8aa703a 	and	r21,r21,r2
 10090a8:	07000044 	movi	fp,1
 10090ac:	003f3f06 	br	1008dac <__svfscanf_r+0x928>
 10090b0:	9000101e 	bne	r18,zero,10090f4 <__svfscanf_r+0xc70>
 10090b4:	a8c1c00c 	andi	r3,r21,1792
 10090b8:	0081c004 	movi	r2,1792
 10090bc:	18800926 	beq	r3,r2,10090e4 <__svfscanf_r+0xc60>
 10090c0:	e0c03fcc 	andi	r3,fp,255
 10090c4:	18c0201c 	xori	r3,r3,128
 10090c8:	18ffe004 	addi	r3,r3,-128
 10090cc:	00800044 	movi	r2,1
 10090d0:	18800226 	beq	r3,r2,10090dc <__svfscanf_r+0xc58>
 10090d4:	00800104 	movi	r2,4
 10090d8:	18bf421e 	bne	r3,r2,1008de4 <__svfscanf_r+0x960>
 10090dc:	e7000044 	addi	fp,fp,1
 10090e0:	003f3206 	br	1008dac <__svfscanf_r+0x928>
 10090e4:	00be1fc4 	movi	r2,-1921
 10090e8:	a8aa703a 	and	r21,r21,r2
 10090ec:	04800044 	movi	r18,1
 10090f0:	003f2e06 	br	1008dac <__svfscanf_r+0x928>
 10090f4:	00800084 	movi	r2,2
 10090f8:	90bff11e 	bne	r18,r2,10090c0 <__svfscanf_r+0xc3c>
 10090fc:	048000c4 	movi	r18,3
 1009100:	003f2a06 	br	1008dac <__svfscanf_r+0x928>
 1009104:	e0c03fcc 	andi	r3,fp,255
 1009108:	18c0201c 	xori	r3,r3,128
 100910c:	18ffe004 	addi	r3,r3,-128
 1009110:	00800184 	movi	r2,6
 1009114:	18bf331e 	bne	r3,r2,1008de4 <__svfscanf_r+0x960>
 1009118:	070001c4 	movi	fp,7
 100911c:	003f2306 	br	1008dac <__svfscanf_r+0x928>
 1009120:	008000c4 	movi	r2,3
 1009124:	18bfed26 	beq	r3,r2,10090dc <__svfscanf_r+0xc58>
 1009128:	00800144 	movi	r2,5
 100912c:	18bfeb26 	beq	r3,r2,10090dc <__svfscanf_r+0xc58>
 1009130:	003f2c06 	br	1008de4 <__svfscanf_r+0x960>
 1009134:	d900a617 	ldw	r4,664(sp)
 1009138:	25fd072e 	bgeu	r4,r23,1008558 <__svfscanf_r+0xd4>
 100913c:	bdffffc4 	addi	r23,r23,-1
 1009140:	b9400007 	ldb	r5,0(r23)
 1009144:	b009883a 	mov	r4,r22
 1009148:	800d883a 	mov	r6,r16
 100914c:	10110100 	call	1011010 <_ungetc_r>
 1009150:	d880a617 	ldw	r2,664(sp)
 1009154:	15fff936 	bltu	r2,r23,100913c <__svfscanf_r+0xcb8>
 1009158:	003cff06 	br	1008558 <__svfscanf_r+0xd4>
 100915c:	a880008c 	andi	r2,r21,2
 1009160:	10002026 	beq	r2,zero,10091e4 <__svfscanf_r+0xd60>
 1009164:	d900a417 	ldw	r4,656(sp)
 1009168:	20800017 	ldw	r2,0(r4)
 100916c:	25400104 	addi	r21,r4,4
 1009170:	10c00115 	stw	r3,4(r2)
 1009174:	14800015 	stw	r18,0(r2)
 1009178:	003f6806 	br	1008f1c <__svfscanf_r+0xa98>
 100917c:	d8c09c17 	ldw	r3,624(sp)
 1009180:	b009883a 	mov	r4,r22
 1009184:	000d883a 	mov	r6,zero
 1009188:	19400044 	addi	r5,r3,1
 100918c:	01c00284 	movi	r7,10
 1009190:	10104700 	call	1010470 <_strtol_r>
 1009194:	d9009d17 	ldw	r4,628(sp)
 1009198:	110dc83a 	sub	r6,r2,r4
 100919c:	d8c0a617 	ldw	r3,664(sp)
 10091a0:	d9009c17 	ldw	r4,624(sp)
 10091a4:	188054c4 	addi	r2,r3,339
 10091a8:	20800236 	bltu	r4,r2,10091b4 <__svfscanf_r+0xd30>
 10091ac:	18805484 	addi	r2,r3,338
 10091b0:	d8809c15 	stw	r2,624(sp)
 10091b4:	d9009c17 	ldw	r4,624(sp)
 10091b8:	014040b4 	movhi	r5,258
 10091bc:	2968e704 	addi	r5,r5,-23652
 10091c0:	100ebe40 	call	100ebe4 <sprintf>
 10091c4:	003f4706 	br	1008ee4 <__svfscanf_r+0xa60>
 10091c8:	d8c09e17 	ldw	r3,632(sp)
 10091cc:	d9009f17 	ldw	r4,636(sp)
 10091d0:	1905c83a 	sub	r2,r3,r4
 10091d4:	103f4326 	beq	r2,zero,1008ee4 <__svfscanf_r+0xa60>
 10091d8:	008dc83a 	sub	r6,zero,r2
 10091dc:	ddc09c15 	stw	r23,624(sp)
 10091e0:	003fee06 	br	100919c <__svfscanf_r+0xd18>
 10091e4:	d880a417 	ldw	r2,656(sp)
 10091e8:	9009883a 	mov	r4,r18
 10091ec:	180b883a 	mov	r5,r3
 10091f0:	15c00017 	ldw	r23,0(r2)
 10091f4:	15400104 	addi	r21,r2,4
 10091f8:	100e79c0 	call	100e79c <__isnand>
 10091fc:	10021c1e 	bne	r2,zero,1009a70 <__svfscanf_r+0x15ec>
 1009200:	980b883a 	mov	r5,r19
 1009204:	9009883a 	mov	r4,r18
 1009208:	10151ec0 	call	10151ec <__truncdfsf2>
 100920c:	b8800015 	stw	r2,0(r23)
 1009210:	003f4206 	br	1008f1c <__svfscanf_r+0xa98>
 1009214:	e0c03fcc 	andi	r3,fp,255
 1009218:	18c0201c 	xori	r3,r3,128
 100921c:	18ffe004 	addi	r3,r3,-128
 1009220:	008001c4 	movi	r2,7
 1009224:	18beef1e 	bne	r3,r2,1008de4 <__svfscanf_r+0x960>
 1009228:	07000204 	movi	fp,8
 100922c:	003edf06 	br	1008dac <__svfscanf_r+0x928>
 1009230:	d900a317 	ldw	r4,652(sp)
 1009234:	208002a4 	muli	r2,r4,10
 1009238:	1145883a 	add	r2,r2,r5
 100923c:	10bff404 	addi	r2,r2,-48
 1009240:	d880a315 	stw	r2,652(sp)
 1009244:	003ceb06 	br	10085f4 <__svfscanf_r+0x170>
 1009248:	9880040c 	andi	r2,r19,16
 100924c:	10001426 	beq	r2,zero,10092a0 <__svfscanf_r+0xe1c>
 1009250:	0027883a 	mov	r19,zero
 1009254:	00000906 	br	100927c <__svfscanf_r+0xdf8>
 1009258:	80c00117 	ldw	r3,4(r16)
 100925c:	d880a317 	ldw	r2,652(sp)
 1009260:	29800044 	addi	r6,r5,1
 1009264:	18ffffc4 	addi	r3,r3,-1
 1009268:	9cc00044 	addi	r19,r19,1
 100926c:	81800015 	stw	r6,0(r16)
 1009270:	80c00115 	stw	r3,4(r16)
 1009274:	14fdf726 	beq	r2,r19,1008a54 <__svfscanf_r+0x5d0>
 1009278:	00c02c0e 	bge	zero,r3,100932c <__svfscanf_r+0xea8>
 100927c:	81400017 	ldw	r5,0(r16)
 1009280:	90800017 	ldw	r2,0(r18)
 1009284:	28c00003 	ldbu	r3,0(r5)
 1009288:	1887883a 	add	r3,r3,r2
 100928c:	19000003 	ldbu	r4,0(r3)
 1009290:	2100020c 	andi	r4,r4,8
 1009294:	203ff026 	beq	r4,zero,1009258 <__svfscanf_r+0xdd4>
 1009298:	8ce3883a 	add	r17,r17,r19
 100929c:	003c8c06 	br	10084d0 <__svfscanf_r+0x4c>
 10092a0:	d8c0a417 	ldw	r3,656(sp)
 10092a4:	1d400017 	ldw	r21,0(r3)
 10092a8:	a827883a 	mov	r19,r21
 10092ac:	00000e06 	br	10092e8 <__svfscanf_r+0xe64>
 10092b0:	80800117 	ldw	r2,4(r16)
 10092b4:	d900a317 	ldw	r4,652(sp)
 10092b8:	29800044 	addi	r6,r5,1
 10092bc:	10ffffc4 	addi	r3,r2,-1
 10092c0:	213fffc4 	addi	r4,r4,-1
 10092c4:	d900a315 	stw	r4,652(sp)
 10092c8:	80c00115 	stw	r3,4(r16)
 10092cc:	28800003 	ldbu	r2,0(r5)
 10092d0:	98800005 	stb	r2,0(r19)
 10092d4:	81800015 	stw	r6,0(r16)
 10092d8:	9cc00044 	addi	r19,r19,1
 10092dc:	20000926 	beq	r4,zero,1009304 <__svfscanf_r+0xe80>
 10092e0:	80800117 	ldw	r2,4(r16)
 10092e4:	0080170e 	bge	zero,r2,1009344 <__svfscanf_r+0xec0>
 10092e8:	81400017 	ldw	r5,0(r16)
 10092ec:	90800017 	ldw	r2,0(r18)
 10092f0:	28c00003 	ldbu	r3,0(r5)
 10092f4:	1887883a 	add	r3,r3,r2
 10092f8:	19000003 	ldbu	r4,0(r3)
 10092fc:	2100020c 	andi	r4,r4,8
 1009300:	203feb26 	beq	r4,zero,10092b0 <__svfscanf_r+0xe2c>
 1009304:	9d45c83a 	sub	r2,r19,r21
 1009308:	d8c0a217 	ldw	r3,648(sp)
 100930c:	88a3883a 	add	r17,r17,r2
 1009310:	d880a417 	ldw	r2,656(sp)
 1009314:	18c00044 	addi	r3,r3,1
 1009318:	d8c0a215 	stw	r3,648(sp)
 100931c:	10800104 	addi	r2,r2,4
 1009320:	d880a415 	stw	r2,656(sp)
 1009324:	98000005 	stb	zero,0(r19)
 1009328:	003c6906 	br	10084d0 <__svfscanf_r+0x4c>
 100932c:	b009883a 	mov	r4,r22
 1009330:	800b883a 	mov	r5,r16
 1009334:	100e57c0 	call	100e57c <__srefill_r>
 1009338:	103fd026 	beq	r2,zero,100927c <__svfscanf_r+0xdf8>
 100933c:	8ce3883a 	add	r17,r17,r19
 1009340:	003c6306 	br	10084d0 <__svfscanf_r+0x4c>
 1009344:	b009883a 	mov	r4,r22
 1009348:	800b883a 	mov	r5,r16
 100934c:	100e57c0 	call	100e57c <__srefill_r>
 1009350:	103fe526 	beq	r2,zero,10092e8 <__svfscanf_r+0xe64>
 1009354:	003feb06 	br	1009304 <__svfscanf_r+0xe80>
 1009358:	d900a317 	ldw	r4,652(sp)
 100935c:	9d41e014 	ori	r21,r19,1920
 1009360:	2000821e 	bne	r4,zero,100956c <__svfscanf_r+0x10e8>
 1009364:	d8c04404 	addi	r3,sp,272
 1009368:	182f883a 	mov	r23,r3
 100936c:	0039883a 	mov	fp,zero
 1009370:	d8c0a615 	stw	r3,664(sp)
 1009374:	d8009c15 	stw	zero,624(sp)
 1009378:	d8009d15 	stw	zero,628(sp)
 100937c:	d8009f15 	stw	zero,636(sp)
 1009380:	d8009e15 	stw	zero,632(sp)
 1009384:	003e9e06 	br	1008e00 <__svfscanf_r+0x97c>
 1009388:	d900a317 	ldw	r4,652(sp)
 100938c:	9c836014 	ori	r18,r19,3456
 1009390:	2000161e 	bne	r4,zero,10093ec <__svfscanf_r+0xf68>
 1009394:	d8804404 	addi	r2,sp,272
 1009398:	d880a615 	stw	r2,664(sp)
 100939c:	002f883a 	mov	r23,zero
 10093a0:	1027883a 	mov	r19,r2
 10093a4:	9080400c 	andi	r2,r18,256
 10093a8:	10000926 	beq	r2,zero,10093d0 <__svfscanf_r+0xf4c>
 10093ac:	d8c0a617 	ldw	r3,664(sp)
 10093b0:	1cc0052e 	bgeu	r3,r19,10093c8 <__svfscanf_r+0xf44>
 10093b4:	9cffffc4 	addi	r19,r19,-1
 10093b8:	99400007 	ldb	r5,0(r19)
 10093bc:	b009883a 	mov	r4,r22
 10093c0:	800d883a 	mov	r6,r16
 10093c4:	10110100 	call	1011010 <_ungetc_r>
 10093c8:	d900a617 	ldw	r4,664(sp)
 10093cc:	24fc6226 	beq	r4,r19,1008558 <__svfscanf_r+0xd4>
 10093d0:	9080040c 	andi	r2,r18,16
 10093d4:	10006726 	beq	r2,zero,1009574 <__svfscanf_r+0x10f0>
 10093d8:	d8c0a617 	ldw	r3,664(sp)
 10093dc:	98c5c83a 	sub	r2,r19,r3
 10093e0:	b885883a 	add	r2,r23,r2
 10093e4:	88a3883a 	add	r17,r17,r2
 10093e8:	003c3906 	br	10084d0 <__svfscanf_r+0x4c>
 10093ec:	002b883a 	mov	r21,zero
 10093f0:	d8c04404 	addi	r3,sp,272
 10093f4:	d8c0a615 	stw	r3,664(sp)
 10093f8:	002f883a 	mov	r23,zero
 10093fc:	1827883a 	mov	r19,r3
 1009400:	81800017 	ldw	r6,0(r16)
 1009404:	00c01344 	movi	r3,77
 1009408:	31400003 	ldbu	r5,0(r6)
 100940c:	28bff544 	addi	r2,r5,-43
 1009410:	10803fcc 	andi	r2,r2,255
 1009414:	18bfe336 	bltu	r3,r2,10093a4 <__svfscanf_r+0xf20>
 1009418:	1085883a 	add	r2,r2,r2
 100941c:	1085883a 	add	r2,r2,r2
 1009420:	00c04074 	movhi	r3,257
 1009424:	18e50d04 	addi	r3,r3,-27596
 1009428:	10c5883a 	add	r2,r2,r3
 100942c:	11000017 	ldw	r4,0(r2)
 1009430:	2000683a 	jmp	r4
 1009434:	010095c8 	cmpgei	r4,zero,599
 1009438:	010093a4 	muli	r4,zero,590
 100943c:	010095c8 	cmpgei	r4,zero,599
 1009440:	010093a4 	muli	r4,zero,590
 1009444:	010093a4 	muli	r4,zero,590
 1009448:	0100960c 	andi	r4,zero,600
 100944c:	01009708 	cmpgei	r4,zero,604
 1009450:	01009708 	cmpgei	r4,zero,604
 1009454:	01009708 	cmpgei	r4,zero,604
 1009458:	01009708 	cmpgei	r4,zero,604
 100945c:	01009708 	cmpgei	r4,zero,604
 1009460:	01009708 	cmpgei	r4,zero,604
 1009464:	01009708 	cmpgei	r4,zero,604
 1009468:	01009730 	cmpltui	r4,zero,604
 100946c:	01009730 	cmpltui	r4,zero,604
 1009470:	010093a4 	muli	r4,zero,590
 1009474:	010093a4 	muli	r4,zero,590
 1009478:	010093a4 	muli	r4,zero,590
 100947c:	010093a4 	muli	r4,zero,590
 1009480:	010093a4 	muli	r4,zero,590
 1009484:	010093a4 	muli	r4,zero,590
 1009488:	010093a4 	muli	r4,zero,590
 100948c:	01009760 	cmpeqi	r4,zero,605
 1009490:	01009760 	cmpeqi	r4,zero,605
 1009494:	01009760 	cmpeqi	r4,zero,605
 1009498:	01009760 	cmpeqi	r4,zero,605
 100949c:	01009760 	cmpeqi	r4,zero,605
 10094a0:	01009760 	cmpeqi	r4,zero,605
 10094a4:	010093a4 	muli	r4,zero,590
 10094a8:	010093a4 	muli	r4,zero,590
 10094ac:	010093a4 	muli	r4,zero,590
 10094b0:	010093a4 	muli	r4,zero,590
 10094b4:	010093a4 	muli	r4,zero,590
 10094b8:	010093a4 	muli	r4,zero,590
 10094bc:	010093a4 	muli	r4,zero,590
 10094c0:	010093a4 	muli	r4,zero,590
 10094c4:	010093a4 	muli	r4,zero,590
 10094c8:	010093a4 	muli	r4,zero,590
 10094cc:	010093a4 	muli	r4,zero,590
 10094d0:	010093a4 	muli	r4,zero,590
 10094d4:	010093a4 	muli	r4,zero,590
 10094d8:	010093a4 	muli	r4,zero,590
 10094dc:	010093a4 	muli	r4,zero,590
 10094e0:	010093a4 	muli	r4,zero,590
 10094e4:	010093a4 	muli	r4,zero,590
 10094e8:	01009770 	cmpltui	r4,zero,605
 10094ec:	010093a4 	muli	r4,zero,590
 10094f0:	010093a4 	muli	r4,zero,590
 10094f4:	010093a4 	muli	r4,zero,590
 10094f8:	010093a4 	muli	r4,zero,590
 10094fc:	010093a4 	muli	r4,zero,590
 1009500:	010093a4 	muli	r4,zero,590
 1009504:	010093a4 	muli	r4,zero,590
 1009508:	010093a4 	muli	r4,zero,590
 100950c:	01009760 	cmpeqi	r4,zero,605
 1009510:	01009760 	cmpeqi	r4,zero,605
 1009514:	01009760 	cmpeqi	r4,zero,605
 1009518:	01009760 	cmpeqi	r4,zero,605
 100951c:	01009760 	cmpeqi	r4,zero,605
 1009520:	01009760 	cmpeqi	r4,zero,605
 1009524:	010093a4 	muli	r4,zero,590
 1009528:	010093a4 	muli	r4,zero,590
 100952c:	010093a4 	muli	r4,zero,590
 1009530:	010093a4 	muli	r4,zero,590
 1009534:	010093a4 	muli	r4,zero,590
 1009538:	010093a4 	muli	r4,zero,590
 100953c:	010093a4 	muli	r4,zero,590
 1009540:	010093a4 	muli	r4,zero,590
 1009544:	010093a4 	muli	r4,zero,590
 1009548:	010093a4 	muli	r4,zero,590
 100954c:	010093a4 	muli	r4,zero,590
 1009550:	010093a4 	muli	r4,zero,590
 1009554:	010093a4 	muli	r4,zero,590
 1009558:	010093a4 	muli	r4,zero,590
 100955c:	010093a4 	muli	r4,zero,590
 1009560:	010093a4 	muli	r4,zero,590
 1009564:	010093a4 	muli	r4,zero,590
 1009568:	01009770 	cmpltui	r4,zero,605
 100956c:	000d883a 	mov	r6,zero
 1009570:	003d9006 	br	1008bb4 <__svfscanf_r+0x730>
 1009574:	98000005 	stb	zero,0(r19)
 1009578:	d8c0a017 	ldw	r3,640(sp)
 100957c:	d940a617 	ldw	r5,664(sp)
 1009580:	d9c0a117 	ldw	r7,644(sp)
 1009584:	b009883a 	mov	r4,r22
 1009588:	000d883a 	mov	r6,zero
 100958c:	183ee83a 	callr	r3
 1009590:	1007883a 	mov	r3,r2
 1009594:	9080080c 	andi	r2,r18,32
 1009598:	10004d1e 	bne	r2,zero,10096d0 <__svfscanf_r+0x124c>
 100959c:	9080010c 	andi	r2,r18,4
 10095a0:	10003426 	beq	r2,zero,1009674 <__svfscanf_r+0x11f0>
 10095a4:	d900a417 	ldw	r4,656(sp)
 10095a8:	20800017 	ldw	r2,0(r4)
 10095ac:	21000104 	addi	r4,r4,4
 10095b0:	d900a415 	stw	r4,656(sp)
 10095b4:	10c0000d 	sth	r3,0(r2)
 10095b8:	d880a217 	ldw	r2,648(sp)
 10095bc:	10800044 	addi	r2,r2,1
 10095c0:	d880a215 	stw	r2,648(sp)
 10095c4:	003f8406 	br	10093d8 <__svfscanf_r+0xf54>
 10095c8:	9080200c 	andi	r2,r18,128
 10095cc:	103f7526 	beq	r2,zero,10093a4 <__svfscanf_r+0xf20>
 10095d0:	00bfdfc4 	movi	r2,-129
 10095d4:	90a4703a 	and	r18,r18,r2
 10095d8:	99400005 	stb	r5,0(r19)
 10095dc:	9cc00044 	addi	r19,r19,1
 10095e0:	80c00117 	ldw	r3,4(r16)
 10095e4:	18ffffc4 	addi	r3,r3,-1
 10095e8:	80c00115 	stw	r3,4(r16)
 10095ec:	00c0130e 	bge	zero,r3,100963c <__svfscanf_r+0x11b8>
 10095f0:	31800044 	addi	r6,r6,1
 10095f4:	81800015 	stw	r6,0(r16)
 10095f8:	d880a317 	ldw	r2,652(sp)
 10095fc:	10bfffc4 	addi	r2,r2,-1
 1009600:	d880a315 	stw	r2,652(sp)
 1009604:	103f7e1e 	bne	r2,zero,1009400 <__svfscanf_r+0xf7c>
 1009608:	003f6606 	br	10093a4 <__svfscanf_r+0xf20>
 100960c:	9082000c 	andi	r2,r18,2048
 1009610:	103ff126 	beq	r2,zero,10095d8 <__svfscanf_r+0x1154>
 1009614:	d8c0a117 	ldw	r3,644(sp)
 1009618:	1800031e 	bne	r3,zero,1009628 <__svfscanf_r+0x11a4>
 100961c:	01000204 	movi	r4,8
 1009620:	94808014 	ori	r18,r18,512
 1009624:	d900a115 	stw	r4,644(sp)
 1009628:	9081000c 	andi	r2,r18,1024
 100962c:	10000826 	beq	r2,zero,1009650 <__svfscanf_r+0x11cc>
 1009630:	00be9fc4 	movi	r2,-1409
 1009634:	90a4703a 	and	r18,r18,r2
 1009638:	003fe706 	br	10095d8 <__svfscanf_r+0x1154>
 100963c:	b009883a 	mov	r4,r22
 1009640:	800b883a 	mov	r5,r16
 1009644:	100e57c0 	call	100e57c <__srefill_r>
 1009648:	103feb26 	beq	r2,zero,10095f8 <__svfscanf_r+0x1174>
 100964c:	003f5506 	br	10093a4 <__svfscanf_r+0xf20>
 1009650:	a8000426 	beq	r21,zero,1009664 <__svfscanf_r+0x11e0>
 1009654:	d880a317 	ldw	r2,652(sp)
 1009658:	ad7fffc4 	addi	r21,r21,-1
 100965c:	10800044 	addi	r2,r2,1
 1009660:	d880a315 	stw	r2,652(sp)
 1009664:	00bf1fc4 	movi	r2,-897
 1009668:	90a4703a 	and	r18,r18,r2
 100966c:	bdc00044 	addi	r23,r23,1
 1009670:	003fdb06 	br	10095e0 <__svfscanf_r+0x115c>
 1009674:	9080004c 	andi	r2,r18,1
 1009678:	1005003a 	cmpeq	r2,r2,zero
 100967c:	10001426 	beq	r2,zero,10096d0 <__svfscanf_r+0x124c>
 1009680:	9080008c 	andi	r2,r18,2
 1009684:	10001226 	beq	r2,zero,10096d0 <__svfscanf_r+0x124c>
 1009688:	d8c0a017 	ldw	r3,640(sp)
 100968c:	00804074 	movhi	r2,257
 1009690:	10827c04 	addi	r2,r2,2544
 1009694:	18801426 	beq	r3,r2,10096e8 <__svfscanf_r+0x1264>
 1009698:	d9c0a117 	ldw	r7,644(sp)
 100969c:	d940a617 	ldw	r5,664(sp)
 10096a0:	000d883a 	mov	r6,zero
 10096a4:	b009883a 	mov	r4,r22
 10096a8:	10106d80 	call	10106d8 <_strtoll_r>
 10096ac:	100d883a 	mov	r6,r2
 10096b0:	180f883a 	mov	r7,r3
 10096b4:	d900a417 	ldw	r4,656(sp)
 10096b8:	20800017 	ldw	r2,0(r4)
 10096bc:	21000104 	addi	r4,r4,4
 10096c0:	d900a415 	stw	r4,656(sp)
 10096c4:	11c00115 	stw	r7,4(r2)
 10096c8:	11800015 	stw	r6,0(r2)
 10096cc:	003fba06 	br	10095b8 <__svfscanf_r+0x1134>
 10096d0:	d900a417 	ldw	r4,656(sp)
 10096d4:	20800017 	ldw	r2,0(r4)
 10096d8:	21000104 	addi	r4,r4,4
 10096dc:	d900a415 	stw	r4,656(sp)
 10096e0:	10c00015 	stw	r3,0(r2)
 10096e4:	003fb406 	br	10095b8 <__svfscanf_r+0x1134>
 10096e8:	d9c0a117 	ldw	r7,644(sp)
 10096ec:	d940a617 	ldw	r5,664(sp)
 10096f0:	000d883a 	mov	r6,zero
 10096f4:	b009883a 	mov	r4,r22
 10096f8:	1010c440 	call	1010c44 <_strtoull_r>
 10096fc:	100d883a 	mov	r6,r2
 1009700:	180f883a 	mov	r7,r3
 1009704:	003feb06 	br	10096b4 <__svfscanf_r+0x1230>
 1009708:	d8c0a117 	ldw	r3,644(sp)
 100970c:	18c5883a 	add	r2,r3,r3
 1009710:	00c040b4 	movhi	r3,258
 1009714:	18e8e884 	addi	r3,r3,-23646
 1009718:	10c5883a 	add	r2,r2,r3
 100971c:	1080000f 	ldh	r2,0(r2)
 1009720:	00fd1fc4 	movi	r3,-2945
 1009724:	90e4703a 	and	r18,r18,r3
 1009728:	d880a115 	stw	r2,644(sp)
 100972c:	003faa06 	br	10095d8 <__svfscanf_r+0x1154>
 1009730:	d900a117 	ldw	r4,644(sp)
 1009734:	00c040b4 	movhi	r3,258
 1009738:	18e8e884 	addi	r3,r3,-23646
 100973c:	2105883a 	add	r2,r4,r4
 1009740:	10c5883a 	add	r2,r2,r3
 1009744:	1080000f 	ldh	r2,0(r2)
 1009748:	00c00204 	movi	r3,8
 100974c:	d880a115 	stw	r2,644(sp)
 1009750:	18bf140e 	bge	r3,r2,10093a4 <__svfscanf_r+0xf20>
 1009754:	00bd1fc4 	movi	r2,-2945
 1009758:	90a4703a 	and	r18,r18,r2
 100975c:	003f9e06 	br	10095d8 <__svfscanf_r+0x1154>
 1009760:	d8c0a117 	ldw	r3,644(sp)
 1009764:	00800284 	movi	r2,10
 1009768:	10fffa16 	blt	r2,r3,1009754 <__svfscanf_r+0x12d0>
 100976c:	003f0d06 	br	10093a4 <__svfscanf_r+0xf20>
 1009770:	90c1800c 	andi	r3,r18,1536
 1009774:	00808004 	movi	r2,512
 1009778:	18bf0a1e 	bne	r3,r2,10093a4 <__svfscanf_r+0xf20>
 100977c:	00bf7fc4 	movi	r2,-513
 1009780:	9084703a 	and	r2,r18,r2
 1009784:	01000404 	movi	r4,16
 1009788:	14814014 	ori	r18,r2,1280
 100978c:	d900a115 	stw	r4,644(sp)
 1009790:	003f9106 	br	10095d8 <__svfscanf_r+0x1154>
 1009794:	d880a417 	ldw	r2,656(sp)
 1009798:	dd400404 	addi	r21,sp,16
 100979c:	14800017 	ldw	r18,0(r2)
 10097a0:	9027883a 	mov	r19,r18
 10097a4:	81000017 	ldw	r4,0(r16)
 10097a8:	20800003 	ldbu	r2,0(r4)
 10097ac:	a885883a 	add	r2,r21,r2
 10097b0:	10c00007 	ldb	r3,0(r2)
 10097b4:	18001426 	beq	r3,zero,1009808 <__svfscanf_r+0x1384>
 10097b8:	d8c0a317 	ldw	r3,652(sp)
 10097bc:	80800117 	ldw	r2,4(r16)
 10097c0:	21800044 	addi	r6,r4,1
 10097c4:	18ffffc4 	addi	r3,r3,-1
 10097c8:	d8c0a315 	stw	r3,652(sp)
 10097cc:	10ffffc4 	addi	r3,r2,-1
 10097d0:	80c00115 	stw	r3,4(r16)
 10097d4:	20800003 	ldbu	r2,0(r4)
 10097d8:	90800005 	stb	r2,0(r18)
 10097dc:	d900a317 	ldw	r4,652(sp)
 10097e0:	81800015 	stw	r6,0(r16)
 10097e4:	94800044 	addi	r18,r18,1
 10097e8:	20000726 	beq	r4,zero,1009808 <__svfscanf_r+0x1384>
 10097ec:	80800117 	ldw	r2,4(r16)
 10097f0:	00bfec16 	blt	zero,r2,10097a4 <__svfscanf_r+0x1320>
 10097f4:	b009883a 	mov	r4,r22
 10097f8:	800b883a 	mov	r5,r16
 10097fc:	100e57c0 	call	100e57c <__srefill_r>
 1009800:	103fe826 	beq	r2,zero,10097a4 <__svfscanf_r+0x1320>
 1009804:	9cbb7426 	beq	r19,r18,10085d8 <__svfscanf_r+0x154>
 1009808:	94e7c83a 	sub	r19,r18,r19
 100980c:	983b5226 	beq	r19,zero,1008558 <__svfscanf_r+0xd4>
 1009810:	90000005 	stb	zero,0(r18)
 1009814:	d880a417 	ldw	r2,656(sp)
 1009818:	d8c0a217 	ldw	r3,648(sp)
 100981c:	8ce3883a 	add	r17,r17,r19
 1009820:	10800104 	addi	r2,r2,4
 1009824:	18c00044 	addi	r3,r3,1
 1009828:	d880a415 	stw	r2,656(sp)
 100982c:	d8c0a215 	stw	r3,648(sp)
 1009830:	003b2706 	br	10084d0 <__svfscanf_r+0x4c>
 1009834:	9cc00414 	ori	r19,r19,16
 1009838:	003b6e06 	br	10085f4 <__svfscanf_r+0x170>
 100983c:	00c00404 	movi	r3,16
 1009840:	01004074 	movhi	r4,257
 1009844:	21027c04 	addi	r4,r4,2544
 1009848:	9cc08014 	ori	r19,r19,512
 100984c:	054000c4 	movi	r21,3
 1009850:	d8c0a115 	stw	r3,644(sp)
 1009854:	d900a015 	stw	r4,640(sp)
 1009858:	003bf806 	br	100883c <__svfscanf_r+0x3b8>
 100985c:	9880040c 	andi	r2,r19,16
 1009860:	10001926 	beq	r2,zero,10098c8 <__svfscanf_r+0x1444>
 1009864:	0027883a 	mov	r19,zero
 1009868:	00000b06 	br	1009898 <__svfscanf_r+0x1414>
 100986c:	80800017 	ldw	r2,0(r16)
 1009870:	b009883a 	mov	r4,r22
 1009874:	800b883a 	mov	r5,r16
 1009878:	148d883a 	add	r6,r2,r18
 100987c:	81800015 	stw	r6,0(r16)
 1009880:	9ca7883a 	add	r19,r19,r18
 1009884:	100e57c0 	call	100e57c <__srefill_r>
 1009888:	103c711e 	bne	r2,zero,1008a50 <__svfscanf_r+0x5cc>
 100988c:	d900a317 	ldw	r4,652(sp)
 1009890:	2489c83a 	sub	r4,r4,r18
 1009894:	d900a315 	stw	r4,652(sp)
 1009898:	84800117 	ldw	r18,4(r16)
 100989c:	d8c0a317 	ldw	r3,652(sp)
 10098a0:	90fff216 	blt	r18,r3,100986c <__svfscanf_r+0x13e8>
 10098a4:	d900a317 	ldw	r4,652(sp)
 10098a8:	80800017 	ldw	r2,0(r16)
 10098ac:	9927883a 	add	r19,r19,r4
 10098b0:	9107c83a 	sub	r3,r18,r4
 10098b4:	110d883a 	add	r6,r2,r4
 10098b8:	8ce3883a 	add	r17,r17,r19
 10098bc:	80c00115 	stw	r3,4(r16)
 10098c0:	81800015 	stw	r6,0(r16)
 10098c4:	003b0206 	br	10084d0 <__svfscanf_r+0x4c>
 10098c8:	d880a417 	ldw	r2,656(sp)
 10098cc:	d980a317 	ldw	r6,652(sp)
 10098d0:	01400044 	movi	r5,1
 10098d4:	11000017 	ldw	r4,0(r2)
 10098d8:	800f883a 	mov	r7,r16
 10098dc:	100bdc40 	call	100bdc4 <fread>
 10098e0:	103b3d26 	beq	r2,zero,10085d8 <__svfscanf_r+0x154>
 10098e4:	d8c0a417 	ldw	r3,656(sp)
 10098e8:	d900a217 	ldw	r4,648(sp)
 10098ec:	88a3883a 	add	r17,r17,r2
 10098f0:	18c00104 	addi	r3,r3,4
 10098f4:	21000044 	addi	r4,r4,1
 10098f8:	d8c0a415 	stw	r3,656(sp)
 10098fc:	d900a215 	stw	r4,648(sp)
 1009900:	003af306 	br	10084d0 <__svfscanf_r+0x4c>
 1009904:	8080030b 	ldhu	r2,12(r16)
 1009908:	1080100c 	andi	r2,r2,64
 100990c:	103b1226 	beq	r2,zero,1008558 <__svfscanf_r+0xd4>
 1009910:	003b3306 	br	10085e0 <__svfscanf_r+0x15c>
 1009914:	983b1026 	beq	r19,zero,1008558 <__svfscanf_r+0xd4>
 1009918:	8ce3883a 	add	r17,r17,r19
 100991c:	003aec06 	br	10084d0 <__svfscanf_r+0x4c>
 1009920:	983c9626 	beq	r19,zero,1008b7c <__svfscanf_r+0x6f8>
 1009924:	9cffffc4 	addi	r19,r19,-1
 1009928:	d8c04404 	addi	r3,sp,272
 100992c:	1cc5883a 	add	r2,r3,r19
 1009930:	11400003 	ldbu	r5,0(r2)
 1009934:	b009883a 	mov	r4,r22
 1009938:	800d883a 	mov	r6,r16
 100993c:	10110100 	call	1011010 <_ungetc_r>
 1009940:	003ff706 	br	1009920 <__svfscanf_r+0x149c>
 1009944:	00bfff84 	movi	r2,-2
 1009948:	18bc7a1e 	bne	r3,r2,1008b34 <__svfscanf_r+0x6b0>
 100994c:	003c8406 	br	1008b60 <__svfscanf_r+0x6dc>
 1009950:	d900a417 	ldw	r4,656(sp)
 1009954:	25400017 	ldw	r21,0(r4)
 1009958:	21000104 	addi	r4,r4,4
 100995c:	d900a415 	stw	r4,656(sp)
 1009960:	003c4a06 	br	1008a8c <__svfscanf_r+0x608>
 1009964:	00bfff84 	movi	r2,-2
 1009968:	18bc0f1e 	bne	r3,r2,10089a8 <__svfscanf_r+0x524>
 100996c:	003c1506 	br	10089c4 <__svfscanf_r+0x540>
 1009970:	b009883a 	mov	r4,r22
 1009974:	800b883a 	mov	r5,r16
 1009978:	100e57c0 	call	100e57c <__srefill_r>
 100997c:	103c1326 	beq	r2,zero,10089cc <__svfscanf_r+0x548>
 1009980:	903b151e 	bne	r18,zero,10085d8 <__svfscanf_r+0x154>
 1009984:	a83ad21e 	bne	r21,zero,10084d0 <__svfscanf_r+0x4c>
 1009988:	d880a217 	ldw	r2,648(sp)
 100998c:	10800044 	addi	r2,r2,1
 1009990:	d880a215 	stw	r2,648(sp)
 1009994:	003ace06 	br	10084d0 <__svfscanf_r+0x4c>
 1009998:	0027883a 	mov	r19,zero
 100999c:	003bdd06 	br	1008914 <__svfscanf_r+0x490>
 10099a0:	9cc00114 	ori	r19,r19,4
 10099a4:	003b1306 	br	10085f4 <__svfscanf_r+0x170>
 10099a8:	05400104 	movi	r21,4
 10099ac:	003ba306 	br	100883c <__svfscanf_r+0x3b8>
 10099b0:	9cc00054 	ori	r19,r19,1
 10099b4:	00804074 	movhi	r2,257
 10099b8:	10811c04 	addi	r2,r2,1136
 10099bc:	00c00284 	movi	r3,10
 10099c0:	054000c4 	movi	r21,3
 10099c4:	d880a015 	stw	r2,640(sp)
 10099c8:	d8c0a115 	stw	r3,644(sp)
 10099cc:	003b9b06 	br	100883c <__svfscanf_r+0x3b8>
 10099d0:	9cc01014 	ori	r19,r19,64
 10099d4:	002b883a 	mov	r21,zero
 10099d8:	003b9806 	br	100883c <__svfscanf_r+0x3b8>
 10099dc:	a00b883a 	mov	r5,r20
 10099e0:	d9000404 	addi	r4,sp,16
 10099e4:	100e7cc0 	call	100e7cc <__sccl>
 10099e8:	1029883a 	mov	r20,r2
 10099ec:	9cc01014 	ori	r19,r19,64
 10099f0:	05400044 	movi	r21,1
 10099f4:	003b9106 	br	100883c <__svfscanf_r+0x3b8>
 10099f8:	9cc00054 	ori	r19,r19,1
 10099fc:	00800204 	movi	r2,8
 1009a00:	00c04074 	movhi	r3,257
 1009a04:	18c27c04 	addi	r3,r3,2544
 1009a08:	054000c4 	movi	r21,3
 1009a0c:	d880a115 	stw	r2,644(sp)
 1009a10:	d8c0a015 	stw	r3,640(sp)
 1009a14:	003b8906 	br	100883c <__svfscanf_r+0x3b8>
 1009a18:	9880040c 	andi	r2,r19,16
 1009a1c:	103aac1e 	bne	r2,zero,10084d0 <__svfscanf_r+0x4c>
 1009a20:	9880010c 	andi	r2,r19,4
 1009a24:	10002426 	beq	r2,zero,1009ab8 <__svfscanf_r+0x1634>
 1009a28:	d900a417 	ldw	r4,656(sp)
 1009a2c:	20800017 	ldw	r2,0(r4)
 1009a30:	21000104 	addi	r4,r4,4
 1009a34:	d900a415 	stw	r4,656(sp)
 1009a38:	1440000d 	sth	r17,0(r2)
 1009a3c:	003aa406 	br	10084d0 <__svfscanf_r+0x4c>
 1009a40:	9cc00094 	ori	r19,r19,2
 1009a44:	003aeb06 	br	10085f4 <__svfscanf_r+0x170>
 1009a48:	05400084 	movi	r21,2
 1009a4c:	003b7b06 	br	100883c <__svfscanf_r+0x3b8>
 1009a50:	00800404 	movi	r2,16
 1009a54:	00c04074 	movhi	r3,257
 1009a58:	18c27c04 	addi	r3,r3,2544
 1009a5c:	9cc08814 	ori	r19,r19,544
 1009a60:	054000c4 	movi	r21,3
 1009a64:	d880a115 	stw	r2,644(sp)
 1009a68:	d8c0a015 	stw	r3,640(sp)
 1009a6c:	003b7306 	br	100883c <__svfscanf_r+0x3b8>
 1009a70:	0009883a 	mov	r4,zero
 1009a74:	100e88c0 	call	100e88c <nanf>
 1009a78:	b8800015 	stw	r2,0(r23)
 1009a7c:	003d2706 	br	1008f1c <__svfscanf_r+0xa98>
 1009a80:	a0c00007 	ldb	r3,0(r20)
 1009a84:	00801b04 	movi	r2,108
 1009a88:	18800826 	beq	r3,r2,1009aac <__svfscanf_r+0x1628>
 1009a8c:	9cc00054 	ori	r19,r19,1
 1009a90:	003ad806 	br	10085f4 <__svfscanf_r+0x170>
 1009a94:	01004074 	movhi	r4,257
 1009a98:	21011c04 	addi	r4,r4,1136
 1009a9c:	054000c4 	movi	r21,3
 1009aa0:	d900a015 	stw	r4,640(sp)
 1009aa4:	d800a115 	stw	zero,644(sp)
 1009aa8:	003b6406 	br	100883c <__svfscanf_r+0x3b8>
 1009aac:	a5000044 	addi	r20,r20,1
 1009ab0:	9cc00094 	ori	r19,r19,2
 1009ab4:	003acf06 	br	10085f4 <__svfscanf_r+0x170>
 1009ab8:	9880004c 	andi	r2,r19,1
 1009abc:	1005003a 	cmpeq	r2,r2,zero
 1009ac0:	10000a26 	beq	r2,zero,1009aec <__svfscanf_r+0x1668>
 1009ac4:	9880008c 	andi	r2,r19,2
 1009ac8:	10000826 	beq	r2,zero,1009aec <__svfscanf_r+0x1668>
 1009acc:	d900a417 	ldw	r4,656(sp)
 1009ad0:	8807d7fa 	srai	r3,r17,31
 1009ad4:	20800017 	ldw	r2,0(r4)
 1009ad8:	21000104 	addi	r4,r4,4
 1009adc:	d900a415 	stw	r4,656(sp)
 1009ae0:	14400015 	stw	r17,0(r2)
 1009ae4:	10c00115 	stw	r3,4(r2)
 1009ae8:	003a7906 	br	10084d0 <__svfscanf_r+0x4c>
 1009aec:	d8c0a417 	ldw	r3,656(sp)
 1009af0:	18800017 	ldw	r2,0(r3)
 1009af4:	18c00104 	addi	r3,r3,4
 1009af8:	d8c0a415 	stw	r3,656(sp)
 1009afc:	14400015 	stw	r17,0(r2)
 1009b00:	003a7306 	br	10084d0 <__svfscanf_r+0x4c>

01009b04 <__svfscanf>:
 1009b04:	008040b4 	movhi	r2,258
 1009b08:	10b25404 	addi	r2,r2,-14000
 1009b0c:	2013883a 	mov	r9,r4
 1009b10:	11000017 	ldw	r4,0(r2)
 1009b14:	2805883a 	mov	r2,r5
 1009b18:	300f883a 	mov	r7,r6
 1009b1c:	480b883a 	mov	r5,r9
 1009b20:	100d883a 	mov	r6,r2
 1009b24:	10084841 	jmpi	1008484 <__svfscanf_r>

01009b28 <_vfscanf_r>:
 1009b28:	defffb04 	addi	sp,sp,-20
 1009b2c:	dcc00315 	stw	r19,12(sp)
 1009b30:	dc800215 	stw	r18,8(sp)
 1009b34:	dc400115 	stw	r17,4(sp)
 1009b38:	dc000015 	stw	r16,0(sp)
 1009b3c:	dfc00415 	stw	ra,16(sp)
 1009b40:	2021883a 	mov	r16,r4
 1009b44:	2823883a 	mov	r17,r5
 1009b48:	3025883a 	mov	r18,r6
 1009b4c:	3827883a 	mov	r19,r7
 1009b50:	20000226 	beq	r4,zero,1009b5c <_vfscanf_r+0x34>
 1009b54:	20800e17 	ldw	r2,56(r4)
 1009b58:	10000b26 	beq	r2,zero,1009b88 <_vfscanf_r+0x60>
 1009b5c:	8009883a 	mov	r4,r16
 1009b60:	880b883a 	mov	r5,r17
 1009b64:	900d883a 	mov	r6,r18
 1009b68:	980f883a 	mov	r7,r19
 1009b6c:	dfc00417 	ldw	ra,16(sp)
 1009b70:	dcc00317 	ldw	r19,12(sp)
 1009b74:	dc800217 	ldw	r18,8(sp)
 1009b78:	dc400117 	ldw	r17,4(sp)
 1009b7c:	dc000017 	ldw	r16,0(sp)
 1009b80:	dec00504 	addi	sp,sp,20
 1009b84:	10084841 	jmpi	1008484 <__svfscanf_r>
 1009b88:	100b9700 	call	100b970 <__sinit>
 1009b8c:	003ff306 	br	1009b5c <_vfscanf_r+0x34>

01009b90 <vfscanf>:
 1009b90:	defffb04 	addi	sp,sp,-20
 1009b94:	dcc00315 	stw	r19,12(sp)
 1009b98:	04c040b4 	movhi	r19,258
 1009b9c:	9cf25404 	addi	r19,r19,-14000
 1009ba0:	98c00017 	ldw	r3,0(r19)
 1009ba4:	dc800215 	stw	r18,8(sp)
 1009ba8:	dc400115 	stw	r17,4(sp)
 1009bac:	dc000015 	stw	r16,0(sp)
 1009bb0:	dfc00415 	stw	ra,16(sp)
 1009bb4:	2021883a 	mov	r16,r4
 1009bb8:	2823883a 	mov	r17,r5
 1009bbc:	3025883a 	mov	r18,r6
 1009bc0:	18000326 	beq	r3,zero,1009bd0 <vfscanf+0x40>
 1009bc4:	18800e17 	ldw	r2,56(r3)
 1009bc8:	1809883a 	mov	r4,r3
 1009bcc:	10000b26 	beq	r2,zero,1009bfc <vfscanf+0x6c>
 1009bd0:	99000017 	ldw	r4,0(r19)
 1009bd4:	800b883a 	mov	r5,r16
 1009bd8:	880d883a 	mov	r6,r17
 1009bdc:	900f883a 	mov	r7,r18
 1009be0:	dfc00417 	ldw	ra,16(sp)
 1009be4:	dcc00317 	ldw	r19,12(sp)
 1009be8:	dc800217 	ldw	r18,8(sp)
 1009bec:	dc400117 	ldw	r17,4(sp)
 1009bf0:	dc000017 	ldw	r16,0(sp)
 1009bf4:	dec00504 	addi	sp,sp,20
 1009bf8:	10084841 	jmpi	1008484 <__svfscanf_r>
 1009bfc:	100b9700 	call	100b970 <__sinit>
 1009c00:	003ff306 	br	1009bd0 <vfscanf+0x40>

01009c04 <__swsetup_r>:
 1009c04:	008040b4 	movhi	r2,258
 1009c08:	10b25404 	addi	r2,r2,-14000
 1009c0c:	10c00017 	ldw	r3,0(r2)
 1009c10:	defffd04 	addi	sp,sp,-12
 1009c14:	dc400115 	stw	r17,4(sp)
 1009c18:	dc000015 	stw	r16,0(sp)
 1009c1c:	dfc00215 	stw	ra,8(sp)
 1009c20:	2023883a 	mov	r17,r4
 1009c24:	2821883a 	mov	r16,r5
 1009c28:	18000226 	beq	r3,zero,1009c34 <__swsetup_r+0x30>
 1009c2c:	18800e17 	ldw	r2,56(r3)
 1009c30:	10001f26 	beq	r2,zero,1009cb0 <__swsetup_r+0xac>
 1009c34:	8100030b 	ldhu	r4,12(r16)
 1009c38:	2080020c 	andi	r2,r4,8
 1009c3c:	10002826 	beq	r2,zero,1009ce0 <__swsetup_r+0xdc>
 1009c40:	81400417 	ldw	r5,16(r16)
 1009c44:	28001d26 	beq	r5,zero,1009cbc <__swsetup_r+0xb8>
 1009c48:	2080004c 	andi	r2,r4,1
 1009c4c:	1005003a 	cmpeq	r2,r2,zero
 1009c50:	10000b26 	beq	r2,zero,1009c80 <__swsetup_r+0x7c>
 1009c54:	2080008c 	andi	r2,r4,2
 1009c58:	10001226 	beq	r2,zero,1009ca4 <__swsetup_r+0xa0>
 1009c5c:	0005883a 	mov	r2,zero
 1009c60:	80800215 	stw	r2,8(r16)
 1009c64:	28000b26 	beq	r5,zero,1009c94 <__swsetup_r+0x90>
 1009c68:	0005883a 	mov	r2,zero
 1009c6c:	dfc00217 	ldw	ra,8(sp)
 1009c70:	dc400117 	ldw	r17,4(sp)
 1009c74:	dc000017 	ldw	r16,0(sp)
 1009c78:	dec00304 	addi	sp,sp,12
 1009c7c:	f800283a 	ret
 1009c80:	80800517 	ldw	r2,20(r16)
 1009c84:	80000215 	stw	zero,8(r16)
 1009c88:	0085c83a 	sub	r2,zero,r2
 1009c8c:	80800615 	stw	r2,24(r16)
 1009c90:	283ff51e 	bne	r5,zero,1009c68 <__swsetup_r+0x64>
 1009c94:	2080200c 	andi	r2,r4,128
 1009c98:	103ff326 	beq	r2,zero,1009c68 <__swsetup_r+0x64>
 1009c9c:	00bfffc4 	movi	r2,-1
 1009ca0:	003ff206 	br	1009c6c <__swsetup_r+0x68>
 1009ca4:	80800517 	ldw	r2,20(r16)
 1009ca8:	80800215 	stw	r2,8(r16)
 1009cac:	003fed06 	br	1009c64 <__swsetup_r+0x60>
 1009cb0:	1809883a 	mov	r4,r3
 1009cb4:	100b9700 	call	100b970 <__sinit>
 1009cb8:	003fde06 	br	1009c34 <__swsetup_r+0x30>
 1009cbc:	20c0a00c 	andi	r3,r4,640
 1009cc0:	00808004 	movi	r2,512
 1009cc4:	18bfe026 	beq	r3,r2,1009c48 <__swsetup_r+0x44>
 1009cc8:	8809883a 	mov	r4,r17
 1009ccc:	800b883a 	mov	r5,r16
 1009cd0:	100c9500 	call	100c950 <__smakebuf_r>
 1009cd4:	8100030b 	ldhu	r4,12(r16)
 1009cd8:	81400417 	ldw	r5,16(r16)
 1009cdc:	003fda06 	br	1009c48 <__swsetup_r+0x44>
 1009ce0:	2080040c 	andi	r2,r4,16
 1009ce4:	103fed26 	beq	r2,zero,1009c9c <__swsetup_r+0x98>
 1009ce8:	2080010c 	andi	r2,r4,4
 1009cec:	10001226 	beq	r2,zero,1009d38 <__swsetup_r+0x134>
 1009cf0:	81400c17 	ldw	r5,48(r16)
 1009cf4:	28000526 	beq	r5,zero,1009d0c <__swsetup_r+0x108>
 1009cf8:	80801004 	addi	r2,r16,64
 1009cfc:	28800226 	beq	r5,r2,1009d08 <__swsetup_r+0x104>
 1009d00:	8809883a 	mov	r4,r17
 1009d04:	100bf300 	call	100bf30 <_free_r>
 1009d08:	80000c15 	stw	zero,48(r16)
 1009d0c:	8080030b 	ldhu	r2,12(r16)
 1009d10:	81400417 	ldw	r5,16(r16)
 1009d14:	80000115 	stw	zero,4(r16)
 1009d18:	10bff6cc 	andi	r2,r2,65499
 1009d1c:	8080030d 	sth	r2,12(r16)
 1009d20:	81400015 	stw	r5,0(r16)
 1009d24:	8080030b 	ldhu	r2,12(r16)
 1009d28:	10800214 	ori	r2,r2,8
 1009d2c:	113fffcc 	andi	r4,r2,65535
 1009d30:	8080030d 	sth	r2,12(r16)
 1009d34:	003fc306 	br	1009c44 <__swsetup_r+0x40>
 1009d38:	81400417 	ldw	r5,16(r16)
 1009d3c:	003ff906 	br	1009d24 <__swsetup_r+0x120>

01009d40 <register_fini>:
 1009d40:	f800283a 	ret

01009d44 <__call_exitprocs>:
 1009d44:	008040b4 	movhi	r2,258
 1009d48:	10b25504 	addi	r2,r2,-13996
 1009d4c:	10800017 	ldw	r2,0(r2)
 1009d50:	defff304 	addi	sp,sp,-52
 1009d54:	df000b15 	stw	fp,44(sp)
 1009d58:	d8800115 	stw	r2,4(sp)
 1009d5c:	00804034 	movhi	r2,256
 1009d60:	10962a04 	addi	r2,r2,22696
 1009d64:	1005003a 	cmpeq	r2,r2,zero
 1009d68:	d8800215 	stw	r2,8(sp)
 1009d6c:	d8800117 	ldw	r2,4(sp)
 1009d70:	dd400815 	stw	r21,32(sp)
 1009d74:	dd000715 	stw	r20,28(sp)
 1009d78:	10805204 	addi	r2,r2,328
 1009d7c:	dfc00c15 	stw	ra,48(sp)
 1009d80:	ddc00a15 	stw	r23,40(sp)
 1009d84:	dd800915 	stw	r22,36(sp)
 1009d88:	dcc00615 	stw	r19,24(sp)
 1009d8c:	dc800515 	stw	r18,20(sp)
 1009d90:	dc400415 	stw	r17,16(sp)
 1009d94:	dc000315 	stw	r16,12(sp)
 1009d98:	282b883a 	mov	r21,r5
 1009d9c:	2039883a 	mov	fp,r4
 1009da0:	d8800015 	stw	r2,0(sp)
 1009da4:	2829003a 	cmpeq	r20,r5,zero
 1009da8:	d8800117 	ldw	r2,4(sp)
 1009dac:	14405217 	ldw	r17,328(r2)
 1009db0:	88001026 	beq	r17,zero,1009df4 <__call_exitprocs+0xb0>
 1009db4:	ddc00017 	ldw	r23,0(sp)
 1009db8:	88800117 	ldw	r2,4(r17)
 1009dbc:	8c802204 	addi	r18,r17,136
 1009dc0:	143fffc4 	addi	r16,r2,-1
 1009dc4:	80000916 	blt	r16,zero,1009dec <__call_exitprocs+0xa8>
 1009dc8:	05bfffc4 	movi	r22,-1
 1009dcc:	a000151e 	bne	r20,zero,1009e24 <__call_exitprocs+0xe0>
 1009dd0:	8409883a 	add	r4,r16,r16
 1009dd4:	2105883a 	add	r2,r4,r4
 1009dd8:	1485883a 	add	r2,r2,r18
 1009ddc:	10c02017 	ldw	r3,128(r2)
 1009de0:	a8c01126 	beq	r21,r3,1009e28 <__call_exitprocs+0xe4>
 1009de4:	843fffc4 	addi	r16,r16,-1
 1009de8:	85bff81e 	bne	r16,r22,1009dcc <__call_exitprocs+0x88>
 1009dec:	d8800217 	ldw	r2,8(sp)
 1009df0:	10003126 	beq	r2,zero,1009eb8 <__call_exitprocs+0x174>
 1009df4:	dfc00c17 	ldw	ra,48(sp)
 1009df8:	df000b17 	ldw	fp,44(sp)
 1009dfc:	ddc00a17 	ldw	r23,40(sp)
 1009e00:	dd800917 	ldw	r22,36(sp)
 1009e04:	dd400817 	ldw	r21,32(sp)
 1009e08:	dd000717 	ldw	r20,28(sp)
 1009e0c:	dcc00617 	ldw	r19,24(sp)
 1009e10:	dc800517 	ldw	r18,20(sp)
 1009e14:	dc400417 	ldw	r17,16(sp)
 1009e18:	dc000317 	ldw	r16,12(sp)
 1009e1c:	dec00d04 	addi	sp,sp,52
 1009e20:	f800283a 	ret
 1009e24:	8409883a 	add	r4,r16,r16
 1009e28:	88c00117 	ldw	r3,4(r17)
 1009e2c:	2105883a 	add	r2,r4,r4
 1009e30:	1445883a 	add	r2,r2,r17
 1009e34:	18ffffc4 	addi	r3,r3,-1
 1009e38:	11800217 	ldw	r6,8(r2)
 1009e3c:	1c001526 	beq	r3,r16,1009e94 <__call_exitprocs+0x150>
 1009e40:	10000215 	stw	zero,8(r2)
 1009e44:	303fe726 	beq	r6,zero,1009de4 <__call_exitprocs+0xa0>
 1009e48:	00c00044 	movi	r3,1
 1009e4c:	1c06983a 	sll	r3,r3,r16
 1009e50:	90804017 	ldw	r2,256(r18)
 1009e54:	8cc00117 	ldw	r19,4(r17)
 1009e58:	1884703a 	and	r2,r3,r2
 1009e5c:	10001426 	beq	r2,zero,1009eb0 <__call_exitprocs+0x16c>
 1009e60:	90804117 	ldw	r2,260(r18)
 1009e64:	1884703a 	and	r2,r3,r2
 1009e68:	10000c1e 	bne	r2,zero,1009e9c <__call_exitprocs+0x158>
 1009e6c:	2105883a 	add	r2,r4,r4
 1009e70:	1485883a 	add	r2,r2,r18
 1009e74:	11400017 	ldw	r5,0(r2)
 1009e78:	e009883a 	mov	r4,fp
 1009e7c:	303ee83a 	callr	r6
 1009e80:	88800117 	ldw	r2,4(r17)
 1009e84:	98bfc81e 	bne	r19,r2,1009da8 <__call_exitprocs+0x64>
 1009e88:	b8800017 	ldw	r2,0(r23)
 1009e8c:	147fd526 	beq	r2,r17,1009de4 <__call_exitprocs+0xa0>
 1009e90:	003fc506 	br	1009da8 <__call_exitprocs+0x64>
 1009e94:	8c000115 	stw	r16,4(r17)
 1009e98:	003fea06 	br	1009e44 <__call_exitprocs+0x100>
 1009e9c:	2105883a 	add	r2,r4,r4
 1009ea0:	1485883a 	add	r2,r2,r18
 1009ea4:	11000017 	ldw	r4,0(r2)
 1009ea8:	303ee83a 	callr	r6
 1009eac:	003ff406 	br	1009e80 <__call_exitprocs+0x13c>
 1009eb0:	303ee83a 	callr	r6
 1009eb4:	003ff206 	br	1009e80 <__call_exitprocs+0x13c>
 1009eb8:	88800117 	ldw	r2,4(r17)
 1009ebc:	1000081e 	bne	r2,zero,1009ee0 <__call_exitprocs+0x19c>
 1009ec0:	89000017 	ldw	r4,0(r17)
 1009ec4:	20000726 	beq	r4,zero,1009ee4 <__call_exitprocs+0x1a0>
 1009ec8:	b9000015 	stw	r4,0(r23)
 1009ecc:	8809883a 	mov	r4,r17
 1009ed0:	10058a80 	call	10058a8 <free>
 1009ed4:	bc400017 	ldw	r17,0(r23)
 1009ed8:	883fb71e 	bne	r17,zero,1009db8 <__call_exitprocs+0x74>
 1009edc:	003fc506 	br	1009df4 <__call_exitprocs+0xb0>
 1009ee0:	89000017 	ldw	r4,0(r17)
 1009ee4:	882f883a 	mov	r23,r17
 1009ee8:	2023883a 	mov	r17,r4
 1009eec:	883fb21e 	bne	r17,zero,1009db8 <__call_exitprocs+0x74>
 1009ef0:	003fc006 	br	1009df4 <__call_exitprocs+0xb0>

01009ef4 <abort>:
 1009ef4:	deffff04 	addi	sp,sp,-4
 1009ef8:	01000184 	movi	r4,6
 1009efc:	dfc00015 	stw	ra,0(sp)
 1009f00:	100e9600 	call	100e960 <raise>
 1009f04:	01000044 	movi	r4,1
 1009f08:	1015f980 	call	1015f98 <_exit>

01009f0c <quorem>:
 1009f0c:	28c00417 	ldw	r3,16(r5)
 1009f10:	20800417 	ldw	r2,16(r4)
 1009f14:	defff604 	addi	sp,sp,-40
 1009f18:	ddc00715 	stw	r23,28(sp)
 1009f1c:	dd400515 	stw	r21,20(sp)
 1009f20:	dfc00915 	stw	ra,36(sp)
 1009f24:	df000815 	stw	fp,32(sp)
 1009f28:	dd800615 	stw	r22,24(sp)
 1009f2c:	dd000415 	stw	r20,16(sp)
 1009f30:	dcc00315 	stw	r19,12(sp)
 1009f34:	dc800215 	stw	r18,8(sp)
 1009f38:	dc400115 	stw	r17,4(sp)
 1009f3c:	dc000015 	stw	r16,0(sp)
 1009f40:	202f883a 	mov	r23,r4
 1009f44:	282b883a 	mov	r21,r5
 1009f48:	10c07416 	blt	r2,r3,100a11c <quorem+0x210>
 1009f4c:	1c7fffc4 	addi	r17,r3,-1
 1009f50:	8c45883a 	add	r2,r17,r17
 1009f54:	1085883a 	add	r2,r2,r2
 1009f58:	2c000504 	addi	r16,r5,20
 1009f5c:	24c00504 	addi	r19,r4,20
 1009f60:	14ed883a 	add	r22,r2,r19
 1009f64:	80a5883a 	add	r18,r16,r2
 1009f68:	b7000017 	ldw	fp,0(r22)
 1009f6c:	91400017 	ldw	r5,0(r18)
 1009f70:	e009883a 	mov	r4,fp
 1009f74:	29400044 	addi	r5,r5,1
 1009f78:	10155300 	call	1015530 <__udivsi3>
 1009f7c:	1029883a 	mov	r20,r2
 1009f80:	10003c1e 	bne	r2,zero,100a074 <quorem+0x168>
 1009f84:	a80b883a 	mov	r5,r21
 1009f88:	b809883a 	mov	r4,r23
 1009f8c:	100cf040 	call	100cf04 <__mcmp>
 1009f90:	10002b16 	blt	r2,zero,100a040 <quorem+0x134>
 1009f94:	a5000044 	addi	r20,r20,1
 1009f98:	980f883a 	mov	r7,r19
 1009f9c:	0011883a 	mov	r8,zero
 1009fa0:	0009883a 	mov	r4,zero
 1009fa4:	81400017 	ldw	r5,0(r16)
 1009fa8:	38c00017 	ldw	r3,0(r7)
 1009fac:	84000104 	addi	r16,r16,4
 1009fb0:	28bfffcc 	andi	r2,r5,65535
 1009fb4:	2085883a 	add	r2,r4,r2
 1009fb8:	11bfffcc 	andi	r6,r2,65535
 1009fbc:	193fffcc 	andi	r4,r3,65535
 1009fc0:	1004d43a 	srli	r2,r2,16
 1009fc4:	280ad43a 	srli	r5,r5,16
 1009fc8:	2189c83a 	sub	r4,r4,r6
 1009fcc:	2209883a 	add	r4,r4,r8
 1009fd0:	1806d43a 	srli	r3,r3,16
 1009fd4:	288b883a 	add	r5,r5,r2
 1009fd8:	200dd43a 	srai	r6,r4,16
 1009fdc:	28bfffcc 	andi	r2,r5,65535
 1009fe0:	1887c83a 	sub	r3,r3,r2
 1009fe4:	1987883a 	add	r3,r3,r6
 1009fe8:	3900000d 	sth	r4,0(r7)
 1009fec:	38c0008d 	sth	r3,2(r7)
 1009ff0:	2808d43a 	srli	r4,r5,16
 1009ff4:	39c00104 	addi	r7,r7,4
 1009ff8:	1811d43a 	srai	r8,r3,16
 1009ffc:	943fe92e 	bgeu	r18,r16,1009fa4 <quorem+0x98>
 100a000:	8c45883a 	add	r2,r17,r17
 100a004:	1085883a 	add	r2,r2,r2
 100a008:	9885883a 	add	r2,r19,r2
 100a00c:	10c00017 	ldw	r3,0(r2)
 100a010:	18000b1e 	bne	r3,zero,100a040 <quorem+0x134>
 100a014:	113fff04 	addi	r4,r2,-4
 100a018:	9900082e 	bgeu	r19,r4,100a03c <quorem+0x130>
 100a01c:	10bfff17 	ldw	r2,-4(r2)
 100a020:	10000326 	beq	r2,zero,100a030 <quorem+0x124>
 100a024:	00000506 	br	100a03c <quorem+0x130>
 100a028:	20800017 	ldw	r2,0(r4)
 100a02c:	1000031e 	bne	r2,zero,100a03c <quorem+0x130>
 100a030:	213fff04 	addi	r4,r4,-4
 100a034:	8c7fffc4 	addi	r17,r17,-1
 100a038:	993ffb36 	bltu	r19,r4,100a028 <quorem+0x11c>
 100a03c:	bc400415 	stw	r17,16(r23)
 100a040:	a005883a 	mov	r2,r20
 100a044:	dfc00917 	ldw	ra,36(sp)
 100a048:	df000817 	ldw	fp,32(sp)
 100a04c:	ddc00717 	ldw	r23,28(sp)
 100a050:	dd800617 	ldw	r22,24(sp)
 100a054:	dd400517 	ldw	r21,20(sp)
 100a058:	dd000417 	ldw	r20,16(sp)
 100a05c:	dcc00317 	ldw	r19,12(sp)
 100a060:	dc800217 	ldw	r18,8(sp)
 100a064:	dc400117 	ldw	r17,4(sp)
 100a068:	dc000017 	ldw	r16,0(sp)
 100a06c:	dec00a04 	addi	sp,sp,40
 100a070:	f800283a 	ret
 100a074:	980f883a 	mov	r7,r19
 100a078:	8011883a 	mov	r8,r16
 100a07c:	0013883a 	mov	r9,zero
 100a080:	000d883a 	mov	r6,zero
 100a084:	40c00017 	ldw	r3,0(r8)
 100a088:	39000017 	ldw	r4,0(r7)
 100a08c:	42000104 	addi	r8,r8,4
 100a090:	18bfffcc 	andi	r2,r3,65535
 100a094:	a085383a 	mul	r2,r20,r2
 100a098:	1806d43a 	srli	r3,r3,16
 100a09c:	217fffcc 	andi	r5,r4,65535
 100a0a0:	3085883a 	add	r2,r6,r2
 100a0a4:	11bfffcc 	andi	r6,r2,65535
 100a0a8:	a0c7383a 	mul	r3,r20,r3
 100a0ac:	1004d43a 	srli	r2,r2,16
 100a0b0:	298bc83a 	sub	r5,r5,r6
 100a0b4:	2a4b883a 	add	r5,r5,r9
 100a0b8:	2008d43a 	srli	r4,r4,16
 100a0bc:	1887883a 	add	r3,r3,r2
 100a0c0:	280dd43a 	srai	r6,r5,16
 100a0c4:	18bfffcc 	andi	r2,r3,65535
 100a0c8:	2089c83a 	sub	r4,r4,r2
 100a0cc:	2189883a 	add	r4,r4,r6
 100a0d0:	3900008d 	sth	r4,2(r7)
 100a0d4:	3940000d 	sth	r5,0(r7)
 100a0d8:	180cd43a 	srli	r6,r3,16
 100a0dc:	39c00104 	addi	r7,r7,4
 100a0e0:	2013d43a 	srai	r9,r4,16
 100a0e4:	923fe72e 	bgeu	r18,r8,100a084 <quorem+0x178>
 100a0e8:	e03fa61e 	bne	fp,zero,1009f84 <quorem+0x78>
 100a0ec:	b0ffff04 	addi	r3,r22,-4
 100a0f0:	98c0082e 	bgeu	r19,r3,100a114 <quorem+0x208>
 100a0f4:	b0bfff17 	ldw	r2,-4(r22)
 100a0f8:	10000326 	beq	r2,zero,100a108 <quorem+0x1fc>
 100a0fc:	00000506 	br	100a114 <quorem+0x208>
 100a100:	18800017 	ldw	r2,0(r3)
 100a104:	1000031e 	bne	r2,zero,100a114 <quorem+0x208>
 100a108:	18ffff04 	addi	r3,r3,-4
 100a10c:	8c7fffc4 	addi	r17,r17,-1
 100a110:	98fffb36 	bltu	r19,r3,100a100 <quorem+0x1f4>
 100a114:	bc400415 	stw	r17,16(r23)
 100a118:	003f9a06 	br	1009f84 <quorem+0x78>
 100a11c:	0005883a 	mov	r2,zero
 100a120:	003fc806 	br	100a044 <quorem+0x138>

0100a124 <_dtoa_r>:
 100a124:	22001017 	ldw	r8,64(r4)
 100a128:	deffda04 	addi	sp,sp,-152
 100a12c:	dd402115 	stw	r21,132(sp)
 100a130:	dd002015 	stw	r20,128(sp)
 100a134:	dc801e15 	stw	r18,120(sp)
 100a138:	dc401d15 	stw	r17,116(sp)
 100a13c:	dfc02515 	stw	ra,148(sp)
 100a140:	df002415 	stw	fp,144(sp)
 100a144:	ddc02315 	stw	r23,140(sp)
 100a148:	dd802215 	stw	r22,136(sp)
 100a14c:	dcc01f15 	stw	r19,124(sp)
 100a150:	dc001c15 	stw	r16,112(sp)
 100a154:	d9001615 	stw	r4,88(sp)
 100a158:	3023883a 	mov	r17,r6
 100a15c:	2829883a 	mov	r20,r5
 100a160:	d9c01715 	stw	r7,92(sp)
 100a164:	dc802817 	ldw	r18,160(sp)
 100a168:	302b883a 	mov	r21,r6
 100a16c:	40000a26 	beq	r8,zero,100a198 <_dtoa_r+0x74>
 100a170:	20801117 	ldw	r2,68(r4)
 100a174:	400b883a 	mov	r5,r8
 100a178:	40800115 	stw	r2,4(r8)
 100a17c:	20c01117 	ldw	r3,68(r4)
 100a180:	00800044 	movi	r2,1
 100a184:	10c4983a 	sll	r2,r2,r3
 100a188:	40800215 	stw	r2,8(r8)
 100a18c:	100cda80 	call	100cda8 <_Bfree>
 100a190:	d8c01617 	ldw	r3,88(sp)
 100a194:	18001015 	stw	zero,64(r3)
 100a198:	8800a316 	blt	r17,zero,100a428 <_dtoa_r+0x304>
 100a19c:	90000015 	stw	zero,0(r18)
 100a1a0:	a8dffc2c 	andhi	r3,r21,32752
 100a1a4:	009ffc34 	movhi	r2,32752
 100a1a8:	18809126 	beq	r3,r2,100a3f0 <_dtoa_r+0x2cc>
 100a1ac:	000d883a 	mov	r6,zero
 100a1b0:	000f883a 	mov	r7,zero
 100a1b4:	a009883a 	mov	r4,r20
 100a1b8:	a80b883a 	mov	r5,r21
 100a1bc:	dd001215 	stw	r20,72(sp)
 100a1c0:	dd401315 	stw	r21,76(sp)
 100a1c4:	1014d740 	call	1014d74 <__nedf2>
 100a1c8:	1000171e 	bne	r2,zero,100a228 <_dtoa_r+0x104>
 100a1cc:	d9802717 	ldw	r6,156(sp)
 100a1d0:	00800044 	movi	r2,1
 100a1d4:	30800015 	stw	r2,0(r6)
 100a1d8:	d8802917 	ldw	r2,164(sp)
 100a1dc:	10029b26 	beq	r2,zero,100ac4c <_dtoa_r+0xb28>
 100a1e0:	d9002917 	ldw	r4,164(sp)
 100a1e4:	008040b4 	movhi	r2,258
 100a1e8:	10a8de44 	addi	r2,r2,-23687
 100a1ec:	10ffffc4 	addi	r3,r2,-1
 100a1f0:	20800015 	stw	r2,0(r4)
 100a1f4:	1805883a 	mov	r2,r3
 100a1f8:	dfc02517 	ldw	ra,148(sp)
 100a1fc:	df002417 	ldw	fp,144(sp)
 100a200:	ddc02317 	ldw	r23,140(sp)
 100a204:	dd802217 	ldw	r22,136(sp)
 100a208:	dd402117 	ldw	r21,132(sp)
 100a20c:	dd002017 	ldw	r20,128(sp)
 100a210:	dcc01f17 	ldw	r19,124(sp)
 100a214:	dc801e17 	ldw	r18,120(sp)
 100a218:	dc401d17 	ldw	r17,116(sp)
 100a21c:	dc001c17 	ldw	r16,112(sp)
 100a220:	dec02604 	addi	sp,sp,152
 100a224:	f800283a 	ret
 100a228:	d9001617 	ldw	r4,88(sp)
 100a22c:	d9401217 	ldw	r5,72(sp)
 100a230:	d8800104 	addi	r2,sp,4
 100a234:	a80d883a 	mov	r6,r21
 100a238:	d9c00204 	addi	r7,sp,8
 100a23c:	d8800015 	stw	r2,0(sp)
 100a240:	100d3e40 	call	100d3e4 <__d2b>
 100a244:	d8800715 	stw	r2,28(sp)
 100a248:	a804d53a 	srli	r2,r21,20
 100a24c:	1101ffcc 	andi	r4,r2,2047
 100a250:	20008626 	beq	r4,zero,100a46c <_dtoa_r+0x348>
 100a254:	d8c01217 	ldw	r3,72(sp)
 100a258:	00800434 	movhi	r2,16
 100a25c:	10bfffc4 	addi	r2,r2,-1
 100a260:	ddc00117 	ldw	r23,4(sp)
 100a264:	a884703a 	and	r2,r21,r2
 100a268:	1811883a 	mov	r8,r3
 100a26c:	124ffc34 	orhi	r9,r2,16368
 100a270:	25bf0044 	addi	r22,r4,-1023
 100a274:	d8000815 	stw	zero,32(sp)
 100a278:	0005883a 	mov	r2,zero
 100a27c:	00cffe34 	movhi	r3,16376
 100a280:	480b883a 	mov	r5,r9
 100a284:	4009883a 	mov	r4,r8
 100a288:	180f883a 	mov	r7,r3
 100a28c:	100d883a 	mov	r6,r2
 100a290:	10145dc0 	call	10145dc <__subdf3>
 100a294:	0218dbf4 	movhi	r8,25455
 100a298:	4210d844 	addi	r8,r8,17249
 100a29c:	024ff4f4 	movhi	r9,16339
 100a2a0:	4a61e9c4 	addi	r9,r9,-30809
 100a2a4:	480f883a 	mov	r7,r9
 100a2a8:	400d883a 	mov	r6,r8
 100a2ac:	180b883a 	mov	r5,r3
 100a2b0:	1009883a 	mov	r4,r2
 100a2b4:	10146d00 	call	10146d0 <__muldf3>
 100a2b8:	0222d874 	movhi	r8,35681
 100a2bc:	42322cc4 	addi	r8,r8,-14157
 100a2c0:	024ff1f4 	movhi	r9,16327
 100a2c4:	4a628a04 	addi	r9,r9,-30168
 100a2c8:	480f883a 	mov	r7,r9
 100a2cc:	400d883a 	mov	r6,r8
 100a2d0:	180b883a 	mov	r5,r3
 100a2d4:	1009883a 	mov	r4,r2
 100a2d8:	101465c0 	call	101465c <__adddf3>
 100a2dc:	b009883a 	mov	r4,r22
 100a2e0:	1021883a 	mov	r16,r2
 100a2e4:	1823883a 	mov	r17,r3
 100a2e8:	101501c0 	call	101501c <__floatsidf>
 100a2ec:	021427f4 	movhi	r8,20639
 100a2f0:	421e7ec4 	addi	r8,r8,31227
 100a2f4:	024ff4f4 	movhi	r9,16339
 100a2f8:	4a5104c4 	addi	r9,r9,17427
 100a2fc:	480f883a 	mov	r7,r9
 100a300:	400d883a 	mov	r6,r8
 100a304:	180b883a 	mov	r5,r3
 100a308:	1009883a 	mov	r4,r2
 100a30c:	10146d00 	call	10146d0 <__muldf3>
 100a310:	180f883a 	mov	r7,r3
 100a314:	880b883a 	mov	r5,r17
 100a318:	100d883a 	mov	r6,r2
 100a31c:	8009883a 	mov	r4,r16
 100a320:	101465c0 	call	101465c <__adddf3>
 100a324:	1009883a 	mov	r4,r2
 100a328:	180b883a 	mov	r5,r3
 100a32c:	1021883a 	mov	r16,r2
 100a330:	1823883a 	mov	r17,r3
 100a334:	10151140 	call	1015114 <__fixdfsi>
 100a338:	000d883a 	mov	r6,zero
 100a33c:	000f883a 	mov	r7,zero
 100a340:	8009883a 	mov	r4,r16
 100a344:	880b883a 	mov	r5,r17
 100a348:	d8800d15 	stw	r2,52(sp)
 100a34c:	1014f0c0 	call	1014f0c <__ltdf2>
 100a350:	10031716 	blt	r2,zero,100afb0 <_dtoa_r+0xe8c>
 100a354:	d8c00d17 	ldw	r3,52(sp)
 100a358:	00800584 	movi	r2,22
 100a35c:	10c1482e 	bgeu	r2,r3,100a880 <_dtoa_r+0x75c>
 100a360:	01000044 	movi	r4,1
 100a364:	d9000c15 	stw	r4,48(sp)
 100a368:	bd85c83a 	sub	r2,r23,r22
 100a36c:	11bfffc4 	addi	r6,r2,-1
 100a370:	30030b16 	blt	r6,zero,100afa0 <_dtoa_r+0xe7c>
 100a374:	d9800a15 	stw	r6,40(sp)
 100a378:	d8001115 	stw	zero,68(sp)
 100a37c:	d8c00d17 	ldw	r3,52(sp)
 100a380:	1802ff16 	blt	r3,zero,100af80 <_dtoa_r+0xe5c>
 100a384:	d9000a17 	ldw	r4,40(sp)
 100a388:	d8c00915 	stw	r3,36(sp)
 100a38c:	d8001015 	stw	zero,64(sp)
 100a390:	20c9883a 	add	r4,r4,r3
 100a394:	d9000a15 	stw	r4,40(sp)
 100a398:	d9001717 	ldw	r4,92(sp)
 100a39c:	00800244 	movi	r2,9
 100a3a0:	11004636 	bltu	r2,r4,100a4bc <_dtoa_r+0x398>
 100a3a4:	00800144 	movi	r2,5
 100a3a8:	11020416 	blt	r2,r4,100abbc <_dtoa_r+0xa98>
 100a3ac:	04400044 	movi	r17,1
 100a3b0:	d8c01717 	ldw	r3,92(sp)
 100a3b4:	00800144 	movi	r2,5
 100a3b8:	10c1ed36 	bltu	r2,r3,100ab70 <_dtoa_r+0xa4c>
 100a3bc:	18c5883a 	add	r2,r3,r3
 100a3c0:	1085883a 	add	r2,r2,r2
 100a3c4:	00c04074 	movhi	r3,257
 100a3c8:	18e8f604 	addi	r3,r3,-23592
 100a3cc:	10c5883a 	add	r2,r2,r3
 100a3d0:	11000017 	ldw	r4,0(r2)
 100a3d4:	2000683a 	jmp	r4
 100a3d8:	0100a4c4 	movi	r4,659
 100a3dc:	0100a4c4 	movi	r4,659
 100a3e0:	0100aec4 	movi	r4,699
 100a3e4:	0100ae9c 	xori	r4,zero,698
 100a3e8:	0100aee0 	cmpeqi	r4,zero,699
 100a3ec:	0100aeec 	andhi	r4,zero,699
 100a3f0:	d9002717 	ldw	r4,156(sp)
 100a3f4:	0089c3c4 	movi	r2,9999
 100a3f8:	20800015 	stw	r2,0(r4)
 100a3fc:	a0001026 	beq	r20,zero,100a440 <_dtoa_r+0x31c>
 100a400:	00c040b4 	movhi	r3,258
 100a404:	18e99504 	addi	r3,r3,-22956
 100a408:	d9802917 	ldw	r6,164(sp)
 100a40c:	303f7926 	beq	r6,zero,100a1f4 <_dtoa_r+0xd0>
 100a410:	188000c7 	ldb	r2,3(r3)
 100a414:	190000c4 	addi	r4,r3,3
 100a418:	1000101e 	bne	r2,zero,100a45c <_dtoa_r+0x338>
 100a41c:	d8802917 	ldw	r2,164(sp)
 100a420:	11000015 	stw	r4,0(r2)
 100a424:	003f7306 	br	100a1f4 <_dtoa_r+0xd0>
 100a428:	00a00034 	movhi	r2,32768
 100a42c:	10bfffc4 	addi	r2,r2,-1
 100a430:	00c00044 	movi	r3,1
 100a434:	88aa703a 	and	r21,r17,r2
 100a438:	90c00015 	stw	r3,0(r18)
 100a43c:	003f5806 	br	100a1a0 <_dtoa_r+0x7c>
 100a440:	00800434 	movhi	r2,16
 100a444:	10bfffc4 	addi	r2,r2,-1
 100a448:	a884703a 	and	r2,r21,r2
 100a44c:	103fec1e 	bne	r2,zero,100a400 <_dtoa_r+0x2dc>
 100a450:	00c040b4 	movhi	r3,258
 100a454:	18e99204 	addi	r3,r3,-22968
 100a458:	003feb06 	br	100a408 <_dtoa_r+0x2e4>
 100a45c:	d8802917 	ldw	r2,164(sp)
 100a460:	19000204 	addi	r4,r3,8
 100a464:	11000015 	stw	r4,0(r2)
 100a468:	003f6206 	br	100a1f4 <_dtoa_r+0xd0>
 100a46c:	ddc00117 	ldw	r23,4(sp)
 100a470:	d8800217 	ldw	r2,8(sp)
 100a474:	01000804 	movi	r4,32
 100a478:	b8c10c84 	addi	r3,r23,1074
 100a47c:	18a3883a 	add	r17,r3,r2
 100a480:	2441b80e 	bge	r4,r17,100ab64 <_dtoa_r+0xa40>
 100a484:	00c01004 	movi	r3,64
 100a488:	1c47c83a 	sub	r3,r3,r17
 100a48c:	88bff804 	addi	r2,r17,-32
 100a490:	a8c6983a 	sll	r3,r21,r3
 100a494:	a084d83a 	srl	r2,r20,r2
 100a498:	1888b03a 	or	r4,r3,r2
 100a49c:	10152600 	call	1015260 <__floatunsidf>
 100a4a0:	1011883a 	mov	r8,r2
 100a4a4:	00bf8434 	movhi	r2,65040
 100a4a8:	01000044 	movi	r4,1
 100a4ac:	10d3883a 	add	r9,r2,r3
 100a4b0:	8dbef344 	addi	r22,r17,-1075
 100a4b4:	d9000815 	stw	r4,32(sp)
 100a4b8:	003f6f06 	br	100a278 <_dtoa_r+0x154>
 100a4bc:	d8001715 	stw	zero,92(sp)
 100a4c0:	04400044 	movi	r17,1
 100a4c4:	00bfffc4 	movi	r2,-1
 100a4c8:	00c00044 	movi	r3,1
 100a4cc:	d8800e15 	stw	r2,56(sp)
 100a4d0:	d8002615 	stw	zero,152(sp)
 100a4d4:	d8800f15 	stw	r2,60(sp)
 100a4d8:	d8c00b15 	stw	r3,44(sp)
 100a4dc:	1021883a 	mov	r16,r2
 100a4e0:	d8801617 	ldw	r2,88(sp)
 100a4e4:	10001115 	stw	zero,68(r2)
 100a4e8:	d8801617 	ldw	r2,88(sp)
 100a4ec:	11401117 	ldw	r5,68(r2)
 100a4f0:	1009883a 	mov	r4,r2
 100a4f4:	100d3280 	call	100d328 <_Balloc>
 100a4f8:	d8c01617 	ldw	r3,88(sp)
 100a4fc:	d8800515 	stw	r2,20(sp)
 100a500:	18801015 	stw	r2,64(r3)
 100a504:	00800384 	movi	r2,14
 100a508:	14006836 	bltu	r2,r16,100a6ac <_dtoa_r+0x588>
 100a50c:	8805003a 	cmpeq	r2,r17,zero
 100a510:	1000661e 	bne	r2,zero,100a6ac <_dtoa_r+0x588>
 100a514:	d9000d17 	ldw	r4,52(sp)
 100a518:	0102300e 	bge	zero,r4,100addc <_dtoa_r+0xcb8>
 100a51c:	208003cc 	andi	r2,r4,15
 100a520:	100490fa 	slli	r2,r2,3
 100a524:	2025d13a 	srai	r18,r4,4
 100a528:	00c040b4 	movhi	r3,258
 100a52c:	18e9a604 	addi	r3,r3,-22888
 100a530:	10c5883a 	add	r2,r2,r3
 100a534:	90c0040c 	andi	r3,r18,16
 100a538:	14000017 	ldw	r16,0(r2)
 100a53c:	14400117 	ldw	r17,4(r2)
 100a540:	18036a1e 	bne	r3,zero,100b2ec <_dtoa_r+0x11c8>
 100a544:	05800084 	movi	r22,2
 100a548:	90001026 	beq	r18,zero,100a58c <_dtoa_r+0x468>
 100a54c:	04c040b4 	movhi	r19,258
 100a550:	9ce9d804 	addi	r19,r19,-22688
 100a554:	9080004c 	andi	r2,r18,1
 100a558:	1005003a 	cmpeq	r2,r2,zero
 100a55c:	1000081e 	bne	r2,zero,100a580 <_dtoa_r+0x45c>
 100a560:	99800017 	ldw	r6,0(r19)
 100a564:	99c00117 	ldw	r7,4(r19)
 100a568:	880b883a 	mov	r5,r17
 100a56c:	8009883a 	mov	r4,r16
 100a570:	10146d00 	call	10146d0 <__muldf3>
 100a574:	1021883a 	mov	r16,r2
 100a578:	b5800044 	addi	r22,r22,1
 100a57c:	1823883a 	mov	r17,r3
 100a580:	9025d07a 	srai	r18,r18,1
 100a584:	9cc00204 	addi	r19,r19,8
 100a588:	903ff21e 	bne	r18,zero,100a554 <_dtoa_r+0x430>
 100a58c:	a80b883a 	mov	r5,r21
 100a590:	a009883a 	mov	r4,r20
 100a594:	880f883a 	mov	r7,r17
 100a598:	800d883a 	mov	r6,r16
 100a59c:	1014a940 	call	1014a94 <__divdf3>
 100a5a0:	1029883a 	mov	r20,r2
 100a5a4:	182b883a 	mov	r21,r3
 100a5a8:	d8c00c17 	ldw	r3,48(sp)
 100a5ac:	1805003a 	cmpeq	r2,r3,zero
 100a5b0:	1000081e 	bne	r2,zero,100a5d4 <_dtoa_r+0x4b0>
 100a5b4:	0005883a 	mov	r2,zero
 100a5b8:	00cffc34 	movhi	r3,16368
 100a5bc:	180f883a 	mov	r7,r3
 100a5c0:	a009883a 	mov	r4,r20
 100a5c4:	a80b883a 	mov	r5,r21
 100a5c8:	100d883a 	mov	r6,r2
 100a5cc:	1014f0c0 	call	1014f0c <__ltdf2>
 100a5d0:	1003fe16 	blt	r2,zero,100b5cc <_dtoa_r+0x14a8>
 100a5d4:	b009883a 	mov	r4,r22
 100a5d8:	101501c0 	call	101501c <__floatsidf>
 100a5dc:	180b883a 	mov	r5,r3
 100a5e0:	1009883a 	mov	r4,r2
 100a5e4:	a00d883a 	mov	r6,r20
 100a5e8:	a80f883a 	mov	r7,r21
 100a5ec:	10146d00 	call	10146d0 <__muldf3>
 100a5f0:	0011883a 	mov	r8,zero
 100a5f4:	02500734 	movhi	r9,16412
 100a5f8:	1009883a 	mov	r4,r2
 100a5fc:	180b883a 	mov	r5,r3
 100a600:	480f883a 	mov	r7,r9
 100a604:	400d883a 	mov	r6,r8
 100a608:	101465c0 	call	101465c <__adddf3>
 100a60c:	d9000f17 	ldw	r4,60(sp)
 100a610:	102d883a 	mov	r22,r2
 100a614:	00bf3034 	movhi	r2,64704
 100a618:	18b9883a 	add	fp,r3,r2
 100a61c:	e02f883a 	mov	r23,fp
 100a620:	20028f1e 	bne	r4,zero,100b060 <_dtoa_r+0xf3c>
 100a624:	0005883a 	mov	r2,zero
 100a628:	00d00534 	movhi	r3,16404
 100a62c:	a009883a 	mov	r4,r20
 100a630:	a80b883a 	mov	r5,r21
 100a634:	180f883a 	mov	r7,r3
 100a638:	100d883a 	mov	r6,r2
 100a63c:	10145dc0 	call	10145dc <__subdf3>
 100a640:	1009883a 	mov	r4,r2
 100a644:	e00f883a 	mov	r7,fp
 100a648:	180b883a 	mov	r5,r3
 100a64c:	b00d883a 	mov	r6,r22
 100a650:	1025883a 	mov	r18,r2
 100a654:	1827883a 	mov	r19,r3
 100a658:	1014dfc0 	call	1014dfc <__gtdf2>
 100a65c:	00834f16 	blt	zero,r2,100b39c <_dtoa_r+0x1278>
 100a660:	e0e0003c 	xorhi	r3,fp,32768
 100a664:	9009883a 	mov	r4,r18
 100a668:	980b883a 	mov	r5,r19
 100a66c:	180f883a 	mov	r7,r3
 100a670:	b00d883a 	mov	r6,r22
 100a674:	1014f0c0 	call	1014f0c <__ltdf2>
 100a678:	1000080e 	bge	r2,zero,100a69c <_dtoa_r+0x578>
 100a67c:	0027883a 	mov	r19,zero
 100a680:	0025883a 	mov	r18,zero
 100a684:	d8802617 	ldw	r2,152(sp)
 100a688:	df000517 	ldw	fp,20(sp)
 100a68c:	d8000615 	stw	zero,24(sp)
 100a690:	0084303a 	nor	r2,zero,r2
 100a694:	d8800d15 	stw	r2,52(sp)
 100a698:	00019b06 	br	100ad08 <_dtoa_r+0xbe4>
 100a69c:	d9801217 	ldw	r6,72(sp)
 100a6a0:	d8801317 	ldw	r2,76(sp)
 100a6a4:	3029883a 	mov	r20,r6
 100a6a8:	102b883a 	mov	r21,r2
 100a6ac:	d8c00217 	ldw	r3,8(sp)
 100a6b0:	18008516 	blt	r3,zero,100a8c8 <_dtoa_r+0x7a4>
 100a6b4:	d9000d17 	ldw	r4,52(sp)
 100a6b8:	00800384 	movi	r2,14
 100a6bc:	11008216 	blt	r2,r4,100a8c8 <_dtoa_r+0x7a4>
 100a6c0:	200490fa 	slli	r2,r4,3
 100a6c4:	d9802617 	ldw	r6,152(sp)
 100a6c8:	00c040b4 	movhi	r3,258
 100a6cc:	18e9a604 	addi	r3,r3,-22888
 100a6d0:	10c5883a 	add	r2,r2,r3
 100a6d4:	14800017 	ldw	r18,0(r2)
 100a6d8:	14c00117 	ldw	r19,4(r2)
 100a6dc:	30031e16 	blt	r6,zero,100b358 <_dtoa_r+0x1234>
 100a6e0:	d9000517 	ldw	r4,20(sp)
 100a6e4:	d8c00f17 	ldw	r3,60(sp)
 100a6e8:	a823883a 	mov	r17,r21
 100a6ec:	a021883a 	mov	r16,r20
 100a6f0:	192b883a 	add	r21,r3,r4
 100a6f4:	2039883a 	mov	fp,r4
 100a6f8:	00000f06 	br	100a738 <_dtoa_r+0x614>
 100a6fc:	0005883a 	mov	r2,zero
 100a700:	00d00934 	movhi	r3,16420
 100a704:	5009883a 	mov	r4,r10
 100a708:	580b883a 	mov	r5,r11
 100a70c:	180f883a 	mov	r7,r3
 100a710:	100d883a 	mov	r6,r2
 100a714:	10146d00 	call	10146d0 <__muldf3>
 100a718:	180b883a 	mov	r5,r3
 100a71c:	000d883a 	mov	r6,zero
 100a720:	000f883a 	mov	r7,zero
 100a724:	1009883a 	mov	r4,r2
 100a728:	1021883a 	mov	r16,r2
 100a72c:	1823883a 	mov	r17,r3
 100a730:	1014d740 	call	1014d74 <__nedf2>
 100a734:	10004526 	beq	r2,zero,100a84c <_dtoa_r+0x728>
 100a738:	900d883a 	mov	r6,r18
 100a73c:	980f883a 	mov	r7,r19
 100a740:	8009883a 	mov	r4,r16
 100a744:	880b883a 	mov	r5,r17
 100a748:	1014a940 	call	1014a94 <__divdf3>
 100a74c:	180b883a 	mov	r5,r3
 100a750:	1009883a 	mov	r4,r2
 100a754:	10151140 	call	1015114 <__fixdfsi>
 100a758:	1009883a 	mov	r4,r2
 100a75c:	1029883a 	mov	r20,r2
 100a760:	101501c0 	call	101501c <__floatsidf>
 100a764:	180f883a 	mov	r7,r3
 100a768:	9009883a 	mov	r4,r18
 100a76c:	980b883a 	mov	r5,r19
 100a770:	100d883a 	mov	r6,r2
 100a774:	10146d00 	call	10146d0 <__muldf3>
 100a778:	180f883a 	mov	r7,r3
 100a77c:	880b883a 	mov	r5,r17
 100a780:	8009883a 	mov	r4,r16
 100a784:	100d883a 	mov	r6,r2
 100a788:	10145dc0 	call	10145dc <__subdf3>
 100a78c:	1015883a 	mov	r10,r2
 100a790:	a0800c04 	addi	r2,r20,48
 100a794:	e0800005 	stb	r2,0(fp)
 100a798:	e7000044 	addi	fp,fp,1
 100a79c:	1817883a 	mov	r11,r3
 100a7a0:	e57fd61e 	bne	fp,r21,100a6fc <_dtoa_r+0x5d8>
 100a7a4:	500d883a 	mov	r6,r10
 100a7a8:	180f883a 	mov	r7,r3
 100a7ac:	5009883a 	mov	r4,r10
 100a7b0:	180b883a 	mov	r5,r3
 100a7b4:	101465c0 	call	101465c <__adddf3>
 100a7b8:	100d883a 	mov	r6,r2
 100a7bc:	9009883a 	mov	r4,r18
 100a7c0:	980b883a 	mov	r5,r19
 100a7c4:	180f883a 	mov	r7,r3
 100a7c8:	1021883a 	mov	r16,r2
 100a7cc:	1823883a 	mov	r17,r3
 100a7d0:	1014f0c0 	call	1014f0c <__ltdf2>
 100a7d4:	10000816 	blt	r2,zero,100a7f8 <_dtoa_r+0x6d4>
 100a7d8:	980b883a 	mov	r5,r19
 100a7dc:	800d883a 	mov	r6,r16
 100a7e0:	880f883a 	mov	r7,r17
 100a7e4:	9009883a 	mov	r4,r18
 100a7e8:	1014cec0 	call	1014cec <__eqdf2>
 100a7ec:	1000171e 	bne	r2,zero,100a84c <_dtoa_r+0x728>
 100a7f0:	a080004c 	andi	r2,r20,1
 100a7f4:	10001526 	beq	r2,zero,100a84c <_dtoa_r+0x728>
 100a7f8:	d8800d17 	ldw	r2,52(sp)
 100a7fc:	d8800415 	stw	r2,16(sp)
 100a800:	e009883a 	mov	r4,fp
 100a804:	213fffc4 	addi	r4,r4,-1
 100a808:	20c00007 	ldb	r3,0(r4)
 100a80c:	00800e44 	movi	r2,57
 100a810:	1880081e 	bne	r3,r2,100a834 <_dtoa_r+0x710>
 100a814:	d8800517 	ldw	r2,20(sp)
 100a818:	113ffa1e 	bne	r2,r4,100a804 <_dtoa_r+0x6e0>
 100a81c:	d8c00417 	ldw	r3,16(sp)
 100a820:	d9800517 	ldw	r6,20(sp)
 100a824:	00800c04 	movi	r2,48
 100a828:	18c00044 	addi	r3,r3,1
 100a82c:	d8c00415 	stw	r3,16(sp)
 100a830:	30800005 	stb	r2,0(r6)
 100a834:	20800003 	ldbu	r2,0(r4)
 100a838:	d8c00417 	ldw	r3,16(sp)
 100a83c:	27000044 	addi	fp,r4,1
 100a840:	10800044 	addi	r2,r2,1
 100a844:	d8c00d15 	stw	r3,52(sp)
 100a848:	20800005 	stb	r2,0(r4)
 100a84c:	d9001617 	ldw	r4,88(sp)
 100a850:	d9400717 	ldw	r5,28(sp)
 100a854:	100cda80 	call	100cda8 <_Bfree>
 100a858:	e0000005 	stb	zero,0(fp)
 100a85c:	d9800d17 	ldw	r6,52(sp)
 100a860:	d8c02717 	ldw	r3,156(sp)
 100a864:	d9002917 	ldw	r4,164(sp)
 100a868:	30800044 	addi	r2,r6,1
 100a86c:	18800015 	stw	r2,0(r3)
 100a870:	20029c26 	beq	r4,zero,100b2e4 <_dtoa_r+0x11c0>
 100a874:	d8c00517 	ldw	r3,20(sp)
 100a878:	27000015 	stw	fp,0(r4)
 100a87c:	003e5d06 	br	100a1f4 <_dtoa_r+0xd0>
 100a880:	d9800d17 	ldw	r6,52(sp)
 100a884:	00c040b4 	movhi	r3,258
 100a888:	18e9a604 	addi	r3,r3,-22888
 100a88c:	d9001217 	ldw	r4,72(sp)
 100a890:	300490fa 	slli	r2,r6,3
 100a894:	d9401317 	ldw	r5,76(sp)
 100a898:	10c5883a 	add	r2,r2,r3
 100a89c:	12000017 	ldw	r8,0(r2)
 100a8a0:	12400117 	ldw	r9,4(r2)
 100a8a4:	400d883a 	mov	r6,r8
 100a8a8:	480f883a 	mov	r7,r9
 100a8ac:	1014f0c0 	call	1014f0c <__ltdf2>
 100a8b0:	1000030e 	bge	r2,zero,100a8c0 <_dtoa_r+0x79c>
 100a8b4:	d8800d17 	ldw	r2,52(sp)
 100a8b8:	10bfffc4 	addi	r2,r2,-1
 100a8bc:	d8800d15 	stw	r2,52(sp)
 100a8c0:	d8000c15 	stw	zero,48(sp)
 100a8c4:	003ea806 	br	100a368 <_dtoa_r+0x244>
 100a8c8:	d9000b17 	ldw	r4,44(sp)
 100a8cc:	202cc03a 	cmpne	r22,r4,zero
 100a8d0:	b000c71e 	bne	r22,zero,100abf0 <_dtoa_r+0xacc>
 100a8d4:	dc001117 	ldw	r16,68(sp)
 100a8d8:	dc801017 	ldw	r18,64(sp)
 100a8dc:	0027883a 	mov	r19,zero
 100a8e0:	04000b0e 	bge	zero,r16,100a910 <_dtoa_r+0x7ec>
 100a8e4:	d8c00a17 	ldw	r3,40(sp)
 100a8e8:	00c0090e 	bge	zero,r3,100a910 <_dtoa_r+0x7ec>
 100a8ec:	8005883a 	mov	r2,r16
 100a8f0:	1c011316 	blt	r3,r16,100ad40 <_dtoa_r+0xc1c>
 100a8f4:	d9000a17 	ldw	r4,40(sp)
 100a8f8:	d9801117 	ldw	r6,68(sp)
 100a8fc:	80a1c83a 	sub	r16,r16,r2
 100a900:	2089c83a 	sub	r4,r4,r2
 100a904:	308dc83a 	sub	r6,r6,r2
 100a908:	d9000a15 	stw	r4,40(sp)
 100a90c:	d9801115 	stw	r6,68(sp)
 100a910:	d8801017 	ldw	r2,64(sp)
 100a914:	0080150e 	bge	zero,r2,100a96c <_dtoa_r+0x848>
 100a918:	d8c00b17 	ldw	r3,44(sp)
 100a91c:	1805003a 	cmpeq	r2,r3,zero
 100a920:	1001c91e 	bne	r2,zero,100b048 <_dtoa_r+0xf24>
 100a924:	04800e0e 	bge	zero,r18,100a960 <_dtoa_r+0x83c>
 100a928:	d9001617 	ldw	r4,88(sp)
 100a92c:	980b883a 	mov	r5,r19
 100a930:	900d883a 	mov	r6,r18
 100a934:	100db5c0 	call	100db5c <__pow5mult>
 100a938:	d9001617 	ldw	r4,88(sp)
 100a93c:	d9800717 	ldw	r6,28(sp)
 100a940:	100b883a 	mov	r5,r2
 100a944:	1027883a 	mov	r19,r2
 100a948:	100d8380 	call	100d838 <__multiply>
 100a94c:	d9001617 	ldw	r4,88(sp)
 100a950:	d9400717 	ldw	r5,28(sp)
 100a954:	1023883a 	mov	r17,r2
 100a958:	100cda80 	call	100cda8 <_Bfree>
 100a95c:	dc400715 	stw	r17,28(sp)
 100a960:	d9001017 	ldw	r4,64(sp)
 100a964:	248dc83a 	sub	r6,r4,r18
 100a968:	30010e1e 	bne	r6,zero,100ada4 <_dtoa_r+0xc80>
 100a96c:	d9001617 	ldw	r4,88(sp)
 100a970:	04400044 	movi	r17,1
 100a974:	880b883a 	mov	r5,r17
 100a978:	100da200 	call	100da20 <__i2b>
 100a97c:	d9800917 	ldw	r6,36(sp)
 100a980:	1025883a 	mov	r18,r2
 100a984:	0180040e 	bge	zero,r6,100a998 <_dtoa_r+0x874>
 100a988:	d9001617 	ldw	r4,88(sp)
 100a98c:	100b883a 	mov	r5,r2
 100a990:	100db5c0 	call	100db5c <__pow5mult>
 100a994:	1025883a 	mov	r18,r2
 100a998:	d8801717 	ldw	r2,92(sp)
 100a99c:	8880f30e 	bge	r17,r2,100ad6c <_dtoa_r+0xc48>
 100a9a0:	0023883a 	mov	r17,zero
 100a9a4:	d9800917 	ldw	r6,36(sp)
 100a9a8:	30019e1e 	bne	r6,zero,100b024 <_dtoa_r+0xf00>
 100a9ac:	00c00044 	movi	r3,1
 100a9b0:	d9000a17 	ldw	r4,40(sp)
 100a9b4:	20c5883a 	add	r2,r4,r3
 100a9b8:	10c007cc 	andi	r3,r2,31
 100a9bc:	1800841e 	bne	r3,zero,100abd0 <_dtoa_r+0xaac>
 100a9c0:	00800704 	movi	r2,28
 100a9c4:	d9000a17 	ldw	r4,40(sp)
 100a9c8:	d9801117 	ldw	r6,68(sp)
 100a9cc:	80a1883a 	add	r16,r16,r2
 100a9d0:	2089883a 	add	r4,r4,r2
 100a9d4:	308d883a 	add	r6,r6,r2
 100a9d8:	d9000a15 	stw	r4,40(sp)
 100a9dc:	d9801115 	stw	r6,68(sp)
 100a9e0:	d8801117 	ldw	r2,68(sp)
 100a9e4:	0080050e 	bge	zero,r2,100a9fc <_dtoa_r+0x8d8>
 100a9e8:	d9400717 	ldw	r5,28(sp)
 100a9ec:	d9001617 	ldw	r4,88(sp)
 100a9f0:	100d883a 	mov	r6,r2
 100a9f4:	100d6ec0 	call	100d6ec <__lshift>
 100a9f8:	d8800715 	stw	r2,28(sp)
 100a9fc:	d8c00a17 	ldw	r3,40(sp)
 100aa00:	00c0050e 	bge	zero,r3,100aa18 <_dtoa_r+0x8f4>
 100aa04:	d9001617 	ldw	r4,88(sp)
 100aa08:	900b883a 	mov	r5,r18
 100aa0c:	180d883a 	mov	r6,r3
 100aa10:	100d6ec0 	call	100d6ec <__lshift>
 100aa14:	1025883a 	mov	r18,r2
 100aa18:	d9000c17 	ldw	r4,48(sp)
 100aa1c:	2005003a 	cmpeq	r2,r4,zero
 100aa20:	10016f26 	beq	r2,zero,100afe0 <_dtoa_r+0xebc>
 100aa24:	d9000f17 	ldw	r4,60(sp)
 100aa28:	0102170e 	bge	zero,r4,100b288 <_dtoa_r+0x1164>
 100aa2c:	d9800b17 	ldw	r6,44(sp)
 100aa30:	3005003a 	cmpeq	r2,r6,zero
 100aa34:	1000881e 	bne	r2,zero,100ac58 <_dtoa_r+0xb34>
 100aa38:	0400050e 	bge	zero,r16,100aa50 <_dtoa_r+0x92c>
 100aa3c:	d9001617 	ldw	r4,88(sp)
 100aa40:	980b883a 	mov	r5,r19
 100aa44:	800d883a 	mov	r6,r16
 100aa48:	100d6ec0 	call	100d6ec <__lshift>
 100aa4c:	1027883a 	mov	r19,r2
 100aa50:	8804c03a 	cmpne	r2,r17,zero
 100aa54:	1002541e 	bne	r2,zero,100b3a8 <_dtoa_r+0x1284>
 100aa58:	980b883a 	mov	r5,r19
 100aa5c:	dd800517 	ldw	r22,20(sp)
 100aa60:	dcc00615 	stw	r19,24(sp)
 100aa64:	a700004c 	andi	fp,r20,1
 100aa68:	2827883a 	mov	r19,r5
 100aa6c:	d9000717 	ldw	r4,28(sp)
 100aa70:	900b883a 	mov	r5,r18
 100aa74:	1009f0c0 	call	1009f0c <quorem>
 100aa78:	d9000717 	ldw	r4,28(sp)
 100aa7c:	d9400617 	ldw	r5,24(sp)
 100aa80:	1023883a 	mov	r17,r2
 100aa84:	8dc00c04 	addi	r23,r17,48
 100aa88:	100cf040 	call	100cf04 <__mcmp>
 100aa8c:	d9001617 	ldw	r4,88(sp)
 100aa90:	900b883a 	mov	r5,r18
 100aa94:	980d883a 	mov	r6,r19
 100aa98:	1029883a 	mov	r20,r2
 100aa9c:	100d5600 	call	100d560 <__mdiff>
 100aaa0:	102b883a 	mov	r21,r2
 100aaa4:	10800317 	ldw	r2,12(r2)
 100aaa8:	1001281e 	bne	r2,zero,100af4c <_dtoa_r+0xe28>
 100aaac:	d9000717 	ldw	r4,28(sp)
 100aab0:	a80b883a 	mov	r5,r21
 100aab4:	100cf040 	call	100cf04 <__mcmp>
 100aab8:	d9001617 	ldw	r4,88(sp)
 100aabc:	1021883a 	mov	r16,r2
 100aac0:	a80b883a 	mov	r5,r21
 100aac4:	100cda80 	call	100cda8 <_Bfree>
 100aac8:	8000041e 	bne	r16,zero,100aadc <_dtoa_r+0x9b8>
 100aacc:	d8801717 	ldw	r2,92(sp)
 100aad0:	1000021e 	bne	r2,zero,100aadc <_dtoa_r+0x9b8>
 100aad4:	e004c03a 	cmpne	r2,fp,zero
 100aad8:	10011726 	beq	r2,zero,100af38 <_dtoa_r+0xe14>
 100aadc:	a0010616 	blt	r20,zero,100aef8 <_dtoa_r+0xdd4>
 100aae0:	a000041e 	bne	r20,zero,100aaf4 <_dtoa_r+0x9d0>
 100aae4:	d8c01717 	ldw	r3,92(sp)
 100aae8:	1800021e 	bne	r3,zero,100aaf4 <_dtoa_r+0x9d0>
 100aaec:	e004c03a 	cmpne	r2,fp,zero
 100aaf0:	10010126 	beq	r2,zero,100aef8 <_dtoa_r+0xdd4>
 100aaf4:	04023d16 	blt	zero,r16,100b3ec <_dtoa_r+0x12c8>
 100aaf8:	b5c00005 	stb	r23,0(r22)
 100aafc:	d9800517 	ldw	r6,20(sp)
 100ab00:	d9000f17 	ldw	r4,60(sp)
 100ab04:	b5800044 	addi	r22,r22,1
 100ab08:	3105883a 	add	r2,r6,r4
 100ab0c:	b0806526 	beq	r22,r2,100aca4 <_dtoa_r+0xb80>
 100ab10:	d9400717 	ldw	r5,28(sp)
 100ab14:	d9001617 	ldw	r4,88(sp)
 100ab18:	01800284 	movi	r6,10
 100ab1c:	000f883a 	mov	r7,zero
 100ab20:	100da5c0 	call	100da5c <__multadd>
 100ab24:	d8800715 	stw	r2,28(sp)
 100ab28:	d8800617 	ldw	r2,24(sp)
 100ab2c:	14c10c26 	beq	r2,r19,100af60 <_dtoa_r+0xe3c>
 100ab30:	d9400617 	ldw	r5,24(sp)
 100ab34:	d9001617 	ldw	r4,88(sp)
 100ab38:	01800284 	movi	r6,10
 100ab3c:	000f883a 	mov	r7,zero
 100ab40:	100da5c0 	call	100da5c <__multadd>
 100ab44:	d9001617 	ldw	r4,88(sp)
 100ab48:	980b883a 	mov	r5,r19
 100ab4c:	01800284 	movi	r6,10
 100ab50:	000f883a 	mov	r7,zero
 100ab54:	d8800615 	stw	r2,24(sp)
 100ab58:	100da5c0 	call	100da5c <__multadd>
 100ab5c:	1027883a 	mov	r19,r2
 100ab60:	003fc206 	br	100aa6c <_dtoa_r+0x948>
 100ab64:	2445c83a 	sub	r2,r4,r17
 100ab68:	a088983a 	sll	r4,r20,r2
 100ab6c:	003e4b06 	br	100a49c <_dtoa_r+0x378>
 100ab70:	01bfffc4 	movi	r6,-1
 100ab74:	00800044 	movi	r2,1
 100ab78:	d9800e15 	stw	r6,56(sp)
 100ab7c:	d9800f15 	stw	r6,60(sp)
 100ab80:	d8800b15 	stw	r2,44(sp)
 100ab84:	d8c01617 	ldw	r3,88(sp)
 100ab88:	008005c4 	movi	r2,23
 100ab8c:	18001115 	stw	zero,68(r3)
 100ab90:	1580082e 	bgeu	r2,r22,100abb4 <_dtoa_r+0xa90>
 100ab94:	00c00104 	movi	r3,4
 100ab98:	0009883a 	mov	r4,zero
 100ab9c:	18c7883a 	add	r3,r3,r3
 100aba0:	18800504 	addi	r2,r3,20
 100aba4:	21000044 	addi	r4,r4,1
 100aba8:	b0bffc2e 	bgeu	r22,r2,100ab9c <_dtoa_r+0xa78>
 100abac:	d9801617 	ldw	r6,88(sp)
 100abb0:	31001115 	stw	r4,68(r6)
 100abb4:	dc000f17 	ldw	r16,60(sp)
 100abb8:	003e4b06 	br	100a4e8 <_dtoa_r+0x3c4>
 100abbc:	d9801717 	ldw	r6,92(sp)
 100abc0:	0023883a 	mov	r17,zero
 100abc4:	31bfff04 	addi	r6,r6,-4
 100abc8:	d9801715 	stw	r6,92(sp)
 100abcc:	003df806 	br	100a3b0 <_dtoa_r+0x28c>
 100abd0:	00800804 	movi	r2,32
 100abd4:	10c9c83a 	sub	r4,r2,r3
 100abd8:	00c00104 	movi	r3,4
 100abdc:	19005a16 	blt	r3,r4,100ad48 <_dtoa_r+0xc24>
 100abe0:	008000c4 	movi	r2,3
 100abe4:	113f7e16 	blt	r2,r4,100a9e0 <_dtoa_r+0x8bc>
 100abe8:	20800704 	addi	r2,r4,28
 100abec:	003f7506 	br	100a9c4 <_dtoa_r+0x8a0>
 100abf0:	d9801717 	ldw	r6,92(sp)
 100abf4:	00800044 	movi	r2,1
 100abf8:	1180a10e 	bge	r2,r6,100ae80 <_dtoa_r+0xd5c>
 100abfc:	d9800f17 	ldw	r6,60(sp)
 100ac00:	d8c01017 	ldw	r3,64(sp)
 100ac04:	30bfffc4 	addi	r2,r6,-1
 100ac08:	1881c616 	blt	r3,r2,100b324 <_dtoa_r+0x1200>
 100ac0c:	18a5c83a 	sub	r18,r3,r2
 100ac10:	d8800f17 	ldw	r2,60(sp)
 100ac14:	10026216 	blt	r2,zero,100b5a0 <_dtoa_r+0x147c>
 100ac18:	dc001117 	ldw	r16,68(sp)
 100ac1c:	1007883a 	mov	r3,r2
 100ac20:	d9800a17 	ldw	r6,40(sp)
 100ac24:	d8801117 	ldw	r2,68(sp)
 100ac28:	d9001617 	ldw	r4,88(sp)
 100ac2c:	30cd883a 	add	r6,r6,r3
 100ac30:	10c5883a 	add	r2,r2,r3
 100ac34:	01400044 	movi	r5,1
 100ac38:	d9800a15 	stw	r6,40(sp)
 100ac3c:	d8801115 	stw	r2,68(sp)
 100ac40:	100da200 	call	100da20 <__i2b>
 100ac44:	1027883a 	mov	r19,r2
 100ac48:	003f2506 	br	100a8e0 <_dtoa_r+0x7bc>
 100ac4c:	00c040b4 	movhi	r3,258
 100ac50:	18e8de04 	addi	r3,r3,-23688
 100ac54:	003d6706 	br	100a1f4 <_dtoa_r+0xd0>
 100ac58:	dd800517 	ldw	r22,20(sp)
 100ac5c:	04000044 	movi	r16,1
 100ac60:	00000706 	br	100ac80 <_dtoa_r+0xb5c>
 100ac64:	d9400717 	ldw	r5,28(sp)
 100ac68:	d9001617 	ldw	r4,88(sp)
 100ac6c:	01800284 	movi	r6,10
 100ac70:	000f883a 	mov	r7,zero
 100ac74:	100da5c0 	call	100da5c <__multadd>
 100ac78:	d8800715 	stw	r2,28(sp)
 100ac7c:	84000044 	addi	r16,r16,1
 100ac80:	d9000717 	ldw	r4,28(sp)
 100ac84:	900b883a 	mov	r5,r18
 100ac88:	1009f0c0 	call	1009f0c <quorem>
 100ac8c:	15c00c04 	addi	r23,r2,48
 100ac90:	b5c00005 	stb	r23,0(r22)
 100ac94:	d8c00f17 	ldw	r3,60(sp)
 100ac98:	b5800044 	addi	r22,r22,1
 100ac9c:	80fff116 	blt	r16,r3,100ac64 <_dtoa_r+0xb40>
 100aca0:	d8000615 	stw	zero,24(sp)
 100aca4:	d9400717 	ldw	r5,28(sp)
 100aca8:	d9001617 	ldw	r4,88(sp)
 100acac:	01800044 	movi	r6,1
 100acb0:	100d6ec0 	call	100d6ec <__lshift>
 100acb4:	1009883a 	mov	r4,r2
 100acb8:	900b883a 	mov	r5,r18
 100acbc:	d8800715 	stw	r2,28(sp)
 100acc0:	100cf040 	call	100cf04 <__mcmp>
 100acc4:	00803c0e 	bge	zero,r2,100adb8 <_dtoa_r+0xc94>
 100acc8:	b009883a 	mov	r4,r22
 100accc:	213fffc4 	addi	r4,r4,-1
 100acd0:	21400003 	ldbu	r5,0(r4)
 100acd4:	00800e44 	movi	r2,57
 100acd8:	28c03fcc 	andi	r3,r5,255
 100acdc:	18c0201c 	xori	r3,r3,128
 100ace0:	18ffe004 	addi	r3,r3,-128
 100ace4:	1881981e 	bne	r3,r2,100b348 <_dtoa_r+0x1224>
 100ace8:	d9800517 	ldw	r6,20(sp)
 100acec:	21bff71e 	bne	r4,r6,100accc <_dtoa_r+0xba8>
 100acf0:	d8800d17 	ldw	r2,52(sp)
 100acf4:	37000044 	addi	fp,r6,1
 100acf8:	10800044 	addi	r2,r2,1
 100acfc:	d8800d15 	stw	r2,52(sp)
 100ad00:	00800c44 	movi	r2,49
 100ad04:	30800005 	stb	r2,0(r6)
 100ad08:	d9001617 	ldw	r4,88(sp)
 100ad0c:	900b883a 	mov	r5,r18
 100ad10:	100cda80 	call	100cda8 <_Bfree>
 100ad14:	983ecd26 	beq	r19,zero,100a84c <_dtoa_r+0x728>
 100ad18:	d8c00617 	ldw	r3,24(sp)
 100ad1c:	18000426 	beq	r3,zero,100ad30 <_dtoa_r+0xc0c>
 100ad20:	1cc00326 	beq	r3,r19,100ad30 <_dtoa_r+0xc0c>
 100ad24:	d9001617 	ldw	r4,88(sp)
 100ad28:	180b883a 	mov	r5,r3
 100ad2c:	100cda80 	call	100cda8 <_Bfree>
 100ad30:	d9001617 	ldw	r4,88(sp)
 100ad34:	980b883a 	mov	r5,r19
 100ad38:	100cda80 	call	100cda8 <_Bfree>
 100ad3c:	003ec306 	br	100a84c <_dtoa_r+0x728>
 100ad40:	1805883a 	mov	r2,r3
 100ad44:	003eeb06 	br	100a8f4 <_dtoa_r+0x7d0>
 100ad48:	d9800a17 	ldw	r6,40(sp)
 100ad4c:	d8c01117 	ldw	r3,68(sp)
 100ad50:	20bfff04 	addi	r2,r4,-4
 100ad54:	308d883a 	add	r6,r6,r2
 100ad58:	1887883a 	add	r3,r3,r2
 100ad5c:	80a1883a 	add	r16,r16,r2
 100ad60:	d9800a15 	stw	r6,40(sp)
 100ad64:	d8c01115 	stw	r3,68(sp)
 100ad68:	003f1d06 	br	100a9e0 <_dtoa_r+0x8bc>
 100ad6c:	a03f0c1e 	bne	r20,zero,100a9a0 <_dtoa_r+0x87c>
 100ad70:	00800434 	movhi	r2,16
 100ad74:	10bfffc4 	addi	r2,r2,-1
 100ad78:	a884703a 	and	r2,r21,r2
 100ad7c:	103f081e 	bne	r2,zero,100a9a0 <_dtoa_r+0x87c>
 100ad80:	a89ffc2c 	andhi	r2,r21,32752
 100ad84:	103f0626 	beq	r2,zero,100a9a0 <_dtoa_r+0x87c>
 100ad88:	d8c01117 	ldw	r3,68(sp)
 100ad8c:	d9000a17 	ldw	r4,40(sp)
 100ad90:	18c00044 	addi	r3,r3,1
 100ad94:	21000044 	addi	r4,r4,1
 100ad98:	d8c01115 	stw	r3,68(sp)
 100ad9c:	d9000a15 	stw	r4,40(sp)
 100ada0:	003f0006 	br	100a9a4 <_dtoa_r+0x880>
 100ada4:	d9400717 	ldw	r5,28(sp)
 100ada8:	d9001617 	ldw	r4,88(sp)
 100adac:	100db5c0 	call	100db5c <__pow5mult>
 100adb0:	d8800715 	stw	r2,28(sp)
 100adb4:	003eed06 	br	100a96c <_dtoa_r+0x848>
 100adb8:	1000021e 	bne	r2,zero,100adc4 <_dtoa_r+0xca0>
 100adbc:	b880004c 	andi	r2,r23,1
 100adc0:	103fc11e 	bne	r2,zero,100acc8 <_dtoa_r+0xba4>
 100adc4:	b5bfffc4 	addi	r22,r22,-1
 100adc8:	b0c00007 	ldb	r3,0(r22)
 100adcc:	00800c04 	movi	r2,48
 100add0:	18bffc26 	beq	r3,r2,100adc4 <_dtoa_r+0xca0>
 100add4:	b7000044 	addi	fp,r22,1
 100add8:	003fcb06 	br	100ad08 <_dtoa_r+0xbe4>
 100addc:	d9800d17 	ldw	r6,52(sp)
 100ade0:	018fc83a 	sub	r7,zero,r6
 100ade4:	3801f726 	beq	r7,zero,100b5c4 <_dtoa_r+0x14a0>
 100ade8:	398003cc 	andi	r6,r7,15
 100adec:	300c90fa 	slli	r6,r6,3
 100adf0:	014040b4 	movhi	r5,258
 100adf4:	2969a604 	addi	r5,r5,-22888
 100adf8:	d9001217 	ldw	r4,72(sp)
 100adfc:	314d883a 	add	r6,r6,r5
 100ae00:	30c00117 	ldw	r3,4(r6)
 100ae04:	30800017 	ldw	r2,0(r6)
 100ae08:	d9401317 	ldw	r5,76(sp)
 100ae0c:	3821d13a 	srai	r16,r7,4
 100ae10:	100d883a 	mov	r6,r2
 100ae14:	180f883a 	mov	r7,r3
 100ae18:	10146d00 	call	10146d0 <__muldf3>
 100ae1c:	1011883a 	mov	r8,r2
 100ae20:	1813883a 	mov	r9,r3
 100ae24:	1029883a 	mov	r20,r2
 100ae28:	182b883a 	mov	r21,r3
 100ae2c:	8001e526 	beq	r16,zero,100b5c4 <_dtoa_r+0x14a0>
 100ae30:	05800084 	movi	r22,2
 100ae34:	044040b4 	movhi	r17,258
 100ae38:	8c69d804 	addi	r17,r17,-22688
 100ae3c:	8080004c 	andi	r2,r16,1
 100ae40:	1005003a 	cmpeq	r2,r2,zero
 100ae44:	1000081e 	bne	r2,zero,100ae68 <_dtoa_r+0xd44>
 100ae48:	89800017 	ldw	r6,0(r17)
 100ae4c:	89c00117 	ldw	r7,4(r17)
 100ae50:	480b883a 	mov	r5,r9
 100ae54:	4009883a 	mov	r4,r8
 100ae58:	10146d00 	call	10146d0 <__muldf3>
 100ae5c:	1011883a 	mov	r8,r2
 100ae60:	b5800044 	addi	r22,r22,1
 100ae64:	1813883a 	mov	r9,r3
 100ae68:	8021d07a 	srai	r16,r16,1
 100ae6c:	8c400204 	addi	r17,r17,8
 100ae70:	803ff21e 	bne	r16,zero,100ae3c <_dtoa_r+0xd18>
 100ae74:	4029883a 	mov	r20,r8
 100ae78:	482b883a 	mov	r21,r9
 100ae7c:	003dca06 	br	100a5a8 <_dtoa_r+0x484>
 100ae80:	d9000817 	ldw	r4,32(sp)
 100ae84:	2005003a 	cmpeq	r2,r4,zero
 100ae88:	1001f61e 	bne	r2,zero,100b664 <_dtoa_r+0x1540>
 100ae8c:	dc001117 	ldw	r16,68(sp)
 100ae90:	dc801017 	ldw	r18,64(sp)
 100ae94:	18c10cc4 	addi	r3,r3,1075
 100ae98:	003f6106 	br	100ac20 <_dtoa_r+0xafc>
 100ae9c:	d8000b15 	stw	zero,44(sp)
 100aea0:	d9802617 	ldw	r6,152(sp)
 100aea4:	d8c00d17 	ldw	r3,52(sp)
 100aea8:	30800044 	addi	r2,r6,1
 100aeac:	18ad883a 	add	r22,r3,r2
 100aeb0:	b13fffc4 	addi	r4,r22,-1
 100aeb4:	d9000e15 	stw	r4,56(sp)
 100aeb8:	0581f60e 	bge	zero,r22,100b694 <_dtoa_r+0x1570>
 100aebc:	dd800f15 	stw	r22,60(sp)
 100aec0:	003f3006 	br	100ab84 <_dtoa_r+0xa60>
 100aec4:	d8000b15 	stw	zero,44(sp)
 100aec8:	d9002617 	ldw	r4,152(sp)
 100aecc:	0101eb0e 	bge	zero,r4,100b67c <_dtoa_r+0x1558>
 100aed0:	202d883a 	mov	r22,r4
 100aed4:	d9000e15 	stw	r4,56(sp)
 100aed8:	d9000f15 	stw	r4,60(sp)
 100aedc:	003f2906 	br	100ab84 <_dtoa_r+0xa60>
 100aee0:	01800044 	movi	r6,1
 100aee4:	d9800b15 	stw	r6,44(sp)
 100aee8:	003ff706 	br	100aec8 <_dtoa_r+0xda4>
 100aeec:	01000044 	movi	r4,1
 100aef0:	d9000b15 	stw	r4,44(sp)
 100aef4:	003fea06 	br	100aea0 <_dtoa_r+0xd7c>
 100aef8:	04000c0e 	bge	zero,r16,100af2c <_dtoa_r+0xe08>
 100aefc:	d9400717 	ldw	r5,28(sp)
 100af00:	d9001617 	ldw	r4,88(sp)
 100af04:	01800044 	movi	r6,1
 100af08:	100d6ec0 	call	100d6ec <__lshift>
 100af0c:	1009883a 	mov	r4,r2
 100af10:	900b883a 	mov	r5,r18
 100af14:	d8800715 	stw	r2,28(sp)
 100af18:	100cf040 	call	100cf04 <__mcmp>
 100af1c:	0081e00e 	bge	zero,r2,100b6a0 <_dtoa_r+0x157c>
 100af20:	bdc00044 	addi	r23,r23,1
 100af24:	00800e84 	movi	r2,58
 100af28:	b881a226 	beq	r23,r2,100b5b4 <_dtoa_r+0x1490>
 100af2c:	b7000044 	addi	fp,r22,1
 100af30:	b5c00005 	stb	r23,0(r22)
 100af34:	003f7406 	br	100ad08 <_dtoa_r+0xbe4>
 100af38:	00800e44 	movi	r2,57
 100af3c:	b8819d26 	beq	r23,r2,100b5b4 <_dtoa_r+0x1490>
 100af40:	053ffa0e 	bge	zero,r20,100af2c <_dtoa_r+0xe08>
 100af44:	8dc00c44 	addi	r23,r17,49
 100af48:	003ff806 	br	100af2c <_dtoa_r+0xe08>
 100af4c:	d9001617 	ldw	r4,88(sp)
 100af50:	a80b883a 	mov	r5,r21
 100af54:	04000044 	movi	r16,1
 100af58:	100cda80 	call	100cda8 <_Bfree>
 100af5c:	003edf06 	br	100aadc <_dtoa_r+0x9b8>
 100af60:	d9001617 	ldw	r4,88(sp)
 100af64:	980b883a 	mov	r5,r19
 100af68:	01800284 	movi	r6,10
 100af6c:	000f883a 	mov	r7,zero
 100af70:	100da5c0 	call	100da5c <__multadd>
 100af74:	1027883a 	mov	r19,r2
 100af78:	d8800615 	stw	r2,24(sp)
 100af7c:	003ebb06 	br	100aa6c <_dtoa_r+0x948>
 100af80:	d9801117 	ldw	r6,68(sp)
 100af84:	d8800d17 	ldw	r2,52(sp)
 100af88:	d8000915 	stw	zero,36(sp)
 100af8c:	308dc83a 	sub	r6,r6,r2
 100af90:	0087c83a 	sub	r3,zero,r2
 100af94:	d9801115 	stw	r6,68(sp)
 100af98:	d8c01015 	stw	r3,64(sp)
 100af9c:	003cfe06 	br	100a398 <_dtoa_r+0x274>
 100afa0:	018dc83a 	sub	r6,zero,r6
 100afa4:	d9801115 	stw	r6,68(sp)
 100afa8:	d8000a15 	stw	zero,40(sp)
 100afac:	003cf306 	br	100a37c <_dtoa_r+0x258>
 100afb0:	d9000d17 	ldw	r4,52(sp)
 100afb4:	101501c0 	call	101501c <__floatsidf>
 100afb8:	880b883a 	mov	r5,r17
 100afbc:	8009883a 	mov	r4,r16
 100afc0:	180f883a 	mov	r7,r3
 100afc4:	100d883a 	mov	r6,r2
 100afc8:	1014d740 	call	1014d74 <__nedf2>
 100afcc:	103ce126 	beq	r2,zero,100a354 <_dtoa_r+0x230>
 100afd0:	d9800d17 	ldw	r6,52(sp)
 100afd4:	31bfffc4 	addi	r6,r6,-1
 100afd8:	d9800d15 	stw	r6,52(sp)
 100afdc:	003cdd06 	br	100a354 <_dtoa_r+0x230>
 100afe0:	d9000717 	ldw	r4,28(sp)
 100afe4:	900b883a 	mov	r5,r18
 100afe8:	100cf040 	call	100cf04 <__mcmp>
 100afec:	103e8d0e 	bge	r2,zero,100aa24 <_dtoa_r+0x900>
 100aff0:	d9400717 	ldw	r5,28(sp)
 100aff4:	d9001617 	ldw	r4,88(sp)
 100aff8:	01800284 	movi	r6,10
 100affc:	000f883a 	mov	r7,zero
 100b000:	100da5c0 	call	100da5c <__multadd>
 100b004:	d9800d17 	ldw	r6,52(sp)
 100b008:	d8800715 	stw	r2,28(sp)
 100b00c:	31bfffc4 	addi	r6,r6,-1
 100b010:	d9800d15 	stw	r6,52(sp)
 100b014:	b001a71e 	bne	r22,zero,100b6b4 <_dtoa_r+0x1590>
 100b018:	d8800e17 	ldw	r2,56(sp)
 100b01c:	d8800f15 	stw	r2,60(sp)
 100b020:	003e8006 	br	100aa24 <_dtoa_r+0x900>
 100b024:	90800417 	ldw	r2,16(r18)
 100b028:	1085883a 	add	r2,r2,r2
 100b02c:	1085883a 	add	r2,r2,r2
 100b030:	1485883a 	add	r2,r2,r18
 100b034:	11000417 	ldw	r4,16(r2)
 100b038:	100cdd00 	call	100cdd0 <__hi0bits>
 100b03c:	00c00804 	movi	r3,32
 100b040:	1887c83a 	sub	r3,r3,r2
 100b044:	003e5a06 	br	100a9b0 <_dtoa_r+0x88c>
 100b048:	d9400717 	ldw	r5,28(sp)
 100b04c:	d9801017 	ldw	r6,64(sp)
 100b050:	d9001617 	ldw	r4,88(sp)
 100b054:	100db5c0 	call	100db5c <__pow5mult>
 100b058:	d8800715 	stw	r2,28(sp)
 100b05c:	003e4306 	br	100a96c <_dtoa_r+0x848>
 100b060:	d9800f17 	ldw	r6,60(sp)
 100b064:	d8800d17 	ldw	r2,52(sp)
 100b068:	d9800315 	stw	r6,12(sp)
 100b06c:	d8800415 	stw	r2,16(sp)
 100b070:	d8c00b17 	ldw	r3,44(sp)
 100b074:	1805003a 	cmpeq	r2,r3,zero
 100b078:	1000e21e 	bne	r2,zero,100b404 <_dtoa_r+0x12e0>
 100b07c:	d9000317 	ldw	r4,12(sp)
 100b080:	0005883a 	mov	r2,zero
 100b084:	00cff834 	movhi	r3,16352
 100b088:	200c90fa 	slli	r6,r4,3
 100b08c:	010040b4 	movhi	r4,258
 100b090:	2129a604 	addi	r4,r4,-22888
 100b094:	180b883a 	mov	r5,r3
 100b098:	310d883a 	add	r6,r6,r4
 100b09c:	327fff17 	ldw	r9,-4(r6)
 100b0a0:	323ffe17 	ldw	r8,-8(r6)
 100b0a4:	1009883a 	mov	r4,r2
 100b0a8:	480f883a 	mov	r7,r9
 100b0ac:	400d883a 	mov	r6,r8
 100b0b0:	1014a940 	call	1014a94 <__divdf3>
 100b0b4:	180b883a 	mov	r5,r3
 100b0b8:	b00d883a 	mov	r6,r22
 100b0bc:	b80f883a 	mov	r7,r23
 100b0c0:	1009883a 	mov	r4,r2
 100b0c4:	10145dc0 	call	10145dc <__subdf3>
 100b0c8:	a80b883a 	mov	r5,r21
 100b0cc:	a009883a 	mov	r4,r20
 100b0d0:	d8c01915 	stw	r3,100(sp)
 100b0d4:	d8801815 	stw	r2,96(sp)
 100b0d8:	10151140 	call	1015114 <__fixdfsi>
 100b0dc:	1009883a 	mov	r4,r2
 100b0e0:	1027883a 	mov	r19,r2
 100b0e4:	101501c0 	call	101501c <__floatsidf>
 100b0e8:	a80b883a 	mov	r5,r21
 100b0ec:	a009883a 	mov	r4,r20
 100b0f0:	180f883a 	mov	r7,r3
 100b0f4:	100d883a 	mov	r6,r2
 100b0f8:	10145dc0 	call	10145dc <__subdf3>
 100b0fc:	d9801817 	ldw	r6,96(sp)
 100b100:	1823883a 	mov	r17,r3
 100b104:	d8801415 	stw	r2,80(sp)
 100b108:	302d883a 	mov	r22,r6
 100b10c:	d9800517 	ldw	r6,20(sp)
 100b110:	9cc00c04 	addi	r19,r19,48
 100b114:	dc401515 	stw	r17,84(sp)
 100b118:	d8c01917 	ldw	r3,100(sp)
 100b11c:	34c00005 	stb	r19,0(r6)
 100b120:	d8800517 	ldw	r2,20(sp)
 100b124:	d9401917 	ldw	r5,100(sp)
 100b128:	d9801417 	ldw	r6,80(sp)
 100b12c:	b009883a 	mov	r4,r22
 100b130:	880f883a 	mov	r7,r17
 100b134:	182f883a 	mov	r23,r3
 100b138:	17000044 	addi	fp,r2,1
 100b13c:	1014dfc0 	call	1014dfc <__gtdf2>
 100b140:	00804e16 	blt	zero,r2,100b27c <_dtoa_r+0x1158>
 100b144:	d9801417 	ldw	r6,80(sp)
 100b148:	0005883a 	mov	r2,zero
 100b14c:	00cffc34 	movhi	r3,16368
 100b150:	180b883a 	mov	r5,r3
 100b154:	880f883a 	mov	r7,r17
 100b158:	1009883a 	mov	r4,r2
 100b15c:	10145dc0 	call	10145dc <__subdf3>
 100b160:	d9401917 	ldw	r5,100(sp)
 100b164:	180f883a 	mov	r7,r3
 100b168:	b009883a 	mov	r4,r22
 100b16c:	100d883a 	mov	r6,r2
 100b170:	1014dfc0 	call	1014dfc <__gtdf2>
 100b174:	00bda216 	blt	zero,r2,100a800 <_dtoa_r+0x6dc>
 100b178:	d8c00317 	ldw	r3,12(sp)
 100b17c:	00800044 	movi	r2,1
 100b180:	10c01216 	blt	r2,r3,100b1cc <_dtoa_r+0x10a8>
 100b184:	003d4506 	br	100a69c <_dtoa_r+0x578>
 100b188:	d9801417 	ldw	r6,80(sp)
 100b18c:	0005883a 	mov	r2,zero
 100b190:	00cffc34 	movhi	r3,16368
 100b194:	180b883a 	mov	r5,r3
 100b198:	880f883a 	mov	r7,r17
 100b19c:	1009883a 	mov	r4,r2
 100b1a0:	10145dc0 	call	10145dc <__subdf3>
 100b1a4:	d9c01b17 	ldw	r7,108(sp)
 100b1a8:	180b883a 	mov	r5,r3
 100b1ac:	1009883a 	mov	r4,r2
 100b1b0:	b00d883a 	mov	r6,r22
 100b1b4:	1014f0c0 	call	1014f0c <__ltdf2>
 100b1b8:	103d9116 	blt	r2,zero,100a800 <_dtoa_r+0x6dc>
 100b1bc:	d9800517 	ldw	r6,20(sp)
 100b1c0:	d9000317 	ldw	r4,12(sp)
 100b1c4:	3105883a 	add	r2,r6,r4
 100b1c8:	e0bd3426 	beq	fp,r2,100a69c <_dtoa_r+0x578>
 100b1cc:	04500934 	movhi	r17,16420
 100b1d0:	0021883a 	mov	r16,zero
 100b1d4:	b80b883a 	mov	r5,r23
 100b1d8:	b009883a 	mov	r4,r22
 100b1dc:	800d883a 	mov	r6,r16
 100b1e0:	880f883a 	mov	r7,r17
 100b1e4:	10146d00 	call	10146d0 <__muldf3>
 100b1e8:	d9401517 	ldw	r5,84(sp)
 100b1ec:	d9001417 	ldw	r4,80(sp)
 100b1f0:	880f883a 	mov	r7,r17
 100b1f4:	000d883a 	mov	r6,zero
 100b1f8:	d8801a15 	stw	r2,104(sp)
 100b1fc:	d8c01b15 	stw	r3,108(sp)
 100b200:	10146d00 	call	10146d0 <__muldf3>
 100b204:	180b883a 	mov	r5,r3
 100b208:	1009883a 	mov	r4,r2
 100b20c:	1823883a 	mov	r17,r3
 100b210:	1021883a 	mov	r16,r2
 100b214:	10151140 	call	1015114 <__fixdfsi>
 100b218:	1009883a 	mov	r4,r2
 100b21c:	102b883a 	mov	r21,r2
 100b220:	101501c0 	call	101501c <__floatsidf>
 100b224:	880b883a 	mov	r5,r17
 100b228:	8009883a 	mov	r4,r16
 100b22c:	180f883a 	mov	r7,r3
 100b230:	100d883a 	mov	r6,r2
 100b234:	10145dc0 	call	10145dc <__subdf3>
 100b238:	1021883a 	mov	r16,r2
 100b23c:	d9001b17 	ldw	r4,108(sp)
 100b240:	1823883a 	mov	r17,r3
 100b244:	dc001415 	stw	r16,80(sp)
 100b248:	ad400c04 	addi	r21,r21,48
 100b24c:	dc401515 	stw	r17,84(sp)
 100b250:	d8801a17 	ldw	r2,104(sp)
 100b254:	e5400005 	stb	r21,0(fp)
 100b258:	202f883a 	mov	r23,r4
 100b25c:	d9c01b17 	ldw	r7,108(sp)
 100b260:	d9001417 	ldw	r4,80(sp)
 100b264:	880b883a 	mov	r5,r17
 100b268:	100d883a 	mov	r6,r2
 100b26c:	102d883a 	mov	r22,r2
 100b270:	e7000044 	addi	fp,fp,1
 100b274:	1014f0c0 	call	1014f0c <__ltdf2>
 100b278:	103fc30e 	bge	r2,zero,100b188 <_dtoa_r+0x1064>
 100b27c:	d9000417 	ldw	r4,16(sp)
 100b280:	d9000d15 	stw	r4,52(sp)
 100b284:	003d7106 	br	100a84c <_dtoa_r+0x728>
 100b288:	d9801717 	ldw	r6,92(sp)
 100b28c:	00800084 	movi	r2,2
 100b290:	11bde60e 	bge	r2,r6,100aa2c <_dtoa_r+0x908>
 100b294:	203cfb1e 	bne	r4,zero,100a684 <_dtoa_r+0x560>
 100b298:	d9001617 	ldw	r4,88(sp)
 100b29c:	900b883a 	mov	r5,r18
 100b2a0:	01800144 	movi	r6,5
 100b2a4:	000f883a 	mov	r7,zero
 100b2a8:	100da5c0 	call	100da5c <__multadd>
 100b2ac:	d9000717 	ldw	r4,28(sp)
 100b2b0:	100b883a 	mov	r5,r2
 100b2b4:	1025883a 	mov	r18,r2
 100b2b8:	100cf040 	call	100cf04 <__mcmp>
 100b2bc:	00bcf10e 	bge	zero,r2,100a684 <_dtoa_r+0x560>
 100b2c0:	d8c00d17 	ldw	r3,52(sp)
 100b2c4:	d9000517 	ldw	r4,20(sp)
 100b2c8:	d8000615 	stw	zero,24(sp)
 100b2cc:	18c00044 	addi	r3,r3,1
 100b2d0:	d8c00d15 	stw	r3,52(sp)
 100b2d4:	00800c44 	movi	r2,49
 100b2d8:	27000044 	addi	fp,r4,1
 100b2dc:	20800005 	stb	r2,0(r4)
 100b2e0:	003e8906 	br	100ad08 <_dtoa_r+0xbe4>
 100b2e4:	d8c00517 	ldw	r3,20(sp)
 100b2e8:	003bc206 	br	100a1f4 <_dtoa_r+0xd0>
 100b2ec:	018040b4 	movhi	r6,258
 100b2f0:	31a9d804 	addi	r6,r6,-22688
 100b2f4:	30c00917 	ldw	r3,36(r6)
 100b2f8:	30800817 	ldw	r2,32(r6)
 100b2fc:	d9001217 	ldw	r4,72(sp)
 100b300:	d9401317 	ldw	r5,76(sp)
 100b304:	180f883a 	mov	r7,r3
 100b308:	100d883a 	mov	r6,r2
 100b30c:	1014a940 	call	1014a94 <__divdf3>
 100b310:	948003cc 	andi	r18,r18,15
 100b314:	058000c4 	movi	r22,3
 100b318:	1029883a 	mov	r20,r2
 100b31c:	182b883a 	mov	r21,r3
 100b320:	003c8906 	br	100a548 <_dtoa_r+0x424>
 100b324:	d9001017 	ldw	r4,64(sp)
 100b328:	d9800917 	ldw	r6,36(sp)
 100b32c:	0025883a 	mov	r18,zero
 100b330:	1105c83a 	sub	r2,r2,r4
 100b334:	2089883a 	add	r4,r4,r2
 100b338:	308d883a 	add	r6,r6,r2
 100b33c:	d9001015 	stw	r4,64(sp)
 100b340:	d9800915 	stw	r6,36(sp)
 100b344:	003e3206 	br	100ac10 <_dtoa_r+0xaec>
 100b348:	28800044 	addi	r2,r5,1
 100b34c:	27000044 	addi	fp,r4,1
 100b350:	20800005 	stb	r2,0(r4)
 100b354:	003e6c06 	br	100ad08 <_dtoa_r+0xbe4>
 100b358:	d8800f17 	ldw	r2,60(sp)
 100b35c:	00bce016 	blt	zero,r2,100a6e0 <_dtoa_r+0x5bc>
 100b360:	d9800f17 	ldw	r6,60(sp)
 100b364:	303cc51e 	bne	r6,zero,100a67c <_dtoa_r+0x558>
 100b368:	0005883a 	mov	r2,zero
 100b36c:	00d00534 	movhi	r3,16404
 100b370:	980b883a 	mov	r5,r19
 100b374:	180f883a 	mov	r7,r3
 100b378:	9009883a 	mov	r4,r18
 100b37c:	100d883a 	mov	r6,r2
 100b380:	10146d00 	call	10146d0 <__muldf3>
 100b384:	180b883a 	mov	r5,r3
 100b388:	a80f883a 	mov	r7,r21
 100b38c:	1009883a 	mov	r4,r2
 100b390:	a00d883a 	mov	r6,r20
 100b394:	1014e840 	call	1014e84 <__gedf2>
 100b398:	103cb80e 	bge	r2,zero,100a67c <_dtoa_r+0x558>
 100b39c:	0027883a 	mov	r19,zero
 100b3a0:	0025883a 	mov	r18,zero
 100b3a4:	003fc606 	br	100b2c0 <_dtoa_r+0x119c>
 100b3a8:	99400117 	ldw	r5,4(r19)
 100b3ac:	d9001617 	ldw	r4,88(sp)
 100b3b0:	100d3280 	call	100d328 <_Balloc>
 100b3b4:	99800417 	ldw	r6,16(r19)
 100b3b8:	11000304 	addi	r4,r2,12
 100b3bc:	99400304 	addi	r5,r19,12
 100b3c0:	318d883a 	add	r6,r6,r6
 100b3c4:	318d883a 	add	r6,r6,r6
 100b3c8:	31800204 	addi	r6,r6,8
 100b3cc:	1023883a 	mov	r17,r2
 100b3d0:	10060100 	call	1006010 <memcpy>
 100b3d4:	d9001617 	ldw	r4,88(sp)
 100b3d8:	880b883a 	mov	r5,r17
 100b3dc:	01800044 	movi	r6,1
 100b3e0:	100d6ec0 	call	100d6ec <__lshift>
 100b3e4:	100b883a 	mov	r5,r2
 100b3e8:	003d9c06 	br	100aa5c <_dtoa_r+0x938>
 100b3ec:	00800e44 	movi	r2,57
 100b3f0:	b8807026 	beq	r23,r2,100b5b4 <_dtoa_r+0x1490>
 100b3f4:	b8800044 	addi	r2,r23,1
 100b3f8:	b7000044 	addi	fp,r22,1
 100b3fc:	b0800005 	stb	r2,0(r22)
 100b400:	003e4106 	br	100ad08 <_dtoa_r+0xbe4>
 100b404:	d8800317 	ldw	r2,12(sp)
 100b408:	018040b4 	movhi	r6,258
 100b40c:	31a9a604 	addi	r6,r6,-22888
 100b410:	b009883a 	mov	r4,r22
 100b414:	100e90fa 	slli	r7,r2,3
 100b418:	b80b883a 	mov	r5,r23
 100b41c:	398f883a 	add	r7,r7,r6
 100b420:	38bffe17 	ldw	r2,-8(r7)
 100b424:	d9800517 	ldw	r6,20(sp)
 100b428:	38ffff17 	ldw	r3,-4(r7)
 100b42c:	37000044 	addi	fp,r6,1
 100b430:	180f883a 	mov	r7,r3
 100b434:	100d883a 	mov	r6,r2
 100b438:	10146d00 	call	10146d0 <__muldf3>
 100b43c:	a80b883a 	mov	r5,r21
 100b440:	a009883a 	mov	r4,r20
 100b444:	182f883a 	mov	r23,r3
 100b448:	102d883a 	mov	r22,r2
 100b44c:	10151140 	call	1015114 <__fixdfsi>
 100b450:	1009883a 	mov	r4,r2
 100b454:	1027883a 	mov	r19,r2
 100b458:	101501c0 	call	101501c <__floatsidf>
 100b45c:	a80b883a 	mov	r5,r21
 100b460:	a009883a 	mov	r4,r20
 100b464:	180f883a 	mov	r7,r3
 100b468:	100d883a 	mov	r6,r2
 100b46c:	10145dc0 	call	10145dc <__subdf3>
 100b470:	180b883a 	mov	r5,r3
 100b474:	d8c00517 	ldw	r3,20(sp)
 100b478:	9cc00c04 	addi	r19,r19,48
 100b47c:	1009883a 	mov	r4,r2
 100b480:	1cc00005 	stb	r19,0(r3)
 100b484:	2021883a 	mov	r16,r4
 100b488:	d9000317 	ldw	r4,12(sp)
 100b48c:	00800044 	movi	r2,1
 100b490:	2823883a 	mov	r17,r5
 100b494:	20802226 	beq	r4,r2,100b520 <_dtoa_r+0x13fc>
 100b498:	1029883a 	mov	r20,r2
 100b49c:	0005883a 	mov	r2,zero
 100b4a0:	00d00934 	movhi	r3,16420
 100b4a4:	180f883a 	mov	r7,r3
 100b4a8:	100d883a 	mov	r6,r2
 100b4ac:	880b883a 	mov	r5,r17
 100b4b0:	8009883a 	mov	r4,r16
 100b4b4:	10146d00 	call	10146d0 <__muldf3>
 100b4b8:	180b883a 	mov	r5,r3
 100b4bc:	1009883a 	mov	r4,r2
 100b4c0:	1823883a 	mov	r17,r3
 100b4c4:	1021883a 	mov	r16,r2
 100b4c8:	10151140 	call	1015114 <__fixdfsi>
 100b4cc:	1009883a 	mov	r4,r2
 100b4d0:	102b883a 	mov	r21,r2
 100b4d4:	101501c0 	call	101501c <__floatsidf>
 100b4d8:	880b883a 	mov	r5,r17
 100b4dc:	8009883a 	mov	r4,r16
 100b4e0:	180f883a 	mov	r7,r3
 100b4e4:	100d883a 	mov	r6,r2
 100b4e8:	10145dc0 	call	10145dc <__subdf3>
 100b4ec:	180b883a 	mov	r5,r3
 100b4f0:	d8c00517 	ldw	r3,20(sp)
 100b4f4:	1009883a 	mov	r4,r2
 100b4f8:	ad400c04 	addi	r21,r21,48
 100b4fc:	1d05883a 	add	r2,r3,r20
 100b500:	15400005 	stb	r21,0(r2)
 100b504:	2021883a 	mov	r16,r4
 100b508:	d9000317 	ldw	r4,12(sp)
 100b50c:	a5000044 	addi	r20,r20,1
 100b510:	2823883a 	mov	r17,r5
 100b514:	a13fe11e 	bne	r20,r4,100b49c <_dtoa_r+0x1378>
 100b518:	e505883a 	add	r2,fp,r20
 100b51c:	173fffc4 	addi	fp,r2,-1
 100b520:	0025883a 	mov	r18,zero
 100b524:	04cff834 	movhi	r19,16352
 100b528:	b009883a 	mov	r4,r22
 100b52c:	b80b883a 	mov	r5,r23
 100b530:	900d883a 	mov	r6,r18
 100b534:	980f883a 	mov	r7,r19
 100b538:	101465c0 	call	101465c <__adddf3>
 100b53c:	180b883a 	mov	r5,r3
 100b540:	1009883a 	mov	r4,r2
 100b544:	800d883a 	mov	r6,r16
 100b548:	880f883a 	mov	r7,r17
 100b54c:	1014f0c0 	call	1014f0c <__ltdf2>
 100b550:	103cab16 	blt	r2,zero,100a800 <_dtoa_r+0x6dc>
 100b554:	0009883a 	mov	r4,zero
 100b558:	980b883a 	mov	r5,r19
 100b55c:	b80f883a 	mov	r7,r23
 100b560:	b00d883a 	mov	r6,r22
 100b564:	10145dc0 	call	10145dc <__subdf3>
 100b568:	180b883a 	mov	r5,r3
 100b56c:	880f883a 	mov	r7,r17
 100b570:	1009883a 	mov	r4,r2
 100b574:	800d883a 	mov	r6,r16
 100b578:	1014dfc0 	call	1014dfc <__gtdf2>
 100b57c:	00bc470e 	bge	zero,r2,100a69c <_dtoa_r+0x578>
 100b580:	00c00c04 	movi	r3,48
 100b584:	e73fffc4 	addi	fp,fp,-1
 100b588:	e0800007 	ldb	r2,0(fp)
 100b58c:	10fffd26 	beq	r2,r3,100b584 <_dtoa_r+0x1460>
 100b590:	d9800417 	ldw	r6,16(sp)
 100b594:	e7000044 	addi	fp,fp,1
 100b598:	d9800d15 	stw	r6,52(sp)
 100b59c:	003cab06 	br	100a84c <_dtoa_r+0x728>
 100b5a0:	d8c00f17 	ldw	r3,60(sp)
 100b5a4:	d9001117 	ldw	r4,68(sp)
 100b5a8:	20e1c83a 	sub	r16,r4,r3
 100b5ac:	0007883a 	mov	r3,zero
 100b5b0:	003d9b06 	br	100ac20 <_dtoa_r+0xafc>
 100b5b4:	00800e44 	movi	r2,57
 100b5b8:	b0800005 	stb	r2,0(r22)
 100b5bc:	b5800044 	addi	r22,r22,1
 100b5c0:	003dc106 	br	100acc8 <_dtoa_r+0xba4>
 100b5c4:	05800084 	movi	r22,2
 100b5c8:	003bf706 	br	100a5a8 <_dtoa_r+0x484>
 100b5cc:	d9000f17 	ldw	r4,60(sp)
 100b5d0:	013c000e 	bge	zero,r4,100a5d4 <_dtoa_r+0x4b0>
 100b5d4:	d9800e17 	ldw	r6,56(sp)
 100b5d8:	01bc300e 	bge	zero,r6,100a69c <_dtoa_r+0x578>
 100b5dc:	0005883a 	mov	r2,zero
 100b5e0:	00d00934 	movhi	r3,16420
 100b5e4:	a80b883a 	mov	r5,r21
 100b5e8:	180f883a 	mov	r7,r3
 100b5ec:	a009883a 	mov	r4,r20
 100b5f0:	100d883a 	mov	r6,r2
 100b5f4:	10146d00 	call	10146d0 <__muldf3>
 100b5f8:	b1000044 	addi	r4,r22,1
 100b5fc:	1021883a 	mov	r16,r2
 100b600:	1823883a 	mov	r17,r3
 100b604:	101501c0 	call	101501c <__floatsidf>
 100b608:	880b883a 	mov	r5,r17
 100b60c:	8009883a 	mov	r4,r16
 100b610:	180f883a 	mov	r7,r3
 100b614:	100d883a 	mov	r6,r2
 100b618:	10146d00 	call	10146d0 <__muldf3>
 100b61c:	0011883a 	mov	r8,zero
 100b620:	02500734 	movhi	r9,16412
 100b624:	180b883a 	mov	r5,r3
 100b628:	480f883a 	mov	r7,r9
 100b62c:	1009883a 	mov	r4,r2
 100b630:	400d883a 	mov	r6,r8
 100b634:	101465c0 	call	101465c <__adddf3>
 100b638:	102d883a 	mov	r22,r2
 100b63c:	00bf3034 	movhi	r2,64704
 100b640:	10ef883a 	add	r23,r2,r3
 100b644:	d8800d17 	ldw	r2,52(sp)
 100b648:	d8c00e17 	ldw	r3,56(sp)
 100b64c:	8029883a 	mov	r20,r16
 100b650:	10bfffc4 	addi	r2,r2,-1
 100b654:	882b883a 	mov	r21,r17
 100b658:	d8800415 	stw	r2,16(sp)
 100b65c:	d8c00315 	stw	r3,12(sp)
 100b660:	003e8306 	br	100b070 <_dtoa_r+0xf4c>
 100b664:	d8800117 	ldw	r2,4(sp)
 100b668:	dc001117 	ldw	r16,68(sp)
 100b66c:	dc801017 	ldw	r18,64(sp)
 100b670:	00c00d84 	movi	r3,54
 100b674:	1887c83a 	sub	r3,r3,r2
 100b678:	003d6906 	br	100ac20 <_dtoa_r+0xafc>
 100b67c:	01800044 	movi	r6,1
 100b680:	3021883a 	mov	r16,r6
 100b684:	d9800f15 	stw	r6,60(sp)
 100b688:	d9802615 	stw	r6,152(sp)
 100b68c:	d9800e15 	stw	r6,56(sp)
 100b690:	003b9306 	br	100a4e0 <_dtoa_r+0x3bc>
 100b694:	b021883a 	mov	r16,r22
 100b698:	dd800f15 	stw	r22,60(sp)
 100b69c:	003b9006 	br	100a4e0 <_dtoa_r+0x3bc>
 100b6a0:	103e221e 	bne	r2,zero,100af2c <_dtoa_r+0xe08>
 100b6a4:	b880004c 	andi	r2,r23,1
 100b6a8:	1005003a 	cmpeq	r2,r2,zero
 100b6ac:	103e1f1e 	bne	r2,zero,100af2c <_dtoa_r+0xe08>
 100b6b0:	003e1b06 	br	100af20 <_dtoa_r+0xdfc>
 100b6b4:	d9001617 	ldw	r4,88(sp)
 100b6b8:	980b883a 	mov	r5,r19
 100b6bc:	01800284 	movi	r6,10
 100b6c0:	000f883a 	mov	r7,zero
 100b6c4:	100da5c0 	call	100da5c <__multadd>
 100b6c8:	d8c00e17 	ldw	r3,56(sp)
 100b6cc:	1027883a 	mov	r19,r2
 100b6d0:	d8c00f15 	stw	r3,60(sp)
 100b6d4:	003cd306 	br	100aa24 <_dtoa_r+0x900>

0100b6d8 <_fflush_r>:
 100b6d8:	defffb04 	addi	sp,sp,-20
 100b6dc:	dcc00315 	stw	r19,12(sp)
 100b6e0:	dc800215 	stw	r18,8(sp)
 100b6e4:	dfc00415 	stw	ra,16(sp)
 100b6e8:	dc400115 	stw	r17,4(sp)
 100b6ec:	dc000015 	stw	r16,0(sp)
 100b6f0:	2027883a 	mov	r19,r4
 100b6f4:	2825883a 	mov	r18,r5
 100b6f8:	20000226 	beq	r4,zero,100b704 <_fflush_r+0x2c>
 100b6fc:	20800e17 	ldw	r2,56(r4)
 100b700:	10005626 	beq	r2,zero,100b85c <_fflush_r+0x184>
 100b704:	9100030b 	ldhu	r4,12(r18)
 100b708:	20ffffcc 	andi	r3,r4,65535
 100b70c:	18e0001c 	xori	r3,r3,32768
 100b710:	18e00004 	addi	r3,r3,-32768
 100b714:	1880020c 	andi	r2,r3,8
 100b718:	1000261e 	bne	r2,zero,100b7b4 <_fflush_r+0xdc>
 100b71c:	90c00117 	ldw	r3,4(r18)
 100b720:	20820014 	ori	r2,r4,2048
 100b724:	9080030d 	sth	r2,12(r18)
 100b728:	1009883a 	mov	r4,r2
 100b72c:	00c0400e 	bge	zero,r3,100b830 <_fflush_r+0x158>
 100b730:	92000a17 	ldw	r8,40(r18)
 100b734:	40004026 	beq	r8,zero,100b838 <_fflush_r+0x160>
 100b738:	2084000c 	andi	r2,r4,4096
 100b73c:	10005326 	beq	r2,zero,100b88c <_fflush_r+0x1b4>
 100b740:	94001417 	ldw	r16,80(r18)
 100b744:	9080030b 	ldhu	r2,12(r18)
 100b748:	1080010c 	andi	r2,r2,4
 100b74c:	1000481e 	bne	r2,zero,100b870 <_fflush_r+0x198>
 100b750:	91400717 	ldw	r5,28(r18)
 100b754:	9809883a 	mov	r4,r19
 100b758:	800d883a 	mov	r6,r16
 100b75c:	000f883a 	mov	r7,zero
 100b760:	403ee83a 	callr	r8
 100b764:	8080261e 	bne	r16,r2,100b800 <_fflush_r+0x128>
 100b768:	9080030b 	ldhu	r2,12(r18)
 100b76c:	91000417 	ldw	r4,16(r18)
 100b770:	90000115 	stw	zero,4(r18)
 100b774:	10bdffcc 	andi	r2,r2,63487
 100b778:	10ffffcc 	andi	r3,r2,65535
 100b77c:	18c4000c 	andi	r3,r3,4096
 100b780:	9080030d 	sth	r2,12(r18)
 100b784:	91000015 	stw	r4,0(r18)
 100b788:	18002b26 	beq	r3,zero,100b838 <_fflush_r+0x160>
 100b78c:	0007883a 	mov	r3,zero
 100b790:	1805883a 	mov	r2,r3
 100b794:	94001415 	stw	r16,80(r18)
 100b798:	dfc00417 	ldw	ra,16(sp)
 100b79c:	dcc00317 	ldw	r19,12(sp)
 100b7a0:	dc800217 	ldw	r18,8(sp)
 100b7a4:	dc400117 	ldw	r17,4(sp)
 100b7a8:	dc000017 	ldw	r16,0(sp)
 100b7ac:	dec00504 	addi	sp,sp,20
 100b7b0:	f800283a 	ret
 100b7b4:	94400417 	ldw	r17,16(r18)
 100b7b8:	88001f26 	beq	r17,zero,100b838 <_fflush_r+0x160>
 100b7bc:	90800017 	ldw	r2,0(r18)
 100b7c0:	18c000cc 	andi	r3,r3,3
 100b7c4:	94400015 	stw	r17,0(r18)
 100b7c8:	1461c83a 	sub	r16,r2,r17
 100b7cc:	18002526 	beq	r3,zero,100b864 <_fflush_r+0x18c>
 100b7d0:	0005883a 	mov	r2,zero
 100b7d4:	90800215 	stw	r2,8(r18)
 100b7d8:	0400170e 	bge	zero,r16,100b838 <_fflush_r+0x160>
 100b7dc:	90c00917 	ldw	r3,36(r18)
 100b7e0:	91400717 	ldw	r5,28(r18)
 100b7e4:	880d883a 	mov	r6,r17
 100b7e8:	800f883a 	mov	r7,r16
 100b7ec:	9809883a 	mov	r4,r19
 100b7f0:	183ee83a 	callr	r3
 100b7f4:	88a3883a 	add	r17,r17,r2
 100b7f8:	80a1c83a 	sub	r16,r16,r2
 100b7fc:	00bff616 	blt	zero,r2,100b7d8 <_fflush_r+0x100>
 100b800:	9080030b 	ldhu	r2,12(r18)
 100b804:	00ffffc4 	movi	r3,-1
 100b808:	10801014 	ori	r2,r2,64
 100b80c:	9080030d 	sth	r2,12(r18)
 100b810:	1805883a 	mov	r2,r3
 100b814:	dfc00417 	ldw	ra,16(sp)
 100b818:	dcc00317 	ldw	r19,12(sp)
 100b81c:	dc800217 	ldw	r18,8(sp)
 100b820:	dc400117 	ldw	r17,4(sp)
 100b824:	dc000017 	ldw	r16,0(sp)
 100b828:	dec00504 	addi	sp,sp,20
 100b82c:	f800283a 	ret
 100b830:	90800f17 	ldw	r2,60(r18)
 100b834:	00bfbe16 	blt	zero,r2,100b730 <_fflush_r+0x58>
 100b838:	0007883a 	mov	r3,zero
 100b83c:	1805883a 	mov	r2,r3
 100b840:	dfc00417 	ldw	ra,16(sp)
 100b844:	dcc00317 	ldw	r19,12(sp)
 100b848:	dc800217 	ldw	r18,8(sp)
 100b84c:	dc400117 	ldw	r17,4(sp)
 100b850:	dc000017 	ldw	r16,0(sp)
 100b854:	dec00504 	addi	sp,sp,20
 100b858:	f800283a 	ret
 100b85c:	100b9700 	call	100b970 <__sinit>
 100b860:	003fa806 	br	100b704 <_fflush_r+0x2c>
 100b864:	90800517 	ldw	r2,20(r18)
 100b868:	90800215 	stw	r2,8(r18)
 100b86c:	003fda06 	br	100b7d8 <_fflush_r+0x100>
 100b870:	90800117 	ldw	r2,4(r18)
 100b874:	90c00c17 	ldw	r3,48(r18)
 100b878:	80a1c83a 	sub	r16,r16,r2
 100b87c:	183fb426 	beq	r3,zero,100b750 <_fflush_r+0x78>
 100b880:	90800f17 	ldw	r2,60(r18)
 100b884:	80a1c83a 	sub	r16,r16,r2
 100b888:	003fb106 	br	100b750 <_fflush_r+0x78>
 100b88c:	91400717 	ldw	r5,28(r18)
 100b890:	9809883a 	mov	r4,r19
 100b894:	000d883a 	mov	r6,zero
 100b898:	01c00044 	movi	r7,1
 100b89c:	403ee83a 	callr	r8
 100b8a0:	1021883a 	mov	r16,r2
 100b8a4:	00bfffc4 	movi	r2,-1
 100b8a8:	80800226 	beq	r16,r2,100b8b4 <_fflush_r+0x1dc>
 100b8ac:	92000a17 	ldw	r8,40(r18)
 100b8b0:	003fa406 	br	100b744 <_fflush_r+0x6c>
 100b8b4:	98c00017 	ldw	r3,0(r19)
 100b8b8:	00800744 	movi	r2,29
 100b8bc:	18bfde26 	beq	r3,r2,100b838 <_fflush_r+0x160>
 100b8c0:	9080030b 	ldhu	r2,12(r18)
 100b8c4:	8007883a 	mov	r3,r16
 100b8c8:	10801014 	ori	r2,r2,64
 100b8cc:	9080030d 	sth	r2,12(r18)
 100b8d0:	003fcf06 	br	100b810 <_fflush_r+0x138>

0100b8d4 <fflush>:
 100b8d4:	01404074 	movhi	r5,257
 100b8d8:	296db604 	addi	r5,r5,-18728
 100b8dc:	2007883a 	mov	r3,r4
 100b8e0:	20000526 	beq	r4,zero,100b8f8 <fflush+0x24>
 100b8e4:	008040b4 	movhi	r2,258
 100b8e8:	10b25404 	addi	r2,r2,-14000
 100b8ec:	11000017 	ldw	r4,0(r2)
 100b8f0:	180b883a 	mov	r5,r3
 100b8f4:	100b6d81 	jmpi	100b6d8 <_fflush_r>
 100b8f8:	008040b4 	movhi	r2,258
 100b8fc:	10b25504 	addi	r2,r2,-13996
 100b900:	11000017 	ldw	r4,0(r2)
 100b904:	100c6e01 	jmpi	100c6e0 <_fwalk_reent>

0100b908 <std>:
 100b908:	00804074 	movhi	r2,257
 100b90c:	10bb2e04 	addi	r2,r2,-4936
 100b910:	20800b15 	stw	r2,44(r4)
 100b914:	00804074 	movhi	r2,257
 100b918:	10bb6904 	addi	r2,r2,-4700
 100b91c:	20800815 	stw	r2,32(r4)
 100b920:	00c04074 	movhi	r3,257
 100b924:	18fb4a04 	addi	r3,r3,-4824
 100b928:	00804074 	movhi	r2,257
 100b92c:	10bb3004 	addi	r2,r2,-4928
 100b930:	2140030d 	sth	r5,12(r4)
 100b934:	2180038d 	sth	r6,14(r4)
 100b938:	20c00915 	stw	r3,36(r4)
 100b93c:	20800a15 	stw	r2,40(r4)
 100b940:	20000015 	stw	zero,0(r4)
 100b944:	20000115 	stw	zero,4(r4)
 100b948:	20000215 	stw	zero,8(r4)
 100b94c:	20000415 	stw	zero,16(r4)
 100b950:	20000515 	stw	zero,20(r4)
 100b954:	20000615 	stw	zero,24(r4)
 100b958:	21000715 	stw	r4,28(r4)
 100b95c:	f800283a 	ret

0100b960 <__sfp_lock_acquire>:
 100b960:	f800283a 	ret

0100b964 <__sfp_lock_release>:
 100b964:	f800283a 	ret

0100b968 <__sinit_lock_acquire>:
 100b968:	f800283a 	ret

0100b96c <__sinit_lock_release>:
 100b96c:	f800283a 	ret

0100b970 <__sinit>:
 100b970:	20800e17 	ldw	r2,56(r4)
 100b974:	defffd04 	addi	sp,sp,-12
 100b978:	dc400115 	stw	r17,4(sp)
 100b97c:	dc000015 	stw	r16,0(sp)
 100b980:	dfc00215 	stw	ra,8(sp)
 100b984:	04400044 	movi	r17,1
 100b988:	01400104 	movi	r5,4
 100b98c:	000d883a 	mov	r6,zero
 100b990:	2021883a 	mov	r16,r4
 100b994:	2200bb04 	addi	r8,r4,748
 100b998:	200f883a 	mov	r7,r4
 100b99c:	10000526 	beq	r2,zero,100b9b4 <__sinit+0x44>
 100b9a0:	dfc00217 	ldw	ra,8(sp)
 100b9a4:	dc400117 	ldw	r17,4(sp)
 100b9a8:	dc000017 	ldw	r16,0(sp)
 100b9ac:	dec00304 	addi	sp,sp,12
 100b9b0:	f800283a 	ret
 100b9b4:	21000117 	ldw	r4,4(r4)
 100b9b8:	00804074 	movhi	r2,257
 100b9bc:	10ae9504 	addi	r2,r2,-17836
 100b9c0:	00c000c4 	movi	r3,3
 100b9c4:	80800f15 	stw	r2,60(r16)
 100b9c8:	80c0b915 	stw	r3,740(r16)
 100b9cc:	8200ba15 	stw	r8,744(r16)
 100b9d0:	84400e15 	stw	r17,56(r16)
 100b9d4:	8000b815 	stw	zero,736(r16)
 100b9d8:	100b9080 	call	100b908 <std>
 100b9dc:	81000217 	ldw	r4,8(r16)
 100b9e0:	880d883a 	mov	r6,r17
 100b9e4:	800f883a 	mov	r7,r16
 100b9e8:	01400284 	movi	r5,10
 100b9ec:	100b9080 	call	100b908 <std>
 100b9f0:	81000317 	ldw	r4,12(r16)
 100b9f4:	800f883a 	mov	r7,r16
 100b9f8:	01400484 	movi	r5,18
 100b9fc:	01800084 	movi	r6,2
 100ba00:	dfc00217 	ldw	ra,8(sp)
 100ba04:	dc400117 	ldw	r17,4(sp)
 100ba08:	dc000017 	ldw	r16,0(sp)
 100ba0c:	dec00304 	addi	sp,sp,12
 100ba10:	100b9081 	jmpi	100b908 <std>

0100ba14 <__fp_lock>:
 100ba14:	0005883a 	mov	r2,zero
 100ba18:	f800283a 	ret

0100ba1c <__fp_unlock>:
 100ba1c:	0005883a 	mov	r2,zero
 100ba20:	f800283a 	ret

0100ba24 <__fp_unlock_all>:
 100ba24:	008040b4 	movhi	r2,258
 100ba28:	10b25404 	addi	r2,r2,-14000
 100ba2c:	11000017 	ldw	r4,0(r2)
 100ba30:	01404074 	movhi	r5,257
 100ba34:	296e8704 	addi	r5,r5,-17892
 100ba38:	100c7a81 	jmpi	100c7a8 <_fwalk>

0100ba3c <__fp_lock_all>:
 100ba3c:	008040b4 	movhi	r2,258
 100ba40:	10b25404 	addi	r2,r2,-14000
 100ba44:	11000017 	ldw	r4,0(r2)
 100ba48:	01404074 	movhi	r5,257
 100ba4c:	296e8504 	addi	r5,r5,-17900
 100ba50:	100c7a81 	jmpi	100c7a8 <_fwalk>

0100ba54 <_cleanup_r>:
 100ba54:	01404074 	movhi	r5,257
 100ba58:	29498b04 	addi	r5,r5,9772
 100ba5c:	100c7a81 	jmpi	100c7a8 <_fwalk>

0100ba60 <_cleanup>:
 100ba60:	008040b4 	movhi	r2,258
 100ba64:	10b25504 	addi	r2,r2,-13996
 100ba68:	11000017 	ldw	r4,0(r2)
 100ba6c:	100ba541 	jmpi	100ba54 <_cleanup_r>

0100ba70 <__sfmoreglue>:
 100ba70:	defffc04 	addi	sp,sp,-16
 100ba74:	dc400115 	stw	r17,4(sp)
 100ba78:	2c401724 	muli	r17,r5,92
 100ba7c:	dc800215 	stw	r18,8(sp)
 100ba80:	2825883a 	mov	r18,r5
 100ba84:	89400304 	addi	r5,r17,12
 100ba88:	dc000015 	stw	r16,0(sp)
 100ba8c:	dfc00315 	stw	ra,12(sp)
 100ba90:	10058d00 	call	10058d0 <_malloc_r>
 100ba94:	0021883a 	mov	r16,zero
 100ba98:	880d883a 	mov	r6,r17
 100ba9c:	000b883a 	mov	r5,zero
 100baa0:	10000626 	beq	r2,zero,100babc <__sfmoreglue+0x4c>
 100baa4:	11000304 	addi	r4,r2,12
 100baa8:	14800115 	stw	r18,4(r2)
 100baac:	10000015 	stw	zero,0(r2)
 100bab0:	11000215 	stw	r4,8(r2)
 100bab4:	1021883a 	mov	r16,r2
 100bab8:	10060b00 	call	10060b0 <memset>
 100babc:	8005883a 	mov	r2,r16
 100bac0:	dfc00317 	ldw	ra,12(sp)
 100bac4:	dc800217 	ldw	r18,8(sp)
 100bac8:	dc400117 	ldw	r17,4(sp)
 100bacc:	dc000017 	ldw	r16,0(sp)
 100bad0:	dec00404 	addi	sp,sp,16
 100bad4:	f800283a 	ret

0100bad8 <__sfp>:
 100bad8:	defffd04 	addi	sp,sp,-12
 100badc:	008040b4 	movhi	r2,258
 100bae0:	10b25504 	addi	r2,r2,-13996
 100bae4:	dc000015 	stw	r16,0(sp)
 100bae8:	14000017 	ldw	r16,0(r2)
 100baec:	dc400115 	stw	r17,4(sp)
 100baf0:	dfc00215 	stw	ra,8(sp)
 100baf4:	80800e17 	ldw	r2,56(r16)
 100baf8:	2023883a 	mov	r17,r4
 100bafc:	10002626 	beq	r2,zero,100bb98 <__sfp+0xc0>
 100bb00:	8400b804 	addi	r16,r16,736
 100bb04:	80800117 	ldw	r2,4(r16)
 100bb08:	81000217 	ldw	r4,8(r16)
 100bb0c:	10ffffc4 	addi	r3,r2,-1
 100bb10:	18000916 	blt	r3,zero,100bb38 <__sfp+0x60>
 100bb14:	2080030f 	ldh	r2,12(r4)
 100bb18:	10000b26 	beq	r2,zero,100bb48 <__sfp+0x70>
 100bb1c:	017fffc4 	movi	r5,-1
 100bb20:	00000206 	br	100bb2c <__sfp+0x54>
 100bb24:	2080030f 	ldh	r2,12(r4)
 100bb28:	10000726 	beq	r2,zero,100bb48 <__sfp+0x70>
 100bb2c:	18ffffc4 	addi	r3,r3,-1
 100bb30:	21001704 	addi	r4,r4,92
 100bb34:	197ffb1e 	bne	r3,r5,100bb24 <__sfp+0x4c>
 100bb38:	80800017 	ldw	r2,0(r16)
 100bb3c:	10001926 	beq	r2,zero,100bba4 <__sfp+0xcc>
 100bb40:	1021883a 	mov	r16,r2
 100bb44:	003fef06 	br	100bb04 <__sfp+0x2c>
 100bb48:	00bfffc4 	movi	r2,-1
 100bb4c:	00c00044 	movi	r3,1
 100bb50:	2080038d 	sth	r2,14(r4)
 100bb54:	20c0030d 	sth	r3,12(r4)
 100bb58:	20000015 	stw	zero,0(r4)
 100bb5c:	20000215 	stw	zero,8(r4)
 100bb60:	20000115 	stw	zero,4(r4)
 100bb64:	20000415 	stw	zero,16(r4)
 100bb68:	20000515 	stw	zero,20(r4)
 100bb6c:	20000615 	stw	zero,24(r4)
 100bb70:	20000c15 	stw	zero,48(r4)
 100bb74:	20000d15 	stw	zero,52(r4)
 100bb78:	20001115 	stw	zero,68(r4)
 100bb7c:	20001215 	stw	zero,72(r4)
 100bb80:	2005883a 	mov	r2,r4
 100bb84:	dfc00217 	ldw	ra,8(sp)
 100bb88:	dc400117 	ldw	r17,4(sp)
 100bb8c:	dc000017 	ldw	r16,0(sp)
 100bb90:	dec00304 	addi	sp,sp,12
 100bb94:	f800283a 	ret
 100bb98:	8009883a 	mov	r4,r16
 100bb9c:	100b9700 	call	100b970 <__sinit>
 100bba0:	003fd706 	br	100bb00 <__sfp+0x28>
 100bba4:	8809883a 	mov	r4,r17
 100bba8:	01400104 	movi	r5,4
 100bbac:	100ba700 	call	100ba70 <__sfmoreglue>
 100bbb0:	80800015 	stw	r2,0(r16)
 100bbb4:	103fe21e 	bne	r2,zero,100bb40 <__sfp+0x68>
 100bbb8:	00800304 	movi	r2,12
 100bbbc:	0009883a 	mov	r4,zero
 100bbc0:	88800015 	stw	r2,0(r17)
 100bbc4:	003fee06 	br	100bb80 <__sfp+0xa8>

0100bbc8 <_fread_r>:
 100bbc8:	defff504 	addi	sp,sp,-44
 100bbcc:	ddc00815 	stw	r23,32(sp)
 100bbd0:	39af383a 	mul	r23,r7,r6
 100bbd4:	df000915 	stw	fp,36(sp)
 100bbd8:	dd800715 	stw	r22,28(sp)
 100bbdc:	dcc00415 	stw	r19,16(sp)
 100bbe0:	dc000115 	stw	r16,4(sp)
 100bbe4:	dfc00a15 	stw	ra,40(sp)
 100bbe8:	dd400615 	stw	r21,24(sp)
 100bbec:	dd000515 	stw	r20,20(sp)
 100bbf0:	dc800315 	stw	r18,12(sp)
 100bbf4:	dc400215 	stw	r17,8(sp)
 100bbf8:	d9800015 	stw	r6,0(sp)
 100bbfc:	3839883a 	mov	fp,r7
 100bc00:	2821883a 	mov	r16,r5
 100bc04:	202d883a 	mov	r22,r4
 100bc08:	dcc00b17 	ldw	r19,44(sp)
 100bc0c:	b8005926 	beq	r23,zero,100bd74 <_fread_r+0x1ac>
 100bc10:	20000226 	beq	r4,zero,100bc1c <_fread_r+0x54>
 100bc14:	20800e17 	ldw	r2,56(r4)
 100bc18:	10005826 	beq	r2,zero,100bd7c <_fread_r+0x1b4>
 100bc1c:	9c400117 	ldw	r17,4(r19)
 100bc20:	88005916 	blt	r17,zero,100bd88 <_fread_r+0x1c0>
 100bc24:	9880030b 	ldhu	r2,12(r19)
 100bc28:	8029883a 	mov	r20,r16
 100bc2c:	1080008c 	andi	r2,r2,2
 100bc30:	1000221e 	bne	r2,zero,100bcbc <_fread_r+0xf4>
 100bc34:	b825883a 	mov	r18,r23
 100bc38:	00000106 	br	100bc40 <_fread_r+0x78>
 100bc3c:	9c400117 	ldw	r17,4(r19)
 100bc40:	a009883a 	mov	r4,r20
 100bc44:	880d883a 	mov	r6,r17
 100bc48:	8c80542e 	bgeu	r17,r18,100bd9c <_fread_r+0x1d4>
 100bc4c:	99400017 	ldw	r5,0(r19)
 100bc50:	a469883a 	add	r20,r20,r17
 100bc54:	9465c83a 	sub	r18,r18,r17
 100bc58:	10060100 	call	1006010 <memcpy>
 100bc5c:	98800017 	ldw	r2,0(r19)
 100bc60:	b009883a 	mov	r4,r22
 100bc64:	980b883a 	mov	r5,r19
 100bc68:	1461883a 	add	r16,r2,r17
 100bc6c:	9c000015 	stw	r16,0(r19)
 100bc70:	100e57c0 	call	100e57c <__srefill_r>
 100bc74:	103ff126 	beq	r2,zero,100bc3c <_fread_r+0x74>
 100bc78:	d9400017 	ldw	r5,0(sp)
 100bc7c:	bc89c83a 	sub	r4,r23,r18
 100bc80:	10155300 	call	1015530 <__udivsi3>
 100bc84:	1039883a 	mov	fp,r2
 100bc88:	e005883a 	mov	r2,fp
 100bc8c:	dfc00a17 	ldw	ra,40(sp)
 100bc90:	df000917 	ldw	fp,36(sp)
 100bc94:	ddc00817 	ldw	r23,32(sp)
 100bc98:	dd800717 	ldw	r22,28(sp)
 100bc9c:	dd400617 	ldw	r21,24(sp)
 100bca0:	dd000517 	ldw	r20,20(sp)
 100bca4:	dcc00417 	ldw	r19,16(sp)
 100bca8:	dc800317 	ldw	r18,12(sp)
 100bcac:	dc400217 	ldw	r17,8(sp)
 100bcb0:	dc000117 	ldw	r16,4(sp)
 100bcb4:	dec00b04 	addi	sp,sp,44
 100bcb8:	f800283a 	ret
 100bcbc:	b825883a 	mov	r18,r23
 100bcc0:	8dc03436 	bltu	r17,r23,100bd94 <_fread_r+0x1cc>
 100bcc4:	99400017 	ldw	r5,0(r19)
 100bcc8:	a009883a 	mov	r4,r20
 100bccc:	900d883a 	mov	r6,r18
 100bcd0:	10060100 	call	1006010 <memcpy>
 100bcd4:	9c000017 	ldw	r16,0(r19)
 100bcd8:	98800117 	ldw	r2,4(r19)
 100bcdc:	99400c17 	ldw	r5,48(r19)
 100bce0:	84a1883a 	add	r16,r16,r18
 100bce4:	14a3c83a 	sub	r17,r2,r18
 100bce8:	a4ab883a 	add	r21,r20,r18
 100bcec:	9c400115 	stw	r17,4(r19)
 100bcf0:	9c000015 	stw	r16,0(r19)
 100bcf4:	bca9c83a 	sub	r20,r23,r18
 100bcf8:	28000826 	beq	r5,zero,100bd1c <_fread_r+0x154>
 100bcfc:	a03fe226 	beq	r20,zero,100bc88 <_fread_r+0xc0>
 100bd00:	98801004 	addi	r2,r19,64
 100bd04:	28800326 	beq	r5,r2,100bd14 <_fread_r+0x14c>
 100bd08:	b009883a 	mov	r4,r22
 100bd0c:	100bf300 	call	100bf30 <_free_r>
 100bd10:	9c000017 	ldw	r16,0(r19)
 100bd14:	98000c15 	stw	zero,48(r19)
 100bd18:	00000106 	br	100bd20 <_fread_r+0x158>
 100bd1c:	a03fda26 	beq	r20,zero,100bc88 <_fread_r+0xc0>
 100bd20:	9c800417 	ldw	r18,16(r19)
 100bd24:	9c400517 	ldw	r17,20(r19)
 100bd28:	9d400015 	stw	r21,0(r19)
 100bd2c:	9d400415 	stw	r21,16(r19)
 100bd30:	9d000515 	stw	r20,20(r19)
 100bd34:	b009883a 	mov	r4,r22
 100bd38:	980b883a 	mov	r5,r19
 100bd3c:	100e57c0 	call	100e57c <__srefill_r>
 100bd40:	98c00117 	ldw	r3,4(r19)
 100bd44:	9c800415 	stw	r18,16(r19)
 100bd48:	9c400515 	stw	r17,20(r19)
 100bd4c:	a8eb883a 	add	r21,r21,r3
 100bd50:	9c000015 	stw	r16,0(r19)
 100bd54:	a0e9c83a 	sub	r20,r20,r3
 100bd58:	98000115 	stw	zero,4(r19)
 100bd5c:	103fef26 	beq	r2,zero,100bd1c <_fread_r+0x154>
 100bd60:	d9400017 	ldw	r5,0(sp)
 100bd64:	bd09c83a 	sub	r4,r23,r20
 100bd68:	10155300 	call	1015530 <__udivsi3>
 100bd6c:	1039883a 	mov	fp,r2
 100bd70:	003fc506 	br	100bc88 <_fread_r+0xc0>
 100bd74:	0039883a 	mov	fp,zero
 100bd78:	003fc306 	br	100bc88 <_fread_r+0xc0>
 100bd7c:	100b9700 	call	100b970 <__sinit>
 100bd80:	9c400117 	ldw	r17,4(r19)
 100bd84:	883fa70e 	bge	r17,zero,100bc24 <_fread_r+0x5c>
 100bd88:	0023883a 	mov	r17,zero
 100bd8c:	98000115 	stw	zero,4(r19)
 100bd90:	003fa406 	br	100bc24 <_fread_r+0x5c>
 100bd94:	8825883a 	mov	r18,r17
 100bd98:	003fca06 	br	100bcc4 <_fread_r+0xfc>
 100bd9c:	99400017 	ldw	r5,0(r19)
 100bda0:	900d883a 	mov	r6,r18
 100bda4:	10060100 	call	1006010 <memcpy>
 100bda8:	98c00117 	ldw	r3,4(r19)
 100bdac:	98800017 	ldw	r2,0(r19)
 100bdb0:	1c87c83a 	sub	r3,r3,r18
 100bdb4:	1485883a 	add	r2,r2,r18
 100bdb8:	98800015 	stw	r2,0(r19)
 100bdbc:	98c00115 	stw	r3,4(r19)
 100bdc0:	003fb106 	br	100bc88 <_fread_r+0xc0>

0100bdc4 <fread>:
 100bdc4:	008040b4 	movhi	r2,258
 100bdc8:	10b25404 	addi	r2,r2,-14000
 100bdcc:	2017883a 	mov	r11,r4
 100bdd0:	11000017 	ldw	r4,0(r2)
 100bdd4:	defffe04 	addi	sp,sp,-8
 100bdd8:	3013883a 	mov	r9,r6
 100bddc:	2805883a 	mov	r2,r5
 100bde0:	d9c00015 	stw	r7,0(sp)
 100bde4:	580b883a 	mov	r5,r11
 100bde8:	100d883a 	mov	r6,r2
 100bdec:	480f883a 	mov	r7,r9
 100bdf0:	dfc00115 	stw	ra,4(sp)
 100bdf4:	100bbc80 	call	100bbc8 <_fread_r>
 100bdf8:	dfc00117 	ldw	ra,4(sp)
 100bdfc:	dec00204 	addi	sp,sp,8
 100be00:	f800283a 	ret

0100be04 <_malloc_trim_r>:
 100be04:	defffb04 	addi	sp,sp,-20
 100be08:	dcc00315 	stw	r19,12(sp)
 100be0c:	04c040b4 	movhi	r19,258
 100be10:	9cec4804 	addi	r19,r19,-20192
 100be14:	dc800215 	stw	r18,8(sp)
 100be18:	dc400115 	stw	r17,4(sp)
 100be1c:	dc000015 	stw	r16,0(sp)
 100be20:	2823883a 	mov	r17,r5
 100be24:	2025883a 	mov	r18,r4
 100be28:	dfc00415 	stw	ra,16(sp)
 100be2c:	10168340 	call	1016834 <__malloc_lock>
 100be30:	98800217 	ldw	r2,8(r19)
 100be34:	9009883a 	mov	r4,r18
 100be38:	000b883a 	mov	r5,zero
 100be3c:	10c00117 	ldw	r3,4(r2)
 100be40:	00bfff04 	movi	r2,-4
 100be44:	18a0703a 	and	r16,r3,r2
 100be48:	8463c83a 	sub	r17,r16,r17
 100be4c:	8c43fbc4 	addi	r17,r17,4079
 100be50:	8822d33a 	srli	r17,r17,12
 100be54:	0083ffc4 	movi	r2,4095
 100be58:	8c7fffc4 	addi	r17,r17,-1
 100be5c:	8822933a 	slli	r17,r17,12
 100be60:	1440060e 	bge	r2,r17,100be7c <_malloc_trim_r+0x78>
 100be64:	10062980 	call	1006298 <_sbrk_r>
 100be68:	98c00217 	ldw	r3,8(r19)
 100be6c:	9009883a 	mov	r4,r18
 100be70:	044bc83a 	sub	r5,zero,r17
 100be74:	80c7883a 	add	r3,r16,r3
 100be78:	10c00926 	beq	r2,r3,100bea0 <_malloc_trim_r+0x9c>
 100be7c:	10168540 	call	1016854 <__malloc_unlock>
 100be80:	0005883a 	mov	r2,zero
 100be84:	dfc00417 	ldw	ra,16(sp)
 100be88:	dcc00317 	ldw	r19,12(sp)
 100be8c:	dc800217 	ldw	r18,8(sp)
 100be90:	dc400117 	ldw	r17,4(sp)
 100be94:	dc000017 	ldw	r16,0(sp)
 100be98:	dec00504 	addi	sp,sp,20
 100be9c:	f800283a 	ret
 100bea0:	9009883a 	mov	r4,r18
 100bea4:	10062980 	call	1006298 <_sbrk_r>
 100bea8:	844dc83a 	sub	r6,r16,r17
 100beac:	00ffffc4 	movi	r3,-1
 100beb0:	9009883a 	mov	r4,r18
 100beb4:	000b883a 	mov	r5,zero
 100beb8:	01c040b4 	movhi	r7,258
 100bebc:	39fa4e04 	addi	r7,r7,-5832
 100bec0:	31800054 	ori	r6,r6,1
 100bec4:	10c00926 	beq	r2,r3,100beec <_malloc_trim_r+0xe8>
 100bec8:	38800017 	ldw	r2,0(r7)
 100becc:	98c00217 	ldw	r3,8(r19)
 100bed0:	9009883a 	mov	r4,r18
 100bed4:	1445c83a 	sub	r2,r2,r17
 100bed8:	38800015 	stw	r2,0(r7)
 100bedc:	19800115 	stw	r6,4(r3)
 100bee0:	10168540 	call	1016854 <__malloc_unlock>
 100bee4:	00800044 	movi	r2,1
 100bee8:	003fe606 	br	100be84 <_malloc_trim_r+0x80>
 100beec:	10062980 	call	1006298 <_sbrk_r>
 100bef0:	99800217 	ldw	r6,8(r19)
 100bef4:	100f883a 	mov	r7,r2
 100bef8:	9009883a 	mov	r4,r18
 100befc:	1187c83a 	sub	r3,r2,r6
 100bf00:	008003c4 	movi	r2,15
 100bf04:	19400054 	ori	r5,r3,1
 100bf08:	10ffdc0e 	bge	r2,r3,100be7c <_malloc_trim_r+0x78>
 100bf0c:	008040b4 	movhi	r2,258
 100bf10:	10b25704 	addi	r2,r2,-13988
 100bf14:	10c00017 	ldw	r3,0(r2)
 100bf18:	008040b4 	movhi	r2,258
 100bf1c:	10ba4e04 	addi	r2,r2,-5832
 100bf20:	31400115 	stw	r5,4(r6)
 100bf24:	38c7c83a 	sub	r3,r7,r3
 100bf28:	10c00015 	stw	r3,0(r2)
 100bf2c:	003fd306 	br	100be7c <_malloc_trim_r+0x78>

0100bf30 <_free_r>:
 100bf30:	defffd04 	addi	sp,sp,-12
 100bf34:	dc400115 	stw	r17,4(sp)
 100bf38:	dc000015 	stw	r16,0(sp)
 100bf3c:	dfc00215 	stw	ra,8(sp)
 100bf40:	2821883a 	mov	r16,r5
 100bf44:	2023883a 	mov	r17,r4
 100bf48:	28005a26 	beq	r5,zero,100c0b4 <_free_r+0x184>
 100bf4c:	10168340 	call	1016834 <__malloc_lock>
 100bf50:	823ffe04 	addi	r8,r16,-8
 100bf54:	41400117 	ldw	r5,4(r8)
 100bf58:	00bfff84 	movi	r2,-2
 100bf5c:	028040b4 	movhi	r10,258
 100bf60:	52ac4804 	addi	r10,r10,-20192
 100bf64:	288e703a 	and	r7,r5,r2
 100bf68:	41cd883a 	add	r6,r8,r7
 100bf6c:	30c00117 	ldw	r3,4(r6)
 100bf70:	51000217 	ldw	r4,8(r10)
 100bf74:	00bfff04 	movi	r2,-4
 100bf78:	1892703a 	and	r9,r3,r2
 100bf7c:	5017883a 	mov	r11,r10
 100bf80:	31006726 	beq	r6,r4,100c120 <_free_r+0x1f0>
 100bf84:	2880004c 	andi	r2,r5,1
 100bf88:	1005003a 	cmpeq	r2,r2,zero
 100bf8c:	32400115 	stw	r9,4(r6)
 100bf90:	10001a1e 	bne	r2,zero,100bffc <_free_r+0xcc>
 100bf94:	000b883a 	mov	r5,zero
 100bf98:	3247883a 	add	r3,r6,r9
 100bf9c:	18800117 	ldw	r2,4(r3)
 100bfa0:	1080004c 	andi	r2,r2,1
 100bfa4:	1000231e 	bne	r2,zero,100c034 <_free_r+0x104>
 100bfa8:	280ac03a 	cmpne	r5,r5,zero
 100bfac:	3a4f883a 	add	r7,r7,r9
 100bfb0:	2800451e 	bne	r5,zero,100c0c8 <_free_r+0x198>
 100bfb4:	31000217 	ldw	r4,8(r6)
 100bfb8:	008040b4 	movhi	r2,258
 100bfbc:	10ac4a04 	addi	r2,r2,-20184
 100bfc0:	20807b26 	beq	r4,r2,100c1b0 <_free_r+0x280>
 100bfc4:	30800317 	ldw	r2,12(r6)
 100bfc8:	3a07883a 	add	r3,r7,r8
 100bfcc:	19c00015 	stw	r7,0(r3)
 100bfd0:	11000215 	stw	r4,8(r2)
 100bfd4:	20800315 	stw	r2,12(r4)
 100bfd8:	38800054 	ori	r2,r7,1
 100bfdc:	40800115 	stw	r2,4(r8)
 100bfe0:	28001a26 	beq	r5,zero,100c04c <_free_r+0x11c>
 100bfe4:	8809883a 	mov	r4,r17
 100bfe8:	dfc00217 	ldw	ra,8(sp)
 100bfec:	dc400117 	ldw	r17,4(sp)
 100bff0:	dc000017 	ldw	r16,0(sp)
 100bff4:	dec00304 	addi	sp,sp,12
 100bff8:	10168541 	jmpi	1016854 <__malloc_unlock>
 100bffc:	80bffe17 	ldw	r2,-8(r16)
 100c000:	50c00204 	addi	r3,r10,8
 100c004:	4091c83a 	sub	r8,r8,r2
 100c008:	41000217 	ldw	r4,8(r8)
 100c00c:	388f883a 	add	r7,r7,r2
 100c010:	20c06126 	beq	r4,r3,100c198 <_free_r+0x268>
 100c014:	40800317 	ldw	r2,12(r8)
 100c018:	3247883a 	add	r3,r6,r9
 100c01c:	000b883a 	mov	r5,zero
 100c020:	11000215 	stw	r4,8(r2)
 100c024:	20800315 	stw	r2,12(r4)
 100c028:	18800117 	ldw	r2,4(r3)
 100c02c:	1080004c 	andi	r2,r2,1
 100c030:	103fdd26 	beq	r2,zero,100bfa8 <_free_r+0x78>
 100c034:	38800054 	ori	r2,r7,1
 100c038:	3a07883a 	add	r3,r7,r8
 100c03c:	280ac03a 	cmpne	r5,r5,zero
 100c040:	40800115 	stw	r2,4(r8)
 100c044:	19c00015 	stw	r7,0(r3)
 100c048:	283fe61e 	bne	r5,zero,100bfe4 <_free_r+0xb4>
 100c04c:	00807fc4 	movi	r2,511
 100c050:	11c01f2e 	bgeu	r2,r7,100c0d0 <_free_r+0x1a0>
 100c054:	3806d27a 	srli	r3,r7,9
 100c058:	1800481e 	bne	r3,zero,100c17c <_free_r+0x24c>
 100c05c:	3804d0fa 	srli	r2,r7,3
 100c060:	100690fa 	slli	r3,r2,3
 100c064:	1acd883a 	add	r6,r3,r11
 100c068:	31400217 	ldw	r5,8(r6)
 100c06c:	31405926 	beq	r6,r5,100c1d4 <_free_r+0x2a4>
 100c070:	28800117 	ldw	r2,4(r5)
 100c074:	00ffff04 	movi	r3,-4
 100c078:	10c4703a 	and	r2,r2,r3
 100c07c:	3880022e 	bgeu	r7,r2,100c088 <_free_r+0x158>
 100c080:	29400217 	ldw	r5,8(r5)
 100c084:	317ffa1e 	bne	r6,r5,100c070 <_free_r+0x140>
 100c088:	29800317 	ldw	r6,12(r5)
 100c08c:	41800315 	stw	r6,12(r8)
 100c090:	41400215 	stw	r5,8(r8)
 100c094:	8809883a 	mov	r4,r17
 100c098:	2a000315 	stw	r8,12(r5)
 100c09c:	32000215 	stw	r8,8(r6)
 100c0a0:	dfc00217 	ldw	ra,8(sp)
 100c0a4:	dc400117 	ldw	r17,4(sp)
 100c0a8:	dc000017 	ldw	r16,0(sp)
 100c0ac:	dec00304 	addi	sp,sp,12
 100c0b0:	10168541 	jmpi	1016854 <__malloc_unlock>
 100c0b4:	dfc00217 	ldw	ra,8(sp)
 100c0b8:	dc400117 	ldw	r17,4(sp)
 100c0bc:	dc000017 	ldw	r16,0(sp)
 100c0c0:	dec00304 	addi	sp,sp,12
 100c0c4:	f800283a 	ret
 100c0c8:	31000217 	ldw	r4,8(r6)
 100c0cc:	003fbd06 	br	100bfc4 <_free_r+0x94>
 100c0d0:	3806d0fa 	srli	r3,r7,3
 100c0d4:	00800044 	movi	r2,1
 100c0d8:	51400117 	ldw	r5,4(r10)
 100c0dc:	180890fa 	slli	r4,r3,3
 100c0e0:	1807d0ba 	srai	r3,r3,2
 100c0e4:	22c9883a 	add	r4,r4,r11
 100c0e8:	21800217 	ldw	r6,8(r4)
 100c0ec:	10c4983a 	sll	r2,r2,r3
 100c0f0:	41000315 	stw	r4,12(r8)
 100c0f4:	41800215 	stw	r6,8(r8)
 100c0f8:	288ab03a 	or	r5,r5,r2
 100c0fc:	22000215 	stw	r8,8(r4)
 100c100:	8809883a 	mov	r4,r17
 100c104:	51400115 	stw	r5,4(r10)
 100c108:	32000315 	stw	r8,12(r6)
 100c10c:	dfc00217 	ldw	ra,8(sp)
 100c110:	dc400117 	ldw	r17,4(sp)
 100c114:	dc000017 	ldw	r16,0(sp)
 100c118:	dec00304 	addi	sp,sp,12
 100c11c:	10168541 	jmpi	1016854 <__malloc_unlock>
 100c120:	2880004c 	andi	r2,r5,1
 100c124:	3a4d883a 	add	r6,r7,r9
 100c128:	1000071e 	bne	r2,zero,100c148 <_free_r+0x218>
 100c12c:	80bffe17 	ldw	r2,-8(r16)
 100c130:	4091c83a 	sub	r8,r8,r2
 100c134:	41000317 	ldw	r4,12(r8)
 100c138:	40c00217 	ldw	r3,8(r8)
 100c13c:	308d883a 	add	r6,r6,r2
 100c140:	20c00215 	stw	r3,8(r4)
 100c144:	19000315 	stw	r4,12(r3)
 100c148:	008040b4 	movhi	r2,258
 100c14c:	10b25604 	addi	r2,r2,-13992
 100c150:	11000017 	ldw	r4,0(r2)
 100c154:	30c00054 	ori	r3,r6,1
 100c158:	52000215 	stw	r8,8(r10)
 100c15c:	40c00115 	stw	r3,4(r8)
 100c160:	313fa036 	bltu	r6,r4,100bfe4 <_free_r+0xb4>
 100c164:	008040b4 	movhi	r2,258
 100c168:	10ba3f04 	addi	r2,r2,-5892
 100c16c:	11400017 	ldw	r5,0(r2)
 100c170:	8809883a 	mov	r4,r17
 100c174:	100be040 	call	100be04 <_malloc_trim_r>
 100c178:	003f9a06 	br	100bfe4 <_free_r+0xb4>
 100c17c:	00800104 	movi	r2,4
 100c180:	10c0072e 	bgeu	r2,r3,100c1a0 <_free_r+0x270>
 100c184:	00800504 	movi	r2,20
 100c188:	10c01936 	bltu	r2,r3,100c1f0 <_free_r+0x2c0>
 100c18c:	188016c4 	addi	r2,r3,91
 100c190:	100690fa 	slli	r3,r2,3
 100c194:	003fb306 	br	100c064 <_free_r+0x134>
 100c198:	01400044 	movi	r5,1
 100c19c:	003f7e06 	br	100bf98 <_free_r+0x68>
 100c1a0:	3804d1ba 	srli	r2,r7,6
 100c1a4:	10800e04 	addi	r2,r2,56
 100c1a8:	100690fa 	slli	r3,r2,3
 100c1ac:	003fad06 	br	100c064 <_free_r+0x134>
 100c1b0:	22000315 	stw	r8,12(r4)
 100c1b4:	22000215 	stw	r8,8(r4)
 100c1b8:	3a05883a 	add	r2,r7,r8
 100c1bc:	38c00054 	ori	r3,r7,1
 100c1c0:	11c00015 	stw	r7,0(r2)
 100c1c4:	41000215 	stw	r4,8(r8)
 100c1c8:	40c00115 	stw	r3,4(r8)
 100c1cc:	41000315 	stw	r4,12(r8)
 100c1d0:	003f8406 	br	100bfe4 <_free_r+0xb4>
 100c1d4:	1005d0ba 	srai	r2,r2,2
 100c1d8:	00c00044 	movi	r3,1
 100c1dc:	51000117 	ldw	r4,4(r10)
 100c1e0:	1886983a 	sll	r3,r3,r2
 100c1e4:	20c8b03a 	or	r4,r4,r3
 100c1e8:	51000115 	stw	r4,4(r10)
 100c1ec:	003fa706 	br	100c08c <_free_r+0x15c>
 100c1f0:	00801504 	movi	r2,84
 100c1f4:	10c00436 	bltu	r2,r3,100c208 <_free_r+0x2d8>
 100c1f8:	3804d33a 	srli	r2,r7,12
 100c1fc:	10801b84 	addi	r2,r2,110
 100c200:	100690fa 	slli	r3,r2,3
 100c204:	003f9706 	br	100c064 <_free_r+0x134>
 100c208:	00805504 	movi	r2,340
 100c20c:	10c00436 	bltu	r2,r3,100c220 <_free_r+0x2f0>
 100c210:	3804d3fa 	srli	r2,r7,15
 100c214:	10801dc4 	addi	r2,r2,119
 100c218:	100690fa 	slli	r3,r2,3
 100c21c:	003f9106 	br	100c064 <_free_r+0x134>
 100c220:	00815504 	movi	r2,1364
 100c224:	10c0032e 	bgeu	r2,r3,100c234 <_free_r+0x304>
 100c228:	00801f84 	movi	r2,126
 100c22c:	00c0fc04 	movi	r3,1008
 100c230:	003f8c06 	br	100c064 <_free_r+0x134>
 100c234:	3804d4ba 	srli	r2,r7,18
 100c238:	10801f04 	addi	r2,r2,124
 100c23c:	100690fa 	slli	r3,r2,3
 100c240:	003f8806 	br	100c064 <_free_r+0x134>

0100c244 <__sfvwrite_r>:
 100c244:	30800217 	ldw	r2,8(r6)
 100c248:	defff504 	addi	sp,sp,-44
 100c24c:	df000915 	stw	fp,36(sp)
 100c250:	dd800715 	stw	r22,28(sp)
 100c254:	dc800315 	stw	r18,12(sp)
 100c258:	dfc00a15 	stw	ra,40(sp)
 100c25c:	ddc00815 	stw	r23,32(sp)
 100c260:	dd400615 	stw	r21,24(sp)
 100c264:	dd000515 	stw	r20,20(sp)
 100c268:	dcc00415 	stw	r19,16(sp)
 100c26c:	dc400215 	stw	r17,8(sp)
 100c270:	dc000115 	stw	r16,4(sp)
 100c274:	302d883a 	mov	r22,r6
 100c278:	2039883a 	mov	fp,r4
 100c27c:	2825883a 	mov	r18,r5
 100c280:	10001c26 	beq	r2,zero,100c2f4 <__sfvwrite_r+0xb0>
 100c284:	29c0030b 	ldhu	r7,12(r5)
 100c288:	3880020c 	andi	r2,r7,8
 100c28c:	10002726 	beq	r2,zero,100c32c <__sfvwrite_r+0xe8>
 100c290:	28800417 	ldw	r2,16(r5)
 100c294:	10002526 	beq	r2,zero,100c32c <__sfvwrite_r+0xe8>
 100c298:	3880008c 	andi	r2,r7,2
 100c29c:	b5400017 	ldw	r21,0(r22)
 100c2a0:	10002826 	beq	r2,zero,100c344 <__sfvwrite_r+0x100>
 100c2a4:	0021883a 	mov	r16,zero
 100c2a8:	0023883a 	mov	r17,zero
 100c2ac:	880d883a 	mov	r6,r17
 100c2b0:	e009883a 	mov	r4,fp
 100c2b4:	00810004 	movi	r2,1024
 100c2b8:	80006e26 	beq	r16,zero,100c474 <__sfvwrite_r+0x230>
 100c2bc:	800f883a 	mov	r7,r16
 100c2c0:	91400717 	ldw	r5,28(r18)
 100c2c4:	1400012e 	bgeu	r2,r16,100c2cc <__sfvwrite_r+0x88>
 100c2c8:	100f883a 	mov	r7,r2
 100c2cc:	90c00917 	ldw	r3,36(r18)
 100c2d0:	183ee83a 	callr	r3
 100c2d4:	1007883a 	mov	r3,r2
 100c2d8:	80a1c83a 	sub	r16,r16,r2
 100c2dc:	88a3883a 	add	r17,r17,r2
 100c2e0:	00806d0e 	bge	zero,r2,100c498 <__sfvwrite_r+0x254>
 100c2e4:	b0800217 	ldw	r2,8(r22)
 100c2e8:	10c5c83a 	sub	r2,r2,r3
 100c2ec:	b0800215 	stw	r2,8(r22)
 100c2f0:	103fee1e 	bne	r2,zero,100c2ac <__sfvwrite_r+0x68>
 100c2f4:	0009883a 	mov	r4,zero
 100c2f8:	2005883a 	mov	r2,r4
 100c2fc:	dfc00a17 	ldw	ra,40(sp)
 100c300:	df000917 	ldw	fp,36(sp)
 100c304:	ddc00817 	ldw	r23,32(sp)
 100c308:	dd800717 	ldw	r22,28(sp)
 100c30c:	dd400617 	ldw	r21,24(sp)
 100c310:	dd000517 	ldw	r20,20(sp)
 100c314:	dcc00417 	ldw	r19,16(sp)
 100c318:	dc800317 	ldw	r18,12(sp)
 100c31c:	dc400217 	ldw	r17,8(sp)
 100c320:	dc000117 	ldw	r16,4(sp)
 100c324:	dec00b04 	addi	sp,sp,44
 100c328:	f800283a 	ret
 100c32c:	1009c040 	call	1009c04 <__swsetup_r>
 100c330:	1000e41e 	bne	r2,zero,100c6c4 <__sfvwrite_r+0x480>
 100c334:	91c0030b 	ldhu	r7,12(r18)
 100c338:	b5400017 	ldw	r21,0(r22)
 100c33c:	3880008c 	andi	r2,r7,2
 100c340:	103fd81e 	bne	r2,zero,100c2a4 <__sfvwrite_r+0x60>
 100c344:	3880004c 	andi	r2,r7,1
 100c348:	1005003a 	cmpeq	r2,r2,zero
 100c34c:	10005726 	beq	r2,zero,100c4ac <__sfvwrite_r+0x268>
 100c350:	0029883a 	mov	r20,zero
 100c354:	002f883a 	mov	r23,zero
 100c358:	a0004226 	beq	r20,zero,100c464 <__sfvwrite_r+0x220>
 100c35c:	3880800c 	andi	r2,r7,512
 100c360:	94000217 	ldw	r16,8(r18)
 100c364:	10008b26 	beq	r2,zero,100c594 <__sfvwrite_r+0x350>
 100c368:	800d883a 	mov	r6,r16
 100c36c:	a400a536 	bltu	r20,r16,100c604 <__sfvwrite_r+0x3c0>
 100c370:	3881200c 	andi	r2,r7,1152
 100c374:	10002726 	beq	r2,zero,100c414 <__sfvwrite_r+0x1d0>
 100c378:	90800517 	ldw	r2,20(r18)
 100c37c:	92000417 	ldw	r8,16(r18)
 100c380:	91400017 	ldw	r5,0(r18)
 100c384:	1087883a 	add	r3,r2,r2
 100c388:	1887883a 	add	r3,r3,r2
 100c38c:	1808d7fa 	srli	r4,r3,31
 100c390:	2a21c83a 	sub	r16,r5,r8
 100c394:	80800044 	addi	r2,r16,1
 100c398:	20c9883a 	add	r4,r4,r3
 100c39c:	2027d07a 	srai	r19,r4,1
 100c3a0:	a085883a 	add	r2,r20,r2
 100c3a4:	980d883a 	mov	r6,r19
 100c3a8:	9880022e 	bgeu	r19,r2,100c3b4 <__sfvwrite_r+0x170>
 100c3ac:	1027883a 	mov	r19,r2
 100c3b0:	100d883a 	mov	r6,r2
 100c3b4:	3881000c 	andi	r2,r7,1024
 100c3b8:	1000b826 	beq	r2,zero,100c69c <__sfvwrite_r+0x458>
 100c3bc:	300b883a 	mov	r5,r6
 100c3c0:	e009883a 	mov	r4,fp
 100c3c4:	10058d00 	call	10058d0 <_malloc_r>
 100c3c8:	10003126 	beq	r2,zero,100c490 <__sfvwrite_r+0x24c>
 100c3cc:	91400417 	ldw	r5,16(r18)
 100c3d0:	1009883a 	mov	r4,r2
 100c3d4:	800d883a 	mov	r6,r16
 100c3d8:	1023883a 	mov	r17,r2
 100c3dc:	10060100 	call	1006010 <memcpy>
 100c3e0:	90c0030b 	ldhu	r3,12(r18)
 100c3e4:	00beffc4 	movi	r2,-1025
 100c3e8:	1886703a 	and	r3,r3,r2
 100c3ec:	18c02014 	ori	r3,r3,128
 100c3f0:	90c0030d 	sth	r3,12(r18)
 100c3f4:	9c07c83a 	sub	r3,r19,r16
 100c3f8:	8c05883a 	add	r2,r17,r16
 100c3fc:	a00d883a 	mov	r6,r20
 100c400:	a021883a 	mov	r16,r20
 100c404:	90800015 	stw	r2,0(r18)
 100c408:	90c00215 	stw	r3,8(r18)
 100c40c:	94400415 	stw	r17,16(r18)
 100c410:	94c00515 	stw	r19,20(r18)
 100c414:	91000017 	ldw	r4,0(r18)
 100c418:	b80b883a 	mov	r5,r23
 100c41c:	a023883a 	mov	r17,r20
 100c420:	100ccc80 	call	100ccc8 <memmove>
 100c424:	90c00217 	ldw	r3,8(r18)
 100c428:	90800017 	ldw	r2,0(r18)
 100c42c:	a027883a 	mov	r19,r20
 100c430:	1c07c83a 	sub	r3,r3,r16
 100c434:	1405883a 	add	r2,r2,r16
 100c438:	90c00215 	stw	r3,8(r18)
 100c43c:	a021883a 	mov	r16,r20
 100c440:	90800015 	stw	r2,0(r18)
 100c444:	b0800217 	ldw	r2,8(r22)
 100c448:	1405c83a 	sub	r2,r2,r16
 100c44c:	b0800215 	stw	r2,8(r22)
 100c450:	103fa826 	beq	r2,zero,100c2f4 <__sfvwrite_r+0xb0>
 100c454:	a469c83a 	sub	r20,r20,r17
 100c458:	91c0030b 	ldhu	r7,12(r18)
 100c45c:	bcef883a 	add	r23,r23,r19
 100c460:	a03fbe1e 	bne	r20,zero,100c35c <__sfvwrite_r+0x118>
 100c464:	adc00017 	ldw	r23,0(r21)
 100c468:	ad000117 	ldw	r20,4(r21)
 100c46c:	ad400204 	addi	r21,r21,8
 100c470:	003fb906 	br	100c358 <__sfvwrite_r+0x114>
 100c474:	ac400017 	ldw	r17,0(r21)
 100c478:	ac000117 	ldw	r16,4(r21)
 100c47c:	ad400204 	addi	r21,r21,8
 100c480:	003f8a06 	br	100c2ac <__sfvwrite_r+0x68>
 100c484:	91400417 	ldw	r5,16(r18)
 100c488:	e009883a 	mov	r4,fp
 100c48c:	100bf300 	call	100bf30 <_free_r>
 100c490:	00800304 	movi	r2,12
 100c494:	e0800015 	stw	r2,0(fp)
 100c498:	9080030b 	ldhu	r2,12(r18)
 100c49c:	013fffc4 	movi	r4,-1
 100c4a0:	10801014 	ori	r2,r2,64
 100c4a4:	9080030d 	sth	r2,12(r18)
 100c4a8:	003f9306 	br	100c2f8 <__sfvwrite_r+0xb4>
 100c4ac:	0027883a 	mov	r19,zero
 100c4b0:	002f883a 	mov	r23,zero
 100c4b4:	d8000015 	stw	zero,0(sp)
 100c4b8:	0029883a 	mov	r20,zero
 100c4bc:	98001e26 	beq	r19,zero,100c538 <__sfvwrite_r+0x2f4>
 100c4c0:	d8c00017 	ldw	r3,0(sp)
 100c4c4:	1804c03a 	cmpne	r2,r3,zero
 100c4c8:	10005e26 	beq	r2,zero,100c644 <__sfvwrite_r+0x400>
 100c4cc:	9821883a 	mov	r16,r19
 100c4d0:	a4c0012e 	bgeu	r20,r19,100c4d8 <__sfvwrite_r+0x294>
 100c4d4:	a021883a 	mov	r16,r20
 100c4d8:	91000017 	ldw	r4,0(r18)
 100c4dc:	90800417 	ldw	r2,16(r18)
 100c4e0:	91800217 	ldw	r6,8(r18)
 100c4e4:	91c00517 	ldw	r7,20(r18)
 100c4e8:	1100022e 	bgeu	r2,r4,100c4f4 <__sfvwrite_r+0x2b0>
 100c4ec:	31e3883a 	add	r17,r6,r7
 100c4f0:	8c001616 	blt	r17,r16,100c54c <__sfvwrite_r+0x308>
 100c4f4:	81c03816 	blt	r16,r7,100c5d8 <__sfvwrite_r+0x394>
 100c4f8:	90c00917 	ldw	r3,36(r18)
 100c4fc:	91400717 	ldw	r5,28(r18)
 100c500:	e009883a 	mov	r4,fp
 100c504:	b80d883a 	mov	r6,r23
 100c508:	183ee83a 	callr	r3
 100c50c:	1023883a 	mov	r17,r2
 100c510:	00bfe10e 	bge	zero,r2,100c498 <__sfvwrite_r+0x254>
 100c514:	a469c83a 	sub	r20,r20,r17
 100c518:	a0001826 	beq	r20,zero,100c57c <__sfvwrite_r+0x338>
 100c51c:	b0800217 	ldw	r2,8(r22)
 100c520:	1445c83a 	sub	r2,r2,r17
 100c524:	b0800215 	stw	r2,8(r22)
 100c528:	103f7226 	beq	r2,zero,100c2f4 <__sfvwrite_r+0xb0>
 100c52c:	9c67c83a 	sub	r19,r19,r17
 100c530:	bc6f883a 	add	r23,r23,r17
 100c534:	983fe21e 	bne	r19,zero,100c4c0 <__sfvwrite_r+0x27c>
 100c538:	adc00017 	ldw	r23,0(r21)
 100c53c:	acc00117 	ldw	r19,4(r21)
 100c540:	ad400204 	addi	r21,r21,8
 100c544:	d8000015 	stw	zero,0(sp)
 100c548:	003fdc06 	br	100c4bc <__sfvwrite_r+0x278>
 100c54c:	b80b883a 	mov	r5,r23
 100c550:	880d883a 	mov	r6,r17
 100c554:	100ccc80 	call	100ccc8 <memmove>
 100c558:	90c00017 	ldw	r3,0(r18)
 100c55c:	e009883a 	mov	r4,fp
 100c560:	900b883a 	mov	r5,r18
 100c564:	1c47883a 	add	r3,r3,r17
 100c568:	90c00015 	stw	r3,0(r18)
 100c56c:	100b6d80 	call	100b6d8 <_fflush_r>
 100c570:	103fc91e 	bne	r2,zero,100c498 <__sfvwrite_r+0x254>
 100c574:	a469c83a 	sub	r20,r20,r17
 100c578:	a03fe81e 	bne	r20,zero,100c51c <__sfvwrite_r+0x2d8>
 100c57c:	e009883a 	mov	r4,fp
 100c580:	900b883a 	mov	r5,r18
 100c584:	100b6d80 	call	100b6d8 <_fflush_r>
 100c588:	103fc31e 	bne	r2,zero,100c498 <__sfvwrite_r+0x254>
 100c58c:	d8000015 	stw	zero,0(sp)
 100c590:	003fe206 	br	100c51c <__sfvwrite_r+0x2d8>
 100c594:	91000017 	ldw	r4,0(r18)
 100c598:	90800417 	ldw	r2,16(r18)
 100c59c:	1100022e 	bgeu	r2,r4,100c5a8 <__sfvwrite_r+0x364>
 100c5a0:	8023883a 	mov	r17,r16
 100c5a4:	85003136 	bltu	r16,r20,100c66c <__sfvwrite_r+0x428>
 100c5a8:	91c00517 	ldw	r7,20(r18)
 100c5ac:	a1c01836 	bltu	r20,r7,100c610 <__sfvwrite_r+0x3cc>
 100c5b0:	90c00917 	ldw	r3,36(r18)
 100c5b4:	91400717 	ldw	r5,28(r18)
 100c5b8:	e009883a 	mov	r4,fp
 100c5bc:	b80d883a 	mov	r6,r23
 100c5c0:	183ee83a 	callr	r3
 100c5c4:	1021883a 	mov	r16,r2
 100c5c8:	00bfb30e 	bge	zero,r2,100c498 <__sfvwrite_r+0x254>
 100c5cc:	1023883a 	mov	r17,r2
 100c5d0:	1027883a 	mov	r19,r2
 100c5d4:	003f9b06 	br	100c444 <__sfvwrite_r+0x200>
 100c5d8:	b80b883a 	mov	r5,r23
 100c5dc:	800d883a 	mov	r6,r16
 100c5e0:	100ccc80 	call	100ccc8 <memmove>
 100c5e4:	90c00217 	ldw	r3,8(r18)
 100c5e8:	90800017 	ldw	r2,0(r18)
 100c5ec:	8023883a 	mov	r17,r16
 100c5f0:	1c07c83a 	sub	r3,r3,r16
 100c5f4:	1405883a 	add	r2,r2,r16
 100c5f8:	90c00215 	stw	r3,8(r18)
 100c5fc:	90800015 	stw	r2,0(r18)
 100c600:	003fc406 	br	100c514 <__sfvwrite_r+0x2d0>
 100c604:	a00d883a 	mov	r6,r20
 100c608:	a021883a 	mov	r16,r20
 100c60c:	003f8106 	br	100c414 <__sfvwrite_r+0x1d0>
 100c610:	b80b883a 	mov	r5,r23
 100c614:	a00d883a 	mov	r6,r20
 100c618:	100ccc80 	call	100ccc8 <memmove>
 100c61c:	90c00217 	ldw	r3,8(r18)
 100c620:	90800017 	ldw	r2,0(r18)
 100c624:	a021883a 	mov	r16,r20
 100c628:	1d07c83a 	sub	r3,r3,r20
 100c62c:	1505883a 	add	r2,r2,r20
 100c630:	a023883a 	mov	r17,r20
 100c634:	a027883a 	mov	r19,r20
 100c638:	90c00215 	stw	r3,8(r18)
 100c63c:	90800015 	stw	r2,0(r18)
 100c640:	003f8006 	br	100c444 <__sfvwrite_r+0x200>
 100c644:	b809883a 	mov	r4,r23
 100c648:	01400284 	movi	r5,10
 100c64c:	980d883a 	mov	r6,r19
 100c650:	100cbe40 	call	100cbe4 <memchr>
 100c654:	10001726 	beq	r2,zero,100c6b4 <__sfvwrite_r+0x470>
 100c658:	15c5c83a 	sub	r2,r2,r23
 100c65c:	15000044 	addi	r20,r2,1
 100c660:	00800044 	movi	r2,1
 100c664:	d8800015 	stw	r2,0(sp)
 100c668:	003f9806 	br	100c4cc <__sfvwrite_r+0x288>
 100c66c:	b80b883a 	mov	r5,r23
 100c670:	800d883a 	mov	r6,r16
 100c674:	100ccc80 	call	100ccc8 <memmove>
 100c678:	90c00017 	ldw	r3,0(r18)
 100c67c:	e009883a 	mov	r4,fp
 100c680:	900b883a 	mov	r5,r18
 100c684:	1c07883a 	add	r3,r3,r16
 100c688:	90c00015 	stw	r3,0(r18)
 100c68c:	8027883a 	mov	r19,r16
 100c690:	100b6d80 	call	100b6d8 <_fflush_r>
 100c694:	103f6b26 	beq	r2,zero,100c444 <__sfvwrite_r+0x200>
 100c698:	003f7f06 	br	100c498 <__sfvwrite_r+0x254>
 100c69c:	400b883a 	mov	r5,r8
 100c6a0:	e009883a 	mov	r4,fp
 100c6a4:	100df880 	call	100df88 <_realloc_r>
 100c6a8:	103f7626 	beq	r2,zero,100c484 <__sfvwrite_r+0x240>
 100c6ac:	1023883a 	mov	r17,r2
 100c6b0:	003f5006 	br	100c3f4 <__sfvwrite_r+0x1b0>
 100c6b4:	00c00044 	movi	r3,1
 100c6b8:	9d000044 	addi	r20,r19,1
 100c6bc:	d8c00015 	stw	r3,0(sp)
 100c6c0:	003f8206 	br	100c4cc <__sfvwrite_r+0x288>
 100c6c4:	9080030b 	ldhu	r2,12(r18)
 100c6c8:	00c00244 	movi	r3,9
 100c6cc:	013fffc4 	movi	r4,-1
 100c6d0:	10801014 	ori	r2,r2,64
 100c6d4:	9080030d 	sth	r2,12(r18)
 100c6d8:	e0c00015 	stw	r3,0(fp)
 100c6dc:	003f0606 	br	100c2f8 <__sfvwrite_r+0xb4>

0100c6e0 <_fwalk_reent>:
 100c6e0:	defff704 	addi	sp,sp,-36
 100c6e4:	dcc00315 	stw	r19,12(sp)
 100c6e8:	24c0b804 	addi	r19,r4,736
 100c6ec:	dd800615 	stw	r22,24(sp)
 100c6f0:	dd400515 	stw	r21,20(sp)
 100c6f4:	dfc00815 	stw	ra,32(sp)
 100c6f8:	ddc00715 	stw	r23,28(sp)
 100c6fc:	dd000415 	stw	r20,16(sp)
 100c700:	dc800215 	stw	r18,8(sp)
 100c704:	dc400115 	stw	r17,4(sp)
 100c708:	dc000015 	stw	r16,0(sp)
 100c70c:	202b883a 	mov	r21,r4
 100c710:	282d883a 	mov	r22,r5
 100c714:	100b9600 	call	100b960 <__sfp_lock_acquire>
 100c718:	98002126 	beq	r19,zero,100c7a0 <_fwalk_reent+0xc0>
 100c71c:	002f883a 	mov	r23,zero
 100c720:	9c800117 	ldw	r18,4(r19)
 100c724:	9c000217 	ldw	r16,8(r19)
 100c728:	90bfffc4 	addi	r2,r18,-1
 100c72c:	10000d16 	blt	r2,zero,100c764 <_fwalk_reent+0x84>
 100c730:	0023883a 	mov	r17,zero
 100c734:	053fffc4 	movi	r20,-1
 100c738:	8080030f 	ldh	r2,12(r16)
 100c73c:	8c400044 	addi	r17,r17,1
 100c740:	10000626 	beq	r2,zero,100c75c <_fwalk_reent+0x7c>
 100c744:	8080038f 	ldh	r2,14(r16)
 100c748:	800b883a 	mov	r5,r16
 100c74c:	a809883a 	mov	r4,r21
 100c750:	15000226 	beq	r2,r20,100c75c <_fwalk_reent+0x7c>
 100c754:	b03ee83a 	callr	r22
 100c758:	b8aeb03a 	or	r23,r23,r2
 100c75c:	84001704 	addi	r16,r16,92
 100c760:	947ff51e 	bne	r18,r17,100c738 <_fwalk_reent+0x58>
 100c764:	9cc00017 	ldw	r19,0(r19)
 100c768:	983fed1e 	bne	r19,zero,100c720 <_fwalk_reent+0x40>
 100c76c:	100b9640 	call	100b964 <__sfp_lock_release>
 100c770:	b805883a 	mov	r2,r23
 100c774:	dfc00817 	ldw	ra,32(sp)
 100c778:	ddc00717 	ldw	r23,28(sp)
 100c77c:	dd800617 	ldw	r22,24(sp)
 100c780:	dd400517 	ldw	r21,20(sp)
 100c784:	dd000417 	ldw	r20,16(sp)
 100c788:	dcc00317 	ldw	r19,12(sp)
 100c78c:	dc800217 	ldw	r18,8(sp)
 100c790:	dc400117 	ldw	r17,4(sp)
 100c794:	dc000017 	ldw	r16,0(sp)
 100c798:	dec00904 	addi	sp,sp,36
 100c79c:	f800283a 	ret
 100c7a0:	002f883a 	mov	r23,zero
 100c7a4:	003ff106 	br	100c76c <_fwalk_reent+0x8c>

0100c7a8 <_fwalk>:
 100c7a8:	defff804 	addi	sp,sp,-32
 100c7ac:	dcc00315 	stw	r19,12(sp)
 100c7b0:	24c0b804 	addi	r19,r4,736
 100c7b4:	dd400515 	stw	r21,20(sp)
 100c7b8:	dfc00715 	stw	ra,28(sp)
 100c7bc:	dd800615 	stw	r22,24(sp)
 100c7c0:	dd000415 	stw	r20,16(sp)
 100c7c4:	dc800215 	stw	r18,8(sp)
 100c7c8:	dc400115 	stw	r17,4(sp)
 100c7cc:	dc000015 	stw	r16,0(sp)
 100c7d0:	282b883a 	mov	r21,r5
 100c7d4:	100b9600 	call	100b960 <__sfp_lock_acquire>
 100c7d8:	98001f26 	beq	r19,zero,100c858 <_fwalk+0xb0>
 100c7dc:	002d883a 	mov	r22,zero
 100c7e0:	9c800117 	ldw	r18,4(r19)
 100c7e4:	9c000217 	ldw	r16,8(r19)
 100c7e8:	90bfffc4 	addi	r2,r18,-1
 100c7ec:	10000c16 	blt	r2,zero,100c820 <_fwalk+0x78>
 100c7f0:	0023883a 	mov	r17,zero
 100c7f4:	053fffc4 	movi	r20,-1
 100c7f8:	8080030f 	ldh	r2,12(r16)
 100c7fc:	8c400044 	addi	r17,r17,1
 100c800:	10000526 	beq	r2,zero,100c818 <_fwalk+0x70>
 100c804:	8080038f 	ldh	r2,14(r16)
 100c808:	8009883a 	mov	r4,r16
 100c80c:	15000226 	beq	r2,r20,100c818 <_fwalk+0x70>
 100c810:	a83ee83a 	callr	r21
 100c814:	b0acb03a 	or	r22,r22,r2
 100c818:	84001704 	addi	r16,r16,92
 100c81c:	947ff61e 	bne	r18,r17,100c7f8 <_fwalk+0x50>
 100c820:	9cc00017 	ldw	r19,0(r19)
 100c824:	983fee1e 	bne	r19,zero,100c7e0 <_fwalk+0x38>
 100c828:	100b9640 	call	100b964 <__sfp_lock_release>
 100c82c:	b005883a 	mov	r2,r22
 100c830:	dfc00717 	ldw	ra,28(sp)
 100c834:	dd800617 	ldw	r22,24(sp)
 100c838:	dd400517 	ldw	r21,20(sp)
 100c83c:	dd000417 	ldw	r20,16(sp)
 100c840:	dcc00317 	ldw	r19,12(sp)
 100c844:	dc800217 	ldw	r18,8(sp)
 100c848:	dc400117 	ldw	r17,4(sp)
 100c84c:	dc000017 	ldw	r16,0(sp)
 100c850:	dec00804 	addi	sp,sp,32
 100c854:	f800283a 	ret
 100c858:	002d883a 	mov	r22,zero
 100c85c:	003ff206 	br	100c828 <_fwalk+0x80>

0100c860 <iswspace>:
 100c860:	00803fc4 	movi	r2,255
 100c864:	0007883a 	mov	r3,zero
 100c868:	11000636 	bltu	r2,r4,100c884 <iswspace+0x24>
 100c86c:	008040b4 	movhi	r2,258
 100c870:	10b25804 	addi	r2,r2,-13984
 100c874:	10c00017 	ldw	r3,0(r2)
 100c878:	1907883a 	add	r3,r3,r4
 100c87c:	18800003 	ldbu	r2,0(r3)
 100c880:	10c0020c 	andi	r3,r2,8
 100c884:	1805883a 	mov	r2,r3
 100c888:	f800283a 	ret

0100c88c <__locale_charset>:
 100c88c:	d0a01117 	ldw	r2,-32700(gp)
 100c890:	f800283a 	ret

0100c894 <_localeconv_r>:
 100c894:	008040b4 	movhi	r2,258
 100c898:	10a99a04 	addi	r2,r2,-22936
 100c89c:	f800283a 	ret

0100c8a0 <localeconv>:
 100c8a0:	008040b4 	movhi	r2,258
 100c8a4:	10b25404 	addi	r2,r2,-14000
 100c8a8:	11000017 	ldw	r4,0(r2)
 100c8ac:	100c8941 	jmpi	100c894 <_localeconv_r>

0100c8b0 <_setlocale_r>:
 100c8b0:	defffc04 	addi	sp,sp,-16
 100c8b4:	00c040b4 	movhi	r3,258
 100c8b8:	18e8c504 	addi	r3,r3,-23788
 100c8bc:	dc800215 	stw	r18,8(sp)
 100c8c0:	dc400115 	stw	r17,4(sp)
 100c8c4:	dc000015 	stw	r16,0(sp)
 100c8c8:	2023883a 	mov	r17,r4
 100c8cc:	2825883a 	mov	r18,r5
 100c8d0:	dfc00315 	stw	ra,12(sp)
 100c8d4:	3021883a 	mov	r16,r6
 100c8d8:	3009883a 	mov	r4,r6
 100c8dc:	180b883a 	mov	r5,r3
 100c8e0:	30000926 	beq	r6,zero,100c908 <_setlocale_r+0x58>
 100c8e4:	10063840 	call	1006384 <strcmp>
 100c8e8:	8009883a 	mov	r4,r16
 100c8ec:	014040b4 	movhi	r5,258
 100c8f0:	2968c404 	addi	r5,r5,-23792
 100c8f4:	10000b1e 	bne	r2,zero,100c924 <_setlocale_r+0x74>
 100c8f8:	8c000d15 	stw	r16,52(r17)
 100c8fc:	8c800c15 	stw	r18,48(r17)
 100c900:	00c040b4 	movhi	r3,258
 100c904:	18e8c504 	addi	r3,r3,-23788
 100c908:	1805883a 	mov	r2,r3
 100c90c:	dfc00317 	ldw	ra,12(sp)
 100c910:	dc800217 	ldw	r18,8(sp)
 100c914:	dc400117 	ldw	r17,4(sp)
 100c918:	dc000017 	ldw	r16,0(sp)
 100c91c:	dec00404 	addi	sp,sp,16
 100c920:	f800283a 	ret
 100c924:	10063840 	call	1006384 <strcmp>
 100c928:	0007883a 	mov	r3,zero
 100c92c:	103ff226 	beq	r2,zero,100c8f8 <_setlocale_r+0x48>
 100c930:	003ff506 	br	100c908 <_setlocale_r+0x58>

0100c934 <setlocale>:
 100c934:	018040b4 	movhi	r6,258
 100c938:	31b25404 	addi	r6,r6,-14000
 100c93c:	2007883a 	mov	r3,r4
 100c940:	31000017 	ldw	r4,0(r6)
 100c944:	280d883a 	mov	r6,r5
 100c948:	180b883a 	mov	r5,r3
 100c94c:	100c8b01 	jmpi	100c8b0 <_setlocale_r>

0100c950 <__smakebuf_r>:
 100c950:	2880030b 	ldhu	r2,12(r5)
 100c954:	deffed04 	addi	sp,sp,-76
 100c958:	dc401015 	stw	r17,64(sp)
 100c95c:	1080008c 	andi	r2,r2,2
 100c960:	dc000f15 	stw	r16,60(sp)
 100c964:	dfc01215 	stw	ra,72(sp)
 100c968:	dc801115 	stw	r18,68(sp)
 100c96c:	2821883a 	mov	r16,r5
 100c970:	2023883a 	mov	r17,r4
 100c974:	10000b26 	beq	r2,zero,100c9a4 <__smakebuf_r+0x54>
 100c978:	28c010c4 	addi	r3,r5,67
 100c97c:	00800044 	movi	r2,1
 100c980:	28800515 	stw	r2,20(r5)
 100c984:	28c00415 	stw	r3,16(r5)
 100c988:	28c00015 	stw	r3,0(r5)
 100c98c:	dfc01217 	ldw	ra,72(sp)
 100c990:	dc801117 	ldw	r18,68(sp)
 100c994:	dc401017 	ldw	r17,64(sp)
 100c998:	dc000f17 	ldw	r16,60(sp)
 100c99c:	dec01304 	addi	sp,sp,76
 100c9a0:	f800283a 	ret
 100c9a4:	2940038f 	ldh	r5,14(r5)
 100c9a8:	28002116 	blt	r5,zero,100ca30 <__smakebuf_r+0xe0>
 100c9ac:	d80d883a 	mov	r6,sp
 100c9b0:	10126400 	call	1012640 <_fstat_r>
 100c9b4:	10001e16 	blt	r2,zero,100ca30 <__smakebuf_r+0xe0>
 100c9b8:	d8800117 	ldw	r2,4(sp)
 100c9bc:	00e00014 	movui	r3,32768
 100c9c0:	113c000c 	andi	r4,r2,61440
 100c9c4:	20c03126 	beq	r4,r3,100ca8c <__smakebuf_r+0x13c>
 100c9c8:	8080030b 	ldhu	r2,12(r16)
 100c9cc:	00c80004 	movi	r3,8192
 100c9d0:	10820014 	ori	r2,r2,2048
 100c9d4:	8080030d 	sth	r2,12(r16)
 100c9d8:	20c01e26 	beq	r4,r3,100ca54 <__smakebuf_r+0x104>
 100c9dc:	04810004 	movi	r18,1024
 100c9e0:	8809883a 	mov	r4,r17
 100c9e4:	900b883a 	mov	r5,r18
 100c9e8:	10058d00 	call	10058d0 <_malloc_r>
 100c9ec:	1009883a 	mov	r4,r2
 100c9f0:	10003126 	beq	r2,zero,100cab8 <__smakebuf_r+0x168>
 100c9f4:	80c0030b 	ldhu	r3,12(r16)
 100c9f8:	00804074 	movhi	r2,257
 100c9fc:	10ae9504 	addi	r2,r2,-17836
 100ca00:	88800f15 	stw	r2,60(r17)
 100ca04:	18c02014 	ori	r3,r3,128
 100ca08:	84800515 	stw	r18,20(r16)
 100ca0c:	80c0030d 	sth	r3,12(r16)
 100ca10:	81000415 	stw	r4,16(r16)
 100ca14:	81000015 	stw	r4,0(r16)
 100ca18:	dfc01217 	ldw	ra,72(sp)
 100ca1c:	dc801117 	ldw	r18,68(sp)
 100ca20:	dc401017 	ldw	r17,64(sp)
 100ca24:	dc000f17 	ldw	r16,60(sp)
 100ca28:	dec01304 	addi	sp,sp,76
 100ca2c:	f800283a 	ret
 100ca30:	80c0030b 	ldhu	r3,12(r16)
 100ca34:	1880200c 	andi	r2,r3,128
 100ca38:	10000426 	beq	r2,zero,100ca4c <__smakebuf_r+0xfc>
 100ca3c:	04801004 	movi	r18,64
 100ca40:	18820014 	ori	r2,r3,2048
 100ca44:	8080030d 	sth	r2,12(r16)
 100ca48:	003fe506 	br	100c9e0 <__smakebuf_r+0x90>
 100ca4c:	04810004 	movi	r18,1024
 100ca50:	003ffb06 	br	100ca40 <__smakebuf_r+0xf0>
 100ca54:	8140038f 	ldh	r5,14(r16)
 100ca58:	8809883a 	mov	r4,r17
 100ca5c:	101323c0 	call	101323c <_isatty_r>
 100ca60:	103fde26 	beq	r2,zero,100c9dc <__smakebuf_r+0x8c>
 100ca64:	8080030b 	ldhu	r2,12(r16)
 100ca68:	80c010c4 	addi	r3,r16,67
 100ca6c:	04810004 	movi	r18,1024
 100ca70:	10800054 	ori	r2,r2,1
 100ca74:	8080030d 	sth	r2,12(r16)
 100ca78:	00800044 	movi	r2,1
 100ca7c:	80c00415 	stw	r3,16(r16)
 100ca80:	80800515 	stw	r2,20(r16)
 100ca84:	80c00015 	stw	r3,0(r16)
 100ca88:	003fd506 	br	100c9e0 <__smakebuf_r+0x90>
 100ca8c:	80c00a17 	ldw	r3,40(r16)
 100ca90:	00804074 	movhi	r2,257
 100ca94:	10bb3004 	addi	r2,r2,-4928
 100ca98:	18bfcb1e 	bne	r3,r2,100c9c8 <__smakebuf_r+0x78>
 100ca9c:	8080030b 	ldhu	r2,12(r16)
 100caa0:	00c10004 	movi	r3,1024
 100caa4:	1825883a 	mov	r18,r3
 100caa8:	10c4b03a 	or	r2,r2,r3
 100caac:	8080030d 	sth	r2,12(r16)
 100cab0:	80c01315 	stw	r3,76(r16)
 100cab4:	003fca06 	br	100c9e0 <__smakebuf_r+0x90>
 100cab8:	8100030b 	ldhu	r4,12(r16)
 100cabc:	2080800c 	andi	r2,r4,512
 100cac0:	103fb21e 	bne	r2,zero,100c98c <__smakebuf_r+0x3c>
 100cac4:	80c010c4 	addi	r3,r16,67
 100cac8:	21000094 	ori	r4,r4,2
 100cacc:	00800044 	movi	r2,1
 100cad0:	80800515 	stw	r2,20(r16)
 100cad4:	8100030d 	sth	r4,12(r16)
 100cad8:	80c00415 	stw	r3,16(r16)
 100cadc:	80c00015 	stw	r3,0(r16)
 100cae0:	003faa06 	br	100c98c <__smakebuf_r+0x3c>

0100cae4 <_mbrtowc_r>:
 100cae4:	defffc04 	addi	sp,sp,-16
 100cae8:	dc400215 	stw	r17,8(sp)
 100caec:	dc000115 	stw	r16,4(sp)
 100caf0:	dfc00315 	stw	ra,12(sp)
 100caf4:	dc000417 	ldw	r16,16(sp)
 100caf8:	2023883a 	mov	r17,r4
 100cafc:	30000f26 	beq	r6,zero,100cb3c <_mbrtowc_r+0x58>
 100cb00:	dc000015 	stw	r16,0(sp)
 100cb04:	100cba40 	call	100cba4 <_mbtowc_r>
 100cb08:	1007883a 	mov	r3,r2
 100cb0c:	00bfffc4 	movi	r2,-1
 100cb10:	1809883a 	mov	r4,r3
 100cb14:	1880111e 	bne	r3,r2,100cb5c <_mbrtowc_r+0x78>
 100cb18:	80000015 	stw	zero,0(r16)
 100cb1c:	00802284 	movi	r2,138
 100cb20:	88800015 	stw	r2,0(r17)
 100cb24:	2005883a 	mov	r2,r4
 100cb28:	dfc00317 	ldw	ra,12(sp)
 100cb2c:	dc400217 	ldw	r17,8(sp)
 100cb30:	dc000117 	ldw	r16,4(sp)
 100cb34:	dec00404 	addi	sp,sp,16
 100cb38:	f800283a 	ret
 100cb3c:	000b883a 	mov	r5,zero
 100cb40:	018040b4 	movhi	r6,258
 100cb44:	31a8c404 	addi	r6,r6,-23792
 100cb48:	01c00044 	movi	r7,1
 100cb4c:	dc000015 	stw	r16,0(sp)
 100cb50:	100cba40 	call	100cba4 <_mbtowc_r>
 100cb54:	1007883a 	mov	r3,r2
 100cb58:	003fec06 	br	100cb0c <_mbrtowc_r+0x28>
 100cb5c:	1809883a 	mov	r4,r3
 100cb60:	003ff006 	br	100cb24 <_mbrtowc_r+0x40>

0100cb64 <mbrtowc>:
 100cb64:	008040b4 	movhi	r2,258
 100cb68:	10b25404 	addi	r2,r2,-14000
 100cb6c:	2017883a 	mov	r11,r4
 100cb70:	11000017 	ldw	r4,0(r2)
 100cb74:	defffe04 	addi	sp,sp,-8
 100cb78:	3013883a 	mov	r9,r6
 100cb7c:	2805883a 	mov	r2,r5
 100cb80:	d9c00015 	stw	r7,0(sp)
 100cb84:	580b883a 	mov	r5,r11
 100cb88:	100d883a 	mov	r6,r2
 100cb8c:	480f883a 	mov	r7,r9
 100cb90:	dfc00115 	stw	ra,4(sp)
 100cb94:	100cae40 	call	100cae4 <_mbrtowc_r>
 100cb98:	dfc00117 	ldw	ra,4(sp)
 100cb9c:	dec00204 	addi	sp,sp,8
 100cba0:	f800283a 	ret

0100cba4 <_mbtowc_r>:
 100cba4:	deffff04 	addi	sp,sp,-4
 100cba8:	0005883a 	mov	r2,zero
 100cbac:	28000326 	beq	r5,zero,100cbbc <_mbtowc_r+0x18>
 100cbb0:	3000041e 	bne	r6,zero,100cbc4 <_mbtowc_r+0x20>
 100cbb4:	dec00104 	addi	sp,sp,4
 100cbb8:	f800283a 	ret
 100cbbc:	d80b883a 	mov	r5,sp
 100cbc0:	303ffc26 	beq	r6,zero,100cbb4 <_mbtowc_r+0x10>
 100cbc4:	00bfff84 	movi	r2,-2
 100cbc8:	383ffa26 	beq	r7,zero,100cbb4 <_mbtowc_r+0x10>
 100cbcc:	30800003 	ldbu	r2,0(r6)
 100cbd0:	28800015 	stw	r2,0(r5)
 100cbd4:	30c00003 	ldbu	r3,0(r6)
 100cbd8:	1804c03a 	cmpne	r2,r3,zero
 100cbdc:	dec00104 	addi	sp,sp,4
 100cbe0:	f800283a 	ret

0100cbe4 <memchr>:
 100cbe4:	008000c4 	movi	r2,3
 100cbe8:	29403fcc 	andi	r5,r5,255
 100cbec:	2007883a 	mov	r3,r4
 100cbf0:	1180022e 	bgeu	r2,r6,100cbfc <memchr+0x18>
 100cbf4:	2084703a 	and	r2,r4,r2
 100cbf8:	10000b26 	beq	r2,zero,100cc28 <memchr+0x44>
 100cbfc:	313fffc4 	addi	r4,r6,-1
 100cc00:	3000051e 	bne	r6,zero,100cc18 <memchr+0x34>
 100cc04:	00002c06 	br	100ccb8 <memchr+0xd4>
 100cc08:	213fffc4 	addi	r4,r4,-1
 100cc0c:	00bfffc4 	movi	r2,-1
 100cc10:	18c00044 	addi	r3,r3,1
 100cc14:	20802826 	beq	r4,r2,100ccb8 <memchr+0xd4>
 100cc18:	18800003 	ldbu	r2,0(r3)
 100cc1c:	28bffa1e 	bne	r5,r2,100cc08 <memchr+0x24>
 100cc20:	1805883a 	mov	r2,r3
 100cc24:	f800283a 	ret
 100cc28:	0011883a 	mov	r8,zero
 100cc2c:	0007883a 	mov	r3,zero
 100cc30:	01c00104 	movi	r7,4
 100cc34:	4004923a 	slli	r2,r8,8
 100cc38:	18c00044 	addi	r3,r3,1
 100cc3c:	1151883a 	add	r8,r2,r5
 100cc40:	19fffc1e 	bne	r3,r7,100cc34 <memchr+0x50>
 100cc44:	02bfbff4 	movhi	r10,65279
 100cc48:	52bfbfc4 	addi	r10,r10,-257
 100cc4c:	02602074 	movhi	r9,32897
 100cc50:	4a602004 	addi	r9,r9,-32640
 100cc54:	02c000c4 	movi	r11,3
 100cc58:	20800017 	ldw	r2,0(r4)
 100cc5c:	31bfff04 	addi	r6,r6,-4
 100cc60:	200f883a 	mov	r7,r4
 100cc64:	1204f03a 	xor	r2,r2,r8
 100cc68:	1287883a 	add	r3,r2,r10
 100cc6c:	1a46703a 	and	r3,r3,r9
 100cc70:	0084303a 	nor	r2,zero,r2
 100cc74:	10c4703a 	and	r2,r2,r3
 100cc78:	10000b26 	beq	r2,zero,100cca8 <memchr+0xc4>
 100cc7c:	20800003 	ldbu	r2,0(r4)
 100cc80:	28800f26 	beq	r5,r2,100ccc0 <memchr+0xdc>
 100cc84:	20800043 	ldbu	r2,1(r4)
 100cc88:	21c00044 	addi	r7,r4,1
 100cc8c:	28800c26 	beq	r5,r2,100ccc0 <memchr+0xdc>
 100cc90:	20800083 	ldbu	r2,2(r4)
 100cc94:	21c00084 	addi	r7,r4,2
 100cc98:	28800926 	beq	r5,r2,100ccc0 <memchr+0xdc>
 100cc9c:	208000c3 	ldbu	r2,3(r4)
 100cca0:	21c000c4 	addi	r7,r4,3
 100cca4:	28800626 	beq	r5,r2,100ccc0 <memchr+0xdc>
 100cca8:	21000104 	addi	r4,r4,4
 100ccac:	59bfea36 	bltu	r11,r6,100cc58 <memchr+0x74>
 100ccb0:	2007883a 	mov	r3,r4
 100ccb4:	003fd106 	br	100cbfc <memchr+0x18>
 100ccb8:	0005883a 	mov	r2,zero
 100ccbc:	f800283a 	ret
 100ccc0:	3805883a 	mov	r2,r7
 100ccc4:	f800283a 	ret

0100ccc8 <memmove>:
 100ccc8:	2807883a 	mov	r3,r5
 100cccc:	2011883a 	mov	r8,r4
 100ccd0:	29000c2e 	bgeu	r5,r4,100cd04 <memmove+0x3c>
 100ccd4:	298f883a 	add	r7,r5,r6
 100ccd8:	21c00a2e 	bgeu	r4,r7,100cd04 <memmove+0x3c>
 100ccdc:	30000726 	beq	r6,zero,100ccfc <memmove+0x34>
 100cce0:	2187883a 	add	r3,r4,r6
 100cce4:	198dc83a 	sub	r6,r3,r6
 100cce8:	39ffffc4 	addi	r7,r7,-1
 100ccec:	38800003 	ldbu	r2,0(r7)
 100ccf0:	18ffffc4 	addi	r3,r3,-1
 100ccf4:	18800005 	stb	r2,0(r3)
 100ccf8:	19bffb1e 	bne	r3,r6,100cce8 <memmove+0x20>
 100ccfc:	2005883a 	mov	r2,r4
 100cd00:	f800283a 	ret
 100cd04:	01c003c4 	movi	r7,15
 100cd08:	39800a36 	bltu	r7,r6,100cd34 <memmove+0x6c>
 100cd0c:	303ffb26 	beq	r6,zero,100ccfc <memmove+0x34>
 100cd10:	400f883a 	mov	r7,r8
 100cd14:	320d883a 	add	r6,r6,r8
 100cd18:	28800003 	ldbu	r2,0(r5)
 100cd1c:	29400044 	addi	r5,r5,1
 100cd20:	38800005 	stb	r2,0(r7)
 100cd24:	39c00044 	addi	r7,r7,1
 100cd28:	39bffb1e 	bne	r7,r6,100cd18 <memmove+0x50>
 100cd2c:	2005883a 	mov	r2,r4
 100cd30:	f800283a 	ret
 100cd34:	1904b03a 	or	r2,r3,r4
 100cd38:	108000cc 	andi	r2,r2,3
 100cd3c:	103ff31e 	bne	r2,zero,100cd0c <memmove+0x44>
 100cd40:	3811883a 	mov	r8,r7
 100cd44:	180b883a 	mov	r5,r3
 100cd48:	200f883a 	mov	r7,r4
 100cd4c:	28c00017 	ldw	r3,0(r5)
 100cd50:	31bffc04 	addi	r6,r6,-16
 100cd54:	38c00015 	stw	r3,0(r7)
 100cd58:	28800117 	ldw	r2,4(r5)
 100cd5c:	38800115 	stw	r2,4(r7)
 100cd60:	28c00217 	ldw	r3,8(r5)
 100cd64:	38c00215 	stw	r3,8(r7)
 100cd68:	28800317 	ldw	r2,12(r5)
 100cd6c:	29400404 	addi	r5,r5,16
 100cd70:	38800315 	stw	r2,12(r7)
 100cd74:	39c00404 	addi	r7,r7,16
 100cd78:	41bff436 	bltu	r8,r6,100cd4c <memmove+0x84>
 100cd7c:	008000c4 	movi	r2,3
 100cd80:	1180072e 	bgeu	r2,r6,100cda0 <memmove+0xd8>
 100cd84:	1007883a 	mov	r3,r2
 100cd88:	28800017 	ldw	r2,0(r5)
 100cd8c:	31bfff04 	addi	r6,r6,-4
 100cd90:	29400104 	addi	r5,r5,4
 100cd94:	38800015 	stw	r2,0(r7)
 100cd98:	39c00104 	addi	r7,r7,4
 100cd9c:	19bffa36 	bltu	r3,r6,100cd88 <memmove+0xc0>
 100cda0:	3811883a 	mov	r8,r7
 100cda4:	003fd906 	br	100cd0c <memmove+0x44>

0100cda8 <_Bfree>:
 100cda8:	28000826 	beq	r5,zero,100cdcc <_Bfree+0x24>
 100cdac:	28800117 	ldw	r2,4(r5)
 100cdb0:	21001317 	ldw	r4,76(r4)
 100cdb4:	1085883a 	add	r2,r2,r2
 100cdb8:	1085883a 	add	r2,r2,r2
 100cdbc:	1105883a 	add	r2,r2,r4
 100cdc0:	10c00017 	ldw	r3,0(r2)
 100cdc4:	28c00015 	stw	r3,0(r5)
 100cdc8:	11400015 	stw	r5,0(r2)
 100cdcc:	f800283a 	ret

0100cdd0 <__hi0bits>:
 100cdd0:	20bfffec 	andhi	r2,r4,65535
 100cdd4:	10001426 	beq	r2,zero,100ce28 <__hi0bits+0x58>
 100cdd8:	0007883a 	mov	r3,zero
 100cddc:	20bfc02c 	andhi	r2,r4,65280
 100cde0:	1000021e 	bne	r2,zero,100cdec <__hi0bits+0x1c>
 100cde4:	2008923a 	slli	r4,r4,8
 100cde8:	18c00204 	addi	r3,r3,8
 100cdec:	20bc002c 	andhi	r2,r4,61440
 100cdf0:	1000021e 	bne	r2,zero,100cdfc <__hi0bits+0x2c>
 100cdf4:	2008913a 	slli	r4,r4,4
 100cdf8:	18c00104 	addi	r3,r3,4
 100cdfc:	20b0002c 	andhi	r2,r4,49152
 100ce00:	1000031e 	bne	r2,zero,100ce10 <__hi0bits+0x40>
 100ce04:	2105883a 	add	r2,r4,r4
 100ce08:	18c00084 	addi	r3,r3,2
 100ce0c:	1089883a 	add	r4,r2,r2
 100ce10:	20000316 	blt	r4,zero,100ce20 <__hi0bits+0x50>
 100ce14:	2090002c 	andhi	r2,r4,16384
 100ce18:	10000626 	beq	r2,zero,100ce34 <__hi0bits+0x64>
 100ce1c:	18c00044 	addi	r3,r3,1
 100ce20:	1805883a 	mov	r2,r3
 100ce24:	f800283a 	ret
 100ce28:	2008943a 	slli	r4,r4,16
 100ce2c:	00c00404 	movi	r3,16
 100ce30:	003fea06 	br	100cddc <__hi0bits+0xc>
 100ce34:	00c00804 	movi	r3,32
 100ce38:	1805883a 	mov	r2,r3
 100ce3c:	f800283a 	ret

0100ce40 <__lo0bits>:
 100ce40:	20c00017 	ldw	r3,0(r4)
 100ce44:	188001cc 	andi	r2,r3,7
 100ce48:	10000a26 	beq	r2,zero,100ce74 <__lo0bits+0x34>
 100ce4c:	1880004c 	andi	r2,r3,1
 100ce50:	1005003a 	cmpeq	r2,r2,zero
 100ce54:	10002126 	beq	r2,zero,100cedc <__lo0bits+0x9c>
 100ce58:	1880008c 	andi	r2,r3,2
 100ce5c:	1000251e 	bne	r2,zero,100cef4 <__lo0bits+0xb4>
 100ce60:	1804d0ba 	srli	r2,r3,2
 100ce64:	01400084 	movi	r5,2
 100ce68:	20800015 	stw	r2,0(r4)
 100ce6c:	2805883a 	mov	r2,r5
 100ce70:	f800283a 	ret
 100ce74:	18bfffcc 	andi	r2,r3,65535
 100ce78:	10001526 	beq	r2,zero,100ced0 <__lo0bits+0x90>
 100ce7c:	000b883a 	mov	r5,zero
 100ce80:	18803fcc 	andi	r2,r3,255
 100ce84:	1000021e 	bne	r2,zero,100ce90 <__lo0bits+0x50>
 100ce88:	1806d23a 	srli	r3,r3,8
 100ce8c:	29400204 	addi	r5,r5,8
 100ce90:	188003cc 	andi	r2,r3,15
 100ce94:	1000021e 	bne	r2,zero,100cea0 <__lo0bits+0x60>
 100ce98:	1806d13a 	srli	r3,r3,4
 100ce9c:	29400104 	addi	r5,r5,4
 100cea0:	188000cc 	andi	r2,r3,3
 100cea4:	1000021e 	bne	r2,zero,100ceb0 <__lo0bits+0x70>
 100cea8:	1806d0ba 	srli	r3,r3,2
 100ceac:	29400084 	addi	r5,r5,2
 100ceb0:	1880004c 	andi	r2,r3,1
 100ceb4:	1000031e 	bne	r2,zero,100cec4 <__lo0bits+0x84>
 100ceb8:	1806d07a 	srli	r3,r3,1
 100cebc:	18000a26 	beq	r3,zero,100cee8 <__lo0bits+0xa8>
 100cec0:	29400044 	addi	r5,r5,1
 100cec4:	2805883a 	mov	r2,r5
 100cec8:	20c00015 	stw	r3,0(r4)
 100cecc:	f800283a 	ret
 100ced0:	1806d43a 	srli	r3,r3,16
 100ced4:	01400404 	movi	r5,16
 100ced8:	003fe906 	br	100ce80 <__lo0bits+0x40>
 100cedc:	000b883a 	mov	r5,zero
 100cee0:	2805883a 	mov	r2,r5
 100cee4:	f800283a 	ret
 100cee8:	01400804 	movi	r5,32
 100ceec:	2805883a 	mov	r2,r5
 100cef0:	f800283a 	ret
 100cef4:	1804d07a 	srli	r2,r3,1
 100cef8:	01400044 	movi	r5,1
 100cefc:	20800015 	stw	r2,0(r4)
 100cf00:	003fda06 	br	100ce6c <__lo0bits+0x2c>

0100cf04 <__mcmp>:
 100cf04:	20800417 	ldw	r2,16(r4)
 100cf08:	28c00417 	ldw	r3,16(r5)
 100cf0c:	10cfc83a 	sub	r7,r2,r3
 100cf10:	38000c1e 	bne	r7,zero,100cf44 <__mcmp+0x40>
 100cf14:	18c5883a 	add	r2,r3,r3
 100cf18:	1085883a 	add	r2,r2,r2
 100cf1c:	10c00504 	addi	r3,r2,20
 100cf20:	21000504 	addi	r4,r4,20
 100cf24:	28cb883a 	add	r5,r5,r3
 100cf28:	2085883a 	add	r2,r4,r2
 100cf2c:	10bfff04 	addi	r2,r2,-4
 100cf30:	297fff04 	addi	r5,r5,-4
 100cf34:	11800017 	ldw	r6,0(r2)
 100cf38:	28c00017 	ldw	r3,0(r5)
 100cf3c:	30c0031e 	bne	r6,r3,100cf4c <__mcmp+0x48>
 100cf40:	20bffa36 	bltu	r4,r2,100cf2c <__mcmp+0x28>
 100cf44:	3805883a 	mov	r2,r7
 100cf48:	f800283a 	ret
 100cf4c:	30c00336 	bltu	r6,r3,100cf5c <__mcmp+0x58>
 100cf50:	01c00044 	movi	r7,1
 100cf54:	3805883a 	mov	r2,r7
 100cf58:	f800283a 	ret
 100cf5c:	01ffffc4 	movi	r7,-1
 100cf60:	003ff806 	br	100cf44 <__mcmp+0x40>

0100cf64 <__ulp>:
 100cf64:	295ffc2c 	andhi	r5,r5,32752
 100cf68:	013f3034 	movhi	r4,64704
 100cf6c:	290b883a 	add	r5,r5,r4
 100cf70:	0145c83a 	sub	r2,zero,r5
 100cf74:	1007d53a 	srai	r3,r2,20
 100cf78:	000d883a 	mov	r6,zero
 100cf7c:	0140040e 	bge	zero,r5,100cf90 <__ulp+0x2c>
 100cf80:	280f883a 	mov	r7,r5
 100cf84:	3807883a 	mov	r3,r7
 100cf88:	3005883a 	mov	r2,r6
 100cf8c:	f800283a 	ret
 100cf90:	008004c4 	movi	r2,19
 100cf94:	193ffb04 	addi	r4,r3,-20
 100cf98:	10c00c0e 	bge	r2,r3,100cfcc <__ulp+0x68>
 100cf9c:	008007c4 	movi	r2,31
 100cfa0:	1107c83a 	sub	r3,r2,r4
 100cfa4:	00800784 	movi	r2,30
 100cfa8:	01400044 	movi	r5,1
 100cfac:	11000216 	blt	r2,r4,100cfb8 <__ulp+0x54>
 100cfb0:	00800044 	movi	r2,1
 100cfb4:	10ca983a 	sll	r5,r2,r3
 100cfb8:	000f883a 	mov	r7,zero
 100cfbc:	280d883a 	mov	r6,r5
 100cfc0:	3807883a 	mov	r3,r7
 100cfc4:	3005883a 	mov	r2,r6
 100cfc8:	f800283a 	ret
 100cfcc:	00800234 	movhi	r2,8
 100cfd0:	10cfd83a 	sra	r7,r2,r3
 100cfd4:	000d883a 	mov	r6,zero
 100cfd8:	3005883a 	mov	r2,r6
 100cfdc:	3807883a 	mov	r3,r7
 100cfe0:	f800283a 	ret

0100cfe4 <__b2d>:
 100cfe4:	20800417 	ldw	r2,16(r4)
 100cfe8:	defff904 	addi	sp,sp,-28
 100cfec:	dd000415 	stw	r20,16(sp)
 100cff0:	1085883a 	add	r2,r2,r2
 100cff4:	25000504 	addi	r20,r4,20
 100cff8:	1085883a 	add	r2,r2,r2
 100cffc:	dc000015 	stw	r16,0(sp)
 100d000:	a0a1883a 	add	r16,r20,r2
 100d004:	dd400515 	stw	r21,20(sp)
 100d008:	857fff17 	ldw	r21,-4(r16)
 100d00c:	dc400115 	stw	r17,4(sp)
 100d010:	dfc00615 	stw	ra,24(sp)
 100d014:	a809883a 	mov	r4,r21
 100d018:	2823883a 	mov	r17,r5
 100d01c:	dcc00315 	stw	r19,12(sp)
 100d020:	dc800215 	stw	r18,8(sp)
 100d024:	100cdd00 	call	100cdd0 <__hi0bits>
 100d028:	100b883a 	mov	r5,r2
 100d02c:	00800804 	movi	r2,32
 100d030:	1145c83a 	sub	r2,r2,r5
 100d034:	88800015 	stw	r2,0(r17)
 100d038:	00800284 	movi	r2,10
 100d03c:	80ffff04 	addi	r3,r16,-4
 100d040:	11401416 	blt	r2,r5,100d094 <__b2d+0xb0>
 100d044:	008002c4 	movi	r2,11
 100d048:	1149c83a 	sub	r4,r2,r5
 100d04c:	a0c02736 	bltu	r20,r3,100d0ec <__b2d+0x108>
 100d050:	000d883a 	mov	r6,zero
 100d054:	28800544 	addi	r2,r5,21
 100d058:	a906d83a 	srl	r3,r21,r4
 100d05c:	a884983a 	sll	r2,r21,r2
 100d060:	1ccffc34 	orhi	r19,r3,16368
 100d064:	11a4b03a 	or	r18,r2,r6
 100d068:	9005883a 	mov	r2,r18
 100d06c:	9807883a 	mov	r3,r19
 100d070:	dfc00617 	ldw	ra,24(sp)
 100d074:	dd400517 	ldw	r21,20(sp)
 100d078:	dd000417 	ldw	r20,16(sp)
 100d07c:	dcc00317 	ldw	r19,12(sp)
 100d080:	dc800217 	ldw	r18,8(sp)
 100d084:	dc400117 	ldw	r17,4(sp)
 100d088:	dc000017 	ldw	r16,0(sp)
 100d08c:	dec00704 	addi	sp,sp,28
 100d090:	f800283a 	ret
 100d094:	a0c00e36 	bltu	r20,r3,100d0d0 <__b2d+0xec>
 100d098:	293ffd44 	addi	r4,r5,-11
 100d09c:	000d883a 	mov	r6,zero
 100d0a0:	20000f26 	beq	r4,zero,100d0e0 <__b2d+0xfc>
 100d0a4:	00800804 	movi	r2,32
 100d0a8:	110bc83a 	sub	r5,r2,r4
 100d0ac:	a0c01236 	bltu	r20,r3,100d0f8 <__b2d+0x114>
 100d0b0:	000f883a 	mov	r7,zero
 100d0b4:	a904983a 	sll	r2,r21,r4
 100d0b8:	3146d83a 	srl	r3,r6,r5
 100d0bc:	3108983a 	sll	r4,r6,r4
 100d0c0:	108ffc34 	orhi	r2,r2,16368
 100d0c4:	18a6b03a 	or	r19,r3,r2
 100d0c8:	3924b03a 	or	r18,r7,r4
 100d0cc:	003fe606 	br	100d068 <__b2d+0x84>
 100d0d0:	293ffd44 	addi	r4,r5,-11
 100d0d4:	81bffe17 	ldw	r6,-8(r16)
 100d0d8:	80fffe04 	addi	r3,r16,-8
 100d0dc:	203ff11e 	bne	r4,zero,100d0a4 <__b2d+0xc0>
 100d0e0:	accffc34 	orhi	r19,r21,16368
 100d0e4:	3025883a 	mov	r18,r6
 100d0e8:	003fdf06 	br	100d068 <__b2d+0x84>
 100d0ec:	18bfff17 	ldw	r2,-4(r3)
 100d0f0:	110cd83a 	srl	r6,r2,r4
 100d0f4:	003fd706 	br	100d054 <__b2d+0x70>
 100d0f8:	18bfff17 	ldw	r2,-4(r3)
 100d0fc:	114ed83a 	srl	r7,r2,r5
 100d100:	003fec06 	br	100d0b4 <__b2d+0xd0>

0100d104 <__ratio>:
 100d104:	defff904 	addi	sp,sp,-28
 100d108:	dc400215 	stw	r17,8(sp)
 100d10c:	2823883a 	mov	r17,r5
 100d110:	d80b883a 	mov	r5,sp
 100d114:	dfc00615 	stw	ra,24(sp)
 100d118:	dd000515 	stw	r20,20(sp)
 100d11c:	dcc00415 	stw	r19,16(sp)
 100d120:	dc800315 	stw	r18,12(sp)
 100d124:	2025883a 	mov	r18,r4
 100d128:	100cfe40 	call	100cfe4 <__b2d>
 100d12c:	8809883a 	mov	r4,r17
 100d130:	d9400104 	addi	r5,sp,4
 100d134:	1027883a 	mov	r19,r2
 100d138:	1829883a 	mov	r20,r3
 100d13c:	100cfe40 	call	100cfe4 <__b2d>
 100d140:	89000417 	ldw	r4,16(r17)
 100d144:	91c00417 	ldw	r7,16(r18)
 100d148:	d9800117 	ldw	r6,4(sp)
 100d14c:	180b883a 	mov	r5,r3
 100d150:	390fc83a 	sub	r7,r7,r4
 100d154:	1009883a 	mov	r4,r2
 100d158:	d8800017 	ldw	r2,0(sp)
 100d15c:	380e917a 	slli	r7,r7,5
 100d160:	2011883a 	mov	r8,r4
 100d164:	1185c83a 	sub	r2,r2,r6
 100d168:	11c5883a 	add	r2,r2,r7
 100d16c:	1006953a 	slli	r3,r2,20
 100d170:	2813883a 	mov	r9,r5
 100d174:	00800d0e 	bge	zero,r2,100d1ac <__ratio+0xa8>
 100d178:	1d29883a 	add	r20,r3,r20
 100d17c:	a00b883a 	mov	r5,r20
 100d180:	480f883a 	mov	r7,r9
 100d184:	9809883a 	mov	r4,r19
 100d188:	400d883a 	mov	r6,r8
 100d18c:	1014a940 	call	1014a94 <__divdf3>
 100d190:	dfc00617 	ldw	ra,24(sp)
 100d194:	dd000517 	ldw	r20,20(sp)
 100d198:	dcc00417 	ldw	r19,16(sp)
 100d19c:	dc800317 	ldw	r18,12(sp)
 100d1a0:	dc400217 	ldw	r17,8(sp)
 100d1a4:	dec00704 	addi	sp,sp,28
 100d1a8:	f800283a 	ret
 100d1ac:	28d3c83a 	sub	r9,r5,r3
 100d1b0:	003ff206 	br	100d17c <__ratio+0x78>

0100d1b4 <_mprec_log10>:
 100d1b4:	defffe04 	addi	sp,sp,-8
 100d1b8:	008005c4 	movi	r2,23
 100d1bc:	dc000015 	stw	r16,0(sp)
 100d1c0:	dfc00115 	stw	ra,4(sp)
 100d1c4:	2021883a 	mov	r16,r4
 100d1c8:	11000c16 	blt	r2,r4,100d1fc <_mprec_log10+0x48>
 100d1cc:	200490fa 	slli	r2,r4,3
 100d1d0:	00c040b4 	movhi	r3,258
 100d1d4:	18e9a604 	addi	r3,r3,-22888
 100d1d8:	10c5883a 	add	r2,r2,r3
 100d1dc:	12400117 	ldw	r9,4(r2)
 100d1e0:	12000017 	ldw	r8,0(r2)
 100d1e4:	4807883a 	mov	r3,r9
 100d1e8:	4005883a 	mov	r2,r8
 100d1ec:	dfc00117 	ldw	ra,4(sp)
 100d1f0:	dc000017 	ldw	r16,0(sp)
 100d1f4:	dec00204 	addi	sp,sp,8
 100d1f8:	f800283a 	ret
 100d1fc:	0011883a 	mov	r8,zero
 100d200:	024ffc34 	movhi	r9,16368
 100d204:	0005883a 	mov	r2,zero
 100d208:	00d00934 	movhi	r3,16420
 100d20c:	480b883a 	mov	r5,r9
 100d210:	4009883a 	mov	r4,r8
 100d214:	180f883a 	mov	r7,r3
 100d218:	100d883a 	mov	r6,r2
 100d21c:	10146d00 	call	10146d0 <__muldf3>
 100d220:	843fffc4 	addi	r16,r16,-1
 100d224:	1011883a 	mov	r8,r2
 100d228:	1813883a 	mov	r9,r3
 100d22c:	803ff51e 	bne	r16,zero,100d204 <_mprec_log10+0x50>
 100d230:	4005883a 	mov	r2,r8
 100d234:	4807883a 	mov	r3,r9
 100d238:	dfc00117 	ldw	ra,4(sp)
 100d23c:	dc000017 	ldw	r16,0(sp)
 100d240:	dec00204 	addi	sp,sp,8
 100d244:	f800283a 	ret

0100d248 <__copybits>:
 100d248:	297fffc4 	addi	r5,r5,-1
 100d24c:	30800417 	ldw	r2,16(r6)
 100d250:	280bd17a 	srai	r5,r5,5
 100d254:	31800504 	addi	r6,r6,20
 100d258:	1085883a 	add	r2,r2,r2
 100d25c:	294b883a 	add	r5,r5,r5
 100d260:	294b883a 	add	r5,r5,r5
 100d264:	1085883a 	add	r2,r2,r2
 100d268:	290b883a 	add	r5,r5,r4
 100d26c:	3087883a 	add	r3,r6,r2
 100d270:	29400104 	addi	r5,r5,4
 100d274:	30c0052e 	bgeu	r6,r3,100d28c <__copybits+0x44>
 100d278:	30800017 	ldw	r2,0(r6)
 100d27c:	31800104 	addi	r6,r6,4
 100d280:	20800015 	stw	r2,0(r4)
 100d284:	21000104 	addi	r4,r4,4
 100d288:	30fffb36 	bltu	r6,r3,100d278 <__copybits+0x30>
 100d28c:	2140032e 	bgeu	r4,r5,100d29c <__copybits+0x54>
 100d290:	20000015 	stw	zero,0(r4)
 100d294:	21000104 	addi	r4,r4,4
 100d298:	217ffd36 	bltu	r4,r5,100d290 <__copybits+0x48>
 100d29c:	f800283a 	ret

0100d2a0 <__any_on>:
 100d2a0:	20800417 	ldw	r2,16(r4)
 100d2a4:	2807d17a 	srai	r3,r5,5
 100d2a8:	21000504 	addi	r4,r4,20
 100d2ac:	10c00d0e 	bge	r2,r3,100d2e4 <__any_on+0x44>
 100d2b0:	1085883a 	add	r2,r2,r2
 100d2b4:	1085883a 	add	r2,r2,r2
 100d2b8:	208d883a 	add	r6,r4,r2
 100d2bc:	2180182e 	bgeu	r4,r6,100d320 <__any_on+0x80>
 100d2c0:	30bfff17 	ldw	r2,-4(r6)
 100d2c4:	30ffff04 	addi	r3,r6,-4
 100d2c8:	1000041e 	bne	r2,zero,100d2dc <__any_on+0x3c>
 100d2cc:	20c0142e 	bgeu	r4,r3,100d320 <__any_on+0x80>
 100d2d0:	18ffff04 	addi	r3,r3,-4
 100d2d4:	18800017 	ldw	r2,0(r3)
 100d2d8:	103ffc26 	beq	r2,zero,100d2cc <__any_on+0x2c>
 100d2dc:	00800044 	movi	r2,1
 100d2e0:	f800283a 	ret
 100d2e4:	18800a0e 	bge	r3,r2,100d310 <__any_on+0x70>
 100d2e8:	294007cc 	andi	r5,r5,31
 100d2ec:	28000826 	beq	r5,zero,100d310 <__any_on+0x70>
 100d2f0:	18c5883a 	add	r2,r3,r3
 100d2f4:	1085883a 	add	r2,r2,r2
 100d2f8:	208d883a 	add	r6,r4,r2
 100d2fc:	30c00017 	ldw	r3,0(r6)
 100d300:	1944d83a 	srl	r2,r3,r5
 100d304:	1144983a 	sll	r2,r2,r5
 100d308:	18bff41e 	bne	r3,r2,100d2dc <__any_on+0x3c>
 100d30c:	003feb06 	br	100d2bc <__any_on+0x1c>
 100d310:	18c5883a 	add	r2,r3,r3
 100d314:	1085883a 	add	r2,r2,r2
 100d318:	208d883a 	add	r6,r4,r2
 100d31c:	003fe706 	br	100d2bc <__any_on+0x1c>
 100d320:	0005883a 	mov	r2,zero
 100d324:	f800283a 	ret

0100d328 <_Balloc>:
 100d328:	20c01317 	ldw	r3,76(r4)
 100d32c:	defffb04 	addi	sp,sp,-20
 100d330:	dcc00315 	stw	r19,12(sp)
 100d334:	dc800215 	stw	r18,8(sp)
 100d338:	dfc00415 	stw	ra,16(sp)
 100d33c:	2825883a 	mov	r18,r5
 100d340:	dc400115 	stw	r17,4(sp)
 100d344:	dc000015 	stw	r16,0(sp)
 100d348:	2027883a 	mov	r19,r4
 100d34c:	01800404 	movi	r6,16
 100d350:	01400104 	movi	r5,4
 100d354:	18001726 	beq	r3,zero,100d3b4 <_Balloc+0x8c>
 100d358:	01400044 	movi	r5,1
 100d35c:	9485883a 	add	r2,r18,r18
 100d360:	2ca2983a 	sll	r17,r5,r18
 100d364:	1085883a 	add	r2,r2,r2
 100d368:	10c7883a 	add	r3,r2,r3
 100d36c:	1c000017 	ldw	r16,0(r3)
 100d370:	8c4d883a 	add	r6,r17,r17
 100d374:	318d883a 	add	r6,r6,r6
 100d378:	9809883a 	mov	r4,r19
 100d37c:	31800504 	addi	r6,r6,20
 100d380:	80001226 	beq	r16,zero,100d3cc <_Balloc+0xa4>
 100d384:	80800017 	ldw	r2,0(r16)
 100d388:	18800015 	stw	r2,0(r3)
 100d38c:	80000415 	stw	zero,16(r16)
 100d390:	80000315 	stw	zero,12(r16)
 100d394:	8005883a 	mov	r2,r16
 100d398:	dfc00417 	ldw	ra,16(sp)
 100d39c:	dcc00317 	ldw	r19,12(sp)
 100d3a0:	dc800217 	ldw	r18,8(sp)
 100d3a4:	dc400117 	ldw	r17,4(sp)
 100d3a8:	dc000017 	ldw	r16,0(sp)
 100d3ac:	dec00504 	addi	sp,sp,20
 100d3b0:	f800283a 	ret
 100d3b4:	10057500 	call	1005750 <_calloc_r>
 100d3b8:	1007883a 	mov	r3,r2
 100d3bc:	0021883a 	mov	r16,zero
 100d3c0:	98801315 	stw	r2,76(r19)
 100d3c4:	103fe41e 	bne	r2,zero,100d358 <_Balloc+0x30>
 100d3c8:	003ff206 	br	100d394 <_Balloc+0x6c>
 100d3cc:	10057500 	call	1005750 <_calloc_r>
 100d3d0:	103ff026 	beq	r2,zero,100d394 <_Balloc+0x6c>
 100d3d4:	1021883a 	mov	r16,r2
 100d3d8:	14800115 	stw	r18,4(r2)
 100d3dc:	14400215 	stw	r17,8(r2)
 100d3e0:	003fea06 	br	100d38c <_Balloc+0x64>

0100d3e4 <__d2b>:
 100d3e4:	defff504 	addi	sp,sp,-44
 100d3e8:	dcc00515 	stw	r19,20(sp)
 100d3ec:	04c00044 	movi	r19,1
 100d3f0:	dc000215 	stw	r16,8(sp)
 100d3f4:	2821883a 	mov	r16,r5
 100d3f8:	980b883a 	mov	r5,r19
 100d3fc:	ddc00915 	stw	r23,36(sp)
 100d400:	dd800815 	stw	r22,32(sp)
 100d404:	dd400715 	stw	r21,28(sp)
 100d408:	dd000615 	stw	r20,24(sp)
 100d40c:	dc800415 	stw	r18,16(sp)
 100d410:	dc400315 	stw	r17,12(sp)
 100d414:	dfc00a15 	stw	ra,40(sp)
 100d418:	3023883a 	mov	r17,r6
 100d41c:	382d883a 	mov	r22,r7
 100d420:	ddc00b17 	ldw	r23,44(sp)
 100d424:	100d3280 	call	100d328 <_Balloc>
 100d428:	1025883a 	mov	r18,r2
 100d42c:	00a00034 	movhi	r2,32768
 100d430:	10bfffc4 	addi	r2,r2,-1
 100d434:	8888703a 	and	r4,r17,r2
 100d438:	202ad53a 	srli	r21,r4,20
 100d43c:	00800434 	movhi	r2,16
 100d440:	10bfffc4 	addi	r2,r2,-1
 100d444:	8886703a 	and	r3,r17,r2
 100d448:	a829003a 	cmpeq	r20,r21,zero
 100d44c:	800b883a 	mov	r5,r16
 100d450:	d8c00115 	stw	r3,4(sp)
 100d454:	94000504 	addi	r16,r18,20
 100d458:	a000021e 	bne	r20,zero,100d464 <__d2b+0x80>
 100d45c:	18c00434 	orhi	r3,r3,16
 100d460:	d8c00115 	stw	r3,4(sp)
 100d464:	28002726 	beq	r5,zero,100d504 <__d2b+0x120>
 100d468:	d809883a 	mov	r4,sp
 100d46c:	d9400015 	stw	r5,0(sp)
 100d470:	100ce400 	call	100ce40 <__lo0bits>
 100d474:	100d883a 	mov	r6,r2
 100d478:	10003526 	beq	r2,zero,100d550 <__d2b+0x16c>
 100d47c:	d8c00117 	ldw	r3,4(sp)
 100d480:	00800804 	movi	r2,32
 100d484:	1185c83a 	sub	r2,r2,r6
 100d488:	d9000017 	ldw	r4,0(sp)
 100d48c:	1886983a 	sll	r3,r3,r2
 100d490:	1906b03a 	or	r3,r3,r4
 100d494:	90c00515 	stw	r3,20(r18)
 100d498:	d8c00117 	ldw	r3,4(sp)
 100d49c:	1986d83a 	srl	r3,r3,r6
 100d4a0:	d8c00115 	stw	r3,4(sp)
 100d4a4:	180b003a 	cmpeq	r5,r3,zero
 100d4a8:	00800084 	movi	r2,2
 100d4ac:	114bc83a 	sub	r5,r2,r5
 100d4b0:	80c00115 	stw	r3,4(r16)
 100d4b4:	91400415 	stw	r5,16(r18)
 100d4b8:	a0001a1e 	bne	r20,zero,100d524 <__d2b+0x140>
 100d4bc:	3545883a 	add	r2,r6,r21
 100d4c0:	10bef344 	addi	r2,r2,-1075
 100d4c4:	00c00d44 	movi	r3,53
 100d4c8:	b0800015 	stw	r2,0(r22)
 100d4cc:	1987c83a 	sub	r3,r3,r6
 100d4d0:	b8c00015 	stw	r3,0(r23)
 100d4d4:	9005883a 	mov	r2,r18
 100d4d8:	dfc00a17 	ldw	ra,40(sp)
 100d4dc:	ddc00917 	ldw	r23,36(sp)
 100d4e0:	dd800817 	ldw	r22,32(sp)
 100d4e4:	dd400717 	ldw	r21,28(sp)
 100d4e8:	dd000617 	ldw	r20,24(sp)
 100d4ec:	dcc00517 	ldw	r19,20(sp)
 100d4f0:	dc800417 	ldw	r18,16(sp)
 100d4f4:	dc400317 	ldw	r17,12(sp)
 100d4f8:	dc000217 	ldw	r16,8(sp)
 100d4fc:	dec00b04 	addi	sp,sp,44
 100d500:	f800283a 	ret
 100d504:	d9000104 	addi	r4,sp,4
 100d508:	100ce400 	call	100ce40 <__lo0bits>
 100d50c:	11800804 	addi	r6,r2,32
 100d510:	d8800117 	ldw	r2,4(sp)
 100d514:	94c00415 	stw	r19,16(r18)
 100d518:	980b883a 	mov	r5,r19
 100d51c:	90800515 	stw	r2,20(r18)
 100d520:	a03fe626 	beq	r20,zero,100d4bc <__d2b+0xd8>
 100d524:	2945883a 	add	r2,r5,r5
 100d528:	1085883a 	add	r2,r2,r2
 100d52c:	1405883a 	add	r2,r2,r16
 100d530:	113fff17 	ldw	r4,-4(r2)
 100d534:	30fef384 	addi	r3,r6,-1074
 100d538:	2820917a 	slli	r16,r5,5
 100d53c:	b0c00015 	stw	r3,0(r22)
 100d540:	100cdd00 	call	100cdd0 <__hi0bits>
 100d544:	80a1c83a 	sub	r16,r16,r2
 100d548:	bc000015 	stw	r16,0(r23)
 100d54c:	003fe106 	br	100d4d4 <__d2b+0xf0>
 100d550:	d8800017 	ldw	r2,0(sp)
 100d554:	90800515 	stw	r2,20(r18)
 100d558:	d8c00117 	ldw	r3,4(sp)
 100d55c:	003fd106 	br	100d4a4 <__d2b+0xc0>

0100d560 <__mdiff>:
 100d560:	defffb04 	addi	sp,sp,-20
 100d564:	dc000015 	stw	r16,0(sp)
 100d568:	2821883a 	mov	r16,r5
 100d56c:	dc800215 	stw	r18,8(sp)
 100d570:	300b883a 	mov	r5,r6
 100d574:	2025883a 	mov	r18,r4
 100d578:	8009883a 	mov	r4,r16
 100d57c:	dc400115 	stw	r17,4(sp)
 100d580:	dfc00415 	stw	ra,16(sp)
 100d584:	dcc00315 	stw	r19,12(sp)
 100d588:	3023883a 	mov	r17,r6
 100d58c:	100cf040 	call	100cf04 <__mcmp>
 100d590:	10004226 	beq	r2,zero,100d69c <__mdiff+0x13c>
 100d594:	10005016 	blt	r2,zero,100d6d8 <__mdiff+0x178>
 100d598:	0027883a 	mov	r19,zero
 100d59c:	81400117 	ldw	r5,4(r16)
 100d5a0:	9009883a 	mov	r4,r18
 100d5a4:	100d3280 	call	100d328 <_Balloc>
 100d5a8:	1019883a 	mov	r12,r2
 100d5ac:	82800417 	ldw	r10,16(r16)
 100d5b0:	88800417 	ldw	r2,16(r17)
 100d5b4:	81800504 	addi	r6,r16,20
 100d5b8:	5287883a 	add	r3,r10,r10
 100d5bc:	1085883a 	add	r2,r2,r2
 100d5c0:	18c7883a 	add	r3,r3,r3
 100d5c4:	1085883a 	add	r2,r2,r2
 100d5c8:	8a000504 	addi	r8,r17,20
 100d5cc:	64c00315 	stw	r19,12(r12)
 100d5d0:	30db883a 	add	r13,r6,r3
 100d5d4:	4097883a 	add	r11,r8,r2
 100d5d8:	61c00504 	addi	r7,r12,20
 100d5dc:	0013883a 	mov	r9,zero
 100d5e0:	31000017 	ldw	r4,0(r6)
 100d5e4:	41400017 	ldw	r5,0(r8)
 100d5e8:	42000104 	addi	r8,r8,4
 100d5ec:	20bfffcc 	andi	r2,r4,65535
 100d5f0:	28ffffcc 	andi	r3,r5,65535
 100d5f4:	10c5c83a 	sub	r2,r2,r3
 100d5f8:	1245883a 	add	r2,r2,r9
 100d5fc:	2008d43a 	srli	r4,r4,16
 100d600:	280ad43a 	srli	r5,r5,16
 100d604:	1007d43a 	srai	r3,r2,16
 100d608:	3880000d 	sth	r2,0(r7)
 100d60c:	2149c83a 	sub	r4,r4,r5
 100d610:	20c9883a 	add	r4,r4,r3
 100d614:	3900008d 	sth	r4,2(r7)
 100d618:	31800104 	addi	r6,r6,4
 100d61c:	39c00104 	addi	r7,r7,4
 100d620:	2013d43a 	srai	r9,r4,16
 100d624:	42ffee36 	bltu	r8,r11,100d5e0 <__mdiff+0x80>
 100d628:	33400c2e 	bgeu	r6,r13,100d65c <__mdiff+0xfc>
 100d62c:	30800017 	ldw	r2,0(r6)
 100d630:	31800104 	addi	r6,r6,4
 100d634:	10ffffcc 	andi	r3,r2,65535
 100d638:	1a47883a 	add	r3,r3,r9
 100d63c:	1004d43a 	srli	r2,r2,16
 100d640:	1809d43a 	srai	r4,r3,16
 100d644:	38c0000d 	sth	r3,0(r7)
 100d648:	1105883a 	add	r2,r2,r4
 100d64c:	3880008d 	sth	r2,2(r7)
 100d650:	1013d43a 	srai	r9,r2,16
 100d654:	39c00104 	addi	r7,r7,4
 100d658:	337ff436 	bltu	r6,r13,100d62c <__mdiff+0xcc>
 100d65c:	38bfff17 	ldw	r2,-4(r7)
 100d660:	38ffff04 	addi	r3,r7,-4
 100d664:	1000041e 	bne	r2,zero,100d678 <__mdiff+0x118>
 100d668:	18ffff04 	addi	r3,r3,-4
 100d66c:	18800017 	ldw	r2,0(r3)
 100d670:	52bfffc4 	addi	r10,r10,-1
 100d674:	103ffc26 	beq	r2,zero,100d668 <__mdiff+0x108>
 100d678:	6005883a 	mov	r2,r12
 100d67c:	62800415 	stw	r10,16(r12)
 100d680:	dfc00417 	ldw	ra,16(sp)
 100d684:	dcc00317 	ldw	r19,12(sp)
 100d688:	dc800217 	ldw	r18,8(sp)
 100d68c:	dc400117 	ldw	r17,4(sp)
 100d690:	dc000017 	ldw	r16,0(sp)
 100d694:	dec00504 	addi	sp,sp,20
 100d698:	f800283a 	ret
 100d69c:	9009883a 	mov	r4,r18
 100d6a0:	000b883a 	mov	r5,zero
 100d6a4:	100d3280 	call	100d328 <_Balloc>
 100d6a8:	1019883a 	mov	r12,r2
 100d6ac:	00800044 	movi	r2,1
 100d6b0:	60800415 	stw	r2,16(r12)
 100d6b4:	6005883a 	mov	r2,r12
 100d6b8:	60000515 	stw	zero,20(r12)
 100d6bc:	dfc00417 	ldw	ra,16(sp)
 100d6c0:	dcc00317 	ldw	r19,12(sp)
 100d6c4:	dc800217 	ldw	r18,8(sp)
 100d6c8:	dc400117 	ldw	r17,4(sp)
 100d6cc:	dc000017 	ldw	r16,0(sp)
 100d6d0:	dec00504 	addi	sp,sp,20
 100d6d4:	f800283a 	ret
 100d6d8:	880d883a 	mov	r6,r17
 100d6dc:	04c00044 	movi	r19,1
 100d6e0:	8023883a 	mov	r17,r16
 100d6e4:	3021883a 	mov	r16,r6
 100d6e8:	003fac06 	br	100d59c <__mdiff+0x3c>

0100d6ec <__lshift>:
 100d6ec:	defff904 	addi	sp,sp,-28
 100d6f0:	28800417 	ldw	r2,16(r5)
 100d6f4:	dc000015 	stw	r16,0(sp)
 100d6f8:	3021d17a 	srai	r16,r6,5
 100d6fc:	28c00217 	ldw	r3,8(r5)
 100d700:	10800044 	addi	r2,r2,1
 100d704:	dc400115 	stw	r17,4(sp)
 100d708:	80a3883a 	add	r17,r16,r2
 100d70c:	dd400515 	stw	r21,20(sp)
 100d710:	dd000415 	stw	r20,16(sp)
 100d714:	dc800215 	stw	r18,8(sp)
 100d718:	dfc00615 	stw	ra,24(sp)
 100d71c:	2825883a 	mov	r18,r5
 100d720:	dcc00315 	stw	r19,12(sp)
 100d724:	3029883a 	mov	r20,r6
 100d728:	202b883a 	mov	r21,r4
 100d72c:	29400117 	ldw	r5,4(r5)
 100d730:	1c40030e 	bge	r3,r17,100d740 <__lshift+0x54>
 100d734:	18c7883a 	add	r3,r3,r3
 100d738:	29400044 	addi	r5,r5,1
 100d73c:	1c7ffd16 	blt	r3,r17,100d734 <__lshift+0x48>
 100d740:	a809883a 	mov	r4,r21
 100d744:	100d3280 	call	100d328 <_Balloc>
 100d748:	1027883a 	mov	r19,r2
 100d74c:	11400504 	addi	r5,r2,20
 100d750:	0400090e 	bge	zero,r16,100d778 <__lshift+0x8c>
 100d754:	2805883a 	mov	r2,r5
 100d758:	0007883a 	mov	r3,zero
 100d75c:	18c00044 	addi	r3,r3,1
 100d760:	10000015 	stw	zero,0(r2)
 100d764:	10800104 	addi	r2,r2,4
 100d768:	80fffc1e 	bne	r16,r3,100d75c <__lshift+0x70>
 100d76c:	8405883a 	add	r2,r16,r16
 100d770:	1085883a 	add	r2,r2,r2
 100d774:	288b883a 	add	r5,r5,r2
 100d778:	90800417 	ldw	r2,16(r18)
 100d77c:	91000504 	addi	r4,r18,20
 100d780:	a18007cc 	andi	r6,r20,31
 100d784:	1085883a 	add	r2,r2,r2
 100d788:	1085883a 	add	r2,r2,r2
 100d78c:	208f883a 	add	r7,r4,r2
 100d790:	30001e26 	beq	r6,zero,100d80c <__lshift+0x120>
 100d794:	00800804 	movi	r2,32
 100d798:	1191c83a 	sub	r8,r2,r6
 100d79c:	0007883a 	mov	r3,zero
 100d7a0:	20800017 	ldw	r2,0(r4)
 100d7a4:	1184983a 	sll	r2,r2,r6
 100d7a8:	1884b03a 	or	r2,r3,r2
 100d7ac:	28800015 	stw	r2,0(r5)
 100d7b0:	20c00017 	ldw	r3,0(r4)
 100d7b4:	21000104 	addi	r4,r4,4
 100d7b8:	29400104 	addi	r5,r5,4
 100d7bc:	1a06d83a 	srl	r3,r3,r8
 100d7c0:	21fff736 	bltu	r4,r7,100d7a0 <__lshift+0xb4>
 100d7c4:	28c00015 	stw	r3,0(r5)
 100d7c8:	18000126 	beq	r3,zero,100d7d0 <__lshift+0xe4>
 100d7cc:	8c400044 	addi	r17,r17,1
 100d7d0:	88bfffc4 	addi	r2,r17,-1
 100d7d4:	98800415 	stw	r2,16(r19)
 100d7d8:	a809883a 	mov	r4,r21
 100d7dc:	900b883a 	mov	r5,r18
 100d7e0:	100cda80 	call	100cda8 <_Bfree>
 100d7e4:	9805883a 	mov	r2,r19
 100d7e8:	dfc00617 	ldw	ra,24(sp)
 100d7ec:	dd400517 	ldw	r21,20(sp)
 100d7f0:	dd000417 	ldw	r20,16(sp)
 100d7f4:	dcc00317 	ldw	r19,12(sp)
 100d7f8:	dc800217 	ldw	r18,8(sp)
 100d7fc:	dc400117 	ldw	r17,4(sp)
 100d800:	dc000017 	ldw	r16,0(sp)
 100d804:	dec00704 	addi	sp,sp,28
 100d808:	f800283a 	ret
 100d80c:	20800017 	ldw	r2,0(r4)
 100d810:	21000104 	addi	r4,r4,4
 100d814:	28800015 	stw	r2,0(r5)
 100d818:	29400104 	addi	r5,r5,4
 100d81c:	21ffec2e 	bgeu	r4,r7,100d7d0 <__lshift+0xe4>
 100d820:	20800017 	ldw	r2,0(r4)
 100d824:	21000104 	addi	r4,r4,4
 100d828:	28800015 	stw	r2,0(r5)
 100d82c:	29400104 	addi	r5,r5,4
 100d830:	21fff636 	bltu	r4,r7,100d80c <__lshift+0x120>
 100d834:	003fe606 	br	100d7d0 <__lshift+0xe4>

0100d838 <__multiply>:
 100d838:	defff904 	addi	sp,sp,-28
 100d83c:	dcc00315 	stw	r19,12(sp)
 100d840:	dc800215 	stw	r18,8(sp)
 100d844:	2cc00417 	ldw	r19,16(r5)
 100d848:	34800417 	ldw	r18,16(r6)
 100d84c:	dd000415 	stw	r20,16(sp)
 100d850:	dc400115 	stw	r17,4(sp)
 100d854:	dfc00615 	stw	ra,24(sp)
 100d858:	dd400515 	stw	r21,20(sp)
 100d85c:	dc000015 	stw	r16,0(sp)
 100d860:	2823883a 	mov	r17,r5
 100d864:	3029883a 	mov	r20,r6
 100d868:	9c80040e 	bge	r19,r18,100d87c <__multiply+0x44>
 100d86c:	9027883a 	mov	r19,r18
 100d870:	2c800417 	ldw	r18,16(r5)
 100d874:	2829883a 	mov	r20,r5
 100d878:	3023883a 	mov	r17,r6
 100d87c:	88800217 	ldw	r2,8(r17)
 100d880:	9ca1883a 	add	r16,r19,r18
 100d884:	89400117 	ldw	r5,4(r17)
 100d888:	1400010e 	bge	r2,r16,100d890 <__multiply+0x58>
 100d88c:	29400044 	addi	r5,r5,1
 100d890:	100d3280 	call	100d328 <_Balloc>
 100d894:	102b883a 	mov	r21,r2
 100d898:	8405883a 	add	r2,r16,r16
 100d89c:	1085883a 	add	r2,r2,r2
 100d8a0:	a9000504 	addi	r4,r21,20
 100d8a4:	209d883a 	add	r14,r4,r2
 100d8a8:	2380042e 	bgeu	r4,r14,100d8bc <__multiply+0x84>
 100d8ac:	2005883a 	mov	r2,r4
 100d8b0:	10000015 	stw	zero,0(r2)
 100d8b4:	10800104 	addi	r2,r2,4
 100d8b8:	13bffd36 	bltu	r2,r14,100d8b0 <__multiply+0x78>
 100d8bc:	9485883a 	add	r2,r18,r18
 100d8c0:	9cc7883a 	add	r3,r19,r19
 100d8c4:	a1800504 	addi	r6,r20,20
 100d8c8:	1085883a 	add	r2,r2,r2
 100d8cc:	8b400504 	addi	r13,r17,20
 100d8d0:	18c7883a 	add	r3,r3,r3
 100d8d4:	309f883a 	add	r15,r6,r2
 100d8d8:	68d7883a 	add	r11,r13,r3
 100d8dc:	33c03b2e 	bgeu	r6,r15,100d9cc <__multiply+0x194>
 100d8e0:	2019883a 	mov	r12,r4
 100d8e4:	30800017 	ldw	r2,0(r6)
 100d8e8:	127fffcc 	andi	r9,r2,65535
 100d8ec:	48001826 	beq	r9,zero,100d950 <__multiply+0x118>
 100d8f0:	6811883a 	mov	r8,r13
 100d8f4:	600f883a 	mov	r7,r12
 100d8f8:	0015883a 	mov	r10,zero
 100d8fc:	40c00017 	ldw	r3,0(r8)
 100d900:	39400017 	ldw	r5,0(r7)
 100d904:	42000104 	addi	r8,r8,4
 100d908:	193fffcc 	andi	r4,r3,65535
 100d90c:	4909383a 	mul	r4,r9,r4
 100d910:	1806d43a 	srli	r3,r3,16
 100d914:	28bfffcc 	andi	r2,r5,65535
 100d918:	5085883a 	add	r2,r10,r2
 100d91c:	2089883a 	add	r4,r4,r2
 100d920:	48c7383a 	mul	r3,r9,r3
 100d924:	280ad43a 	srli	r5,r5,16
 100d928:	2004d43a 	srli	r2,r4,16
 100d92c:	3900000d 	sth	r4,0(r7)
 100d930:	1947883a 	add	r3,r3,r5
 100d934:	10c5883a 	add	r2,r2,r3
 100d938:	3880008d 	sth	r2,2(r7)
 100d93c:	1014d43a 	srli	r10,r2,16
 100d940:	39c00104 	addi	r7,r7,4
 100d944:	42ffed36 	bltu	r8,r11,100d8fc <__multiply+0xc4>
 100d948:	3a800015 	stw	r10,0(r7)
 100d94c:	30800017 	ldw	r2,0(r6)
 100d950:	1012d43a 	srli	r9,r2,16
 100d954:	48001926 	beq	r9,zero,100d9bc <__multiply+0x184>
 100d958:	60800017 	ldw	r2,0(r12)
 100d95c:	6811883a 	mov	r8,r13
 100d960:	600f883a 	mov	r7,r12
 100d964:	0015883a 	mov	r10,zero
 100d968:	100b883a 	mov	r5,r2
 100d96c:	41000017 	ldw	r4,0(r8)
 100d970:	2806d43a 	srli	r3,r5,16
 100d974:	3880000d 	sth	r2,0(r7)
 100d978:	20bfffcc 	andi	r2,r4,65535
 100d97c:	4885383a 	mul	r2,r9,r2
 100d980:	50c7883a 	add	r3,r10,r3
 100d984:	2008d43a 	srli	r4,r4,16
 100d988:	10c5883a 	add	r2,r2,r3
 100d98c:	3880008d 	sth	r2,2(r7)
 100d990:	39c00104 	addi	r7,r7,4
 100d994:	39400017 	ldw	r5,0(r7)
 100d998:	4909383a 	mul	r4,r9,r4
 100d99c:	1004d43a 	srli	r2,r2,16
 100d9a0:	28ffffcc 	andi	r3,r5,65535
 100d9a4:	20c9883a 	add	r4,r4,r3
 100d9a8:	1105883a 	add	r2,r2,r4
 100d9ac:	42000104 	addi	r8,r8,4
 100d9b0:	1014d43a 	srli	r10,r2,16
 100d9b4:	42ffed36 	bltu	r8,r11,100d96c <__multiply+0x134>
 100d9b8:	38800015 	stw	r2,0(r7)
 100d9bc:	31800104 	addi	r6,r6,4
 100d9c0:	33c0022e 	bgeu	r6,r15,100d9cc <__multiply+0x194>
 100d9c4:	63000104 	addi	r12,r12,4
 100d9c8:	003fc606 	br	100d8e4 <__multiply+0xac>
 100d9cc:	0400090e 	bge	zero,r16,100d9f4 <__multiply+0x1bc>
 100d9d0:	70bfff17 	ldw	r2,-4(r14)
 100d9d4:	70ffff04 	addi	r3,r14,-4
 100d9d8:	10000326 	beq	r2,zero,100d9e8 <__multiply+0x1b0>
 100d9dc:	00000506 	br	100d9f4 <__multiply+0x1bc>
 100d9e0:	18800017 	ldw	r2,0(r3)
 100d9e4:	1000031e 	bne	r2,zero,100d9f4 <__multiply+0x1bc>
 100d9e8:	843fffc4 	addi	r16,r16,-1
 100d9ec:	18ffff04 	addi	r3,r3,-4
 100d9f0:	803ffb1e 	bne	r16,zero,100d9e0 <__multiply+0x1a8>
 100d9f4:	a805883a 	mov	r2,r21
 100d9f8:	ac000415 	stw	r16,16(r21)
 100d9fc:	dfc00617 	ldw	ra,24(sp)
 100da00:	dd400517 	ldw	r21,20(sp)
 100da04:	dd000417 	ldw	r20,16(sp)
 100da08:	dcc00317 	ldw	r19,12(sp)
 100da0c:	dc800217 	ldw	r18,8(sp)
 100da10:	dc400117 	ldw	r17,4(sp)
 100da14:	dc000017 	ldw	r16,0(sp)
 100da18:	dec00704 	addi	sp,sp,28
 100da1c:	f800283a 	ret

0100da20 <__i2b>:
 100da20:	defffd04 	addi	sp,sp,-12
 100da24:	dc000015 	stw	r16,0(sp)
 100da28:	04000044 	movi	r16,1
 100da2c:	dc800115 	stw	r18,4(sp)
 100da30:	2825883a 	mov	r18,r5
 100da34:	800b883a 	mov	r5,r16
 100da38:	dfc00215 	stw	ra,8(sp)
 100da3c:	100d3280 	call	100d328 <_Balloc>
 100da40:	14000415 	stw	r16,16(r2)
 100da44:	14800515 	stw	r18,20(r2)
 100da48:	dfc00217 	ldw	ra,8(sp)
 100da4c:	dc800117 	ldw	r18,4(sp)
 100da50:	dc000017 	ldw	r16,0(sp)
 100da54:	dec00304 	addi	sp,sp,12
 100da58:	f800283a 	ret

0100da5c <__multadd>:
 100da5c:	defffa04 	addi	sp,sp,-24
 100da60:	dc800215 	stw	r18,8(sp)
 100da64:	2c800417 	ldw	r18,16(r5)
 100da68:	dd000415 	stw	r20,16(sp)
 100da6c:	dcc00315 	stw	r19,12(sp)
 100da70:	dc000015 	stw	r16,0(sp)
 100da74:	dfc00515 	stw	ra,20(sp)
 100da78:	3821883a 	mov	r16,r7
 100da7c:	dc400115 	stw	r17,4(sp)
 100da80:	2827883a 	mov	r19,r5
 100da84:	2029883a 	mov	r20,r4
 100da88:	2a000504 	addi	r8,r5,20
 100da8c:	000f883a 	mov	r7,zero
 100da90:	40800017 	ldw	r2,0(r8)
 100da94:	39c00044 	addi	r7,r7,1
 100da98:	10ffffcc 	andi	r3,r2,65535
 100da9c:	1987383a 	mul	r3,r3,r6
 100daa0:	1004d43a 	srli	r2,r2,16
 100daa4:	1c07883a 	add	r3,r3,r16
 100daa8:	180ad43a 	srli	r5,r3,16
 100daac:	1185383a 	mul	r2,r2,r6
 100dab0:	18ffffcc 	andi	r3,r3,65535
 100dab4:	1145883a 	add	r2,r2,r5
 100dab8:	1008943a 	slli	r4,r2,16
 100dabc:	1020d43a 	srli	r16,r2,16
 100dac0:	20c9883a 	add	r4,r4,r3
 100dac4:	41000015 	stw	r4,0(r8)
 100dac8:	42000104 	addi	r8,r8,4
 100dacc:	3cbff016 	blt	r7,r18,100da90 <__multadd+0x34>
 100dad0:	80000826 	beq	r16,zero,100daf4 <__multadd+0x98>
 100dad4:	98800217 	ldw	r2,8(r19)
 100dad8:	90800f0e 	bge	r18,r2,100db18 <__multadd+0xbc>
 100dadc:	9485883a 	add	r2,r18,r18
 100dae0:	1085883a 	add	r2,r2,r2
 100dae4:	14c5883a 	add	r2,r2,r19
 100dae8:	90c00044 	addi	r3,r18,1
 100daec:	14000515 	stw	r16,20(r2)
 100daf0:	98c00415 	stw	r3,16(r19)
 100daf4:	9805883a 	mov	r2,r19
 100daf8:	dfc00517 	ldw	ra,20(sp)
 100dafc:	dd000417 	ldw	r20,16(sp)
 100db00:	dcc00317 	ldw	r19,12(sp)
 100db04:	dc800217 	ldw	r18,8(sp)
 100db08:	dc400117 	ldw	r17,4(sp)
 100db0c:	dc000017 	ldw	r16,0(sp)
 100db10:	dec00604 	addi	sp,sp,24
 100db14:	f800283a 	ret
 100db18:	99400117 	ldw	r5,4(r19)
 100db1c:	a009883a 	mov	r4,r20
 100db20:	29400044 	addi	r5,r5,1
 100db24:	100d3280 	call	100d328 <_Balloc>
 100db28:	99800417 	ldw	r6,16(r19)
 100db2c:	99400304 	addi	r5,r19,12
 100db30:	11000304 	addi	r4,r2,12
 100db34:	318d883a 	add	r6,r6,r6
 100db38:	318d883a 	add	r6,r6,r6
 100db3c:	31800204 	addi	r6,r6,8
 100db40:	1023883a 	mov	r17,r2
 100db44:	10060100 	call	1006010 <memcpy>
 100db48:	980b883a 	mov	r5,r19
 100db4c:	a009883a 	mov	r4,r20
 100db50:	100cda80 	call	100cda8 <_Bfree>
 100db54:	8827883a 	mov	r19,r17
 100db58:	003fe006 	br	100dadc <__multadd+0x80>

0100db5c <__pow5mult>:
 100db5c:	defffa04 	addi	sp,sp,-24
 100db60:	308000cc 	andi	r2,r6,3
 100db64:	dd000415 	stw	r20,16(sp)
 100db68:	dcc00315 	stw	r19,12(sp)
 100db6c:	dc000015 	stw	r16,0(sp)
 100db70:	dfc00515 	stw	ra,20(sp)
 100db74:	dc800215 	stw	r18,8(sp)
 100db78:	dc400115 	stw	r17,4(sp)
 100db7c:	3021883a 	mov	r16,r6
 100db80:	2027883a 	mov	r19,r4
 100db84:	2829883a 	mov	r20,r5
 100db88:	10002b1e 	bne	r2,zero,100dc38 <__pow5mult+0xdc>
 100db8c:	8025d0ba 	srai	r18,r16,2
 100db90:	90001b26 	beq	r18,zero,100dc00 <__pow5mult+0xa4>
 100db94:	9c001217 	ldw	r16,72(r19)
 100db98:	8000081e 	bne	r16,zero,100dbbc <__pow5mult+0x60>
 100db9c:	00003006 	br	100dc60 <__pow5mult+0x104>
 100dba0:	800b883a 	mov	r5,r16
 100dba4:	800d883a 	mov	r6,r16
 100dba8:	9809883a 	mov	r4,r19
 100dbac:	90001426 	beq	r18,zero,100dc00 <__pow5mult+0xa4>
 100dbb0:	80800017 	ldw	r2,0(r16)
 100dbb4:	10001b26 	beq	r2,zero,100dc24 <__pow5mult+0xc8>
 100dbb8:	1021883a 	mov	r16,r2
 100dbbc:	9080004c 	andi	r2,r18,1
 100dbc0:	1005003a 	cmpeq	r2,r2,zero
 100dbc4:	9025d07a 	srai	r18,r18,1
 100dbc8:	800d883a 	mov	r6,r16
 100dbcc:	9809883a 	mov	r4,r19
 100dbd0:	a00b883a 	mov	r5,r20
 100dbd4:	103ff21e 	bne	r2,zero,100dba0 <__pow5mult+0x44>
 100dbd8:	100d8380 	call	100d838 <__multiply>
 100dbdc:	a00b883a 	mov	r5,r20
 100dbe0:	9809883a 	mov	r4,r19
 100dbe4:	1023883a 	mov	r17,r2
 100dbe8:	100cda80 	call	100cda8 <_Bfree>
 100dbec:	8829883a 	mov	r20,r17
 100dbf0:	800b883a 	mov	r5,r16
 100dbf4:	800d883a 	mov	r6,r16
 100dbf8:	9809883a 	mov	r4,r19
 100dbfc:	903fec1e 	bne	r18,zero,100dbb0 <__pow5mult+0x54>
 100dc00:	a005883a 	mov	r2,r20
 100dc04:	dfc00517 	ldw	ra,20(sp)
 100dc08:	dd000417 	ldw	r20,16(sp)
 100dc0c:	dcc00317 	ldw	r19,12(sp)
 100dc10:	dc800217 	ldw	r18,8(sp)
 100dc14:	dc400117 	ldw	r17,4(sp)
 100dc18:	dc000017 	ldw	r16,0(sp)
 100dc1c:	dec00604 	addi	sp,sp,24
 100dc20:	f800283a 	ret
 100dc24:	100d8380 	call	100d838 <__multiply>
 100dc28:	80800015 	stw	r2,0(r16)
 100dc2c:	1021883a 	mov	r16,r2
 100dc30:	10000015 	stw	zero,0(r2)
 100dc34:	003fe106 	br	100dbbc <__pow5mult+0x60>
 100dc38:	1085883a 	add	r2,r2,r2
 100dc3c:	00c040b4 	movhi	r3,258
 100dc40:	18e9ec04 	addi	r3,r3,-22608
 100dc44:	1085883a 	add	r2,r2,r2
 100dc48:	10c5883a 	add	r2,r2,r3
 100dc4c:	11bfff17 	ldw	r6,-4(r2)
 100dc50:	000f883a 	mov	r7,zero
 100dc54:	100da5c0 	call	100da5c <__multadd>
 100dc58:	1029883a 	mov	r20,r2
 100dc5c:	003fcb06 	br	100db8c <__pow5mult+0x30>
 100dc60:	9809883a 	mov	r4,r19
 100dc64:	01409c44 	movi	r5,625
 100dc68:	100da200 	call	100da20 <__i2b>
 100dc6c:	98801215 	stw	r2,72(r19)
 100dc70:	1021883a 	mov	r16,r2
 100dc74:	10000015 	stw	zero,0(r2)
 100dc78:	003fd006 	br	100dbbc <__pow5mult+0x60>

0100dc7c <__s2b>:
 100dc7c:	defff904 	addi	sp,sp,-28
 100dc80:	dcc00315 	stw	r19,12(sp)
 100dc84:	dc800215 	stw	r18,8(sp)
 100dc88:	2827883a 	mov	r19,r5
 100dc8c:	2025883a 	mov	r18,r4
 100dc90:	01400244 	movi	r5,9
 100dc94:	39000204 	addi	r4,r7,8
 100dc98:	dd000415 	stw	r20,16(sp)
 100dc9c:	dc400115 	stw	r17,4(sp)
 100dca0:	dfc00615 	stw	ra,24(sp)
 100dca4:	dd400515 	stw	r21,20(sp)
 100dca8:	dc000015 	stw	r16,0(sp)
 100dcac:	3829883a 	mov	r20,r7
 100dcb0:	3023883a 	mov	r17,r6
 100dcb4:	10154700 	call	1015470 <__divsi3>
 100dcb8:	00c00044 	movi	r3,1
 100dcbc:	1880350e 	bge	r3,r2,100dd94 <__s2b+0x118>
 100dcc0:	000b883a 	mov	r5,zero
 100dcc4:	18c7883a 	add	r3,r3,r3
 100dcc8:	29400044 	addi	r5,r5,1
 100dccc:	18bffd16 	blt	r3,r2,100dcc4 <__s2b+0x48>
 100dcd0:	9009883a 	mov	r4,r18
 100dcd4:	100d3280 	call	100d328 <_Balloc>
 100dcd8:	1011883a 	mov	r8,r2
 100dcdc:	d8800717 	ldw	r2,28(sp)
 100dce0:	00c00044 	movi	r3,1
 100dce4:	01800244 	movi	r6,9
 100dce8:	40800515 	stw	r2,20(r8)
 100dcec:	40c00415 	stw	r3,16(r8)
 100dcf0:	3440260e 	bge	r6,r17,100dd8c <__s2b+0x110>
 100dcf4:	3021883a 	mov	r16,r6
 100dcf8:	99ab883a 	add	r21,r19,r6
 100dcfc:	9c05883a 	add	r2,r19,r16
 100dd00:	11c00007 	ldb	r7,0(r2)
 100dd04:	400b883a 	mov	r5,r8
 100dd08:	9009883a 	mov	r4,r18
 100dd0c:	39fff404 	addi	r7,r7,-48
 100dd10:	01800284 	movi	r6,10
 100dd14:	100da5c0 	call	100da5c <__multadd>
 100dd18:	84000044 	addi	r16,r16,1
 100dd1c:	1011883a 	mov	r8,r2
 100dd20:	8c3ff61e 	bne	r17,r16,100dcfc <__s2b+0x80>
 100dd24:	ac45883a 	add	r2,r21,r17
 100dd28:	117ffe04 	addi	r5,r2,-8
 100dd2c:	880d883a 	mov	r6,r17
 100dd30:	35000c0e 	bge	r6,r20,100dd64 <__s2b+0xe8>
 100dd34:	a185c83a 	sub	r2,r20,r6
 100dd38:	2821883a 	mov	r16,r5
 100dd3c:	28a3883a 	add	r17,r5,r2
 100dd40:	81c00007 	ldb	r7,0(r16)
 100dd44:	400b883a 	mov	r5,r8
 100dd48:	9009883a 	mov	r4,r18
 100dd4c:	39fff404 	addi	r7,r7,-48
 100dd50:	01800284 	movi	r6,10
 100dd54:	100da5c0 	call	100da5c <__multadd>
 100dd58:	84000044 	addi	r16,r16,1
 100dd5c:	1011883a 	mov	r8,r2
 100dd60:	847ff71e 	bne	r16,r17,100dd40 <__s2b+0xc4>
 100dd64:	4005883a 	mov	r2,r8
 100dd68:	dfc00617 	ldw	ra,24(sp)
 100dd6c:	dd400517 	ldw	r21,20(sp)
 100dd70:	dd000417 	ldw	r20,16(sp)
 100dd74:	dcc00317 	ldw	r19,12(sp)
 100dd78:	dc800217 	ldw	r18,8(sp)
 100dd7c:	dc400117 	ldw	r17,4(sp)
 100dd80:	dc000017 	ldw	r16,0(sp)
 100dd84:	dec00704 	addi	sp,sp,28
 100dd88:	f800283a 	ret
 100dd8c:	99400284 	addi	r5,r19,10
 100dd90:	003fe706 	br	100dd30 <__s2b+0xb4>
 100dd94:	000b883a 	mov	r5,zero
 100dd98:	003fcd06 	br	100dcd0 <__s2b+0x54>

0100dd9c <putc>:
 100dd9c:	defffc04 	addi	sp,sp,-16
 100dda0:	dc800215 	stw	r18,8(sp)
 100dda4:	048040b4 	movhi	r18,258
 100dda8:	94b25404 	addi	r18,r18,-14000
 100ddac:	90c00017 	ldw	r3,0(r18)
 100ddb0:	dc400115 	stw	r17,4(sp)
 100ddb4:	dc000015 	stw	r16,0(sp)
 100ddb8:	dfc00315 	stw	ra,12(sp)
 100ddbc:	2023883a 	mov	r17,r4
 100ddc0:	2821883a 	mov	r16,r5
 100ddc4:	18000226 	beq	r3,zero,100ddd0 <putc+0x34>
 100ddc8:	18800e17 	ldw	r2,56(r3)
 100ddcc:	10001126 	beq	r2,zero,100de14 <putc+0x78>
 100ddd0:	80800217 	ldw	r2,8(r16)
 100ddd4:	10ffffc4 	addi	r3,r2,-1
 100ddd8:	80c00215 	stw	r3,8(r16)
 100dddc:	18001316 	blt	r3,zero,100de2c <putc+0x90>
 100dde0:	80800017 	ldw	r2,0(r16)
 100dde4:	14400005 	stb	r17,0(r2)
 100dde8:	80c00017 	ldw	r3,0(r16)
 100ddec:	18800044 	addi	r2,r3,1
 100ddf0:	18c00003 	ldbu	r3,0(r3)
 100ddf4:	80800015 	stw	r2,0(r16)
 100ddf8:	1805883a 	mov	r2,r3
 100ddfc:	dfc00317 	ldw	ra,12(sp)
 100de00:	dc800217 	ldw	r18,8(sp)
 100de04:	dc400117 	ldw	r17,4(sp)
 100de08:	dc000017 	ldw	r16,0(sp)
 100de0c:	dec00404 	addi	sp,sp,16
 100de10:	f800283a 	ret
 100de14:	1809883a 	mov	r4,r3
 100de18:	100b9700 	call	100b970 <__sinit>
 100de1c:	80800217 	ldw	r2,8(r16)
 100de20:	10ffffc4 	addi	r3,r2,-1
 100de24:	80c00215 	stw	r3,8(r16)
 100de28:	183fed0e 	bge	r3,zero,100dde0 <putc+0x44>
 100de2c:	80800617 	ldw	r2,24(r16)
 100de30:	18800f16 	blt	r3,r2,100de70 <putc+0xd4>
 100de34:	80800017 	ldw	r2,0(r16)
 100de38:	14400005 	stb	r17,0(r2)
 100de3c:	81000017 	ldw	r4,0(r16)
 100de40:	00800284 	movi	r2,10
 100de44:	20c00003 	ldbu	r3,0(r4)
 100de48:	18801226 	beq	r3,r2,100de94 <putc+0xf8>
 100de4c:	20800044 	addi	r2,r4,1
 100de50:	80800015 	stw	r2,0(r16)
 100de54:	1805883a 	mov	r2,r3
 100de58:	dfc00317 	ldw	ra,12(sp)
 100de5c:	dc800217 	ldw	r18,8(sp)
 100de60:	dc400117 	ldw	r17,4(sp)
 100de64:	dc000017 	ldw	r16,0(sp)
 100de68:	dec00404 	addi	sp,sp,16
 100de6c:	f800283a 	ret
 100de70:	91000017 	ldw	r4,0(r18)
 100de74:	880b883a 	mov	r5,r17
 100de78:	800d883a 	mov	r6,r16
 100de7c:	dfc00317 	ldw	ra,12(sp)
 100de80:	dc800217 	ldw	r18,8(sp)
 100de84:	dc400117 	ldw	r17,4(sp)
 100de88:	dc000017 	ldw	r16,0(sp)
 100de8c:	dec00404 	addi	sp,sp,16
 100de90:	10122e81 	jmpi	10122e8 <__swbuf_r>
 100de94:	91000017 	ldw	r4,0(r18)
 100de98:	180b883a 	mov	r5,r3
 100de9c:	003ff606 	br	100de78 <putc+0xdc>

0100dea0 <_putc_r>:
 100dea0:	defffc04 	addi	sp,sp,-16
 100dea4:	dc400215 	stw	r17,8(sp)
 100dea8:	dc000115 	stw	r16,4(sp)
 100deac:	dfc00315 	stw	ra,12(sp)
 100deb0:	2021883a 	mov	r16,r4
 100deb4:	2823883a 	mov	r17,r5
 100deb8:	20000226 	beq	r4,zero,100dec4 <_putc_r+0x24>
 100debc:	20800e17 	ldw	r2,56(r4)
 100dec0:	10001026 	beq	r2,zero,100df04 <_putc_r+0x64>
 100dec4:	30800217 	ldw	r2,8(r6)
 100dec8:	10ffffc4 	addi	r3,r2,-1
 100decc:	30c00215 	stw	r3,8(r6)
 100ded0:	18001316 	blt	r3,zero,100df20 <_putc_r+0x80>
 100ded4:	30800017 	ldw	r2,0(r6)
 100ded8:	14400005 	stb	r17,0(r2)
 100dedc:	30c00017 	ldw	r3,0(r6)
 100dee0:	18800044 	addi	r2,r3,1
 100dee4:	18c00003 	ldbu	r3,0(r3)
 100dee8:	30800015 	stw	r2,0(r6)
 100deec:	1805883a 	mov	r2,r3
 100def0:	dfc00317 	ldw	ra,12(sp)
 100def4:	dc400217 	ldw	r17,8(sp)
 100def8:	dc000117 	ldw	r16,4(sp)
 100defc:	dec00404 	addi	sp,sp,16
 100df00:	f800283a 	ret
 100df04:	d9800015 	stw	r6,0(sp)
 100df08:	100b9700 	call	100b970 <__sinit>
 100df0c:	d9800017 	ldw	r6,0(sp)
 100df10:	30800217 	ldw	r2,8(r6)
 100df14:	10ffffc4 	addi	r3,r2,-1
 100df18:	30c00215 	stw	r3,8(r6)
 100df1c:	183fed0e 	bge	r3,zero,100ded4 <_putc_r+0x34>
 100df20:	30800617 	ldw	r2,24(r6)
 100df24:	18800e16 	blt	r3,r2,100df60 <_putc_r+0xc0>
 100df28:	30800017 	ldw	r2,0(r6)
 100df2c:	14400005 	stb	r17,0(r2)
 100df30:	31000017 	ldw	r4,0(r6)
 100df34:	00800284 	movi	r2,10
 100df38:	20c00003 	ldbu	r3,0(r4)
 100df3c:	18800f26 	beq	r3,r2,100df7c <_putc_r+0xdc>
 100df40:	20800044 	addi	r2,r4,1
 100df44:	30800015 	stw	r2,0(r6)
 100df48:	1805883a 	mov	r2,r3
 100df4c:	dfc00317 	ldw	ra,12(sp)
 100df50:	dc400217 	ldw	r17,8(sp)
 100df54:	dc000117 	ldw	r16,4(sp)
 100df58:	dec00404 	addi	sp,sp,16
 100df5c:	f800283a 	ret
 100df60:	8009883a 	mov	r4,r16
 100df64:	880b883a 	mov	r5,r17
 100df68:	dfc00317 	ldw	ra,12(sp)
 100df6c:	dc400217 	ldw	r17,8(sp)
 100df70:	dc000117 	ldw	r16,4(sp)
 100df74:	dec00404 	addi	sp,sp,16
 100df78:	10122e81 	jmpi	10122e8 <__swbuf_r>
 100df7c:	8009883a 	mov	r4,r16
 100df80:	180b883a 	mov	r5,r3
 100df84:	003ff806 	br	100df68 <_putc_r+0xc8>

0100df88 <_realloc_r>:
 100df88:	defff404 	addi	sp,sp,-48
 100df8c:	dd800815 	stw	r22,32(sp)
 100df90:	dc800415 	stw	r18,16(sp)
 100df94:	dc400315 	stw	r17,12(sp)
 100df98:	dfc00b15 	stw	ra,44(sp)
 100df9c:	df000a15 	stw	fp,40(sp)
 100dfa0:	ddc00915 	stw	r23,36(sp)
 100dfa4:	dd400715 	stw	r21,28(sp)
 100dfa8:	dd000615 	stw	r20,24(sp)
 100dfac:	dcc00515 	stw	r19,20(sp)
 100dfb0:	dc000215 	stw	r16,8(sp)
 100dfb4:	2825883a 	mov	r18,r5
 100dfb8:	3023883a 	mov	r17,r6
 100dfbc:	202d883a 	mov	r22,r4
 100dfc0:	2800c926 	beq	r5,zero,100e2e8 <_realloc_r+0x360>
 100dfc4:	10168340 	call	1016834 <__malloc_lock>
 100dfc8:	943ffe04 	addi	r16,r18,-8
 100dfcc:	88c002c4 	addi	r3,r17,11
 100dfd0:	00800584 	movi	r2,22
 100dfd4:	82000117 	ldw	r8,4(r16)
 100dfd8:	10c01b2e 	bgeu	r2,r3,100e048 <_realloc_r+0xc0>
 100dfdc:	00bffe04 	movi	r2,-8
 100dfe0:	188e703a 	and	r7,r3,r2
 100dfe4:	3839883a 	mov	fp,r7
 100dfe8:	38001a16 	blt	r7,zero,100e054 <_realloc_r+0xcc>
 100dfec:	e4401936 	bltu	fp,r17,100e054 <_realloc_r+0xcc>
 100dff0:	013fff04 	movi	r4,-4
 100dff4:	4126703a 	and	r19,r8,r4
 100dff8:	99c02616 	blt	r19,r7,100e094 <_realloc_r+0x10c>
 100dffc:	802b883a 	mov	r21,r16
 100e000:	9829883a 	mov	r20,r19
 100e004:	84000204 	addi	r16,r16,8
 100e008:	a80f883a 	mov	r7,r21
 100e00c:	a70dc83a 	sub	r6,r20,fp
 100e010:	008003c4 	movi	r2,15
 100e014:	1180c136 	bltu	r2,r6,100e31c <_realloc_r+0x394>
 100e018:	38800117 	ldw	r2,4(r7)
 100e01c:	a549883a 	add	r4,r20,r21
 100e020:	1080004c 	andi	r2,r2,1
 100e024:	a084b03a 	or	r2,r20,r2
 100e028:	38800115 	stw	r2,4(r7)
 100e02c:	20c00117 	ldw	r3,4(r4)
 100e030:	18c00054 	ori	r3,r3,1
 100e034:	20c00115 	stw	r3,4(r4)
 100e038:	b009883a 	mov	r4,r22
 100e03c:	10168540 	call	1016854 <__malloc_unlock>
 100e040:	8023883a 	mov	r17,r16
 100e044:	00000606 	br	100e060 <_realloc_r+0xd8>
 100e048:	01c00404 	movi	r7,16
 100e04c:	3839883a 	mov	fp,r7
 100e050:	e47fe72e 	bgeu	fp,r17,100dff0 <_realloc_r+0x68>
 100e054:	00800304 	movi	r2,12
 100e058:	0023883a 	mov	r17,zero
 100e05c:	b0800015 	stw	r2,0(r22)
 100e060:	8805883a 	mov	r2,r17
 100e064:	dfc00b17 	ldw	ra,44(sp)
 100e068:	df000a17 	ldw	fp,40(sp)
 100e06c:	ddc00917 	ldw	r23,36(sp)
 100e070:	dd800817 	ldw	r22,32(sp)
 100e074:	dd400717 	ldw	r21,28(sp)
 100e078:	dd000617 	ldw	r20,24(sp)
 100e07c:	dcc00517 	ldw	r19,20(sp)
 100e080:	dc800417 	ldw	r18,16(sp)
 100e084:	dc400317 	ldw	r17,12(sp)
 100e088:	dc000217 	ldw	r16,8(sp)
 100e08c:	dec00c04 	addi	sp,sp,48
 100e090:	f800283a 	ret
 100e094:	008040b4 	movhi	r2,258
 100e098:	10ac4804 	addi	r2,r2,-20192
 100e09c:	12400217 	ldw	r9,8(r2)
 100e0a0:	84cd883a 	add	r6,r16,r19
 100e0a4:	802b883a 	mov	r21,r16
 100e0a8:	3240b926 	beq	r6,r9,100e390 <_realloc_r+0x408>
 100e0ac:	31400117 	ldw	r5,4(r6)
 100e0b0:	00bfff84 	movi	r2,-2
 100e0b4:	2884703a 	and	r2,r5,r2
 100e0b8:	1185883a 	add	r2,r2,r6
 100e0bc:	10c00117 	ldw	r3,4(r2)
 100e0c0:	18c0004c 	andi	r3,r3,1
 100e0c4:	1807003a 	cmpeq	r3,r3,zero
 100e0c8:	1800a326 	beq	r3,zero,100e358 <_realloc_r+0x3d0>
 100e0cc:	2908703a 	and	r4,r5,r4
 100e0d0:	9929883a 	add	r20,r19,r4
 100e0d4:	a1c0a30e 	bge	r20,r7,100e364 <_realloc_r+0x3dc>
 100e0d8:	4080004c 	andi	r2,r8,1
 100e0dc:	1000551e 	bne	r2,zero,100e234 <_realloc_r+0x2ac>
 100e0e0:	80800017 	ldw	r2,0(r16)
 100e0e4:	80afc83a 	sub	r23,r16,r2
 100e0e8:	b8c00117 	ldw	r3,4(r23)
 100e0ec:	00bfff04 	movi	r2,-4
 100e0f0:	1884703a 	and	r2,r3,r2
 100e0f4:	30002e26 	beq	r6,zero,100e1b0 <_realloc_r+0x228>
 100e0f8:	3240b926 	beq	r6,r9,100e3e0 <_realloc_r+0x458>
 100e0fc:	98a9883a 	add	r20,r19,r2
 100e100:	2509883a 	add	r4,r4,r20
 100e104:	d9000015 	stw	r4,0(sp)
 100e108:	21c02a16 	blt	r4,r7,100e1b4 <_realloc_r+0x22c>
 100e10c:	30800317 	ldw	r2,12(r6)
 100e110:	30c00217 	ldw	r3,8(r6)
 100e114:	01400904 	movi	r5,36
 100e118:	99bfff04 	addi	r6,r19,-4
 100e11c:	18800315 	stw	r2,12(r3)
 100e120:	10c00215 	stw	r3,8(r2)
 100e124:	b9000317 	ldw	r4,12(r23)
 100e128:	b8800217 	ldw	r2,8(r23)
 100e12c:	b82b883a 	mov	r21,r23
 100e130:	bc000204 	addi	r16,r23,8
 100e134:	20800215 	stw	r2,8(r4)
 100e138:	11000315 	stw	r4,12(r2)
 100e13c:	2980e436 	bltu	r5,r6,100e4d0 <_realloc_r+0x548>
 100e140:	008004c4 	movi	r2,19
 100e144:	9009883a 	mov	r4,r18
 100e148:	8011883a 	mov	r8,r16
 100e14c:	11800f2e 	bgeu	r2,r6,100e18c <_realloc_r+0x204>
 100e150:	90800017 	ldw	r2,0(r18)
 100e154:	ba000404 	addi	r8,r23,16
 100e158:	91000204 	addi	r4,r18,8
 100e15c:	b8800215 	stw	r2,8(r23)
 100e160:	90c00117 	ldw	r3,4(r18)
 100e164:	008006c4 	movi	r2,27
 100e168:	b8c00315 	stw	r3,12(r23)
 100e16c:	1180072e 	bgeu	r2,r6,100e18c <_realloc_r+0x204>
 100e170:	90c00217 	ldw	r3,8(r18)
 100e174:	ba000604 	addi	r8,r23,24
 100e178:	91000404 	addi	r4,r18,16
 100e17c:	b8c00415 	stw	r3,16(r23)
 100e180:	90800317 	ldw	r2,12(r18)
 100e184:	b8800515 	stw	r2,20(r23)
 100e188:	3140e726 	beq	r6,r5,100e528 <_realloc_r+0x5a0>
 100e18c:	20800017 	ldw	r2,0(r4)
 100e190:	dd000017 	ldw	r20,0(sp)
 100e194:	b80f883a 	mov	r7,r23
 100e198:	40800015 	stw	r2,0(r8)
 100e19c:	20c00117 	ldw	r3,4(r4)
 100e1a0:	40c00115 	stw	r3,4(r8)
 100e1a4:	20800217 	ldw	r2,8(r4)
 100e1a8:	40800215 	stw	r2,8(r8)
 100e1ac:	003f9706 	br	100e00c <_realloc_r+0x84>
 100e1b0:	98a9883a 	add	r20,r19,r2
 100e1b4:	a1c01f16 	blt	r20,r7,100e234 <_realloc_r+0x2ac>
 100e1b8:	b8c00317 	ldw	r3,12(r23)
 100e1bc:	b8800217 	ldw	r2,8(r23)
 100e1c0:	99bfff04 	addi	r6,r19,-4
 100e1c4:	01400904 	movi	r5,36
 100e1c8:	b82b883a 	mov	r21,r23
 100e1cc:	18800215 	stw	r2,8(r3)
 100e1d0:	10c00315 	stw	r3,12(r2)
 100e1d4:	bc000204 	addi	r16,r23,8
 100e1d8:	2980c336 	bltu	r5,r6,100e4e8 <_realloc_r+0x560>
 100e1dc:	008004c4 	movi	r2,19
 100e1e0:	9009883a 	mov	r4,r18
 100e1e4:	8011883a 	mov	r8,r16
 100e1e8:	11800f2e 	bgeu	r2,r6,100e228 <_realloc_r+0x2a0>
 100e1ec:	90800017 	ldw	r2,0(r18)
 100e1f0:	ba000404 	addi	r8,r23,16
 100e1f4:	91000204 	addi	r4,r18,8
 100e1f8:	b8800215 	stw	r2,8(r23)
 100e1fc:	90c00117 	ldw	r3,4(r18)
 100e200:	008006c4 	movi	r2,27
 100e204:	b8c00315 	stw	r3,12(r23)
 100e208:	1180072e 	bgeu	r2,r6,100e228 <_realloc_r+0x2a0>
 100e20c:	90c00217 	ldw	r3,8(r18)
 100e210:	ba000604 	addi	r8,r23,24
 100e214:	91000404 	addi	r4,r18,16
 100e218:	b8c00415 	stw	r3,16(r23)
 100e21c:	90800317 	ldw	r2,12(r18)
 100e220:	b8800515 	stw	r2,20(r23)
 100e224:	3140c726 	beq	r6,r5,100e544 <_realloc_r+0x5bc>
 100e228:	20800017 	ldw	r2,0(r4)
 100e22c:	b80f883a 	mov	r7,r23
 100e230:	003fd906 	br	100e198 <_realloc_r+0x210>
 100e234:	880b883a 	mov	r5,r17
 100e238:	b009883a 	mov	r4,r22
 100e23c:	10058d00 	call	10058d0 <_malloc_r>
 100e240:	1023883a 	mov	r17,r2
 100e244:	10002526 	beq	r2,zero,100e2dc <_realloc_r+0x354>
 100e248:	80800117 	ldw	r2,4(r16)
 100e24c:	00ffff84 	movi	r3,-2
 100e250:	893ffe04 	addi	r4,r17,-8
 100e254:	10c4703a 	and	r2,r2,r3
 100e258:	8085883a 	add	r2,r16,r2
 100e25c:	20809526 	beq	r4,r2,100e4b4 <_realloc_r+0x52c>
 100e260:	99bfff04 	addi	r6,r19,-4
 100e264:	01c00904 	movi	r7,36
 100e268:	39804536 	bltu	r7,r6,100e380 <_realloc_r+0x3f8>
 100e26c:	008004c4 	movi	r2,19
 100e270:	9009883a 	mov	r4,r18
 100e274:	880b883a 	mov	r5,r17
 100e278:	11800f2e 	bgeu	r2,r6,100e2b8 <_realloc_r+0x330>
 100e27c:	90800017 	ldw	r2,0(r18)
 100e280:	89400204 	addi	r5,r17,8
 100e284:	91000204 	addi	r4,r18,8
 100e288:	88800015 	stw	r2,0(r17)
 100e28c:	90c00117 	ldw	r3,4(r18)
 100e290:	008006c4 	movi	r2,27
 100e294:	88c00115 	stw	r3,4(r17)
 100e298:	1180072e 	bgeu	r2,r6,100e2b8 <_realloc_r+0x330>
 100e29c:	90c00217 	ldw	r3,8(r18)
 100e2a0:	89400404 	addi	r5,r17,16
 100e2a4:	91000404 	addi	r4,r18,16
 100e2a8:	88c00215 	stw	r3,8(r17)
 100e2ac:	90800317 	ldw	r2,12(r18)
 100e2b0:	88800315 	stw	r2,12(r17)
 100e2b4:	31c09126 	beq	r6,r7,100e4fc <_realloc_r+0x574>
 100e2b8:	20800017 	ldw	r2,0(r4)
 100e2bc:	28800015 	stw	r2,0(r5)
 100e2c0:	20c00117 	ldw	r3,4(r4)
 100e2c4:	28c00115 	stw	r3,4(r5)
 100e2c8:	20800217 	ldw	r2,8(r4)
 100e2cc:	28800215 	stw	r2,8(r5)
 100e2d0:	900b883a 	mov	r5,r18
 100e2d4:	b009883a 	mov	r4,r22
 100e2d8:	100bf300 	call	100bf30 <_free_r>
 100e2dc:	b009883a 	mov	r4,r22
 100e2e0:	10168540 	call	1016854 <__malloc_unlock>
 100e2e4:	003f5e06 	br	100e060 <_realloc_r+0xd8>
 100e2e8:	300b883a 	mov	r5,r6
 100e2ec:	dfc00b17 	ldw	ra,44(sp)
 100e2f0:	df000a17 	ldw	fp,40(sp)
 100e2f4:	ddc00917 	ldw	r23,36(sp)
 100e2f8:	dd800817 	ldw	r22,32(sp)
 100e2fc:	dd400717 	ldw	r21,28(sp)
 100e300:	dd000617 	ldw	r20,24(sp)
 100e304:	dcc00517 	ldw	r19,20(sp)
 100e308:	dc800417 	ldw	r18,16(sp)
 100e30c:	dc400317 	ldw	r17,12(sp)
 100e310:	dc000217 	ldw	r16,8(sp)
 100e314:	dec00c04 	addi	sp,sp,48
 100e318:	10058d01 	jmpi	10058d0 <_malloc_r>
 100e31c:	38800117 	ldw	r2,4(r7)
 100e320:	e54b883a 	add	r5,fp,r21
 100e324:	31000054 	ori	r4,r6,1
 100e328:	1080004c 	andi	r2,r2,1
 100e32c:	1704b03a 	or	r2,r2,fp
 100e330:	38800115 	stw	r2,4(r7)
 100e334:	29000115 	stw	r4,4(r5)
 100e338:	2987883a 	add	r3,r5,r6
 100e33c:	18800117 	ldw	r2,4(r3)
 100e340:	29400204 	addi	r5,r5,8
 100e344:	b009883a 	mov	r4,r22
 100e348:	10800054 	ori	r2,r2,1
 100e34c:	18800115 	stw	r2,4(r3)
 100e350:	100bf300 	call	100bf30 <_free_r>
 100e354:	003f3806 	br	100e038 <_realloc_r+0xb0>
 100e358:	000d883a 	mov	r6,zero
 100e35c:	0009883a 	mov	r4,zero
 100e360:	003f5d06 	br	100e0d8 <_realloc_r+0x150>
 100e364:	30c00217 	ldw	r3,8(r6)
 100e368:	30800317 	ldw	r2,12(r6)
 100e36c:	800f883a 	mov	r7,r16
 100e370:	84000204 	addi	r16,r16,8
 100e374:	10c00215 	stw	r3,8(r2)
 100e378:	18800315 	stw	r2,12(r3)
 100e37c:	003f2306 	br	100e00c <_realloc_r+0x84>
 100e380:	8809883a 	mov	r4,r17
 100e384:	900b883a 	mov	r5,r18
 100e388:	100ccc80 	call	100ccc8 <memmove>
 100e38c:	003fd006 	br	100e2d0 <_realloc_r+0x348>
 100e390:	30800117 	ldw	r2,4(r6)
 100e394:	e0c00404 	addi	r3,fp,16
 100e398:	1108703a 	and	r4,r2,r4
 100e39c:	9905883a 	add	r2,r19,r4
 100e3a0:	10ff4d16 	blt	r2,r3,100e0d8 <_realloc_r+0x150>
 100e3a4:	1705c83a 	sub	r2,r2,fp
 100e3a8:	870b883a 	add	r5,r16,fp
 100e3ac:	10800054 	ori	r2,r2,1
 100e3b0:	28800115 	stw	r2,4(r5)
 100e3b4:	80c00117 	ldw	r3,4(r16)
 100e3b8:	008040b4 	movhi	r2,258
 100e3bc:	10ac4804 	addi	r2,r2,-20192
 100e3c0:	b009883a 	mov	r4,r22
 100e3c4:	18c0004c 	andi	r3,r3,1
 100e3c8:	e0c6b03a 	or	r3,fp,r3
 100e3cc:	11400215 	stw	r5,8(r2)
 100e3d0:	80c00115 	stw	r3,4(r16)
 100e3d4:	10168540 	call	1016854 <__malloc_unlock>
 100e3d8:	84400204 	addi	r17,r16,8
 100e3dc:	003f2006 	br	100e060 <_realloc_r+0xd8>
 100e3e0:	98a9883a 	add	r20,r19,r2
 100e3e4:	2509883a 	add	r4,r4,r20
 100e3e8:	e0800404 	addi	r2,fp,16
 100e3ec:	d9000115 	stw	r4,4(sp)
 100e3f0:	20bf7016 	blt	r4,r2,100e1b4 <_realloc_r+0x22c>
 100e3f4:	b8c00317 	ldw	r3,12(r23)
 100e3f8:	b8800217 	ldw	r2,8(r23)
 100e3fc:	99bfff04 	addi	r6,r19,-4
 100e400:	01400904 	movi	r5,36
 100e404:	18800215 	stw	r2,8(r3)
 100e408:	10c00315 	stw	r3,12(r2)
 100e40c:	bc400204 	addi	r17,r23,8
 100e410:	29804136 	bltu	r5,r6,100e518 <_realloc_r+0x590>
 100e414:	008004c4 	movi	r2,19
 100e418:	9009883a 	mov	r4,r18
 100e41c:	880f883a 	mov	r7,r17
 100e420:	11800f2e 	bgeu	r2,r6,100e460 <_realloc_r+0x4d8>
 100e424:	90800017 	ldw	r2,0(r18)
 100e428:	b9c00404 	addi	r7,r23,16
 100e42c:	91000204 	addi	r4,r18,8
 100e430:	b8800215 	stw	r2,8(r23)
 100e434:	90c00117 	ldw	r3,4(r18)
 100e438:	008006c4 	movi	r2,27
 100e43c:	b8c00315 	stw	r3,12(r23)
 100e440:	1180072e 	bgeu	r2,r6,100e460 <_realloc_r+0x4d8>
 100e444:	90c00217 	ldw	r3,8(r18)
 100e448:	b9c00604 	addi	r7,r23,24
 100e44c:	91000404 	addi	r4,r18,16
 100e450:	b8c00415 	stw	r3,16(r23)
 100e454:	90800317 	ldw	r2,12(r18)
 100e458:	b8800515 	stw	r2,20(r23)
 100e45c:	31404026 	beq	r6,r5,100e560 <_realloc_r+0x5d8>
 100e460:	20800017 	ldw	r2,0(r4)
 100e464:	38800015 	stw	r2,0(r7)
 100e468:	20c00117 	ldw	r3,4(r4)
 100e46c:	38c00115 	stw	r3,4(r7)
 100e470:	20800217 	ldw	r2,8(r4)
 100e474:	38800215 	stw	r2,8(r7)
 100e478:	d8c00117 	ldw	r3,4(sp)
 100e47c:	bf0b883a 	add	r5,r23,fp
 100e480:	b009883a 	mov	r4,r22
 100e484:	1f05c83a 	sub	r2,r3,fp
 100e488:	10800054 	ori	r2,r2,1
 100e48c:	28800115 	stw	r2,4(r5)
 100e490:	b8c00117 	ldw	r3,4(r23)
 100e494:	008040b4 	movhi	r2,258
 100e498:	10ac4804 	addi	r2,r2,-20192
 100e49c:	11400215 	stw	r5,8(r2)
 100e4a0:	18c0004c 	andi	r3,r3,1
 100e4a4:	e0c6b03a 	or	r3,fp,r3
 100e4a8:	b8c00115 	stw	r3,4(r23)
 100e4ac:	10168540 	call	1016854 <__malloc_unlock>
 100e4b0:	003eeb06 	br	100e060 <_realloc_r+0xd8>
 100e4b4:	20800117 	ldw	r2,4(r4)
 100e4b8:	00ffff04 	movi	r3,-4
 100e4bc:	800f883a 	mov	r7,r16
 100e4c0:	10c4703a 	and	r2,r2,r3
 100e4c4:	98a9883a 	add	r20,r19,r2
 100e4c8:	84000204 	addi	r16,r16,8
 100e4cc:	003ecf06 	br	100e00c <_realloc_r+0x84>
 100e4d0:	900b883a 	mov	r5,r18
 100e4d4:	8009883a 	mov	r4,r16
 100e4d8:	100ccc80 	call	100ccc8 <memmove>
 100e4dc:	dd000017 	ldw	r20,0(sp)
 100e4e0:	b80f883a 	mov	r7,r23
 100e4e4:	003ec906 	br	100e00c <_realloc_r+0x84>
 100e4e8:	900b883a 	mov	r5,r18
 100e4ec:	8009883a 	mov	r4,r16
 100e4f0:	100ccc80 	call	100ccc8 <memmove>
 100e4f4:	b80f883a 	mov	r7,r23
 100e4f8:	003ec406 	br	100e00c <_realloc_r+0x84>
 100e4fc:	90c00417 	ldw	r3,16(r18)
 100e500:	89400604 	addi	r5,r17,24
 100e504:	91000604 	addi	r4,r18,24
 100e508:	88c00415 	stw	r3,16(r17)
 100e50c:	90800517 	ldw	r2,20(r18)
 100e510:	88800515 	stw	r2,20(r17)
 100e514:	003f6806 	br	100e2b8 <_realloc_r+0x330>
 100e518:	900b883a 	mov	r5,r18
 100e51c:	8809883a 	mov	r4,r17
 100e520:	100ccc80 	call	100ccc8 <memmove>
 100e524:	003fd406 	br	100e478 <_realloc_r+0x4f0>
 100e528:	90c00417 	ldw	r3,16(r18)
 100e52c:	91000604 	addi	r4,r18,24
 100e530:	ba000804 	addi	r8,r23,32
 100e534:	b8c00615 	stw	r3,24(r23)
 100e538:	90800517 	ldw	r2,20(r18)
 100e53c:	b8800715 	stw	r2,28(r23)
 100e540:	003f1206 	br	100e18c <_realloc_r+0x204>
 100e544:	90c00417 	ldw	r3,16(r18)
 100e548:	91000604 	addi	r4,r18,24
 100e54c:	ba000804 	addi	r8,r23,32
 100e550:	b8c00615 	stw	r3,24(r23)
 100e554:	90800517 	ldw	r2,20(r18)
 100e558:	b8800715 	stw	r2,28(r23)
 100e55c:	003f3206 	br	100e228 <_realloc_r+0x2a0>
 100e560:	90c00417 	ldw	r3,16(r18)
 100e564:	91000604 	addi	r4,r18,24
 100e568:	b9c00804 	addi	r7,r23,32
 100e56c:	b8c00615 	stw	r3,24(r23)
 100e570:	90800517 	ldw	r2,20(r18)
 100e574:	b8800715 	stw	r2,28(r23)
 100e578:	003fb906 	br	100e460 <_realloc_r+0x4d8>

0100e57c <__srefill_r>:
 100e57c:	defffd04 	addi	sp,sp,-12
 100e580:	dc400115 	stw	r17,4(sp)
 100e584:	dc000015 	stw	r16,0(sp)
 100e588:	dfc00215 	stw	ra,8(sp)
 100e58c:	2023883a 	mov	r17,r4
 100e590:	2821883a 	mov	r16,r5
 100e594:	20000226 	beq	r4,zero,100e5a0 <__srefill_r+0x24>
 100e598:	20800e17 	ldw	r2,56(r4)
 100e59c:	10004126 	beq	r2,zero,100e6a4 <__srefill_r+0x128>
 100e5a0:	80c0030b 	ldhu	r3,12(r16)
 100e5a4:	80000115 	stw	zero,4(r16)
 100e5a8:	1880080c 	andi	r2,r3,32
 100e5ac:	1000361e 	bne	r2,zero,100e688 <__srefill_r+0x10c>
 100e5b0:	1880010c 	andi	r2,r3,4
 100e5b4:	1000211e 	bne	r2,zero,100e63c <__srefill_r+0xc0>
 100e5b8:	1880040c 	andi	r2,r3,16
 100e5bc:	10005026 	beq	r2,zero,100e700 <__srefill_r+0x184>
 100e5c0:	1880020c 	andi	r2,r3,8
 100e5c4:	1000541e 	bne	r2,zero,100e718 <__srefill_r+0x19c>
 100e5c8:	8080030b 	ldhu	r2,12(r16)
 100e5cc:	10800114 	ori	r2,r2,4
 100e5d0:	8080030d 	sth	r2,12(r16)
 100e5d4:	80800417 	ldw	r2,16(r16)
 100e5d8:	10004526 	beq	r2,zero,100e6f0 <__srefill_r+0x174>
 100e5dc:	8080030b 	ldhu	r2,12(r16)
 100e5e0:	108000cc 	andi	r2,r2,3
 100e5e4:	1000361e 	bne	r2,zero,100e6c0 <__srefill_r+0x144>
 100e5e8:	81800417 	ldw	r6,16(r16)
 100e5ec:	80c00817 	ldw	r3,32(r16)
 100e5f0:	81400717 	ldw	r5,28(r16)
 100e5f4:	81c00517 	ldw	r7,20(r16)
 100e5f8:	8809883a 	mov	r4,r17
 100e5fc:	81800015 	stw	r6,0(r16)
 100e600:	183ee83a 	callr	r3
 100e604:	80c0030b 	ldhu	r3,12(r16)
 100e608:	1009883a 	mov	r4,r2
 100e60c:	80800115 	stw	r2,4(r16)
 100e610:	00b7ffc4 	movi	r2,-8193
 100e614:	1884703a 	and	r2,r3,r2
 100e618:	8080030d 	sth	r2,12(r16)
 100e61c:	0100230e 	bge	zero,r4,100e6ac <__srefill_r+0x130>
 100e620:	0009883a 	mov	r4,zero
 100e624:	2005883a 	mov	r2,r4
 100e628:	dfc00217 	ldw	ra,8(sp)
 100e62c:	dc400117 	ldw	r17,4(sp)
 100e630:	dc000017 	ldw	r16,0(sp)
 100e634:	dec00304 	addi	sp,sp,12
 100e638:	f800283a 	ret
 100e63c:	81400c17 	ldw	r5,48(r16)
 100e640:	283fe426 	beq	r5,zero,100e5d4 <__srefill_r+0x58>
 100e644:	80801004 	addi	r2,r16,64
 100e648:	28800226 	beq	r5,r2,100e654 <__srefill_r+0xd8>
 100e64c:	8809883a 	mov	r4,r17
 100e650:	100bf300 	call	100bf30 <_free_r>
 100e654:	80800f17 	ldw	r2,60(r16)
 100e658:	80000c15 	stw	zero,48(r16)
 100e65c:	80800115 	stw	r2,4(r16)
 100e660:	103fdc26 	beq	r2,zero,100e5d4 <__srefill_r+0x58>
 100e664:	80800e17 	ldw	r2,56(r16)
 100e668:	0009883a 	mov	r4,zero
 100e66c:	80800015 	stw	r2,0(r16)
 100e670:	2005883a 	mov	r2,r4
 100e674:	dfc00217 	ldw	ra,8(sp)
 100e678:	dc400117 	ldw	r17,4(sp)
 100e67c:	dc000017 	ldw	r16,0(sp)
 100e680:	dec00304 	addi	sp,sp,12
 100e684:	f800283a 	ret
 100e688:	013fffc4 	movi	r4,-1
 100e68c:	2005883a 	mov	r2,r4
 100e690:	dfc00217 	ldw	ra,8(sp)
 100e694:	dc400117 	ldw	r17,4(sp)
 100e698:	dc000017 	ldw	r16,0(sp)
 100e69c:	dec00304 	addi	sp,sp,12
 100e6a0:	f800283a 	ret
 100e6a4:	100b9700 	call	100b970 <__sinit>
 100e6a8:	003fbd06 	br	100e5a0 <__srefill_r+0x24>
 100e6ac:	20000b1e 	bne	r4,zero,100e6dc <__srefill_r+0x160>
 100e6b0:	10800814 	ori	r2,r2,32
 100e6b4:	013fffc4 	movi	r4,-1
 100e6b8:	8080030d 	sth	r2,12(r16)
 100e6bc:	003fd906 	br	100e624 <__srefill_r+0xa8>
 100e6c0:	008040b4 	movhi	r2,258
 100e6c4:	10b25504 	addi	r2,r2,-13996
 100e6c8:	11000017 	ldw	r4,0(r2)
 100e6cc:	01404074 	movhi	r5,257
 100e6d0:	2979d004 	addi	r5,r5,-6336
 100e6d4:	100c7a80 	call	100c7a8 <_fwalk>
 100e6d8:	003fc306 	br	100e5e8 <__srefill_r+0x6c>
 100e6dc:	10801014 	ori	r2,r2,64
 100e6e0:	013fffc4 	movi	r4,-1
 100e6e4:	8080030d 	sth	r2,12(r16)
 100e6e8:	80000115 	stw	zero,4(r16)
 100e6ec:	003fcd06 	br	100e624 <__srefill_r+0xa8>
 100e6f0:	8809883a 	mov	r4,r17
 100e6f4:	800b883a 	mov	r5,r16
 100e6f8:	100c9500 	call	100c950 <__smakebuf_r>
 100e6fc:	003fb706 	br	100e5dc <__srefill_r+0x60>
 100e700:	18c01014 	ori	r3,r3,64
 100e704:	00800244 	movi	r2,9
 100e708:	013fffc4 	movi	r4,-1
 100e70c:	88800015 	stw	r2,0(r17)
 100e710:	80c0030d 	sth	r3,12(r16)
 100e714:	003fc306 	br	100e624 <__srefill_r+0xa8>
 100e718:	8809883a 	mov	r4,r17
 100e71c:	800b883a 	mov	r5,r16
 100e720:	100b6d80 	call	100b6d8 <_fflush_r>
 100e724:	103fd81e 	bne	r2,zero,100e688 <__srefill_r+0x10c>
 100e728:	8080030b 	ldhu	r2,12(r16)
 100e72c:	80000215 	stw	zero,8(r16)
 100e730:	80000615 	stw	zero,24(r16)
 100e734:	10bffdcc 	andi	r2,r2,65527
 100e738:	8080030d 	sth	r2,12(r16)
 100e73c:	003fa206 	br	100e5c8 <__srefill_r+0x4c>

0100e740 <lflush>:
 100e740:	20c0030b 	ldhu	r3,12(r4)
 100e744:	01400244 	movi	r5,9
 100e748:	0005883a 	mov	r2,zero
 100e74c:	18c0024c 	andi	r3,r3,9
 100e750:	19400126 	beq	r3,r5,100e758 <lflush+0x18>
 100e754:	f800283a 	ret
 100e758:	100b8d41 	jmpi	100b8d4 <fflush>

0100e75c <__isinfd>:
 100e75c:	200d883a 	mov	r6,r4
 100e760:	0109c83a 	sub	r4,zero,r4
 100e764:	2188b03a 	or	r4,r4,r6
 100e768:	2008d7fa 	srli	r4,r4,31
 100e76c:	00a00034 	movhi	r2,32768
 100e770:	10bfffc4 	addi	r2,r2,-1
 100e774:	1144703a 	and	r2,r2,r5
 100e778:	2088b03a 	or	r4,r4,r2
 100e77c:	009ffc34 	movhi	r2,32752
 100e780:	1105c83a 	sub	r2,r2,r4
 100e784:	0087c83a 	sub	r3,zero,r2
 100e788:	10c4b03a 	or	r2,r2,r3
 100e78c:	1004d7fa 	srli	r2,r2,31
 100e790:	00c00044 	movi	r3,1
 100e794:	1885c83a 	sub	r2,r3,r2
 100e798:	f800283a 	ret

0100e79c <__isnand>:
 100e79c:	200d883a 	mov	r6,r4
 100e7a0:	0109c83a 	sub	r4,zero,r4
 100e7a4:	2188b03a 	or	r4,r4,r6
 100e7a8:	2008d7fa 	srli	r4,r4,31
 100e7ac:	00a00034 	movhi	r2,32768
 100e7b0:	10bfffc4 	addi	r2,r2,-1
 100e7b4:	1144703a 	and	r2,r2,r5
 100e7b8:	2088b03a 	or	r4,r4,r2
 100e7bc:	009ffc34 	movhi	r2,32752
 100e7c0:	1105c83a 	sub	r2,r2,r4
 100e7c4:	1004d7fa 	srli	r2,r2,31
 100e7c8:	f800283a 	ret

0100e7cc <__sccl>:
 100e7cc:	28c00003 	ldbu	r3,0(r5)
 100e7d0:	00801784 	movi	r2,94
 100e7d4:	2a000044 	addi	r8,r5,1
 100e7d8:	18802526 	beq	r3,r2,100e870 <__sccl+0xa4>
 100e7dc:	180f883a 	mov	r7,r3
 100e7e0:	0013883a 	mov	r9,zero
 100e7e4:	000d883a 	mov	r6,zero
 100e7e8:	0007883a 	mov	r3,zero
 100e7ec:	01404004 	movi	r5,256
 100e7f0:	1905883a 	add	r2,r3,r4
 100e7f4:	18c00044 	addi	r3,r3,1
 100e7f8:	11800005 	stb	r6,0(r2)
 100e7fc:	197ffc1e 	bne	r3,r5,100e7f0 <__sccl+0x24>
 100e800:	38000c26 	beq	r7,zero,100e834 <__sccl+0x68>
 100e804:	00800044 	movi	r2,1
 100e808:	124dc83a 	sub	r6,r2,r9
 100e80c:	3905883a 	add	r2,r7,r4
 100e810:	11800005 	stb	r6,0(r2)
 100e814:	41400044 	addi	r5,r8,1
 100e818:	02400b44 	movi	r9,45
 100e81c:	02801744 	movi	r10,93
 100e820:	28bfffc3 	ldbu	r2,-1(r5)
 100e824:	2811883a 	mov	r8,r5
 100e828:	12400726 	beq	r2,r9,100e848 <__sccl+0x7c>
 100e82c:	12800226 	beq	r2,r10,100e838 <__sccl+0x6c>
 100e830:	1000031e 	bne	r2,zero,100e840 <__sccl+0x74>
 100e834:	423fffc4 	addi	r8,r8,-1
 100e838:	4005883a 	mov	r2,r8
 100e83c:	f800283a 	ret
 100e840:	100f883a 	mov	r7,r2
 100e844:	003ff106 	br	100e80c <__sccl+0x40>
 100e848:	28c00003 	ldbu	r3,0(r5)
 100e84c:	1a800d26 	beq	r3,r10,100e884 <__sccl+0xb8>
 100e850:	19c00c16 	blt	r3,r7,100e884 <__sccl+0xb8>
 100e854:	21c5883a 	add	r2,r4,r7
 100e858:	39c00044 	addi	r7,r7,1
 100e85c:	11800045 	stb	r6,1(r2)
 100e860:	10800044 	addi	r2,r2,1
 100e864:	38fffc16 	blt	r7,r3,100e858 <__sccl+0x8c>
 100e868:	29400084 	addi	r5,r5,2
 100e86c:	003fec06 	br	100e820 <__sccl+0x54>
 100e870:	29c00043 	ldbu	r7,1(r5)
 100e874:	02400044 	movi	r9,1
 100e878:	2a000084 	addi	r8,r5,2
 100e87c:	480d883a 	mov	r6,r9
 100e880:	003fd906 	br	100e7e8 <__sccl+0x1c>
 100e884:	01c00b44 	movi	r7,45
 100e888:	003fe006 	br	100e80c <__sccl+0x40>

0100e88c <nanf>:
 100e88c:	009ff034 	movhi	r2,32704
 100e890:	f800283a 	ret

0100e894 <_raise_r>:
 100e894:	defffd04 	addi	sp,sp,-12
 100e898:	008007c4 	movi	r2,31
 100e89c:	dc400115 	stw	r17,4(sp)
 100e8a0:	dc000015 	stw	r16,0(sp)
 100e8a4:	dfc00215 	stw	ra,8(sp)
 100e8a8:	2821883a 	mov	r16,r5
 100e8ac:	2023883a 	mov	r17,r4
 100e8b0:	11402736 	bltu	r2,r5,100e950 <_raise_r+0xbc>
 100e8b4:	20c0b717 	ldw	r3,732(r4)
 100e8b8:	18001326 	beq	r3,zero,100e908 <_raise_r+0x74>
 100e8bc:	2945883a 	add	r2,r5,r5
 100e8c0:	1085883a 	add	r2,r2,r2
 100e8c4:	188b883a 	add	r5,r3,r2
 100e8c8:	28c00017 	ldw	r3,0(r5)
 100e8cc:	18000e26 	beq	r3,zero,100e908 <_raise_r+0x74>
 100e8d0:	01000044 	movi	r4,1
 100e8d4:	19000526 	beq	r3,r4,100e8ec <_raise_r+0x58>
 100e8d8:	00bfffc4 	movi	r2,-1
 100e8dc:	18801326 	beq	r3,r2,100e92c <_raise_r+0x98>
 100e8e0:	28000015 	stw	zero,0(r5)
 100e8e4:	8009883a 	mov	r4,r16
 100e8e8:	183ee83a 	callr	r3
 100e8ec:	0007883a 	mov	r3,zero
 100e8f0:	1805883a 	mov	r2,r3
 100e8f4:	dfc00217 	ldw	ra,8(sp)
 100e8f8:	dc400117 	ldw	r17,4(sp)
 100e8fc:	dc000017 	ldw	r16,0(sp)
 100e900:	dec00304 	addi	sp,sp,12
 100e904:	f800283a 	ret
 100e908:	100eb6c0 	call	100eb6c <_getpid_r>
 100e90c:	100b883a 	mov	r5,r2
 100e910:	8809883a 	mov	r4,r17
 100e914:	800d883a 	mov	r6,r16
 100e918:	dfc00217 	ldw	ra,8(sp)
 100e91c:	dc400117 	ldw	r17,4(sp)
 100e920:	dc000017 	ldw	r16,0(sp)
 100e924:	dec00304 	addi	sp,sp,12
 100e928:	100eb701 	jmpi	100eb70 <_kill_r>
 100e92c:	2007883a 	mov	r3,r4
 100e930:	00800584 	movi	r2,22
 100e934:	88800015 	stw	r2,0(r17)
 100e938:	1805883a 	mov	r2,r3
 100e93c:	dfc00217 	ldw	ra,8(sp)
 100e940:	dc400117 	ldw	r17,4(sp)
 100e944:	dc000017 	ldw	r16,0(sp)
 100e948:	dec00304 	addi	sp,sp,12
 100e94c:	f800283a 	ret
 100e950:	00800584 	movi	r2,22
 100e954:	00ffffc4 	movi	r3,-1
 100e958:	20800015 	stw	r2,0(r4)
 100e95c:	003fe406 	br	100e8f0 <_raise_r+0x5c>

0100e960 <raise>:
 100e960:	008040b4 	movhi	r2,258
 100e964:	10b25404 	addi	r2,r2,-14000
 100e968:	200b883a 	mov	r5,r4
 100e96c:	11000017 	ldw	r4,0(r2)
 100e970:	100e8941 	jmpi	100e894 <_raise_r>

0100e974 <_init_signal_r>:
 100e974:	2080b717 	ldw	r2,732(r4)
 100e978:	defffe04 	addi	sp,sp,-8
 100e97c:	dc000015 	stw	r16,0(sp)
 100e980:	dfc00115 	stw	ra,4(sp)
 100e984:	2021883a 	mov	r16,r4
 100e988:	10000526 	beq	r2,zero,100e9a0 <_init_signal_r+0x2c>
 100e98c:	0005883a 	mov	r2,zero
 100e990:	dfc00117 	ldw	ra,4(sp)
 100e994:	dc000017 	ldw	r16,0(sp)
 100e998:	dec00204 	addi	sp,sp,8
 100e99c:	f800283a 	ret
 100e9a0:	01402004 	movi	r5,128
 100e9a4:	10058d00 	call	10058d0 <_malloc_r>
 100e9a8:	1009883a 	mov	r4,r2
 100e9ac:	8080b715 	stw	r2,732(r16)
 100e9b0:	10000726 	beq	r2,zero,100e9d0 <_init_signal_r+0x5c>
 100e9b4:	0007883a 	mov	r3,zero
 100e9b8:	01402004 	movi	r5,128
 100e9bc:	20c5883a 	add	r2,r4,r3
 100e9c0:	18c00104 	addi	r3,r3,4
 100e9c4:	10000015 	stw	zero,0(r2)
 100e9c8:	197ffc1e 	bne	r3,r5,100e9bc <_init_signal_r+0x48>
 100e9cc:	003fef06 	br	100e98c <_init_signal_r+0x18>
 100e9d0:	00bfffc4 	movi	r2,-1
 100e9d4:	003fee06 	br	100e990 <_init_signal_r+0x1c>

0100e9d8 <_init_signal>:
 100e9d8:	008040b4 	movhi	r2,258
 100e9dc:	10b25404 	addi	r2,r2,-14000
 100e9e0:	11000017 	ldw	r4,0(r2)
 100e9e4:	100e9741 	jmpi	100e974 <_init_signal_r>

0100e9e8 <__sigtramp_r>:
 100e9e8:	defffd04 	addi	sp,sp,-12
 100e9ec:	008007c4 	movi	r2,31
 100e9f0:	dc000115 	stw	r16,4(sp)
 100e9f4:	dfc00215 	stw	ra,8(sp)
 100e9f8:	2021883a 	mov	r16,r4
 100e9fc:	11401336 	bltu	r2,r5,100ea4c <__sigtramp_r+0x64>
 100ea00:	20c0b717 	ldw	r3,732(r4)
 100ea04:	18001f26 	beq	r3,zero,100ea84 <__sigtramp_r+0x9c>
 100ea08:	2945883a 	add	r2,r5,r5
 100ea0c:	1085883a 	add	r2,r2,r2
 100ea10:	10c9883a 	add	r4,r2,r3
 100ea14:	20c00017 	ldw	r3,0(r4)
 100ea18:	18001626 	beq	r3,zero,100ea74 <__sigtramp_r+0x8c>
 100ea1c:	00bfffc4 	movi	r2,-1
 100ea20:	18801626 	beq	r3,r2,100ea7c <__sigtramp_r+0x94>
 100ea24:	00800044 	movi	r2,1
 100ea28:	18800d26 	beq	r3,r2,100ea60 <__sigtramp_r+0x78>
 100ea2c:	20000015 	stw	zero,0(r4)
 100ea30:	2809883a 	mov	r4,r5
 100ea34:	183ee83a 	callr	r3
 100ea38:	0005883a 	mov	r2,zero
 100ea3c:	dfc00217 	ldw	ra,8(sp)
 100ea40:	dc000117 	ldw	r16,4(sp)
 100ea44:	dec00304 	addi	sp,sp,12
 100ea48:	f800283a 	ret
 100ea4c:	00bfffc4 	movi	r2,-1
 100ea50:	dfc00217 	ldw	ra,8(sp)
 100ea54:	dc000117 	ldw	r16,4(sp)
 100ea58:	dec00304 	addi	sp,sp,12
 100ea5c:	f800283a 	ret
 100ea60:	008000c4 	movi	r2,3
 100ea64:	dfc00217 	ldw	ra,8(sp)
 100ea68:	dc000117 	ldw	r16,4(sp)
 100ea6c:	dec00304 	addi	sp,sp,12
 100ea70:	f800283a 	ret
 100ea74:	00800044 	movi	r2,1
 100ea78:	003ff006 	br	100ea3c <__sigtramp_r+0x54>
 100ea7c:	00800084 	movi	r2,2
 100ea80:	003fee06 	br	100ea3c <__sigtramp_r+0x54>
 100ea84:	d9400015 	stw	r5,0(sp)
 100ea88:	100e9740 	call	100e974 <_init_signal_r>
 100ea8c:	d9400017 	ldw	r5,0(sp)
 100ea90:	103fee1e 	bne	r2,zero,100ea4c <__sigtramp_r+0x64>
 100ea94:	80c0b717 	ldw	r3,732(r16)
 100ea98:	003fdb06 	br	100ea08 <__sigtramp_r+0x20>

0100ea9c <__sigtramp>:
 100ea9c:	008040b4 	movhi	r2,258
 100eaa0:	10b25404 	addi	r2,r2,-14000
 100eaa4:	200b883a 	mov	r5,r4
 100eaa8:	11000017 	ldw	r4,0(r2)
 100eaac:	100e9e81 	jmpi	100e9e8 <__sigtramp_r>

0100eab0 <_signal_r>:
 100eab0:	defffc04 	addi	sp,sp,-16
 100eab4:	008007c4 	movi	r2,31
 100eab8:	dc800215 	stw	r18,8(sp)
 100eabc:	dc400115 	stw	r17,4(sp)
 100eac0:	dc000015 	stw	r16,0(sp)
 100eac4:	dfc00315 	stw	ra,12(sp)
 100eac8:	2823883a 	mov	r17,r5
 100eacc:	00ffffc4 	movi	r3,-1
 100ead0:	3025883a 	mov	r18,r6
 100ead4:	2021883a 	mov	r16,r4
 100ead8:	1140092e 	bgeu	r2,r5,100eb00 <_signal_r+0x50>
 100eadc:	00800584 	movi	r2,22
 100eae0:	20800015 	stw	r2,0(r4)
 100eae4:	1805883a 	mov	r2,r3
 100eae8:	dfc00317 	ldw	ra,12(sp)
 100eaec:	dc800217 	ldw	r18,8(sp)
 100eaf0:	dc400117 	ldw	r17,4(sp)
 100eaf4:	dc000017 	ldw	r16,0(sp)
 100eaf8:	dec00404 	addi	sp,sp,16
 100eafc:	f800283a 	ret
 100eb00:	2140b717 	ldw	r5,732(r4)
 100eb04:	28000c26 	beq	r5,zero,100eb38 <_signal_r+0x88>
 100eb08:	8c45883a 	add	r2,r17,r17
 100eb0c:	1085883a 	add	r2,r2,r2
 100eb10:	1145883a 	add	r2,r2,r5
 100eb14:	10c00017 	ldw	r3,0(r2)
 100eb18:	14800015 	stw	r18,0(r2)
 100eb1c:	1805883a 	mov	r2,r3
 100eb20:	dfc00317 	ldw	ra,12(sp)
 100eb24:	dc800217 	ldw	r18,8(sp)
 100eb28:	dc400117 	ldw	r17,4(sp)
 100eb2c:	dc000017 	ldw	r16,0(sp)
 100eb30:	dec00404 	addi	sp,sp,16
 100eb34:	f800283a 	ret
 100eb38:	100e9740 	call	100e974 <_init_signal_r>
 100eb3c:	1000021e 	bne	r2,zero,100eb48 <_signal_r+0x98>
 100eb40:	8140b717 	ldw	r5,732(r16)
 100eb44:	003ff006 	br	100eb08 <_signal_r+0x58>
 100eb48:	00ffffc4 	movi	r3,-1
 100eb4c:	003fe506 	br	100eae4 <_signal_r+0x34>

0100eb50 <signal>:
 100eb50:	018040b4 	movhi	r6,258
 100eb54:	31b25404 	addi	r6,r6,-14000
 100eb58:	2007883a 	mov	r3,r4
 100eb5c:	31000017 	ldw	r4,0(r6)
 100eb60:	280d883a 	mov	r6,r5
 100eb64:	180b883a 	mov	r5,r3
 100eb68:	100eab01 	jmpi	100eab0 <_signal_r>

0100eb6c <_getpid_r>:
 100eb6c:	10160ec1 	jmpi	10160ec <getpid>

0100eb70 <_kill_r>:
 100eb70:	defffd04 	addi	sp,sp,-12
 100eb74:	dc000015 	stw	r16,0(sp)
 100eb78:	040040b4 	movhi	r16,258
 100eb7c:	843a4204 	addi	r16,r16,-5880
 100eb80:	dc400115 	stw	r17,4(sp)
 100eb84:	80000015 	stw	zero,0(r16)
 100eb88:	2023883a 	mov	r17,r4
 100eb8c:	2809883a 	mov	r4,r5
 100eb90:	300b883a 	mov	r5,r6
 100eb94:	dfc00215 	stw	ra,8(sp)
 100eb98:	10163ec0 	call	10163ec <kill>
 100eb9c:	1007883a 	mov	r3,r2
 100eba0:	00bfffc4 	movi	r2,-1
 100eba4:	18800626 	beq	r3,r2,100ebc0 <_kill_r+0x50>
 100eba8:	1805883a 	mov	r2,r3
 100ebac:	dfc00217 	ldw	ra,8(sp)
 100ebb0:	dc400117 	ldw	r17,4(sp)
 100ebb4:	dc000017 	ldw	r16,0(sp)
 100ebb8:	dec00304 	addi	sp,sp,12
 100ebbc:	f800283a 	ret
 100ebc0:	80800017 	ldw	r2,0(r16)
 100ebc4:	103ff826 	beq	r2,zero,100eba8 <_kill_r+0x38>
 100ebc8:	88800015 	stw	r2,0(r17)
 100ebcc:	1805883a 	mov	r2,r3
 100ebd0:	dfc00217 	ldw	ra,8(sp)
 100ebd4:	dc400117 	ldw	r17,4(sp)
 100ebd8:	dc000017 	ldw	r16,0(sp)
 100ebdc:	dec00304 	addi	sp,sp,12
 100ebe0:	f800283a 	ret

0100ebe4 <sprintf>:
 100ebe4:	deffe504 	addi	sp,sp,-108
 100ebe8:	2013883a 	mov	r9,r4
 100ebec:	dfc01815 	stw	ra,96(sp)
 100ebf0:	d9801915 	stw	r6,100(sp)
 100ebf4:	d9c01a15 	stw	r7,104(sp)
 100ebf8:	d8801904 	addi	r2,sp,100
 100ebfc:	d8800015 	stw	r2,0(sp)
 100ec00:	008040b4 	movhi	r2,258
 100ec04:	10b25404 	addi	r2,r2,-14000
 100ec08:	11000017 	ldw	r4,0(r2)
 100ec0c:	d9c00017 	ldw	r7,0(sp)
 100ec10:	00808204 	movi	r2,520
 100ec14:	00e00034 	movhi	r3,32768
 100ec18:	18ffffc4 	addi	r3,r3,-1
 100ec1c:	280d883a 	mov	r6,r5
 100ec20:	d880040d 	sth	r2,16(sp)
 100ec24:	d9400104 	addi	r5,sp,4
 100ec28:	00bfffc4 	movi	r2,-1
 100ec2c:	d8c00615 	stw	r3,24(sp)
 100ec30:	d8c00315 	stw	r3,12(sp)
 100ec34:	da400515 	stw	r9,20(sp)
 100ec38:	d880048d 	sth	r2,18(sp)
 100ec3c:	da400115 	stw	r9,4(sp)
 100ec40:	10065b40 	call	10065b4 <___vfprintf_internal_r>
 100ec44:	d8c00117 	ldw	r3,4(sp)
 100ec48:	18000005 	stb	zero,0(r3)
 100ec4c:	dfc01817 	ldw	ra,96(sp)
 100ec50:	dec01b04 	addi	sp,sp,108
 100ec54:	f800283a 	ret

0100ec58 <_sprintf_r>:
 100ec58:	deffe604 	addi	sp,sp,-104
 100ec5c:	2813883a 	mov	r9,r5
 100ec60:	dfc01815 	stw	ra,96(sp)
 100ec64:	d9c01915 	stw	r7,100(sp)
 100ec68:	d8801904 	addi	r2,sp,100
 100ec6c:	d8800015 	stw	r2,0(sp)
 100ec70:	100f883a 	mov	r7,r2
 100ec74:	00808204 	movi	r2,520
 100ec78:	00e00034 	movhi	r3,32768
 100ec7c:	18ffffc4 	addi	r3,r3,-1
 100ec80:	d880040d 	sth	r2,16(sp)
 100ec84:	d9400104 	addi	r5,sp,4
 100ec88:	00bfffc4 	movi	r2,-1
 100ec8c:	d8c00615 	stw	r3,24(sp)
 100ec90:	d8c00315 	stw	r3,12(sp)
 100ec94:	da400515 	stw	r9,20(sp)
 100ec98:	d880048d 	sth	r2,18(sp)
 100ec9c:	da400115 	stw	r9,4(sp)
 100eca0:	10065b40 	call	10065b4 <___vfprintf_internal_r>
 100eca4:	d8c00117 	ldw	r3,4(sp)
 100eca8:	18000005 	stb	zero,0(r3)
 100ecac:	dfc01817 	ldw	ra,96(sp)
 100ecb0:	dec01a04 	addi	sp,sp,104
 100ecb4:	f800283a 	ret

0100ecb8 <__sclose>:
 100ecb8:	2940038f 	ldh	r5,14(r5)
 100ecbc:	10124ac1 	jmpi	10124ac <_close_r>

0100ecc0 <__sseek>:
 100ecc0:	defffe04 	addi	sp,sp,-8
 100ecc4:	dc000015 	stw	r16,0(sp)
 100ecc8:	2821883a 	mov	r16,r5
 100eccc:	2940038f 	ldh	r5,14(r5)
 100ecd0:	dfc00115 	stw	ra,4(sp)
 100ecd4:	10132ac0 	call	10132ac <_lseek_r>
 100ecd8:	1007883a 	mov	r3,r2
 100ecdc:	00bfffc4 	movi	r2,-1
 100ece0:	18800926 	beq	r3,r2,100ed08 <__sseek+0x48>
 100ece4:	8080030b 	ldhu	r2,12(r16)
 100ece8:	80c01415 	stw	r3,80(r16)
 100ecec:	10840014 	ori	r2,r2,4096
 100ecf0:	8080030d 	sth	r2,12(r16)
 100ecf4:	1805883a 	mov	r2,r3
 100ecf8:	dfc00117 	ldw	ra,4(sp)
 100ecfc:	dc000017 	ldw	r16,0(sp)
 100ed00:	dec00204 	addi	sp,sp,8
 100ed04:	f800283a 	ret
 100ed08:	8080030b 	ldhu	r2,12(r16)
 100ed0c:	10bbffcc 	andi	r2,r2,61439
 100ed10:	8080030d 	sth	r2,12(r16)
 100ed14:	1805883a 	mov	r2,r3
 100ed18:	dfc00117 	ldw	ra,4(sp)
 100ed1c:	dc000017 	ldw	r16,0(sp)
 100ed20:	dec00204 	addi	sp,sp,8
 100ed24:	f800283a 	ret

0100ed28 <__swrite>:
 100ed28:	2880030b 	ldhu	r2,12(r5)
 100ed2c:	defffb04 	addi	sp,sp,-20
 100ed30:	dcc00315 	stw	r19,12(sp)
 100ed34:	1080400c 	andi	r2,r2,256
 100ed38:	dc800215 	stw	r18,8(sp)
 100ed3c:	dc400115 	stw	r17,4(sp)
 100ed40:	dc000015 	stw	r16,0(sp)
 100ed44:	3027883a 	mov	r19,r6
 100ed48:	3825883a 	mov	r18,r7
 100ed4c:	dfc00415 	stw	ra,16(sp)
 100ed50:	2821883a 	mov	r16,r5
 100ed54:	000d883a 	mov	r6,zero
 100ed58:	01c00084 	movi	r7,2
 100ed5c:	2023883a 	mov	r17,r4
 100ed60:	10000226 	beq	r2,zero,100ed6c <__swrite+0x44>
 100ed64:	2940038f 	ldh	r5,14(r5)
 100ed68:	10132ac0 	call	10132ac <_lseek_r>
 100ed6c:	8080030b 	ldhu	r2,12(r16)
 100ed70:	8140038f 	ldh	r5,14(r16)
 100ed74:	8809883a 	mov	r4,r17
 100ed78:	10bbffcc 	andi	r2,r2,61439
 100ed7c:	980d883a 	mov	r6,r19
 100ed80:	900f883a 	mov	r7,r18
 100ed84:	8080030d 	sth	r2,12(r16)
 100ed88:	dfc00417 	ldw	ra,16(sp)
 100ed8c:	dcc00317 	ldw	r19,12(sp)
 100ed90:	dc800217 	ldw	r18,8(sp)
 100ed94:	dc400117 	ldw	r17,4(sp)
 100ed98:	dc000017 	ldw	r16,0(sp)
 100ed9c:	dec00504 	addi	sp,sp,20
 100eda0:	10124341 	jmpi	1012434 <_write_r>

0100eda4 <__sread>:
 100eda4:	defffe04 	addi	sp,sp,-8
 100eda8:	dc000015 	stw	r16,0(sp)
 100edac:	2821883a 	mov	r16,r5
 100edb0:	2940038f 	ldh	r5,14(r5)
 100edb4:	dfc00115 	stw	ra,4(sp)
 100edb8:	10133240 	call	1013324 <_read_r>
 100edbc:	1007883a 	mov	r3,r2
 100edc0:	10000816 	blt	r2,zero,100ede4 <__sread+0x40>
 100edc4:	80801417 	ldw	r2,80(r16)
 100edc8:	10c5883a 	add	r2,r2,r3
 100edcc:	80801415 	stw	r2,80(r16)
 100edd0:	1805883a 	mov	r2,r3
 100edd4:	dfc00117 	ldw	ra,4(sp)
 100edd8:	dc000017 	ldw	r16,0(sp)
 100eddc:	dec00204 	addi	sp,sp,8
 100ede0:	f800283a 	ret
 100ede4:	8080030b 	ldhu	r2,12(r16)
 100ede8:	10bbffcc 	andi	r2,r2,61439
 100edec:	8080030d 	sth	r2,12(r16)
 100edf0:	1805883a 	mov	r2,r3
 100edf4:	dfc00117 	ldw	ra,4(sp)
 100edf8:	dc000017 	ldw	r16,0(sp)
 100edfc:	dec00204 	addi	sp,sp,8
 100ee00:	f800283a 	ret

0100ee04 <match>:
 100ee04:	21800017 	ldw	r6,0(r4)
 100ee08:	01c01004 	movi	r7,64
 100ee0c:	02001684 	movi	r8,90
 100ee10:	28800007 	ldb	r2,0(r5)
 100ee14:	29400044 	addi	r5,r5,1
 100ee18:	10000826 	beq	r2,zero,100ee3c <match+0x38>
 100ee1c:	31800044 	addi	r6,r6,1
 100ee20:	30c00007 	ldb	r3,0(r6)
 100ee24:	38c0020e 	bge	r7,r3,100ee30 <match+0x2c>
 100ee28:	40c00116 	blt	r8,r3,100ee30 <match+0x2c>
 100ee2c:	18c00804 	addi	r3,r3,32
 100ee30:	18bff726 	beq	r3,r2,100ee10 <match+0xc>
 100ee34:	0005883a 	mov	r2,zero
 100ee38:	f800283a 	ret
 100ee3c:	30800044 	addi	r2,r6,1
 100ee40:	20800015 	stw	r2,0(r4)
 100ee44:	00800044 	movi	r2,1
 100ee48:	f800283a 	ret

0100ee4c <_strtod_r>:
 100ee4c:	deffde04 	addi	sp,sp,-136
 100ee50:	df002015 	stw	fp,128(sp)
 100ee54:	dd401d15 	stw	r21,116(sp)
 100ee58:	dc401915 	stw	r17,100(sp)
 100ee5c:	dfc02115 	stw	ra,132(sp)
 100ee60:	ddc01f15 	stw	r23,124(sp)
 100ee64:	dd801e15 	stw	r22,120(sp)
 100ee68:	dd001c15 	stw	r20,112(sp)
 100ee6c:	dcc01b15 	stw	r19,108(sp)
 100ee70:	dc801a15 	stw	r18,104(sp)
 100ee74:	dc001815 	stw	r16,96(sp)
 100ee78:	2823883a 	mov	r17,r5
 100ee7c:	202b883a 	mov	r21,r4
 100ee80:	d9801515 	stw	r6,84(sp)
 100ee84:	d8000915 	stw	zero,36(sp)
 100ee88:	d8000a15 	stw	zero,40(sp)
 100ee8c:	d9400415 	stw	r5,16(sp)
 100ee90:	df000904 	addi	fp,sp,36
 100ee94:	da000417 	ldw	r8,16(sp)
 100ee98:	00800b44 	movi	r2,45
 100ee9c:	40c00003 	ldbu	r3,0(r8)
 100eea0:	10c03536 	bltu	r2,r3,100ef78 <_strtod_r+0x12c>
 100eea4:	18c5883a 	add	r2,r3,r3
 100eea8:	1085883a 	add	r2,r2,r2
 100eeac:	00c04074 	movhi	r3,257
 100eeb0:	18fbb004 	addi	r3,r3,-4416
 100eeb4:	10c5883a 	add	r2,r2,r3
 100eeb8:	11000017 	ldw	r4,0(r2)
 100eebc:	2000683a 	jmp	r4
 100eec0:	0100f0b4 	movhi	r4,962
 100eec4:	0100ef78 	rdprs	r4,zero,957
 100eec8:	0100ef78 	rdprs	r4,zero,957
 100eecc:	0100ef78 	rdprs	r4,zero,957
 100eed0:	0100ef78 	rdprs	r4,zero,957
 100eed4:	0100ef78 	rdprs	r4,zero,957
 100eed8:	0100ef78 	rdprs	r4,zero,957
 100eedc:	0100ef78 	rdprs	r4,zero,957
 100eee0:	0100ef78 	rdprs	r4,zero,957
 100eee4:	0100f3cc 	andi	r4,zero,975
 100eee8:	0100f3cc 	andi	r4,zero,975
 100eeec:	0100f3cc 	andi	r4,zero,975
 100eef0:	0100f3cc 	andi	r4,zero,975
 100eef4:	0100f3cc 	andi	r4,zero,975
 100eef8:	0100ef78 	rdprs	r4,zero,957
 100eefc:	0100ef78 	rdprs	r4,zero,957
 100ef00:	0100ef78 	rdprs	r4,zero,957
 100ef04:	0100ef78 	rdprs	r4,zero,957
 100ef08:	0100ef78 	rdprs	r4,zero,957
 100ef0c:	0100ef78 	rdprs	r4,zero,957
 100ef10:	0100ef78 	rdprs	r4,zero,957
 100ef14:	0100ef78 	rdprs	r4,zero,957
 100ef18:	0100ef78 	rdprs	r4,zero,957
 100ef1c:	0100ef78 	rdprs	r4,zero,957
 100ef20:	0100ef78 	rdprs	r4,zero,957
 100ef24:	0100ef78 	rdprs	r4,zero,957
 100ef28:	0100ef78 	rdprs	r4,zero,957
 100ef2c:	0100ef78 	rdprs	r4,zero,957
 100ef30:	0100ef78 	rdprs	r4,zero,957
 100ef34:	0100ef78 	rdprs	r4,zero,957
 100ef38:	0100ef78 	rdprs	r4,zero,957
 100ef3c:	0100ef78 	rdprs	r4,zero,957
 100ef40:	0100f3cc 	andi	r4,zero,975
 100ef44:	0100ef78 	rdprs	r4,zero,957
 100ef48:	0100ef78 	rdprs	r4,zero,957
 100ef4c:	0100ef78 	rdprs	r4,zero,957
 100ef50:	0100ef78 	rdprs	r4,zero,957
 100ef54:	0100ef78 	rdprs	r4,zero,957
 100ef58:	0100ef78 	rdprs	r4,zero,957
 100ef5c:	0100ef78 	rdprs	r4,zero,957
 100ef60:	0100ef78 	rdprs	r4,zero,957
 100ef64:	0100ef78 	rdprs	r4,zero,957
 100ef68:	0100ef78 	rdprs	r4,zero,957
 100ef6c:	0100f3ac 	andhi	r4,zero,974
 100ef70:	0100ef78 	rdprs	r4,zero,957
 100ef74:	0100f3d8 	cmpnei	r4,zero,975
 100ef78:	d8001115 	stw	zero,68(sp)
 100ef7c:	40c00007 	ldb	r3,0(r8)
 100ef80:	00800c04 	movi	r2,48
 100ef84:	1880d026 	beq	r3,r2,100f2c8 <_strtod_r+0x47c>
 100ef88:	001f883a 	mov	r15,zero
 100ef8c:	41000007 	ldb	r4,0(r8)
 100ef90:	00c00bc4 	movi	r3,47
 100ef94:	402d883a 	mov	r22,r8
 100ef98:	1903470e 	bge	r3,r4,100fcb8 <_strtod_r+0xe6c>
 100ef9c:	00800e44 	movi	r2,57
 100efa0:	11034516 	blt	r2,r4,100fcb8 <_strtod_r+0xe6c>
 100efa4:	180f883a 	mov	r7,r3
 100efa8:	1013883a 	mov	r9,r2
 100efac:	4007883a 	mov	r3,r8
 100efb0:	000d883a 	mov	r6,zero
 100efb4:	0029883a 	mov	r20,zero
 100efb8:	0021883a 	mov	r16,zero
 100efbc:	01400204 	movi	r5,8
 100efc0:	028003c4 	movi	r10,15
 100efc4:	29803116 	blt	r5,r6,100f08c <_strtod_r+0x240>
 100efc8:	a08002a4 	muli	r2,r20,10
 100efcc:	1105883a 	add	r2,r2,r4
 100efd0:	153ff404 	addi	r20,r2,-48
 100efd4:	1a000044 	addi	r8,r3,1
 100efd8:	da000415 	stw	r8,16(sp)
 100efdc:	41000007 	ldb	r4,0(r8)
 100efe0:	31800044 	addi	r6,r6,1
 100efe4:	4007883a 	mov	r3,r8
 100efe8:	3900010e 	bge	r7,r4,100eff0 <_strtod_r+0x1a4>
 100efec:	493ff50e 	bge	r9,r4,100efc4 <_strtod_r+0x178>
 100eff0:	00800b84 	movi	r2,46
 100eff4:	2080c126 	beq	r4,r2,100f2fc <_strtod_r+0x4b0>
 100eff8:	3027883a 	mov	r19,r6
 100effc:	0025883a 	mov	r18,zero
 100f000:	0015883a 	mov	r10,zero
 100f004:	000f883a 	mov	r7,zero
 100f008:	00801944 	movi	r2,101
 100f00c:	20802426 	beq	r4,r2,100f0a0 <_strtod_r+0x254>
 100f010:	00801144 	movi	r2,69
 100f014:	20802226 	beq	r4,r2,100f0a0 <_strtod_r+0x254>
 100f018:	9816c03a 	cmpne	r11,r19,zero
 100f01c:	000b883a 	mov	r5,zero
 100f020:	5800631e 	bne	r11,zero,100f1b0 <_strtod_r+0x364>
 100f024:	3800c126 	beq	r7,zero,100f32c <_strtod_r+0x4e0>
 100f028:	d8c01517 	ldw	r3,84(sp)
 100f02c:	18000226 	beq	r3,zero,100f038 <_strtod_r+0x1ec>
 100f030:	d8800417 	ldw	r2,16(sp)
 100f034:	18800015 	stw	r2,0(r3)
 100f038:	d9001117 	ldw	r4,68(sp)
 100f03c:	2005003a 	cmpeq	r2,r4,zero
 100f040:	10001f1e 	bne	r2,zero,100f0c0 <_strtod_r+0x274>
 100f044:	e0800017 	ldw	r2,0(fp)
 100f048:	e0c00117 	ldw	r3,4(fp)
 100f04c:	1009883a 	mov	r4,r2
 100f050:	1960003c 	xorhi	r5,r3,32768
 100f054:	2005883a 	mov	r2,r4
 100f058:	2807883a 	mov	r3,r5
 100f05c:	dfc02117 	ldw	ra,132(sp)
 100f060:	df002017 	ldw	fp,128(sp)
 100f064:	ddc01f17 	ldw	r23,124(sp)
 100f068:	dd801e17 	ldw	r22,120(sp)
 100f06c:	dd401d17 	ldw	r21,116(sp)
 100f070:	dd001c17 	ldw	r20,112(sp)
 100f074:	dcc01b17 	ldw	r19,108(sp)
 100f078:	dc801a17 	ldw	r18,104(sp)
 100f07c:	dc401917 	ldw	r17,100(sp)
 100f080:	dc001817 	ldw	r16,96(sp)
 100f084:	dec02204 	addi	sp,sp,136
 100f088:	f800283a 	ret
 100f08c:	51bfd116 	blt	r10,r6,100efd4 <_strtod_r+0x188>
 100f090:	808002a4 	muli	r2,r16,10
 100f094:	1105883a 	add	r2,r2,r4
 100f098:	143ff404 	addi	r16,r2,-48
 100f09c:	003fcd06 	br	100efd4 <_strtod_r+0x188>
 100f0a0:	9816c03a 	cmpne	r11,r19,zero
 100f0a4:	5800091e 	bne	r11,zero,100f0cc <_strtod_r+0x280>
 100f0a8:	3800081e 	bne	r7,zero,100f0cc <_strtod_r+0x280>
 100f0ac:	7805003a 	cmpeq	r2,r15,zero
 100f0b0:	10000626 	beq	r2,zero,100f0cc <_strtod_r+0x280>
 100f0b4:	d8001115 	stw	zero,68(sp)
 100f0b8:	dc400415 	stw	r17,16(sp)
 100f0bc:	003fda06 	br	100f028 <_strtod_r+0x1dc>
 100f0c0:	e1000017 	ldw	r4,0(fp)
 100f0c4:	e1400117 	ldw	r5,4(fp)
 100f0c8:	003fe206 	br	100f054 <_strtod_r+0x208>
 100f0cc:	dc400417 	ldw	r17,16(sp)
 100f0d0:	00800ac4 	movi	r2,43
 100f0d4:	8a000044 	addi	r8,r17,1
 100f0d8:	da000415 	stw	r8,16(sp)
 100f0dc:	88c00047 	ldb	r3,1(r17)
 100f0e0:	4009883a 	mov	r4,r8
 100f0e4:	1880bf26 	beq	r3,r2,100f3e4 <_strtod_r+0x598>
 100f0e8:	00800b44 	movi	r2,45
 100f0ec:	18834526 	beq	r3,r2,100fe04 <_strtod_r+0xfb8>
 100f0f0:	1809883a 	mov	r4,r3
 100f0f4:	20fff404 	addi	r3,r4,-48
 100f0f8:	00800244 	movi	r2,9
 100f0fc:	001d883a 	mov	r14,zero
 100f100:	10c0bf36 	bltu	r2,r3,100f400 <_strtod_r+0x5b4>
 100f104:	00800c04 	movi	r2,48
 100f108:	2080061e 	bne	r4,r2,100f124 <_strtod_r+0x2d8>
 100f10c:	da000417 	ldw	r8,16(sp)
 100f110:	2005883a 	mov	r2,r4
 100f114:	42000044 	addi	r8,r8,1
 100f118:	da000415 	stw	r8,16(sp)
 100f11c:	41000007 	ldb	r4,0(r8)
 100f120:	20bffc26 	beq	r4,r2,100f114 <_strtod_r+0x2c8>
 100f124:	20fff3c4 	addi	r3,r4,-49
 100f128:	00800204 	movi	r2,8
 100f12c:	10ffbb36 	bltu	r2,r3,100f01c <_strtod_r+0x1d0>
 100f130:	da000417 	ldw	r8,16(sp)
 100f134:	227ff404 	addi	r9,r4,-48
 100f138:	03000bc4 	movi	r12,47
 100f13c:	4007883a 	mov	r3,r8
 100f140:	42000044 	addi	r8,r8,1
 100f144:	da000415 	stw	r8,16(sp)
 100f148:	41000007 	ldb	r4,0(r8)
 100f14c:	61000d0e 	bge	r12,r4,100f184 <_strtod_r+0x338>
 100f150:	00800e44 	movi	r2,57
 100f154:	11000b16 	blt	r2,r4,100f184 <_strtod_r+0x338>
 100f158:	601b883a 	mov	r13,r12
 100f15c:	1019883a 	mov	r12,r2
 100f160:	00000106 	br	100f168 <_strtod_r+0x31c>
 100f164:	61000716 	blt	r12,r4,100f184 <_strtod_r+0x338>
 100f168:	488002a4 	muli	r2,r9,10
 100f16c:	42000044 	addi	r8,r8,1
 100f170:	da000415 	stw	r8,16(sp)
 100f174:	2085883a 	add	r2,r4,r2
 100f178:	41000007 	ldb	r4,0(r8)
 100f17c:	127ff404 	addi	r9,r2,-48
 100f180:	693ff816 	blt	r13,r4,100f164 <_strtod_r+0x318>
 100f184:	40c7c83a 	sub	r3,r8,r3
 100f188:	00800204 	movi	r2,8
 100f18c:	10c2e416 	blt	r2,r3,100fd20 <_strtod_r+0xed4>
 100f190:	009387c4 	movi	r2,19999
 100f194:	480b883a 	mov	r5,r9
 100f198:	1240010e 	bge	r2,r9,100f1a0 <_strtod_r+0x354>
 100f19c:	100b883a 	mov	r5,r2
 100f1a0:	7005003a 	cmpeq	r2,r14,zero
 100f1a4:	103f9e1e 	bne	r2,zero,100f020 <_strtod_r+0x1d4>
 100f1a8:	014bc83a 	sub	r5,zero,r5
 100f1ac:	583f9d26 	beq	r11,zero,100f024 <_strtod_r+0x1d8>
 100f1b0:	2a8bc83a 	sub	r5,r5,r10
 100f1b4:	d9400f15 	stw	r5,60(sp)
 100f1b8:	30007a1e 	bne	r6,zero,100f3a4 <_strtod_r+0x558>
 100f1bc:	dcc01215 	stw	r19,72(sp)
 100f1c0:	00800404 	movi	r2,16
 100f1c4:	9825883a 	mov	r18,r19
 100f1c8:	14c0010e 	bge	r2,r19,100f1d0 <_strtod_r+0x384>
 100f1cc:	1025883a 	mov	r18,r2
 100f1d0:	a009883a 	mov	r4,r20
 100f1d4:	10152600 	call	1015260 <__floatunsidf>
 100f1d8:	100f883a 	mov	r7,r2
 100f1dc:	e0800015 	stw	r2,0(fp)
 100f1e0:	00800244 	movi	r2,9
 100f1e4:	e0c00115 	stw	r3,4(fp)
 100f1e8:	1480160e 	bge	r2,r18,100f244 <_strtod_r+0x3f8>
 100f1ec:	900c90fa 	slli	r6,r18,3
 100f1f0:	010040b4 	movhi	r4,258
 100f1f4:	2129a604 	addi	r4,r4,-22888
 100f1f8:	180b883a 	mov	r5,r3
 100f1fc:	310d883a 	add	r6,r6,r4
 100f200:	30ffef17 	ldw	r3,-68(r6)
 100f204:	30bfee17 	ldw	r2,-72(r6)
 100f208:	3809883a 	mov	r4,r7
 100f20c:	180f883a 	mov	r7,r3
 100f210:	100d883a 	mov	r6,r2
 100f214:	10146d00 	call	10146d0 <__muldf3>
 100f218:	8009883a 	mov	r4,r16
 100f21c:	1823883a 	mov	r17,r3
 100f220:	1021883a 	mov	r16,r2
 100f224:	10152600 	call	1015260 <__floatunsidf>
 100f228:	880b883a 	mov	r5,r17
 100f22c:	180f883a 	mov	r7,r3
 100f230:	8009883a 	mov	r4,r16
 100f234:	100d883a 	mov	r6,r2
 100f238:	101465c0 	call	101465c <__adddf3>
 100f23c:	e0c00115 	stw	r3,4(fp)
 100f240:	e0800015 	stw	r2,0(fp)
 100f244:	010003c4 	movi	r4,15
 100f248:	24c09816 	blt	r4,r19,100f4ac <_strtod_r+0x660>
 100f24c:	d9800f17 	ldw	r6,60(sp)
 100f250:	303f7526 	beq	r6,zero,100f028 <_strtod_r+0x1dc>
 100f254:	0183be0e 	bge	zero,r6,1010150 <_strtod_r+0x1304>
 100f258:	00800584 	movi	r2,22
 100f25c:	1182b20e 	bge	r2,r6,100fd28 <_strtod_r+0xedc>
 100f260:	d8c00f17 	ldw	r3,60(sp)
 100f264:	24e3c83a 	sub	r17,r4,r19
 100f268:	88800584 	addi	r2,r17,22
 100f26c:	10c08f16 	blt	r2,r3,100f4ac <_strtod_r+0x660>
 100f270:	880890fa 	slli	r4,r17,3
 100f274:	040040b4 	movhi	r16,258
 100f278:	8429a604 	addi	r16,r16,-22888
 100f27c:	e0800017 	ldw	r2,0(fp)
 100f280:	2409883a 	add	r4,r4,r16
 100f284:	22000017 	ldw	r8,0(r4)
 100f288:	22400117 	ldw	r9,4(r4)
 100f28c:	e0c00117 	ldw	r3,4(fp)
 100f290:	1009883a 	mov	r4,r2
 100f294:	480f883a 	mov	r7,r9
 100f298:	180b883a 	mov	r5,r3
 100f29c:	400d883a 	mov	r6,r8
 100f2a0:	10146d00 	call	10146d0 <__muldf3>
 100f2a4:	d9000f17 	ldw	r4,60(sp)
 100f2a8:	180b883a 	mov	r5,r3
 100f2ac:	2455c83a 	sub	r10,r4,r17
 100f2b0:	501490fa 	slli	r10,r10,3
 100f2b4:	1009883a 	mov	r4,r2
 100f2b8:	5415883a 	add	r10,r10,r16
 100f2bc:	52000017 	ldw	r8,0(r10)
 100f2c0:	52400117 	ldw	r9,4(r10)
 100f2c4:	0002a206 	br	100fd50 <_strtod_r+0xf04>
 100f2c8:	40c00047 	ldb	r3,1(r8)
 100f2cc:	00801604 	movi	r2,88
 100f2d0:	18804e26 	beq	r3,r2,100f40c <_strtod_r+0x5c0>
 100f2d4:	00801e04 	movi	r2,120
 100f2d8:	18804c26 	beq	r3,r2,100f40c <_strtod_r+0x5c0>
 100f2dc:	42000044 	addi	r8,r8,1
 100f2e0:	da000415 	stw	r8,16(sp)
 100f2e4:	40c00007 	ldb	r3,0(r8)
 100f2e8:	00800c04 	movi	r2,48
 100f2ec:	18bffb26 	beq	r3,r2,100f2dc <_strtod_r+0x490>
 100f2f0:	183f4d26 	beq	r3,zero,100f028 <_strtod_r+0x1dc>
 100f2f4:	03c00044 	movi	r15,1
 100f2f8:	003f2406 	br	100ef8c <_strtod_r+0x140>
 100f2fc:	42000044 	addi	r8,r8,1
 100f300:	da000415 	stw	r8,16(sp)
 100f304:	19000047 	ldb	r4,1(r3)
 100f308:	3000b726 	beq	r6,zero,100f5e8 <_strtod_r+0x79c>
 100f30c:	3027883a 	mov	r19,r6
 100f310:	0015883a 	mov	r10,zero
 100f314:	000f883a 	mov	r7,zero
 100f318:	227ff404 	addi	r9,r4,-48
 100f31c:	00800244 	movi	r2,9
 100f320:	1242592e 	bgeu	r2,r9,100fc88 <_strtod_r+0xe3c>
 100f324:	04800044 	movi	r18,1
 100f328:	003f3706 	br	100f008 <_strtod_r+0x1bc>
 100f32c:	7804c03a 	cmpne	r2,r15,zero
 100f330:	103f3d1e 	bne	r2,zero,100f028 <_strtod_r+0x1dc>
 100f334:	9004c03a 	cmpne	r2,r18,zero
 100f338:	103f5e1e 	bne	r2,zero,100f0b4 <_strtod_r+0x268>
 100f33c:	00801384 	movi	r2,78
 100f340:	2083a226 	beq	r4,r2,10101cc <_strtod_r+0x1380>
 100f344:	11039d16 	blt	r2,r4,10101bc <_strtod_r+0x1370>
 100f348:	00801244 	movi	r2,73
 100f34c:	20bf591e 	bne	r4,r2,100f0b4 <_strtod_r+0x268>
 100f350:	dc000404 	addi	r16,sp,16
 100f354:	8009883a 	mov	r4,r16
 100f358:	014040b4 	movhi	r5,258
 100f35c:	2969ef04 	addi	r5,r5,-22596
 100f360:	100ee040 	call	100ee04 <match>
 100f364:	103f5326 	beq	r2,zero,100f0b4 <_strtod_r+0x268>
 100f368:	d8800417 	ldw	r2,16(sp)
 100f36c:	8009883a 	mov	r4,r16
 100f370:	014040b4 	movhi	r5,258
 100f374:	2969f004 	addi	r5,r5,-22592
 100f378:	123fffc4 	addi	r8,r2,-1
 100f37c:	da000415 	stw	r8,16(sp)
 100f380:	100ee040 	call	100ee04 <match>
 100f384:	1000031e 	bne	r2,zero,100f394 <_strtod_r+0x548>
 100f388:	d8800417 	ldw	r2,16(sp)
 100f38c:	12000044 	addi	r8,r2,1
 100f390:	da000415 	stw	r8,16(sp)
 100f394:	019ffc34 	movhi	r6,32752
 100f398:	e1800115 	stw	r6,4(fp)
 100f39c:	e0000015 	stw	zero,0(fp)
 100f3a0:	003f2106 	br	100f028 <_strtod_r+0x1dc>
 100f3a4:	d9801215 	stw	r6,72(sp)
 100f3a8:	003f8506 	br	100f1c0 <_strtod_r+0x374>
 100f3ac:	d8001115 	stw	zero,68(sp)
 100f3b0:	42000044 	addi	r8,r8,1
 100f3b4:	da000415 	stw	r8,16(sp)
 100f3b8:	40800007 	ldb	r2,0(r8)
 100f3bc:	103eef1e 	bne	r2,zero,100ef7c <_strtod_r+0x130>
 100f3c0:	d8001115 	stw	zero,68(sp)
 100f3c4:	dc400415 	stw	r17,16(sp)
 100f3c8:	003f1706 	br	100f028 <_strtod_r+0x1dc>
 100f3cc:	42000044 	addi	r8,r8,1
 100f3d0:	da000415 	stw	r8,16(sp)
 100f3d4:	003eaf06 	br	100ee94 <_strtod_r+0x48>
 100f3d8:	00800044 	movi	r2,1
 100f3dc:	d8801115 	stw	r2,68(sp)
 100f3e0:	003ff306 	br	100f3b0 <_strtod_r+0x564>
 100f3e4:	001d883a 	mov	r14,zero
 100f3e8:	42000044 	addi	r8,r8,1
 100f3ec:	da000415 	stw	r8,16(sp)
 100f3f0:	21000047 	ldb	r4,1(r4)
 100f3f4:	00800244 	movi	r2,9
 100f3f8:	20fff404 	addi	r3,r4,-48
 100f3fc:	10ff412e 	bgeu	r2,r3,100f104 <_strtod_r+0x2b8>
 100f400:	000b883a 	mov	r5,zero
 100f404:	dc400415 	stw	r17,16(sp)
 100f408:	003f0506 	br	100f020 <_strtod_r+0x1d4>
 100f40c:	d8c01117 	ldw	r3,68(sp)
 100f410:	048040b4 	movhi	r18,258
 100f414:	94ad5204 	addi	r18,r18,-19128
 100f418:	d8800504 	addi	r2,sp,20
 100f41c:	a809883a 	mov	r4,r21
 100f420:	d9400404 	addi	r5,sp,16
 100f424:	900d883a 	mov	r6,r18
 100f428:	d9c00604 	addi	r7,sp,24
 100f42c:	d8800015 	stw	r2,0(sp)
 100f430:	d8c00115 	stw	r3,4(sp)
 100f434:	10127f00 	call	10127f0 <__gethex>
 100f438:	140001cc 	andi	r16,r2,7
 100f43c:	1027883a 	mov	r19,r2
 100f440:	803ef926 	beq	r16,zero,100f028 <_strtod_r+0x1dc>
 100f444:	05000184 	movi	r20,6
 100f448:	853f1a26 	beq	r16,r20,100f0b4 <_strtod_r+0x268>
 100f44c:	d9800517 	ldw	r6,20(sp)
 100f450:	30000626 	beq	r6,zero,100f46c <_strtod_r+0x620>
 100f454:	91400017 	ldw	r5,0(r18)
 100f458:	d9000d04 	addi	r4,sp,52
 100f45c:	100d2480 	call	100d248 <__copybits>
 100f460:	d9400517 	ldw	r5,20(sp)
 100f464:	a809883a 	mov	r4,r21
 100f468:	100cda80 	call	100cda8 <_Bfree>
 100f46c:	d9400617 	ldw	r5,24(sp)
 100f470:	a4024136 	bltu	r20,r16,100fd78 <_strtod_r+0xf2c>
 100f474:	8405883a 	add	r2,r16,r16
 100f478:	1085883a 	add	r2,r2,r2
 100f47c:	00c04074 	movhi	r3,257
 100f480:	18fd2404 	addi	r3,r3,-2928
 100f484:	10c5883a 	add	r2,r2,r3
 100f488:	11000017 	ldw	r4,0(r2)
 100f48c:	2000683a 	jmp	r4
 100f490:	0100fdb8 	rdprs	r4,zero,1014
 100f494:	0100fdc4 	movi	r4,1015
 100f498:	0100fd68 	cmpgeui	r4,zero,1013
 100f49c:	0100fd90 	cmplti	r4,zero,1014
 100f4a0:	0100fda0 	cmpeqi	r4,zero,1014
 100f4a4:	0100fdc4 	movi	r4,1015
 100f4a8:	0100fdb8 	rdprs	r4,zero,1014
 100f4ac:	d8c00f17 	ldw	r3,60(sp)
 100f4b0:	9c85c83a 	sub	r2,r19,r18
 100f4b4:	18a1883a 	add	r16,r3,r2
 100f4b8:	0402d00e 	bge	zero,r16,100fffc <_strtod_r+0x11b0>
 100f4bc:	814003cc 	andi	r5,r16,15
 100f4c0:	28000f26 	beq	r5,zero,100f500 <_strtod_r+0x6b4>
 100f4c4:	280a90fa 	slli	r5,r5,3
 100f4c8:	010040b4 	movhi	r4,258
 100f4cc:	2129a604 	addi	r4,r4,-22888
 100f4d0:	e0800017 	ldw	r2,0(fp)
 100f4d4:	290b883a 	add	r5,r5,r4
 100f4d8:	2a000017 	ldw	r8,0(r5)
 100f4dc:	e0c00117 	ldw	r3,4(fp)
 100f4e0:	2a400117 	ldw	r9,4(r5)
 100f4e4:	1009883a 	mov	r4,r2
 100f4e8:	180b883a 	mov	r5,r3
 100f4ec:	480f883a 	mov	r7,r9
 100f4f0:	400d883a 	mov	r6,r8
 100f4f4:	10146d00 	call	10146d0 <__muldf3>
 100f4f8:	e0c00115 	stw	r3,4(fp)
 100f4fc:	e0800015 	stw	r2,0(fp)
 100f500:	00bffc04 	movi	r2,-16
 100f504:	808c703a 	and	r6,r16,r2
 100f508:	30005b26 	beq	r6,zero,100f678 <_strtod_r+0x82c>
 100f50c:	00804d04 	movi	r2,308
 100f510:	1181fd16 	blt	r2,r6,100fd08 <_strtod_r+0xebc>
 100f514:	3021d13a 	srai	r16,r6,4
 100f518:	00800044 	movi	r2,1
 100f51c:	1403610e 	bge	r2,r16,10102a4 <_strtod_r+0x1458>
 100f520:	102f883a 	mov	r23,r2
 100f524:	0025883a 	mov	r18,zero
 100f528:	044040b4 	movhi	r17,258
 100f52c:	8c69d804 	addi	r17,r17,-22688
 100f530:	8080004c 	andi	r2,r16,1
 100f534:	1005003a 	cmpeq	r2,r2,zero
 100f538:	1000091e 	bne	r2,zero,100f560 <_strtod_r+0x714>
 100f53c:	e0800017 	ldw	r2,0(fp)
 100f540:	e0c00117 	ldw	r3,4(fp)
 100f544:	89800017 	ldw	r6,0(r17)
 100f548:	89c00117 	ldw	r7,4(r17)
 100f54c:	180b883a 	mov	r5,r3
 100f550:	1009883a 	mov	r4,r2
 100f554:	10146d00 	call	10146d0 <__muldf3>
 100f558:	e0c00115 	stw	r3,4(fp)
 100f55c:	e0800015 	stw	r2,0(fp)
 100f560:	8021d07a 	srai	r16,r16,1
 100f564:	94800044 	addi	r18,r18,1
 100f568:	8c400204 	addi	r17,r17,8
 100f56c:	bc3ff016 	blt	r23,r16,100f530 <_strtod_r+0x6e4>
 100f570:	900e90fa 	slli	r7,r18,3
 100f574:	018040b4 	movhi	r6,258
 100f578:	31a9d804 	addi	r6,r6,-22688
 100f57c:	e2000117 	ldw	r8,4(fp)
 100f580:	398f883a 	add	r7,r7,r6
 100f584:	38800017 	ldw	r2,0(r7)
 100f588:	38c00117 	ldw	r3,4(r7)
 100f58c:	e1000017 	ldw	r4,0(fp)
 100f590:	01bf2c34 	movhi	r6,64688
 100f594:	418d883a 	add	r6,r8,r6
 100f598:	300b883a 	mov	r5,r6
 100f59c:	180f883a 	mov	r7,r3
 100f5a0:	100d883a 	mov	r6,r2
 100f5a4:	10146d00 	call	10146d0 <__muldf3>
 100f5a8:	1009883a 	mov	r4,r2
 100f5ac:	180b883a 	mov	r5,r3
 100f5b0:	199ffc2c 	andhi	r6,r3,32752
 100f5b4:	009f2834 	movhi	r2,31904
 100f5b8:	e1000015 	stw	r4,0(fp)
 100f5bc:	e1400115 	stw	r5,4(fp)
 100f5c0:	1181d136 	bltu	r2,r6,100fd08 <_strtod_r+0xebc>
 100f5c4:	009f2434 	movhi	r2,31888
 100f5c8:	1183202e 	bgeu	r2,r6,101024c <_strtod_r+0x1400>
 100f5cc:	d8001415 	stw	zero,80(sp)
 100f5d0:	019ffc34 	movhi	r6,32752
 100f5d4:	31bfffc4 	addi	r6,r6,-1
 100f5d8:	01ffffc4 	movi	r7,-1
 100f5dc:	e1800115 	stw	r6,4(fp)
 100f5e0:	e1c00015 	stw	r7,0(fp)
 100f5e4:	00002506 	br	100f67c <_strtod_r+0x830>
 100f5e8:	00800c04 	movi	r2,48
 100f5ec:	2083151e 	bne	r4,r2,1010244 <_strtod_r+0x13f8>
 100f5f0:	2005883a 	mov	r2,r4
 100f5f4:	000f883a 	mov	r7,zero
 100f5f8:	42000044 	addi	r8,r8,1
 100f5fc:	da000415 	stw	r8,16(sp)
 100f600:	41000007 	ldb	r4,0(r8)
 100f604:	39c00044 	addi	r7,r7,1
 100f608:	20bffb26 	beq	r4,r2,100f5f8 <_strtod_r+0x7ac>
 100f60c:	20fff3c4 	addi	r3,r4,-49
 100f610:	00800204 	movi	r2,8
 100f614:	10c1b836 	bltu	r2,r3,100fcf8 <_strtod_r+0xeac>
 100f618:	dd800417 	ldw	r22,16(sp)
 100f61c:	3815883a 	mov	r10,r7
 100f620:	227ff404 	addi	r9,r4,-48
 100f624:	b011883a 	mov	r8,r22
 100f628:	0027883a 	mov	r19,zero
 100f62c:	01c00044 	movi	r7,1
 100f630:	4801fe26 	beq	r9,zero,100fe2c <_strtod_r+0xfe0>
 100f634:	00800044 	movi	r2,1
 100f638:	51d5883a 	add	r10,r10,r7
 100f63c:	11c31f0e 	bge	r2,r7,10102bc <_strtod_r+0x1470>
 100f640:	1009883a 	mov	r4,r2
 100f644:	9807883a 	mov	r3,r19
 100f648:	02c00204 	movi	r11,8
 100f64c:	03000404 	movi	r12,16
 100f650:	00000306 	br	100f660 <_strtod_r+0x814>
 100f654:	a50002a4 	muli	r20,r20,10
 100f658:	21000044 	addi	r4,r4,1
 100f65c:	21c1eb26 	beq	r4,r7,100fe0c <_strtod_r+0xfc0>
 100f660:	18c00044 	addi	r3,r3,1
 100f664:	18bfffc4 	addi	r2,r3,-1
 100f668:	58bffa0e 	bge	r11,r2,100f654 <_strtod_r+0x808>
 100f66c:	60fffa16 	blt	r12,r3,100f658 <_strtod_r+0x80c>
 100f670:	840002a4 	muli	r16,r16,10
 100f674:	003ff806 	br	100f658 <_strtod_r+0x80c>
 100f678:	d8001415 	stw	zero,80(sp)
 100f67c:	d9801217 	ldw	r6,72(sp)
 100f680:	a809883a 	mov	r4,r21
 100f684:	b00b883a 	mov	r5,r22
 100f688:	980f883a 	mov	r7,r19
 100f68c:	dd000015 	stw	r20,0(sp)
 100f690:	100dc7c0 	call	100dc7c <__s2b>
 100f694:	d9800f17 	ldw	r6,60(sp)
 100f698:	11000304 	addi	r4,r2,12
 100f69c:	d8801015 	stw	r2,64(sp)
 100f6a0:	300c803a 	cmplt	r6,r6,zero
 100f6a4:	d9001715 	stw	r4,92(sp)
 100f6a8:	d9801615 	stw	r6,88(sp)
 100f6ac:	d8801017 	ldw	r2,64(sp)
 100f6b0:	a809883a 	mov	r4,r21
 100f6b4:	11400117 	ldw	r5,4(r2)
 100f6b8:	100d3280 	call	100d328 <_Balloc>
 100f6bc:	d8c01017 	ldw	r3,64(sp)
 100f6c0:	d9401717 	ldw	r5,92(sp)
 100f6c4:	11000304 	addi	r4,r2,12
 100f6c8:	19800417 	ldw	r6,16(r3)
 100f6cc:	102f883a 	mov	r23,r2
 100f6d0:	318d883a 	add	r6,r6,r6
 100f6d4:	318d883a 	add	r6,r6,r6
 100f6d8:	31800204 	addi	r6,r6,8
 100f6dc:	10060100 	call	1006010 <memcpy>
 100f6e0:	e2000017 	ldw	r8,0(fp)
 100f6e4:	e2400117 	ldw	r9,4(fp)
 100f6e8:	d9800304 	addi	r6,sp,12
 100f6ec:	400b883a 	mov	r5,r8
 100f6f0:	a809883a 	mov	r4,r21
 100f6f4:	d9c00204 	addi	r7,sp,8
 100f6f8:	d9800015 	stw	r6,0(sp)
 100f6fc:	480d883a 	mov	r6,r9
 100f700:	100d3e40 	call	100d3e4 <__d2b>
 100f704:	a809883a 	mov	r4,r21
 100f708:	01400044 	movi	r5,1
 100f70c:	d8800515 	stw	r2,20(sp)
 100f710:	100da200 	call	100da20 <__i2b>
 100f714:	102d883a 	mov	r22,r2
 100f718:	d8801617 	ldw	r2,88(sp)
 100f71c:	1001051e 	bne	r2,zero,100fb34 <_strtod_r+0xce8>
 100f720:	dd000f17 	ldw	r20,60(sp)
 100f724:	000f883a 	mov	r7,zero
 100f728:	0013883a 	mov	r9,zero
 100f72c:	a011883a 	mov	r8,r20
 100f730:	d8800217 	ldw	r2,8(sp)
 100f734:	1000fd16 	blt	r2,zero,100fb2c <_strtod_r+0xce0>
 100f738:	388f883a 	add	r7,r7,r2
 100f73c:	d9801417 	ldw	r6,80(sp)
 100f740:	d9400317 	ldw	r5,12(sp)
 100f744:	00ff0084 	movi	r3,-1022
 100f748:	1189c83a 	sub	r4,r2,r6
 100f74c:	2145883a 	add	r2,r4,r5
 100f750:	10bfffc4 	addi	r2,r2,-1
 100f754:	10c09f0e 	bge	r2,r3,100f9d4 <_strtod_r+0xb88>
 100f758:	21810cc4 	addi	r6,r4,1075
 100f75c:	d8c01417 	ldw	r3,80(sp)
 100f760:	4185883a 	add	r2,r8,r6
 100f764:	39a1883a 	add	r16,r7,r6
 100f768:	18a5883a 	add	r18,r3,r2
 100f76c:	3807883a 	mov	r3,r7
 100f770:	81c0010e 	bge	r16,r7,100f778 <_strtod_r+0x92c>
 100f774:	8007883a 	mov	r3,r16
 100f778:	9005883a 	mov	r2,r18
 100f77c:	1c80010e 	bge	r3,r18,100f784 <_strtod_r+0x938>
 100f780:	1805883a 	mov	r2,r3
 100f784:	0080e70e 	bge	zero,r2,100fb24 <_strtod_r+0xcd8>
 100f788:	38a7c83a 	sub	r19,r7,r2
 100f78c:	80a1c83a 	sub	r16,r16,r2
 100f790:	90a5c83a 	sub	r18,r18,r2
 100f794:	02400e0e 	bge	zero,r9,100f7d0 <_strtod_r+0x984>
 100f798:	480d883a 	mov	r6,r9
 100f79c:	b00b883a 	mov	r5,r22
 100f7a0:	a809883a 	mov	r4,r21
 100f7a4:	100db5c0 	call	100db5c <__pow5mult>
 100f7a8:	d9800517 	ldw	r6,20(sp)
 100f7ac:	a809883a 	mov	r4,r21
 100f7b0:	100b883a 	mov	r5,r2
 100f7b4:	102d883a 	mov	r22,r2
 100f7b8:	100d8380 	call	100d838 <__multiply>
 100f7bc:	d9400517 	ldw	r5,20(sp)
 100f7c0:	1023883a 	mov	r17,r2
 100f7c4:	a809883a 	mov	r4,r21
 100f7c8:	100cda80 	call	100cda8 <_Bfree>
 100f7cc:	dc400515 	stw	r17,20(sp)
 100f7d0:	0400050e 	bge	zero,r16,100f7e8 <_strtod_r+0x99c>
 100f7d4:	d9400517 	ldw	r5,20(sp)
 100f7d8:	800d883a 	mov	r6,r16
 100f7dc:	a809883a 	mov	r4,r21
 100f7e0:	100d6ec0 	call	100d6ec <__lshift>
 100f7e4:	d8800515 	stw	r2,20(sp)
 100f7e8:	a000741e 	bne	r20,zero,100f9bc <_strtod_r+0xb70>
 100f7ec:	0480050e 	bge	zero,r18,100f804 <_strtod_r+0x9b8>
 100f7f0:	b80b883a 	mov	r5,r23
 100f7f4:	900d883a 	mov	r6,r18
 100f7f8:	a809883a 	mov	r4,r21
 100f7fc:	100d6ec0 	call	100d6ec <__lshift>
 100f800:	102f883a 	mov	r23,r2
 100f804:	04c0050e 	bge	zero,r19,100f81c <_strtod_r+0x9d0>
 100f808:	b00b883a 	mov	r5,r22
 100f80c:	980d883a 	mov	r6,r19
 100f810:	a809883a 	mov	r4,r21
 100f814:	100d6ec0 	call	100d6ec <__lshift>
 100f818:	102d883a 	mov	r22,r2
 100f81c:	d9400517 	ldw	r5,20(sp)
 100f820:	a809883a 	mov	r4,r21
 100f824:	b80d883a 	mov	r6,r23
 100f828:	100d5600 	call	100d560 <__mdiff>
 100f82c:	11000317 	ldw	r4,12(r2)
 100f830:	b00b883a 	mov	r5,r22
 100f834:	10000315 	stw	zero,12(r2)
 100f838:	d9001315 	stw	r4,76(sp)
 100f83c:	1009883a 	mov	r4,r2
 100f840:	1029883a 	mov	r20,r2
 100f844:	100cf040 	call	100cf04 <__mcmp>
 100f848:	10017c16 	blt	r2,zero,100fe3c <_strtod_r+0xff0>
 100f84c:	1001af26 	beq	r2,zero,100ff0c <_strtod_r+0x10c0>
 100f850:	a009883a 	mov	r4,r20
 100f854:	b00b883a 	mov	r5,r22
 100f858:	100d1040 	call	100d104 <__ratio>
 100f85c:	0011883a 	mov	r8,zero
 100f860:	02500034 	movhi	r9,16384
 100f864:	480f883a 	mov	r7,r9
 100f868:	1009883a 	mov	r4,r2
 100f86c:	180b883a 	mov	r5,r3
 100f870:	400d883a 	mov	r6,r8
 100f874:	1021883a 	mov	r16,r2
 100f878:	1823883a 	mov	r17,r3
 100f87c:	1014f940 	call	1014f94 <__ledf2>
 100f880:	00805716 	blt	zero,r2,100f9e0 <_strtod_r+0xb94>
 100f884:	d9801317 	ldw	r6,76(sp)
 100f888:	3025003a 	cmpeq	r18,r6,zero
 100f88c:	90008b1e 	bne	r18,zero,100fabc <_strtod_r+0xc70>
 100f890:	008ffc34 	movhi	r2,16368
 100f894:	0021883a 	mov	r16,zero
 100f898:	1023883a 	mov	r17,r2
 100f89c:	d8000715 	stw	zero,28(sp)
 100f8a0:	d8800815 	stw	r2,32(sp)
 100f8a4:	e1c00117 	ldw	r7,4(fp)
 100f8a8:	009ff834 	movhi	r2,32736
 100f8ac:	3cdffc2c 	andhi	r19,r7,32752
 100f8b0:	98805e26 	beq	r19,r2,100fa2c <_strtod_r+0xbe0>
 100f8b4:	d8801417 	ldw	r2,80(sp)
 100f8b8:	10001b26 	beq	r2,zero,100f928 <_strtod_r+0xadc>
 100f8bc:	0081a834 	movhi	r2,1696
 100f8c0:	14c01936 	bltu	r2,r19,100f928 <_strtod_r+0xadc>
 100f8c4:	00bff034 	movhi	r2,65472
 100f8c8:	00d07834 	movhi	r3,16864
 100f8cc:	18ffffc4 	addi	r3,r3,-1
 100f8d0:	180f883a 	mov	r7,r3
 100f8d4:	8009883a 	mov	r4,r16
 100f8d8:	880b883a 	mov	r5,r17
 100f8dc:	100d883a 	mov	r6,r2
 100f8e0:	1014f940 	call	1014f94 <__ledf2>
 100f8e4:	00800b16 	blt	zero,r2,100f914 <_strtod_r+0xac8>
 100f8e8:	880b883a 	mov	r5,r17
 100f8ec:	8009883a 	mov	r4,r16
 100f8f0:	10134340 	call	1013434 <__fixunsdfsi>
 100f8f4:	1000df1e 	bne	r2,zero,100fc74 <_strtod_r+0xe28>
 100f8f8:	0021883a 	mov	r16,zero
 100f8fc:	044ffc34 	movhi	r17,16368
 100f900:	9000d91e 	bne	r18,zero,100fc68 <_strtod_r+0xe1c>
 100f904:	8005883a 	mov	r2,r16
 100f908:	8807883a 	mov	r3,r17
 100f90c:	d8c00815 	stw	r3,32(sp)
 100f910:	d8800715 	stw	r2,28(sp)
 100f914:	d8800817 	ldw	r2,32(sp)
 100f918:	00c1ac34 	movhi	r3,1712
 100f91c:	14c5c83a 	sub	r2,r2,r19
 100f920:	10c5883a 	add	r2,r2,r3
 100f924:	d8800815 	stw	r2,32(sp)
 100f928:	e0800017 	ldw	r2,0(fp)
 100f92c:	e0c00117 	ldw	r3,4(fp)
 100f930:	1009883a 	mov	r4,r2
 100f934:	180b883a 	mov	r5,r3
 100f938:	100cf640 	call	100cf64 <__ulp>
 100f93c:	d9800717 	ldw	r6,28(sp)
 100f940:	d9c00817 	ldw	r7,32(sp)
 100f944:	180b883a 	mov	r5,r3
 100f948:	1009883a 	mov	r4,r2
 100f94c:	10146d00 	call	10146d0 <__muldf3>
 100f950:	e2000017 	ldw	r8,0(fp)
 100f954:	e2400117 	ldw	r9,4(fp)
 100f958:	180b883a 	mov	r5,r3
 100f95c:	1009883a 	mov	r4,r2
 100f960:	480f883a 	mov	r7,r9
 100f964:	400d883a 	mov	r6,r8
 100f968:	101465c0 	call	101465c <__adddf3>
 100f96c:	e0c00115 	stw	r3,4(fp)
 100f970:	e0800015 	stw	r2,0(fp)
 100f974:	d8c01417 	ldw	r3,80(sp)
 100f978:	e4800117 	ldw	r18,4(fp)
 100f97c:	1800021e 	bne	r3,zero,100f988 <_strtod_r+0xb3c>
 100f980:	909ffc2c 	andhi	r2,r18,32752
 100f984:	98807b26 	beq	r19,r2,100fb74 <_strtod_r+0xd28>
 100f988:	d9400517 	ldw	r5,20(sp)
 100f98c:	a809883a 	mov	r4,r21
 100f990:	100cda80 	call	100cda8 <_Bfree>
 100f994:	a809883a 	mov	r4,r21
 100f998:	b80b883a 	mov	r5,r23
 100f99c:	100cda80 	call	100cda8 <_Bfree>
 100f9a0:	a809883a 	mov	r4,r21
 100f9a4:	b00b883a 	mov	r5,r22
 100f9a8:	100cda80 	call	100cda8 <_Bfree>
 100f9ac:	a809883a 	mov	r4,r21
 100f9b0:	a00b883a 	mov	r5,r20
 100f9b4:	100cda80 	call	100cda8 <_Bfree>
 100f9b8:	003f3c06 	br	100f6ac <_strtod_r+0x860>
 100f9bc:	b80b883a 	mov	r5,r23
 100f9c0:	a00d883a 	mov	r6,r20
 100f9c4:	a809883a 	mov	r4,r21
 100f9c8:	100db5c0 	call	100db5c <__pow5mult>
 100f9cc:	102f883a 	mov	r23,r2
 100f9d0:	003f8606 	br	100f7ec <_strtod_r+0x9a0>
 100f9d4:	00800d84 	movi	r2,54
 100f9d8:	114dc83a 	sub	r6,r2,r5
 100f9dc:	003f5f06 	br	100f75c <_strtod_r+0x910>
 100f9e0:	0005883a 	mov	r2,zero
 100f9e4:	00cff834 	movhi	r3,16352
 100f9e8:	880b883a 	mov	r5,r17
 100f9ec:	8009883a 	mov	r4,r16
 100f9f0:	100d883a 	mov	r6,r2
 100f9f4:	180f883a 	mov	r7,r3
 100f9f8:	10146d00 	call	10146d0 <__muldf3>
 100f9fc:	d9801317 	ldw	r6,76(sp)
 100fa00:	1021883a 	mov	r16,r2
 100fa04:	1823883a 	mov	r17,r3
 100fa08:	3025003a 	cmpeq	r18,r6,zero
 100fa0c:	90000126 	beq	r18,zero,100fa14 <_strtod_r+0xbc8>
 100fa10:	18e0003c 	xorhi	r3,r3,32768
 100fa14:	d8800715 	stw	r2,28(sp)
 100fa18:	d8c00815 	stw	r3,32(sp)
 100fa1c:	e1c00117 	ldw	r7,4(fp)
 100fa20:	009ff834 	movhi	r2,32736
 100fa24:	3cdffc2c 	andhi	r19,r7,32752
 100fa28:	98bfa21e 	bne	r19,r2,100f8b4 <_strtod_r+0xa68>
 100fa2c:	e1000017 	ldw	r4,0(fp)
 100fa30:	01bf2c34 	movhi	r6,64688
 100fa34:	398d883a 	add	r6,r7,r6
 100fa38:	d9000b15 	stw	r4,44(sp)
 100fa3c:	d9c00c15 	stw	r7,48(sp)
 100fa40:	300b883a 	mov	r5,r6
 100fa44:	e1800115 	stw	r6,4(fp)
 100fa48:	100cf640 	call	100cf64 <__ulp>
 100fa4c:	d9800717 	ldw	r6,28(sp)
 100fa50:	d9c00817 	ldw	r7,32(sp)
 100fa54:	180b883a 	mov	r5,r3
 100fa58:	1009883a 	mov	r4,r2
 100fa5c:	10146d00 	call	10146d0 <__muldf3>
 100fa60:	e2000017 	ldw	r8,0(fp)
 100fa64:	e2400117 	ldw	r9,4(fp)
 100fa68:	180b883a 	mov	r5,r3
 100fa6c:	1009883a 	mov	r4,r2
 100fa70:	480f883a 	mov	r7,r9
 100fa74:	400d883a 	mov	r6,r8
 100fa78:	101465c0 	call	101465c <__adddf3>
 100fa7c:	1009883a 	mov	r4,r2
 100fa80:	180b883a 	mov	r5,r3
 100fa84:	009f2834 	movhi	r2,31904
 100fa88:	10bfffc4 	addi	r2,r2,-1
 100fa8c:	18dffc2c 	andhi	r3,r3,32752
 100fa90:	e1000015 	stw	r4,0(fp)
 100fa94:	e1400115 	stw	r5,4(fp)
 100fa98:	10c06f2e 	bgeu	r2,r3,100fc58 <_strtod_r+0xe0c>
 100fa9c:	d8800c17 	ldw	r2,48(sp)
 100faa0:	011ffc34 	movhi	r4,32752
 100faa4:	213fffc4 	addi	r4,r4,-1
 100faa8:	11007a26 	beq	r2,r4,100fc94 <_strtod_r+0xe48>
 100faac:	01ffffc4 	movi	r7,-1
 100fab0:	e1000115 	stw	r4,4(fp)
 100fab4:	e1c00015 	stw	r7,0(fp)
 100fab8:	003fb306 	br	100f988 <_strtod_r+0xb3c>
 100fabc:	e0c00017 	ldw	r3,0(fp)
 100fac0:	1800221e 	bne	r3,zero,100fb4c <_strtod_r+0xd00>
 100fac4:	e0800117 	ldw	r2,4(fp)
 100fac8:	00c00434 	movhi	r3,16
 100facc:	18ffffc4 	addi	r3,r3,-1
 100fad0:	10c4703a 	and	r2,r2,r3
 100fad4:	1000211e 	bne	r2,zero,100fb5c <_strtod_r+0xd10>
 100fad8:	0005883a 	mov	r2,zero
 100fadc:	00cffc34 	movhi	r3,16368
 100fae0:	180f883a 	mov	r7,r3
 100fae4:	8009883a 	mov	r4,r16
 100fae8:	880b883a 	mov	r5,r17
 100faec:	100d883a 	mov	r6,r2
 100faf0:	1014f0c0 	call	1014f0c <__ltdf2>
 100faf4:	10013c16 	blt	r2,zero,100ffe8 <_strtod_r+0x119c>
 100faf8:	0005883a 	mov	r2,zero
 100fafc:	00cff834 	movhi	r3,16352
 100fb00:	880b883a 	mov	r5,r17
 100fb04:	8009883a 	mov	r4,r16
 100fb08:	180f883a 	mov	r7,r3
 100fb0c:	100d883a 	mov	r6,r2
 100fb10:	10146d00 	call	10146d0 <__muldf3>
 100fb14:	1823883a 	mov	r17,r3
 100fb18:	1021883a 	mov	r16,r2
 100fb1c:	18e0003c 	xorhi	r3,r3,32768
 100fb20:	003fbc06 	br	100fa14 <_strtod_r+0xbc8>
 100fb24:	3827883a 	mov	r19,r7
 100fb28:	003f1a06 	br	100f794 <_strtod_r+0x948>
 100fb2c:	4091c83a 	sub	r8,r8,r2
 100fb30:	003f0206 	br	100f73c <_strtod_r+0x8f0>
 100fb34:	d8c00f17 	ldw	r3,60(sp)
 100fb38:	0011883a 	mov	r8,zero
 100fb3c:	0029883a 	mov	r20,zero
 100fb40:	00d3c83a 	sub	r9,zero,r3
 100fb44:	480f883a 	mov	r7,r9
 100fb48:	003ef906 	br	100f730 <_strtod_r+0x8e4>
 100fb4c:	00800044 	movi	r2,1
 100fb50:	1880021e 	bne	r3,r2,100fb5c <_strtod_r+0xd10>
 100fb54:	e0800117 	ldw	r2,4(fp)
 100fb58:	1000a526 	beq	r2,zero,100fdf0 <_strtod_r+0xfa4>
 100fb5c:	00affc34 	movhi	r2,49136
 100fb60:	0021883a 	mov	r16,zero
 100fb64:	044ffc34 	movhi	r17,16368
 100fb68:	d8800815 	stw	r2,32(sp)
 100fb6c:	d8000715 	stw	zero,28(sp)
 100fb70:	003f4c06 	br	100f8a4 <_strtod_r+0xa58>
 100fb74:	880b883a 	mov	r5,r17
 100fb78:	8009883a 	mov	r4,r16
 100fb7c:	10151140 	call	1015114 <__fixdfsi>
 100fb80:	1009883a 	mov	r4,r2
 100fb84:	101501c0 	call	101501c <__floatsidf>
 100fb88:	880b883a 	mov	r5,r17
 100fb8c:	8009883a 	mov	r4,r16
 100fb90:	100d883a 	mov	r6,r2
 100fb94:	180f883a 	mov	r7,r3
 100fb98:	10145dc0 	call	10145dc <__subdf3>
 100fb9c:	d9001317 	ldw	r4,76(sp)
 100fba0:	100b883a 	mov	r5,r2
 100fba4:	180d883a 	mov	r6,r3
 100fba8:	1021883a 	mov	r16,r2
 100fbac:	1823883a 	mov	r17,r3
 100fbb0:	2000061e 	bne	r4,zero,100fbcc <_strtod_r+0xd80>
 100fbb4:	e0800017 	ldw	r2,0(fp)
 100fbb8:	1000041e 	bne	r2,zero,100fbcc <_strtod_r+0xd80>
 100fbbc:	00c00434 	movhi	r3,16
 100fbc0:	18ffffc4 	addi	r3,r3,-1
 100fbc4:	90c4703a 	and	r2,r18,r3
 100fbc8:	10004026 	beq	r2,zero,100fccc <_strtod_r+0xe80>
 100fbcc:	00a52834 	movhi	r2,38048
 100fbd0:	108d6544 	addi	r2,r2,13717
 100fbd4:	00cff834 	movhi	r3,16352
 100fbd8:	18ffffc4 	addi	r3,r3,-1
 100fbdc:	180f883a 	mov	r7,r3
 100fbe0:	8009883a 	mov	r4,r16
 100fbe4:	880b883a 	mov	r5,r17
 100fbe8:	100d883a 	mov	r6,r2
 100fbec:	1014f0c0 	call	1014f0c <__ltdf2>
 100fbf0:	10000916 	blt	r2,zero,100fc18 <_strtod_r+0xdcc>
 100fbf4:	008d6c34 	movhi	r2,13744
 100fbf8:	10b94d44 	addi	r2,r2,-6859
 100fbfc:	00cff834 	movhi	r3,16352
 100fc00:	880b883a 	mov	r5,r17
 100fc04:	180f883a 	mov	r7,r3
 100fc08:	8009883a 	mov	r4,r16
 100fc0c:	100d883a 	mov	r6,r2
 100fc10:	1014dfc0 	call	1014dfc <__gtdf2>
 100fc14:	00bf5c0e 	bge	zero,r2,100f988 <_strtod_r+0xb3c>
 100fc18:	d9400517 	ldw	r5,20(sp)
 100fc1c:	a809883a 	mov	r4,r21
 100fc20:	100cda80 	call	100cda8 <_Bfree>
 100fc24:	a809883a 	mov	r4,r21
 100fc28:	b80b883a 	mov	r5,r23
 100fc2c:	100cda80 	call	100cda8 <_Bfree>
 100fc30:	a809883a 	mov	r4,r21
 100fc34:	b00b883a 	mov	r5,r22
 100fc38:	100cda80 	call	100cda8 <_Bfree>
 100fc3c:	d9401017 	ldw	r5,64(sp)
 100fc40:	a809883a 	mov	r4,r21
 100fc44:	100cda80 	call	100cda8 <_Bfree>
 100fc48:	a809883a 	mov	r4,r21
 100fc4c:	a00b883a 	mov	r5,r20
 100fc50:	100cda80 	call	100cda8 <_Bfree>
 100fc54:	003cf406 	br	100f028 <_strtod_r+0x1dc>
 100fc58:	0080d434 	movhi	r2,848
 100fc5c:	288d883a 	add	r6,r5,r2
 100fc60:	e1800115 	stw	r6,4(fp)
 100fc64:	003f4306 	br	100f974 <_strtod_r+0xb28>
 100fc68:	8005883a 	mov	r2,r16
 100fc6c:	88e0003c 	xorhi	r3,r17,32768
 100fc70:	003f2606 	br	100f90c <_strtod_r+0xac0>
 100fc74:	1009883a 	mov	r4,r2
 100fc78:	10152600 	call	1015260 <__floatunsidf>
 100fc7c:	1021883a 	mov	r16,r2
 100fc80:	1823883a 	mov	r17,r3
 100fc84:	003f1e06 	br	100f900 <_strtod_r+0xab4>
 100fc88:	da000417 	ldw	r8,16(sp)
 100fc8c:	39c00044 	addi	r7,r7,1
 100fc90:	003e6706 	br	100f630 <_strtod_r+0x7e4>
 100fc94:	d8c00b17 	ldw	r3,44(sp)
 100fc98:	00bfffc4 	movi	r2,-1
 100fc9c:	18bf831e 	bne	r3,r2,100faac <_strtod_r+0xc60>
 100fca0:	00c00884 	movi	r3,34
 100fca4:	a8c00015 	stw	r3,0(r21)
 100fca8:	009ffc34 	movhi	r2,32752
 100fcac:	e0800115 	stw	r2,4(fp)
 100fcb0:	e0000015 	stw	zero,0(fp)
 100fcb4:	003fd806 	br	100fc18 <_strtod_r+0xdcc>
 100fcb8:	4007883a 	mov	r3,r8
 100fcbc:	000d883a 	mov	r6,zero
 100fcc0:	0029883a 	mov	r20,zero
 100fcc4:	0021883a 	mov	r16,zero
 100fcc8:	003cc906 	br	100eff0 <_strtod_r+0x1a4>
 100fccc:	00a52834 	movhi	r2,38048
 100fcd0:	108d6544 	addi	r2,r2,13717
 100fcd4:	00cff434 	movhi	r3,16336
 100fcd8:	18ffffc4 	addi	r3,r3,-1
 100fcdc:	2809883a 	mov	r4,r5
 100fce0:	180f883a 	mov	r7,r3
 100fce4:	300b883a 	mov	r5,r6
 100fce8:	100d883a 	mov	r6,r2
 100fcec:	1014f0c0 	call	1014f0c <__ltdf2>
 100fcf0:	103f250e 	bge	r2,zero,100f988 <_strtod_r+0xb3c>
 100fcf4:	003fc806 	br	100fc18 <_strtod_r+0xdcc>
 100fcf8:	0027883a 	mov	r19,zero
 100fcfc:	04800044 	movi	r18,1
 100fd00:	0015883a 	mov	r10,zero
 100fd04:	003cc006 	br	100f008 <_strtod_r+0x1bc>
 100fd08:	00800884 	movi	r2,34
 100fd0c:	a8800015 	stw	r2,0(r21)
 100fd10:	019ffc34 	movhi	r6,32752
 100fd14:	e1800115 	stw	r6,4(fp)
 100fd18:	e0000015 	stw	zero,0(fp)
 100fd1c:	003cc206 	br	100f028 <_strtod_r+0x1dc>
 100fd20:	015387c4 	movi	r5,19999
 100fd24:	003d1e06 	br	100f1a0 <_strtod_r+0x354>
 100fd28:	300a90fa 	slli	r5,r6,3
 100fd2c:	e0800017 	ldw	r2,0(fp)
 100fd30:	e0c00117 	ldw	r3,4(fp)
 100fd34:	010040b4 	movhi	r4,258
 100fd38:	2129a604 	addi	r4,r4,-22888
 100fd3c:	290b883a 	add	r5,r5,r4
 100fd40:	2a000017 	ldw	r8,0(r5)
 100fd44:	2a400117 	ldw	r9,4(r5)
 100fd48:	1009883a 	mov	r4,r2
 100fd4c:	180b883a 	mov	r5,r3
 100fd50:	480f883a 	mov	r7,r9
 100fd54:	400d883a 	mov	r6,r8
 100fd58:	10146d00 	call	10146d0 <__muldf3>
 100fd5c:	e0c00115 	stw	r3,4(fp)
 100fd60:	e0800015 	stw	r2,0(fp)
 100fd64:	003cb006 	br	100f028 <_strtod_r+0x1dc>
 100fd68:	d8800d17 	ldw	r2,52(sp)
 100fd6c:	e0800015 	stw	r2,0(fp)
 100fd70:	d8c00e17 	ldw	r3,56(sp)
 100fd74:	e0c00115 	stw	r3,4(fp)
 100fd78:	9880020c 	andi	r2,r19,8
 100fd7c:	103caa26 	beq	r2,zero,100f028 <_strtod_r+0x1dc>
 100fd80:	e0800117 	ldw	r2,4(fp)
 100fd84:	10a00034 	orhi	r2,r2,32768
 100fd88:	e0800115 	stw	r2,4(fp)
 100fd8c:	003ca606 	br	100f028 <_strtod_r+0x1dc>
 100fd90:	009ffc34 	movhi	r2,32752
 100fd94:	e0800115 	stw	r2,4(fp)
 100fd98:	e0000015 	stw	zero,0(fp)
 100fd9c:	003ff606 	br	100fd78 <_strtod_r+0xf2c>
 100fda0:	00a00034 	movhi	r2,32768
 100fda4:	10bfffc4 	addi	r2,r2,-1
 100fda8:	00ffffc4 	movi	r3,-1
 100fdac:	e0800115 	stw	r2,4(fp)
 100fdb0:	e0c00015 	stw	r3,0(fp)
 100fdb4:	003ff006 	br	100fd78 <_strtod_r+0xf2c>
 100fdb8:	e0000115 	stw	zero,4(fp)
 100fdbc:	e0000015 	stw	zero,0(fp)
 100fdc0:	003fed06 	br	100fd78 <_strtod_r+0xf2c>
 100fdc4:	d8800e17 	ldw	r2,56(sp)
 100fdc8:	29010cc4 	addi	r4,r5,1075
 100fdcc:	00fffc34 	movhi	r3,65520
 100fdd0:	18ffffc4 	addi	r3,r3,-1
 100fdd4:	2008953a 	slli	r4,r4,20
 100fdd8:	10c4703a 	and	r2,r2,r3
 100fddc:	d8c00d17 	ldw	r3,52(sp)
 100fde0:	1104b03a 	or	r2,r2,r4
 100fde4:	e0800115 	stw	r2,4(fp)
 100fde8:	e0c00015 	stw	r3,0(fp)
 100fdec:	003fe206 	br	100fd78 <_strtod_r+0xf2c>
 100fdf0:	00800884 	movi	r2,34
 100fdf4:	a8800015 	stw	r2,0(r21)
 100fdf8:	e0000015 	stw	zero,0(fp)
 100fdfc:	e0000115 	stw	zero,4(fp)
 100fe00:	003f8506 	br	100fc18 <_strtod_r+0xdcc>
 100fe04:	03800044 	movi	r14,1
 100fe08:	003d7706 	br	100f3e8 <_strtod_r+0x59c>
 100fe0c:	99c5883a 	add	r2,r19,r7
 100fe10:	11ffffc4 	addi	r7,r2,-1
 100fe14:	00800204 	movi	r2,8
 100fe18:	3cc00044 	addi	r19,r7,1
 100fe1c:	11c0df16 	blt	r2,r7,101019c <_strtod_r+0x1350>
 100fe20:	a08002a4 	muli	r2,r20,10
 100fe24:	000f883a 	mov	r7,zero
 100fe28:	1269883a 	add	r20,r2,r9
 100fe2c:	42000044 	addi	r8,r8,1
 100fe30:	da000415 	stw	r8,16(sp)
 100fe34:	41000007 	ldb	r4,0(r8)
 100fe38:	003d3706 	br	100f318 <_strtod_r+0x4cc>
 100fe3c:	d9801317 	ldw	r6,76(sp)
 100fe40:	3000511e 	bne	r6,zero,100ff88 <_strtod_r+0x113c>
 100fe44:	e0800017 	ldw	r2,0(fp)
 100fe48:	1000d81e 	bne	r2,zero,10101ac <_strtod_r+0x1360>
 100fe4c:	e0c00117 	ldw	r3,4(fp)
 100fe50:	01000434 	movhi	r4,16
 100fe54:	213fffc4 	addi	r4,r4,-1
 100fe58:	1904703a 	and	r2,r3,r4
 100fe5c:	1000b01e 	bne	r2,zero,1010120 <_strtod_r+0x12d4>
 100fe60:	18dffc2c 	andhi	r3,r3,32752
 100fe64:	0081ac34 	movhi	r2,1712
 100fe68:	10c1102e 	bgeu	r2,r3,10102ac <_strtod_r+0x1460>
 100fe6c:	a0800517 	ldw	r2,20(r20)
 100fe70:	1000031e 	bne	r2,zero,100fe80 <_strtod_r+0x1034>
 100fe74:	a0c00417 	ldw	r3,16(r20)
 100fe78:	00800044 	movi	r2,1
 100fe7c:	10c0420e 	bge	r2,r3,100ff88 <_strtod_r+0x113c>
 100fe80:	a00b883a 	mov	r5,r20
 100fe84:	a809883a 	mov	r4,r21
 100fe88:	01800044 	movi	r6,1
 100fe8c:	100d6ec0 	call	100d6ec <__lshift>
 100fe90:	1009883a 	mov	r4,r2
 100fe94:	b00b883a 	mov	r5,r22
 100fe98:	1029883a 	mov	r20,r2
 100fe9c:	100cf040 	call	100cf04 <__mcmp>
 100fea0:	0080c20e 	bge	zero,r2,10101ac <_strtod_r+0x1360>
 100fea4:	e1800117 	ldw	r6,4(fp)
 100fea8:	d9001417 	ldw	r4,80(sp)
 100feac:	2013003a 	cmpeq	r9,r4,zero
 100feb0:	4800ef1e 	bne	r9,zero,1010270 <_strtod_r+0x1424>
 100feb4:	30dffc2c 	andhi	r3,r6,32752
 100feb8:	0081ac34 	movhi	r2,1712
 100febc:	10c0ec36 	bltu	r2,r3,1010270 <_strtod_r+0x1424>
 100fec0:	0080dc34 	movhi	r2,880
 100fec4:	10ffca2e 	bgeu	r2,r3,100fdf0 <_strtod_r+0xfa4>
 100fec8:	e0800017 	ldw	r2,0(fp)
 100fecc:	e0c00117 	ldw	r3,4(fp)
 100fed0:	020e5434 	movhi	r8,14672
 100fed4:	000d883a 	mov	r6,zero
 100fed8:	400f883a 	mov	r7,r8
 100fedc:	180b883a 	mov	r5,r3
 100fee0:	1009883a 	mov	r4,r2
 100fee4:	da000c15 	stw	r8,48(sp)
 100fee8:	d8000b15 	stw	zero,44(sp)
 100feec:	10146d00 	call	10146d0 <__muldf3>
 100fef0:	e0800015 	stw	r2,0(fp)
 100fef4:	e0c00115 	stw	r3,4(fp)
 100fef8:	183f471e 	bne	r3,zero,100fc18 <_strtod_r+0xdcc>
 100fefc:	103f461e 	bne	r2,zero,100fc18 <_strtod_r+0xdcc>
 100ff00:	00800884 	movi	r2,34
 100ff04:	a8800015 	stw	r2,0(r21)
 100ff08:	003f4306 	br	100fc18 <_strtod_r+0xdcc>
 100ff0c:	d8801317 	ldw	r2,76(sp)
 100ff10:	1025003a 	cmpeq	r18,r2,zero
 100ff14:	9000861e 	bne	r18,zero,1010130 <_strtod_r+0x12e4>
 100ff18:	e1400117 	ldw	r5,4(fp)
 100ff1c:	00c00434 	movhi	r3,16
 100ff20:	18ffffc4 	addi	r3,r3,-1
 100ff24:	28c4703a 	and	r2,r5,r3
 100ff28:	10c01b26 	beq	r2,r3,100ff98 <_strtod_r+0x114c>
 100ff2c:	e1c00017 	ldw	r7,0(fp)
 100ff30:	3880004c 	andi	r2,r7,1
 100ff34:	1005003a 	cmpeq	r2,r2,zero
 100ff38:	1000791e 	bne	r2,zero,1010120 <_strtod_r+0x12d4>
 100ff3c:	9000b126 	beq	r18,zero,1010204 <_strtod_r+0x13b8>
 100ff40:	e4400117 	ldw	r17,4(fp)
 100ff44:	3809883a 	mov	r4,r7
 100ff48:	3821883a 	mov	r16,r7
 100ff4c:	880b883a 	mov	r5,r17
 100ff50:	100cf640 	call	100cf64 <__ulp>
 100ff54:	180f883a 	mov	r7,r3
 100ff58:	880b883a 	mov	r5,r17
 100ff5c:	8009883a 	mov	r4,r16
 100ff60:	100d883a 	mov	r6,r2
 100ff64:	10145dc0 	call	10145dc <__subdf3>
 100ff68:	1009883a 	mov	r4,r2
 100ff6c:	000d883a 	mov	r6,zero
 100ff70:	000f883a 	mov	r7,zero
 100ff74:	180b883a 	mov	r5,r3
 100ff78:	e0800015 	stw	r2,0(fp)
 100ff7c:	e0c00115 	stw	r3,4(fp)
 100ff80:	1014d740 	call	1014d74 <__nedf2>
 100ff84:	103f9a26 	beq	r2,zero,100fdf0 <_strtod_r+0xfa4>
 100ff88:	d9001417 	ldw	r4,80(sp)
 100ff8c:	2013003a 	cmpeq	r9,r4,zero
 100ff90:	483f211e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 100ff94:	003fcc06 	br	100fec8 <_strtod_r+0x107c>
 100ff98:	d9001417 	ldw	r4,80(sp)
 100ff9c:	e1c00017 	ldw	r7,0(fp)
 100ffa0:	2013003a 	cmpeq	r9,r4,zero
 100ffa4:	4800bd1e 	bne	r9,zero,101029c <_strtod_r+0x1450>
 100ffa8:	28dffc2c 	andhi	r3,r5,32752
 100ffac:	0081a834 	movhi	r2,1696
 100ffb0:	10c0ba36 	bltu	r2,r3,101029c <_strtod_r+0x1450>
 100ffb4:	1804d53a 	srli	r2,r3,20
 100ffb8:	00c01ac4 	movi	r3,107
 100ffbc:	013fffc4 	movi	r4,-1
 100ffc0:	1887c83a 	sub	r3,r3,r2
 100ffc4:	20c4983a 	sll	r2,r4,r3
 100ffc8:	11ffd91e 	bne	r2,r7,100ff30 <_strtod_r+0x10e4>
 100ffcc:	28dffc2c 	andhi	r3,r5,32752
 100ffd0:	00800434 	movhi	r2,16
 100ffd4:	188d883a 	add	r6,r3,r2
 100ffd8:	e1800115 	stw	r6,4(fp)
 100ffdc:	e0000015 	stw	zero,0(fp)
 100ffe0:	483f0d1e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 100ffe4:	003fb806 	br	100fec8 <_strtod_r+0x107c>
 100ffe8:	0021883a 	mov	r16,zero
 100ffec:	0005883a 	mov	r2,zero
 100fff0:	044ff834 	movhi	r17,16352
 100fff4:	00eff834 	movhi	r3,49120
 100fff8:	003e8606 	br	100fa14 <_strtod_r+0xbc8>
 100fffc:	803d9e26 	beq	r16,zero,100f678 <_strtod_r+0x82c>
 1010000:	0421c83a 	sub	r16,zero,r16
 1010004:	814003cc 	andi	r5,r16,15
 1010008:	28000f26 	beq	r5,zero,1010048 <_strtod_r+0x11fc>
 101000c:	280a90fa 	slli	r5,r5,3
 1010010:	010040b4 	movhi	r4,258
 1010014:	2129a604 	addi	r4,r4,-22888
 1010018:	e0800017 	ldw	r2,0(fp)
 101001c:	290b883a 	add	r5,r5,r4
 1010020:	2a000017 	ldw	r8,0(r5)
 1010024:	e0c00117 	ldw	r3,4(fp)
 1010028:	2a400117 	ldw	r9,4(r5)
 101002c:	1009883a 	mov	r4,r2
 1010030:	180b883a 	mov	r5,r3
 1010034:	480f883a 	mov	r7,r9
 1010038:	400d883a 	mov	r6,r8
 101003c:	1014a940 	call	1014a94 <__divdf3>
 1010040:	e0c00115 	stw	r3,4(fp)
 1010044:	e0800015 	stw	r2,0(fp)
 1010048:	8021d13a 	srai	r16,r16,4
 101004c:	803d8a26 	beq	r16,zero,100f678 <_strtod_r+0x82c>
 1010050:	008007c4 	movi	r2,31
 1010054:	14002d16 	blt	r2,r16,101010c <_strtod_r+0x12c0>
 1010058:	8080040c 	andi	r2,r16,16
 101005c:	10009926 	beq	r2,zero,10102c4 <_strtod_r+0x1478>
 1010060:	00801a84 	movi	r2,106
 1010064:	d8801415 	stw	r2,80(sp)
 1010068:	0400110e 	bge	zero,r16,10100b0 <_strtod_r+0x1264>
 101006c:	044040b4 	movhi	r17,258
 1010070:	8c69f304 	addi	r17,r17,-22580
 1010074:	8080004c 	andi	r2,r16,1
 1010078:	1005003a 	cmpeq	r2,r2,zero
 101007c:	1000091e 	bne	r2,zero,10100a4 <_strtod_r+0x1258>
 1010080:	e0800017 	ldw	r2,0(fp)
 1010084:	e0c00117 	ldw	r3,4(fp)
 1010088:	89800017 	ldw	r6,0(r17)
 101008c:	89c00117 	ldw	r7,4(r17)
 1010090:	180b883a 	mov	r5,r3
 1010094:	1009883a 	mov	r4,r2
 1010098:	10146d00 	call	10146d0 <__muldf3>
 101009c:	e0c00115 	stw	r3,4(fp)
 10100a0:	e0800015 	stw	r2,0(fp)
 10100a4:	8021d07a 	srai	r16,r16,1
 10100a8:	8c400204 	addi	r17,r17,8
 10100ac:	043ff116 	blt	zero,r16,1010074 <_strtod_r+0x1228>
 10100b0:	d8c01417 	ldw	r3,80(sp)
 10100b4:	18000d26 	beq	r3,zero,10100ec <_strtod_r+0x12a0>
 10100b8:	e1000117 	ldw	r4,4(fp)
 10100bc:	00c01ac4 	movi	r3,107
 10100c0:	209ffc2c 	andhi	r2,r4,32752
 10100c4:	1004d53a 	srli	r2,r2,20
 10100c8:	1887c83a 	sub	r3,r3,r2
 10100cc:	00c0070e 	bge	zero,r3,10100ec <_strtod_r+0x12a0>
 10100d0:	008007c4 	movi	r2,31
 10100d4:	10c0900e 	bge	r2,r3,1010318 <_strtod_r+0x14cc>
 10100d8:	00800d04 	movi	r2,52
 10100dc:	e0000015 	stw	zero,0(fp)
 10100e0:	10c0870e 	bge	r2,r3,1010300 <_strtod_r+0x14b4>
 10100e4:	0180dc34 	movhi	r6,880
 10100e8:	e1800115 	stw	r6,4(fp)
 10100ec:	e0800017 	ldw	r2,0(fp)
 10100f0:	e0c00117 	ldw	r3,4(fp)
 10100f4:	000d883a 	mov	r6,zero
 10100f8:	000f883a 	mov	r7,zero
 10100fc:	180b883a 	mov	r5,r3
 1010100:	1009883a 	mov	r4,r2
 1010104:	1014d740 	call	1014d74 <__nedf2>
 1010108:	103d5c1e 	bne	r2,zero,100f67c <_strtod_r+0x830>
 101010c:	00800884 	movi	r2,34
 1010110:	a8800015 	stw	r2,0(r21)
 1010114:	e0000015 	stw	zero,0(fp)
 1010118:	e0000115 	stw	zero,4(fp)
 101011c:	003bc206 	br	100f028 <_strtod_r+0x1dc>
 1010120:	d8801417 	ldw	r2,80(sp)
 1010124:	1013003a 	cmpeq	r9,r2,zero
 1010128:	483ebb1e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 101012c:	003f6606 	br	100fec8 <_strtod_r+0x107c>
 1010130:	e1800117 	ldw	r6,4(fp)
 1010134:	00c00434 	movhi	r3,16
 1010138:	18ffffc4 	addi	r3,r3,-1
 101013c:	30c4703a 	and	r2,r6,r3
 1010140:	103f7a1e 	bne	r2,zero,100ff2c <_strtod_r+0x10e0>
 1010144:	e1c00017 	ldw	r7,0(fp)
 1010148:	383f791e 	bne	r7,zero,100ff30 <_strtod_r+0x10e4>
 101014c:	003f5606 	br	100fea8 <_strtod_r+0x105c>
 1010150:	d9800f17 	ldw	r6,60(sp)
 1010154:	00bffa84 	movi	r2,-22
 1010158:	30bcd416 	blt	r6,r2,100f4ac <_strtod_r+0x660>
 101015c:	317ffe24 	muli	r5,r6,-8
 1010160:	010040b4 	movhi	r4,258
 1010164:	2129a604 	addi	r4,r4,-22888
 1010168:	e0800017 	ldw	r2,0(fp)
 101016c:	290b883a 	add	r5,r5,r4
 1010170:	2a000017 	ldw	r8,0(r5)
 1010174:	e0c00117 	ldw	r3,4(fp)
 1010178:	2a400117 	ldw	r9,4(r5)
 101017c:	1009883a 	mov	r4,r2
 1010180:	180b883a 	mov	r5,r3
 1010184:	480f883a 	mov	r7,r9
 1010188:	400d883a 	mov	r6,r8
 101018c:	1014a940 	call	1014a94 <__divdf3>
 1010190:	e0c00115 	stw	r3,4(fp)
 1010194:	e0800015 	stw	r2,0(fp)
 1010198:	003ba306 	br	100f028 <_strtod_r+0x1dc>
 101019c:	00800404 	movi	r2,16
 10101a0:	14c02f0e 	bge	r2,r19,1010260 <_strtod_r+0x1414>
 10101a4:	000f883a 	mov	r7,zero
 10101a8:	003f2006 	br	100fe2c <_strtod_r+0xfe0>
 10101ac:	d9801417 	ldw	r6,80(sp)
 10101b0:	3013003a 	cmpeq	r9,r6,zero
 10101b4:	483e981e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 10101b8:	003f4306 	br	100fec8 <_strtod_r+0x107c>
 10101bc:	00801a44 	movi	r2,105
 10101c0:	20bc6326 	beq	r4,r2,100f350 <_strtod_r+0x504>
 10101c4:	00801b84 	movi	r2,110
 10101c8:	20bbba1e 	bne	r4,r2,100f0b4 <_strtod_r+0x268>
 10101cc:	dc000404 	addi	r16,sp,16
 10101d0:	8009883a 	mov	r4,r16
 10101d4:	014040b4 	movhi	r5,258
 10101d8:	2969f204 	addi	r5,r5,-22584
 10101dc:	100ee040 	call	100ee04 <match>
 10101e0:	103bb426 	beq	r2,zero,100f0b4 <_strtod_r+0x268>
 10101e4:	d8800417 	ldw	r2,16(sp)
 10101e8:	00c00a04 	movi	r3,40
 10101ec:	11000007 	ldb	r4,0(r2)
 10101f0:	20c03626 	beq	r4,r3,10102cc <_strtod_r+0x1480>
 10101f4:	01bffe34 	movhi	r6,65528
 10101f8:	e1800115 	stw	r6,4(fp)
 10101fc:	e0000015 	stw	zero,0(fp)
 1010200:	003b8906 	br	100f028 <_strtod_r+0x1dc>
 1010204:	e4400117 	ldw	r17,4(fp)
 1010208:	3809883a 	mov	r4,r7
 101020c:	3821883a 	mov	r16,r7
 1010210:	880b883a 	mov	r5,r17
 1010214:	100cf640 	call	100cf64 <__ulp>
 1010218:	100d883a 	mov	r6,r2
 101021c:	880b883a 	mov	r5,r17
 1010220:	180f883a 	mov	r7,r3
 1010224:	8009883a 	mov	r4,r16
 1010228:	101465c0 	call	101465c <__adddf3>
 101022c:	d9801417 	ldw	r6,80(sp)
 1010230:	e0c00115 	stw	r3,4(fp)
 1010234:	e0800015 	stw	r2,0(fp)
 1010238:	3013003a 	cmpeq	r9,r6,zero
 101023c:	483e761e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 1010240:	003f2106 	br	100fec8 <_strtod_r+0x107c>
 1010244:	000f883a 	mov	r7,zero
 1010248:	003cf006 	br	100f60c <_strtod_r+0x7c0>
 101024c:	0080d434 	movhi	r2,848
 1010250:	188d883a 	add	r6,r3,r2
 1010254:	d8001415 	stw	zero,80(sp)
 1010258:	e1800115 	stw	r6,4(fp)
 101025c:	003d0706 	br	100f67c <_strtod_r+0x830>
 1010260:	808002a4 	muli	r2,r16,10
 1010264:	000f883a 	mov	r7,zero
 1010268:	1261883a 	add	r16,r2,r9
 101026c:	003eef06 	br	100fe2c <_strtod_r+0xfe0>
 1010270:	309ffc2c 	andhi	r2,r6,32752
 1010274:	00fffc34 	movhi	r3,65520
 1010278:	10c5883a 	add	r2,r2,r3
 101027c:	00c00434 	movhi	r3,16
 1010280:	18ffffc4 	addi	r3,r3,-1
 1010284:	10ccb03a 	or	r6,r2,r3
 1010288:	01ffffc4 	movi	r7,-1
 101028c:	e1800115 	stw	r6,4(fp)
 1010290:	e1c00015 	stw	r7,0(fp)
 1010294:	483e601e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 1010298:	003f0b06 	br	100fec8 <_strtod_r+0x107c>
 101029c:	00bfffc4 	movi	r2,-1
 10102a0:	003f4906 	br	100ffc8 <_strtod_r+0x117c>
 10102a4:	0025883a 	mov	r18,zero
 10102a8:	003cb106 	br	100f570 <_strtod_r+0x724>
 10102ac:	d8c01417 	ldw	r3,80(sp)
 10102b0:	1813003a 	cmpeq	r9,r3,zero
 10102b4:	483e581e 	bne	r9,zero,100fc18 <_strtod_r+0xdcc>
 10102b8:	003f0306 	br	100fec8 <_strtod_r+0x107c>
 10102bc:	980f883a 	mov	r7,r19
 10102c0:	003ed406 	br	100fe14 <_strtod_r+0xfc8>
 10102c4:	d8001415 	stw	zero,80(sp)
 10102c8:	003f6706 	br	1010068 <_strtod_r+0x121c>
 10102cc:	8009883a 	mov	r4,r16
 10102d0:	014040b4 	movhi	r5,258
 10102d4:	296d4d04 	addi	r5,r5,-19148
 10102d8:	d9800d04 	addi	r6,sp,52
 10102dc:	1012ff40 	call	1012ff4 <__hexnan>
 10102e0:	00c00144 	movi	r3,5
 10102e4:	10ffc31e 	bne	r2,r3,10101f4 <_strtod_r+0x13a8>
 10102e8:	d8800e17 	ldw	r2,56(sp)
 10102ec:	d9c00d17 	ldw	r7,52(sp)
 10102f0:	119ffc34 	orhi	r6,r2,32752
 10102f4:	e1800115 	stw	r6,4(fp)
 10102f8:	e1c00015 	stw	r7,0(fp)
 10102fc:	003b4a06 	br	100f028 <_strtod_r+0x1dc>
 1010300:	18fff804 	addi	r3,r3,-32
 1010304:	00bfffc4 	movi	r2,-1
 1010308:	10c4983a 	sll	r2,r2,r3
 101030c:	208c703a 	and	r6,r4,r2
 1010310:	e1800115 	stw	r6,4(fp)
 1010314:	003f7506 	br	10100ec <_strtod_r+0x12a0>
 1010318:	00bfffc4 	movi	r2,-1
 101031c:	10c4983a 	sll	r2,r2,r3
 1010320:	e0c00017 	ldw	r3,0(fp)
 1010324:	188e703a 	and	r7,r3,r2
 1010328:	e1c00015 	stw	r7,0(fp)
 101032c:	003f6f06 	br	10100ec <_strtod_r+0x12a0>

01010330 <strtof>:
 1010330:	defffa04 	addi	sp,sp,-24
 1010334:	dd000415 	stw	r20,16(sp)
 1010338:	050040b4 	movhi	r20,258
 101033c:	a5325404 	addi	r20,r20,-14000
 1010340:	2007883a 	mov	r3,r4
 1010344:	a1000017 	ldw	r4,0(r20)
 1010348:	280d883a 	mov	r6,r5
 101034c:	180b883a 	mov	r5,r3
 1010350:	dfc00515 	stw	ra,20(sp)
 1010354:	dcc00315 	stw	r19,12(sp)
 1010358:	dc800215 	stw	r18,8(sp)
 101035c:	dc400115 	stw	r17,4(sp)
 1010360:	dc000015 	stw	r16,0(sp)
 1010364:	100ee4c0 	call	100ee4c <_strtod_r>
 1010368:	180b883a 	mov	r5,r3
 101036c:	1009883a 	mov	r4,r2
 1010370:	1823883a 	mov	r17,r3
 1010374:	1021883a 	mov	r16,r2
 1010378:	10151ec0 	call	10151ec <__truncdfsf2>
 101037c:	1009883a 	mov	r4,r2
 1010380:	000b883a 	mov	r5,zero
 1010384:	1025883a 	mov	r18,r2
 1010388:	1027883a 	mov	r19,r2
 101038c:	10140640 	call	1014064 <__nesf2>
 1010390:	000d883a 	mov	r6,zero
 1010394:	000f883a 	mov	r7,zero
 1010398:	8009883a 	mov	r4,r16
 101039c:	880b883a 	mov	r5,r17
 10103a0:	10000e1e 	bne	r2,zero,10103dc <strtof+0xac>
 10103a4:	1014d740 	call	1014d74 <__nedf2>
 10103a8:	10000c26 	beq	r2,zero,10103dc <strtof+0xac>
 10103ac:	a0c00017 	ldw	r3,0(r20)
 10103b0:	00800884 	movi	r2,34
 10103b4:	18800015 	stw	r2,0(r3)
 10103b8:	9805883a 	mov	r2,r19
 10103bc:	dfc00517 	ldw	ra,20(sp)
 10103c0:	dd000417 	ldw	r20,16(sp)
 10103c4:	dcc00317 	ldw	r19,12(sp)
 10103c8:	dc800217 	ldw	r18,8(sp)
 10103cc:	dc400117 	ldw	r17,4(sp)
 10103d0:	dc000017 	ldw	r16,0(sp)
 10103d4:	dec00604 	addi	sp,sp,24
 10103d8:	f800283a 	ret
 10103dc:	9009883a 	mov	r4,r18
 10103e0:	015fe034 	movhi	r5,32640
 10103e4:	297fffc4 	addi	r5,r5,-1
 10103e8:	10140dc0 	call	10140dc <__gtsf2>
 10103ec:	00ffffc4 	movi	r3,-1
 10103f0:	011ffc34 	movhi	r4,32752
 10103f4:	213fffc4 	addi	r4,r4,-1
 10103f8:	200f883a 	mov	r7,r4
 10103fc:	180d883a 	mov	r6,r3
 1010400:	8009883a 	mov	r4,r16
 1010404:	880b883a 	mov	r5,r17
 1010408:	00800f16 	blt	zero,r2,1010448 <strtof+0x118>
 101040c:	9009883a 	mov	r4,r18
 1010410:	017fe034 	movhi	r5,65408
 1010414:	297fffc4 	addi	r5,r5,-1
 1010418:	10141540 	call	1014154 <__ltsf2>
 101041c:	023fffc4 	movi	r8,-1
 1010420:	027ffc34 	movhi	r9,65520
 1010424:	4a7fffc4 	addi	r9,r9,-1
 1010428:	880b883a 	mov	r5,r17
 101042c:	480f883a 	mov	r7,r9
 1010430:	8009883a 	mov	r4,r16
 1010434:	400d883a 	mov	r6,r8
 1010438:	103fdf0e 	bge	r2,zero,10103b8 <strtof+0x88>
 101043c:	1014f0c0 	call	1014f0c <__ltdf2>
 1010440:	103fda0e 	bge	r2,zero,10103ac <strtof+0x7c>
 1010444:	003fdc06 	br	10103b8 <strtof+0x88>
 1010448:	1014dfc0 	call	1014dfc <__gtdf2>
 101044c:	00bfd70e 	bge	zero,r2,10103ac <strtof+0x7c>
 1010450:	003fee06 	br	101040c <strtof+0xdc>

01010454 <strtod>:
 1010454:	018040b4 	movhi	r6,258
 1010458:	31b25404 	addi	r6,r6,-14000
 101045c:	2007883a 	mov	r3,r4
 1010460:	31000017 	ldw	r4,0(r6)
 1010464:	280d883a 	mov	r6,r5
 1010468:	180b883a 	mov	r5,r3
 101046c:	100ee4c1 	jmpi	100ee4c <_strtod_r>

01010470 <_strtol_r>:
 1010470:	defff304 	addi	sp,sp,-52
 1010474:	008040b4 	movhi	r2,258
 1010478:	10b25804 	addi	r2,r2,-13984
 101047c:	dcc00615 	stw	r19,24(sp)
 1010480:	14c00017 	ldw	r19,0(r2)
 1010484:	ddc00a15 	stw	r23,40(sp)
 1010488:	dc000315 	stw	r16,12(sp)
 101048c:	dfc00c15 	stw	ra,48(sp)
 1010490:	df000b15 	stw	fp,44(sp)
 1010494:	dd800915 	stw	r22,36(sp)
 1010498:	dd400815 	stw	r21,32(sp)
 101049c:	dd000715 	stw	r20,28(sp)
 10104a0:	dc800515 	stw	r18,20(sp)
 10104a4:	dc400415 	stw	r17,16(sp)
 10104a8:	282f883a 	mov	r23,r5
 10104ac:	d9000015 	stw	r4,0(sp)
 10104b0:	d9800115 	stw	r6,4(sp)
 10104b4:	2821883a 	mov	r16,r5
 10104b8:	84400007 	ldb	r17,0(r16)
 10104bc:	84000044 	addi	r16,r16,1
 10104c0:	9c47883a 	add	r3,r19,r17
 10104c4:	18800003 	ldbu	r2,0(r3)
 10104c8:	1080020c 	andi	r2,r2,8
 10104cc:	103ffa1e 	bne	r2,zero,10104b8 <_strtol_r+0x48>
 10104d0:	00800b44 	movi	r2,45
 10104d4:	88805c26 	beq	r17,r2,1010648 <_strtol_r+0x1d8>
 10104d8:	00800ac4 	movi	r2,43
 10104dc:	88805726 	beq	r17,r2,101063c <_strtol_r+0x1cc>
 10104e0:	0039883a 	mov	fp,zero
 10104e4:	3807003a 	cmpeq	r3,r7,zero
 10104e8:	1800431e 	bne	r3,zero,10105f8 <_strtol_r+0x188>
 10104ec:	00800404 	movi	r2,16
 10104f0:	38804126 	beq	r7,r2,10105f8 <_strtol_r+0x188>
 10104f4:	3829883a 	mov	r20,r7
 10104f8:	e02cc03a 	cmpne	r22,fp,zero
 10104fc:	b0004b1e 	bne	r22,zero,101062c <_strtol_r+0x1bc>
 1010500:	04a00034 	movhi	r18,32768
 1010504:	94bfffc4 	addi	r18,r18,-1
 1010508:	9009883a 	mov	r4,r18
 101050c:	a00b883a 	mov	r5,r20
 1010510:	d9c00215 	stw	r7,8(sp)
 1010514:	10155380 	call	1015538 <__umodsi3>
 1010518:	9009883a 	mov	r4,r18
 101051c:	a00b883a 	mov	r5,r20
 1010520:	102b883a 	mov	r21,r2
 1010524:	10155300 	call	1015530 <__udivsi3>
 1010528:	1011883a 	mov	r8,r2
 101052c:	9c45883a 	add	r2,r19,r17
 1010530:	11000003 	ldbu	r4,0(r2)
 1010534:	000b883a 	mov	r5,zero
 1010538:	000d883a 	mov	r6,zero
 101053c:	20c0010c 	andi	r3,r4,4
 1010540:	d9c00217 	ldw	r7,8(sp)
 1010544:	18000e26 	beq	r3,zero,1010580 <_strtol_r+0x110>
 1010548:	88fff404 	addi	r3,r17,-48
 101054c:	19c0140e 	bge	r3,r7,10105a0 <_strtol_r+0x130>
 1010550:	30003116 	blt	r6,zero,1010618 <_strtol_r+0x1a8>
 1010554:	41403036 	bltu	r8,r5,1010618 <_strtol_r+0x1a8>
 1010558:	2a002e26 	beq	r5,r8,1010614 <_strtol_r+0x1a4>
 101055c:	2d05383a 	mul	r2,r5,r20
 1010560:	01800044 	movi	r6,1
 1010564:	10cb883a 	add	r5,r2,r3
 1010568:	84400007 	ldb	r17,0(r16)
 101056c:	84000044 	addi	r16,r16,1
 1010570:	9c45883a 	add	r2,r19,r17
 1010574:	11000003 	ldbu	r4,0(r2)
 1010578:	20c0010c 	andi	r3,r4,4
 101057c:	183ff21e 	bne	r3,zero,1010548 <_strtol_r+0xd8>
 1010580:	208000cc 	andi	r2,r4,3
 1010584:	10000626 	beq	r2,zero,10105a0 <_strtol_r+0x130>
 1010588:	2080004c 	andi	r2,r4,1
 101058c:	1005003a 	cmpeq	r2,r2,zero
 1010590:	1000231e 	bne	r2,zero,1010620 <_strtol_r+0x1b0>
 1010594:	00800dc4 	movi	r2,55
 1010598:	8887c83a 	sub	r3,r17,r2
 101059c:	19ffec16 	blt	r3,r7,1010550 <_strtol_r+0xe0>
 10105a0:	30002d16 	blt	r6,zero,1010658 <_strtol_r+0x1e8>
 10105a4:	b000231e 	bne	r22,zero,1010634 <_strtol_r+0x1c4>
 10105a8:	2807883a 	mov	r3,r5
 10105ac:	d8800117 	ldw	r2,4(sp)
 10105b0:	10000426 	beq	r2,zero,10105c4 <_strtol_r+0x154>
 10105b4:	30000126 	beq	r6,zero,10105bc <_strtol_r+0x14c>
 10105b8:	85ffffc4 	addi	r23,r16,-1
 10105bc:	d9000117 	ldw	r4,4(sp)
 10105c0:	25c00015 	stw	r23,0(r4)
 10105c4:	1805883a 	mov	r2,r3
 10105c8:	dfc00c17 	ldw	ra,48(sp)
 10105cc:	df000b17 	ldw	fp,44(sp)
 10105d0:	ddc00a17 	ldw	r23,40(sp)
 10105d4:	dd800917 	ldw	r22,36(sp)
 10105d8:	dd400817 	ldw	r21,32(sp)
 10105dc:	dd000717 	ldw	r20,28(sp)
 10105e0:	dcc00617 	ldw	r19,24(sp)
 10105e4:	dc800517 	ldw	r18,20(sp)
 10105e8:	dc400417 	ldw	r17,16(sp)
 10105ec:	dc000317 	ldw	r16,12(sp)
 10105f0:	dec00d04 	addi	sp,sp,52
 10105f4:	f800283a 	ret
 10105f8:	00800c04 	movi	r2,48
 10105fc:	88801d26 	beq	r17,r2,1010674 <_strtol_r+0x204>
 1010600:	183fbc26 	beq	r3,zero,10104f4 <_strtol_r+0x84>
 1010604:	00800c04 	movi	r2,48
 1010608:	88802726 	beq	r17,r2,10106a8 <_strtol_r+0x238>
 101060c:	01c00284 	movi	r7,10
 1010610:	003fb806 	br	10104f4 <_strtol_r+0x84>
 1010614:	a8ffd10e 	bge	r21,r3,101055c <_strtol_r+0xec>
 1010618:	01bfffc4 	movi	r6,-1
 101061c:	003fd206 	br	1010568 <_strtol_r+0xf8>
 1010620:	008015c4 	movi	r2,87
 1010624:	8887c83a 	sub	r3,r17,r2
 1010628:	003fdc06 	br	101059c <_strtol_r+0x12c>
 101062c:	04a00034 	movhi	r18,32768
 1010630:	003fb506 	br	1010508 <_strtol_r+0x98>
 1010634:	0147c83a 	sub	r3,zero,r5
 1010638:	003fdc06 	br	10105ac <_strtol_r+0x13c>
 101063c:	84400007 	ldb	r17,0(r16)
 1010640:	84000044 	addi	r16,r16,1
 1010644:	003fa606 	br	10104e0 <_strtol_r+0x70>
 1010648:	84400007 	ldb	r17,0(r16)
 101064c:	07000044 	movi	fp,1
 1010650:	84000044 	addi	r16,r16,1
 1010654:	003fa306 	br	10104e4 <_strtol_r+0x74>
 1010658:	e005003a 	cmpeq	r2,fp,zero
 101065c:	10000f1e 	bne	r2,zero,101069c <_strtol_r+0x22c>
 1010660:	00e00034 	movhi	r3,32768
 1010664:	d9000017 	ldw	r4,0(sp)
 1010668:	00800884 	movi	r2,34
 101066c:	20800015 	stw	r2,0(r4)
 1010670:	003fce06 	br	10105ac <_strtol_r+0x13c>
 1010674:	81000007 	ldb	r4,0(r16)
 1010678:	00801e04 	movi	r2,120
 101067c:	20800226 	beq	r4,r2,1010688 <_strtol_r+0x218>
 1010680:	00801604 	movi	r2,88
 1010684:	20bfde1e 	bne	r4,r2,1010600 <_strtol_r+0x190>
 1010688:	84400047 	ldb	r17,1(r16)
 101068c:	01c00404 	movi	r7,16
 1010690:	84000084 	addi	r16,r16,2
 1010694:	3829883a 	mov	r20,r7
 1010698:	003f9706 	br	10104f8 <_strtol_r+0x88>
 101069c:	00e00034 	movhi	r3,32768
 10106a0:	18ffffc4 	addi	r3,r3,-1
 10106a4:	003fef06 	br	1010664 <_strtol_r+0x1f4>
 10106a8:	01c00204 	movi	r7,8
 10106ac:	3829883a 	mov	r20,r7
 10106b0:	003f9106 	br	10104f8 <_strtol_r+0x88>

010106b4 <strtol>:
 10106b4:	008040b4 	movhi	r2,258
 10106b8:	10b25404 	addi	r2,r2,-14000
 10106bc:	2013883a 	mov	r9,r4
 10106c0:	11000017 	ldw	r4,0(r2)
 10106c4:	2805883a 	mov	r2,r5
 10106c8:	300f883a 	mov	r7,r6
 10106cc:	480b883a 	mov	r5,r9
 10106d0:	100d883a 	mov	r6,r2
 10106d4:	10104701 	jmpi	1010470 <_strtol_r>

010106d8 <_strtoll_r>:
 10106d8:	defff004 	addi	sp,sp,-64
 10106dc:	008040b4 	movhi	r2,258
 10106e0:	10b25804 	addi	r2,r2,-13984
 10106e4:	df000e15 	stw	fp,56(sp)
 10106e8:	17000017 	ldw	fp,0(r2)
 10106ec:	ddc00d15 	stw	r23,52(sp)
 10106f0:	dd000a15 	stw	r20,40(sp)
 10106f4:	dfc00f15 	stw	ra,60(sp)
 10106f8:	dd800c15 	stw	r22,48(sp)
 10106fc:	dd400b15 	stw	r21,44(sp)
 1010700:	dcc00915 	stw	r19,36(sp)
 1010704:	dc800815 	stw	r18,32(sp)
 1010708:	dc400715 	stw	r17,28(sp)
 101070c:	dc000615 	stw	r16,24(sp)
 1010710:	d9400315 	stw	r5,12(sp)
 1010714:	d9000215 	stw	r4,8(sp)
 1010718:	d9800415 	stw	r6,16(sp)
 101071c:	382f883a 	mov	r23,r7
 1010720:	2829883a 	mov	r20,r5
 1010724:	a4c00007 	ldb	r19,0(r20)
 1010728:	a5000044 	addi	r20,r20,1
 101072c:	e4c7883a 	add	r3,fp,r19
 1010730:	18800003 	ldbu	r2,0(r3)
 1010734:	1080020c 	andi	r2,r2,8
 1010738:	103ffa1e 	bne	r2,zero,1010724 <_strtoll_r+0x4c>
 101073c:	00800b44 	movi	r2,45
 1010740:	98808826 	beq	r19,r2,1010964 <_strtoll_r+0x28c>
 1010744:	00800ac4 	movi	r2,43
 1010748:	98808326 	beq	r19,r2,1010958 <_strtoll_r+0x280>
 101074c:	d8000115 	stw	zero,4(sp)
 1010750:	b807003a 	cmpeq	r3,r23,zero
 1010754:	18005f1e 	bne	r3,zero,10108d4 <_strtoll_r+0x1fc>
 1010758:	00800404 	movi	r2,16
 101075c:	b8805d26 	beq	r23,r2,10108d4 <_strtoll_r+0x1fc>
 1010760:	b82dd7fa 	srai	r22,r23,31
 1010764:	b82b883a 	mov	r21,r23
 1010768:	d8c00117 	ldw	r3,4(sp)
 101076c:	1806c03a 	cmpne	r3,r3,zero
 1010770:	d8c00515 	stw	r3,20(sp)
 1010774:	1800631e 	bne	r3,zero,1010904 <_strtoll_r+0x22c>
 1010778:	043fffc4 	movi	r16,-1
 101077c:	04600034 	movhi	r17,32768
 1010780:	8c7fffc4 	addi	r17,r17,-1
 1010784:	880b883a 	mov	r5,r17
 1010788:	8009883a 	mov	r4,r16
 101078c:	a80d883a 	mov	r6,r21
 1010790:	b00f883a 	mov	r7,r22
 1010794:	1013ab40 	call	1013ab4 <__umoddi3>
 1010798:	880b883a 	mov	r5,r17
 101079c:	8009883a 	mov	r4,r16
 10107a0:	b00f883a 	mov	r7,r22
 10107a4:	a80d883a 	mov	r6,r21
 10107a8:	d8800015 	stw	r2,0(sp)
 10107ac:	10134d80 	call	10134d8 <__udivdi3>
 10107b0:	1023883a 	mov	r17,r2
 10107b4:	e4c5883a 	add	r2,fp,r19
 10107b8:	11000003 	ldbu	r4,0(r2)
 10107bc:	1825883a 	mov	r18,r3
 10107c0:	0015883a 	mov	r10,zero
 10107c4:	20c0010c 	andi	r3,r4,4
 10107c8:	0017883a 	mov	r11,zero
 10107cc:	000f883a 	mov	r7,zero
 10107d0:	18001a26 	beq	r3,zero,101083c <_strtoll_r+0x164>
 10107d4:	9c3ff404 	addi	r16,r19,-48
 10107d8:	85c0200e 	bge	r16,r23,101085c <_strtoll_r+0x184>
 10107dc:	38003b16 	blt	r7,zero,10108cc <_strtoll_r+0x1f4>
 10107e0:	92c03a36 	bltu	r18,r11,10108cc <_strtoll_r+0x1f4>
 10107e4:	5c803826 	beq	r11,r18,10108c8 <_strtoll_r+0x1f0>
 10107e8:	54404c26 	beq	r10,r17,101091c <_strtoll_r+0x244>
 10107ec:	580b883a 	mov	r5,r11
 10107f0:	5009883a 	mov	r4,r10
 10107f4:	a80d883a 	mov	r6,r21
 10107f8:	b00f883a 	mov	r7,r22
 10107fc:	101339c0 	call	101339c <__muldi3>
 1010800:	8013d7fa 	srai	r9,r16,31
 1010804:	100d883a 	mov	r6,r2
 1010808:	1405883a 	add	r2,r2,r16
 101080c:	118d803a 	cmpltu	r6,r2,r6
 1010810:	1a47883a 	add	r3,r3,r9
 1010814:	30cd883a 	add	r6,r6,r3
 1010818:	1015883a 	mov	r10,r2
 101081c:	3017883a 	mov	r11,r6
 1010820:	01c00044 	movi	r7,1
 1010824:	a4c00007 	ldb	r19,0(r20)
 1010828:	a5000044 	addi	r20,r20,1
 101082c:	e4c5883a 	add	r2,fp,r19
 1010830:	11000003 	ldbu	r4,0(r2)
 1010834:	20c0010c 	andi	r3,r4,4
 1010838:	183fe61e 	bne	r3,zero,10107d4 <_strtoll_r+0xfc>
 101083c:	208000cc 	andi	r2,r4,3
 1010840:	10000626 	beq	r2,zero,101085c <_strtoll_r+0x184>
 1010844:	2080004c 	andi	r2,r4,1
 1010848:	1005003a 	cmpeq	r2,r2,zero
 101084c:	1000301e 	bne	r2,zero,1010910 <_strtoll_r+0x238>
 1010850:	02000dc4 	movi	r8,55
 1010854:	9a21c83a 	sub	r16,r19,r8
 1010858:	85ffe016 	blt	r16,r23,10107dc <_strtoll_r+0x104>
 101085c:	38004616 	blt	r7,zero,1010978 <_strtoll_r+0x2a0>
 1010860:	d8800517 	ldw	r2,20(sp)
 1010864:	1000341e 	bne	r2,zero,1010938 <_strtoll_r+0x260>
 1010868:	500b883a 	mov	r5,r10
 101086c:	580d883a 	mov	r6,r11
 1010870:	d8c00417 	ldw	r3,16(sp)
 1010874:	18000626 	beq	r3,zero,1010890 <_strtoll_r+0x1b8>
 1010878:	38000226 	beq	r7,zero,1010884 <_strtoll_r+0x1ac>
 101087c:	a53fffc4 	addi	r20,r20,-1
 1010880:	dd000315 	stw	r20,12(sp)
 1010884:	d8c00317 	ldw	r3,12(sp)
 1010888:	d8800417 	ldw	r2,16(sp)
 101088c:	10c00015 	stw	r3,0(r2)
 1010890:	2805883a 	mov	r2,r5
 1010894:	3007883a 	mov	r3,r6
 1010898:	dfc00f17 	ldw	ra,60(sp)
 101089c:	df000e17 	ldw	fp,56(sp)
 10108a0:	ddc00d17 	ldw	r23,52(sp)
 10108a4:	dd800c17 	ldw	r22,48(sp)
 10108a8:	dd400b17 	ldw	r21,44(sp)
 10108ac:	dd000a17 	ldw	r20,40(sp)
 10108b0:	dcc00917 	ldw	r19,36(sp)
 10108b4:	dc800817 	ldw	r18,32(sp)
 10108b8:	dc400717 	ldw	r17,28(sp)
 10108bc:	dc000617 	ldw	r16,24(sp)
 10108c0:	dec01004 	addi	sp,sp,64
 10108c4:	f800283a 	ret
 10108c8:	8abfc72e 	bgeu	r17,r10,10107e8 <_strtoll_r+0x110>
 10108cc:	01ffffc4 	movi	r7,-1
 10108d0:	003fd406 	br	1010824 <_strtoll_r+0x14c>
 10108d4:	00800c04 	movi	r2,48
 10108d8:	98803226 	beq	r19,r2,10109a4 <_strtoll_r+0x2cc>
 10108dc:	183fa026 	beq	r3,zero,1010760 <_strtoll_r+0x88>
 10108e0:	00800c04 	movi	r2,48
 10108e4:	98803e26 	beq	r19,r2,10109e0 <_strtoll_r+0x308>
 10108e8:	d8c00117 	ldw	r3,4(sp)
 10108ec:	05c00284 	movi	r23,10
 10108f0:	b82b883a 	mov	r21,r23
 10108f4:	1806c03a 	cmpne	r3,r3,zero
 10108f8:	002d883a 	mov	r22,zero
 10108fc:	d8c00515 	stw	r3,20(sp)
 1010900:	183f9d26 	beq	r3,zero,1010778 <_strtoll_r+0xa0>
 1010904:	0021883a 	mov	r16,zero
 1010908:	04600034 	movhi	r17,32768
 101090c:	003f9d06 	br	1010784 <_strtoll_r+0xac>
 1010910:	020015c4 	movi	r8,87
 1010914:	9a21c83a 	sub	r16,r19,r8
 1010918:	003fcf06 	br	1010858 <_strtoll_r+0x180>
 101091c:	5cbfb31e 	bne	r11,r18,10107ec <_strtoll_r+0x114>
 1010920:	d8800017 	ldw	r2,0(sp)
 1010924:	143fb10e 	bge	r2,r16,10107ec <_strtoll_r+0x114>
 1010928:	8815883a 	mov	r10,r17
 101092c:	9017883a 	mov	r11,r18
 1010930:	01ffffc4 	movi	r7,-1
 1010934:	003fbb06 	br	1010824 <_strtoll_r+0x14c>
 1010938:	0009883a 	mov	r4,zero
 101093c:	2285c83a 	sub	r2,r4,r10
 1010940:	2089803a 	cmpltu	r4,r4,r2
 1010944:	02c7c83a 	sub	r3,zero,r11
 1010948:	1909c83a 	sub	r4,r3,r4
 101094c:	100b883a 	mov	r5,r2
 1010950:	200d883a 	mov	r6,r4
 1010954:	003fc606 	br	1010870 <_strtoll_r+0x198>
 1010958:	a4c00007 	ldb	r19,0(r20)
 101095c:	a5000044 	addi	r20,r20,1
 1010960:	003f7a06 	br	101074c <_strtoll_r+0x74>
 1010964:	a4c00007 	ldb	r19,0(r20)
 1010968:	00800044 	movi	r2,1
 101096c:	a5000044 	addi	r20,r20,1
 1010970:	d8800115 	stw	r2,4(sp)
 1010974:	003f7606 	br	1010750 <_strtoll_r+0x78>
 1010978:	d8c00117 	ldw	r3,4(sp)
 101097c:	1805003a 	cmpeq	r2,r3,zero
 1010980:	1000131e 	bne	r2,zero,10109d0 <_strtoll_r+0x2f8>
 1010984:	0005883a 	mov	r2,zero
 1010988:	00e00034 	movhi	r3,32768
 101098c:	100b883a 	mov	r5,r2
 1010990:	180d883a 	mov	r6,r3
 1010994:	d8c00217 	ldw	r3,8(sp)
 1010998:	00800884 	movi	r2,34
 101099c:	18800015 	stw	r2,0(r3)
 10109a0:	003fb306 	br	1010870 <_strtoll_r+0x198>
 10109a4:	a1000007 	ldb	r4,0(r20)
 10109a8:	00801e04 	movi	r2,120
 10109ac:	20800226 	beq	r4,r2,10109b8 <_strtoll_r+0x2e0>
 10109b0:	00801604 	movi	r2,88
 10109b4:	20bfc91e 	bne	r4,r2,10108dc <_strtoll_r+0x204>
 10109b8:	a4c00047 	ldb	r19,1(r20)
 10109bc:	05c00404 	movi	r23,16
 10109c0:	b82b883a 	mov	r21,r23
 10109c4:	a5000084 	addi	r20,r20,2
 10109c8:	002d883a 	mov	r22,zero
 10109cc:	003f6606 	br	1010768 <_strtoll_r+0x90>
 10109d0:	017fffc4 	movi	r5,-1
 10109d4:	01a00034 	movhi	r6,32768
 10109d8:	31bfffc4 	addi	r6,r6,-1
 10109dc:	003fed06 	br	1010994 <_strtoll_r+0x2bc>
 10109e0:	05c00204 	movi	r23,8
 10109e4:	b82b883a 	mov	r21,r23
 10109e8:	002d883a 	mov	r22,zero
 10109ec:	003f5e06 	br	1010768 <_strtoll_r+0x90>

010109f0 <_strtoul_r>:
 10109f0:	defff604 	addi	sp,sp,-40
 10109f4:	008040b4 	movhi	r2,258
 10109f8:	10b25804 	addi	r2,r2,-13984
 10109fc:	dd000415 	stw	r20,16(sp)
 1010a00:	15000017 	ldw	r20,0(r2)
 1010a04:	ddc00715 	stw	r23,28(sp)
 1010a08:	dd800615 	stw	r22,24(sp)
 1010a0c:	dd400515 	stw	r21,20(sp)
 1010a10:	dc800215 	stw	r18,8(sp)
 1010a14:	dc000015 	stw	r16,0(sp)
 1010a18:	dfc00915 	stw	ra,36(sp)
 1010a1c:	df000815 	stw	fp,32(sp)
 1010a20:	dcc00315 	stw	r19,12(sp)
 1010a24:	dc400115 	stw	r17,4(sp)
 1010a28:	282b883a 	mov	r21,r5
 1010a2c:	202f883a 	mov	r23,r4
 1010a30:	302d883a 	mov	r22,r6
 1010a34:	3825883a 	mov	r18,r7
 1010a38:	2821883a 	mov	r16,r5
 1010a3c:	84400007 	ldb	r17,0(r16)
 1010a40:	84000044 	addi	r16,r16,1
 1010a44:	a447883a 	add	r3,r20,r17
 1010a48:	18800003 	ldbu	r2,0(r3)
 1010a4c:	1080020c 	andi	r2,r2,8
 1010a50:	103ffa1e 	bne	r2,zero,1010a3c <_strtoul_r+0x4c>
 1010a54:	00800b44 	movi	r2,45
 1010a58:	88805626 	beq	r17,r2,1010bb4 <_strtoul_r+0x1c4>
 1010a5c:	00800ac4 	movi	r2,43
 1010a60:	88805126 	beq	r17,r2,1010ba8 <_strtoul_r+0x1b8>
 1010a64:	0039883a 	mov	fp,zero
 1010a68:	9007003a 	cmpeq	r3,r18,zero
 1010a6c:	18003b1e 	bne	r3,zero,1010b5c <_strtoul_r+0x16c>
 1010a70:	00800404 	movi	r2,16
 1010a74:	90803926 	beq	r18,r2,1010b5c <_strtoul_r+0x16c>
 1010a78:	013fffc4 	movi	r4,-1
 1010a7c:	900b883a 	mov	r5,r18
 1010a80:	10155300 	call	1015530 <__udivsi3>
 1010a84:	013fffc4 	movi	r4,-1
 1010a88:	900b883a 	mov	r5,r18
 1010a8c:	1027883a 	mov	r19,r2
 1010a90:	10155380 	call	1015538 <__umodsi3>
 1010a94:	1011883a 	mov	r8,r2
 1010a98:	900f883a 	mov	r7,r18
 1010a9c:	a445883a 	add	r2,r20,r17
 1010aa0:	11000003 	ldbu	r4,0(r2)
 1010aa4:	000b883a 	mov	r5,zero
 1010aa8:	000d883a 	mov	r6,zero
 1010aac:	20c0010c 	andi	r3,r4,4
 1010ab0:	18000e26 	beq	r3,zero,1010aec <_strtoul_r+0xfc>
 1010ab4:	88fff404 	addi	r3,r17,-48
 1010ab8:	1c80140e 	bge	r3,r18,1010b0c <_strtoul_r+0x11c>
 1010abc:	30003316 	blt	r6,zero,1010b8c <_strtoul_r+0x19c>
 1010ac0:	99403236 	bltu	r19,r5,1010b8c <_strtoul_r+0x19c>
 1010ac4:	2cc03026 	beq	r5,r19,1010b88 <_strtoul_r+0x198>
 1010ac8:	29c5383a 	mul	r2,r5,r7
 1010acc:	01800044 	movi	r6,1
 1010ad0:	10cb883a 	add	r5,r2,r3
 1010ad4:	84400007 	ldb	r17,0(r16)
 1010ad8:	84000044 	addi	r16,r16,1
 1010adc:	a445883a 	add	r2,r20,r17
 1010ae0:	11000003 	ldbu	r4,0(r2)
 1010ae4:	20c0010c 	andi	r3,r4,4
 1010ae8:	183ff21e 	bne	r3,zero,1010ab4 <_strtoul_r+0xc4>
 1010aec:	208000cc 	andi	r2,r4,3
 1010af0:	10000626 	beq	r2,zero,1010b0c <_strtoul_r+0x11c>
 1010af4:	2080004c 	andi	r2,r4,1
 1010af8:	1005003a 	cmpeq	r2,r2,zero
 1010afc:	1000251e 	bne	r2,zero,1010b94 <_strtoul_r+0x1a4>
 1010b00:	00800dc4 	movi	r2,55
 1010b04:	8887c83a 	sub	r3,r17,r2
 1010b08:	1cbfec16 	blt	r3,r18,1010abc <_strtoul_r+0xcc>
 1010b0c:	3000400e 	bge	r6,zero,1010c10 <_strtoul_r+0x220>
 1010b10:	00800884 	movi	r2,34
 1010b14:	017fffc4 	movi	r5,-1
 1010b18:	b8800015 	stw	r2,0(r23)
 1010b1c:	b0000226 	beq	r22,zero,1010b28 <_strtoul_r+0x138>
 1010b20:	30001f1e 	bne	r6,zero,1010ba0 <_strtoul_r+0x1b0>
 1010b24:	b5400015 	stw	r21,0(r22)
 1010b28:	2805883a 	mov	r2,r5
 1010b2c:	dfc00917 	ldw	ra,36(sp)
 1010b30:	df000817 	ldw	fp,32(sp)
 1010b34:	ddc00717 	ldw	r23,28(sp)
 1010b38:	dd800617 	ldw	r22,24(sp)
 1010b3c:	dd400517 	ldw	r21,20(sp)
 1010b40:	dd000417 	ldw	r20,16(sp)
 1010b44:	dcc00317 	ldw	r19,12(sp)
 1010b48:	dc800217 	ldw	r18,8(sp)
 1010b4c:	dc400117 	ldw	r17,4(sp)
 1010b50:	dc000017 	ldw	r16,0(sp)
 1010b54:	dec00a04 	addi	sp,sp,40
 1010b58:	f800283a 	ret
 1010b5c:	00800c04 	movi	r2,48
 1010b60:	88801826 	beq	r17,r2,1010bc4 <_strtoul_r+0x1d4>
 1010b64:	183fc426 	beq	r3,zero,1010a78 <_strtoul_r+0x88>
 1010b68:	00800c04 	movi	r2,48
 1010b6c:	88802226 	beq	r17,r2,1010bf8 <_strtoul_r+0x208>
 1010b70:	04800284 	movi	r18,10
 1010b74:	900f883a 	mov	r7,r18
 1010b78:	04c666b4 	movhi	r19,6554
 1010b7c:	9ce66644 	addi	r19,r19,-26215
 1010b80:	02000144 	movi	r8,5
 1010b84:	003fc506 	br	1010a9c <_strtoul_r+0xac>
 1010b88:	40ffcf0e 	bge	r8,r3,1010ac8 <_strtoul_r+0xd8>
 1010b8c:	01bfffc4 	movi	r6,-1
 1010b90:	003fd006 	br	1010ad4 <_strtoul_r+0xe4>
 1010b94:	008015c4 	movi	r2,87
 1010b98:	8887c83a 	sub	r3,r17,r2
 1010b9c:	003fda06 	br	1010b08 <_strtoul_r+0x118>
 1010ba0:	857fffc4 	addi	r21,r16,-1
 1010ba4:	003fdf06 	br	1010b24 <_strtoul_r+0x134>
 1010ba8:	84400007 	ldb	r17,0(r16)
 1010bac:	84000044 	addi	r16,r16,1
 1010bb0:	003fac06 	br	1010a64 <_strtoul_r+0x74>
 1010bb4:	84400007 	ldb	r17,0(r16)
 1010bb8:	07000044 	movi	fp,1
 1010bbc:	84000044 	addi	r16,r16,1
 1010bc0:	003fa906 	br	1010a68 <_strtoul_r+0x78>
 1010bc4:	81000007 	ldb	r4,0(r16)
 1010bc8:	00801e04 	movi	r2,120
 1010bcc:	20800226 	beq	r4,r2,1010bd8 <_strtoul_r+0x1e8>
 1010bd0:	00801604 	movi	r2,88
 1010bd4:	20bfe31e 	bne	r4,r2,1010b64 <_strtoul_r+0x174>
 1010bd8:	84400047 	ldb	r17,1(r16)
 1010bdc:	04800404 	movi	r18,16
 1010be0:	84000084 	addi	r16,r16,2
 1010be4:	900f883a 	mov	r7,r18
 1010be8:	04c40034 	movhi	r19,4096
 1010bec:	9cffffc4 	addi	r19,r19,-1
 1010bf0:	020003c4 	movi	r8,15
 1010bf4:	003fa906 	br	1010a9c <_strtoul_r+0xac>
 1010bf8:	04800204 	movi	r18,8
 1010bfc:	900f883a 	mov	r7,r18
 1010c00:	04c80034 	movhi	r19,8192
 1010c04:	9cffffc4 	addi	r19,r19,-1
 1010c08:	020001c4 	movi	r8,7
 1010c0c:	003fa306 	br	1010a9c <_strtoul_r+0xac>
 1010c10:	e005003a 	cmpeq	r2,fp,zero
 1010c14:	103fc11e 	bne	r2,zero,1010b1c <_strtoul_r+0x12c>
 1010c18:	014bc83a 	sub	r5,zero,r5
 1010c1c:	003fbf06 	br	1010b1c <_strtoul_r+0x12c>

01010c20 <strtoul>:
 1010c20:	008040b4 	movhi	r2,258
 1010c24:	10b25404 	addi	r2,r2,-14000
 1010c28:	2013883a 	mov	r9,r4
 1010c2c:	11000017 	ldw	r4,0(r2)
 1010c30:	2805883a 	mov	r2,r5
 1010c34:	300f883a 	mov	r7,r6
 1010c38:	480b883a 	mov	r5,r9
 1010c3c:	100d883a 	mov	r6,r2
 1010c40:	10109f01 	jmpi	10109f0 <_strtoul_r>

01010c44 <_strtoull_r>:
 1010c44:	defff104 	addi	sp,sp,-60
 1010c48:	008040b4 	movhi	r2,258
 1010c4c:	10b25804 	addi	r2,r2,-13984
 1010c50:	df000d15 	stw	fp,52(sp)
 1010c54:	17000017 	ldw	fp,0(r2)
 1010c58:	ddc00c15 	stw	r23,48(sp)
 1010c5c:	dcc00815 	stw	r19,32(sp)
 1010c60:	dfc00e15 	stw	ra,56(sp)
 1010c64:	dd800b15 	stw	r22,44(sp)
 1010c68:	dd400a15 	stw	r21,40(sp)
 1010c6c:	dd000915 	stw	r20,36(sp)
 1010c70:	dc800715 	stw	r18,28(sp)
 1010c74:	dc400615 	stw	r17,24(sp)
 1010c78:	dc000515 	stw	r16,20(sp)
 1010c7c:	d9400215 	stw	r5,8(sp)
 1010c80:	d9000115 	stw	r4,4(sp)
 1010c84:	d9800315 	stw	r6,12(sp)
 1010c88:	382f883a 	mov	r23,r7
 1010c8c:	2827883a 	mov	r19,r5
 1010c90:	9d000007 	ldb	r20,0(r19)
 1010c94:	9cc00044 	addi	r19,r19,1
 1010c98:	e507883a 	add	r3,fp,r20
 1010c9c:	18800003 	ldbu	r2,0(r3)
 1010ca0:	1080020c 	andi	r2,r2,8
 1010ca4:	103ffa1e 	bne	r2,zero,1010c90 <_strtoull_r+0x4c>
 1010ca8:	00800b44 	movi	r2,45
 1010cac:	a0807a26 	beq	r20,r2,1010e98 <_strtoull_r+0x254>
 1010cb0:	00800ac4 	movi	r2,43
 1010cb4:	a0807526 	beq	r20,r2,1010e8c <_strtoull_r+0x248>
 1010cb8:	d8000015 	stw	zero,0(sp)
 1010cbc:	b807003a 	cmpeq	r3,r23,zero
 1010cc0:	18005a1e 	bne	r3,zero,1010e2c <_strtoull_r+0x1e8>
 1010cc4:	00800404 	movi	r2,16
 1010cc8:	b8805826 	beq	r23,r2,1010e2c <_strtoull_r+0x1e8>
 1010ccc:	b82dd7fa 	srai	r22,r23,31
 1010cd0:	043fffc4 	movi	r16,-1
 1010cd4:	8009883a 	mov	r4,r16
 1010cd8:	800b883a 	mov	r5,r16
 1010cdc:	b80d883a 	mov	r6,r23
 1010ce0:	b00f883a 	mov	r7,r22
 1010ce4:	10134d80 	call	10134d8 <__udivdi3>
 1010ce8:	8009883a 	mov	r4,r16
 1010cec:	800b883a 	mov	r5,r16
 1010cf0:	b80d883a 	mov	r6,r23
 1010cf4:	b00f883a 	mov	r7,r22
 1010cf8:	1023883a 	mov	r17,r2
 1010cfc:	1825883a 	mov	r18,r3
 1010d00:	1013ab40 	call	1013ab4 <__umoddi3>
 1010d04:	b82b883a 	mov	r21,r23
 1010d08:	1019883a 	mov	r12,r2
 1010d0c:	e505883a 	add	r2,fp,r20
 1010d10:	11000003 	ldbu	r4,0(r2)
 1010d14:	0015883a 	mov	r10,zero
 1010d18:	0017883a 	mov	r11,zero
 1010d1c:	20c0010c 	andi	r3,r4,4
 1010d20:	000d883a 	mov	r6,zero
 1010d24:	18001c26 	beq	r3,zero,1010d98 <_strtoull_r+0x154>
 1010d28:	a43ff404 	addi	r16,r20,-48
 1010d2c:	85c0220e 	bge	r16,r23,1010db8 <_strtoull_r+0x174>
 1010d30:	30003c16 	blt	r6,zero,1010e24 <_strtoull_r+0x1e0>
 1010d34:	92c03b36 	bltu	r18,r11,1010e24 <_strtoull_r+0x1e0>
 1010d38:	5c803926 	beq	r11,r18,1010e20 <_strtoull_r+0x1dc>
 1010d3c:	54404c26 	beq	r10,r17,1010e70 <_strtoull_r+0x22c>
 1010d40:	580b883a 	mov	r5,r11
 1010d44:	5009883a 	mov	r4,r10
 1010d48:	a80d883a 	mov	r6,r21
 1010d4c:	b00f883a 	mov	r7,r22
 1010d50:	db000415 	stw	r12,16(sp)
 1010d54:	101339c0 	call	101339c <__muldi3>
 1010d58:	8013d7fa 	srai	r9,r16,31
 1010d5c:	100d883a 	mov	r6,r2
 1010d60:	1405883a 	add	r2,r2,r16
 1010d64:	118d803a 	cmpltu	r6,r2,r6
 1010d68:	1a47883a 	add	r3,r3,r9
 1010d6c:	db000417 	ldw	r12,16(sp)
 1010d70:	30cd883a 	add	r6,r6,r3
 1010d74:	3017883a 	mov	r11,r6
 1010d78:	1015883a 	mov	r10,r2
 1010d7c:	01800044 	movi	r6,1
 1010d80:	9d000007 	ldb	r20,0(r19)
 1010d84:	9cc00044 	addi	r19,r19,1
 1010d88:	e505883a 	add	r2,fp,r20
 1010d8c:	11000003 	ldbu	r4,0(r2)
 1010d90:	20c0010c 	andi	r3,r4,4
 1010d94:	183fe41e 	bne	r3,zero,1010d28 <_strtoull_r+0xe4>
 1010d98:	208000cc 	andi	r2,r4,3
 1010d9c:	10000626 	beq	r2,zero,1010db8 <_strtoull_r+0x174>
 1010da0:	2080004c 	andi	r2,r4,1
 1010da4:	1005003a 	cmpeq	r2,r2,zero
 1010da8:	10002e1e 	bne	r2,zero,1010e64 <_strtoull_r+0x220>
 1010dac:	02000dc4 	movi	r8,55
 1010db0:	a221c83a 	sub	r16,r20,r8
 1010db4:	85ffde16 	blt	r16,r23,1010d30 <_strtoull_r+0xec>
 1010db8:	3000530e 	bge	r6,zero,1010f08 <_strtoull_r+0x2c4>
 1010dbc:	d8c00117 	ldw	r3,4(sp)
 1010dc0:	02bfffc4 	movi	r10,-1
 1010dc4:	00800884 	movi	r2,34
 1010dc8:	5017883a 	mov	r11,r10
 1010dcc:	18800015 	stw	r2,0(r3)
 1010dd0:	d8800317 	ldw	r2,12(sp)
 1010dd4:	10000426 	beq	r2,zero,1010de8 <_strtoull_r+0x1a4>
 1010dd8:	3000291e 	bne	r6,zero,1010e80 <_strtoull_r+0x23c>
 1010ddc:	d8800217 	ldw	r2,8(sp)
 1010de0:	d8c00317 	ldw	r3,12(sp)
 1010de4:	18800015 	stw	r2,0(r3)
 1010de8:	5005883a 	mov	r2,r10
 1010dec:	5807883a 	mov	r3,r11
 1010df0:	dfc00e17 	ldw	ra,56(sp)
 1010df4:	df000d17 	ldw	fp,52(sp)
 1010df8:	ddc00c17 	ldw	r23,48(sp)
 1010dfc:	dd800b17 	ldw	r22,44(sp)
 1010e00:	dd400a17 	ldw	r21,40(sp)
 1010e04:	dd000917 	ldw	r20,36(sp)
 1010e08:	dcc00817 	ldw	r19,32(sp)
 1010e0c:	dc800717 	ldw	r18,28(sp)
 1010e10:	dc400617 	ldw	r17,24(sp)
 1010e14:	dc000517 	ldw	r16,20(sp)
 1010e18:	dec00f04 	addi	sp,sp,60
 1010e1c:	f800283a 	ret
 1010e20:	8abfc62e 	bgeu	r17,r10,1010d3c <_strtoull_r+0xf8>
 1010e24:	01bfffc4 	movi	r6,-1
 1010e28:	003fd506 	br	1010d80 <_strtoull_r+0x13c>
 1010e2c:	00800c04 	movi	r2,48
 1010e30:	a0801e26 	beq	r20,r2,1010eac <_strtoull_r+0x268>
 1010e34:	183fa526 	beq	r3,zero,1010ccc <_strtoull_r+0x88>
 1010e38:	00800c04 	movi	r2,48
 1010e3c:	a0802a26 	beq	r20,r2,1010ee8 <_strtoull_r+0x2a4>
 1010e40:	05c00284 	movi	r23,10
 1010e44:	b82b883a 	mov	r21,r23
 1010e48:	046666b4 	movhi	r17,39322
 1010e4c:	8c666644 	addi	r17,r17,-26215
 1010e50:	002d883a 	mov	r22,zero
 1010e54:	048666b4 	movhi	r18,6554
 1010e58:	94a66644 	addi	r18,r18,-26215
 1010e5c:	03000144 	movi	r12,5
 1010e60:	003faa06 	br	1010d0c <_strtoull_r+0xc8>
 1010e64:	020015c4 	movi	r8,87
 1010e68:	a221c83a 	sub	r16,r20,r8
 1010e6c:	003fd106 	br	1010db4 <_strtoull_r+0x170>
 1010e70:	5cbfb31e 	bne	r11,r18,1010d40 <_strtoull_r+0xfc>
 1010e74:	643fb20e 	bge	r12,r16,1010d40 <_strtoull_r+0xfc>
 1010e78:	01bfffc4 	movi	r6,-1
 1010e7c:	003fc006 	br	1010d80 <_strtoull_r+0x13c>
 1010e80:	9cffffc4 	addi	r19,r19,-1
 1010e84:	dcc00215 	stw	r19,8(sp)
 1010e88:	003fd406 	br	1010ddc <_strtoull_r+0x198>
 1010e8c:	9d000007 	ldb	r20,0(r19)
 1010e90:	9cc00044 	addi	r19,r19,1
 1010e94:	003f8806 	br	1010cb8 <_strtoull_r+0x74>
 1010e98:	9d000007 	ldb	r20,0(r19)
 1010e9c:	00800044 	movi	r2,1
 1010ea0:	9cc00044 	addi	r19,r19,1
 1010ea4:	d8800015 	stw	r2,0(sp)
 1010ea8:	003f8406 	br	1010cbc <_strtoull_r+0x78>
 1010eac:	99000007 	ldb	r4,0(r19)
 1010eb0:	00801e04 	movi	r2,120
 1010eb4:	20800226 	beq	r4,r2,1010ec0 <_strtoull_r+0x27c>
 1010eb8:	00801604 	movi	r2,88
 1010ebc:	20bfdd1e 	bne	r4,r2,1010e34 <_strtoull_r+0x1f0>
 1010ec0:	9d000047 	ldb	r20,1(r19)
 1010ec4:	05c00404 	movi	r23,16
 1010ec8:	b82b883a 	mov	r21,r23
 1010ecc:	047fffc4 	movi	r17,-1
 1010ed0:	9cc00084 	addi	r19,r19,2
 1010ed4:	002d883a 	mov	r22,zero
 1010ed8:	04840034 	movhi	r18,4096
 1010edc:	94bfffc4 	addi	r18,r18,-1
 1010ee0:	030003c4 	movi	r12,15
 1010ee4:	003f8906 	br	1010d0c <_strtoull_r+0xc8>
 1010ee8:	05c00204 	movi	r23,8
 1010eec:	b82b883a 	mov	r21,r23
 1010ef0:	047fffc4 	movi	r17,-1
 1010ef4:	002d883a 	mov	r22,zero
 1010ef8:	04880034 	movhi	r18,8192
 1010efc:	94bfffc4 	addi	r18,r18,-1
 1010f00:	030001c4 	movi	r12,7
 1010f04:	003f8106 	br	1010d0c <_strtoull_r+0xc8>
 1010f08:	d8c00017 	ldw	r3,0(sp)
 1010f0c:	1805003a 	cmpeq	r2,r3,zero
 1010f10:	103faf1e 	bne	r2,zero,1010dd0 <_strtoull_r+0x18c>
 1010f14:	0009883a 	mov	r4,zero
 1010f18:	2285c83a 	sub	r2,r4,r10
 1010f1c:	02c7c83a 	sub	r3,zero,r11
 1010f20:	2089803a 	cmpltu	r4,r4,r2
 1010f24:	1909c83a 	sub	r4,r3,r4
 1010f28:	1015883a 	mov	r10,r2
 1010f2c:	2017883a 	mov	r11,r4
 1010f30:	003fa706 	br	1010dd0 <_strtoull_r+0x18c>

01010f34 <__submore>:
 1010f34:	defffa04 	addi	sp,sp,-24
 1010f38:	28c00c17 	ldw	r3,48(r5)
 1010f3c:	dc800215 	stw	r18,8(sp)
 1010f40:	2825883a 	mov	r18,r5
 1010f44:	dc000015 	stw	r16,0(sp)
 1010f48:	90801004 	addi	r2,r18,64
 1010f4c:	04010004 	movi	r16,1024
 1010f50:	dfc00515 	stw	ra,20(sp)
 1010f54:	dd000415 	stw	r20,16(sp)
 1010f58:	dcc00315 	stw	r19,12(sp)
 1010f5c:	dc400115 	stw	r17,4(sp)
 1010f60:	800b883a 	mov	r5,r16
 1010f64:	18801b26 	beq	r3,r2,1010fd4 <__submore+0xa0>
 1010f68:	94400d17 	ldw	r17,52(r18)
 1010f6c:	180b883a 	mov	r5,r3
 1010f70:	8c69883a 	add	r20,r17,r17
 1010f74:	a00d883a 	mov	r6,r20
 1010f78:	100df880 	call	100df88 <_realloc_r>
 1010f7c:	1467883a 	add	r19,r2,r17
 1010f80:	1021883a 	mov	r16,r2
 1010f84:	880d883a 	mov	r6,r17
 1010f88:	9809883a 	mov	r4,r19
 1010f8c:	100b883a 	mov	r5,r2
 1010f90:	10000e26 	beq	r2,zero,1010fcc <__submore+0x98>
 1010f94:	10060100 	call	1006010 <memcpy>
 1010f98:	000d883a 	mov	r6,zero
 1010f9c:	95000d15 	stw	r20,52(r18)
 1010fa0:	94c00015 	stw	r19,0(r18)
 1010fa4:	94000c15 	stw	r16,48(r18)
 1010fa8:	3005883a 	mov	r2,r6
 1010fac:	dfc00517 	ldw	ra,20(sp)
 1010fb0:	dd000417 	ldw	r20,16(sp)
 1010fb4:	dcc00317 	ldw	r19,12(sp)
 1010fb8:	dc800217 	ldw	r18,8(sp)
 1010fbc:	dc400117 	ldw	r17,4(sp)
 1010fc0:	dc000017 	ldw	r16,0(sp)
 1010fc4:	dec00604 	addi	sp,sp,24
 1010fc8:	f800283a 	ret
 1010fcc:	01bfffc4 	movi	r6,-1
 1010fd0:	003ff506 	br	1010fa8 <__submore+0x74>
 1010fd4:	10058d00 	call	10058d0 <_malloc_r>
 1010fd8:	1009883a 	mov	r4,r2
 1010fdc:	1140ff44 	addi	r5,r2,1021
 1010fe0:	000d883a 	mov	r6,zero
 1010fe4:	103ff926 	beq	r2,zero,1010fcc <__submore+0x98>
 1010fe8:	90801083 	ldbu	r2,66(r18)
 1010fec:	94000d15 	stw	r16,52(r18)
 1010ff0:	91000c15 	stw	r4,48(r18)
 1010ff4:	28800085 	stb	r2,2(r5)
 1010ff8:	90c01043 	ldbu	r3,65(r18)
 1010ffc:	28c00045 	stb	r3,1(r5)
 1011000:	90801003 	ldbu	r2,64(r18)
 1011004:	2080ff45 	stb	r2,1021(r4)
 1011008:	91400015 	stw	r5,0(r18)
 101100c:	003fe606 	br	1010fa8 <__submore+0x74>

01011010 <_ungetc_r>:
 1011010:	defffc04 	addi	sp,sp,-16
 1011014:	00bfffc4 	movi	r2,-1
 1011018:	dc400215 	stw	r17,8(sp)
 101101c:	dc000115 	stw	r16,4(sp)
 1011020:	dfc00315 	stw	ra,12(sp)
 1011024:	2821883a 	mov	r16,r5
 1011028:	2023883a 	mov	r17,r4
 101102c:	28801826 	beq	r5,r2,1011090 <_ungetc_r+0x80>
 1011030:	20000226 	beq	r4,zero,101103c <_ungetc_r+0x2c>
 1011034:	20800e17 	ldw	r2,56(r4)
 1011038:	10001b26 	beq	r2,zero,10110a8 <_ungetc_r+0x98>
 101103c:	3100030b 	ldhu	r4,12(r6)
 1011040:	00bff7c4 	movi	r2,-33
 1011044:	2084703a 	and	r2,r4,r2
 1011048:	117fffcc 	andi	r5,r2,65535
 101104c:	28c0010c 	andi	r3,r5,4
 1011050:	1009883a 	mov	r4,r2
 1011054:	3080030d 	sth	r2,12(r6)
 1011058:	18003526 	beq	r3,zero,1011130 <_ungetc_r+0x120>
 101105c:	30800c17 	ldw	r2,48(r6)
 1011060:	84003fcc 	andi	r16,r16,255
 1011064:	10001426 	beq	r2,zero,10110b8 <_ungetc_r+0xa8>
 1011068:	30c00117 	ldw	r3,4(r6)
 101106c:	30800d17 	ldw	r2,52(r6)
 1011070:	1880380e 	bge	r3,r2,1011154 <_ungetc_r+0x144>
 1011074:	30c00017 	ldw	r3,0(r6)
 1011078:	19ffffc4 	addi	r7,r3,-1
 101107c:	31c00015 	stw	r7,0(r6)
 1011080:	1c3fffc5 	stb	r16,-1(r3)
 1011084:	30800117 	ldw	r2,4(r6)
 1011088:	10800044 	addi	r2,r2,1
 101108c:	30800115 	stw	r2,4(r6)
 1011090:	8005883a 	mov	r2,r16
 1011094:	dfc00317 	ldw	ra,12(sp)
 1011098:	dc400217 	ldw	r17,8(sp)
 101109c:	dc000117 	ldw	r16,4(sp)
 10110a0:	dec00404 	addi	sp,sp,16
 10110a4:	f800283a 	ret
 10110a8:	d9800015 	stw	r6,0(sp)
 10110ac:	100b9700 	call	100b970 <__sinit>
 10110b0:	d9800017 	ldw	r6,0(sp)
 10110b4:	003fe106 	br	101103c <_ungetc_r+0x2c>
 10110b8:	30800417 	ldw	r2,16(r6)
 10110bc:	10002326 	beq	r2,zero,101114c <_ungetc_r+0x13c>
 10110c0:	31c00017 	ldw	r7,0(r6)
 10110c4:	11c0022e 	bgeu	r2,r7,10110d0 <_ungetc_r+0xc0>
 10110c8:	38bfffc3 	ldbu	r2,-1(r7)
 10110cc:	80801226 	beq	r16,r2,1011118 <_ungetc_r+0x108>
 10110d0:	30c00117 	ldw	r3,4(r6)
 10110d4:	00800044 	movi	r2,1
 10110d8:	30800115 	stw	r2,4(r6)
 10110dc:	008000c4 	movi	r2,3
 10110e0:	31001004 	addi	r4,r6,64
 10110e4:	31401084 	addi	r5,r6,66
 10110e8:	30800d15 	stw	r2,52(r6)
 10110ec:	8005883a 	mov	r2,r16
 10110f0:	30c00f15 	stw	r3,60(r6)
 10110f4:	31c00e15 	stw	r7,56(r6)
 10110f8:	31000c15 	stw	r4,48(r6)
 10110fc:	31400015 	stw	r5,0(r6)
 1011100:	34001085 	stb	r16,66(r6)
 1011104:	dfc00317 	ldw	ra,12(sp)
 1011108:	dc400217 	ldw	r17,8(sp)
 101110c:	dc000117 	ldw	r16,4(sp)
 1011110:	dec00404 	addi	sp,sp,16
 1011114:	f800283a 	ret
 1011118:	30800117 	ldw	r2,4(r6)
 101111c:	39ffffc4 	addi	r7,r7,-1
 1011120:	31c00015 	stw	r7,0(r6)
 1011124:	10800044 	addi	r2,r2,1
 1011128:	30800115 	stw	r2,4(r6)
 101112c:	003fd806 	br	1011090 <_ungetc_r+0x80>
 1011130:	2880040c 	andi	r2,r5,16
 1011134:	10000d26 	beq	r2,zero,101116c <_ungetc_r+0x15c>
 1011138:	2880020c 	andi	r2,r5,8
 101113c:	10000d1e 	bne	r2,zero,1011174 <_ungetc_r+0x164>
 1011140:	20800114 	ori	r2,r4,4
 1011144:	3080030d 	sth	r2,12(r6)
 1011148:	003fc406 	br	101105c <_ungetc_r+0x4c>
 101114c:	31c00017 	ldw	r7,0(r6)
 1011150:	003fdf06 	br	10110d0 <_ungetc_r+0xc0>
 1011154:	300b883a 	mov	r5,r6
 1011158:	8809883a 	mov	r4,r17
 101115c:	d9800015 	stw	r6,0(sp)
 1011160:	1010f340 	call	1010f34 <__submore>
 1011164:	d9800017 	ldw	r6,0(sp)
 1011168:	103fc226 	beq	r2,zero,1011074 <_ungetc_r+0x64>
 101116c:	043fffc4 	movi	r16,-1
 1011170:	003fc706 	br	1011090 <_ungetc_r+0x80>
 1011174:	300b883a 	mov	r5,r6
 1011178:	8809883a 	mov	r4,r17
 101117c:	d9800015 	stw	r6,0(sp)
 1011180:	100b6d80 	call	100b6d8 <_fflush_r>
 1011184:	d9800017 	ldw	r6,0(sp)
 1011188:	103ff81e 	bne	r2,zero,101116c <_ungetc_r+0x15c>
 101118c:	3100030b 	ldhu	r4,12(r6)
 1011190:	00bffdc4 	movi	r2,-9
 1011194:	30000215 	stw	zero,8(r6)
 1011198:	2084703a 	and	r2,r4,r2
 101119c:	1009883a 	mov	r4,r2
 10111a0:	3080030d 	sth	r2,12(r6)
 10111a4:	30000615 	stw	zero,24(r6)
 10111a8:	003fe506 	br	1011140 <_ungetc_r+0x130>

010111ac <ungetc>:
 10111ac:	018040b4 	movhi	r6,258
 10111b0:	31b25404 	addi	r6,r6,-14000
 10111b4:	2007883a 	mov	r3,r4
 10111b8:	31000017 	ldw	r4,0(r6)
 10111bc:	280d883a 	mov	r6,r5
 10111c0:	180b883a 	mov	r5,r3
 10111c4:	10110101 	jmpi	1011010 <_ungetc_r>

010111c8 <__sprint_r>:
 10111c8:	30800217 	ldw	r2,8(r6)
 10111cc:	defffe04 	addi	sp,sp,-8
 10111d0:	dc000015 	stw	r16,0(sp)
 10111d4:	dfc00115 	stw	ra,4(sp)
 10111d8:	3021883a 	mov	r16,r6
 10111dc:	0007883a 	mov	r3,zero
 10111e0:	1000061e 	bne	r2,zero,10111fc <__sprint_r+0x34>
 10111e4:	1805883a 	mov	r2,r3
 10111e8:	30000115 	stw	zero,4(r6)
 10111ec:	dfc00117 	ldw	ra,4(sp)
 10111f0:	dc000017 	ldw	r16,0(sp)
 10111f4:	dec00204 	addi	sp,sp,8
 10111f8:	f800283a 	ret
 10111fc:	100c2440 	call	100c244 <__sfvwrite_r>
 1011200:	1007883a 	mov	r3,r2
 1011204:	1805883a 	mov	r2,r3
 1011208:	80000115 	stw	zero,4(r16)
 101120c:	80000215 	stw	zero,8(r16)
 1011210:	dfc00117 	ldw	ra,4(sp)
 1011214:	dc000017 	ldw	r16,0(sp)
 1011218:	dec00204 	addi	sp,sp,8
 101121c:	f800283a 	ret

01011220 <___vfiprintf_internal_r>:
 1011220:	defeb604 	addi	sp,sp,-1320
 1011224:	dd814615 	stw	r22,1304(sp)
 1011228:	dd414515 	stw	r21,1300(sp)
 101122c:	dc014015 	stw	r16,1280(sp)
 1011230:	dfc14915 	stw	ra,1316(sp)
 1011234:	df014815 	stw	fp,1312(sp)
 1011238:	ddc14715 	stw	r23,1308(sp)
 101123c:	dd014415 	stw	r20,1296(sp)
 1011240:	dcc14315 	stw	r19,1292(sp)
 1011244:	dc814215 	stw	r18,1288(sp)
 1011248:	dc414115 	stw	r17,1284(sp)
 101124c:	202d883a 	mov	r22,r4
 1011250:	282b883a 	mov	r21,r5
 1011254:	3021883a 	mov	r16,r6
 1011258:	20000226 	beq	r4,zero,1011264 <___vfiprintf_internal_r+0x44>
 101125c:	20800e17 	ldw	r2,56(r4)
 1011260:	1001bc26 	beq	r2,zero,1011954 <___vfiprintf_internal_r+0x734>
 1011264:	a880030b 	ldhu	r2,12(r21)
 1011268:	1080020c 	andi	r2,r2,8
 101126c:	1001cb26 	beq	r2,zero,101199c <___vfiprintf_internal_r+0x77c>
 1011270:	a8800417 	ldw	r2,16(r21)
 1011274:	1001c926 	beq	r2,zero,101199c <___vfiprintf_internal_r+0x77c>
 1011278:	aa00030b 	ldhu	r8,12(r21)
 101127c:	00800284 	movi	r2,10
 1011280:	40c0068c 	andi	r3,r8,26
 1011284:	18802f1e 	bne	r3,r2,1011344 <___vfiprintf_internal_r+0x124>
 1011288:	a880038f 	ldh	r2,14(r21)
 101128c:	10002d16 	blt	r2,zero,1011344 <___vfiprintf_internal_r+0x124>
 1011290:	aa40038b 	ldhu	r9,14(r21)
 1011294:	aa800717 	ldw	r10,28(r21)
 1011298:	aac00917 	ldw	r11,36(r21)
 101129c:	dc401e04 	addi	r17,sp,120
 10112a0:	d8803504 	addi	r2,sp,212
 10112a4:	00c10004 	movi	r3,1024
 10112a8:	423fff4c 	andi	r8,r8,65533
 10112ac:	800d883a 	mov	r6,r16
 10112b0:	b009883a 	mov	r4,r22
 10112b4:	880b883a 	mov	r5,r17
 10112b8:	da00210d 	sth	r8,132(sp)
 10112bc:	da40218d 	sth	r9,134(sp)
 10112c0:	da802515 	stw	r10,148(sp)
 10112c4:	dac02715 	stw	r11,156(sp)
 10112c8:	d8802215 	stw	r2,136(sp)
 10112cc:	d8c02315 	stw	r3,140(sp)
 10112d0:	d8801e15 	stw	r2,120(sp)
 10112d4:	d8c02015 	stw	r3,128(sp)
 10112d8:	d8002415 	stw	zero,144(sp)
 10112dc:	10112200 	call	1011220 <___vfiprintf_internal_r>
 10112e0:	d8813a15 	stw	r2,1256(sp)
 10112e4:	10000416 	blt	r2,zero,10112f8 <___vfiprintf_internal_r+0xd8>
 10112e8:	b009883a 	mov	r4,r22
 10112ec:	880b883a 	mov	r5,r17
 10112f0:	100b6d80 	call	100b6d8 <_fflush_r>
 10112f4:	1001b01e 	bne	r2,zero,10119b8 <___vfiprintf_internal_r+0x798>
 10112f8:	d880210b 	ldhu	r2,132(sp)
 10112fc:	1080100c 	andi	r2,r2,64
 1011300:	10000326 	beq	r2,zero,1011310 <___vfiprintf_internal_r+0xf0>
 1011304:	a880030b 	ldhu	r2,12(r21)
 1011308:	10801014 	ori	r2,r2,64
 101130c:	a880030d 	sth	r2,12(r21)
 1011310:	d8813a17 	ldw	r2,1256(sp)
 1011314:	dfc14917 	ldw	ra,1316(sp)
 1011318:	df014817 	ldw	fp,1312(sp)
 101131c:	ddc14717 	ldw	r23,1308(sp)
 1011320:	dd814617 	ldw	r22,1304(sp)
 1011324:	dd414517 	ldw	r21,1300(sp)
 1011328:	dd014417 	ldw	r20,1296(sp)
 101132c:	dcc14317 	ldw	r19,1292(sp)
 1011330:	dc814217 	ldw	r18,1288(sp)
 1011334:	dc414117 	ldw	r17,1284(sp)
 1011338:	dc014017 	ldw	r16,1280(sp)
 101133c:	dec14a04 	addi	sp,sp,1320
 1011340:	f800283a 	ret
 1011344:	d8c00e04 	addi	r3,sp,56
 1011348:	8029883a 	mov	r20,r16
 101134c:	d8c00115 	stw	r3,4(sp)
 1011350:	d8000315 	stw	zero,12(sp)
 1011354:	d8000215 	stw	zero,8(sp)
 1011358:	1825883a 	mov	r18,r3
 101135c:	d8013a15 	stw	zero,1256(sp)
 1011360:	d8013615 	stw	zero,1240(sp)
 1011364:	a0800007 	ldb	r2,0(r20)
 1011368:	10001926 	beq	r2,zero,10113d0 <___vfiprintf_internal_r+0x1b0>
 101136c:	00c00944 	movi	r3,37
 1011370:	10c01726 	beq	r2,r3,10113d0 <___vfiprintf_internal_r+0x1b0>
 1011374:	a021883a 	mov	r16,r20
 1011378:	00000106 	br	1011380 <___vfiprintf_internal_r+0x160>
 101137c:	10c00326 	beq	r2,r3,101138c <___vfiprintf_internal_r+0x16c>
 1011380:	84000044 	addi	r16,r16,1
 1011384:	80800007 	ldb	r2,0(r16)
 1011388:	103ffc1e 	bne	r2,zero,101137c <___vfiprintf_internal_r+0x15c>
 101138c:	8523c83a 	sub	r17,r16,r20
 1011390:	88000e26 	beq	r17,zero,10113cc <___vfiprintf_internal_r+0x1ac>
 1011394:	d9400317 	ldw	r5,12(sp)
 1011398:	d9000217 	ldw	r4,8(sp)
 101139c:	008001c4 	movi	r2,7
 10113a0:	2c4b883a 	add	r5,r5,r17
 10113a4:	21000044 	addi	r4,r4,1
 10113a8:	95000015 	stw	r20,0(r18)
 10113ac:	d9400315 	stw	r5,12(sp)
 10113b0:	94400115 	stw	r17,4(r18)
 10113b4:	d9000215 	stw	r4,8(sp)
 10113b8:	1101e816 	blt	r2,r4,1011b5c <___vfiprintf_internal_r+0x93c>
 10113bc:	94800204 	addi	r18,r18,8
 10113c0:	d9013a17 	ldw	r4,1256(sp)
 10113c4:	2449883a 	add	r4,r4,r17
 10113c8:	d9013a15 	stw	r4,1256(sp)
 10113cc:	8029883a 	mov	r20,r16
 10113d0:	a0800007 	ldb	r2,0(r20)
 10113d4:	10012e26 	beq	r2,zero,1011890 <___vfiprintf_internal_r+0x670>
 10113d8:	a5000044 	addi	r20,r20,1
 10113dc:	d8000005 	stb	zero,0(sp)
 10113e0:	a0c00007 	ldb	r3,0(r20)
 10113e4:	05ffffc4 	movi	r23,-1
 10113e8:	d8013915 	stw	zero,1252(sp)
 10113ec:	d8013b15 	stw	zero,1260(sp)
 10113f0:	180b883a 	mov	r5,r3
 10113f4:	a5000044 	addi	r20,r20,1
 10113f8:	28fff804 	addi	r3,r5,-32
 10113fc:	00801604 	movi	r2,88
 1011400:	10c06036 	bltu	r2,r3,1011584 <___vfiprintf_internal_r+0x364>
 1011404:	18c5883a 	add	r2,r3,r3
 1011408:	1085883a 	add	r2,r2,r2
 101140c:	00c04074 	movhi	r3,257
 1011410:	18c50804 	addi	r3,r3,5152
 1011414:	10c5883a 	add	r2,r2,r3
 1011418:	11000017 	ldw	r4,0(r2)
 101141c:	2000683a 	jmp	r4
 1011420:	01011c88 	cmpgei	r4,zero,1138
 1011424:	01011584 	movi	r4,1110
 1011428:	01011584 	movi	r4,1110
 101142c:	01011d30 	cmpltui	r4,zero,1140
 1011430:	01011584 	movi	r4,1110
 1011434:	01011584 	movi	r4,1110
 1011438:	01011584 	movi	r4,1110
 101143c:	01011584 	movi	r4,1110
 1011440:	01011584 	movi	r4,1110
 1011444:	01011584 	movi	r4,1110
 1011448:	01011c10 	cmplti	r4,zero,1136
 101144c:	01011d44 	movi	r4,1141
 1011450:	01011584 	movi	r4,1110
 1011454:	01011c28 	cmpgeui	r4,zero,1136
 1011458:	01011ce0 	cmpeqi	r4,zero,1139
 101145c:	01011584 	movi	r4,1110
 1011460:	01011ccc 	andi	r4,zero,1139
 1011464:	01011ca0 	cmpeqi	r4,zero,1138
 1011468:	01011ca0 	cmpeqi	r4,zero,1138
 101146c:	01011ca0 	cmpeqi	r4,zero,1138
 1011470:	01011ca0 	cmpeqi	r4,zero,1138
 1011474:	01011ca0 	cmpeqi	r4,zero,1138
 1011478:	01011ca0 	cmpeqi	r4,zero,1138
 101147c:	01011ca0 	cmpeqi	r4,zero,1138
 1011480:	01011ca0 	cmpeqi	r4,zero,1138
 1011484:	01011ca0 	cmpeqi	r4,zero,1138
 1011488:	01011584 	movi	r4,1110
 101148c:	01011584 	movi	r4,1110
 1011490:	01011584 	movi	r4,1110
 1011494:	01011584 	movi	r4,1110
 1011498:	01011584 	movi	r4,1110
 101149c:	01011584 	movi	r4,1110
 10114a0:	01011584 	movi	r4,1110
 10114a4:	01011584 	movi	r4,1110
 10114a8:	01011584 	movi	r4,1110
 10114ac:	01011584 	movi	r4,1110
 10114b0:	010119ec 	andhi	r4,zero,1127
 10114b4:	01011584 	movi	r4,1110
 10114b8:	01011584 	movi	r4,1110
 10114bc:	01011584 	movi	r4,1110
 10114c0:	01011584 	movi	r4,1110
 10114c4:	01011584 	movi	r4,1110
 10114c8:	01011584 	movi	r4,1110
 10114cc:	01011584 	movi	r4,1110
 10114d0:	01011584 	movi	r4,1110
 10114d4:	01011584 	movi	r4,1110
 10114d8:	01011584 	movi	r4,1110
 10114dc:	01011aa0 	cmpeqi	r4,zero,1130
 10114e0:	01011584 	movi	r4,1110
 10114e4:	01011584 	movi	r4,1110
 10114e8:	01011584 	movi	r4,1110
 10114ec:	01011584 	movi	r4,1110
 10114f0:	01011584 	movi	r4,1110
 10114f4:	01011aec 	andhi	r4,zero,1131
 10114f8:	01011584 	movi	r4,1110
 10114fc:	01011584 	movi	r4,1110
 1011500:	01011ddc 	xori	r4,zero,1143
 1011504:	01011584 	movi	r4,1110
 1011508:	01011584 	movi	r4,1110
 101150c:	01011584 	movi	r4,1110
 1011510:	01011584 	movi	r4,1110
 1011514:	01011584 	movi	r4,1110
 1011518:	01011584 	movi	r4,1110
 101151c:	01011584 	movi	r4,1110
 1011520:	01011584 	movi	r4,1110
 1011524:	01011584 	movi	r4,1110
 1011528:	01011584 	movi	r4,1110
 101152c:	01011db4 	movhi	r4,1142
 1011530:	010119f8 	rdprs	r4,zero,1127
 1011534:	01011584 	movi	r4,1110
 1011538:	01011584 	movi	r4,1110
 101153c:	01011584 	movi	r4,1110
 1011540:	01011ec0 	call	1011ec <__alt_mem_onchip+0x1011ec>
 1011544:	010119f8 	rdprs	r4,zero,1127
 1011548:	01011584 	movi	r4,1110
 101154c:	01011584 	movi	r4,1110
 1011550:	01011e14 	movui	r4,1144
 1011554:	01011584 	movi	r4,1110
 1011558:	01011dec 	andhi	r4,zero,1143
 101155c:	01011aac 	andhi	r4,zero,1130
 1011560:	01011e7c 	xorhi	r4,zero,1145
 1011564:	01011ed4 	movui	r4,1147
 1011568:	01011584 	movi	r4,1110
 101156c:	01011e30 	cmpltui	r4,zero,1144
 1011570:	01011584 	movi	r4,1110
 1011574:	01011af8 	rdprs	r4,zero,1131
 1011578:	01011584 	movi	r4,1110
 101157c:	01011584 	movi	r4,1110
 1011580:	01011d54 	movui	r4,1141
 1011584:	2800c226 	beq	r5,zero,1011890 <___vfiprintf_internal_r+0x670>
 1011588:	07000044 	movi	fp,1
 101158c:	d9000404 	addi	r4,sp,16
 1011590:	d9c13515 	stw	r7,1236(sp)
 1011594:	d9013c15 	stw	r4,1264(sp)
 1011598:	df013715 	stw	fp,1244(sp)
 101159c:	d9400405 	stb	r5,16(sp)
 10115a0:	d8000005 	stb	zero,0(sp)
 10115a4:	d8013815 	stw	zero,1248(sp)
 10115a8:	d9813b17 	ldw	r6,1260(sp)
 10115ac:	3080008c 	andi	r2,r6,2
 10115b0:	1005003a 	cmpeq	r2,r2,zero
 10115b4:	d8813e15 	stw	r2,1272(sp)
 10115b8:	1000011e 	bne	r2,zero,10115c0 <___vfiprintf_internal_r+0x3a0>
 10115bc:	e7000084 	addi	fp,fp,2
 10115c0:	d8813b17 	ldw	r2,1260(sp)
 10115c4:	1080210c 	andi	r2,r2,132
 10115c8:	d8813d15 	stw	r2,1268(sp)
 10115cc:	10002a1e 	bne	r2,zero,1011678 <___vfiprintf_internal_r+0x458>
 10115d0:	d8c13917 	ldw	r3,1252(sp)
 10115d4:	1f21c83a 	sub	r16,r3,fp
 10115d8:	0400270e 	bge	zero,r16,1011678 <___vfiprintf_internal_r+0x458>
 10115dc:	00800404 	movi	r2,16
 10115e0:	1402c80e 	bge	r2,r16,1012104 <___vfiprintf_internal_r+0xee4>
 10115e4:	d9400317 	ldw	r5,12(sp)
 10115e8:	d9000217 	ldw	r4,8(sp)
 10115ec:	1023883a 	mov	r17,r2
 10115f0:	05c040b4 	movhi	r23,258
 10115f4:	bdea0104 	addi	r23,r23,-22524
 10115f8:	04c001c4 	movi	r19,7
 10115fc:	00000306 	br	101160c <___vfiprintf_internal_r+0x3ec>
 1011600:	843ffc04 	addi	r16,r16,-16
 1011604:	94800204 	addi	r18,r18,8
 1011608:	8c00110e 	bge	r17,r16,1011650 <___vfiprintf_internal_r+0x430>
 101160c:	29400404 	addi	r5,r5,16
 1011610:	21000044 	addi	r4,r4,1
 1011614:	95c00015 	stw	r23,0(r18)
 1011618:	94400115 	stw	r17,4(r18)
 101161c:	d9400315 	stw	r5,12(sp)
 1011620:	d9000215 	stw	r4,8(sp)
 1011624:	993ff60e 	bge	r19,r4,1011600 <___vfiprintf_internal_r+0x3e0>
 1011628:	b009883a 	mov	r4,r22
 101162c:	a80b883a 	mov	r5,r21
 1011630:	d9800104 	addi	r6,sp,4
 1011634:	10111c80 	call	10111c8 <__sprint_r>
 1011638:	1000981e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 101163c:	843ffc04 	addi	r16,r16,-16
 1011640:	d9400317 	ldw	r5,12(sp)
 1011644:	d9000217 	ldw	r4,8(sp)
 1011648:	dc800e04 	addi	r18,sp,56
 101164c:	8c3fef16 	blt	r17,r16,101160c <___vfiprintf_internal_r+0x3ec>
 1011650:	2c0b883a 	add	r5,r5,r16
 1011654:	21000044 	addi	r4,r4,1
 1011658:	008001c4 	movi	r2,7
 101165c:	95c00015 	stw	r23,0(r18)
 1011660:	94000115 	stw	r16,4(r18)
 1011664:	d9400315 	stw	r5,12(sp)
 1011668:	d9000215 	stw	r4,8(sp)
 101166c:	11015616 	blt	r2,r4,1011bc8 <___vfiprintf_internal_r+0x9a8>
 1011670:	94800204 	addi	r18,r18,8
 1011674:	00000206 	br	1011680 <___vfiprintf_internal_r+0x460>
 1011678:	d9400317 	ldw	r5,12(sp)
 101167c:	d9000217 	ldw	r4,8(sp)
 1011680:	d8800007 	ldb	r2,0(sp)
 1011684:	10000a26 	beq	r2,zero,10116b0 <___vfiprintf_internal_r+0x490>
 1011688:	00800044 	movi	r2,1
 101168c:	29400044 	addi	r5,r5,1
 1011690:	21000044 	addi	r4,r4,1
 1011694:	90800115 	stw	r2,4(r18)
 1011698:	008001c4 	movi	r2,7
 101169c:	96c00015 	stw	sp,0(r18)
 10116a0:	d9400315 	stw	r5,12(sp)
 10116a4:	d9000215 	stw	r4,8(sp)
 10116a8:	11013516 	blt	r2,r4,1011b80 <___vfiprintf_internal_r+0x960>
 10116ac:	94800204 	addi	r18,r18,8
 10116b0:	d9813e17 	ldw	r6,1272(sp)
 10116b4:	30000b1e 	bne	r6,zero,10116e4 <___vfiprintf_internal_r+0x4c4>
 10116b8:	d8800044 	addi	r2,sp,1
 10116bc:	29400084 	addi	r5,r5,2
 10116c0:	21000044 	addi	r4,r4,1
 10116c4:	90800015 	stw	r2,0(r18)
 10116c8:	00c00084 	movi	r3,2
 10116cc:	008001c4 	movi	r2,7
 10116d0:	90c00115 	stw	r3,4(r18)
 10116d4:	d9400315 	stw	r5,12(sp)
 10116d8:	d9000215 	stw	r4,8(sp)
 10116dc:	11013116 	blt	r2,r4,1011ba4 <___vfiprintf_internal_r+0x984>
 10116e0:	94800204 	addi	r18,r18,8
 10116e4:	d8c13d17 	ldw	r3,1268(sp)
 10116e8:	00802004 	movi	r2,128
 10116ec:	18807126 	beq	r3,r2,10118b4 <___vfiprintf_internal_r+0x694>
 10116f0:	d8813817 	ldw	r2,1248(sp)
 10116f4:	d8c13717 	ldw	r3,1244(sp)
 10116f8:	10e1c83a 	sub	r16,r2,r3
 10116fc:	0400240e 	bge	zero,r16,1011790 <___vfiprintf_internal_r+0x570>
 1011700:	00800404 	movi	r2,16
 1011704:	1402510e 	bge	r2,r16,101204c <___vfiprintf_internal_r+0xe2c>
 1011708:	1023883a 	mov	r17,r2
 101170c:	05c040b4 	movhi	r23,258
 1011710:	bde9fd04 	addi	r23,r23,-22540
 1011714:	04c001c4 	movi	r19,7
 1011718:	00000306 	br	1011728 <___vfiprintf_internal_r+0x508>
 101171c:	843ffc04 	addi	r16,r16,-16
 1011720:	94800204 	addi	r18,r18,8
 1011724:	8c00110e 	bge	r17,r16,101176c <___vfiprintf_internal_r+0x54c>
 1011728:	29400404 	addi	r5,r5,16
 101172c:	21000044 	addi	r4,r4,1
 1011730:	95c00015 	stw	r23,0(r18)
 1011734:	94400115 	stw	r17,4(r18)
 1011738:	d9400315 	stw	r5,12(sp)
 101173c:	d9000215 	stw	r4,8(sp)
 1011740:	993ff60e 	bge	r19,r4,101171c <___vfiprintf_internal_r+0x4fc>
 1011744:	b009883a 	mov	r4,r22
 1011748:	a80b883a 	mov	r5,r21
 101174c:	d9800104 	addi	r6,sp,4
 1011750:	10111c80 	call	10111c8 <__sprint_r>
 1011754:	1000511e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011758:	843ffc04 	addi	r16,r16,-16
 101175c:	d9400317 	ldw	r5,12(sp)
 1011760:	d9000217 	ldw	r4,8(sp)
 1011764:	dc800e04 	addi	r18,sp,56
 1011768:	8c3fef16 	blt	r17,r16,1011728 <___vfiprintf_internal_r+0x508>
 101176c:	2c0b883a 	add	r5,r5,r16
 1011770:	21000044 	addi	r4,r4,1
 1011774:	008001c4 	movi	r2,7
 1011778:	95c00015 	stw	r23,0(r18)
 101177c:	94000115 	stw	r16,4(r18)
 1011780:	d9400315 	stw	r5,12(sp)
 1011784:	d9000215 	stw	r4,8(sp)
 1011788:	1100eb16 	blt	r2,r4,1011b38 <___vfiprintf_internal_r+0x918>
 101178c:	94800204 	addi	r18,r18,8
 1011790:	d9813717 	ldw	r6,1244(sp)
 1011794:	d8813c17 	ldw	r2,1264(sp)
 1011798:	21000044 	addi	r4,r4,1
 101179c:	298b883a 	add	r5,r5,r6
 10117a0:	90800015 	stw	r2,0(r18)
 10117a4:	008001c4 	movi	r2,7
 10117a8:	91800115 	stw	r6,4(r18)
 10117ac:	d9400315 	stw	r5,12(sp)
 10117b0:	d9000215 	stw	r4,8(sp)
 10117b4:	11006b16 	blt	r2,r4,1011964 <___vfiprintf_internal_r+0x744>
 10117b8:	90c00204 	addi	r3,r18,8
 10117bc:	d9013b17 	ldw	r4,1260(sp)
 10117c0:	2080010c 	andi	r2,r4,4
 10117c4:	10002726 	beq	r2,zero,1011864 <___vfiprintf_internal_r+0x644>
 10117c8:	d9813917 	ldw	r6,1252(sp)
 10117cc:	3721c83a 	sub	r16,r6,fp
 10117d0:	0400240e 	bge	zero,r16,1011864 <___vfiprintf_internal_r+0x644>
 10117d4:	00800404 	movi	r2,16
 10117d8:	1402720e 	bge	r2,r16,10121a4 <___vfiprintf_internal_r+0xf84>
 10117dc:	d9000217 	ldw	r4,8(sp)
 10117e0:	1023883a 	mov	r17,r2
 10117e4:	05c040b4 	movhi	r23,258
 10117e8:	bdea0104 	addi	r23,r23,-22524
 10117ec:	048001c4 	movi	r18,7
 10117f0:	00000306 	br	1011800 <___vfiprintf_internal_r+0x5e0>
 10117f4:	843ffc04 	addi	r16,r16,-16
 10117f8:	18c00204 	addi	r3,r3,8
 10117fc:	8c00110e 	bge	r17,r16,1011844 <___vfiprintf_internal_r+0x624>
 1011800:	29400404 	addi	r5,r5,16
 1011804:	21000044 	addi	r4,r4,1
 1011808:	1dc00015 	stw	r23,0(r3)
 101180c:	1c400115 	stw	r17,4(r3)
 1011810:	d9400315 	stw	r5,12(sp)
 1011814:	d9000215 	stw	r4,8(sp)
 1011818:	913ff60e 	bge	r18,r4,10117f4 <___vfiprintf_internal_r+0x5d4>
 101181c:	b009883a 	mov	r4,r22
 1011820:	a80b883a 	mov	r5,r21
 1011824:	d9800104 	addi	r6,sp,4
 1011828:	10111c80 	call	10111c8 <__sprint_r>
 101182c:	10001b1e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011830:	843ffc04 	addi	r16,r16,-16
 1011834:	d9400317 	ldw	r5,12(sp)
 1011838:	d9000217 	ldw	r4,8(sp)
 101183c:	d8c00e04 	addi	r3,sp,56
 1011840:	8c3fef16 	blt	r17,r16,1011800 <___vfiprintf_internal_r+0x5e0>
 1011844:	2c0b883a 	add	r5,r5,r16
 1011848:	21000044 	addi	r4,r4,1
 101184c:	008001c4 	movi	r2,7
 1011850:	1dc00015 	stw	r23,0(r3)
 1011854:	1c000115 	stw	r16,4(r3)
 1011858:	d9400315 	stw	r5,12(sp)
 101185c:	d9000215 	stw	r4,8(sp)
 1011860:	11005b16 	blt	r2,r4,10119d0 <___vfiprintf_internal_r+0x7b0>
 1011864:	d8813917 	ldw	r2,1252(sp)
 1011868:	1700010e 	bge	r2,fp,1011870 <___vfiprintf_internal_r+0x650>
 101186c:	e005883a 	mov	r2,fp
 1011870:	d8c13a17 	ldw	r3,1256(sp)
 1011874:	1887883a 	add	r3,r3,r2
 1011878:	d8c13a15 	stw	r3,1256(sp)
 101187c:	2800411e 	bne	r5,zero,1011984 <___vfiprintf_internal_r+0x764>
 1011880:	d9c13517 	ldw	r7,1236(sp)
 1011884:	dc800e04 	addi	r18,sp,56
 1011888:	d8000215 	stw	zero,8(sp)
 101188c:	003eb506 	br	1011364 <___vfiprintf_internal_r+0x144>
 1011890:	d8800317 	ldw	r2,12(sp)
 1011894:	1002521e 	bne	r2,zero,10121e0 <___vfiprintf_internal_r+0xfc0>
 1011898:	d8000215 	stw	zero,8(sp)
 101189c:	a880030b 	ldhu	r2,12(r21)
 10118a0:	1080100c 	andi	r2,r2,64
 10118a4:	103e9a26 	beq	r2,zero,1011310 <___vfiprintf_internal_r+0xf0>
 10118a8:	013fffc4 	movi	r4,-1
 10118ac:	d9013a15 	stw	r4,1256(sp)
 10118b0:	003e9706 	br	1011310 <___vfiprintf_internal_r+0xf0>
 10118b4:	d9813917 	ldw	r6,1252(sp)
 10118b8:	3721c83a 	sub	r16,r6,fp
 10118bc:	043f8c0e 	bge	zero,r16,10116f0 <___vfiprintf_internal_r+0x4d0>
 10118c0:	00800404 	movi	r2,16
 10118c4:	14024c0e 	bge	r2,r16,10121f8 <___vfiprintf_internal_r+0xfd8>
 10118c8:	1023883a 	mov	r17,r2
 10118cc:	05c040b4 	movhi	r23,258
 10118d0:	bde9fd04 	addi	r23,r23,-22540
 10118d4:	04c001c4 	movi	r19,7
 10118d8:	00000306 	br	10118e8 <___vfiprintf_internal_r+0x6c8>
 10118dc:	843ffc04 	addi	r16,r16,-16
 10118e0:	94800204 	addi	r18,r18,8
 10118e4:	8c00110e 	bge	r17,r16,101192c <___vfiprintf_internal_r+0x70c>
 10118e8:	29400404 	addi	r5,r5,16
 10118ec:	21000044 	addi	r4,r4,1
 10118f0:	95c00015 	stw	r23,0(r18)
 10118f4:	94400115 	stw	r17,4(r18)
 10118f8:	d9400315 	stw	r5,12(sp)
 10118fc:	d9000215 	stw	r4,8(sp)
 1011900:	993ff60e 	bge	r19,r4,10118dc <___vfiprintf_internal_r+0x6bc>
 1011904:	b009883a 	mov	r4,r22
 1011908:	a80b883a 	mov	r5,r21
 101190c:	d9800104 	addi	r6,sp,4
 1011910:	10111c80 	call	10111c8 <__sprint_r>
 1011914:	103fe11e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011918:	843ffc04 	addi	r16,r16,-16
 101191c:	d9400317 	ldw	r5,12(sp)
 1011920:	d9000217 	ldw	r4,8(sp)
 1011924:	dc800e04 	addi	r18,sp,56
 1011928:	8c3fef16 	blt	r17,r16,10118e8 <___vfiprintf_internal_r+0x6c8>
 101192c:	2c0b883a 	add	r5,r5,r16
 1011930:	21000044 	addi	r4,r4,1
 1011934:	008001c4 	movi	r2,7
 1011938:	95c00015 	stw	r23,0(r18)
 101193c:	94000115 	stw	r16,4(r18)
 1011940:	d9400315 	stw	r5,12(sp)
 1011944:	d9000215 	stw	r4,8(sp)
 1011948:	1100a816 	blt	r2,r4,1011bec <___vfiprintf_internal_r+0x9cc>
 101194c:	94800204 	addi	r18,r18,8
 1011950:	003f6706 	br	10116f0 <___vfiprintf_internal_r+0x4d0>
 1011954:	d9c13f15 	stw	r7,1276(sp)
 1011958:	100b9700 	call	100b970 <__sinit>
 101195c:	d9c13f17 	ldw	r7,1276(sp)
 1011960:	003e4006 	br	1011264 <___vfiprintf_internal_r+0x44>
 1011964:	b009883a 	mov	r4,r22
 1011968:	a80b883a 	mov	r5,r21
 101196c:	d9800104 	addi	r6,sp,4
 1011970:	10111c80 	call	10111c8 <__sprint_r>
 1011974:	103fc91e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011978:	d9400317 	ldw	r5,12(sp)
 101197c:	d8c00e04 	addi	r3,sp,56
 1011980:	003f8e06 	br	10117bc <___vfiprintf_internal_r+0x59c>
 1011984:	b009883a 	mov	r4,r22
 1011988:	a80b883a 	mov	r5,r21
 101198c:	d9800104 	addi	r6,sp,4
 1011990:	10111c80 	call	10111c8 <__sprint_r>
 1011994:	103fba26 	beq	r2,zero,1011880 <___vfiprintf_internal_r+0x660>
 1011998:	003fc006 	br	101189c <___vfiprintf_internal_r+0x67c>
 101199c:	b009883a 	mov	r4,r22
 10119a0:	a80b883a 	mov	r5,r21
 10119a4:	d9c13f15 	stw	r7,1276(sp)
 10119a8:	1009c040 	call	1009c04 <__swsetup_r>
 10119ac:	d9c13f17 	ldw	r7,1276(sp)
 10119b0:	103e3126 	beq	r2,zero,1011278 <___vfiprintf_internal_r+0x58>
 10119b4:	003fbc06 	br	10118a8 <___vfiprintf_internal_r+0x688>
 10119b8:	00bfffc4 	movi	r2,-1
 10119bc:	d8813a15 	stw	r2,1256(sp)
 10119c0:	d880210b 	ldhu	r2,132(sp)
 10119c4:	1080100c 	andi	r2,r2,64
 10119c8:	103e4e1e 	bne	r2,zero,1011304 <___vfiprintf_internal_r+0xe4>
 10119cc:	003e5006 	br	1011310 <___vfiprintf_internal_r+0xf0>
 10119d0:	b009883a 	mov	r4,r22
 10119d4:	a80b883a 	mov	r5,r21
 10119d8:	d9800104 	addi	r6,sp,4
 10119dc:	10111c80 	call	10111c8 <__sprint_r>
 10119e0:	103fae1e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 10119e4:	d9400317 	ldw	r5,12(sp)
 10119e8:	003f9e06 	br	1011864 <___vfiprintf_internal_r+0x644>
 10119ec:	d8813b17 	ldw	r2,1260(sp)
 10119f0:	10800414 	ori	r2,r2,16
 10119f4:	d8813b15 	stw	r2,1260(sp)
 10119f8:	d8c13b17 	ldw	r3,1260(sp)
 10119fc:	1880080c 	andi	r2,r3,32
 1011a00:	10009c1e 	bne	r2,zero,1011c74 <___vfiprintf_internal_r+0xa54>
 1011a04:	d9413b17 	ldw	r5,1260(sp)
 1011a08:	2880040c 	andi	r2,r5,16
 1011a0c:	1001b21e 	bne	r2,zero,10120d8 <___vfiprintf_internal_r+0xeb8>
 1011a10:	d9813b17 	ldw	r6,1260(sp)
 1011a14:	3080100c 	andi	r2,r6,64
 1011a18:	1001af26 	beq	r2,zero,10120d8 <___vfiprintf_internal_r+0xeb8>
 1011a1c:	3880000f 	ldh	r2,0(r7)
 1011a20:	39c00104 	addi	r7,r7,4
 1011a24:	d9c13515 	stw	r7,1236(sp)
 1011a28:	1023d7fa 	srai	r17,r2,31
 1011a2c:	1021883a 	mov	r16,r2
 1011a30:	8801e016 	blt	r17,zero,10121b4 <___vfiprintf_internal_r+0xf94>
 1011a34:	01000044 	movi	r4,1
 1011a38:	b8000416 	blt	r23,zero,1011a4c <___vfiprintf_internal_r+0x82c>
 1011a3c:	d9413b17 	ldw	r5,1260(sp)
 1011a40:	00bfdfc4 	movi	r2,-129
 1011a44:	288a703a 	and	r5,r5,r2
 1011a48:	d9413b15 	stw	r5,1260(sp)
 1011a4c:	8444b03a 	or	r2,r16,r17
 1011a50:	1001271e 	bne	r2,zero,1011ef0 <___vfiprintf_internal_r+0xcd0>
 1011a54:	b801261e 	bne	r23,zero,1011ef0 <___vfiprintf_internal_r+0xcd0>
 1011a58:	20803fcc 	andi	r2,r4,255
 1011a5c:	10017e26 	beq	r2,zero,1012058 <___vfiprintf_internal_r+0xe38>
 1011a60:	d8c00e04 	addi	r3,sp,56
 1011a64:	df000404 	addi	fp,sp,16
 1011a68:	d8c13c15 	stw	r3,1264(sp)
 1011a6c:	d8c13c17 	ldw	r3,1264(sp)
 1011a70:	ddc13815 	stw	r23,1248(sp)
 1011a74:	e0c5c83a 	sub	r2,fp,r3
 1011a78:	10800a04 	addi	r2,r2,40
 1011a7c:	d8813715 	stw	r2,1244(sp)
 1011a80:	df013817 	ldw	fp,1248(sp)
 1011a84:	d9413717 	ldw	r5,1244(sp)
 1011a88:	e140010e 	bge	fp,r5,1011a90 <___vfiprintf_internal_r+0x870>
 1011a8c:	2839883a 	mov	fp,r5
 1011a90:	d8800007 	ldb	r2,0(sp)
 1011a94:	103ec426 	beq	r2,zero,10115a8 <___vfiprintf_internal_r+0x388>
 1011a98:	e7000044 	addi	fp,fp,1
 1011a9c:	003ec206 	br	10115a8 <___vfiprintf_internal_r+0x388>
 1011aa0:	d9813b17 	ldw	r6,1260(sp)
 1011aa4:	31800414 	ori	r6,r6,16
 1011aa8:	d9813b15 	stw	r6,1260(sp)
 1011aac:	d8c13b17 	ldw	r3,1260(sp)
 1011ab0:	1880080c 	andi	r2,r3,32
 1011ab4:	1000681e 	bne	r2,zero,1011c58 <___vfiprintf_internal_r+0xa38>
 1011ab8:	d9413b17 	ldw	r5,1260(sp)
 1011abc:	2880040c 	andi	r2,r5,16
 1011ac0:	1001771e 	bne	r2,zero,10120a0 <___vfiprintf_internal_r+0xe80>
 1011ac4:	d9813b17 	ldw	r6,1260(sp)
 1011ac8:	3080100c 	andi	r2,r6,64
 1011acc:	10017426 	beq	r2,zero,10120a0 <___vfiprintf_internal_r+0xe80>
 1011ad0:	3c00000b 	ldhu	r16,0(r7)
 1011ad4:	0009883a 	mov	r4,zero
 1011ad8:	39c00104 	addi	r7,r7,4
 1011adc:	0023883a 	mov	r17,zero
 1011ae0:	d9c13515 	stw	r7,1236(sp)
 1011ae4:	d8000005 	stb	zero,0(sp)
 1011ae8:	003fd306 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011aec:	d8813b17 	ldw	r2,1260(sp)
 1011af0:	10800414 	ori	r2,r2,16
 1011af4:	d8813b15 	stw	r2,1260(sp)
 1011af8:	d8c13b17 	ldw	r3,1260(sp)
 1011afc:	1880080c 	andi	r2,r3,32
 1011b00:	10004e1e 	bne	r2,zero,1011c3c <___vfiprintf_internal_r+0xa1c>
 1011b04:	d9413b17 	ldw	r5,1260(sp)
 1011b08:	2880040c 	andi	r2,r5,16
 1011b0c:	10016b1e 	bne	r2,zero,10120bc <___vfiprintf_internal_r+0xe9c>
 1011b10:	d9813b17 	ldw	r6,1260(sp)
 1011b14:	3080100c 	andi	r2,r6,64
 1011b18:	10016826 	beq	r2,zero,10120bc <___vfiprintf_internal_r+0xe9c>
 1011b1c:	3c00000b 	ldhu	r16,0(r7)
 1011b20:	01000044 	movi	r4,1
 1011b24:	39c00104 	addi	r7,r7,4
 1011b28:	0023883a 	mov	r17,zero
 1011b2c:	d9c13515 	stw	r7,1236(sp)
 1011b30:	d8000005 	stb	zero,0(sp)
 1011b34:	003fc006 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011b38:	b009883a 	mov	r4,r22
 1011b3c:	a80b883a 	mov	r5,r21
 1011b40:	d9800104 	addi	r6,sp,4
 1011b44:	10111c80 	call	10111c8 <__sprint_r>
 1011b48:	103f541e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011b4c:	d9400317 	ldw	r5,12(sp)
 1011b50:	d9000217 	ldw	r4,8(sp)
 1011b54:	dc800e04 	addi	r18,sp,56
 1011b58:	003f0d06 	br	1011790 <___vfiprintf_internal_r+0x570>
 1011b5c:	b009883a 	mov	r4,r22
 1011b60:	a80b883a 	mov	r5,r21
 1011b64:	d9800104 	addi	r6,sp,4
 1011b68:	d9c13f15 	stw	r7,1276(sp)
 1011b6c:	10111c80 	call	10111c8 <__sprint_r>
 1011b70:	d9c13f17 	ldw	r7,1276(sp)
 1011b74:	103f491e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011b78:	dc800e04 	addi	r18,sp,56
 1011b7c:	003e1006 	br	10113c0 <___vfiprintf_internal_r+0x1a0>
 1011b80:	b009883a 	mov	r4,r22
 1011b84:	a80b883a 	mov	r5,r21
 1011b88:	d9800104 	addi	r6,sp,4
 1011b8c:	10111c80 	call	10111c8 <__sprint_r>
 1011b90:	103f421e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011b94:	d9400317 	ldw	r5,12(sp)
 1011b98:	d9000217 	ldw	r4,8(sp)
 1011b9c:	dc800e04 	addi	r18,sp,56
 1011ba0:	003ec306 	br	10116b0 <___vfiprintf_internal_r+0x490>
 1011ba4:	b009883a 	mov	r4,r22
 1011ba8:	a80b883a 	mov	r5,r21
 1011bac:	d9800104 	addi	r6,sp,4
 1011bb0:	10111c80 	call	10111c8 <__sprint_r>
 1011bb4:	103f391e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011bb8:	d9400317 	ldw	r5,12(sp)
 1011bbc:	d9000217 	ldw	r4,8(sp)
 1011bc0:	dc800e04 	addi	r18,sp,56
 1011bc4:	003ec706 	br	10116e4 <___vfiprintf_internal_r+0x4c4>
 1011bc8:	b009883a 	mov	r4,r22
 1011bcc:	a80b883a 	mov	r5,r21
 1011bd0:	d9800104 	addi	r6,sp,4
 1011bd4:	10111c80 	call	10111c8 <__sprint_r>
 1011bd8:	103f301e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011bdc:	d9400317 	ldw	r5,12(sp)
 1011be0:	d9000217 	ldw	r4,8(sp)
 1011be4:	dc800e04 	addi	r18,sp,56
 1011be8:	003ea506 	br	1011680 <___vfiprintf_internal_r+0x460>
 1011bec:	b009883a 	mov	r4,r22
 1011bf0:	a80b883a 	mov	r5,r21
 1011bf4:	d9800104 	addi	r6,sp,4
 1011bf8:	10111c80 	call	10111c8 <__sprint_r>
 1011bfc:	103f271e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 1011c00:	d9400317 	ldw	r5,12(sp)
 1011c04:	d9000217 	ldw	r4,8(sp)
 1011c08:	dc800e04 	addi	r18,sp,56
 1011c0c:	003eb806 	br	10116f0 <___vfiprintf_internal_r+0x4d0>
 1011c10:	38c00017 	ldw	r3,0(r7)
 1011c14:	39c00104 	addi	r7,r7,4
 1011c18:	d8c13915 	stw	r3,1252(sp)
 1011c1c:	1800b20e 	bge	r3,zero,1011ee8 <___vfiprintf_internal_r+0xcc8>
 1011c20:	00c7c83a 	sub	r3,zero,r3
 1011c24:	d8c13915 	stw	r3,1252(sp)
 1011c28:	d9013b17 	ldw	r4,1260(sp)
 1011c2c:	a0c00007 	ldb	r3,0(r20)
 1011c30:	21000114 	ori	r4,r4,4
 1011c34:	d9013b15 	stw	r4,1260(sp)
 1011c38:	003ded06 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011c3c:	3c000017 	ldw	r16,0(r7)
 1011c40:	3c400117 	ldw	r17,4(r7)
 1011c44:	39000204 	addi	r4,r7,8
 1011c48:	d9013515 	stw	r4,1236(sp)
 1011c4c:	01000044 	movi	r4,1
 1011c50:	d8000005 	stb	zero,0(sp)
 1011c54:	003f7806 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011c58:	3c000017 	ldw	r16,0(r7)
 1011c5c:	3c400117 	ldw	r17,4(r7)
 1011c60:	39000204 	addi	r4,r7,8
 1011c64:	d9013515 	stw	r4,1236(sp)
 1011c68:	0009883a 	mov	r4,zero
 1011c6c:	d8000005 	stb	zero,0(sp)
 1011c70:	003f7106 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011c74:	3c000017 	ldw	r16,0(r7)
 1011c78:	3c400117 	ldw	r17,4(r7)
 1011c7c:	39000204 	addi	r4,r7,8
 1011c80:	d9013515 	stw	r4,1236(sp)
 1011c84:	003f6a06 	br	1011a30 <___vfiprintf_internal_r+0x810>
 1011c88:	d8800007 	ldb	r2,0(sp)
 1011c8c:	1000961e 	bne	r2,zero,1011ee8 <___vfiprintf_internal_r+0xcc8>
 1011c90:	00800804 	movi	r2,32
 1011c94:	d8800005 	stb	r2,0(sp)
 1011c98:	a0c00007 	ldb	r3,0(r20)
 1011c9c:	003dd406 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011ca0:	0007883a 	mov	r3,zero
 1011ca4:	01000244 	movi	r4,9
 1011ca8:	188002a4 	muli	r2,r3,10
 1011cac:	2885883a 	add	r2,r5,r2
 1011cb0:	a1400007 	ldb	r5,0(r20)
 1011cb4:	10fff404 	addi	r3,r2,-48
 1011cb8:	a5000044 	addi	r20,r20,1
 1011cbc:	28bff404 	addi	r2,r5,-48
 1011cc0:	20bff92e 	bgeu	r4,r2,1011ca8 <___vfiprintf_internal_r+0xa88>
 1011cc4:	d8c13915 	stw	r3,1252(sp)
 1011cc8:	003dcb06 	br	10113f8 <___vfiprintf_internal_r+0x1d8>
 1011ccc:	d9413b17 	ldw	r5,1260(sp)
 1011cd0:	a0c00007 	ldb	r3,0(r20)
 1011cd4:	29402014 	ori	r5,r5,128
 1011cd8:	d9413b15 	stw	r5,1260(sp)
 1011cdc:	003dc406 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011ce0:	a0c00007 	ldb	r3,0(r20)
 1011ce4:	00800a84 	movi	r2,42
 1011ce8:	a5000044 	addi	r20,r20,1
 1011cec:	18816f26 	beq	r3,r2,10122ac <___vfiprintf_internal_r+0x108c>
 1011cf0:	180b883a 	mov	r5,r3
 1011cf4:	18bff404 	addi	r2,r3,-48
 1011cf8:	00c00244 	movi	r3,9
 1011cfc:	18816936 	bltu	r3,r2,10122a4 <___vfiprintf_internal_r+0x1084>
 1011d00:	000d883a 	mov	r6,zero
 1011d04:	308002a4 	muli	r2,r6,10
 1011d08:	1145883a 	add	r2,r2,r5
 1011d0c:	a1400007 	ldb	r5,0(r20)
 1011d10:	11bff404 	addi	r6,r2,-48
 1011d14:	a5000044 	addi	r20,r20,1
 1011d18:	28bff404 	addi	r2,r5,-48
 1011d1c:	18bff92e 	bgeu	r3,r2,1011d04 <___vfiprintf_internal_r+0xae4>
 1011d20:	302f883a 	mov	r23,r6
 1011d24:	303db40e 	bge	r6,zero,10113f8 <___vfiprintf_internal_r+0x1d8>
 1011d28:	05ffffc4 	movi	r23,-1
 1011d2c:	003db206 	br	10113f8 <___vfiprintf_internal_r+0x1d8>
 1011d30:	d8813b17 	ldw	r2,1260(sp)
 1011d34:	a0c00007 	ldb	r3,0(r20)
 1011d38:	10800054 	ori	r2,r2,1
 1011d3c:	d8813b15 	stw	r2,1260(sp)
 1011d40:	003dab06 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011d44:	00800ac4 	movi	r2,43
 1011d48:	d8800005 	stb	r2,0(sp)
 1011d4c:	a0c00007 	ldb	r3,0(r20)
 1011d50:	003da706 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011d54:	018040b4 	movhi	r6,258
 1011d58:	31a8c704 	addi	r6,r6,-23780
 1011d5c:	d9813615 	stw	r6,1240(sp)
 1011d60:	d8c13b17 	ldw	r3,1260(sp)
 1011d64:	1880080c 	andi	r2,r3,32
 1011d68:	1000c226 	beq	r2,zero,1012074 <___vfiprintf_internal_r+0xe54>
 1011d6c:	3c000017 	ldw	r16,0(r7)
 1011d70:	3c400117 	ldw	r17,4(r7)
 1011d74:	39000204 	addi	r4,r7,8
 1011d78:	d9013515 	stw	r4,1236(sp)
 1011d7c:	d9013b17 	ldw	r4,1260(sp)
 1011d80:	2080004c 	andi	r2,r4,1
 1011d84:	1005003a 	cmpeq	r2,r2,zero
 1011d88:	1000931e 	bne	r2,zero,1011fd8 <___vfiprintf_internal_r+0xdb8>
 1011d8c:	8444b03a 	or	r2,r16,r17
 1011d90:	10009126 	beq	r2,zero,1011fd8 <___vfiprintf_internal_r+0xdb8>
 1011d94:	21000094 	ori	r4,r4,2
 1011d98:	d9013b15 	stw	r4,1260(sp)
 1011d9c:	00800c04 	movi	r2,48
 1011da0:	01000084 	movi	r4,2
 1011da4:	d8800045 	stb	r2,1(sp)
 1011da8:	d9400085 	stb	r5,2(sp)
 1011dac:	d8000005 	stb	zero,0(sp)
 1011db0:	003f2106 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011db4:	38800017 	ldw	r2,0(r7)
 1011db8:	07000044 	movi	fp,1
 1011dbc:	39c00104 	addi	r7,r7,4
 1011dc0:	d9800404 	addi	r6,sp,16
 1011dc4:	d9c13515 	stw	r7,1236(sp)
 1011dc8:	d9813c15 	stw	r6,1264(sp)
 1011dcc:	df013715 	stw	fp,1244(sp)
 1011dd0:	d8800405 	stb	r2,16(sp)
 1011dd4:	d8000005 	stb	zero,0(sp)
 1011dd8:	003df206 	br	10115a4 <___vfiprintf_internal_r+0x384>
 1011ddc:	008040b4 	movhi	r2,258
 1011de0:	10a8d204 	addi	r2,r2,-23736
 1011de4:	d8813615 	stw	r2,1240(sp)
 1011de8:	003fdd06 	br	1011d60 <___vfiprintf_internal_r+0xb40>
 1011dec:	d8c13b17 	ldw	r3,1260(sp)
 1011df0:	1880080c 	andi	r2,r3,32
 1011df4:	1000e326 	beq	r2,zero,1012184 <___vfiprintf_internal_r+0xf64>
 1011df8:	d9013a17 	ldw	r4,1256(sp)
 1011dfc:	38800017 	ldw	r2,0(r7)
 1011e00:	39c00104 	addi	r7,r7,4
 1011e04:	2007d7fa 	srai	r3,r4,31
 1011e08:	11000015 	stw	r4,0(r2)
 1011e0c:	10c00115 	stw	r3,4(r2)
 1011e10:	003d5406 	br	1011364 <___vfiprintf_internal_r+0x144>
 1011e14:	a0c00007 	ldb	r3,0(r20)
 1011e18:	00801b04 	movi	r2,108
 1011e1c:	1880f926 	beq	r3,r2,1012204 <___vfiprintf_internal_r+0xfe4>
 1011e20:	d9013b17 	ldw	r4,1260(sp)
 1011e24:	21000414 	ori	r4,r4,16
 1011e28:	d9013b15 	stw	r4,1260(sp)
 1011e2c:	003d7006 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011e30:	d8000005 	stb	zero,0(sp)
 1011e34:	39000017 	ldw	r4,0(r7)
 1011e38:	39c00104 	addi	r7,r7,4
 1011e3c:	d9c13515 	stw	r7,1236(sp)
 1011e40:	d9013c15 	stw	r4,1264(sp)
 1011e44:	20010226 	beq	r4,zero,1012250 <___vfiprintf_internal_r+0x1030>
 1011e48:	b800fc16 	blt	r23,zero,101223c <___vfiprintf_internal_r+0x101c>
 1011e4c:	d9013c17 	ldw	r4,1264(sp)
 1011e50:	000b883a 	mov	r5,zero
 1011e54:	b80d883a 	mov	r6,r23
 1011e58:	100cbe40 	call	100cbe4 <memchr>
 1011e5c:	10000426 	beq	r2,zero,1011e70 <___vfiprintf_internal_r+0xc50>
 1011e60:	d9813c17 	ldw	r6,1264(sp)
 1011e64:	1185c83a 	sub	r2,r2,r6
 1011e68:	d8813715 	stw	r2,1244(sp)
 1011e6c:	b880010e 	bge	r23,r2,1011e74 <___vfiprintf_internal_r+0xc54>
 1011e70:	ddc13715 	stw	r23,1244(sp)
 1011e74:	d8013815 	stw	zero,1248(sp)
 1011e78:	003f0106 	br	1011a80 <___vfiprintf_internal_r+0x860>
 1011e7c:	d8813b17 	ldw	r2,1260(sp)
 1011e80:	3c000017 	ldw	r16,0(r7)
 1011e84:	00c040b4 	movhi	r3,258
 1011e88:	18e8c704 	addi	r3,r3,-23780
 1011e8c:	10800094 	ori	r2,r2,2
 1011e90:	d8813b15 	stw	r2,1260(sp)
 1011e94:	39c00104 	addi	r7,r7,4
 1011e98:	d8c13615 	stw	r3,1240(sp)
 1011e9c:	00800c04 	movi	r2,48
 1011ea0:	00c01e04 	movi	r3,120
 1011ea4:	0023883a 	mov	r17,zero
 1011ea8:	01000084 	movi	r4,2
 1011eac:	d9c13515 	stw	r7,1236(sp)
 1011eb0:	d8800045 	stb	r2,1(sp)
 1011eb4:	d8c00085 	stb	r3,2(sp)
 1011eb8:	d8000005 	stb	zero,0(sp)
 1011ebc:	003ede06 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011ec0:	d9813b17 	ldw	r6,1260(sp)
 1011ec4:	a0c00007 	ldb	r3,0(r20)
 1011ec8:	31801014 	ori	r6,r6,64
 1011ecc:	d9813b15 	stw	r6,1260(sp)
 1011ed0:	003d4706 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011ed4:	d9413b17 	ldw	r5,1260(sp)
 1011ed8:	a0c00007 	ldb	r3,0(r20)
 1011edc:	29400814 	ori	r5,r5,32
 1011ee0:	d9413b15 	stw	r5,1260(sp)
 1011ee4:	003d4206 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011ee8:	a0c00007 	ldb	r3,0(r20)
 1011eec:	003d4006 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 1011ef0:	20c03fcc 	andi	r3,r4,255
 1011ef4:	00800044 	movi	r2,1
 1011ef8:	18802b26 	beq	r3,r2,1011fa8 <___vfiprintf_internal_r+0xd88>
 1011efc:	18800b36 	bltu	r3,r2,1011f2c <___vfiprintf_internal_r+0xd0c>
 1011f00:	00800084 	movi	r2,2
 1011f04:	18808426 	beq	r3,r2,1012118 <___vfiprintf_internal_r+0xef8>
 1011f08:	010040b4 	movhi	r4,258
 1011f0c:	2128d704 	addi	r4,r4,-23716
 1011f10:	ddc13815 	stw	r23,1248(sp)
 1011f14:	10064cc0 	call	10064cc <strlen>
 1011f18:	d8813715 	stw	r2,1244(sp)
 1011f1c:	008040b4 	movhi	r2,258
 1011f20:	10a8d704 	addi	r2,r2,-23716
 1011f24:	d8813c15 	stw	r2,1264(sp)
 1011f28:	003ed506 	br	1011a80 <___vfiprintf_internal_r+0x860>
 1011f2c:	d8800e04 	addi	r2,sp,56
 1011f30:	df000404 	addi	fp,sp,16
 1011f34:	d8813c15 	stw	r2,1264(sp)
 1011f38:	880a977a 	slli	r5,r17,29
 1011f3c:	8004d0fa 	srli	r2,r16,3
 1011f40:	8806d0fa 	srli	r3,r17,3
 1011f44:	810001cc 	andi	r4,r16,7
 1011f48:	2884b03a 	or	r2,r5,r2
 1011f4c:	d9413c17 	ldw	r5,1264(sp)
 1011f50:	21000c04 	addi	r4,r4,48
 1011f54:	1021883a 	mov	r16,r2
 1011f58:	297fffc4 	addi	r5,r5,-1
 1011f5c:	d9413c15 	stw	r5,1264(sp)
 1011f60:	29000005 	stb	r4,0(r5)
 1011f64:	10cab03a 	or	r5,r2,r3
 1011f68:	1823883a 	mov	r17,r3
 1011f6c:	283ff21e 	bne	r5,zero,1011f38 <___vfiprintf_internal_r+0xd18>
 1011f70:	d9813b17 	ldw	r6,1260(sp)
 1011f74:	3080004c 	andi	r2,r6,1
 1011f78:	1005003a 	cmpeq	r2,r2,zero
 1011f7c:	103ebb1e 	bne	r2,zero,1011a6c <___vfiprintf_internal_r+0x84c>
 1011f80:	20803fcc 	andi	r2,r4,255
 1011f84:	1080201c 	xori	r2,r2,128
 1011f88:	10bfe004 	addi	r2,r2,-128
 1011f8c:	00c00c04 	movi	r3,48
 1011f90:	10feb626 	beq	r2,r3,1011a6c <___vfiprintf_internal_r+0x84c>
 1011f94:	d8813c17 	ldw	r2,1264(sp)
 1011f98:	10bfffc4 	addi	r2,r2,-1
 1011f9c:	d8813c15 	stw	r2,1264(sp)
 1011fa0:	10c00005 	stb	r3,0(r2)
 1011fa4:	003eb106 	br	1011a6c <___vfiprintf_internal_r+0x84c>
 1011fa8:	88800068 	cmpgeui	r2,r17,1
 1011fac:	10000d1e 	bne	r2,zero,1011fe4 <___vfiprintf_internal_r+0xdc4>
 1011fb0:	8800021e 	bne	r17,zero,1011fbc <___vfiprintf_internal_r+0xd9c>
 1011fb4:	00800244 	movi	r2,9
 1011fb8:	14000a36 	bltu	r2,r16,1011fe4 <___vfiprintf_internal_r+0xdc4>
 1011fbc:	d9800dc4 	addi	r6,sp,55
 1011fc0:	df000404 	addi	fp,sp,16
 1011fc4:	d9813c15 	stw	r6,1264(sp)
 1011fc8:	d8c13c17 	ldw	r3,1264(sp)
 1011fcc:	80800c04 	addi	r2,r16,48
 1011fd0:	18800005 	stb	r2,0(r3)
 1011fd4:	003ea506 	br	1011a6c <___vfiprintf_internal_r+0x84c>
 1011fd8:	01000084 	movi	r4,2
 1011fdc:	d8000005 	stb	zero,0(sp)
 1011fe0:	003e9506 	br	1011a38 <___vfiprintf_internal_r+0x818>
 1011fe4:	df000404 	addi	fp,sp,16
 1011fe8:	dcc00e04 	addi	r19,sp,56
 1011fec:	8009883a 	mov	r4,r16
 1011ff0:	880b883a 	mov	r5,r17
 1011ff4:	01800284 	movi	r6,10
 1011ff8:	000f883a 	mov	r7,zero
 1011ffc:	1013ab40 	call	1013ab4 <__umoddi3>
 1012000:	12000c04 	addi	r8,r2,48
 1012004:	9cffffc4 	addi	r19,r19,-1
 1012008:	8009883a 	mov	r4,r16
 101200c:	880b883a 	mov	r5,r17
 1012010:	01800284 	movi	r6,10
 1012014:	000f883a 	mov	r7,zero
 1012018:	9a000005 	stb	r8,0(r19)
 101201c:	10134d80 	call	10134d8 <__udivdi3>
 1012020:	1009883a 	mov	r4,r2
 1012024:	1021883a 	mov	r16,r2
 1012028:	18800068 	cmpgeui	r2,r3,1
 101202c:	1823883a 	mov	r17,r3
 1012030:	103fee1e 	bne	r2,zero,1011fec <___vfiprintf_internal_r+0xdcc>
 1012034:	1800021e 	bne	r3,zero,1012040 <___vfiprintf_internal_r+0xe20>
 1012038:	00800244 	movi	r2,9
 101203c:	113feb36 	bltu	r2,r4,1011fec <___vfiprintf_internal_r+0xdcc>
 1012040:	9cffffc4 	addi	r19,r19,-1
 1012044:	dcc13c15 	stw	r19,1264(sp)
 1012048:	003fdf06 	br	1011fc8 <___vfiprintf_internal_r+0xda8>
 101204c:	05c040b4 	movhi	r23,258
 1012050:	bde9fd04 	addi	r23,r23,-22540
 1012054:	003dc506 	br	101176c <___vfiprintf_internal_r+0x54c>
 1012058:	d9013b17 	ldw	r4,1260(sp)
 101205c:	2080004c 	andi	r2,r4,1
 1012060:	1000421e 	bne	r2,zero,101216c <___vfiprintf_internal_r+0xf4c>
 1012064:	d9400e04 	addi	r5,sp,56
 1012068:	df000404 	addi	fp,sp,16
 101206c:	d9413c15 	stw	r5,1264(sp)
 1012070:	003e7e06 	br	1011a6c <___vfiprintf_internal_r+0x84c>
 1012074:	d9813b17 	ldw	r6,1260(sp)
 1012078:	3080040c 	andi	r2,r6,16
 101207c:	10001c1e 	bne	r2,zero,10120f0 <___vfiprintf_internal_r+0xed0>
 1012080:	d8c13b17 	ldw	r3,1260(sp)
 1012084:	1880100c 	andi	r2,r3,64
 1012088:	10001926 	beq	r2,zero,10120f0 <___vfiprintf_internal_r+0xed0>
 101208c:	3c00000b 	ldhu	r16,0(r7)
 1012090:	0023883a 	mov	r17,zero
 1012094:	39c00104 	addi	r7,r7,4
 1012098:	d9c13515 	stw	r7,1236(sp)
 101209c:	003f3706 	br	1011d7c <___vfiprintf_internal_r+0xb5c>
 10120a0:	3c000017 	ldw	r16,0(r7)
 10120a4:	0009883a 	mov	r4,zero
 10120a8:	39c00104 	addi	r7,r7,4
 10120ac:	0023883a 	mov	r17,zero
 10120b0:	d9c13515 	stw	r7,1236(sp)
 10120b4:	d8000005 	stb	zero,0(sp)
 10120b8:	003e5f06 	br	1011a38 <___vfiprintf_internal_r+0x818>
 10120bc:	3c000017 	ldw	r16,0(r7)
 10120c0:	01000044 	movi	r4,1
 10120c4:	39c00104 	addi	r7,r7,4
 10120c8:	0023883a 	mov	r17,zero
 10120cc:	d9c13515 	stw	r7,1236(sp)
 10120d0:	d8000005 	stb	zero,0(sp)
 10120d4:	003e5806 	br	1011a38 <___vfiprintf_internal_r+0x818>
 10120d8:	38800017 	ldw	r2,0(r7)
 10120dc:	39c00104 	addi	r7,r7,4
 10120e0:	d9c13515 	stw	r7,1236(sp)
 10120e4:	1023d7fa 	srai	r17,r2,31
 10120e8:	1021883a 	mov	r16,r2
 10120ec:	003e5006 	br	1011a30 <___vfiprintf_internal_r+0x810>
 10120f0:	3c000017 	ldw	r16,0(r7)
 10120f4:	0023883a 	mov	r17,zero
 10120f8:	39c00104 	addi	r7,r7,4
 10120fc:	d9c13515 	stw	r7,1236(sp)
 1012100:	003f1e06 	br	1011d7c <___vfiprintf_internal_r+0xb5c>
 1012104:	d9400317 	ldw	r5,12(sp)
 1012108:	d9000217 	ldw	r4,8(sp)
 101210c:	05c040b4 	movhi	r23,258
 1012110:	bdea0104 	addi	r23,r23,-22524
 1012114:	003d4e06 	br	1011650 <___vfiprintf_internal_r+0x430>
 1012118:	d9000e04 	addi	r4,sp,56
 101211c:	df000404 	addi	fp,sp,16
 1012120:	d9013c15 	stw	r4,1264(sp)
 1012124:	d9813617 	ldw	r6,1240(sp)
 1012128:	880a973a 	slli	r5,r17,28
 101212c:	8004d13a 	srli	r2,r16,4
 1012130:	810003cc 	andi	r4,r16,15
 1012134:	3109883a 	add	r4,r6,r4
 1012138:	2884b03a 	or	r2,r5,r2
 101213c:	21400003 	ldbu	r5,0(r4)
 1012140:	d9013c17 	ldw	r4,1264(sp)
 1012144:	8806d13a 	srli	r3,r17,4
 1012148:	1021883a 	mov	r16,r2
 101214c:	213fffc4 	addi	r4,r4,-1
 1012150:	d9013c15 	stw	r4,1264(sp)
 1012154:	d9813c17 	ldw	r6,1264(sp)
 1012158:	10c8b03a 	or	r4,r2,r3
 101215c:	1823883a 	mov	r17,r3
 1012160:	31400005 	stb	r5,0(r6)
 1012164:	203fef1e 	bne	r4,zero,1012124 <___vfiprintf_internal_r+0xf04>
 1012168:	003e4006 	br	1011a6c <___vfiprintf_internal_r+0x84c>
 101216c:	00800c04 	movi	r2,48
 1012170:	d9800dc4 	addi	r6,sp,55
 1012174:	df000404 	addi	fp,sp,16
 1012178:	d8800dc5 	stb	r2,55(sp)
 101217c:	d9813c15 	stw	r6,1264(sp)
 1012180:	003e3a06 	br	1011a6c <___vfiprintf_internal_r+0x84c>
 1012184:	d9413b17 	ldw	r5,1260(sp)
 1012188:	2880040c 	andi	r2,r5,16
 101218c:	10002326 	beq	r2,zero,101221c <___vfiprintf_internal_r+0xffc>
 1012190:	38800017 	ldw	r2,0(r7)
 1012194:	d9813a17 	ldw	r6,1256(sp)
 1012198:	39c00104 	addi	r7,r7,4
 101219c:	11800015 	stw	r6,0(r2)
 10121a0:	003c7006 	br	1011364 <___vfiprintf_internal_r+0x144>
 10121a4:	d9000217 	ldw	r4,8(sp)
 10121a8:	05c040b4 	movhi	r23,258
 10121ac:	bdea0104 	addi	r23,r23,-22524
 10121b0:	003da406 	br	1011844 <___vfiprintf_internal_r+0x624>
 10121b4:	0005883a 	mov	r2,zero
 10121b8:	1409c83a 	sub	r4,r2,r16
 10121bc:	1105803a 	cmpltu	r2,r2,r4
 10121c0:	044bc83a 	sub	r5,zero,r17
 10121c4:	2885c83a 	sub	r2,r5,r2
 10121c8:	2021883a 	mov	r16,r4
 10121cc:	1023883a 	mov	r17,r2
 10121d0:	01000044 	movi	r4,1
 10121d4:	00800b44 	movi	r2,45
 10121d8:	d8800005 	stb	r2,0(sp)
 10121dc:	003e1606 	br	1011a38 <___vfiprintf_internal_r+0x818>
 10121e0:	b009883a 	mov	r4,r22
 10121e4:	a80b883a 	mov	r5,r21
 10121e8:	d9800104 	addi	r6,sp,4
 10121ec:	10111c80 	call	10111c8 <__sprint_r>
 10121f0:	103daa1e 	bne	r2,zero,101189c <___vfiprintf_internal_r+0x67c>
 10121f4:	003da806 	br	1011898 <___vfiprintf_internal_r+0x678>
 10121f8:	05c040b4 	movhi	r23,258
 10121fc:	bde9fd04 	addi	r23,r23,-22540
 1012200:	003dca06 	br	101192c <___vfiprintf_internal_r+0x70c>
 1012204:	d8813b17 	ldw	r2,1260(sp)
 1012208:	a5000044 	addi	r20,r20,1
 101220c:	a0c00007 	ldb	r3,0(r20)
 1012210:	10800814 	ori	r2,r2,32
 1012214:	d8813b15 	stw	r2,1260(sp)
 1012218:	003c7506 	br	10113f0 <___vfiprintf_internal_r+0x1d0>
 101221c:	d8c13b17 	ldw	r3,1260(sp)
 1012220:	1880100c 	andi	r2,r3,64
 1012224:	10001a26 	beq	r2,zero,1012290 <___vfiprintf_internal_r+0x1070>
 1012228:	38800017 	ldw	r2,0(r7)
 101222c:	d9013a17 	ldw	r4,1256(sp)
 1012230:	39c00104 	addi	r7,r7,4
 1012234:	1100000d 	sth	r4,0(r2)
 1012238:	003c4a06 	br	1011364 <___vfiprintf_internal_r+0x144>
 101223c:	d9013c17 	ldw	r4,1264(sp)
 1012240:	10064cc0 	call	10064cc <strlen>
 1012244:	d8813715 	stw	r2,1244(sp)
 1012248:	d8013815 	stw	zero,1248(sp)
 101224c:	003e0c06 	br	1011a80 <___vfiprintf_internal_r+0x860>
 1012250:	00800184 	movi	r2,6
 1012254:	15c00836 	bltu	r2,r23,1012278 <___vfiprintf_internal_r+0x1058>
 1012258:	b839883a 	mov	fp,r23
 101225c:	b800010e 	bge	r23,zero,1012264 <___vfiprintf_internal_r+0x1044>
 1012260:	0039883a 	mov	fp,zero
 1012264:	014040b4 	movhi	r5,258
 1012268:	2968d004 	addi	r5,r5,-23744
 101226c:	ddc13715 	stw	r23,1244(sp)
 1012270:	d9413c15 	stw	r5,1264(sp)
 1012274:	003ccb06 	br	10115a4 <___vfiprintf_internal_r+0x384>
 1012278:	014040b4 	movhi	r5,258
 101227c:	2968d004 	addi	r5,r5,-23744
 1012280:	1039883a 	mov	fp,r2
 1012284:	d9413c15 	stw	r5,1264(sp)
 1012288:	d8813715 	stw	r2,1244(sp)
 101228c:	003cc506 	br	10115a4 <___vfiprintf_internal_r+0x384>
 1012290:	38800017 	ldw	r2,0(r7)
 1012294:	d9413a17 	ldw	r5,1256(sp)
 1012298:	39c00104 	addi	r7,r7,4
 101229c:	11400015 	stw	r5,0(r2)
 10122a0:	003c3006 	br	1011364 <___vfiprintf_internal_r+0x144>
 10122a4:	002f883a 	mov	r23,zero
 10122a8:	003c5306 	br	10113f8 <___vfiprintf_internal_r+0x1d8>
 10122ac:	3dc00017 	ldw	r23,0(r7)
 10122b0:	39c00104 	addi	r7,r7,4
 10122b4:	b83f0c0e 	bge	r23,zero,1011ee8 <___vfiprintf_internal_r+0xcc8>
 10122b8:	a0c00007 	ldb	r3,0(r20)
 10122bc:	05ffffc4 	movi	r23,-1
 10122c0:	003c4b06 	br	10113f0 <___vfiprintf_internal_r+0x1d0>

010122c4 <__vfiprintf_internal>:
 10122c4:	008040b4 	movhi	r2,258
 10122c8:	10b25404 	addi	r2,r2,-14000
 10122cc:	2013883a 	mov	r9,r4
 10122d0:	11000017 	ldw	r4,0(r2)
 10122d4:	2805883a 	mov	r2,r5
 10122d8:	300f883a 	mov	r7,r6
 10122dc:	480b883a 	mov	r5,r9
 10122e0:	100d883a 	mov	r6,r2
 10122e4:	10112201 	jmpi	1011220 <___vfiprintf_internal_r>

010122e8 <__swbuf_r>:
 10122e8:	defffc04 	addi	sp,sp,-16
 10122ec:	dc400215 	stw	r17,8(sp)
 10122f0:	dc000115 	stw	r16,4(sp)
 10122f4:	dfc00315 	stw	ra,12(sp)
 10122f8:	2023883a 	mov	r17,r4
 10122fc:	2821883a 	mov	r16,r5
 1012300:	20000226 	beq	r4,zero,101230c <__swbuf_r+0x24>
 1012304:	20800e17 	ldw	r2,56(r4)
 1012308:	10002f26 	beq	r2,zero,10123c8 <__swbuf_r+0xe0>
 101230c:	3080030b 	ldhu	r2,12(r6)
 1012310:	30c00617 	ldw	r3,24(r6)
 1012314:	1080020c 	andi	r2,r2,8
 1012318:	30c00215 	stw	r3,8(r6)
 101231c:	10002226 	beq	r2,zero,10123a8 <__swbuf_r+0xc0>
 1012320:	30c00417 	ldw	r3,16(r6)
 1012324:	18002026 	beq	r3,zero,10123a8 <__swbuf_r+0xc0>
 1012328:	31000017 	ldw	r4,0(r6)
 101232c:	30800517 	ldw	r2,20(r6)
 1012330:	20c7c83a 	sub	r3,r4,r3
 1012334:	18802f0e 	bge	r3,r2,10123f4 <__swbuf_r+0x10c>
 1012338:	19400044 	addi	r5,r3,1
 101233c:	30800217 	ldw	r2,8(r6)
 1012340:	84003fcc 	andi	r16,r16,255
 1012344:	20c00044 	addi	r3,r4,1
 1012348:	10bfffc4 	addi	r2,r2,-1
 101234c:	30800215 	stw	r2,8(r6)
 1012350:	24000005 	stb	r16,0(r4)
 1012354:	30800517 	ldw	r2,20(r6)
 1012358:	30c00015 	stw	r3,0(r6)
 101235c:	11400c26 	beq	r2,r5,1012390 <__swbuf_r+0xa8>
 1012360:	3080030b 	ldhu	r2,12(r6)
 1012364:	1080004c 	andi	r2,r2,1
 1012368:	1005003a 	cmpeq	r2,r2,zero
 101236c:	10000626 	beq	r2,zero,1012388 <__swbuf_r+0xa0>
 1012370:	8005883a 	mov	r2,r16
 1012374:	dfc00317 	ldw	ra,12(sp)
 1012378:	dc400217 	ldw	r17,8(sp)
 101237c:	dc000117 	ldw	r16,4(sp)
 1012380:	dec00404 	addi	sp,sp,16
 1012384:	f800283a 	ret
 1012388:	00800284 	movi	r2,10
 101238c:	80bff81e 	bne	r16,r2,1012370 <__swbuf_r+0x88>
 1012390:	8809883a 	mov	r4,r17
 1012394:	300b883a 	mov	r5,r6
 1012398:	100b6d80 	call	100b6d8 <_fflush_r>
 101239c:	103ff426 	beq	r2,zero,1012370 <__swbuf_r+0x88>
 10123a0:	043fffc4 	movi	r16,-1
 10123a4:	003ff206 	br	1012370 <__swbuf_r+0x88>
 10123a8:	300b883a 	mov	r5,r6
 10123ac:	8809883a 	mov	r4,r17
 10123b0:	d9800015 	stw	r6,0(sp)
 10123b4:	1009c040 	call	1009c04 <__swsetup_r>
 10123b8:	d9800017 	ldw	r6,0(sp)
 10123bc:	1000061e 	bne	r2,zero,10123d8 <__swbuf_r+0xf0>
 10123c0:	30c00417 	ldw	r3,16(r6)
 10123c4:	003fd806 	br	1012328 <__swbuf_r+0x40>
 10123c8:	d9800015 	stw	r6,0(sp)
 10123cc:	100b9700 	call	100b970 <__sinit>
 10123d0:	d9800017 	ldw	r6,0(sp)
 10123d4:	003fcd06 	br	101230c <__swbuf_r+0x24>
 10123d8:	3080030b 	ldhu	r2,12(r6)
 10123dc:	00c00244 	movi	r3,9
 10123e0:	043fffc4 	movi	r16,-1
 10123e4:	10801014 	ori	r2,r2,64
 10123e8:	3080030d 	sth	r2,12(r6)
 10123ec:	88c00015 	stw	r3,0(r17)
 10123f0:	003fdf06 	br	1012370 <__swbuf_r+0x88>
 10123f4:	300b883a 	mov	r5,r6
 10123f8:	8809883a 	mov	r4,r17
 10123fc:	d9800015 	stw	r6,0(sp)
 1012400:	100b6d80 	call	100b6d8 <_fflush_r>
 1012404:	d9800017 	ldw	r6,0(sp)
 1012408:	103fe51e 	bne	r2,zero,10123a0 <__swbuf_r+0xb8>
 101240c:	31000017 	ldw	r4,0(r6)
 1012410:	01400044 	movi	r5,1
 1012414:	003fc906 	br	101233c <__swbuf_r+0x54>

01012418 <__swbuf>:
 1012418:	018040b4 	movhi	r6,258
 101241c:	31b25404 	addi	r6,r6,-14000
 1012420:	2007883a 	mov	r3,r4
 1012424:	31000017 	ldw	r4,0(r6)
 1012428:	280d883a 	mov	r6,r5
 101242c:	180b883a 	mov	r5,r3
 1012430:	10122e81 	jmpi	10122e8 <__swbuf_r>

01012434 <_write_r>:
 1012434:	defffd04 	addi	sp,sp,-12
 1012438:	dc000015 	stw	r16,0(sp)
 101243c:	040040b4 	movhi	r16,258
 1012440:	843a4204 	addi	r16,r16,-5880
 1012444:	dc400115 	stw	r17,4(sp)
 1012448:	80000015 	stw	zero,0(r16)
 101244c:	2023883a 	mov	r17,r4
 1012450:	2809883a 	mov	r4,r5
 1012454:	300b883a 	mov	r5,r6
 1012458:	380d883a 	mov	r6,r7
 101245c:	dfc00215 	stw	ra,8(sp)
 1012460:	1016b400 	call	1016b40 <write>
 1012464:	1007883a 	mov	r3,r2
 1012468:	00bfffc4 	movi	r2,-1
 101246c:	18800626 	beq	r3,r2,1012488 <_write_r+0x54>
 1012470:	1805883a 	mov	r2,r3
 1012474:	dfc00217 	ldw	ra,8(sp)
 1012478:	dc400117 	ldw	r17,4(sp)
 101247c:	dc000017 	ldw	r16,0(sp)
 1012480:	dec00304 	addi	sp,sp,12
 1012484:	f800283a 	ret
 1012488:	80800017 	ldw	r2,0(r16)
 101248c:	103ff826 	beq	r2,zero,1012470 <_write_r+0x3c>
 1012490:	88800015 	stw	r2,0(r17)
 1012494:	1805883a 	mov	r2,r3
 1012498:	dfc00217 	ldw	ra,8(sp)
 101249c:	dc400117 	ldw	r17,4(sp)
 10124a0:	dc000017 	ldw	r16,0(sp)
 10124a4:	dec00304 	addi	sp,sp,12
 10124a8:	f800283a 	ret

010124ac <_close_r>:
 10124ac:	defffd04 	addi	sp,sp,-12
 10124b0:	dc000015 	stw	r16,0(sp)
 10124b4:	040040b4 	movhi	r16,258
 10124b8:	843a4204 	addi	r16,r16,-5880
 10124bc:	dc400115 	stw	r17,4(sp)
 10124c0:	80000015 	stw	zero,0(r16)
 10124c4:	2023883a 	mov	r17,r4
 10124c8:	2809883a 	mov	r4,r5
 10124cc:	dfc00215 	stw	ra,8(sp)
 10124d0:	1015dd00 	call	1015dd0 <close>
 10124d4:	1007883a 	mov	r3,r2
 10124d8:	00bfffc4 	movi	r2,-1
 10124dc:	18800626 	beq	r3,r2,10124f8 <_close_r+0x4c>
 10124e0:	1805883a 	mov	r2,r3
 10124e4:	dfc00217 	ldw	ra,8(sp)
 10124e8:	dc400117 	ldw	r17,4(sp)
 10124ec:	dc000017 	ldw	r16,0(sp)
 10124f0:	dec00304 	addi	sp,sp,12
 10124f4:	f800283a 	ret
 10124f8:	80800017 	ldw	r2,0(r16)
 10124fc:	103ff826 	beq	r2,zero,10124e0 <_close_r+0x34>
 1012500:	88800015 	stw	r2,0(r17)
 1012504:	1805883a 	mov	r2,r3
 1012508:	dfc00217 	ldw	ra,8(sp)
 101250c:	dc400117 	ldw	r17,4(sp)
 1012510:	dc000017 	ldw	r16,0(sp)
 1012514:	dec00304 	addi	sp,sp,12
 1012518:	f800283a 	ret

0101251c <_fclose_r>:
 101251c:	defffc04 	addi	sp,sp,-16
 1012520:	dc400115 	stw	r17,4(sp)
 1012524:	dc000015 	stw	r16,0(sp)
 1012528:	dfc00315 	stw	ra,12(sp)
 101252c:	dc800215 	stw	r18,8(sp)
 1012530:	2821883a 	mov	r16,r5
 1012534:	2023883a 	mov	r17,r4
 1012538:	28002926 	beq	r5,zero,10125e0 <_fclose_r+0xc4>
 101253c:	100b9600 	call	100b960 <__sfp_lock_acquire>
 1012540:	88000226 	beq	r17,zero,101254c <_fclose_r+0x30>
 1012544:	88800e17 	ldw	r2,56(r17)
 1012548:	10002d26 	beq	r2,zero,1012600 <_fclose_r+0xe4>
 101254c:	8080030f 	ldh	r2,12(r16)
 1012550:	10002226 	beq	r2,zero,10125dc <_fclose_r+0xc0>
 1012554:	8809883a 	mov	r4,r17
 1012558:	800b883a 	mov	r5,r16
 101255c:	100b6d80 	call	100b6d8 <_fflush_r>
 1012560:	1025883a 	mov	r18,r2
 1012564:	80800b17 	ldw	r2,44(r16)
 1012568:	10000426 	beq	r2,zero,101257c <_fclose_r+0x60>
 101256c:	81400717 	ldw	r5,28(r16)
 1012570:	8809883a 	mov	r4,r17
 1012574:	103ee83a 	callr	r2
 1012578:	10002a16 	blt	r2,zero,1012624 <_fclose_r+0x108>
 101257c:	8080030b 	ldhu	r2,12(r16)
 1012580:	1080200c 	andi	r2,r2,128
 1012584:	1000231e 	bne	r2,zero,1012614 <_fclose_r+0xf8>
 1012588:	81400c17 	ldw	r5,48(r16)
 101258c:	28000526 	beq	r5,zero,10125a4 <_fclose_r+0x88>
 1012590:	80801004 	addi	r2,r16,64
 1012594:	28800226 	beq	r5,r2,10125a0 <_fclose_r+0x84>
 1012598:	8809883a 	mov	r4,r17
 101259c:	100bf300 	call	100bf30 <_free_r>
 10125a0:	80000c15 	stw	zero,48(r16)
 10125a4:	81401117 	ldw	r5,68(r16)
 10125a8:	28000326 	beq	r5,zero,10125b8 <_fclose_r+0x9c>
 10125ac:	8809883a 	mov	r4,r17
 10125b0:	100bf300 	call	100bf30 <_free_r>
 10125b4:	80001115 	stw	zero,68(r16)
 10125b8:	8000030d 	sth	zero,12(r16)
 10125bc:	100b9640 	call	100b964 <__sfp_lock_release>
 10125c0:	9005883a 	mov	r2,r18
 10125c4:	dfc00317 	ldw	ra,12(sp)
 10125c8:	dc800217 	ldw	r18,8(sp)
 10125cc:	dc400117 	ldw	r17,4(sp)
 10125d0:	dc000017 	ldw	r16,0(sp)
 10125d4:	dec00404 	addi	sp,sp,16
 10125d8:	f800283a 	ret
 10125dc:	100b9640 	call	100b964 <__sfp_lock_release>
 10125e0:	0025883a 	mov	r18,zero
 10125e4:	9005883a 	mov	r2,r18
 10125e8:	dfc00317 	ldw	ra,12(sp)
 10125ec:	dc800217 	ldw	r18,8(sp)
 10125f0:	dc400117 	ldw	r17,4(sp)
 10125f4:	dc000017 	ldw	r16,0(sp)
 10125f8:	dec00404 	addi	sp,sp,16
 10125fc:	f800283a 	ret
 1012600:	8809883a 	mov	r4,r17
 1012604:	100b9700 	call	100b970 <__sinit>
 1012608:	8080030f 	ldh	r2,12(r16)
 101260c:	103fd11e 	bne	r2,zero,1012554 <_fclose_r+0x38>
 1012610:	003ff206 	br	10125dc <_fclose_r+0xc0>
 1012614:	81400417 	ldw	r5,16(r16)
 1012618:	8809883a 	mov	r4,r17
 101261c:	100bf300 	call	100bf30 <_free_r>
 1012620:	003fd906 	br	1012588 <_fclose_r+0x6c>
 1012624:	04bfffc4 	movi	r18,-1
 1012628:	003fd406 	br	101257c <_fclose_r+0x60>

0101262c <fclose>:
 101262c:	008040b4 	movhi	r2,258
 1012630:	10b25404 	addi	r2,r2,-14000
 1012634:	200b883a 	mov	r5,r4
 1012638:	11000017 	ldw	r4,0(r2)
 101263c:	101251c1 	jmpi	101251c <_fclose_r>

01012640 <_fstat_r>:
 1012640:	defffd04 	addi	sp,sp,-12
 1012644:	dc000015 	stw	r16,0(sp)
 1012648:	040040b4 	movhi	r16,258
 101264c:	843a4204 	addi	r16,r16,-5880
 1012650:	dc400115 	stw	r17,4(sp)
 1012654:	80000015 	stw	zero,0(r16)
 1012658:	2023883a 	mov	r17,r4
 101265c:	2809883a 	mov	r4,r5
 1012660:	300b883a 	mov	r5,r6
 1012664:	dfc00215 	stw	ra,8(sp)
 1012668:	1015fb80 	call	1015fb8 <fstat>
 101266c:	1007883a 	mov	r3,r2
 1012670:	00bfffc4 	movi	r2,-1
 1012674:	18800626 	beq	r3,r2,1012690 <_fstat_r+0x50>
 1012678:	1805883a 	mov	r2,r3
 101267c:	dfc00217 	ldw	ra,8(sp)
 1012680:	dc400117 	ldw	r17,4(sp)
 1012684:	dc000017 	ldw	r16,0(sp)
 1012688:	dec00304 	addi	sp,sp,12
 101268c:	f800283a 	ret
 1012690:	80800017 	ldw	r2,0(r16)
 1012694:	103ff826 	beq	r2,zero,1012678 <_fstat_r+0x38>
 1012698:	88800015 	stw	r2,0(r17)
 101269c:	1805883a 	mov	r2,r3
 10126a0:	dfc00217 	ldw	ra,8(sp)
 10126a4:	dc400117 	ldw	r17,4(sp)
 10126a8:	dc000017 	ldw	r16,0(sp)
 10126ac:	dec00304 	addi	sp,sp,12
 10126b0:	f800283a 	ret

010126b4 <htinit>:
 10126b4:	28800003 	ldbu	r2,0(r5)
 10126b8:	10000626 	beq	r2,zero,10126d4 <htinit+0x20>
 10126bc:	1105883a 	add	r2,r2,r4
 10126c0:	11800005 	stb	r6,0(r2)
 10126c4:	28800043 	ldbu	r2,1(r5)
 10126c8:	31800044 	addi	r6,r6,1
 10126cc:	29400044 	addi	r5,r5,1
 10126d0:	103ffa1e 	bne	r2,zero,10126bc <htinit+0x8>
 10126d4:	f800283a 	ret

010126d8 <__hexdig_init>:
 10126d8:	defffd04 	addi	sp,sp,-12
 10126dc:	dc400015 	stw	r17,0(sp)
 10126e0:	044040b4 	movhi	r17,258
 10126e4:	8c406104 	addi	r17,r17,388
 10126e8:	dcc00115 	stw	r19,4(sp)
 10126ec:	8809883a 	mov	r4,r17
 10126f0:	04c00684 	movi	r19,26
 10126f4:	014040b4 	movhi	r5,258
 10126f8:	296a0504 	addi	r5,r5,-22508
 10126fc:	01800404 	movi	r6,16
 1012700:	dfc00215 	stw	ra,8(sp)
 1012704:	10126b40 	call	10126b4 <htinit>
 1012708:	980d883a 	mov	r6,r19
 101270c:	8809883a 	mov	r4,r17
 1012710:	014040b4 	movhi	r5,258
 1012714:	296a0804 	addi	r5,r5,-22496
 1012718:	10126b40 	call	10126b4 <htinit>
 101271c:	8809883a 	mov	r4,r17
 1012720:	980d883a 	mov	r6,r19
 1012724:	014040b4 	movhi	r5,258
 1012728:	296a0a04 	addi	r5,r5,-22488
 101272c:	dfc00217 	ldw	ra,8(sp)
 1012730:	dcc00117 	ldw	r19,4(sp)
 1012734:	dc400017 	ldw	r17,0(sp)
 1012738:	dec00304 	addi	sp,sp,12
 101273c:	10126b41 	jmpi	10126b4 <htinit>

01012740 <rshift>:
 1012740:	2807d17a 	srai	r3,r5,5
 1012744:	20800417 	ldw	r2,16(r4)
 1012748:	22400504 	addi	r9,r4,20
 101274c:	480f883a 	mov	r7,r9
 1012750:	1880190e 	bge	r3,r2,10127b8 <rshift+0x78>
 1012754:	1085883a 	add	r2,r2,r2
 1012758:	18c7883a 	add	r3,r3,r3
 101275c:	1085883a 	add	r2,r2,r2
 1012760:	18c7883a 	add	r3,r3,r3
 1012764:	294007cc 	andi	r5,r5,31
 1012768:	4891883a 	add	r8,r9,r2
 101276c:	48cd883a 	add	r6,r9,r3
 1012770:	28001726 	beq	r5,zero,10127d0 <rshift+0x90>
 1012774:	30c00017 	ldw	r3,0(r6)
 1012778:	00800804 	movi	r2,32
 101277c:	31800104 	addi	r6,r6,4
 1012780:	1155c83a 	sub	r10,r2,r5
 1012784:	1946d83a 	srl	r3,r3,r5
 1012788:	3200092e 	bgeu	r6,r8,10127b0 <rshift+0x70>
 101278c:	30800017 	ldw	r2,0(r6)
 1012790:	1284983a 	sll	r2,r2,r10
 1012794:	10c4b03a 	or	r2,r2,r3
 1012798:	38800015 	stw	r2,0(r7)
 101279c:	30c00017 	ldw	r3,0(r6)
 10127a0:	31800104 	addi	r6,r6,4
 10127a4:	39c00104 	addi	r7,r7,4
 10127a8:	1946d83a 	srl	r3,r3,r5
 10127ac:	323ff736 	bltu	r6,r8,101278c <rshift+0x4c>
 10127b0:	38c00015 	stw	r3,0(r7)
 10127b4:	18000c1e 	bne	r3,zero,10127e8 <rshift+0xa8>
 10127b8:	3a45c83a 	sub	r2,r7,r9
 10127bc:	1005d0ba 	srai	r2,r2,2
 10127c0:	20800415 	stw	r2,16(r4)
 10127c4:	1000011e 	bne	r2,zero,10127cc <rshift+0x8c>
 10127c8:	20000515 	stw	zero,20(r4)
 10127cc:	f800283a 	ret
 10127d0:	323ff92e 	bgeu	r6,r8,10127b8 <rshift+0x78>
 10127d4:	30800017 	ldw	r2,0(r6)
 10127d8:	31800104 	addi	r6,r6,4
 10127dc:	38800015 	stw	r2,0(r7)
 10127e0:	39c00104 	addi	r7,r7,4
 10127e4:	003ffa06 	br	10127d0 <rshift+0x90>
 10127e8:	39c00104 	addi	r7,r7,4
 10127ec:	003ff206 	br	10127b8 <rshift+0x78>

010127f0 <__gethex>:
 10127f0:	defff304 	addi	sp,sp,-52
 10127f4:	dd400815 	stw	r21,32(sp)
 10127f8:	dd000715 	stw	r20,28(sp)
 10127fc:	dcc00615 	stw	r19,24(sp)
 1012800:	dc400415 	stw	r17,16(sp)
 1012804:	dfc00c15 	stw	ra,48(sp)
 1012808:	df000b15 	stw	fp,44(sp)
 101280c:	ddc00a15 	stw	r23,40(sp)
 1012810:	dd800915 	stw	r22,36(sp)
 1012814:	dc800515 	stw	r18,20(sp)
 1012818:	dc000315 	stw	r16,12(sp)
 101281c:	044040b4 	movhi	r17,258
 1012820:	8c406104 	addi	r17,r17,388
 1012824:	88800c03 	ldbu	r2,48(r17)
 1012828:	202b883a 	mov	r21,r4
 101282c:	2827883a 	mov	r19,r5
 1012830:	3029883a 	mov	r20,r6
 1012834:	d9c00115 	stw	r7,4(sp)
 1012838:	10006e26 	beq	r2,zero,10129f4 <__gethex+0x204>
 101283c:	99800017 	ldw	r6,0(r19)
 1012840:	00800c04 	movi	r2,48
 1012844:	31000083 	ldbu	r4,2(r6)
 1012848:	30c00084 	addi	r3,r6,2
 101284c:	20806f1e 	bne	r4,r2,1012a0c <__gethex+0x21c>
 1012850:	200b883a 	mov	r5,r4
 1012854:	3007883a 	mov	r3,r6
 1012858:	188000c3 	ldbu	r2,3(r3)
 101285c:	18c00044 	addi	r3,r3,1
 1012860:	1009883a 	mov	r4,r2
 1012864:	117ffc26 	beq	r2,r5,1012858 <__gethex+0x68>
 1012868:	1997c83a 	sub	r11,r3,r6
 101286c:	19400084 	addi	r5,r3,2
 1012870:	2445883a 	add	r2,r4,r17
 1012874:	10c00003 	ldbu	r3,0(r2)
 1012878:	18002d26 	beq	r3,zero,1012930 <__gethex+0x140>
 101287c:	29000003 	ldbu	r4,0(r5)
 1012880:	2825883a 	mov	r18,r5
 1012884:	000d883a 	mov	r6,zero
 1012888:	0013883a 	mov	r9,zero
 101288c:	21003fcc 	andi	r4,r4,255
 1012890:	2445883a 	add	r2,r4,r17
 1012894:	10c00003 	ldbu	r3,0(r2)
 1012898:	18000526 	beq	r3,zero,10128b0 <__gethex+0xc0>
 101289c:	29400044 	addi	r5,r5,1
 10128a0:	29000003 	ldbu	r4,0(r5)
 10128a4:	2445883a 	add	r2,r4,r17
 10128a8:	10c00003 	ldbu	r3,0(r2)
 10128ac:	183ffb1e 	bne	r3,zero,101289c <__gethex+0xac>
 10128b0:	00800b84 	movi	r2,46
 10128b4:	20805826 	beq	r4,r2,1012a18 <__gethex+0x228>
 10128b8:	30007a26 	beq	r6,zero,1012aa4 <__gethex+0x2b4>
 10128bc:	2985c83a 	sub	r2,r5,r6
 10128c0:	1085883a 	add	r2,r2,r2
 10128c4:	1085883a 	add	r2,r2,r2
 10128c8:	00adc83a 	sub	r22,zero,r2
 10128cc:	2821883a 	mov	r16,r5
 10128d0:	80c00003 	ldbu	r3,0(r16)
 10128d4:	00801404 	movi	r2,80
 10128d8:	18801e26 	beq	r3,r2,1012954 <__gethex+0x164>
 10128dc:	00801c04 	movi	r2,112
 10128e0:	18801c26 	beq	r3,r2,1012954 <__gethex+0x164>
 10128e4:	800d883a 	mov	r6,r16
 10128e8:	4805003a 	cmpeq	r2,r9,zero
 10128ec:	99800015 	stw	r6,0(r19)
 10128f0:	1000861e 	bne	r2,zero,1012b0c <__gethex+0x31c>
 10128f4:	58003d26 	beq	r11,zero,10129ec <__gethex+0x1fc>
 10128f8:	0025883a 	mov	r18,zero
 10128fc:	9005883a 	mov	r2,r18
 1012900:	dfc00c17 	ldw	ra,48(sp)
 1012904:	df000b17 	ldw	fp,44(sp)
 1012908:	ddc00a17 	ldw	r23,40(sp)
 101290c:	dd800917 	ldw	r22,36(sp)
 1012910:	dd400817 	ldw	r21,32(sp)
 1012914:	dd000717 	ldw	r20,28(sp)
 1012918:	dcc00617 	ldw	r19,24(sp)
 101291c:	dc800517 	ldw	r18,20(sp)
 1012920:	dc400417 	ldw	r17,16(sp)
 1012924:	dc000317 	ldw	r16,12(sp)
 1012928:	dec00d04 	addi	sp,sp,52
 101292c:	f800283a 	ret
 1012930:	00800b84 	movi	r2,46
 1012934:	20804a26 	beq	r4,r2,1012a60 <__gethex+0x270>
 1012938:	2821883a 	mov	r16,r5
 101293c:	80c00003 	ldbu	r3,0(r16)
 1012940:	00801404 	movi	r2,80
 1012944:	2825883a 	mov	r18,r5
 1012948:	02400044 	movi	r9,1
 101294c:	002d883a 	mov	r22,zero
 1012950:	18bfe21e 	bne	r3,r2,10128dc <__gethex+0xec>
 1012954:	80c00043 	ldbu	r3,1(r16)
 1012958:	00800ac4 	movi	r2,43
 101295c:	81000044 	addi	r4,r16,1
 1012960:	18804a26 	beq	r3,r2,1012a8c <__gethex+0x29c>
 1012964:	00800b44 	movi	r2,45
 1012968:	18804c26 	beq	r3,r2,1012a9c <__gethex+0x2ac>
 101296c:	0015883a 	mov	r10,zero
 1012970:	1c45883a 	add	r2,r3,r17
 1012974:	10800003 	ldbu	r2,0(r2)
 1012978:	103fda26 	beq	r2,zero,10128e4 <__gethex+0xf4>
 101297c:	02000644 	movi	r8,25
 1012980:	40bfd816 	blt	r8,r2,10128e4 <__gethex+0xf4>
 1012984:	20c00043 	ldbu	r3,1(r4)
 1012988:	11fffc04 	addi	r7,r2,-16
 101298c:	008040b4 	movhi	r2,258
 1012990:	10806104 	addi	r2,r2,388
 1012994:	1887883a 	add	r3,r3,r2
 1012998:	18800003 	ldbu	r2,0(r3)
 101299c:	21800044 	addi	r6,r4,1
 10129a0:	10000d26 	beq	r2,zero,10129d8 <__gethex+0x1e8>
 10129a4:	100b883a 	mov	r5,r2
 10129a8:	4080020e 	bge	r8,r2,10129b4 <__gethex+0x1c4>
 10129ac:	00000a06 	br	10129d8 <__gethex+0x1e8>
 10129b0:	41000916 	blt	r8,r4,10129d8 <__gethex+0x1e8>
 10129b4:	31800044 	addi	r6,r6,1
 10129b8:	30800003 	ldbu	r2,0(r6)
 10129bc:	38c002a4 	muli	r3,r7,10
 10129c0:	1445883a 	add	r2,r2,r17
 10129c4:	11000003 	ldbu	r4,0(r2)
 10129c8:	1947883a 	add	r3,r3,r5
 10129cc:	19fffc04 	addi	r7,r3,-16
 10129d0:	200b883a 	mov	r5,r4
 10129d4:	203ff61e 	bne	r4,zero,10129b0 <__gethex+0x1c0>
 10129d8:	5005003a 	cmpeq	r2,r10,zero
 10129dc:	1000011e 	bne	r2,zero,10129e4 <__gethex+0x1f4>
 10129e0:	01cfc83a 	sub	r7,zero,r7
 10129e4:	b1ed883a 	add	r22,r22,r7
 10129e8:	003fbf06 	br	10128e8 <__gethex+0xf8>
 10129ec:	04800184 	movi	r18,6
 10129f0:	003fc206 	br	10128fc <__gethex+0x10c>
 10129f4:	10126d80 	call	10126d8 <__hexdig_init>
 10129f8:	99800017 	ldw	r6,0(r19)
 10129fc:	00800c04 	movi	r2,48
 1012a00:	31000083 	ldbu	r4,2(r6)
 1012a04:	30c00084 	addi	r3,r6,2
 1012a08:	20bf9126 	beq	r4,r2,1012850 <__gethex+0x60>
 1012a0c:	180b883a 	mov	r5,r3
 1012a10:	0017883a 	mov	r11,zero
 1012a14:	003f9606 	br	1012870 <__gethex+0x80>
 1012a18:	303fa81e 	bne	r6,zero,10128bc <__gethex+0xcc>
 1012a1c:	29400044 	addi	r5,r5,1
 1012a20:	28800003 	ldbu	r2,0(r5)
 1012a24:	1445883a 	add	r2,r2,r17
 1012a28:	10c00003 	ldbu	r3,0(r2)
 1012a2c:	1800ad26 	beq	r3,zero,1012ce4 <__gethex+0x4f4>
 1012a30:	2809883a 	mov	r4,r5
 1012a34:	21000044 	addi	r4,r4,1
 1012a38:	20800003 	ldbu	r2,0(r4)
 1012a3c:	1445883a 	add	r2,r2,r17
 1012a40:	10c00003 	ldbu	r3,0(r2)
 1012a44:	183ffb1e 	bne	r3,zero,1012a34 <__gethex+0x244>
 1012a48:	2145c83a 	sub	r2,r4,r5
 1012a4c:	1085883a 	add	r2,r2,r2
 1012a50:	1085883a 	add	r2,r2,r2
 1012a54:	00adc83a 	sub	r22,zero,r2
 1012a58:	200b883a 	mov	r5,r4
 1012a5c:	003f9b06 	br	10128cc <__gethex+0xdc>
 1012a60:	29000043 	ldbu	r4,1(r5)
 1012a64:	008040b4 	movhi	r2,258
 1012a68:	10806104 	addi	r2,r2,388
 1012a6c:	2c000044 	addi	r16,r5,1
 1012a70:	2085883a 	add	r2,r4,r2
 1012a74:	10c00003 	ldbu	r3,0(r2)
 1012a78:	18000d1e 	bne	r3,zero,1012ab0 <__gethex+0x2c0>
 1012a7c:	2825883a 	mov	r18,r5
 1012a80:	02400044 	movi	r9,1
 1012a84:	002d883a 	mov	r22,zero
 1012a88:	003f9106 	br	10128d0 <__gethex+0xe0>
 1012a8c:	0015883a 	mov	r10,zero
 1012a90:	21000044 	addi	r4,r4,1
 1012a94:	20c00003 	ldbu	r3,0(r4)
 1012a98:	003fb506 	br	1012970 <__gethex+0x180>
 1012a9c:	02800044 	movi	r10,1
 1012aa0:	003ffb06 	br	1012a90 <__gethex+0x2a0>
 1012aa4:	2821883a 	mov	r16,r5
 1012aa8:	002d883a 	mov	r22,zero
 1012aac:	003f8806 	br	10128d0 <__gethex+0xe0>
 1012ab0:	00800c04 	movi	r2,48
 1012ab4:	20800e1e 	bne	r4,r2,1012af0 <__gethex+0x300>
 1012ab8:	2007883a 	mov	r3,r4
 1012abc:	800b883a 	mov	r5,r16
 1012ac0:	29400044 	addi	r5,r5,1
 1012ac4:	29000003 	ldbu	r4,0(r5)
 1012ac8:	20803fcc 	andi	r2,r4,255
 1012acc:	10fffc26 	beq	r2,r3,1012ac0 <__gethex+0x2d0>
 1012ad0:	1445883a 	add	r2,r2,r17
 1012ad4:	10c00003 	ldbu	r3,0(r2)
 1012ad8:	1800071e 	bne	r3,zero,1012af8 <__gethex+0x308>
 1012adc:	02c00044 	movi	r11,1
 1012ae0:	800d883a 	mov	r6,r16
 1012ae4:	2825883a 	mov	r18,r5
 1012ae8:	5813883a 	mov	r9,r11
 1012aec:	003f6706 	br	101288c <__gethex+0x9c>
 1012af0:	81000003 	ldbu	r4,0(r16)
 1012af4:	800b883a 	mov	r5,r16
 1012af8:	800d883a 	mov	r6,r16
 1012afc:	2825883a 	mov	r18,r5
 1012b00:	02c00044 	movi	r11,1
 1012b04:	0013883a 	mov	r9,zero
 1012b08:	003f6006 	br	101288c <__gethex+0x9c>
 1012b0c:	8485c83a 	sub	r2,r16,r18
 1012b10:	10bfffc4 	addi	r2,r2,-1
 1012b14:	00c001c4 	movi	r3,7
 1012b18:	1880700e 	bge	r3,r2,1012cdc <__gethex+0x4ec>
 1012b1c:	000b883a 	mov	r5,zero
 1012b20:	1005d07a 	srai	r2,r2,1
 1012b24:	29400044 	addi	r5,r5,1
 1012b28:	18bffd16 	blt	r3,r2,1012b20 <__gethex+0x330>
 1012b2c:	a809883a 	mov	r4,r21
 1012b30:	100d3280 	call	100d328 <_Balloc>
 1012b34:	1027883a 	mov	r19,r2
 1012b38:	10800504 	addi	r2,r2,20
 1012b3c:	d8800215 	stw	r2,8(sp)
 1012b40:	9400522e 	bgeu	r18,r16,1012c8c <__gethex+0x49c>
 1012b44:	da000217 	ldw	r8,8(sp)
 1012b48:	800b883a 	mov	r5,r16
 1012b4c:	000f883a 	mov	r7,zero
 1012b50:	0009883a 	mov	r4,zero
 1012b54:	02400b84 	movi	r9,46
 1012b58:	02800804 	movi	r10,32
 1012b5c:	297fffc4 	addi	r5,r5,-1
 1012b60:	28c00003 	ldbu	r3,0(r5)
 1012b64:	1a400826 	beq	r3,r9,1012b88 <__gethex+0x398>
 1012b68:	380d883a 	mov	r6,r7
 1012b6c:	3a802726 	beq	r7,r10,1012c0c <__gethex+0x41c>
 1012b70:	39c00104 	addi	r7,r7,4
 1012b74:	1c47883a 	add	r3,r3,r17
 1012b78:	18800003 	ldbu	r2,0(r3)
 1012b7c:	108003cc 	andi	r2,r2,15
 1012b80:	1184983a 	sll	r2,r2,r6
 1012b84:	2088b03a 	or	r4,r4,r2
 1012b88:	917ff436 	bltu	r18,r5,1012b5c <__gethex+0x36c>
 1012b8c:	d8c00217 	ldw	r3,8(sp)
 1012b90:	40800104 	addi	r2,r8,4
 1012b94:	41000015 	stw	r4,0(r8)
 1012b98:	10c5c83a 	sub	r2,r2,r3
 1012b9c:	1021d0ba 	srai	r16,r2,2
 1012ba0:	9c000415 	stw	r16,16(r19)
 1012ba4:	100cdd00 	call	100cdd0 <__hi0bits>
 1012ba8:	8006917a 	slli	r3,r16,5
 1012bac:	a5c00017 	ldw	r23,0(r20)
 1012bb0:	1885c83a 	sub	r2,r3,r2
 1012bb4:	b8801c16 	blt	r23,r2,1012c28 <__gethex+0x438>
 1012bb8:	15c00a16 	blt	r2,r23,1012be4 <__gethex+0x3f4>
 1012bbc:	0039883a 	mov	fp,zero
 1012bc0:	a0800217 	ldw	r2,8(r20)
 1012bc4:	1580340e 	bge	r2,r22,1012c98 <__gethex+0x4a8>
 1012bc8:	a809883a 	mov	r4,r21
 1012bcc:	980b883a 	mov	r5,r19
 1012bd0:	100cda80 	call	100cda8 <_Bfree>
 1012bd4:	d8c00d17 	ldw	r3,52(sp)
 1012bd8:	048028c4 	movi	r18,163
 1012bdc:	18000015 	stw	zero,0(r3)
 1012be0:	003f4606 	br	10128fc <__gethex+0x10c>
 1012be4:	b8a1c83a 	sub	r16,r23,r2
 1012be8:	980b883a 	mov	r5,r19
 1012bec:	a809883a 	mov	r4,r21
 1012bf0:	800d883a 	mov	r6,r16
 1012bf4:	100d6ec0 	call	100d6ec <__lshift>
 1012bf8:	1027883a 	mov	r19,r2
 1012bfc:	b42dc83a 	sub	r22,r22,r16
 1012c00:	10800504 	addi	r2,r2,20
 1012c04:	d8800215 	stw	r2,8(sp)
 1012c08:	003fec06 	br	1012bbc <__gethex+0x3cc>
 1012c0c:	41000015 	stw	r4,0(r8)
 1012c10:	28c00003 	ldbu	r3,0(r5)
 1012c14:	01c00104 	movi	r7,4
 1012c18:	000d883a 	mov	r6,zero
 1012c1c:	41d1883a 	add	r8,r8,r7
 1012c20:	0009883a 	mov	r4,zero
 1012c24:	003fd306 	br	1012b74 <__gethex+0x384>
 1012c28:	15e1c83a 	sub	r16,r2,r23
 1012c2c:	9809883a 	mov	r4,r19
 1012c30:	800b883a 	mov	r5,r16
 1012c34:	100d2a00 	call	100d2a0 <__any_on>
 1012c38:	1000061e 	bne	r2,zero,1012c54 <__gethex+0x464>
 1012c3c:	0039883a 	mov	fp,zero
 1012c40:	9809883a 	mov	r4,r19
 1012c44:	800b883a 	mov	r5,r16
 1012c48:	10127400 	call	1012740 <rshift>
 1012c4c:	b42d883a 	add	r22,r22,r16
 1012c50:	003fdb06 	br	1012bc0 <__gethex+0x3d0>
 1012c54:	817fffc4 	addi	r5,r16,-1
 1012c58:	2805d17a 	srai	r2,r5,5
 1012c5c:	d8c00217 	ldw	r3,8(sp)
 1012c60:	290007cc 	andi	r4,r5,31
 1012c64:	1085883a 	add	r2,r2,r2
 1012c68:	1085883a 	add	r2,r2,r2
 1012c6c:	01800044 	movi	r6,1
 1012c70:	10c5883a 	add	r2,r2,r3
 1012c74:	3108983a 	sll	r4,r6,r4
 1012c78:	10c00017 	ldw	r3,0(r2)
 1012c7c:	20c8703a 	and	r4,r4,r3
 1012c80:	20001a1e 	bne	r4,zero,1012cec <__gethex+0x4fc>
 1012c84:	3039883a 	mov	fp,r6
 1012c88:	003fed06 	br	1012c40 <__gethex+0x450>
 1012c8c:	1011883a 	mov	r8,r2
 1012c90:	0009883a 	mov	r4,zero
 1012c94:	003fbd06 	br	1012b8c <__gethex+0x39c>
 1012c98:	a1000117 	ldw	r4,4(r20)
 1012c9c:	b1001a16 	blt	r22,r4,1012d08 <__gethex+0x518>
 1012ca0:	04800044 	movi	r18,1
 1012ca4:	e0000826 	beq	fp,zero,1012cc8 <__gethex+0x4d8>
 1012ca8:	a1000317 	ldw	r4,12(r20)
 1012cac:	00800084 	movi	r2,2
 1012cb0:	20809426 	beq	r4,r2,1012f04 <__gethex+0x714>
 1012cb4:	008000c4 	movi	r2,3
 1012cb8:	20805826 	beq	r4,r2,1012e1c <__gethex+0x62c>
 1012cbc:	00800044 	movi	r2,1
 1012cc0:	20803f26 	beq	r4,r2,1012dc0 <__gethex+0x5d0>
 1012cc4:	94800414 	ori	r18,r18,16
 1012cc8:	d8800d17 	ldw	r2,52(sp)
 1012ccc:	d8c00117 	ldw	r3,4(sp)
 1012cd0:	14c00015 	stw	r19,0(r2)
 1012cd4:	1d800015 	stw	r22,0(r3)
 1012cd8:	003f0806 	br	10128fc <__gethex+0x10c>
 1012cdc:	000b883a 	mov	r5,zero
 1012ce0:	003f9206 	br	1012b2c <__gethex+0x33c>
 1012ce4:	002d883a 	mov	r22,zero
 1012ce8:	003ef806 	br	10128cc <__gethex+0xdc>
 1012cec:	3140160e 	bge	r6,r5,1012d48 <__gethex+0x558>
 1012cf0:	9809883a 	mov	r4,r19
 1012cf4:	817fff84 	addi	r5,r16,-2
 1012cf8:	100d2a00 	call	100d2a0 <__any_on>
 1012cfc:	10001226 	beq	r2,zero,1012d48 <__gethex+0x558>
 1012d00:	070000c4 	movi	fp,3
 1012d04:	003fce06 	br	1012c40 <__gethex+0x450>
 1012d08:	25a3c83a 	sub	r17,r4,r22
 1012d0c:	8dc01016 	blt	r17,r23,1012d50 <__gethex+0x560>
 1012d10:	a0c00317 	ldw	r3,12(r20)
 1012d14:	00800084 	movi	r2,2
 1012d18:	18809326 	beq	r3,r2,1012f68 <__gethex+0x778>
 1012d1c:	008000c4 	movi	r2,3
 1012d20:	18808e26 	beq	r3,r2,1012f5c <__gethex+0x76c>
 1012d24:	00800044 	movi	r2,1
 1012d28:	18807b26 	beq	r3,r2,1012f18 <__gethex+0x728>
 1012d2c:	a809883a 	mov	r4,r21
 1012d30:	980b883a 	mov	r5,r19
 1012d34:	100cda80 	call	100cda8 <_Bfree>
 1012d38:	d8c00d17 	ldw	r3,52(sp)
 1012d3c:	04801404 	movi	r18,80
 1012d40:	18000015 	stw	zero,0(r3)
 1012d44:	003eed06 	br	10128fc <__gethex+0x10c>
 1012d48:	07000084 	movi	fp,2
 1012d4c:	003fbc06 	br	1012c40 <__gethex+0x450>
 1012d50:	8c3fffc4 	addi	r16,r17,-1
 1012d54:	e0001426 	beq	fp,zero,1012da8 <__gethex+0x5b8>
 1012d58:	07000044 	movi	fp,1
 1012d5c:	8005d17a 	srai	r2,r16,5
 1012d60:	d8c00217 	ldw	r3,8(sp)
 1012d64:	814007cc 	andi	r5,r16,31
 1012d68:	1085883a 	add	r2,r2,r2
 1012d6c:	1085883a 	add	r2,r2,r2
 1012d70:	10c5883a 	add	r2,r2,r3
 1012d74:	00c00044 	movi	r3,1
 1012d78:	1946983a 	sll	r3,r3,r5
 1012d7c:	11000017 	ldw	r4,0(r2)
 1012d80:	1906703a 	and	r3,r3,r4
 1012d84:	18000126 	beq	r3,zero,1012d8c <__gethex+0x59c>
 1012d88:	e7000094 	ori	fp,fp,2
 1012d8c:	880b883a 	mov	r5,r17
 1012d90:	9809883a 	mov	r4,r19
 1012d94:	10127400 	call	1012740 <rshift>
 1012d98:	a5800117 	ldw	r22,4(r20)
 1012d9c:	bc6fc83a 	sub	r23,r23,r17
 1012da0:	04800084 	movi	r18,2
 1012da4:	003fbf06 	br	1012ca4 <__gethex+0x4b4>
 1012da8:	043fec0e 	bge	zero,r16,1012d5c <__gethex+0x56c>
 1012dac:	9809883a 	mov	r4,r19
 1012db0:	800b883a 	mov	r5,r16
 1012db4:	100d2a00 	call	100d2a0 <__any_on>
 1012db8:	1039883a 	mov	fp,r2
 1012dbc:	003fe706 	br	1012d5c <__gethex+0x56c>
 1012dc0:	e080008c 	andi	r2,fp,2
 1012dc4:	103fbf26 	beq	r2,zero,1012cc4 <__gethex+0x4d4>
 1012dc8:	d8c00217 	ldw	r3,8(sp)
 1012dcc:	18800017 	ldw	r2,0(r3)
 1012dd0:	e084b03a 	or	r2,fp,r2
 1012dd4:	1104703a 	and	r2,r2,r4
 1012dd8:	103fba26 	beq	r2,zero,1012cc4 <__gethex+0x4d4>
 1012ddc:	9c000417 	ldw	r16,16(r19)
 1012de0:	d8c00217 	ldw	r3,8(sp)
 1012de4:	017fffc4 	movi	r5,-1
 1012de8:	8405883a 	add	r2,r16,r16
 1012dec:	10b9883a 	add	fp,r2,r2
 1012df0:	1f09883a 	add	r4,r3,fp
 1012df4:	dc000015 	stw	r16,0(sp)
 1012df8:	00000306 	br	1012e08 <__gethex+0x618>
 1012dfc:	18000015 	stw	zero,0(r3)
 1012e00:	18c00104 	addi	r3,r3,4
 1012e04:	1900082e 	bgeu	r3,r4,1012e28 <__gethex+0x638>
 1012e08:	18800017 	ldw	r2,0(r3)
 1012e0c:	117ffb26 	beq	r2,r5,1012dfc <__gethex+0x60c>
 1012e10:	10800044 	addi	r2,r2,1
 1012e14:	18800015 	stw	r2,0(r3)
 1012e18:	00001f06 	br	1012e98 <__gethex+0x6a8>
 1012e1c:	d8800e17 	ldw	r2,56(sp)
 1012e20:	103fa826 	beq	r2,zero,1012cc4 <__gethex+0x4d4>
 1012e24:	003fed06 	br	1012ddc <__gethex+0x5ec>
 1012e28:	98800217 	ldw	r2,8(r19)
 1012e2c:	80801316 	blt	r16,r2,1012e7c <__gethex+0x68c>
 1012e30:	99400117 	ldw	r5,4(r19)
 1012e34:	a809883a 	mov	r4,r21
 1012e38:	29400044 	addi	r5,r5,1
 1012e3c:	100d3280 	call	100d328 <_Balloc>
 1012e40:	99800417 	ldw	r6,16(r19)
 1012e44:	99400304 	addi	r5,r19,12
 1012e48:	11000304 	addi	r4,r2,12
 1012e4c:	318d883a 	add	r6,r6,r6
 1012e50:	318d883a 	add	r6,r6,r6
 1012e54:	31800204 	addi	r6,r6,8
 1012e58:	1023883a 	mov	r17,r2
 1012e5c:	10060100 	call	1006010 <memcpy>
 1012e60:	980b883a 	mov	r5,r19
 1012e64:	a809883a 	mov	r4,r21
 1012e68:	100cda80 	call	100cda8 <_Bfree>
 1012e6c:	8c000417 	ldw	r16,16(r17)
 1012e70:	88800504 	addi	r2,r17,20
 1012e74:	8827883a 	mov	r19,r17
 1012e78:	d8800215 	stw	r2,8(sp)
 1012e7c:	8405883a 	add	r2,r16,r16
 1012e80:	1085883a 	add	r2,r2,r2
 1012e84:	14c5883a 	add	r2,r2,r19
 1012e88:	84000044 	addi	r16,r16,1
 1012e8c:	00c00044 	movi	r3,1
 1012e90:	10c00515 	stw	r3,20(r2)
 1012e94:	9c000415 	stw	r16,16(r19)
 1012e98:	00800084 	movi	r2,2
 1012e9c:	90801426 	beq	r18,r2,1012ef0 <__gethex+0x700>
 1012ea0:	d8800017 	ldw	r2,0(sp)
 1012ea4:	14000b16 	blt	r2,r16,1012ed4 <__gethex+0x6e4>
 1012ea8:	bc0007cc 	andi	r16,r23,31
 1012eac:	8000021e 	bne	r16,zero,1012eb8 <__gethex+0x6c8>
 1012eb0:	94800814 	ori	r18,r18,32
 1012eb4:	003f8406 	br	1012cc8 <__gethex+0x4d8>
 1012eb8:	d8c00217 	ldw	r3,8(sp)
 1012ebc:	1f05883a 	add	r2,r3,fp
 1012ec0:	113fff17 	ldw	r4,-4(r2)
 1012ec4:	100cdd00 	call	100cdd0 <__hi0bits>
 1012ec8:	00c00804 	movi	r3,32
 1012ecc:	1c07c83a 	sub	r3,r3,r16
 1012ed0:	10fff70e 	bge	r2,r3,1012eb0 <__gethex+0x6c0>
 1012ed4:	9809883a 	mov	r4,r19
 1012ed8:	01400044 	movi	r5,1
 1012edc:	10127400 	call	1012740 <rshift>
 1012ee0:	a0800217 	ldw	r2,8(r20)
 1012ee4:	b5800044 	addi	r22,r22,1
 1012ee8:	15bf3716 	blt	r2,r22,1012bc8 <__gethex+0x3d8>
 1012eec:	003ff006 	br	1012eb0 <__gethex+0x6c0>
 1012ef0:	a0800017 	ldw	r2,0(r20)
 1012ef4:	10bfffc4 	addi	r2,r2,-1
 1012ef8:	b8801e26 	beq	r23,r2,1012f74 <__gethex+0x784>
 1012efc:	04800884 	movi	r18,34
 1012f00:	003f7106 	br	1012cc8 <__gethex+0x4d8>
 1012f04:	d8c00e17 	ldw	r3,56(sp)
 1012f08:	00800044 	movi	r2,1
 1012f0c:	10c5c83a 	sub	r2,r2,r3
 1012f10:	103f6c26 	beq	r2,zero,1012cc4 <__gethex+0x4d4>
 1012f14:	003fb106 	br	1012ddc <__gethex+0x5ec>
 1012f18:	bc7f841e 	bne	r23,r17,1012d2c <__gethex+0x53c>
 1012f1c:	1dc0050e 	bge	r3,r23,1012f34 <__gethex+0x744>
 1012f20:	b8cbc83a 	sub	r5,r23,r3
 1012f24:	9809883a 	mov	r4,r19
 1012f28:	100d2a00 	call	100d2a0 <__any_on>
 1012f2c:	103f7f26 	beq	r2,zero,1012d2c <__gethex+0x53c>
 1012f30:	a1000117 	ldw	r4,4(r20)
 1012f34:	d8800117 	ldw	r2,4(sp)
 1012f38:	d8c00217 	ldw	r3,8(sp)
 1012f3c:	04000044 	movi	r16,1
 1012f40:	11000015 	stw	r4,0(r2)
 1012f44:	d8800d17 	ldw	r2,52(sp)
 1012f48:	04801884 	movi	r18,98
 1012f4c:	1c000015 	stw	r16,0(r3)
 1012f50:	14c00015 	stw	r19,0(r2)
 1012f54:	9c000415 	stw	r16,16(r19)
 1012f58:	003e6806 	br	10128fc <__gethex+0x10c>
 1012f5c:	d8c00e17 	ldw	r3,56(sp)
 1012f60:	183f7226 	beq	r3,zero,1012d2c <__gethex+0x53c>
 1012f64:	003ff306 	br	1012f34 <__gethex+0x744>
 1012f68:	d8800e17 	ldw	r2,56(sp)
 1012f6c:	103ff126 	beq	r2,zero,1012f34 <__gethex+0x744>
 1012f70:	003f6e06 	br	1012d2c <__gethex+0x53c>
 1012f74:	b805d17a 	srai	r2,r23,5
 1012f78:	d8c00217 	ldw	r3,8(sp)
 1012f7c:	b94007cc 	andi	r5,r23,31
 1012f80:	1085883a 	add	r2,r2,r2
 1012f84:	1085883a 	add	r2,r2,r2
 1012f88:	10c5883a 	add	r2,r2,r3
 1012f8c:	00c00044 	movi	r3,1
 1012f90:	1946983a 	sll	r3,r3,r5
 1012f94:	11000017 	ldw	r4,0(r2)
 1012f98:	1906703a 	and	r3,r3,r4
 1012f9c:	183fd726 	beq	r3,zero,1012efc <__gethex+0x70c>
 1012fa0:	04800844 	movi	r18,33
 1012fa4:	003f4806 	br	1012cc8 <__gethex+0x4d8>

01012fa8 <L_shift>:
 1012fa8:	00800204 	movi	r2,8
 1012fac:	1185c83a 	sub	r2,r2,r6
 1012fb0:	1085883a 	add	r2,r2,r2
 1012fb4:	21c00017 	ldw	r7,0(r4)
 1012fb8:	1093883a 	add	r9,r2,r2
 1012fbc:	00800804 	movi	r2,32
 1012fc0:	200d883a 	mov	r6,r4
 1012fc4:	1251c83a 	sub	r8,r2,r9
 1012fc8:	31800104 	addi	r6,r6,4
 1012fcc:	3805883a 	mov	r2,r7
 1012fd0:	31c00017 	ldw	r7,0(r6)
 1012fd4:	3a08983a 	sll	r4,r7,r8
 1012fd8:	3a46d83a 	srl	r3,r7,r9
 1012fdc:	1104b03a 	or	r2,r2,r4
 1012fe0:	180f883a 	mov	r7,r3
 1012fe4:	30bfff15 	stw	r2,-4(r6)
 1012fe8:	30c00015 	stw	r3,0(r6)
 1012fec:	317ff636 	bltu	r6,r5,1012fc8 <L_shift+0x20>
 1012ff0:	f800283a 	ret

01012ff4 <__hexnan>:
 1012ff4:	defff404 	addi	sp,sp,-48
 1012ff8:	dd800815 	stw	r22,32(sp)
 1012ffc:	058040b4 	movhi	r22,258
 1013000:	b5806104 	addi	r22,r22,388
 1013004:	b0800c03 	ldbu	r2,48(r22)
 1013008:	dcc00515 	stw	r19,20(sp)
 101300c:	dc000215 	stw	r16,8(sp)
 1013010:	dfc00b15 	stw	ra,44(sp)
 1013014:	df000a15 	stw	fp,40(sp)
 1013018:	ddc00915 	stw	r23,36(sp)
 101301c:	dd400715 	stw	r21,28(sp)
 1013020:	dd000615 	stw	r20,24(sp)
 1013024:	dc800415 	stw	r18,16(sp)
 1013028:	dc400315 	stw	r17,12(sp)
 101302c:	d9000115 	stw	r4,4(sp)
 1013030:	2821883a 	mov	r16,r5
 1013034:	3027883a 	mov	r19,r6
 1013038:	10007426 	beq	r2,zero,101320c <__hexnan+0x218>
 101303c:	80c00017 	ldw	r3,0(r16)
 1013040:	1805d17a 	srai	r2,r3,5
 1013044:	18c007cc 	andi	r3,r3,31
 1013048:	1839003a 	cmpeq	fp,r3,zero
 101304c:	1085883a 	add	r2,r2,r2
 1013050:	1085883a 	add	r2,r2,r2
 1013054:	d8c00015 	stw	r3,0(sp)
 1013058:	14c5883a 	add	r2,r2,r19
 101305c:	e000011e 	bne	fp,zero,1013064 <__hexnan+0x70>
 1013060:	10800104 	addi	r2,r2,4
 1013064:	d8c00117 	ldw	r3,4(sp)
 1013068:	153fff04 	addi	r20,r2,-4
 101306c:	a021883a 	mov	r16,r20
 1013070:	1c400017 	ldw	r17,0(r3)
 1013074:	a02b883a 	mov	r21,r20
 1013078:	0025883a 	mov	r18,zero
 101307c:	002f883a 	mov	r23,zero
 1013080:	000d883a 	mov	r6,zero
 1013084:	103fff15 	stw	zero,-4(r2)
 1013088:	8c400044 	addi	r17,r17,1
 101308c:	89000003 	ldbu	r4,0(r17)
 1013090:	20000e26 	beq	r4,zero,10130cc <__hexnan+0xd8>
 1013094:	2585883a 	add	r2,r4,r22
 1013098:	10c00003 	ldbu	r3,0(r2)
 101309c:	18002e1e 	bne	r3,zero,1013158 <__hexnan+0x164>
 10130a0:	00800804 	movi	r2,32
 10130a4:	11005536 	bltu	r2,r4,10131fc <__hexnan+0x208>
 10130a8:	bcbff70e 	bge	r23,r18,1013088 <__hexnan+0x94>
 10130ac:	8540022e 	bgeu	r16,r21,10130b8 <__hexnan+0xc4>
 10130b0:	008001c4 	movi	r2,7
 10130b4:	11803c0e 	bge	r2,r6,10131a8 <__hexnan+0x1b4>
 10130b8:	9c003536 	bltu	r19,r16,1013190 <__hexnan+0x19c>
 10130bc:	8c400044 	addi	r17,r17,1
 10130c0:	89000003 	ldbu	r4,0(r17)
 10130c4:	01800204 	movi	r6,8
 10130c8:	203ff21e 	bne	r4,zero,1013094 <__hexnan+0xa0>
 10130cc:	90004d26 	beq	r18,zero,1013204 <__hexnan+0x210>
 10130d0:	85404336 	bltu	r16,r21,10131e0 <__hexnan+0x1ec>
 10130d4:	9c00382e 	bgeu	r19,r16,10131b8 <__hexnan+0x1c4>
 10130d8:	9807883a 	mov	r3,r19
 10130dc:	80800017 	ldw	r2,0(r16)
 10130e0:	84000104 	addi	r16,r16,4
 10130e4:	18800015 	stw	r2,0(r3)
 10130e8:	18c00104 	addi	r3,r3,4
 10130ec:	a43ffb2e 	bgeu	r20,r16,10130dc <__hexnan+0xe8>
 10130f0:	18000015 	stw	zero,0(r3)
 10130f4:	18c00104 	addi	r3,r3,4
 10130f8:	a0fffd2e 	bgeu	r20,r3,10130f0 <__hexnan+0xfc>
 10130fc:	a0800017 	ldw	r2,0(r20)
 1013100:	1000071e 	bne	r2,zero,1013120 <__hexnan+0x12c>
 1013104:	9d004326 	beq	r19,r20,1013214 <__hexnan+0x220>
 1013108:	a007883a 	mov	r3,r20
 101310c:	00000106 	br	1013114 <__hexnan+0x120>
 1013110:	98c04026 	beq	r19,r3,1013214 <__hexnan+0x220>
 1013114:	18ffff04 	addi	r3,r3,-4
 1013118:	18800017 	ldw	r2,0(r3)
 101311c:	103ffc26 	beq	r2,zero,1013110 <__hexnan+0x11c>
 1013120:	00c00144 	movi	r3,5
 1013124:	1805883a 	mov	r2,r3
 1013128:	dfc00b17 	ldw	ra,44(sp)
 101312c:	df000a17 	ldw	fp,40(sp)
 1013130:	ddc00917 	ldw	r23,36(sp)
 1013134:	dd800817 	ldw	r22,32(sp)
 1013138:	dd400717 	ldw	r21,28(sp)
 101313c:	dd000617 	ldw	r20,24(sp)
 1013140:	dcc00517 	ldw	r19,20(sp)
 1013144:	dc800417 	ldw	r18,16(sp)
 1013148:	dc400317 	ldw	r17,12(sp)
 101314c:	dc000217 	ldw	r16,8(sp)
 1013150:	dec00c04 	addi	sp,sp,48
 1013154:	f800283a 	ret
 1013158:	31800044 	addi	r6,r6,1
 101315c:	00800204 	movi	r2,8
 1013160:	94800044 	addi	r18,r18,1
 1013164:	1180040e 	bge	r2,r6,1013178 <__hexnan+0x184>
 1013168:	9c3fc72e 	bgeu	r19,r16,1013088 <__hexnan+0x94>
 101316c:	843fff04 	addi	r16,r16,-4
 1013170:	80000015 	stw	zero,0(r16)
 1013174:	01800044 	movi	r6,1
 1013178:	80800017 	ldw	r2,0(r16)
 101317c:	18c003cc 	andi	r3,r3,15
 1013180:	1004913a 	slli	r2,r2,4
 1013184:	10c4b03a 	or	r2,r2,r3
 1013188:	80800015 	stw	r2,0(r16)
 101318c:	003fbe06 	br	1013088 <__hexnan+0x94>
 1013190:	843fff04 	addi	r16,r16,-4
 1013194:	802b883a 	mov	r21,r16
 1013198:	902f883a 	mov	r23,r18
 101319c:	000d883a 	mov	r6,zero
 10131a0:	80000015 	stw	zero,0(r16)
 10131a4:	003fb806 	br	1013088 <__hexnan+0x94>
 10131a8:	8009883a 	mov	r4,r16
 10131ac:	a80b883a 	mov	r5,r21
 10131b0:	1012fa80 	call	1012fa8 <L_shift>
 10131b4:	003fc006 	br	10130b8 <__hexnan+0xc4>
 10131b8:	e03fd01e 	bne	fp,zero,10130fc <__hexnan+0x108>
 10131bc:	d8c00017 	ldw	r3,0(sp)
 10131c0:	00800804 	movi	r2,32
 10131c4:	10c5c83a 	sub	r2,r2,r3
 10131c8:	00ffffc4 	movi	r3,-1
 10131cc:	1886d83a 	srl	r3,r3,r2
 10131d0:	a0800017 	ldw	r2,0(r20)
 10131d4:	10c4703a 	and	r2,r2,r3
 10131d8:	a0800015 	stw	r2,0(r20)
 10131dc:	003fc806 	br	1013100 <__hexnan+0x10c>
 10131e0:	008001c4 	movi	r2,7
 10131e4:	11bfbb16 	blt	r2,r6,10130d4 <__hexnan+0xe0>
 10131e8:	a80b883a 	mov	r5,r21
 10131ec:	8009883a 	mov	r4,r16
 10131f0:	1012fa80 	call	1012fa8 <L_shift>
 10131f4:	9c3ff02e 	bgeu	r19,r16,10131b8 <__hexnan+0x1c4>
 10131f8:	003fb706 	br	10130d8 <__hexnan+0xe4>
 10131fc:	00800a44 	movi	r2,41
 1013200:	20800826 	beq	r4,r2,1013224 <__hexnan+0x230>
 1013204:	00c00104 	movi	r3,4
 1013208:	003fc606 	br	1013124 <__hexnan+0x130>
 101320c:	10126d80 	call	10126d8 <__hexdig_init>
 1013210:	003f8a06 	br	101303c <__hexnan+0x48>
 1013214:	00800044 	movi	r2,1
 1013218:	00c00144 	movi	r3,5
 101321c:	98800015 	stw	r2,0(r19)
 1013220:	003fc006 	br	1013124 <__hexnan+0x130>
 1013224:	903ff726 	beq	r18,zero,1013204 <__hexnan+0x210>
 1013228:	d8c00117 	ldw	r3,4(sp)
 101322c:	88800044 	addi	r2,r17,1
 1013230:	18800015 	stw	r2,0(r3)
 1013234:	857fa72e 	bgeu	r16,r21,10130d4 <__hexnan+0xe0>
 1013238:	003fe906 	br	10131e0 <__hexnan+0x1ec>

0101323c <_isatty_r>:
 101323c:	defffd04 	addi	sp,sp,-12
 1013240:	dc000015 	stw	r16,0(sp)
 1013244:	040040b4 	movhi	r16,258
 1013248:	843a4204 	addi	r16,r16,-5880
 101324c:	dc400115 	stw	r17,4(sp)
 1013250:	80000015 	stw	zero,0(r16)
 1013254:	2023883a 	mov	r17,r4
 1013258:	2809883a 	mov	r4,r5
 101325c:	dfc00215 	stw	ra,8(sp)
 1013260:	10162cc0 	call	10162cc <isatty>
 1013264:	1007883a 	mov	r3,r2
 1013268:	00bfffc4 	movi	r2,-1
 101326c:	18800626 	beq	r3,r2,1013288 <_isatty_r+0x4c>
 1013270:	1805883a 	mov	r2,r3
 1013274:	dfc00217 	ldw	ra,8(sp)
 1013278:	dc400117 	ldw	r17,4(sp)
 101327c:	dc000017 	ldw	r16,0(sp)
 1013280:	dec00304 	addi	sp,sp,12
 1013284:	f800283a 	ret
 1013288:	80800017 	ldw	r2,0(r16)
 101328c:	103ff826 	beq	r2,zero,1013270 <_isatty_r+0x34>
 1013290:	88800015 	stw	r2,0(r17)
 1013294:	1805883a 	mov	r2,r3
 1013298:	dfc00217 	ldw	ra,8(sp)
 101329c:	dc400117 	ldw	r17,4(sp)
 10132a0:	dc000017 	ldw	r16,0(sp)
 10132a4:	dec00304 	addi	sp,sp,12
 10132a8:	f800283a 	ret

010132ac <_lseek_r>:
 10132ac:	defffd04 	addi	sp,sp,-12
 10132b0:	dc000015 	stw	r16,0(sp)
 10132b4:	040040b4 	movhi	r16,258
 10132b8:	843a4204 	addi	r16,r16,-5880
 10132bc:	dc400115 	stw	r17,4(sp)
 10132c0:	80000015 	stw	zero,0(r16)
 10132c4:	2023883a 	mov	r17,r4
 10132c8:	2809883a 	mov	r4,r5
 10132cc:	300b883a 	mov	r5,r6
 10132d0:	380d883a 	mov	r6,r7
 10132d4:	dfc00215 	stw	ra,8(sp)
 10132d8:	10166780 	call	1016678 <lseek>
 10132dc:	1007883a 	mov	r3,r2
 10132e0:	00bfffc4 	movi	r2,-1
 10132e4:	18800626 	beq	r3,r2,1013300 <_lseek_r+0x54>
 10132e8:	1805883a 	mov	r2,r3
 10132ec:	dfc00217 	ldw	ra,8(sp)
 10132f0:	dc400117 	ldw	r17,4(sp)
 10132f4:	dc000017 	ldw	r16,0(sp)
 10132f8:	dec00304 	addi	sp,sp,12
 10132fc:	f800283a 	ret
 1013300:	80800017 	ldw	r2,0(r16)
 1013304:	103ff826 	beq	r2,zero,10132e8 <_lseek_r+0x3c>
 1013308:	88800015 	stw	r2,0(r17)
 101330c:	1805883a 	mov	r2,r3
 1013310:	dfc00217 	ldw	ra,8(sp)
 1013314:	dc400117 	ldw	r17,4(sp)
 1013318:	dc000017 	ldw	r16,0(sp)
 101331c:	dec00304 	addi	sp,sp,12
 1013320:	f800283a 	ret

01013324 <_read_r>:
 1013324:	defffd04 	addi	sp,sp,-12
 1013328:	dc000015 	stw	r16,0(sp)
 101332c:	040040b4 	movhi	r16,258
 1013330:	843a4204 	addi	r16,r16,-5880
 1013334:	dc400115 	stw	r17,4(sp)
 1013338:	80000015 	stw	zero,0(r16)
 101333c:	2023883a 	mov	r17,r4
 1013340:	2809883a 	mov	r4,r5
 1013344:	300b883a 	mov	r5,r6
 1013348:	380d883a 	mov	r6,r7
 101334c:	dfc00215 	stw	ra,8(sp)
 1013350:	10168740 	call	1016874 <read>
 1013354:	1007883a 	mov	r3,r2
 1013358:	00bfffc4 	movi	r2,-1
 101335c:	18800626 	beq	r3,r2,1013378 <_read_r+0x54>
 1013360:	1805883a 	mov	r2,r3
 1013364:	dfc00217 	ldw	ra,8(sp)
 1013368:	dc400117 	ldw	r17,4(sp)
 101336c:	dc000017 	ldw	r16,0(sp)
 1013370:	dec00304 	addi	sp,sp,12
 1013374:	f800283a 	ret
 1013378:	80800017 	ldw	r2,0(r16)
 101337c:	103ff826 	beq	r2,zero,1013360 <_read_r+0x3c>
 1013380:	88800015 	stw	r2,0(r17)
 1013384:	1805883a 	mov	r2,r3
 1013388:	dfc00217 	ldw	ra,8(sp)
 101338c:	dc400117 	ldw	r17,4(sp)
 1013390:	dc000017 	ldw	r16,0(sp)
 1013394:	dec00304 	addi	sp,sp,12
 1013398:	f800283a 	ret

0101339c <__muldi3>:
 101339c:	2011883a 	mov	r8,r4
 10133a0:	427fffcc 	andi	r9,r8,65535
 10133a4:	4018d43a 	srli	r12,r8,16
 10133a8:	32bfffcc 	andi	r10,r6,65535
 10133ac:	3016d43a 	srli	r11,r6,16
 10133b0:	4a85383a 	mul	r2,r9,r10
 10133b4:	6295383a 	mul	r10,r12,r10
 10133b8:	4ad3383a 	mul	r9,r9,r11
 10133bc:	113fffcc 	andi	r4,r2,65535
 10133c0:	1004d43a 	srli	r2,r2,16
 10133c4:	4a93883a 	add	r9,r9,r10
 10133c8:	3807883a 	mov	r3,r7
 10133cc:	1245883a 	add	r2,r2,r9
 10133d0:	280f883a 	mov	r7,r5
 10133d4:	180b883a 	mov	r5,r3
 10133d8:	1006943a 	slli	r3,r2,16
 10133dc:	defffd04 	addi	sp,sp,-12
 10133e0:	dc800215 	stw	r18,8(sp)
 10133e4:	1907883a 	add	r3,r3,r4
 10133e8:	dc400115 	stw	r17,4(sp)
 10133ec:	dc000015 	stw	r16,0(sp)
 10133f0:	4165383a 	mul	r18,r8,r5
 10133f4:	31e3383a 	mul	r17,r6,r7
 10133f8:	1012d43a 	srli	r9,r2,16
 10133fc:	62d9383a 	mul	r12,r12,r11
 1013400:	181f883a 	mov	r15,r3
 1013404:	1280022e 	bgeu	r2,r10,1013410 <__muldi3+0x74>
 1013408:	00800074 	movhi	r2,1
 101340c:	6099883a 	add	r12,r12,r2
 1013410:	624d883a 	add	r6,r12,r9
 1013414:	9187883a 	add	r3,r18,r6
 1013418:	88c7883a 	add	r3,r17,r3
 101341c:	7805883a 	mov	r2,r15
 1013420:	dc800217 	ldw	r18,8(sp)
 1013424:	dc400117 	ldw	r17,4(sp)
 1013428:	dc000017 	ldw	r16,0(sp)
 101342c:	dec00304 	addi	sp,sp,12
 1013430:	f800283a 	ret

01013434 <__fixunsdfsi>:
 1013434:	defffb04 	addi	sp,sp,-20
 1013438:	dc400115 	stw	r17,4(sp)
 101343c:	dc000015 	stw	r16,0(sp)
 1013440:	04507834 	movhi	r17,16864
 1013444:	0021883a 	mov	r16,zero
 1013448:	800d883a 	mov	r6,r16
 101344c:	880f883a 	mov	r7,r17
 1013450:	dcc00315 	stw	r19,12(sp)
 1013454:	dc800215 	stw	r18,8(sp)
 1013458:	2827883a 	mov	r19,r5
 101345c:	2025883a 	mov	r18,r4
 1013460:	dfc00415 	stw	ra,16(sp)
 1013464:	1014e840 	call	1014e84 <__gedf2>
 1013468:	000d883a 	mov	r6,zero
 101346c:	880f883a 	mov	r7,r17
 1013470:	980b883a 	mov	r5,r19
 1013474:	9009883a 	mov	r4,r18
 1013478:	10000d16 	blt	r2,zero,10134b0 <__fixunsdfsi+0x7c>
 101347c:	10145dc0 	call	10145dc <__subdf3>
 1013480:	180b883a 	mov	r5,r3
 1013484:	1009883a 	mov	r4,r2
 1013488:	10151140 	call	1015114 <__fixdfsi>
 101348c:	00e00034 	movhi	r3,32768
 1013490:	10c5883a 	add	r2,r2,r3
 1013494:	dfc00417 	ldw	ra,16(sp)
 1013498:	dcc00317 	ldw	r19,12(sp)
 101349c:	dc800217 	ldw	r18,8(sp)
 10134a0:	dc400117 	ldw	r17,4(sp)
 10134a4:	dc000017 	ldw	r16,0(sp)
 10134a8:	dec00504 	addi	sp,sp,20
 10134ac:	f800283a 	ret
 10134b0:	980b883a 	mov	r5,r19
 10134b4:	9009883a 	mov	r4,r18
 10134b8:	10151140 	call	1015114 <__fixdfsi>
 10134bc:	dfc00417 	ldw	ra,16(sp)
 10134c0:	dcc00317 	ldw	r19,12(sp)
 10134c4:	dc800217 	ldw	r18,8(sp)
 10134c8:	dc400117 	ldw	r17,4(sp)
 10134cc:	dc000017 	ldw	r16,0(sp)
 10134d0:	dec00504 	addi	sp,sp,20
 10134d4:	f800283a 	ret

010134d8 <__udivdi3>:
 10134d8:	defff004 	addi	sp,sp,-64
 10134dc:	2005883a 	mov	r2,r4
 10134e0:	3011883a 	mov	r8,r6
 10134e4:	df000e15 	stw	fp,56(sp)
 10134e8:	dd000a15 	stw	r20,40(sp)
 10134ec:	dc000615 	stw	r16,24(sp)
 10134f0:	dfc00f15 	stw	ra,60(sp)
 10134f4:	ddc00d15 	stw	r23,52(sp)
 10134f8:	dd800c15 	stw	r22,48(sp)
 10134fc:	dd400b15 	stw	r21,44(sp)
 1013500:	dcc00915 	stw	r19,36(sp)
 1013504:	dc800815 	stw	r18,32(sp)
 1013508:	dc400715 	stw	r17,28(sp)
 101350c:	4021883a 	mov	r16,r8
 1013510:	1039883a 	mov	fp,r2
 1013514:	2829883a 	mov	r20,r5
 1013518:	38003b1e 	bne	r7,zero,1013608 <__udivdi3+0x130>
 101351c:	2a005c36 	bltu	r5,r8,1013690 <__udivdi3+0x1b8>
 1013520:	4000a626 	beq	r8,zero,10137bc <__udivdi3+0x2e4>
 1013524:	00bfffd4 	movui	r2,65535
 1013528:	14009e36 	bltu	r2,r16,10137a4 <__udivdi3+0x2cc>
 101352c:	00803fc4 	movi	r2,255
 1013530:	14013d36 	bltu	r2,r16,1013a28 <__udivdi3+0x550>
 1013534:	000b883a 	mov	r5,zero
 1013538:	0005883a 	mov	r2,zero
 101353c:	8084d83a 	srl	r2,r16,r2
 1013540:	010040b4 	movhi	r4,258
 1013544:	212a1104 	addi	r4,r4,-22460
 1013548:	01800804 	movi	r6,32
 101354c:	1105883a 	add	r2,r2,r4
 1013550:	10c00003 	ldbu	r3,0(r2)
 1013554:	28c7883a 	add	r3,r5,r3
 1013558:	30edc83a 	sub	r22,r6,r3
 101355c:	b000ee1e 	bne	r22,zero,1013918 <__udivdi3+0x440>
 1013560:	802ad43a 	srli	r21,r16,16
 1013564:	00800044 	movi	r2,1
 1013568:	a423c83a 	sub	r17,r20,r16
 101356c:	85ffffcc 	andi	r23,r16,65535
 1013570:	d8800315 	stw	r2,12(sp)
 1013574:	8809883a 	mov	r4,r17
 1013578:	a80b883a 	mov	r5,r21
 101357c:	10155300 	call	1015530 <__udivsi3>
 1013580:	8809883a 	mov	r4,r17
 1013584:	a80b883a 	mov	r5,r21
 1013588:	102d883a 	mov	r22,r2
 101358c:	10155380 	call	1015538 <__umodsi3>
 1013590:	1004943a 	slli	r2,r2,16
 1013594:	e006d43a 	srli	r3,fp,16
 1013598:	bda3383a 	mul	r17,r23,r22
 101359c:	10c4b03a 	or	r2,r2,r3
 10135a0:	1440042e 	bgeu	r2,r17,10135b4 <__udivdi3+0xdc>
 10135a4:	1405883a 	add	r2,r2,r16
 10135a8:	b5bfffc4 	addi	r22,r22,-1
 10135ac:	14000136 	bltu	r2,r16,10135b4 <__udivdi3+0xdc>
 10135b0:	14413d36 	bltu	r2,r17,1013aa8 <__udivdi3+0x5d0>
 10135b4:	1463c83a 	sub	r17,r2,r17
 10135b8:	8809883a 	mov	r4,r17
 10135bc:	a80b883a 	mov	r5,r21
 10135c0:	10155300 	call	1015530 <__udivsi3>
 10135c4:	8809883a 	mov	r4,r17
 10135c8:	a80b883a 	mov	r5,r21
 10135cc:	1029883a 	mov	r20,r2
 10135d0:	10155380 	call	1015538 <__umodsi3>
 10135d4:	1004943a 	slli	r2,r2,16
 10135d8:	bd09383a 	mul	r4,r23,r20
 10135dc:	e0ffffcc 	andi	r3,fp,65535
 10135e0:	10c4b03a 	or	r2,r2,r3
 10135e4:	1100042e 	bgeu	r2,r4,10135f8 <__udivdi3+0x120>
 10135e8:	8085883a 	add	r2,r16,r2
 10135ec:	a53fffc4 	addi	r20,r20,-1
 10135f0:	14000136 	bltu	r2,r16,10135f8 <__udivdi3+0x120>
 10135f4:	11012036 	bltu	r2,r4,1013a78 <__udivdi3+0x5a0>
 10135f8:	b004943a 	slli	r2,r22,16
 10135fc:	d9000317 	ldw	r4,12(sp)
 1013600:	a084b03a 	or	r2,r20,r2
 1013604:	00001506 	br	101365c <__udivdi3+0x184>
 1013608:	380d883a 	mov	r6,r7
 101360c:	29c06236 	bltu	r5,r7,1013798 <__udivdi3+0x2c0>
 1013610:	00bfffd4 	movui	r2,65535
 1013614:	11c05a36 	bltu	r2,r7,1013780 <__udivdi3+0x2a8>
 1013618:	00803fc4 	movi	r2,255
 101361c:	11c0fc36 	bltu	r2,r7,1013a10 <__udivdi3+0x538>
 1013620:	000b883a 	mov	r5,zero
 1013624:	0005883a 	mov	r2,zero
 1013628:	3084d83a 	srl	r2,r6,r2
 101362c:	010040b4 	movhi	r4,258
 1013630:	212a1104 	addi	r4,r4,-22460
 1013634:	01c00804 	movi	r7,32
 1013638:	1105883a 	add	r2,r2,r4
 101363c:	10c00003 	ldbu	r3,0(r2)
 1013640:	28c7883a 	add	r3,r5,r3
 1013644:	38efc83a 	sub	r23,r7,r3
 1013648:	b800691e 	bne	r23,zero,10137f0 <__udivdi3+0x318>
 101364c:	35000136 	bltu	r6,r20,1013654 <__udivdi3+0x17c>
 1013650:	e4005136 	bltu	fp,r16,1013798 <__udivdi3+0x2c0>
 1013654:	00800044 	movi	r2,1
 1013658:	0009883a 	mov	r4,zero
 101365c:	2007883a 	mov	r3,r4
 1013660:	dfc00f17 	ldw	ra,60(sp)
 1013664:	df000e17 	ldw	fp,56(sp)
 1013668:	ddc00d17 	ldw	r23,52(sp)
 101366c:	dd800c17 	ldw	r22,48(sp)
 1013670:	dd400b17 	ldw	r21,44(sp)
 1013674:	dd000a17 	ldw	r20,40(sp)
 1013678:	dcc00917 	ldw	r19,36(sp)
 101367c:	dc800817 	ldw	r18,32(sp)
 1013680:	dc400717 	ldw	r17,28(sp)
 1013684:	dc000617 	ldw	r16,24(sp)
 1013688:	dec01004 	addi	sp,sp,64
 101368c:	f800283a 	ret
 1013690:	00bfffd4 	movui	r2,65535
 1013694:	12005036 	bltu	r2,r8,10137d8 <__udivdi3+0x300>
 1013698:	00803fc4 	movi	r2,255
 101369c:	1200e836 	bltu	r2,r8,1013a40 <__udivdi3+0x568>
 10136a0:	000b883a 	mov	r5,zero
 10136a4:	0005883a 	mov	r2,zero
 10136a8:	8084d83a 	srl	r2,r16,r2
 10136ac:	010040b4 	movhi	r4,258
 10136b0:	212a1104 	addi	r4,r4,-22460
 10136b4:	01800804 	movi	r6,32
 10136b8:	1105883a 	add	r2,r2,r4
 10136bc:	10c00003 	ldbu	r3,0(r2)
 10136c0:	28c7883a 	add	r3,r5,r3
 10136c4:	30cbc83a 	sub	r5,r6,r3
 10136c8:	28000626 	beq	r5,zero,10136e4 <__udivdi3+0x20c>
 10136cc:	3145c83a 	sub	r2,r6,r5
 10136d0:	e084d83a 	srl	r2,fp,r2
 10136d4:	a146983a 	sll	r3,r20,r5
 10136d8:	e178983a 	sll	fp,fp,r5
 10136dc:	8160983a 	sll	r16,r16,r5
 10136e0:	18a8b03a 	or	r20,r3,r2
 10136e4:	802ad43a 	srli	r21,r16,16
 10136e8:	a009883a 	mov	r4,r20
 10136ec:	85ffffcc 	andi	r23,r16,65535
 10136f0:	a80b883a 	mov	r5,r21
 10136f4:	10155300 	call	1015530 <__udivsi3>
 10136f8:	a009883a 	mov	r4,r20
 10136fc:	a80b883a 	mov	r5,r21
 1013700:	102d883a 	mov	r22,r2
 1013704:	10155380 	call	1015538 <__umodsi3>
 1013708:	1004943a 	slli	r2,r2,16
 101370c:	e006d43a 	srli	r3,fp,16
 1013710:	bda3383a 	mul	r17,r23,r22
 1013714:	10c4b03a 	or	r2,r2,r3
 1013718:	1440042e 	bgeu	r2,r17,101372c <__udivdi3+0x254>
 101371c:	1405883a 	add	r2,r2,r16
 1013720:	b5bfffc4 	addi	r22,r22,-1
 1013724:	14000136 	bltu	r2,r16,101372c <__udivdi3+0x254>
 1013728:	1440d536 	bltu	r2,r17,1013a80 <__udivdi3+0x5a8>
 101372c:	1463c83a 	sub	r17,r2,r17
 1013730:	8809883a 	mov	r4,r17
 1013734:	a80b883a 	mov	r5,r21
 1013738:	10155300 	call	1015530 <__udivsi3>
 101373c:	8809883a 	mov	r4,r17
 1013740:	a80b883a 	mov	r5,r21
 1013744:	1029883a 	mov	r20,r2
 1013748:	10155380 	call	1015538 <__umodsi3>
 101374c:	1004943a 	slli	r2,r2,16
 1013750:	bd09383a 	mul	r4,r23,r20
 1013754:	e0ffffcc 	andi	r3,fp,65535
 1013758:	10c4b03a 	or	r2,r2,r3
 101375c:	1100042e 	bgeu	r2,r4,1013770 <__udivdi3+0x298>
 1013760:	8085883a 	add	r2,r16,r2
 1013764:	a53fffc4 	addi	r20,r20,-1
 1013768:	14000136 	bltu	r2,r16,1013770 <__udivdi3+0x298>
 101376c:	1100c736 	bltu	r2,r4,1013a8c <__udivdi3+0x5b4>
 1013770:	b004943a 	slli	r2,r22,16
 1013774:	0009883a 	mov	r4,zero
 1013778:	a084b03a 	or	r2,r20,r2
 101377c:	003fb706 	br	101365c <__udivdi3+0x184>
 1013780:	00804034 	movhi	r2,256
 1013784:	10bfffc4 	addi	r2,r2,-1
 1013788:	11c0a436 	bltu	r2,r7,1013a1c <__udivdi3+0x544>
 101378c:	01400404 	movi	r5,16
 1013790:	2805883a 	mov	r2,r5
 1013794:	003fa406 	br	1013628 <__udivdi3+0x150>
 1013798:	0005883a 	mov	r2,zero
 101379c:	0009883a 	mov	r4,zero
 10137a0:	003fae06 	br	101365c <__udivdi3+0x184>
 10137a4:	00804034 	movhi	r2,256
 10137a8:	10bfffc4 	addi	r2,r2,-1
 10137ac:	1400a136 	bltu	r2,r16,1013a34 <__udivdi3+0x55c>
 10137b0:	01400404 	movi	r5,16
 10137b4:	2805883a 	mov	r2,r5
 10137b8:	003f6006 	br	101353c <__udivdi3+0x64>
 10137bc:	01000044 	movi	r4,1
 10137c0:	000b883a 	mov	r5,zero
 10137c4:	10155300 	call	1015530 <__udivsi3>
 10137c8:	1021883a 	mov	r16,r2
 10137cc:	00bfffd4 	movui	r2,65535
 10137d0:	143ff436 	bltu	r2,r16,10137a4 <__udivdi3+0x2cc>
 10137d4:	003f5506 	br	101352c <__udivdi3+0x54>
 10137d8:	00804034 	movhi	r2,256
 10137dc:	10bfffc4 	addi	r2,r2,-1
 10137e0:	12009a36 	bltu	r2,r8,1013a4c <__udivdi3+0x574>
 10137e4:	01400404 	movi	r5,16
 10137e8:	2805883a 	mov	r2,r5
 10137ec:	003fae06 	br	10136a8 <__udivdi3+0x1d0>
 10137f0:	3dc5c83a 	sub	r2,r7,r23
 10137f4:	35c8983a 	sll	r4,r6,r23
 10137f8:	8086d83a 	srl	r3,r16,r2
 10137fc:	a0a2d83a 	srl	r17,r20,r2
 1013800:	e084d83a 	srl	r2,fp,r2
 1013804:	20eab03a 	or	r21,r4,r3
 1013808:	a82cd43a 	srli	r22,r21,16
 101380c:	a5c6983a 	sll	r3,r20,r23
 1013810:	8809883a 	mov	r4,r17
 1013814:	b00b883a 	mov	r5,r22
 1013818:	1886b03a 	or	r3,r3,r2
 101381c:	d8c00215 	stw	r3,8(sp)
 1013820:	10155300 	call	1015530 <__udivsi3>
 1013824:	8809883a 	mov	r4,r17
 1013828:	b00b883a 	mov	r5,r22
 101382c:	1029883a 	mov	r20,r2
 1013830:	10155380 	call	1015538 <__umodsi3>
 1013834:	a8ffffcc 	andi	r3,r21,65535
 1013838:	d8c00515 	stw	r3,20(sp)
 101383c:	d9000217 	ldw	r4,8(sp)
 1013840:	d9400517 	ldw	r5,20(sp)
 1013844:	1004943a 	slli	r2,r2,16
 1013848:	2006d43a 	srli	r3,r4,16
 101384c:	85e0983a 	sll	r16,r16,r23
 1013850:	2d23383a 	mul	r17,r5,r20
 1013854:	10c4b03a 	or	r2,r2,r3
 1013858:	dc000015 	stw	r16,0(sp)
 101385c:	1440032e 	bgeu	r2,r17,101386c <__udivdi3+0x394>
 1013860:	1545883a 	add	r2,r2,r21
 1013864:	a53fffc4 	addi	r20,r20,-1
 1013868:	15407f2e 	bgeu	r2,r21,1013a68 <__udivdi3+0x590>
 101386c:	1463c83a 	sub	r17,r2,r17
 1013870:	8809883a 	mov	r4,r17
 1013874:	b00b883a 	mov	r5,r22
 1013878:	10155300 	call	1015530 <__udivsi3>
 101387c:	8809883a 	mov	r4,r17
 1013880:	b00b883a 	mov	r5,r22
 1013884:	1021883a 	mov	r16,r2
 1013888:	10155380 	call	1015538 <__umodsi3>
 101388c:	d8c00517 	ldw	r3,20(sp)
 1013890:	d9000217 	ldw	r4,8(sp)
 1013894:	1004943a 	slli	r2,r2,16
 1013898:	1c0f383a 	mul	r7,r3,r16
 101389c:	20ffffcc 	andi	r3,r4,65535
 10138a0:	10e2b03a 	or	r17,r2,r3
 10138a4:	89c0032e 	bgeu	r17,r7,10138b4 <__udivdi3+0x3dc>
 10138a8:	8d63883a 	add	r17,r17,r21
 10138ac:	843fffc4 	addi	r16,r16,-1
 10138b0:	8d40692e 	bgeu	r17,r21,1013a58 <__udivdi3+0x580>
 10138b4:	a008943a 	slli	r4,r20,16
 10138b8:	d9400017 	ldw	r5,0(sp)
 10138bc:	89e3c83a 	sub	r17,r17,r7
 10138c0:	8110b03a 	or	r8,r16,r4
 10138c4:	280cd43a 	srli	r6,r5,16
 10138c8:	28ffffcc 	andi	r3,r5,65535
 10138cc:	40bfffcc 	andi	r2,r8,65535
 10138d0:	400ad43a 	srli	r5,r8,16
 10138d4:	10d3383a 	mul	r9,r2,r3
 10138d8:	1185383a 	mul	r2,r2,r6
 10138dc:	28c7383a 	mul	r3,r5,r3
 10138e0:	4808d43a 	srli	r4,r9,16
 10138e4:	298b383a 	mul	r5,r5,r6
 10138e8:	10c5883a 	add	r2,r2,r3
 10138ec:	2089883a 	add	r4,r4,r2
 10138f0:	20c0022e 	bgeu	r4,r3,10138fc <__udivdi3+0x424>
 10138f4:	00800074 	movhi	r2,1
 10138f8:	288b883a 	add	r5,r5,r2
 10138fc:	2004d43a 	srli	r2,r4,16
 1013900:	288b883a 	add	r5,r5,r2
 1013904:	89403f36 	bltu	r17,r5,1013a04 <__udivdi3+0x52c>
 1013908:	89403926 	beq	r17,r5,10139f0 <__udivdi3+0x518>
 101390c:	4005883a 	mov	r2,r8
 1013910:	0009883a 	mov	r4,zero
 1013914:	003f5106 	br	101365c <__udivdi3+0x184>
 1013918:	85a0983a 	sll	r16,r16,r22
 101391c:	3585c83a 	sub	r2,r6,r22
 1013920:	a0a2d83a 	srl	r17,r20,r2
 1013924:	802ad43a 	srli	r21,r16,16
 1013928:	e084d83a 	srl	r2,fp,r2
 101392c:	a586983a 	sll	r3,r20,r22
 1013930:	8809883a 	mov	r4,r17
 1013934:	a80b883a 	mov	r5,r21
 1013938:	1886b03a 	or	r3,r3,r2
 101393c:	d8c00115 	stw	r3,4(sp)
 1013940:	10155300 	call	1015530 <__udivsi3>
 1013944:	8809883a 	mov	r4,r17
 1013948:	a80b883a 	mov	r5,r21
 101394c:	d8800415 	stw	r2,16(sp)
 1013950:	10155380 	call	1015538 <__umodsi3>
 1013954:	d9000117 	ldw	r4,4(sp)
 1013958:	d9400417 	ldw	r5,16(sp)
 101395c:	1004943a 	slli	r2,r2,16
 1013960:	85ffffcc 	andi	r23,r16,65535
 1013964:	2006d43a 	srli	r3,r4,16
 1013968:	b963383a 	mul	r17,r23,r5
 101396c:	10c4b03a 	or	r2,r2,r3
 1013970:	1440042e 	bgeu	r2,r17,1013984 <__udivdi3+0x4ac>
 1013974:	297fffc4 	addi	r5,r5,-1
 1013978:	1405883a 	add	r2,r2,r16
 101397c:	d9400415 	stw	r5,16(sp)
 1013980:	1400442e 	bgeu	r2,r16,1013a94 <__udivdi3+0x5bc>
 1013984:	1463c83a 	sub	r17,r2,r17
 1013988:	8809883a 	mov	r4,r17
 101398c:	a80b883a 	mov	r5,r21
 1013990:	10155300 	call	1015530 <__udivsi3>
 1013994:	8809883a 	mov	r4,r17
 1013998:	a80b883a 	mov	r5,r21
 101399c:	1029883a 	mov	r20,r2
 10139a0:	10155380 	call	1015538 <__umodsi3>
 10139a4:	d9400117 	ldw	r5,4(sp)
 10139a8:	1004943a 	slli	r2,r2,16
 10139ac:	bd09383a 	mul	r4,r23,r20
 10139b0:	28ffffcc 	andi	r3,r5,65535
 10139b4:	10c6b03a 	or	r3,r2,r3
 10139b8:	1900062e 	bgeu	r3,r4,10139d4 <__udivdi3+0x4fc>
 10139bc:	1c07883a 	add	r3,r3,r16
 10139c0:	a53fffc4 	addi	r20,r20,-1
 10139c4:	1c000336 	bltu	r3,r16,10139d4 <__udivdi3+0x4fc>
 10139c8:	1900022e 	bgeu	r3,r4,10139d4 <__udivdi3+0x4fc>
 10139cc:	a53fffc4 	addi	r20,r20,-1
 10139d0:	1c07883a 	add	r3,r3,r16
 10139d4:	d9400417 	ldw	r5,16(sp)
 10139d8:	e5b8983a 	sll	fp,fp,r22
 10139dc:	1923c83a 	sub	r17,r3,r4
 10139e0:	2804943a 	slli	r2,r5,16
 10139e4:	a0a8b03a 	or	r20,r20,r2
 10139e8:	dd000315 	stw	r20,12(sp)
 10139ec:	003ee106 	br	1013574 <__udivdi3+0x9c>
 10139f0:	2004943a 	slli	r2,r4,16
 10139f4:	e5c8983a 	sll	r4,fp,r23
 10139f8:	48ffffcc 	andi	r3,r9,65535
 10139fc:	10c5883a 	add	r2,r2,r3
 1013a00:	20bfc22e 	bgeu	r4,r2,101390c <__udivdi3+0x434>
 1013a04:	40bfffc4 	addi	r2,r8,-1
 1013a08:	0009883a 	mov	r4,zero
 1013a0c:	003f1306 	br	101365c <__udivdi3+0x184>
 1013a10:	01400204 	movi	r5,8
 1013a14:	2805883a 	mov	r2,r5
 1013a18:	003f0306 	br	1013628 <__udivdi3+0x150>
 1013a1c:	01400604 	movi	r5,24
 1013a20:	2805883a 	mov	r2,r5
 1013a24:	003f0006 	br	1013628 <__udivdi3+0x150>
 1013a28:	01400204 	movi	r5,8
 1013a2c:	2805883a 	mov	r2,r5
 1013a30:	003ec206 	br	101353c <__udivdi3+0x64>
 1013a34:	01400604 	movi	r5,24
 1013a38:	2805883a 	mov	r2,r5
 1013a3c:	003ebf06 	br	101353c <__udivdi3+0x64>
 1013a40:	01400204 	movi	r5,8
 1013a44:	2805883a 	mov	r2,r5
 1013a48:	003f1706 	br	10136a8 <__udivdi3+0x1d0>
 1013a4c:	01400604 	movi	r5,24
 1013a50:	2805883a 	mov	r2,r5
 1013a54:	003f1406 	br	10136a8 <__udivdi3+0x1d0>
 1013a58:	89ff962e 	bgeu	r17,r7,10138b4 <__udivdi3+0x3dc>
 1013a5c:	8d63883a 	add	r17,r17,r21
 1013a60:	843fffc4 	addi	r16,r16,-1
 1013a64:	003f9306 	br	10138b4 <__udivdi3+0x3dc>
 1013a68:	147f802e 	bgeu	r2,r17,101386c <__udivdi3+0x394>
 1013a6c:	a53fffc4 	addi	r20,r20,-1
 1013a70:	1545883a 	add	r2,r2,r21
 1013a74:	003f7d06 	br	101386c <__udivdi3+0x394>
 1013a78:	a53fffc4 	addi	r20,r20,-1
 1013a7c:	003ede06 	br	10135f8 <__udivdi3+0x120>
 1013a80:	b5bfffc4 	addi	r22,r22,-1
 1013a84:	1405883a 	add	r2,r2,r16
 1013a88:	003f2806 	br	101372c <__udivdi3+0x254>
 1013a8c:	a53fffc4 	addi	r20,r20,-1
 1013a90:	003f3706 	br	1013770 <__udivdi3+0x298>
 1013a94:	147fbb2e 	bgeu	r2,r17,1013984 <__udivdi3+0x4ac>
 1013a98:	297fffc4 	addi	r5,r5,-1
 1013a9c:	1405883a 	add	r2,r2,r16
 1013aa0:	d9400415 	stw	r5,16(sp)
 1013aa4:	003fb706 	br	1013984 <__udivdi3+0x4ac>
 1013aa8:	b5bfffc4 	addi	r22,r22,-1
 1013aac:	1405883a 	add	r2,r2,r16
 1013ab0:	003ec006 	br	10135b4 <__udivdi3+0xdc>

01013ab4 <__umoddi3>:
 1013ab4:	defff104 	addi	sp,sp,-60
 1013ab8:	dd800b15 	stw	r22,44(sp)
 1013abc:	dd000915 	stw	r20,36(sp)
 1013ac0:	dc000515 	stw	r16,20(sp)
 1013ac4:	dfc00e15 	stw	ra,56(sp)
 1013ac8:	df000d15 	stw	fp,52(sp)
 1013acc:	ddc00c15 	stw	r23,48(sp)
 1013ad0:	dd400a15 	stw	r21,40(sp)
 1013ad4:	dcc00815 	stw	r19,32(sp)
 1013ad8:	dc800715 	stw	r18,28(sp)
 1013adc:	dc400615 	stw	r17,24(sp)
 1013ae0:	3021883a 	mov	r16,r6
 1013ae4:	202d883a 	mov	r22,r4
 1013ae8:	2829883a 	mov	r20,r5
 1013aec:	38002b1e 	bne	r7,zero,1013b9c <__umoddi3+0xe8>
 1013af0:	29805036 	bltu	r5,r6,1013c34 <__umoddi3+0x180>
 1013af4:	30008a26 	beq	r6,zero,1013d20 <__umoddi3+0x26c>
 1013af8:	00bfffd4 	movui	r2,65535
 1013afc:	14008236 	bltu	r2,r16,1013d08 <__umoddi3+0x254>
 1013b00:	00803fc4 	movi	r2,255
 1013b04:	14013636 	bltu	r2,r16,1013fe0 <__umoddi3+0x52c>
 1013b08:	000b883a 	mov	r5,zero
 1013b0c:	0005883a 	mov	r2,zero
 1013b10:	8084d83a 	srl	r2,r16,r2
 1013b14:	010040b4 	movhi	r4,258
 1013b18:	212a1104 	addi	r4,r4,-22460
 1013b1c:	01800804 	movi	r6,32
 1013b20:	1105883a 	add	r2,r2,r4
 1013b24:	10c00003 	ldbu	r3,0(r2)
 1013b28:	28c7883a 	add	r3,r5,r3
 1013b2c:	30efc83a 	sub	r23,r6,r3
 1013b30:	b800941e 	bne	r23,zero,1013d84 <__umoddi3+0x2d0>
 1013b34:	802ad43a 	srli	r21,r16,16
 1013b38:	a423c83a 	sub	r17,r20,r16
 1013b3c:	0039883a 	mov	fp,zero
 1013b40:	853fffcc 	andi	r20,r16,65535
 1013b44:	8809883a 	mov	r4,r17
 1013b48:	a80b883a 	mov	r5,r21
 1013b4c:	10155300 	call	1015530 <__udivsi3>
 1013b50:	8809883a 	mov	r4,r17
 1013b54:	a80b883a 	mov	r5,r21
 1013b58:	a0a3383a 	mul	r17,r20,r2
 1013b5c:	10155380 	call	1015538 <__umodsi3>
 1013b60:	1004943a 	slli	r2,r2,16
 1013b64:	b006d43a 	srli	r3,r22,16
 1013b68:	10c4b03a 	or	r2,r2,r3
 1013b6c:	1440032e 	bgeu	r2,r17,1013b7c <__umoddi3+0xc8>
 1013b70:	1405883a 	add	r2,r2,r16
 1013b74:	14000136 	bltu	r2,r16,1013b7c <__umoddi3+0xc8>
 1013b78:	14413536 	bltu	r2,r17,1014050 <__umoddi3+0x59c>
 1013b7c:	1463c83a 	sub	r17,r2,r17
 1013b80:	8809883a 	mov	r4,r17
 1013b84:	a80b883a 	mov	r5,r21
 1013b88:	10155300 	call	1015530 <__udivsi3>
 1013b8c:	8809883a 	mov	r4,r17
 1013b90:	a0a3383a 	mul	r17,r20,r2
 1013b94:	a80b883a 	mov	r5,r21
 1013b98:	00004d06 	br	1013cd0 <__umoddi3+0x21c>
 1013b9c:	380d883a 	mov	r6,r7
 1013ba0:	29c0102e 	bgeu	r5,r7,1013be4 <__umoddi3+0x130>
 1013ba4:	2011883a 	mov	r8,r4
 1013ba8:	2813883a 	mov	r9,r5
 1013bac:	4005883a 	mov	r2,r8
 1013bb0:	4807883a 	mov	r3,r9
 1013bb4:	dfc00e17 	ldw	ra,56(sp)
 1013bb8:	df000d17 	ldw	fp,52(sp)
 1013bbc:	ddc00c17 	ldw	r23,48(sp)
 1013bc0:	dd800b17 	ldw	r22,44(sp)
 1013bc4:	dd400a17 	ldw	r21,40(sp)
 1013bc8:	dd000917 	ldw	r20,36(sp)
 1013bcc:	dcc00817 	ldw	r19,32(sp)
 1013bd0:	dc800717 	ldw	r18,28(sp)
 1013bd4:	dc400617 	ldw	r17,24(sp)
 1013bd8:	dc000517 	ldw	r16,20(sp)
 1013bdc:	dec00f04 	addi	sp,sp,60
 1013be0:	f800283a 	ret
 1013be4:	00bfffd4 	movui	r2,65535
 1013be8:	11c05a36 	bltu	r2,r7,1013d54 <__umoddi3+0x2a0>
 1013bec:	00803fc4 	movi	r2,255
 1013bf0:	11c0fe36 	bltu	r2,r7,1013fec <__umoddi3+0x538>
 1013bf4:	000b883a 	mov	r5,zero
 1013bf8:	0005883a 	mov	r2,zero
 1013bfc:	3084d83a 	srl	r2,r6,r2
 1013c00:	010040b4 	movhi	r4,258
 1013c04:	212a1104 	addi	r4,r4,-22460
 1013c08:	01c00804 	movi	r7,32
 1013c0c:	1105883a 	add	r2,r2,r4
 1013c10:	10c00003 	ldbu	r3,0(r2)
 1013c14:	28c7883a 	add	r3,r5,r3
 1013c18:	38ebc83a 	sub	r21,r7,r3
 1013c1c:	a800851e 	bne	r21,zero,1013e34 <__umoddi3+0x380>
 1013c20:	35005236 	bltu	r6,r20,1013d6c <__umoddi3+0x2b8>
 1013c24:	b400512e 	bgeu	r22,r16,1013d6c <__umoddi3+0x2b8>
 1013c28:	b011883a 	mov	r8,r22
 1013c2c:	a013883a 	mov	r9,r20
 1013c30:	003fde06 	br	1013bac <__umoddi3+0xf8>
 1013c34:	00bfffd4 	movui	r2,65535
 1013c38:	11804036 	bltu	r2,r6,1013d3c <__umoddi3+0x288>
 1013c3c:	00803fc4 	movi	r2,255
 1013c40:	1180ed36 	bltu	r2,r6,1013ff8 <__umoddi3+0x544>
 1013c44:	000b883a 	mov	r5,zero
 1013c48:	0005883a 	mov	r2,zero
 1013c4c:	8084d83a 	srl	r2,r16,r2
 1013c50:	010040b4 	movhi	r4,258
 1013c54:	212a1104 	addi	r4,r4,-22460
 1013c58:	01800804 	movi	r6,32
 1013c5c:	1105883a 	add	r2,r2,r4
 1013c60:	10c00003 	ldbu	r3,0(r2)
 1013c64:	28c7883a 	add	r3,r5,r3
 1013c68:	30c7c83a 	sub	r3,r6,r3
 1013c6c:	1800bf1e 	bne	r3,zero,1013f6c <__umoddi3+0x4b8>
 1013c70:	0039883a 	mov	fp,zero
 1013c74:	802ad43a 	srli	r21,r16,16
 1013c78:	a009883a 	mov	r4,r20
 1013c7c:	85ffffcc 	andi	r23,r16,65535
 1013c80:	a80b883a 	mov	r5,r21
 1013c84:	10155300 	call	1015530 <__udivsi3>
 1013c88:	a009883a 	mov	r4,r20
 1013c8c:	a80b883a 	mov	r5,r21
 1013c90:	b8a3383a 	mul	r17,r23,r2
 1013c94:	10155380 	call	1015538 <__umodsi3>
 1013c98:	1004943a 	slli	r2,r2,16
 1013c9c:	b006d43a 	srli	r3,r22,16
 1013ca0:	10c4b03a 	or	r2,r2,r3
 1013ca4:	1440032e 	bgeu	r2,r17,1013cb4 <__umoddi3+0x200>
 1013ca8:	1405883a 	add	r2,r2,r16
 1013cac:	14000136 	bltu	r2,r16,1013cb4 <__umoddi3+0x200>
 1013cb0:	1440e536 	bltu	r2,r17,1014048 <__umoddi3+0x594>
 1013cb4:	1463c83a 	sub	r17,r2,r17
 1013cb8:	8809883a 	mov	r4,r17
 1013cbc:	a80b883a 	mov	r5,r21
 1013cc0:	10155300 	call	1015530 <__udivsi3>
 1013cc4:	8809883a 	mov	r4,r17
 1013cc8:	b8a3383a 	mul	r17,r23,r2
 1013ccc:	a80b883a 	mov	r5,r21
 1013cd0:	10155380 	call	1015538 <__umodsi3>
 1013cd4:	1004943a 	slli	r2,r2,16
 1013cd8:	b0ffffcc 	andi	r3,r22,65535
 1013cdc:	10c4b03a 	or	r2,r2,r3
 1013ce0:	1440042e 	bgeu	r2,r17,1013cf4 <__umoddi3+0x240>
 1013ce4:	1405883a 	add	r2,r2,r16
 1013ce8:	14000236 	bltu	r2,r16,1013cf4 <__umoddi3+0x240>
 1013cec:	1440012e 	bgeu	r2,r17,1013cf4 <__umoddi3+0x240>
 1013cf0:	1405883a 	add	r2,r2,r16
 1013cf4:	1445c83a 	sub	r2,r2,r17
 1013cf8:	1724d83a 	srl	r18,r2,fp
 1013cfc:	0013883a 	mov	r9,zero
 1013d00:	9011883a 	mov	r8,r18
 1013d04:	003fa906 	br	1013bac <__umoddi3+0xf8>
 1013d08:	00804034 	movhi	r2,256
 1013d0c:	10bfffc4 	addi	r2,r2,-1
 1013d10:	1400b036 	bltu	r2,r16,1013fd4 <__umoddi3+0x520>
 1013d14:	01400404 	movi	r5,16
 1013d18:	2805883a 	mov	r2,r5
 1013d1c:	003f7c06 	br	1013b10 <__umoddi3+0x5c>
 1013d20:	01000044 	movi	r4,1
 1013d24:	000b883a 	mov	r5,zero
 1013d28:	10155300 	call	1015530 <__udivsi3>
 1013d2c:	1021883a 	mov	r16,r2
 1013d30:	00bfffd4 	movui	r2,65535
 1013d34:	143ff436 	bltu	r2,r16,1013d08 <__umoddi3+0x254>
 1013d38:	003f7106 	br	1013b00 <__umoddi3+0x4c>
 1013d3c:	00804034 	movhi	r2,256
 1013d40:	10bfffc4 	addi	r2,r2,-1
 1013d44:	1180af36 	bltu	r2,r6,1014004 <__umoddi3+0x550>
 1013d48:	01400404 	movi	r5,16
 1013d4c:	2805883a 	mov	r2,r5
 1013d50:	003fbe06 	br	1013c4c <__umoddi3+0x198>
 1013d54:	00804034 	movhi	r2,256
 1013d58:	10bfffc4 	addi	r2,r2,-1
 1013d5c:	11c0ac36 	bltu	r2,r7,1014010 <__umoddi3+0x55c>
 1013d60:	01400404 	movi	r5,16
 1013d64:	2805883a 	mov	r2,r5
 1013d68:	003fa406 	br	1013bfc <__umoddi3+0x148>
 1013d6c:	b409c83a 	sub	r4,r22,r16
 1013d70:	b105803a 	cmpltu	r2,r22,r4
 1013d74:	a187c83a 	sub	r3,r20,r6
 1013d78:	18a9c83a 	sub	r20,r3,r2
 1013d7c:	202d883a 	mov	r22,r4
 1013d80:	003fa906 	br	1013c28 <__umoddi3+0x174>
 1013d84:	85e0983a 	sll	r16,r16,r23
 1013d88:	35c5c83a 	sub	r2,r6,r23
 1013d8c:	a0a2d83a 	srl	r17,r20,r2
 1013d90:	802ad43a 	srli	r21,r16,16
 1013d94:	b084d83a 	srl	r2,r22,r2
 1013d98:	a5c6983a 	sll	r3,r20,r23
 1013d9c:	8809883a 	mov	r4,r17
 1013da0:	a80b883a 	mov	r5,r21
 1013da4:	1886b03a 	or	r3,r3,r2
 1013da8:	d8c00115 	stw	r3,4(sp)
 1013dac:	853fffcc 	andi	r20,r16,65535
 1013db0:	10155300 	call	1015530 <__udivsi3>
 1013db4:	8809883a 	mov	r4,r17
 1013db8:	a80b883a 	mov	r5,r21
 1013dbc:	a0a3383a 	mul	r17,r20,r2
 1013dc0:	10155380 	call	1015538 <__umodsi3>
 1013dc4:	d9000117 	ldw	r4,4(sp)
 1013dc8:	1004943a 	slli	r2,r2,16
 1013dcc:	b839883a 	mov	fp,r23
 1013dd0:	2006d43a 	srli	r3,r4,16
 1013dd4:	10c4b03a 	or	r2,r2,r3
 1013dd8:	1440022e 	bgeu	r2,r17,1013de4 <__umoddi3+0x330>
 1013ddc:	1405883a 	add	r2,r2,r16
 1013de0:	1400962e 	bgeu	r2,r16,101403c <__umoddi3+0x588>
 1013de4:	1463c83a 	sub	r17,r2,r17
 1013de8:	8809883a 	mov	r4,r17
 1013dec:	a80b883a 	mov	r5,r21
 1013df0:	10155300 	call	1015530 <__udivsi3>
 1013df4:	8809883a 	mov	r4,r17
 1013df8:	a80b883a 	mov	r5,r21
 1013dfc:	a0a3383a 	mul	r17,r20,r2
 1013e00:	10155380 	call	1015538 <__umodsi3>
 1013e04:	d9400117 	ldw	r5,4(sp)
 1013e08:	1004943a 	slli	r2,r2,16
 1013e0c:	28ffffcc 	andi	r3,r5,65535
 1013e10:	10c4b03a 	or	r2,r2,r3
 1013e14:	1440042e 	bgeu	r2,r17,1013e28 <__umoddi3+0x374>
 1013e18:	1405883a 	add	r2,r2,r16
 1013e1c:	14000236 	bltu	r2,r16,1013e28 <__umoddi3+0x374>
 1013e20:	1440012e 	bgeu	r2,r17,1013e28 <__umoddi3+0x374>
 1013e24:	1405883a 	add	r2,r2,r16
 1013e28:	b5ec983a 	sll	r22,r22,r23
 1013e2c:	1463c83a 	sub	r17,r2,r17
 1013e30:	003f4406 	br	1013b44 <__umoddi3+0x90>
 1013e34:	3d4fc83a 	sub	r7,r7,r21
 1013e38:	3546983a 	sll	r3,r6,r21
 1013e3c:	81c4d83a 	srl	r2,r16,r7
 1013e40:	a1e2d83a 	srl	r17,r20,r7
 1013e44:	a54c983a 	sll	r6,r20,r21
 1013e48:	18aeb03a 	or	r23,r3,r2
 1013e4c:	b828d43a 	srli	r20,r23,16
 1013e50:	b1c4d83a 	srl	r2,r22,r7
 1013e54:	8809883a 	mov	r4,r17
 1013e58:	a00b883a 	mov	r5,r20
 1013e5c:	308cb03a 	or	r6,r6,r2
 1013e60:	d9c00315 	stw	r7,12(sp)
 1013e64:	d9800215 	stw	r6,8(sp)
 1013e68:	10155300 	call	1015530 <__udivsi3>
 1013e6c:	8809883a 	mov	r4,r17
 1013e70:	a00b883a 	mov	r5,r20
 1013e74:	1039883a 	mov	fp,r2
 1013e78:	10155380 	call	1015538 <__umodsi3>
 1013e7c:	b8ffffcc 	andi	r3,r23,65535
 1013e80:	d8c00415 	stw	r3,16(sp)
 1013e84:	d9000217 	ldw	r4,8(sp)
 1013e88:	d9400417 	ldw	r5,16(sp)
 1013e8c:	1004943a 	slli	r2,r2,16
 1013e90:	2006d43a 	srli	r3,r4,16
 1013e94:	8560983a 	sll	r16,r16,r21
 1013e98:	2f23383a 	mul	r17,r5,fp
 1013e9c:	10c4b03a 	or	r2,r2,r3
 1013ea0:	dc000015 	stw	r16,0(sp)
 1013ea4:	b56c983a 	sll	r22,r22,r21
 1013ea8:	1440032e 	bgeu	r2,r17,1013eb8 <__umoddi3+0x404>
 1013eac:	15c5883a 	add	r2,r2,r23
 1013eb0:	e73fffc4 	addi	fp,fp,-1
 1013eb4:	15c05d2e 	bgeu	r2,r23,101402c <__umoddi3+0x578>
 1013eb8:	1463c83a 	sub	r17,r2,r17
 1013ebc:	8809883a 	mov	r4,r17
 1013ec0:	a00b883a 	mov	r5,r20
 1013ec4:	10155300 	call	1015530 <__udivsi3>
 1013ec8:	8809883a 	mov	r4,r17
 1013ecc:	a00b883a 	mov	r5,r20
 1013ed0:	1021883a 	mov	r16,r2
 1013ed4:	10155380 	call	1015538 <__umodsi3>
 1013ed8:	d8c00417 	ldw	r3,16(sp)
 1013edc:	d9000217 	ldw	r4,8(sp)
 1013ee0:	1004943a 	slli	r2,r2,16
 1013ee4:	1c23383a 	mul	r17,r3,r16
 1013ee8:	20ffffcc 	andi	r3,r4,65535
 1013eec:	10ceb03a 	or	r7,r2,r3
 1013ef0:	3c40032e 	bgeu	r7,r17,1013f00 <__umoddi3+0x44c>
 1013ef4:	3dcf883a 	add	r7,r7,r23
 1013ef8:	843fffc4 	addi	r16,r16,-1
 1013efc:	3dc0472e 	bgeu	r7,r23,101401c <__umoddi3+0x568>
 1013f00:	e004943a 	slli	r2,fp,16
 1013f04:	d9400017 	ldw	r5,0(sp)
 1013f08:	3c4fc83a 	sub	r7,r7,r17
 1013f0c:	8084b03a 	or	r2,r16,r2
 1013f10:	28ffffcc 	andi	r3,r5,65535
 1013f14:	280cd43a 	srli	r6,r5,16
 1013f18:	100ad43a 	srli	r5,r2,16
 1013f1c:	10bfffcc 	andi	r2,r2,65535
 1013f20:	10d1383a 	mul	r8,r2,r3
 1013f24:	28c7383a 	mul	r3,r5,r3
 1013f28:	1185383a 	mul	r2,r2,r6
 1013f2c:	4008d43a 	srli	r4,r8,16
 1013f30:	298b383a 	mul	r5,r5,r6
 1013f34:	10c5883a 	add	r2,r2,r3
 1013f38:	2089883a 	add	r4,r4,r2
 1013f3c:	20c0022e 	bgeu	r4,r3,1013f48 <__umoddi3+0x494>
 1013f40:	00800074 	movhi	r2,1
 1013f44:	288b883a 	add	r5,r5,r2
 1013f48:	2004d43a 	srli	r2,r4,16
 1013f4c:	2008943a 	slli	r4,r4,16
 1013f50:	40ffffcc 	andi	r3,r8,65535
 1013f54:	288b883a 	add	r5,r5,r2
 1013f58:	20c9883a 	add	r4,r4,r3
 1013f5c:	39400b36 	bltu	r7,r5,1013f8c <__umoddi3+0x4d8>
 1013f60:	39403d26 	beq	r7,r5,1014058 <__umoddi3+0x5a4>
 1013f64:	394bc83a 	sub	r5,r7,r5
 1013f68:	00000f06 	br	1013fa8 <__umoddi3+0x4f4>
 1013f6c:	30c5c83a 	sub	r2,r6,r3
 1013f70:	1839883a 	mov	fp,r3
 1013f74:	b084d83a 	srl	r2,r22,r2
 1013f78:	a0c6983a 	sll	r3,r20,r3
 1013f7c:	8720983a 	sll	r16,r16,fp
 1013f80:	b72c983a 	sll	r22,r22,fp
 1013f84:	18a8b03a 	or	r20,r3,r2
 1013f88:	003f3a06 	br	1013c74 <__umoddi3+0x1c0>
 1013f8c:	d8c00017 	ldw	r3,0(sp)
 1013f90:	20c5c83a 	sub	r2,r4,r3
 1013f94:	2089803a 	cmpltu	r4,r4,r2
 1013f98:	2dc7c83a 	sub	r3,r5,r23
 1013f9c:	1907c83a 	sub	r3,r3,r4
 1013fa0:	38cbc83a 	sub	r5,r7,r3
 1013fa4:	1009883a 	mov	r4,r2
 1013fa8:	b105c83a 	sub	r2,r22,r4
 1013fac:	b087803a 	cmpltu	r3,r22,r2
 1013fb0:	28c7c83a 	sub	r3,r5,r3
 1013fb4:	d9400317 	ldw	r5,12(sp)
 1013fb8:	1544d83a 	srl	r2,r2,r21
 1013fbc:	1948983a 	sll	r4,r3,r5
 1013fc0:	1d46d83a 	srl	r3,r3,r21
 1013fc4:	20a4b03a 	or	r18,r4,r2
 1013fc8:	9011883a 	mov	r8,r18
 1013fcc:	1813883a 	mov	r9,r3
 1013fd0:	003ef606 	br	1013bac <__umoddi3+0xf8>
 1013fd4:	01400604 	movi	r5,24
 1013fd8:	2805883a 	mov	r2,r5
 1013fdc:	003ecc06 	br	1013b10 <__umoddi3+0x5c>
 1013fe0:	01400204 	movi	r5,8
 1013fe4:	2805883a 	mov	r2,r5
 1013fe8:	003ec906 	br	1013b10 <__umoddi3+0x5c>
 1013fec:	01400204 	movi	r5,8
 1013ff0:	2805883a 	mov	r2,r5
 1013ff4:	003f0106 	br	1013bfc <__umoddi3+0x148>
 1013ff8:	01400204 	movi	r5,8
 1013ffc:	2805883a 	mov	r2,r5
 1014000:	003f1206 	br	1013c4c <__umoddi3+0x198>
 1014004:	01400604 	movi	r5,24
 1014008:	2805883a 	mov	r2,r5
 101400c:	003f0f06 	br	1013c4c <__umoddi3+0x198>
 1014010:	01400604 	movi	r5,24
 1014014:	2805883a 	mov	r2,r5
 1014018:	003ef806 	br	1013bfc <__umoddi3+0x148>
 101401c:	3c7fb82e 	bgeu	r7,r17,1013f00 <__umoddi3+0x44c>
 1014020:	843fffc4 	addi	r16,r16,-1
 1014024:	3dcf883a 	add	r7,r7,r23
 1014028:	003fb506 	br	1013f00 <__umoddi3+0x44c>
 101402c:	147fa22e 	bgeu	r2,r17,1013eb8 <__umoddi3+0x404>
 1014030:	e73fffc4 	addi	fp,fp,-1
 1014034:	15c5883a 	add	r2,r2,r23
 1014038:	003f9f06 	br	1013eb8 <__umoddi3+0x404>
 101403c:	147f692e 	bgeu	r2,r17,1013de4 <__umoddi3+0x330>
 1014040:	1405883a 	add	r2,r2,r16
 1014044:	003f6706 	br	1013de4 <__umoddi3+0x330>
 1014048:	1405883a 	add	r2,r2,r16
 101404c:	003f1906 	br	1013cb4 <__umoddi3+0x200>
 1014050:	1405883a 	add	r2,r2,r16
 1014054:	003ec906 	br	1013b7c <__umoddi3+0xc8>
 1014058:	b13fcc36 	bltu	r22,r4,1013f8c <__umoddi3+0x4d8>
 101405c:	000b883a 	mov	r5,zero
 1014060:	003fd106 	br	1013fa8 <__umoddi3+0x4f4>

01014064 <__nesf2>:
 1014064:	defff304 	addi	sp,sp,-52
 1014068:	dc400b15 	stw	r17,44(sp)
 101406c:	dc400204 	addi	r17,sp,8
 1014070:	dc000a15 	stw	r16,40(sp)
 1014074:	d9000015 	stw	r4,0(sp)
 1014078:	d9400115 	stw	r5,4(sp)
 101407c:	d809883a 	mov	r4,sp
 1014080:	880b883a 	mov	r5,r17
 1014084:	dc000604 	addi	r16,sp,24
 1014088:	dfc00c15 	stw	ra,48(sp)
 101408c:	10155c00 	call	10155c0 <__unpack_f>
 1014090:	d9000104 	addi	r4,sp,4
 1014094:	800b883a 	mov	r5,r16
 1014098:	10155c00 	call	10155c0 <__unpack_f>
 101409c:	d8800217 	ldw	r2,8(sp)
 10140a0:	00c00044 	movi	r3,1
 10140a4:	180d883a 	mov	r6,r3
 10140a8:	1880062e 	bgeu	r3,r2,10140c4 <__nesf2+0x60>
 10140ac:	d8800617 	ldw	r2,24(sp)
 10140b0:	8809883a 	mov	r4,r17
 10140b4:	800b883a 	mov	r5,r16
 10140b8:	1880022e 	bgeu	r3,r2,10140c4 <__nesf2+0x60>
 10140bc:	10156880 	call	1015688 <__fpcmp_parts_f>
 10140c0:	100d883a 	mov	r6,r2
 10140c4:	3005883a 	mov	r2,r6
 10140c8:	dfc00c17 	ldw	ra,48(sp)
 10140cc:	dc400b17 	ldw	r17,44(sp)
 10140d0:	dc000a17 	ldw	r16,40(sp)
 10140d4:	dec00d04 	addi	sp,sp,52
 10140d8:	f800283a 	ret

010140dc <__gtsf2>:
 10140dc:	defff304 	addi	sp,sp,-52
 10140e0:	dc400b15 	stw	r17,44(sp)
 10140e4:	dc400204 	addi	r17,sp,8
 10140e8:	dc000a15 	stw	r16,40(sp)
 10140ec:	d9000015 	stw	r4,0(sp)
 10140f0:	d9400115 	stw	r5,4(sp)
 10140f4:	d809883a 	mov	r4,sp
 10140f8:	880b883a 	mov	r5,r17
 10140fc:	dc000604 	addi	r16,sp,24
 1014100:	dfc00c15 	stw	ra,48(sp)
 1014104:	10155c00 	call	10155c0 <__unpack_f>
 1014108:	d9000104 	addi	r4,sp,4
 101410c:	800b883a 	mov	r5,r16
 1014110:	10155c00 	call	10155c0 <__unpack_f>
 1014114:	d8800217 	ldw	r2,8(sp)
 1014118:	00c00044 	movi	r3,1
 101411c:	01bfffc4 	movi	r6,-1
 1014120:	1880062e 	bgeu	r3,r2,101413c <__gtsf2+0x60>
 1014124:	d8800617 	ldw	r2,24(sp)
 1014128:	8809883a 	mov	r4,r17
 101412c:	800b883a 	mov	r5,r16
 1014130:	1880022e 	bgeu	r3,r2,101413c <__gtsf2+0x60>
 1014134:	10156880 	call	1015688 <__fpcmp_parts_f>
 1014138:	100d883a 	mov	r6,r2
 101413c:	3005883a 	mov	r2,r6
 1014140:	dfc00c17 	ldw	ra,48(sp)
 1014144:	dc400b17 	ldw	r17,44(sp)
 1014148:	dc000a17 	ldw	r16,40(sp)
 101414c:	dec00d04 	addi	sp,sp,52
 1014150:	f800283a 	ret

01014154 <__ltsf2>:
 1014154:	defff304 	addi	sp,sp,-52
 1014158:	dc400b15 	stw	r17,44(sp)
 101415c:	dc400204 	addi	r17,sp,8
 1014160:	dc000a15 	stw	r16,40(sp)
 1014164:	d9000015 	stw	r4,0(sp)
 1014168:	d9400115 	stw	r5,4(sp)
 101416c:	d809883a 	mov	r4,sp
 1014170:	880b883a 	mov	r5,r17
 1014174:	dc000604 	addi	r16,sp,24
 1014178:	dfc00c15 	stw	ra,48(sp)
 101417c:	10155c00 	call	10155c0 <__unpack_f>
 1014180:	d9000104 	addi	r4,sp,4
 1014184:	800b883a 	mov	r5,r16
 1014188:	10155c00 	call	10155c0 <__unpack_f>
 101418c:	d8800217 	ldw	r2,8(sp)
 1014190:	00c00044 	movi	r3,1
 1014194:	180d883a 	mov	r6,r3
 1014198:	1880062e 	bgeu	r3,r2,10141b4 <__ltsf2+0x60>
 101419c:	d8800617 	ldw	r2,24(sp)
 10141a0:	8809883a 	mov	r4,r17
 10141a4:	800b883a 	mov	r5,r16
 10141a8:	1880022e 	bgeu	r3,r2,10141b4 <__ltsf2+0x60>
 10141ac:	10156880 	call	1015688 <__fpcmp_parts_f>
 10141b0:	100d883a 	mov	r6,r2
 10141b4:	3005883a 	mov	r2,r6
 10141b8:	dfc00c17 	ldw	ra,48(sp)
 10141bc:	dc400b17 	ldw	r17,44(sp)
 10141c0:	dc000a17 	ldw	r16,40(sp)
 10141c4:	dec00d04 	addi	sp,sp,52
 10141c8:	f800283a 	ret

010141cc <_fpadd_parts>:
 10141cc:	defff804 	addi	sp,sp,-32
 10141d0:	dcc00315 	stw	r19,12(sp)
 10141d4:	2027883a 	mov	r19,r4
 10141d8:	21000017 	ldw	r4,0(r4)
 10141dc:	00c00044 	movi	r3,1
 10141e0:	dd400515 	stw	r21,20(sp)
 10141e4:	dd000415 	stw	r20,16(sp)
 10141e8:	ddc00715 	stw	r23,28(sp)
 10141ec:	dd800615 	stw	r22,24(sp)
 10141f0:	dc800215 	stw	r18,8(sp)
 10141f4:	dc400115 	stw	r17,4(sp)
 10141f8:	dc000015 	stw	r16,0(sp)
 10141fc:	282b883a 	mov	r21,r5
 1014200:	3029883a 	mov	r20,r6
 1014204:	1900632e 	bgeu	r3,r4,1014394 <_fpadd_parts+0x1c8>
 1014208:	28800017 	ldw	r2,0(r5)
 101420c:	1880812e 	bgeu	r3,r2,1014414 <_fpadd_parts+0x248>
 1014210:	00c00104 	movi	r3,4
 1014214:	20c0dc26 	beq	r4,r3,1014588 <_fpadd_parts+0x3bc>
 1014218:	10c07e26 	beq	r2,r3,1014414 <_fpadd_parts+0x248>
 101421c:	00c00084 	movi	r3,2
 1014220:	10c06726 	beq	r2,r3,10143c0 <_fpadd_parts+0x1f4>
 1014224:	20c07b26 	beq	r4,r3,1014414 <_fpadd_parts+0x248>
 1014228:	9dc00217 	ldw	r23,8(r19)
 101422c:	28c00217 	ldw	r3,8(r5)
 1014230:	9c400317 	ldw	r17,12(r19)
 1014234:	2bc00317 	ldw	r15,12(r5)
 1014238:	b8cdc83a 	sub	r6,r23,r3
 101423c:	9c800417 	ldw	r18,16(r19)
 1014240:	2c000417 	ldw	r16,16(r5)
 1014244:	3009883a 	mov	r4,r6
 1014248:	30009716 	blt	r6,zero,10144a8 <_fpadd_parts+0x2dc>
 101424c:	00800fc4 	movi	r2,63
 1014250:	11806b16 	blt	r2,r6,1014400 <_fpadd_parts+0x234>
 1014254:	0100a40e 	bge	zero,r4,10144e8 <_fpadd_parts+0x31c>
 1014258:	35bff804 	addi	r22,r6,-32
 101425c:	b000bc16 	blt	r22,zero,1014550 <_fpadd_parts+0x384>
 1014260:	8596d83a 	srl	r11,r16,r22
 1014264:	0019883a 	mov	r12,zero
 1014268:	0013883a 	mov	r9,zero
 101426c:	01000044 	movi	r4,1
 1014270:	0015883a 	mov	r10,zero
 1014274:	b000be16 	blt	r22,zero,1014570 <_fpadd_parts+0x3a4>
 1014278:	2590983a 	sll	r8,r4,r22
 101427c:	000f883a 	mov	r7,zero
 1014280:	00bfffc4 	movi	r2,-1
 1014284:	3889883a 	add	r4,r7,r2
 1014288:	408b883a 	add	r5,r8,r2
 101428c:	21cd803a 	cmpltu	r6,r4,r7
 1014290:	314b883a 	add	r5,r6,r5
 1014294:	7904703a 	and	r2,r15,r4
 1014298:	8146703a 	and	r3,r16,r5
 101429c:	10c4b03a 	or	r2,r2,r3
 10142a0:	10000226 	beq	r2,zero,10142ac <_fpadd_parts+0xe0>
 10142a4:	02400044 	movi	r9,1
 10142a8:	0015883a 	mov	r10,zero
 10142ac:	5a5eb03a 	or	r15,r11,r9
 10142b0:	62a0b03a 	or	r16,r12,r10
 10142b4:	99400117 	ldw	r5,4(r19)
 10142b8:	a8800117 	ldw	r2,4(r21)
 10142bc:	28806e26 	beq	r5,r2,1014478 <_fpadd_parts+0x2ac>
 10142c0:	28006626 	beq	r5,zero,101445c <_fpadd_parts+0x290>
 10142c4:	7c45c83a 	sub	r2,r15,r17
 10142c8:	7889803a 	cmpltu	r4,r15,r2
 10142cc:	8487c83a 	sub	r3,r16,r18
 10142d0:	1909c83a 	sub	r4,r3,r4
 10142d4:	100d883a 	mov	r6,r2
 10142d8:	200f883a 	mov	r7,r4
 10142dc:	38007716 	blt	r7,zero,10144bc <_fpadd_parts+0x2f0>
 10142e0:	a5c00215 	stw	r23,8(r20)
 10142e4:	a1c00415 	stw	r7,16(r20)
 10142e8:	a0000115 	stw	zero,4(r20)
 10142ec:	a1800315 	stw	r6,12(r20)
 10142f0:	a2000317 	ldw	r8,12(r20)
 10142f4:	a2400417 	ldw	r9,16(r20)
 10142f8:	00bfffc4 	movi	r2,-1
 10142fc:	408b883a 	add	r5,r8,r2
 1014300:	2a09803a 	cmpltu	r4,r5,r8
 1014304:	488d883a 	add	r6,r9,r2
 1014308:	01c40034 	movhi	r7,4096
 101430c:	39ffffc4 	addi	r7,r7,-1
 1014310:	218d883a 	add	r6,r4,r6
 1014314:	39801736 	bltu	r7,r6,1014374 <_fpadd_parts+0x1a8>
 1014318:	31c06526 	beq	r6,r7,10144b0 <_fpadd_parts+0x2e4>
 101431c:	a3000217 	ldw	r12,8(r20)
 1014320:	4209883a 	add	r4,r8,r8
 1014324:	00bfffc4 	movi	r2,-1
 1014328:	220f803a 	cmpltu	r7,r4,r8
 101432c:	4a4b883a 	add	r5,r9,r9
 1014330:	394f883a 	add	r7,r7,r5
 1014334:	2095883a 	add	r10,r4,r2
 1014338:	3897883a 	add	r11,r7,r2
 101433c:	510d803a 	cmpltu	r6,r10,r4
 1014340:	6099883a 	add	r12,r12,r2
 1014344:	32d7883a 	add	r11,r6,r11
 1014348:	00840034 	movhi	r2,4096
 101434c:	10bfffc4 	addi	r2,r2,-1
 1014350:	2011883a 	mov	r8,r4
 1014354:	3813883a 	mov	r9,r7
 1014358:	a1000315 	stw	r4,12(r20)
 101435c:	a1c00415 	stw	r7,16(r20)
 1014360:	a3000215 	stw	r12,8(r20)
 1014364:	12c00336 	bltu	r2,r11,1014374 <_fpadd_parts+0x1a8>
 1014368:	58bfed1e 	bne	r11,r2,1014320 <_fpadd_parts+0x154>
 101436c:	00bfff84 	movi	r2,-2
 1014370:	12bfeb2e 	bgeu	r2,r10,1014320 <_fpadd_parts+0x154>
 1014374:	a2800417 	ldw	r10,16(r20)
 1014378:	008000c4 	movi	r2,3
 101437c:	00c80034 	movhi	r3,8192
 1014380:	18ffffc4 	addi	r3,r3,-1
 1014384:	a2400317 	ldw	r9,12(r20)
 1014388:	a0800015 	stw	r2,0(r20)
 101438c:	1a802336 	bltu	r3,r10,101441c <_fpadd_parts+0x250>
 1014390:	a027883a 	mov	r19,r20
 1014394:	9805883a 	mov	r2,r19
 1014398:	ddc00717 	ldw	r23,28(sp)
 101439c:	dd800617 	ldw	r22,24(sp)
 10143a0:	dd400517 	ldw	r21,20(sp)
 10143a4:	dd000417 	ldw	r20,16(sp)
 10143a8:	dcc00317 	ldw	r19,12(sp)
 10143ac:	dc800217 	ldw	r18,8(sp)
 10143b0:	dc400117 	ldw	r17,4(sp)
 10143b4:	dc000017 	ldw	r16,0(sp)
 10143b8:	dec00804 	addi	sp,sp,32
 10143bc:	f800283a 	ret
 10143c0:	20fff41e 	bne	r4,r3,1014394 <_fpadd_parts+0x1c8>
 10143c4:	31000015 	stw	r4,0(r6)
 10143c8:	98800117 	ldw	r2,4(r19)
 10143cc:	30800115 	stw	r2,4(r6)
 10143d0:	98c00217 	ldw	r3,8(r19)
 10143d4:	30c00215 	stw	r3,8(r6)
 10143d8:	98800317 	ldw	r2,12(r19)
 10143dc:	30800315 	stw	r2,12(r6)
 10143e0:	98c00417 	ldw	r3,16(r19)
 10143e4:	30c00415 	stw	r3,16(r6)
 10143e8:	98800117 	ldw	r2,4(r19)
 10143ec:	28c00117 	ldw	r3,4(r5)
 10143f0:	3027883a 	mov	r19,r6
 10143f4:	10c4703a 	and	r2,r2,r3
 10143f8:	30800115 	stw	r2,4(r6)
 10143fc:	003fe506 	br	1014394 <_fpadd_parts+0x1c8>
 1014400:	1dc02616 	blt	r3,r23,101449c <_fpadd_parts+0x2d0>
 1014404:	0023883a 	mov	r17,zero
 1014408:	182f883a 	mov	r23,r3
 101440c:	0025883a 	mov	r18,zero
 1014410:	003fa806 	br	10142b4 <_fpadd_parts+0xe8>
 1014414:	a827883a 	mov	r19,r21
 1014418:	003fde06 	br	1014394 <_fpadd_parts+0x1c8>
 101441c:	01800044 	movi	r6,1
 1014420:	500497fa 	slli	r2,r10,31
 1014424:	4808d07a 	srli	r4,r9,1
 1014428:	518ad83a 	srl	r5,r10,r6
 101442c:	a2000217 	ldw	r8,8(r20)
 1014430:	1108b03a 	or	r4,r2,r4
 1014434:	0007883a 	mov	r3,zero
 1014438:	4984703a 	and	r2,r9,r6
 101443c:	208cb03a 	or	r6,r4,r2
 1014440:	28ceb03a 	or	r7,r5,r3
 1014444:	42000044 	addi	r8,r8,1
 1014448:	a027883a 	mov	r19,r20
 101444c:	a1c00415 	stw	r7,16(r20)
 1014450:	a2000215 	stw	r8,8(r20)
 1014454:	a1800315 	stw	r6,12(r20)
 1014458:	003fce06 	br	1014394 <_fpadd_parts+0x1c8>
 101445c:	8bc5c83a 	sub	r2,r17,r15
 1014460:	8889803a 	cmpltu	r4,r17,r2
 1014464:	9407c83a 	sub	r3,r18,r16
 1014468:	1909c83a 	sub	r4,r3,r4
 101446c:	100d883a 	mov	r6,r2
 1014470:	200f883a 	mov	r7,r4
 1014474:	003f9906 	br	10142dc <_fpadd_parts+0x110>
 1014478:	7c45883a 	add	r2,r15,r17
 101447c:	13c9803a 	cmpltu	r4,r2,r15
 1014480:	8487883a 	add	r3,r16,r18
 1014484:	20c9883a 	add	r4,r4,r3
 1014488:	a1400115 	stw	r5,4(r20)
 101448c:	a5c00215 	stw	r23,8(r20)
 1014490:	a0800315 	stw	r2,12(r20)
 1014494:	a1000415 	stw	r4,16(r20)
 1014498:	003fb606 	br	1014374 <_fpadd_parts+0x1a8>
 101449c:	001f883a 	mov	r15,zero
 10144a0:	0021883a 	mov	r16,zero
 10144a4:	003f8306 	br	10142b4 <_fpadd_parts+0xe8>
 10144a8:	018dc83a 	sub	r6,zero,r6
 10144ac:	003f6706 	br	101424c <_fpadd_parts+0x80>
 10144b0:	00bfff84 	movi	r2,-2
 10144b4:	117faf36 	bltu	r2,r5,1014374 <_fpadd_parts+0x1a8>
 10144b8:	003f9806 	br	101431c <_fpadd_parts+0x150>
 10144bc:	0005883a 	mov	r2,zero
 10144c0:	1189c83a 	sub	r4,r2,r6
 10144c4:	1105803a 	cmpltu	r2,r2,r4
 10144c8:	01cbc83a 	sub	r5,zero,r7
 10144cc:	2885c83a 	sub	r2,r5,r2
 10144d0:	01800044 	movi	r6,1
 10144d4:	a1800115 	stw	r6,4(r20)
 10144d8:	a5c00215 	stw	r23,8(r20)
 10144dc:	a1000315 	stw	r4,12(r20)
 10144e0:	a0800415 	stw	r2,16(r20)
 10144e4:	003f8206 	br	10142f0 <_fpadd_parts+0x124>
 10144e8:	203f7226 	beq	r4,zero,10142b4 <_fpadd_parts+0xe8>
 10144ec:	35bff804 	addi	r22,r6,-32
 10144f0:	b9af883a 	add	r23,r23,r6
 10144f4:	b0003116 	blt	r22,zero,10145bc <_fpadd_parts+0x3f0>
 10144f8:	959ad83a 	srl	r13,r18,r22
 10144fc:	001d883a 	mov	r14,zero
 1014500:	000f883a 	mov	r7,zero
 1014504:	01000044 	movi	r4,1
 1014508:	0011883a 	mov	r8,zero
 101450c:	b0002516 	blt	r22,zero,10145a4 <_fpadd_parts+0x3d8>
 1014510:	2594983a 	sll	r10,r4,r22
 1014514:	0013883a 	mov	r9,zero
 1014518:	00bfffc4 	movi	r2,-1
 101451c:	4889883a 	add	r4,r9,r2
 1014520:	508b883a 	add	r5,r10,r2
 1014524:	224d803a 	cmpltu	r6,r4,r9
 1014528:	314b883a 	add	r5,r6,r5
 101452c:	8904703a 	and	r2,r17,r4
 1014530:	9146703a 	and	r3,r18,r5
 1014534:	10c4b03a 	or	r2,r2,r3
 1014538:	10000226 	beq	r2,zero,1014544 <_fpadd_parts+0x378>
 101453c:	01c00044 	movi	r7,1
 1014540:	0011883a 	mov	r8,zero
 1014544:	69e2b03a 	or	r17,r13,r7
 1014548:	7224b03a 	or	r18,r14,r8
 101454c:	003f5906 	br	10142b4 <_fpadd_parts+0xe8>
 1014550:	8407883a 	add	r3,r16,r16
 1014554:	008007c4 	movi	r2,31
 1014558:	1185c83a 	sub	r2,r2,r6
 101455c:	1886983a 	sll	r3,r3,r2
 1014560:	7996d83a 	srl	r11,r15,r6
 1014564:	8198d83a 	srl	r12,r16,r6
 1014568:	1ad6b03a 	or	r11,r3,r11
 101456c:	003f3e06 	br	1014268 <_fpadd_parts+0x9c>
 1014570:	2006d07a 	srli	r3,r4,1
 1014574:	008007c4 	movi	r2,31
 1014578:	1185c83a 	sub	r2,r2,r6
 101457c:	1890d83a 	srl	r8,r3,r2
 1014580:	218e983a 	sll	r7,r4,r6
 1014584:	003f3e06 	br	1014280 <_fpadd_parts+0xb4>
 1014588:	113f821e 	bne	r2,r4,1014394 <_fpadd_parts+0x1c8>
 101458c:	28c00117 	ldw	r3,4(r5)
 1014590:	98800117 	ldw	r2,4(r19)
 1014594:	10ff7f26 	beq	r2,r3,1014394 <_fpadd_parts+0x1c8>
 1014598:	04c040b4 	movhi	r19,258
 101459c:	9cea0c04 	addi	r19,r19,-22480
 10145a0:	003f7c06 	br	1014394 <_fpadd_parts+0x1c8>
 10145a4:	2006d07a 	srli	r3,r4,1
 10145a8:	008007c4 	movi	r2,31
 10145ac:	1185c83a 	sub	r2,r2,r6
 10145b0:	1894d83a 	srl	r10,r3,r2
 10145b4:	2192983a 	sll	r9,r4,r6
 10145b8:	003fd706 	br	1014518 <_fpadd_parts+0x34c>
 10145bc:	9487883a 	add	r3,r18,r18
 10145c0:	008007c4 	movi	r2,31
 10145c4:	1185c83a 	sub	r2,r2,r6
 10145c8:	1886983a 	sll	r3,r3,r2
 10145cc:	899ad83a 	srl	r13,r17,r6
 10145d0:	919cd83a 	srl	r14,r18,r6
 10145d4:	1b5ab03a 	or	r13,r3,r13
 10145d8:	003fc906 	br	1014500 <_fpadd_parts+0x334>

010145dc <__subdf3>:
 10145dc:	deffea04 	addi	sp,sp,-88
 10145e0:	dcc01415 	stw	r19,80(sp)
 10145e4:	dcc00404 	addi	r19,sp,16
 10145e8:	2011883a 	mov	r8,r4
 10145ec:	2813883a 	mov	r9,r5
 10145f0:	dc401315 	stw	r17,76(sp)
 10145f4:	d809883a 	mov	r4,sp
 10145f8:	980b883a 	mov	r5,r19
 10145fc:	dc400904 	addi	r17,sp,36
 1014600:	dfc01515 	stw	ra,84(sp)
 1014604:	da400115 	stw	r9,4(sp)
 1014608:	d9c00315 	stw	r7,12(sp)
 101460c:	da000015 	stw	r8,0(sp)
 1014610:	d9800215 	stw	r6,8(sp)
 1014614:	1015a700 	call	1015a70 <__unpack_d>
 1014618:	d9000204 	addi	r4,sp,8
 101461c:	880b883a 	mov	r5,r17
 1014620:	1015a700 	call	1015a70 <__unpack_d>
 1014624:	d8800a17 	ldw	r2,40(sp)
 1014628:	880b883a 	mov	r5,r17
 101462c:	9809883a 	mov	r4,r19
 1014630:	d9800e04 	addi	r6,sp,56
 1014634:	1080005c 	xori	r2,r2,1
 1014638:	d8800a15 	stw	r2,40(sp)
 101463c:	10141cc0 	call	10141cc <_fpadd_parts>
 1014640:	1009883a 	mov	r4,r2
 1014644:	101575c0 	call	101575c <__pack_d>
 1014648:	dfc01517 	ldw	ra,84(sp)
 101464c:	dcc01417 	ldw	r19,80(sp)
 1014650:	dc401317 	ldw	r17,76(sp)
 1014654:	dec01604 	addi	sp,sp,88
 1014658:	f800283a 	ret

0101465c <__adddf3>:
 101465c:	deffea04 	addi	sp,sp,-88
 1014660:	dcc01415 	stw	r19,80(sp)
 1014664:	dcc00404 	addi	r19,sp,16
 1014668:	2011883a 	mov	r8,r4
 101466c:	2813883a 	mov	r9,r5
 1014670:	dc401315 	stw	r17,76(sp)
 1014674:	d809883a 	mov	r4,sp
 1014678:	980b883a 	mov	r5,r19
 101467c:	dc400904 	addi	r17,sp,36
 1014680:	dfc01515 	stw	ra,84(sp)
 1014684:	da400115 	stw	r9,4(sp)
 1014688:	d9c00315 	stw	r7,12(sp)
 101468c:	da000015 	stw	r8,0(sp)
 1014690:	d9800215 	stw	r6,8(sp)
 1014694:	1015a700 	call	1015a70 <__unpack_d>
 1014698:	d9000204 	addi	r4,sp,8
 101469c:	880b883a 	mov	r5,r17
 10146a0:	1015a700 	call	1015a70 <__unpack_d>
 10146a4:	d9800e04 	addi	r6,sp,56
 10146a8:	9809883a 	mov	r4,r19
 10146ac:	880b883a 	mov	r5,r17
 10146b0:	10141cc0 	call	10141cc <_fpadd_parts>
 10146b4:	1009883a 	mov	r4,r2
 10146b8:	101575c0 	call	101575c <__pack_d>
 10146bc:	dfc01517 	ldw	ra,84(sp)
 10146c0:	dcc01417 	ldw	r19,80(sp)
 10146c4:	dc401317 	ldw	r17,76(sp)
 10146c8:	dec01604 	addi	sp,sp,88
 10146cc:	f800283a 	ret

010146d0 <__muldf3>:
 10146d0:	deffe004 	addi	sp,sp,-128
 10146d4:	dc401815 	stw	r17,96(sp)
 10146d8:	dc400404 	addi	r17,sp,16
 10146dc:	2011883a 	mov	r8,r4
 10146e0:	2813883a 	mov	r9,r5
 10146e4:	dc001715 	stw	r16,92(sp)
 10146e8:	d809883a 	mov	r4,sp
 10146ec:	880b883a 	mov	r5,r17
 10146f0:	dc000904 	addi	r16,sp,36
 10146f4:	dfc01f15 	stw	ra,124(sp)
 10146f8:	da400115 	stw	r9,4(sp)
 10146fc:	d9c00315 	stw	r7,12(sp)
 1014700:	da000015 	stw	r8,0(sp)
 1014704:	d9800215 	stw	r6,8(sp)
 1014708:	ddc01e15 	stw	r23,120(sp)
 101470c:	dd801d15 	stw	r22,116(sp)
 1014710:	dd401c15 	stw	r21,112(sp)
 1014714:	dd001b15 	stw	r20,108(sp)
 1014718:	dcc01a15 	stw	r19,104(sp)
 101471c:	dc801915 	stw	r18,100(sp)
 1014720:	1015a700 	call	1015a70 <__unpack_d>
 1014724:	d9000204 	addi	r4,sp,8
 1014728:	800b883a 	mov	r5,r16
 101472c:	1015a700 	call	1015a70 <__unpack_d>
 1014730:	d9000417 	ldw	r4,16(sp)
 1014734:	00800044 	movi	r2,1
 1014738:	1100102e 	bgeu	r2,r4,101477c <__muldf3+0xac>
 101473c:	d8c00917 	ldw	r3,36(sp)
 1014740:	10c0062e 	bgeu	r2,r3,101475c <__muldf3+0x8c>
 1014744:	00800104 	movi	r2,4
 1014748:	20800a26 	beq	r4,r2,1014774 <__muldf3+0xa4>
 101474c:	1880cc26 	beq	r3,r2,1014a80 <__muldf3+0x3b0>
 1014750:	00800084 	movi	r2,2
 1014754:	20800926 	beq	r4,r2,101477c <__muldf3+0xac>
 1014758:	1880191e 	bne	r3,r2,10147c0 <__muldf3+0xf0>
 101475c:	d8c00a17 	ldw	r3,40(sp)
 1014760:	d8800517 	ldw	r2,20(sp)
 1014764:	8009883a 	mov	r4,r16
 1014768:	10c4c03a 	cmpne	r2,r2,r3
 101476c:	d8800a15 	stw	r2,40(sp)
 1014770:	00000706 	br	1014790 <__muldf3+0xc0>
 1014774:	00800084 	movi	r2,2
 1014778:	1880c326 	beq	r3,r2,1014a88 <__muldf3+0x3b8>
 101477c:	d8800517 	ldw	r2,20(sp)
 1014780:	d8c00a17 	ldw	r3,40(sp)
 1014784:	8809883a 	mov	r4,r17
 1014788:	10c4c03a 	cmpne	r2,r2,r3
 101478c:	d8800515 	stw	r2,20(sp)
 1014790:	101575c0 	call	101575c <__pack_d>
 1014794:	dfc01f17 	ldw	ra,124(sp)
 1014798:	ddc01e17 	ldw	r23,120(sp)
 101479c:	dd801d17 	ldw	r22,116(sp)
 10147a0:	dd401c17 	ldw	r21,112(sp)
 10147a4:	dd001b17 	ldw	r20,108(sp)
 10147a8:	dcc01a17 	ldw	r19,104(sp)
 10147ac:	dc801917 	ldw	r18,100(sp)
 10147b0:	dc401817 	ldw	r17,96(sp)
 10147b4:	dc001717 	ldw	r16,92(sp)
 10147b8:	dec02004 	addi	sp,sp,128
 10147bc:	f800283a 	ret
 10147c0:	dd800717 	ldw	r22,28(sp)
 10147c4:	dc800c17 	ldw	r18,48(sp)
 10147c8:	002b883a 	mov	r21,zero
 10147cc:	0023883a 	mov	r17,zero
 10147d0:	a80b883a 	mov	r5,r21
 10147d4:	b00d883a 	mov	r6,r22
 10147d8:	880f883a 	mov	r7,r17
 10147dc:	ddc00817 	ldw	r23,32(sp)
 10147e0:	dcc00d17 	ldw	r19,52(sp)
 10147e4:	9009883a 	mov	r4,r18
 10147e8:	101339c0 	call	101339c <__muldi3>
 10147ec:	001b883a 	mov	r13,zero
 10147f0:	680f883a 	mov	r7,r13
 10147f4:	b009883a 	mov	r4,r22
 10147f8:	000b883a 	mov	r5,zero
 10147fc:	980d883a 	mov	r6,r19
 1014800:	b82d883a 	mov	r22,r23
 1014804:	002f883a 	mov	r23,zero
 1014808:	db401615 	stw	r13,88(sp)
 101480c:	d8801315 	stw	r2,76(sp)
 1014810:	d8c01415 	stw	r3,80(sp)
 1014814:	dcc01515 	stw	r19,84(sp)
 1014818:	101339c0 	call	101339c <__muldi3>
 101481c:	b00d883a 	mov	r6,r22
 1014820:	000b883a 	mov	r5,zero
 1014824:	9009883a 	mov	r4,r18
 1014828:	b80f883a 	mov	r7,r23
 101482c:	1021883a 	mov	r16,r2
 1014830:	1823883a 	mov	r17,r3
 1014834:	101339c0 	call	101339c <__muldi3>
 1014838:	8085883a 	add	r2,r16,r2
 101483c:	140d803a 	cmpltu	r6,r2,r16
 1014840:	88c7883a 	add	r3,r17,r3
 1014844:	30cd883a 	add	r6,r6,r3
 1014848:	1029883a 	mov	r20,r2
 101484c:	302b883a 	mov	r21,r6
 1014850:	da801317 	ldw	r10,76(sp)
 1014854:	dac01417 	ldw	r11,80(sp)
 1014858:	db001517 	ldw	r12,84(sp)
 101485c:	db401617 	ldw	r13,88(sp)
 1014860:	3440612e 	bgeu	r6,r17,10149e8 <__muldf3+0x318>
 1014864:	0009883a 	mov	r4,zero
 1014868:	5105883a 	add	r2,r10,r4
 101486c:	128d803a 	cmpltu	r6,r2,r10
 1014870:	5d07883a 	add	r3,r11,r20
 1014874:	30cd883a 	add	r6,r6,r3
 1014878:	0021883a 	mov	r16,zero
 101487c:	04400044 	movi	r17,1
 1014880:	1025883a 	mov	r18,r2
 1014884:	3027883a 	mov	r19,r6
 1014888:	32c06236 	bltu	r6,r11,1014a14 <__muldf3+0x344>
 101488c:	59807a26 	beq	r11,r6,1014a78 <__muldf3+0x3a8>
 1014890:	680b883a 	mov	r5,r13
 1014894:	b80f883a 	mov	r7,r23
 1014898:	6009883a 	mov	r4,r12
 101489c:	b00d883a 	mov	r6,r22
 10148a0:	101339c0 	call	101339c <__muldi3>
 10148a4:	1009883a 	mov	r4,r2
 10148a8:	000f883a 	mov	r7,zero
 10148ac:	1545883a 	add	r2,r2,r21
 10148b0:	1111803a 	cmpltu	r8,r2,r4
 10148b4:	19c7883a 	add	r3,r3,r7
 10148b8:	40c7883a 	add	r3,r8,r3
 10148bc:	88cb883a 	add	r5,r17,r3
 10148c0:	d8c00617 	ldw	r3,24(sp)
 10148c4:	8089883a 	add	r4,r16,r2
 10148c8:	d8800b17 	ldw	r2,44(sp)
 10148cc:	18c00104 	addi	r3,r3,4
 10148d0:	240d803a 	cmpltu	r6,r4,r16
 10148d4:	10c7883a 	add	r3,r2,r3
 10148d8:	2013883a 	mov	r9,r4
 10148dc:	d8800a17 	ldw	r2,40(sp)
 10148e0:	d9000517 	ldw	r4,20(sp)
 10148e4:	314d883a 	add	r6,r6,r5
 10148e8:	3015883a 	mov	r10,r6
 10148ec:	2088c03a 	cmpne	r4,r4,r2
 10148f0:	00880034 	movhi	r2,8192
 10148f4:	10bfffc4 	addi	r2,r2,-1
 10148f8:	d9000f15 	stw	r4,60(sp)
 10148fc:	d8c01015 	stw	r3,64(sp)
 1014900:	1180162e 	bgeu	r2,r6,101495c <__muldf3+0x28c>
 1014904:	1811883a 	mov	r8,r3
 1014908:	101f883a 	mov	r15,r2
 101490c:	980497fa 	slli	r2,r19,31
 1014910:	9016d07a 	srli	r11,r18,1
 1014914:	500697fa 	slli	r3,r10,31
 1014918:	480cd07a 	srli	r6,r9,1
 101491c:	500ed07a 	srli	r7,r10,1
 1014920:	12d6b03a 	or	r11,r2,r11
 1014924:	00800044 	movi	r2,1
 1014928:	198cb03a 	or	r6,r3,r6
 101492c:	4888703a 	and	r4,r9,r2
 1014930:	9818d07a 	srli	r12,r19,1
 1014934:	001b883a 	mov	r13,zero
 1014938:	03a00034 	movhi	r14,32768
 101493c:	3013883a 	mov	r9,r6
 1014940:	3815883a 	mov	r10,r7
 1014944:	4091883a 	add	r8,r8,r2
 1014948:	20000226 	beq	r4,zero,1014954 <__muldf3+0x284>
 101494c:	5b64b03a 	or	r18,r11,r13
 1014950:	63a6b03a 	or	r19,r12,r14
 1014954:	7abfed36 	bltu	r15,r10,101490c <__muldf3+0x23c>
 1014958:	da001015 	stw	r8,64(sp)
 101495c:	00840034 	movhi	r2,4096
 1014960:	10bfffc4 	addi	r2,r2,-1
 1014964:	12801436 	bltu	r2,r10,10149b8 <__muldf3+0x2e8>
 1014968:	da001017 	ldw	r8,64(sp)
 101496c:	101f883a 	mov	r15,r2
 1014970:	4a45883a 	add	r2,r9,r9
 1014974:	124d803a 	cmpltu	r6,r2,r9
 1014978:	5287883a 	add	r3,r10,r10
 101497c:	9497883a 	add	r11,r18,r18
 1014980:	5c8f803a 	cmpltu	r7,r11,r18
 1014984:	9cd9883a 	add	r12,r19,r19
 1014988:	01000044 	movi	r4,1
 101498c:	30cd883a 	add	r6,r6,r3
 1014990:	3b0f883a 	add	r7,r7,r12
 1014994:	423fffc4 	addi	r8,r8,-1
 1014998:	1013883a 	mov	r9,r2
 101499c:	3015883a 	mov	r10,r6
 10149a0:	111ab03a 	or	r13,r2,r4
 10149a4:	98003016 	blt	r19,zero,1014a68 <__muldf3+0x398>
 10149a8:	5825883a 	mov	r18,r11
 10149ac:	3827883a 	mov	r19,r7
 10149b0:	7abfef2e 	bgeu	r15,r10,1014970 <__muldf3+0x2a0>
 10149b4:	da001015 	stw	r8,64(sp)
 10149b8:	00803fc4 	movi	r2,255
 10149bc:	488e703a 	and	r7,r9,r2
 10149c0:	00802004 	movi	r2,128
 10149c4:	0007883a 	mov	r3,zero
 10149c8:	0011883a 	mov	r8,zero
 10149cc:	38801826 	beq	r7,r2,1014a30 <__muldf3+0x360>
 10149d0:	008000c4 	movi	r2,3
 10149d4:	d9000e04 	addi	r4,sp,56
 10149d8:	da801215 	stw	r10,72(sp)
 10149dc:	d8800e15 	stw	r2,56(sp)
 10149e0:	da401115 	stw	r9,68(sp)
 10149e4:	003f6a06 	br	1014790 <__muldf3+0xc0>
 10149e8:	89802126 	beq	r17,r6,1014a70 <__muldf3+0x3a0>
 10149ec:	0009883a 	mov	r4,zero
 10149f0:	5105883a 	add	r2,r10,r4
 10149f4:	128d803a 	cmpltu	r6,r2,r10
 10149f8:	5d07883a 	add	r3,r11,r20
 10149fc:	30cd883a 	add	r6,r6,r3
 1014a00:	0021883a 	mov	r16,zero
 1014a04:	0023883a 	mov	r17,zero
 1014a08:	1025883a 	mov	r18,r2
 1014a0c:	3027883a 	mov	r19,r6
 1014a10:	32ff9e2e 	bgeu	r6,r11,101488c <__muldf3+0x1bc>
 1014a14:	00800044 	movi	r2,1
 1014a18:	8089883a 	add	r4,r16,r2
 1014a1c:	240d803a 	cmpltu	r6,r4,r16
 1014a20:	344d883a 	add	r6,r6,r17
 1014a24:	2021883a 	mov	r16,r4
 1014a28:	3023883a 	mov	r17,r6
 1014a2c:	003f9806 	br	1014890 <__muldf3+0x1c0>
 1014a30:	403fe71e 	bne	r8,zero,10149d0 <__muldf3+0x300>
 1014a34:	01004004 	movi	r4,256
 1014a38:	4904703a 	and	r2,r9,r4
 1014a3c:	10c4b03a 	or	r2,r2,r3
 1014a40:	103fe31e 	bne	r2,zero,10149d0 <__muldf3+0x300>
 1014a44:	94c4b03a 	or	r2,r18,r19
 1014a48:	103fe126 	beq	r2,zero,10149d0 <__muldf3+0x300>
 1014a4c:	49c5883a 	add	r2,r9,r7
 1014a50:	1251803a 	cmpltu	r8,r2,r9
 1014a54:	4291883a 	add	r8,r8,r10
 1014a58:	013fc004 	movi	r4,-256
 1014a5c:	1112703a 	and	r9,r2,r4
 1014a60:	4015883a 	mov	r10,r8
 1014a64:	003fda06 	br	10149d0 <__muldf3+0x300>
 1014a68:	6813883a 	mov	r9,r13
 1014a6c:	003fce06 	br	10149a8 <__muldf3+0x2d8>
 1014a70:	143f7c36 	bltu	r2,r16,1014864 <__muldf3+0x194>
 1014a74:	003fdd06 	br	10149ec <__muldf3+0x31c>
 1014a78:	12bf852e 	bgeu	r2,r10,1014890 <__muldf3+0x1c0>
 1014a7c:	003fe506 	br	1014a14 <__muldf3+0x344>
 1014a80:	00800084 	movi	r2,2
 1014a84:	20bf351e 	bne	r4,r2,101475c <__muldf3+0x8c>
 1014a88:	010040b4 	movhi	r4,258
 1014a8c:	212a0c04 	addi	r4,r4,-22480
 1014a90:	003f3f06 	br	1014790 <__muldf3+0xc0>

01014a94 <__divdf3>:
 1014a94:	deffed04 	addi	sp,sp,-76
 1014a98:	dcc01115 	stw	r19,68(sp)
 1014a9c:	dcc00404 	addi	r19,sp,16
 1014aa0:	2011883a 	mov	r8,r4
 1014aa4:	2813883a 	mov	r9,r5
 1014aa8:	dc000e15 	stw	r16,56(sp)
 1014aac:	d809883a 	mov	r4,sp
 1014ab0:	980b883a 	mov	r5,r19
 1014ab4:	dc000904 	addi	r16,sp,36
 1014ab8:	dfc01215 	stw	ra,72(sp)
 1014abc:	da400115 	stw	r9,4(sp)
 1014ac0:	d9c00315 	stw	r7,12(sp)
 1014ac4:	da000015 	stw	r8,0(sp)
 1014ac8:	d9800215 	stw	r6,8(sp)
 1014acc:	dc801015 	stw	r18,64(sp)
 1014ad0:	dc400f15 	stw	r17,60(sp)
 1014ad4:	1015a700 	call	1015a70 <__unpack_d>
 1014ad8:	d9000204 	addi	r4,sp,8
 1014adc:	800b883a 	mov	r5,r16
 1014ae0:	1015a700 	call	1015a70 <__unpack_d>
 1014ae4:	d9000417 	ldw	r4,16(sp)
 1014ae8:	00800044 	movi	r2,1
 1014aec:	11000b2e 	bgeu	r2,r4,1014b1c <__divdf3+0x88>
 1014af0:	d9400917 	ldw	r5,36(sp)
 1014af4:	1140762e 	bgeu	r2,r5,1014cd0 <__divdf3+0x23c>
 1014af8:	d8800517 	ldw	r2,20(sp)
 1014afc:	d8c00a17 	ldw	r3,40(sp)
 1014b00:	01800104 	movi	r6,4
 1014b04:	10c4f03a 	xor	r2,r2,r3
 1014b08:	d8800515 	stw	r2,20(sp)
 1014b0c:	21800226 	beq	r4,r6,1014b18 <__divdf3+0x84>
 1014b10:	00800084 	movi	r2,2
 1014b14:	2080141e 	bne	r4,r2,1014b68 <__divdf3+0xd4>
 1014b18:	29000926 	beq	r5,r4,1014b40 <__divdf3+0xac>
 1014b1c:	9809883a 	mov	r4,r19
 1014b20:	101575c0 	call	101575c <__pack_d>
 1014b24:	dfc01217 	ldw	ra,72(sp)
 1014b28:	dcc01117 	ldw	r19,68(sp)
 1014b2c:	dc801017 	ldw	r18,64(sp)
 1014b30:	dc400f17 	ldw	r17,60(sp)
 1014b34:	dc000e17 	ldw	r16,56(sp)
 1014b38:	dec01304 	addi	sp,sp,76
 1014b3c:	f800283a 	ret
 1014b40:	010040b4 	movhi	r4,258
 1014b44:	212a0c04 	addi	r4,r4,-22480
 1014b48:	101575c0 	call	101575c <__pack_d>
 1014b4c:	dfc01217 	ldw	ra,72(sp)
 1014b50:	dcc01117 	ldw	r19,68(sp)
 1014b54:	dc801017 	ldw	r18,64(sp)
 1014b58:	dc400f17 	ldw	r17,60(sp)
 1014b5c:	dc000e17 	ldw	r16,56(sp)
 1014b60:	dec01304 	addi	sp,sp,76
 1014b64:	f800283a 	ret
 1014b68:	29805b26 	beq	r5,r6,1014cd8 <__divdf3+0x244>
 1014b6c:	28802d26 	beq	r5,r2,1014c24 <__divdf3+0x190>
 1014b70:	d8c00617 	ldw	r3,24(sp)
 1014b74:	d8800b17 	ldw	r2,44(sp)
 1014b78:	d9c00817 	ldw	r7,32(sp)
 1014b7c:	dc400d17 	ldw	r17,52(sp)
 1014b80:	188bc83a 	sub	r5,r3,r2
 1014b84:	d9800717 	ldw	r6,28(sp)
 1014b88:	dc000c17 	ldw	r16,48(sp)
 1014b8c:	d9400615 	stw	r5,24(sp)
 1014b90:	3c403836 	bltu	r7,r17,1014c74 <__divdf3+0x1e0>
 1014b94:	89c03626 	beq	r17,r7,1014c70 <__divdf3+0x1dc>
 1014b98:	0015883a 	mov	r10,zero
 1014b9c:	001d883a 	mov	r14,zero
 1014ba0:	02c40034 	movhi	r11,4096
 1014ba4:	001f883a 	mov	r15,zero
 1014ba8:	003f883a 	mov	ra,zero
 1014bac:	04800f44 	movi	r18,61
 1014bb0:	00000f06 	br	1014bf0 <__divdf3+0x15c>
 1014bb4:	601d883a 	mov	r14,r12
 1014bb8:	681f883a 	mov	r15,r13
 1014bbc:	400d883a 	mov	r6,r8
 1014bc0:	100f883a 	mov	r7,r2
 1014bc4:	3191883a 	add	r8,r6,r6
 1014bc8:	5808d07a 	srli	r4,r11,1
 1014bcc:	4185803a 	cmpltu	r2,r8,r6
 1014bd0:	39d3883a 	add	r9,r7,r7
 1014bd4:	28c6b03a 	or	r3,r5,r3
 1014bd8:	1245883a 	add	r2,r2,r9
 1014bdc:	1815883a 	mov	r10,r3
 1014be0:	2017883a 	mov	r11,r4
 1014be4:	400d883a 	mov	r6,r8
 1014be8:	100f883a 	mov	r7,r2
 1014bec:	fc801726 	beq	ra,r18,1014c4c <__divdf3+0x1b8>
 1014bf0:	580a97fa 	slli	r5,r11,31
 1014bf4:	5006d07a 	srli	r3,r10,1
 1014bf8:	ffc00044 	addi	ra,ra,1
 1014bfc:	3c7ff136 	bltu	r7,r17,1014bc4 <__divdf3+0x130>
 1014c00:	3411c83a 	sub	r8,r6,r16
 1014c04:	3205803a 	cmpltu	r2,r6,r8
 1014c08:	3c53c83a 	sub	r9,r7,r17
 1014c0c:	7298b03a 	or	r12,r14,r10
 1014c10:	7adab03a 	or	r13,r15,r11
 1014c14:	4885c83a 	sub	r2,r9,r2
 1014c18:	89ffe61e 	bne	r17,r7,1014bb4 <__divdf3+0x120>
 1014c1c:	343fe936 	bltu	r6,r16,1014bc4 <__divdf3+0x130>
 1014c20:	003fe406 	br	1014bb4 <__divdf3+0x120>
 1014c24:	9809883a 	mov	r4,r19
 1014c28:	d9800415 	stw	r6,16(sp)
 1014c2c:	101575c0 	call	101575c <__pack_d>
 1014c30:	dfc01217 	ldw	ra,72(sp)
 1014c34:	dcc01117 	ldw	r19,68(sp)
 1014c38:	dc801017 	ldw	r18,64(sp)
 1014c3c:	dc400f17 	ldw	r17,60(sp)
 1014c40:	dc000e17 	ldw	r16,56(sp)
 1014c44:	dec01304 	addi	sp,sp,76
 1014c48:	f800283a 	ret
 1014c4c:	00803fc4 	movi	r2,255
 1014c50:	7090703a 	and	r8,r14,r2
 1014c54:	00802004 	movi	r2,128
 1014c58:	0007883a 	mov	r3,zero
 1014c5c:	0013883a 	mov	r9,zero
 1014c60:	40800d26 	beq	r8,r2,1014c98 <__divdf3+0x204>
 1014c64:	dbc00815 	stw	r15,32(sp)
 1014c68:	db800715 	stw	r14,28(sp)
 1014c6c:	003fab06 	br	1014b1c <__divdf3+0x88>
 1014c70:	343fc92e 	bgeu	r6,r16,1014b98 <__divdf3+0x104>
 1014c74:	3185883a 	add	r2,r6,r6
 1014c78:	1189803a 	cmpltu	r4,r2,r6
 1014c7c:	39c7883a 	add	r3,r7,r7
 1014c80:	20c9883a 	add	r4,r4,r3
 1014c84:	297fffc4 	addi	r5,r5,-1
 1014c88:	100d883a 	mov	r6,r2
 1014c8c:	200f883a 	mov	r7,r4
 1014c90:	d9400615 	stw	r5,24(sp)
 1014c94:	003fc006 	br	1014b98 <__divdf3+0x104>
 1014c98:	483ff21e 	bne	r9,zero,1014c64 <__divdf3+0x1d0>
 1014c9c:	01004004 	movi	r4,256
 1014ca0:	7104703a 	and	r2,r14,r4
 1014ca4:	10c4b03a 	or	r2,r2,r3
 1014ca8:	103fee1e 	bne	r2,zero,1014c64 <__divdf3+0x1d0>
 1014cac:	31c4b03a 	or	r2,r6,r7
 1014cb0:	103fec26 	beq	r2,zero,1014c64 <__divdf3+0x1d0>
 1014cb4:	7205883a 	add	r2,r14,r8
 1014cb8:	1391803a 	cmpltu	r8,r2,r14
 1014cbc:	43d1883a 	add	r8,r8,r15
 1014cc0:	013fc004 	movi	r4,-256
 1014cc4:	111c703a 	and	r14,r2,r4
 1014cc8:	401f883a 	mov	r15,r8
 1014ccc:	003fe506 	br	1014c64 <__divdf3+0x1d0>
 1014cd0:	8009883a 	mov	r4,r16
 1014cd4:	003f9206 	br	1014b20 <__divdf3+0x8c>
 1014cd8:	9809883a 	mov	r4,r19
 1014cdc:	d8000715 	stw	zero,28(sp)
 1014ce0:	d8000815 	stw	zero,32(sp)
 1014ce4:	d8000615 	stw	zero,24(sp)
 1014ce8:	003f8d06 	br	1014b20 <__divdf3+0x8c>

01014cec <__eqdf2>:
 1014cec:	deffef04 	addi	sp,sp,-68
 1014cf0:	dc400f15 	stw	r17,60(sp)
 1014cf4:	dc400404 	addi	r17,sp,16
 1014cf8:	2005883a 	mov	r2,r4
 1014cfc:	2807883a 	mov	r3,r5
 1014d00:	dc000e15 	stw	r16,56(sp)
 1014d04:	d809883a 	mov	r4,sp
 1014d08:	880b883a 	mov	r5,r17
 1014d0c:	dc000904 	addi	r16,sp,36
 1014d10:	d8c00115 	stw	r3,4(sp)
 1014d14:	d8800015 	stw	r2,0(sp)
 1014d18:	d9800215 	stw	r6,8(sp)
 1014d1c:	dfc01015 	stw	ra,64(sp)
 1014d20:	d9c00315 	stw	r7,12(sp)
 1014d24:	1015a700 	call	1015a70 <__unpack_d>
 1014d28:	d9000204 	addi	r4,sp,8
 1014d2c:	800b883a 	mov	r5,r16
 1014d30:	1015a700 	call	1015a70 <__unpack_d>
 1014d34:	d8800417 	ldw	r2,16(sp)
 1014d38:	00c00044 	movi	r3,1
 1014d3c:	180d883a 	mov	r6,r3
 1014d40:	1880062e 	bgeu	r3,r2,1014d5c <__eqdf2+0x70>
 1014d44:	d8800917 	ldw	r2,36(sp)
 1014d48:	8809883a 	mov	r4,r17
 1014d4c:	800b883a 	mov	r5,r16
 1014d50:	1880022e 	bgeu	r3,r2,1014d5c <__eqdf2+0x70>
 1014d54:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1014d58:	100d883a 	mov	r6,r2
 1014d5c:	3005883a 	mov	r2,r6
 1014d60:	dfc01017 	ldw	ra,64(sp)
 1014d64:	dc400f17 	ldw	r17,60(sp)
 1014d68:	dc000e17 	ldw	r16,56(sp)
 1014d6c:	dec01104 	addi	sp,sp,68
 1014d70:	f800283a 	ret

01014d74 <__nedf2>:
 1014d74:	deffef04 	addi	sp,sp,-68
 1014d78:	dc400f15 	stw	r17,60(sp)
 1014d7c:	dc400404 	addi	r17,sp,16
 1014d80:	2005883a 	mov	r2,r4
 1014d84:	2807883a 	mov	r3,r5
 1014d88:	dc000e15 	stw	r16,56(sp)
 1014d8c:	d809883a 	mov	r4,sp
 1014d90:	880b883a 	mov	r5,r17
 1014d94:	dc000904 	addi	r16,sp,36
 1014d98:	d8c00115 	stw	r3,4(sp)
 1014d9c:	d8800015 	stw	r2,0(sp)
 1014da0:	d9800215 	stw	r6,8(sp)
 1014da4:	dfc01015 	stw	ra,64(sp)
 1014da8:	d9c00315 	stw	r7,12(sp)
 1014dac:	1015a700 	call	1015a70 <__unpack_d>
 1014db0:	d9000204 	addi	r4,sp,8
 1014db4:	800b883a 	mov	r5,r16
 1014db8:	1015a700 	call	1015a70 <__unpack_d>
 1014dbc:	d8800417 	ldw	r2,16(sp)
 1014dc0:	00c00044 	movi	r3,1
 1014dc4:	180d883a 	mov	r6,r3
 1014dc8:	1880062e 	bgeu	r3,r2,1014de4 <__nedf2+0x70>
 1014dcc:	d8800917 	ldw	r2,36(sp)
 1014dd0:	8809883a 	mov	r4,r17
 1014dd4:	800b883a 	mov	r5,r16
 1014dd8:	1880022e 	bgeu	r3,r2,1014de4 <__nedf2+0x70>
 1014ddc:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1014de0:	100d883a 	mov	r6,r2
 1014de4:	3005883a 	mov	r2,r6
 1014de8:	dfc01017 	ldw	ra,64(sp)
 1014dec:	dc400f17 	ldw	r17,60(sp)
 1014df0:	dc000e17 	ldw	r16,56(sp)
 1014df4:	dec01104 	addi	sp,sp,68
 1014df8:	f800283a 	ret

01014dfc <__gtdf2>:
 1014dfc:	deffef04 	addi	sp,sp,-68
 1014e00:	dc400f15 	stw	r17,60(sp)
 1014e04:	dc400404 	addi	r17,sp,16
 1014e08:	2005883a 	mov	r2,r4
 1014e0c:	2807883a 	mov	r3,r5
 1014e10:	dc000e15 	stw	r16,56(sp)
 1014e14:	d809883a 	mov	r4,sp
 1014e18:	880b883a 	mov	r5,r17
 1014e1c:	dc000904 	addi	r16,sp,36
 1014e20:	d8c00115 	stw	r3,4(sp)
 1014e24:	d8800015 	stw	r2,0(sp)
 1014e28:	d9800215 	stw	r6,8(sp)
 1014e2c:	dfc01015 	stw	ra,64(sp)
 1014e30:	d9c00315 	stw	r7,12(sp)
 1014e34:	1015a700 	call	1015a70 <__unpack_d>
 1014e38:	d9000204 	addi	r4,sp,8
 1014e3c:	800b883a 	mov	r5,r16
 1014e40:	1015a700 	call	1015a70 <__unpack_d>
 1014e44:	d8800417 	ldw	r2,16(sp)
 1014e48:	00c00044 	movi	r3,1
 1014e4c:	01bfffc4 	movi	r6,-1
 1014e50:	1880062e 	bgeu	r3,r2,1014e6c <__gtdf2+0x70>
 1014e54:	d8800917 	ldw	r2,36(sp)
 1014e58:	8809883a 	mov	r4,r17
 1014e5c:	800b883a 	mov	r5,r16
 1014e60:	1880022e 	bgeu	r3,r2,1014e6c <__gtdf2+0x70>
 1014e64:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1014e68:	100d883a 	mov	r6,r2
 1014e6c:	3005883a 	mov	r2,r6
 1014e70:	dfc01017 	ldw	ra,64(sp)
 1014e74:	dc400f17 	ldw	r17,60(sp)
 1014e78:	dc000e17 	ldw	r16,56(sp)
 1014e7c:	dec01104 	addi	sp,sp,68
 1014e80:	f800283a 	ret

01014e84 <__gedf2>:
 1014e84:	deffef04 	addi	sp,sp,-68
 1014e88:	dc400f15 	stw	r17,60(sp)
 1014e8c:	dc400404 	addi	r17,sp,16
 1014e90:	2005883a 	mov	r2,r4
 1014e94:	2807883a 	mov	r3,r5
 1014e98:	dc000e15 	stw	r16,56(sp)
 1014e9c:	d809883a 	mov	r4,sp
 1014ea0:	880b883a 	mov	r5,r17
 1014ea4:	dc000904 	addi	r16,sp,36
 1014ea8:	d8c00115 	stw	r3,4(sp)
 1014eac:	d8800015 	stw	r2,0(sp)
 1014eb0:	d9800215 	stw	r6,8(sp)
 1014eb4:	dfc01015 	stw	ra,64(sp)
 1014eb8:	d9c00315 	stw	r7,12(sp)
 1014ebc:	1015a700 	call	1015a70 <__unpack_d>
 1014ec0:	d9000204 	addi	r4,sp,8
 1014ec4:	800b883a 	mov	r5,r16
 1014ec8:	1015a700 	call	1015a70 <__unpack_d>
 1014ecc:	d8800417 	ldw	r2,16(sp)
 1014ed0:	00c00044 	movi	r3,1
 1014ed4:	01bfffc4 	movi	r6,-1
 1014ed8:	1880062e 	bgeu	r3,r2,1014ef4 <__gedf2+0x70>
 1014edc:	d8800917 	ldw	r2,36(sp)
 1014ee0:	8809883a 	mov	r4,r17
 1014ee4:	800b883a 	mov	r5,r16
 1014ee8:	1880022e 	bgeu	r3,r2,1014ef4 <__gedf2+0x70>
 1014eec:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1014ef0:	100d883a 	mov	r6,r2
 1014ef4:	3005883a 	mov	r2,r6
 1014ef8:	dfc01017 	ldw	ra,64(sp)
 1014efc:	dc400f17 	ldw	r17,60(sp)
 1014f00:	dc000e17 	ldw	r16,56(sp)
 1014f04:	dec01104 	addi	sp,sp,68
 1014f08:	f800283a 	ret

01014f0c <__ltdf2>:
 1014f0c:	deffef04 	addi	sp,sp,-68
 1014f10:	dc400f15 	stw	r17,60(sp)
 1014f14:	dc400404 	addi	r17,sp,16
 1014f18:	2005883a 	mov	r2,r4
 1014f1c:	2807883a 	mov	r3,r5
 1014f20:	dc000e15 	stw	r16,56(sp)
 1014f24:	d809883a 	mov	r4,sp
 1014f28:	880b883a 	mov	r5,r17
 1014f2c:	dc000904 	addi	r16,sp,36
 1014f30:	d8c00115 	stw	r3,4(sp)
 1014f34:	d8800015 	stw	r2,0(sp)
 1014f38:	d9800215 	stw	r6,8(sp)
 1014f3c:	dfc01015 	stw	ra,64(sp)
 1014f40:	d9c00315 	stw	r7,12(sp)
 1014f44:	1015a700 	call	1015a70 <__unpack_d>
 1014f48:	d9000204 	addi	r4,sp,8
 1014f4c:	800b883a 	mov	r5,r16
 1014f50:	1015a700 	call	1015a70 <__unpack_d>
 1014f54:	d8800417 	ldw	r2,16(sp)
 1014f58:	00c00044 	movi	r3,1
 1014f5c:	180d883a 	mov	r6,r3
 1014f60:	1880062e 	bgeu	r3,r2,1014f7c <__ltdf2+0x70>
 1014f64:	d8800917 	ldw	r2,36(sp)
 1014f68:	8809883a 	mov	r4,r17
 1014f6c:	800b883a 	mov	r5,r16
 1014f70:	1880022e 	bgeu	r3,r2,1014f7c <__ltdf2+0x70>
 1014f74:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1014f78:	100d883a 	mov	r6,r2
 1014f7c:	3005883a 	mov	r2,r6
 1014f80:	dfc01017 	ldw	ra,64(sp)
 1014f84:	dc400f17 	ldw	r17,60(sp)
 1014f88:	dc000e17 	ldw	r16,56(sp)
 1014f8c:	dec01104 	addi	sp,sp,68
 1014f90:	f800283a 	ret

01014f94 <__ledf2>:
 1014f94:	deffef04 	addi	sp,sp,-68
 1014f98:	dc400f15 	stw	r17,60(sp)
 1014f9c:	dc400404 	addi	r17,sp,16
 1014fa0:	2005883a 	mov	r2,r4
 1014fa4:	2807883a 	mov	r3,r5
 1014fa8:	dc000e15 	stw	r16,56(sp)
 1014fac:	d809883a 	mov	r4,sp
 1014fb0:	880b883a 	mov	r5,r17
 1014fb4:	dc000904 	addi	r16,sp,36
 1014fb8:	d8c00115 	stw	r3,4(sp)
 1014fbc:	d8800015 	stw	r2,0(sp)
 1014fc0:	d9800215 	stw	r6,8(sp)
 1014fc4:	dfc01015 	stw	ra,64(sp)
 1014fc8:	d9c00315 	stw	r7,12(sp)
 1014fcc:	1015a700 	call	1015a70 <__unpack_d>
 1014fd0:	d9000204 	addi	r4,sp,8
 1014fd4:	800b883a 	mov	r5,r16
 1014fd8:	1015a700 	call	1015a70 <__unpack_d>
 1014fdc:	d8800417 	ldw	r2,16(sp)
 1014fe0:	00c00044 	movi	r3,1
 1014fe4:	180d883a 	mov	r6,r3
 1014fe8:	1880062e 	bgeu	r3,r2,1015004 <__ledf2+0x70>
 1014fec:	d8800917 	ldw	r2,36(sp)
 1014ff0:	8809883a 	mov	r4,r17
 1014ff4:	800b883a 	mov	r5,r16
 1014ff8:	1880022e 	bgeu	r3,r2,1015004 <__ledf2+0x70>
 1014ffc:	1015ba80 	call	1015ba8 <__fpcmp_parts_d>
 1015000:	100d883a 	mov	r6,r2
 1015004:	3005883a 	mov	r2,r6
 1015008:	dfc01017 	ldw	ra,64(sp)
 101500c:	dc400f17 	ldw	r17,60(sp)
 1015010:	dc000e17 	ldw	r16,56(sp)
 1015014:	dec01104 	addi	sp,sp,68
 1015018:	f800283a 	ret

0101501c <__floatsidf>:
 101501c:	2006d7fa 	srli	r3,r4,31
 1015020:	defff604 	addi	sp,sp,-40
 1015024:	008000c4 	movi	r2,3
 1015028:	dfc00915 	stw	ra,36(sp)
 101502c:	dcc00815 	stw	r19,32(sp)
 1015030:	dc800715 	stw	r18,28(sp)
 1015034:	dc400615 	stw	r17,24(sp)
 1015038:	dc000515 	stw	r16,20(sp)
 101503c:	d8800015 	stw	r2,0(sp)
 1015040:	d8c00115 	stw	r3,4(sp)
 1015044:	20000f1e 	bne	r4,zero,1015084 <__floatsidf+0x68>
 1015048:	00800084 	movi	r2,2
 101504c:	d8800015 	stw	r2,0(sp)
 1015050:	d809883a 	mov	r4,sp
 1015054:	101575c0 	call	101575c <__pack_d>
 1015058:	1009883a 	mov	r4,r2
 101505c:	180b883a 	mov	r5,r3
 1015060:	2005883a 	mov	r2,r4
 1015064:	2807883a 	mov	r3,r5
 1015068:	dfc00917 	ldw	ra,36(sp)
 101506c:	dcc00817 	ldw	r19,32(sp)
 1015070:	dc800717 	ldw	r18,28(sp)
 1015074:	dc400617 	ldw	r17,24(sp)
 1015078:	dc000517 	ldw	r16,20(sp)
 101507c:	dec00a04 	addi	sp,sp,40
 1015080:	f800283a 	ret
 1015084:	00800f04 	movi	r2,60
 1015088:	1807003a 	cmpeq	r3,r3,zero
 101508c:	d8800215 	stw	r2,8(sp)
 1015090:	18001126 	beq	r3,zero,10150d8 <__floatsidf+0xbc>
 1015094:	0027883a 	mov	r19,zero
 1015098:	2025883a 	mov	r18,r4
 101509c:	d9000315 	stw	r4,12(sp)
 10150a0:	dcc00415 	stw	r19,16(sp)
 10150a4:	10155400 	call	1015540 <__clzsi2>
 10150a8:	11000744 	addi	r4,r2,29
 10150ac:	013fe80e 	bge	zero,r4,1015050 <__floatsidf+0x34>
 10150b0:	10bfff44 	addi	r2,r2,-3
 10150b4:	10000c16 	blt	r2,zero,10150e8 <__floatsidf+0xcc>
 10150b8:	90a2983a 	sll	r17,r18,r2
 10150bc:	0021883a 	mov	r16,zero
 10150c0:	d8800217 	ldw	r2,8(sp)
 10150c4:	dc400415 	stw	r17,16(sp)
 10150c8:	dc000315 	stw	r16,12(sp)
 10150cc:	1105c83a 	sub	r2,r2,r4
 10150d0:	d8800215 	stw	r2,8(sp)
 10150d4:	003fde06 	br	1015050 <__floatsidf+0x34>
 10150d8:	00a00034 	movhi	r2,32768
 10150dc:	20800a26 	beq	r4,r2,1015108 <__floatsidf+0xec>
 10150e0:	0109c83a 	sub	r4,zero,r4
 10150e4:	003feb06 	br	1015094 <__floatsidf+0x78>
 10150e8:	9006d07a 	srli	r3,r18,1
 10150ec:	008007c4 	movi	r2,31
 10150f0:	1105c83a 	sub	r2,r2,r4
 10150f4:	1886d83a 	srl	r3,r3,r2
 10150f8:	9922983a 	sll	r17,r19,r4
 10150fc:	9120983a 	sll	r16,r18,r4
 1015100:	1c62b03a 	or	r17,r3,r17
 1015104:	003fee06 	br	10150c0 <__floatsidf+0xa4>
 1015108:	0009883a 	mov	r4,zero
 101510c:	01707834 	movhi	r5,49632
 1015110:	003fd306 	br	1015060 <__floatsidf+0x44>

01015114 <__fixdfsi>:
 1015114:	defff804 	addi	sp,sp,-32
 1015118:	2005883a 	mov	r2,r4
 101511c:	2807883a 	mov	r3,r5
 1015120:	d809883a 	mov	r4,sp
 1015124:	d9400204 	addi	r5,sp,8
 1015128:	d8c00115 	stw	r3,4(sp)
 101512c:	d8800015 	stw	r2,0(sp)
 1015130:	dfc00715 	stw	ra,28(sp)
 1015134:	1015a700 	call	1015a70 <__unpack_d>
 1015138:	d8c00217 	ldw	r3,8(sp)
 101513c:	00800084 	movi	r2,2
 1015140:	1880051e 	bne	r3,r2,1015158 <__fixdfsi+0x44>
 1015144:	0007883a 	mov	r3,zero
 1015148:	1805883a 	mov	r2,r3
 101514c:	dfc00717 	ldw	ra,28(sp)
 1015150:	dec00804 	addi	sp,sp,32
 1015154:	f800283a 	ret
 1015158:	00800044 	movi	r2,1
 101515c:	10fff92e 	bgeu	r2,r3,1015144 <__fixdfsi+0x30>
 1015160:	00800104 	movi	r2,4
 1015164:	18800426 	beq	r3,r2,1015178 <__fixdfsi+0x64>
 1015168:	d8c00417 	ldw	r3,16(sp)
 101516c:	183ff516 	blt	r3,zero,1015144 <__fixdfsi+0x30>
 1015170:	00800784 	movi	r2,30
 1015174:	10c0080e 	bge	r2,r3,1015198 <__fixdfsi+0x84>
 1015178:	d8800317 	ldw	r2,12(sp)
 101517c:	1000121e 	bne	r2,zero,10151c8 <__fixdfsi+0xb4>
 1015180:	00e00034 	movhi	r3,32768
 1015184:	18ffffc4 	addi	r3,r3,-1
 1015188:	1805883a 	mov	r2,r3
 101518c:	dfc00717 	ldw	ra,28(sp)
 1015190:	dec00804 	addi	sp,sp,32
 1015194:	f800283a 	ret
 1015198:	00800f04 	movi	r2,60
 101519c:	10d1c83a 	sub	r8,r2,r3
 10151a0:	40bff804 	addi	r2,r8,-32
 10151a4:	d9800517 	ldw	r6,20(sp)
 10151a8:	d9c00617 	ldw	r7,24(sp)
 10151ac:	10000816 	blt	r2,zero,10151d0 <__fixdfsi+0xbc>
 10151b0:	3888d83a 	srl	r4,r7,r2
 10151b4:	d8800317 	ldw	r2,12(sp)
 10151b8:	2007883a 	mov	r3,r4
 10151bc:	103fe226 	beq	r2,zero,1015148 <__fixdfsi+0x34>
 10151c0:	0107c83a 	sub	r3,zero,r4
 10151c4:	003fe006 	br	1015148 <__fixdfsi+0x34>
 10151c8:	00e00034 	movhi	r3,32768
 10151cc:	003fde06 	br	1015148 <__fixdfsi+0x34>
 10151d0:	39c7883a 	add	r3,r7,r7
 10151d4:	008007c4 	movi	r2,31
 10151d8:	1205c83a 	sub	r2,r2,r8
 10151dc:	1886983a 	sll	r3,r3,r2
 10151e0:	3208d83a 	srl	r4,r6,r8
 10151e4:	1908b03a 	or	r4,r3,r4
 10151e8:	003ff206 	br	10151b4 <__fixdfsi+0xa0>

010151ec <__truncdfsf2>:
 10151ec:	defff804 	addi	sp,sp,-32
 10151f0:	2005883a 	mov	r2,r4
 10151f4:	2807883a 	mov	r3,r5
 10151f8:	d809883a 	mov	r4,sp
 10151fc:	d9400204 	addi	r5,sp,8
 1015200:	d8c00115 	stw	r3,4(sp)
 1015204:	d8800015 	stw	r2,0(sp)
 1015208:	dfc00715 	stw	ra,28(sp)
 101520c:	1015a700 	call	1015a70 <__unpack_d>
 1015210:	d9c00517 	ldw	r7,20(sp)
 1015214:	da000617 	ldw	r8,24(sp)
 1015218:	02d00034 	movhi	r11,16384
 101521c:	5affffc4 	addi	r11,r11,-1
 1015220:	3812d7ba 	srli	r9,r7,30
 1015224:	401a90ba 	slli	r13,r8,2
 1015228:	3ac4703a 	and	r2,r7,r11
 101522c:	0007883a 	mov	r3,zero
 1015230:	6a52b03a 	or	r9,r13,r9
 1015234:	10c4b03a 	or	r2,r2,r3
 1015238:	d9000217 	ldw	r4,8(sp)
 101523c:	d9400317 	ldw	r5,12(sp)
 1015240:	d9800417 	ldw	r6,16(sp)
 1015244:	480f883a 	mov	r7,r9
 1015248:	10000126 	beq	r2,zero,1015250 <__truncdfsf2+0x64>
 101524c:	49c00054 	ori	r7,r9,1
 1015250:	10157300 	call	1015730 <__make_fp>
 1015254:	dfc00717 	ldw	ra,28(sp)
 1015258:	dec00804 	addi	sp,sp,32
 101525c:	f800283a 	ret

01015260 <__floatunsidf>:
 1015260:	defff204 	addi	sp,sp,-56
 1015264:	dfc00d15 	stw	ra,52(sp)
 1015268:	ddc00c15 	stw	r23,48(sp)
 101526c:	dd800b15 	stw	r22,44(sp)
 1015270:	dd400a15 	stw	r21,40(sp)
 1015274:	dd000915 	stw	r20,36(sp)
 1015278:	dcc00815 	stw	r19,32(sp)
 101527c:	dc800715 	stw	r18,28(sp)
 1015280:	dc400615 	stw	r17,24(sp)
 1015284:	dc000515 	stw	r16,20(sp)
 1015288:	d8000115 	stw	zero,4(sp)
 101528c:	20000f1e 	bne	r4,zero,10152cc <__floatunsidf+0x6c>
 1015290:	00800084 	movi	r2,2
 1015294:	d8800015 	stw	r2,0(sp)
 1015298:	d809883a 	mov	r4,sp
 101529c:	101575c0 	call	101575c <__pack_d>
 10152a0:	dfc00d17 	ldw	ra,52(sp)
 10152a4:	ddc00c17 	ldw	r23,48(sp)
 10152a8:	dd800b17 	ldw	r22,44(sp)
 10152ac:	dd400a17 	ldw	r21,40(sp)
 10152b0:	dd000917 	ldw	r20,36(sp)
 10152b4:	dcc00817 	ldw	r19,32(sp)
 10152b8:	dc800717 	ldw	r18,28(sp)
 10152bc:	dc400617 	ldw	r17,24(sp)
 10152c0:	dc000517 	ldw	r16,20(sp)
 10152c4:	dec00e04 	addi	sp,sp,56
 10152c8:	f800283a 	ret
 10152cc:	008000c4 	movi	r2,3
 10152d0:	00c00f04 	movi	r3,60
 10152d4:	002f883a 	mov	r23,zero
 10152d8:	202d883a 	mov	r22,r4
 10152dc:	d8800015 	stw	r2,0(sp)
 10152e0:	d8c00215 	stw	r3,8(sp)
 10152e4:	d9000315 	stw	r4,12(sp)
 10152e8:	ddc00415 	stw	r23,16(sp)
 10152ec:	10155400 	call	1015540 <__clzsi2>
 10152f0:	12400744 	addi	r9,r2,29
 10152f4:	48000b16 	blt	r9,zero,1015324 <__floatunsidf+0xc4>
 10152f8:	483fe726 	beq	r9,zero,1015298 <__floatunsidf+0x38>
 10152fc:	10bfff44 	addi	r2,r2,-3
 1015300:	10002e16 	blt	r2,zero,10153bc <__floatunsidf+0x15c>
 1015304:	b0a2983a 	sll	r17,r22,r2
 1015308:	0021883a 	mov	r16,zero
 101530c:	d8800217 	ldw	r2,8(sp)
 1015310:	dc400415 	stw	r17,16(sp)
 1015314:	dc000315 	stw	r16,12(sp)
 1015318:	1245c83a 	sub	r2,r2,r9
 101531c:	d8800215 	stw	r2,8(sp)
 1015320:	003fdd06 	br	1015298 <__floatunsidf+0x38>
 1015324:	0255c83a 	sub	r10,zero,r9
 1015328:	51bff804 	addi	r6,r10,-32
 101532c:	30001b16 	blt	r6,zero,101539c <__floatunsidf+0x13c>
 1015330:	b9a8d83a 	srl	r20,r23,r6
 1015334:	002b883a 	mov	r21,zero
 1015338:	000f883a 	mov	r7,zero
 101533c:	01000044 	movi	r4,1
 1015340:	0011883a 	mov	r8,zero
 1015344:	30002516 	blt	r6,zero,10153dc <__floatunsidf+0x17c>
 1015348:	21a6983a 	sll	r19,r4,r6
 101534c:	0025883a 	mov	r18,zero
 1015350:	00bfffc4 	movi	r2,-1
 1015354:	9089883a 	add	r4,r18,r2
 1015358:	988b883a 	add	r5,r19,r2
 101535c:	248d803a 	cmpltu	r6,r4,r18
 1015360:	314b883a 	add	r5,r6,r5
 1015364:	b104703a 	and	r2,r22,r4
 1015368:	b946703a 	and	r3,r23,r5
 101536c:	10c4b03a 	or	r2,r2,r3
 1015370:	10000226 	beq	r2,zero,101537c <__floatunsidf+0x11c>
 1015374:	01c00044 	movi	r7,1
 1015378:	0011883a 	mov	r8,zero
 101537c:	d9000217 	ldw	r4,8(sp)
 1015380:	a1c4b03a 	or	r2,r20,r7
 1015384:	aa06b03a 	or	r3,r21,r8
 1015388:	2249c83a 	sub	r4,r4,r9
 101538c:	d8c00415 	stw	r3,16(sp)
 1015390:	d9000215 	stw	r4,8(sp)
 1015394:	d8800315 	stw	r2,12(sp)
 1015398:	003fbf06 	br	1015298 <__floatunsidf+0x38>
 101539c:	bdc7883a 	add	r3,r23,r23
 10153a0:	008007c4 	movi	r2,31
 10153a4:	1285c83a 	sub	r2,r2,r10
 10153a8:	1886983a 	sll	r3,r3,r2
 10153ac:	b2a8d83a 	srl	r20,r22,r10
 10153b0:	baaad83a 	srl	r21,r23,r10
 10153b4:	1d28b03a 	or	r20,r3,r20
 10153b8:	003fdf06 	br	1015338 <__floatunsidf+0xd8>
 10153bc:	b006d07a 	srli	r3,r22,1
 10153c0:	008007c4 	movi	r2,31
 10153c4:	1245c83a 	sub	r2,r2,r9
 10153c8:	1886d83a 	srl	r3,r3,r2
 10153cc:	ba62983a 	sll	r17,r23,r9
 10153d0:	b260983a 	sll	r16,r22,r9
 10153d4:	1c62b03a 	or	r17,r3,r17
 10153d8:	003fcc06 	br	101530c <__floatunsidf+0xac>
 10153dc:	2006d07a 	srli	r3,r4,1
 10153e0:	008007c4 	movi	r2,31
 10153e4:	1285c83a 	sub	r2,r2,r10
 10153e8:	18a6d83a 	srl	r19,r3,r2
 10153ec:	22a4983a 	sll	r18,r4,r10
 10153f0:	003fd706 	br	1015350 <__floatunsidf+0xf0>

010153f4 <udivmodsi4>:
 10153f4:	29001b2e 	bgeu	r5,r4,1015464 <udivmodsi4+0x70>
 10153f8:	28001a16 	blt	r5,zero,1015464 <udivmodsi4+0x70>
 10153fc:	00800044 	movi	r2,1
 1015400:	0007883a 	mov	r3,zero
 1015404:	01c007c4 	movi	r7,31
 1015408:	00000306 	br	1015418 <udivmodsi4+0x24>
 101540c:	19c01326 	beq	r3,r7,101545c <udivmodsi4+0x68>
 1015410:	18c00044 	addi	r3,r3,1
 1015414:	28000416 	blt	r5,zero,1015428 <udivmodsi4+0x34>
 1015418:	294b883a 	add	r5,r5,r5
 101541c:	1085883a 	add	r2,r2,r2
 1015420:	293ffa36 	bltu	r5,r4,101540c <udivmodsi4+0x18>
 1015424:	10000d26 	beq	r2,zero,101545c <udivmodsi4+0x68>
 1015428:	0007883a 	mov	r3,zero
 101542c:	21400236 	bltu	r4,r5,1015438 <udivmodsi4+0x44>
 1015430:	2149c83a 	sub	r4,r4,r5
 1015434:	1886b03a 	or	r3,r3,r2
 1015438:	1004d07a 	srli	r2,r2,1
 101543c:	280ad07a 	srli	r5,r5,1
 1015440:	103ffa1e 	bne	r2,zero,101542c <udivmodsi4+0x38>
 1015444:	30000226 	beq	r6,zero,1015450 <udivmodsi4+0x5c>
 1015448:	2005883a 	mov	r2,r4
 101544c:	f800283a 	ret
 1015450:	1809883a 	mov	r4,r3
 1015454:	2005883a 	mov	r2,r4
 1015458:	f800283a 	ret
 101545c:	0007883a 	mov	r3,zero
 1015460:	003ff806 	br	1015444 <udivmodsi4+0x50>
 1015464:	00800044 	movi	r2,1
 1015468:	0007883a 	mov	r3,zero
 101546c:	003fef06 	br	101542c <udivmodsi4+0x38>

01015470 <__divsi3>:
 1015470:	defffe04 	addi	sp,sp,-8
 1015474:	dc000015 	stw	r16,0(sp)
 1015478:	dfc00115 	stw	ra,4(sp)
 101547c:	0021883a 	mov	r16,zero
 1015480:	20000c16 	blt	r4,zero,10154b4 <__divsi3+0x44>
 1015484:	000d883a 	mov	r6,zero
 1015488:	28000e16 	blt	r5,zero,10154c4 <__divsi3+0x54>
 101548c:	10153f40 	call	10153f4 <udivmodsi4>
 1015490:	1007883a 	mov	r3,r2
 1015494:	8005003a 	cmpeq	r2,r16,zero
 1015498:	1000011e 	bne	r2,zero,10154a0 <__divsi3+0x30>
 101549c:	00c7c83a 	sub	r3,zero,r3
 10154a0:	1805883a 	mov	r2,r3
 10154a4:	dfc00117 	ldw	ra,4(sp)
 10154a8:	dc000017 	ldw	r16,0(sp)
 10154ac:	dec00204 	addi	sp,sp,8
 10154b0:	f800283a 	ret
 10154b4:	0109c83a 	sub	r4,zero,r4
 10154b8:	04000044 	movi	r16,1
 10154bc:	000d883a 	mov	r6,zero
 10154c0:	283ff20e 	bge	r5,zero,101548c <__divsi3+0x1c>
 10154c4:	014bc83a 	sub	r5,zero,r5
 10154c8:	8021003a 	cmpeq	r16,r16,zero
 10154cc:	003fef06 	br	101548c <__divsi3+0x1c>

010154d0 <__modsi3>:
 10154d0:	deffff04 	addi	sp,sp,-4
 10154d4:	dfc00015 	stw	ra,0(sp)
 10154d8:	01800044 	movi	r6,1
 10154dc:	2807883a 	mov	r3,r5
 10154e0:	20000416 	blt	r4,zero,10154f4 <__modsi3+0x24>
 10154e4:	28000c16 	blt	r5,zero,1015518 <__modsi3+0x48>
 10154e8:	dfc00017 	ldw	ra,0(sp)
 10154ec:	dec00104 	addi	sp,sp,4
 10154f0:	10153f41 	jmpi	10153f4 <udivmodsi4>
 10154f4:	0109c83a 	sub	r4,zero,r4
 10154f8:	28000b16 	blt	r5,zero,1015528 <__modsi3+0x58>
 10154fc:	180b883a 	mov	r5,r3
 1015500:	01800044 	movi	r6,1
 1015504:	10153f40 	call	10153f4 <udivmodsi4>
 1015508:	0085c83a 	sub	r2,zero,r2
 101550c:	dfc00017 	ldw	ra,0(sp)
 1015510:	dec00104 	addi	sp,sp,4
 1015514:	f800283a 	ret
 1015518:	014bc83a 	sub	r5,zero,r5
 101551c:	dfc00017 	ldw	ra,0(sp)
 1015520:	dec00104 	addi	sp,sp,4
 1015524:	10153f41 	jmpi	10153f4 <udivmodsi4>
 1015528:	0147c83a 	sub	r3,zero,r5
 101552c:	003ff306 	br	10154fc <__modsi3+0x2c>

01015530 <__udivsi3>:
 1015530:	000d883a 	mov	r6,zero
 1015534:	10153f41 	jmpi	10153f4 <udivmodsi4>

01015538 <__umodsi3>:
 1015538:	01800044 	movi	r6,1
 101553c:	10153f41 	jmpi	10153f4 <udivmodsi4>

01015540 <__clzsi2>:
 1015540:	00bfffd4 	movui	r2,65535
 1015544:	11000e36 	bltu	r2,r4,1015580 <__clzsi2+0x40>
 1015548:	00803fc4 	movi	r2,255
 101554c:	01400204 	movi	r5,8
 1015550:	0007883a 	mov	r3,zero
 1015554:	11001036 	bltu	r2,r4,1015598 <__clzsi2+0x58>
 1015558:	000b883a 	mov	r5,zero
 101555c:	20c6d83a 	srl	r3,r4,r3
 1015560:	008040b4 	movhi	r2,258
 1015564:	10aa1104 	addi	r2,r2,-22460
 1015568:	1887883a 	add	r3,r3,r2
 101556c:	18800003 	ldbu	r2,0(r3)
 1015570:	00c00804 	movi	r3,32
 1015574:	2885883a 	add	r2,r5,r2
 1015578:	1885c83a 	sub	r2,r3,r2
 101557c:	f800283a 	ret
 1015580:	01400404 	movi	r5,16
 1015584:	00804034 	movhi	r2,256
 1015588:	10bfffc4 	addi	r2,r2,-1
 101558c:	2807883a 	mov	r3,r5
 1015590:	113ff22e 	bgeu	r2,r4,101555c <__clzsi2+0x1c>
 1015594:	01400604 	movi	r5,24
 1015598:	2807883a 	mov	r3,r5
 101559c:	20c6d83a 	srl	r3,r4,r3
 10155a0:	008040b4 	movhi	r2,258
 10155a4:	10aa1104 	addi	r2,r2,-22460
 10155a8:	1887883a 	add	r3,r3,r2
 10155ac:	18800003 	ldbu	r2,0(r3)
 10155b0:	00c00804 	movi	r3,32
 10155b4:	2885883a 	add	r2,r5,r2
 10155b8:	1885c83a 	sub	r2,r3,r2
 10155bc:	f800283a 	ret

010155c0 <__unpack_f>:
 10155c0:	21800017 	ldw	r6,0(r4)
 10155c4:	00c02034 	movhi	r3,128
 10155c8:	18ffffc4 	addi	r3,r3,-1
 10155cc:	3004d5fa 	srli	r2,r6,23
 10155d0:	3008d7fa 	srli	r4,r6,31
 10155d4:	30ce703a 	and	r7,r6,r3
 10155d8:	10c03fcc 	andi	r3,r2,255
 10155dc:	29000115 	stw	r4,4(r5)
 10155e0:	1800131e 	bne	r3,zero,1015630 <__unpack_f+0x70>
 10155e4:	38000f26 	beq	r7,zero,1015624 <__unpack_f+0x64>
 10155e8:	380691fa 	slli	r3,r7,7
 10155ec:	01bfe084 	movi	r6,-126
 10155f0:	008000c4 	movi	r2,3
 10155f4:	01100034 	movhi	r4,16384
 10155f8:	213fffc4 	addi	r4,r4,-1
 10155fc:	28800015 	stw	r2,0(r5)
 1015600:	29800215 	stw	r6,8(r5)
 1015604:	20c00536 	bltu	r4,r3,101561c <__unpack_f+0x5c>
 1015608:	3005883a 	mov	r2,r6
 101560c:	18c7883a 	add	r3,r3,r3
 1015610:	10bfffc4 	addi	r2,r2,-1
 1015614:	20fffd2e 	bgeu	r4,r3,101560c <__unpack_f+0x4c>
 1015618:	28800215 	stw	r2,8(r5)
 101561c:	28c00315 	stw	r3,12(r5)
 1015620:	f800283a 	ret
 1015624:	00800084 	movi	r2,2
 1015628:	28800015 	stw	r2,0(r5)
 101562c:	f800283a 	ret
 1015630:	00803fc4 	movi	r2,255
 1015634:	18800826 	beq	r3,r2,1015658 <__unpack_f+0x98>
 1015638:	380491fa 	slli	r2,r7,7
 101563c:	18ffe044 	addi	r3,r3,-127
 1015640:	28c00215 	stw	r3,8(r5)
 1015644:	10900034 	orhi	r2,r2,16384
 1015648:	28800315 	stw	r2,12(r5)
 101564c:	008000c4 	movi	r2,3
 1015650:	28800015 	stw	r2,0(r5)
 1015654:	f800283a 	ret
 1015658:	3800031e 	bne	r7,zero,1015668 <__unpack_f+0xa8>
 101565c:	00800104 	movi	r2,4
 1015660:	28800015 	stw	r2,0(r5)
 1015664:	f800283a 	ret
 1015668:	3080042c 	andhi	r2,r6,16
 101566c:	10000426 	beq	r2,zero,1015680 <__unpack_f+0xc0>
 1015670:	00800044 	movi	r2,1
 1015674:	28800015 	stw	r2,0(r5)
 1015678:	29c00315 	stw	r7,12(r5)
 101567c:	f800283a 	ret
 1015680:	28000015 	stw	zero,0(r5)
 1015684:	003ffc06 	br	1015678 <__unpack_f+0xb8>

01015688 <__fpcmp_parts_f>:
 1015688:	21800017 	ldw	r6,0(r4)
 101568c:	00c00044 	movi	r3,1
 1015690:	19800a2e 	bgeu	r3,r6,10156bc <__fpcmp_parts_f+0x34>
 1015694:	28800017 	ldw	r2,0(r5)
 1015698:	1880082e 	bgeu	r3,r2,10156bc <__fpcmp_parts_f+0x34>
 101569c:	00c00104 	movi	r3,4
 10156a0:	30c01e26 	beq	r6,r3,101571c <__fpcmp_parts_f+0x94>
 10156a4:	10c01a26 	beq	r2,r3,1015710 <__fpcmp_parts_f+0x88>
 10156a8:	00c00084 	movi	r3,2
 10156ac:	30c00526 	beq	r6,r3,10156c4 <__fpcmp_parts_f+0x3c>
 10156b0:	10c0071e 	bne	r2,r3,10156d0 <__fpcmp_parts_f+0x48>
 10156b4:	20800117 	ldw	r2,4(r4)
 10156b8:	1000091e 	bne	r2,zero,10156e0 <__fpcmp_parts_f+0x58>
 10156bc:	00800044 	movi	r2,1
 10156c0:	f800283a 	ret
 10156c4:	10c0121e 	bne	r2,r3,1015710 <__fpcmp_parts_f+0x88>
 10156c8:	0005883a 	mov	r2,zero
 10156cc:	f800283a 	ret
 10156d0:	20c00117 	ldw	r3,4(r4)
 10156d4:	28800117 	ldw	r2,4(r5)
 10156d8:	18800326 	beq	r3,r2,10156e8 <__fpcmp_parts_f+0x60>
 10156dc:	183ff726 	beq	r3,zero,10156bc <__fpcmp_parts_f+0x34>
 10156e0:	00bfffc4 	movi	r2,-1
 10156e4:	f800283a 	ret
 10156e8:	21800217 	ldw	r6,8(r4)
 10156ec:	28800217 	ldw	r2,8(r5)
 10156f0:	11bffa16 	blt	r2,r6,10156dc <__fpcmp_parts_f+0x54>
 10156f4:	30800416 	blt	r6,r2,1015708 <__fpcmp_parts_f+0x80>
 10156f8:	21000317 	ldw	r4,12(r4)
 10156fc:	29400317 	ldw	r5,12(r5)
 1015700:	293ff636 	bltu	r5,r4,10156dc <__fpcmp_parts_f+0x54>
 1015704:	217ff02e 	bgeu	r4,r5,10156c8 <__fpcmp_parts_f+0x40>
 1015708:	183fec1e 	bne	r3,zero,10156bc <__fpcmp_parts_f+0x34>
 101570c:	003ff406 	br	10156e0 <__fpcmp_parts_f+0x58>
 1015710:	28800117 	ldw	r2,4(r5)
 1015714:	103fe91e 	bne	r2,zero,10156bc <__fpcmp_parts_f+0x34>
 1015718:	003ff106 	br	10156e0 <__fpcmp_parts_f+0x58>
 101571c:	11bfe51e 	bne	r2,r6,10156b4 <__fpcmp_parts_f+0x2c>
 1015720:	28c00117 	ldw	r3,4(r5)
 1015724:	20800117 	ldw	r2,4(r4)
 1015728:	1885c83a 	sub	r2,r3,r2
 101572c:	f800283a 	ret

01015730 <__make_fp>:
 1015730:	defffb04 	addi	sp,sp,-20
 1015734:	d9000015 	stw	r4,0(sp)
 1015738:	d809883a 	mov	r4,sp
 101573c:	dfc00415 	stw	ra,16(sp)
 1015740:	d9400115 	stw	r5,4(sp)
 1015744:	d9800215 	stw	r6,8(sp)
 1015748:	d9c00315 	stw	r7,12(sp)
 101574c:	1015c700 	call	1015c70 <__pack_f>
 1015750:	dfc00417 	ldw	ra,16(sp)
 1015754:	dec00504 	addi	sp,sp,20
 1015758:	f800283a 	ret

0101575c <__pack_d>:
 101575c:	20c00017 	ldw	r3,0(r4)
 1015760:	defffd04 	addi	sp,sp,-12
 1015764:	dc000015 	stw	r16,0(sp)
 1015768:	dc800215 	stw	r18,8(sp)
 101576c:	dc400115 	stw	r17,4(sp)
 1015770:	00800044 	movi	r2,1
 1015774:	22000317 	ldw	r8,12(r4)
 1015778:	001f883a 	mov	r15,zero
 101577c:	22400417 	ldw	r9,16(r4)
 1015780:	24000117 	ldw	r16,4(r4)
 1015784:	10c0552e 	bgeu	r2,r3,10158dc <__pack_d+0x180>
 1015788:	00800104 	movi	r2,4
 101578c:	18804f26 	beq	r3,r2,10158cc <__pack_d+0x170>
 1015790:	00800084 	movi	r2,2
 1015794:	18800226 	beq	r3,r2,10157a0 <__pack_d+0x44>
 1015798:	4244b03a 	or	r2,r8,r9
 101579c:	10001a1e 	bne	r2,zero,1015808 <__pack_d+0xac>
 10157a0:	000d883a 	mov	r6,zero
 10157a4:	000f883a 	mov	r7,zero
 10157a8:	0011883a 	mov	r8,zero
 10157ac:	00800434 	movhi	r2,16
 10157b0:	10bfffc4 	addi	r2,r2,-1
 10157b4:	301d883a 	mov	r14,r6
 10157b8:	3884703a 	and	r2,r7,r2
 10157bc:	400a953a 	slli	r5,r8,20
 10157c0:	79bffc2c 	andhi	r6,r15,65520
 10157c4:	308cb03a 	or	r6,r6,r2
 10157c8:	00e00434 	movhi	r3,32784
 10157cc:	18ffffc4 	addi	r3,r3,-1
 10157d0:	800497fa 	slli	r2,r16,31
 10157d4:	30c6703a 	and	r3,r6,r3
 10157d8:	1946b03a 	or	r3,r3,r5
 10157dc:	01600034 	movhi	r5,32768
 10157e0:	297fffc4 	addi	r5,r5,-1
 10157e4:	194a703a 	and	r5,r3,r5
 10157e8:	288ab03a 	or	r5,r5,r2
 10157ec:	2807883a 	mov	r3,r5
 10157f0:	7005883a 	mov	r2,r14
 10157f4:	dc800217 	ldw	r18,8(sp)
 10157f8:	dc400117 	ldw	r17,4(sp)
 10157fc:	dc000017 	ldw	r16,0(sp)
 1015800:	dec00304 	addi	sp,sp,12
 1015804:	f800283a 	ret
 1015808:	21000217 	ldw	r4,8(r4)
 101580c:	00bf0084 	movi	r2,-1022
 1015810:	20803f16 	blt	r4,r2,1015910 <__pack_d+0x1b4>
 1015814:	0080ffc4 	movi	r2,1023
 1015818:	11002c16 	blt	r2,r4,10158cc <__pack_d+0x170>
 101581c:	00803fc4 	movi	r2,255
 1015820:	408c703a 	and	r6,r8,r2
 1015824:	00802004 	movi	r2,128
 1015828:	0007883a 	mov	r3,zero
 101582c:	000f883a 	mov	r7,zero
 1015830:	2280ffc4 	addi	r10,r4,1023
 1015834:	30801e26 	beq	r6,r2,10158b0 <__pack_d+0x154>
 1015838:	00801fc4 	movi	r2,127
 101583c:	4089883a 	add	r4,r8,r2
 1015840:	220d803a 	cmpltu	r6,r4,r8
 1015844:	324d883a 	add	r6,r6,r9
 1015848:	2011883a 	mov	r8,r4
 101584c:	3013883a 	mov	r9,r6
 1015850:	00880034 	movhi	r2,8192
 1015854:	10bfffc4 	addi	r2,r2,-1
 1015858:	12400d36 	bltu	r2,r9,1015890 <__pack_d+0x134>
 101585c:	4804963a 	slli	r2,r9,24
 1015860:	400cd23a 	srli	r6,r8,8
 1015864:	480ed23a 	srli	r7,r9,8
 1015868:	013fffc4 	movi	r4,-1
 101586c:	118cb03a 	or	r6,r2,r6
 1015870:	01400434 	movhi	r5,16
 1015874:	297fffc4 	addi	r5,r5,-1
 1015878:	3104703a 	and	r2,r6,r4
 101587c:	3946703a 	and	r3,r7,r5
 1015880:	5201ffcc 	andi	r8,r10,2047
 1015884:	100d883a 	mov	r6,r2
 1015888:	180f883a 	mov	r7,r3
 101588c:	003fc706 	br	10157ac <__pack_d+0x50>
 1015890:	480897fa 	slli	r4,r9,31
 1015894:	4004d07a 	srli	r2,r8,1
 1015898:	4806d07a 	srli	r3,r9,1
 101589c:	52800044 	addi	r10,r10,1
 10158a0:	2084b03a 	or	r2,r4,r2
 10158a4:	1011883a 	mov	r8,r2
 10158a8:	1813883a 	mov	r9,r3
 10158ac:	003feb06 	br	101585c <__pack_d+0x100>
 10158b0:	383fe11e 	bne	r7,zero,1015838 <__pack_d+0xdc>
 10158b4:	01004004 	movi	r4,256
 10158b8:	4104703a 	and	r2,r8,r4
 10158bc:	10c4b03a 	or	r2,r2,r3
 10158c0:	103fe326 	beq	r2,zero,1015850 <__pack_d+0xf4>
 10158c4:	3005883a 	mov	r2,r6
 10158c8:	003fdc06 	br	101583c <__pack_d+0xe0>
 10158cc:	000d883a 	mov	r6,zero
 10158d0:	000f883a 	mov	r7,zero
 10158d4:	0201ffc4 	movi	r8,2047
 10158d8:	003fb406 	br	10157ac <__pack_d+0x50>
 10158dc:	0005883a 	mov	r2,zero
 10158e0:	00c00234 	movhi	r3,8
 10158e4:	408cb03a 	or	r6,r8,r2
 10158e8:	48ceb03a 	or	r7,r9,r3
 10158ec:	013fffc4 	movi	r4,-1
 10158f0:	01400434 	movhi	r5,16
 10158f4:	297fffc4 	addi	r5,r5,-1
 10158f8:	3104703a 	and	r2,r6,r4
 10158fc:	3946703a 	and	r3,r7,r5
 1015900:	100d883a 	mov	r6,r2
 1015904:	180f883a 	mov	r7,r3
 1015908:	0201ffc4 	movi	r8,2047
 101590c:	003fa706 	br	10157ac <__pack_d+0x50>
 1015910:	1109c83a 	sub	r4,r2,r4
 1015914:	00800e04 	movi	r2,56
 1015918:	11004316 	blt	r2,r4,1015a28 <__pack_d+0x2cc>
 101591c:	21fff804 	addi	r7,r4,-32
 1015920:	38004516 	blt	r7,zero,1015a38 <__pack_d+0x2dc>
 1015924:	49d8d83a 	srl	r12,r9,r7
 1015928:	001b883a 	mov	r13,zero
 101592c:	0023883a 	mov	r17,zero
 1015930:	01400044 	movi	r5,1
 1015934:	0025883a 	mov	r18,zero
 1015938:	38004716 	blt	r7,zero,1015a58 <__pack_d+0x2fc>
 101593c:	29d6983a 	sll	r11,r5,r7
 1015940:	0015883a 	mov	r10,zero
 1015944:	00bfffc4 	movi	r2,-1
 1015948:	5089883a 	add	r4,r10,r2
 101594c:	588b883a 	add	r5,r11,r2
 1015950:	228d803a 	cmpltu	r6,r4,r10
 1015954:	314b883a 	add	r5,r6,r5
 1015958:	4104703a 	and	r2,r8,r4
 101595c:	4946703a 	and	r3,r9,r5
 1015960:	10c4b03a 	or	r2,r2,r3
 1015964:	10000226 	beq	r2,zero,1015970 <__pack_d+0x214>
 1015968:	04400044 	movi	r17,1
 101596c:	0025883a 	mov	r18,zero
 1015970:	00803fc4 	movi	r2,255
 1015974:	644eb03a 	or	r7,r12,r17
 1015978:	3892703a 	and	r9,r7,r2
 101597c:	00802004 	movi	r2,128
 1015980:	6c90b03a 	or	r8,r13,r18
 1015984:	0015883a 	mov	r10,zero
 1015988:	48801626 	beq	r9,r2,10159e4 <__pack_d+0x288>
 101598c:	01001fc4 	movi	r4,127
 1015990:	3905883a 	add	r2,r7,r4
 1015994:	11cd803a 	cmpltu	r6,r2,r7
 1015998:	320d883a 	add	r6,r6,r8
 101599c:	100f883a 	mov	r7,r2
 10159a0:	00840034 	movhi	r2,4096
 10159a4:	10bfffc4 	addi	r2,r2,-1
 10159a8:	3011883a 	mov	r8,r6
 10159ac:	0007883a 	mov	r3,zero
 10159b0:	11801b36 	bltu	r2,r6,1015a20 <__pack_d+0x2c4>
 10159b4:	4004963a 	slli	r2,r8,24
 10159b8:	3808d23a 	srli	r4,r7,8
 10159bc:	400ad23a 	srli	r5,r8,8
 10159c0:	1813883a 	mov	r9,r3
 10159c4:	1108b03a 	or	r4,r2,r4
 10159c8:	00bfffc4 	movi	r2,-1
 10159cc:	00c00434 	movhi	r3,16
 10159d0:	18ffffc4 	addi	r3,r3,-1
 10159d4:	208c703a 	and	r6,r4,r2
 10159d8:	28ce703a 	and	r7,r5,r3
 10159dc:	4a01ffcc 	andi	r8,r9,2047
 10159e0:	003f7206 	br	10157ac <__pack_d+0x50>
 10159e4:	503fe91e 	bne	r10,zero,101598c <__pack_d+0x230>
 10159e8:	01004004 	movi	r4,256
 10159ec:	3904703a 	and	r2,r7,r4
 10159f0:	0007883a 	mov	r3,zero
 10159f4:	10c4b03a 	or	r2,r2,r3
 10159f8:	10000626 	beq	r2,zero,1015a14 <__pack_d+0x2b8>
 10159fc:	3a45883a 	add	r2,r7,r9
 1015a00:	11cd803a 	cmpltu	r6,r2,r7
 1015a04:	320d883a 	add	r6,r6,r8
 1015a08:	100f883a 	mov	r7,r2
 1015a0c:	3011883a 	mov	r8,r6
 1015a10:	0007883a 	mov	r3,zero
 1015a14:	00840034 	movhi	r2,4096
 1015a18:	10bfffc4 	addi	r2,r2,-1
 1015a1c:	123fe52e 	bgeu	r2,r8,10159b4 <__pack_d+0x258>
 1015a20:	00c00044 	movi	r3,1
 1015a24:	003fe306 	br	10159b4 <__pack_d+0x258>
 1015a28:	0009883a 	mov	r4,zero
 1015a2c:	0013883a 	mov	r9,zero
 1015a30:	000b883a 	mov	r5,zero
 1015a34:	003fe406 	br	10159c8 <__pack_d+0x26c>
 1015a38:	4a47883a 	add	r3,r9,r9
 1015a3c:	008007c4 	movi	r2,31
 1015a40:	1105c83a 	sub	r2,r2,r4
 1015a44:	1886983a 	sll	r3,r3,r2
 1015a48:	4118d83a 	srl	r12,r8,r4
 1015a4c:	491ad83a 	srl	r13,r9,r4
 1015a50:	1b18b03a 	or	r12,r3,r12
 1015a54:	003fb506 	br	101592c <__pack_d+0x1d0>
 1015a58:	2806d07a 	srli	r3,r5,1
 1015a5c:	008007c4 	movi	r2,31
 1015a60:	1105c83a 	sub	r2,r2,r4
 1015a64:	1896d83a 	srl	r11,r3,r2
 1015a68:	2914983a 	sll	r10,r5,r4
 1015a6c:	003fb506 	br	1015944 <__pack_d+0x1e8>

01015a70 <__unpack_d>:
 1015a70:	20c00117 	ldw	r3,4(r4)
 1015a74:	22400017 	ldw	r9,0(r4)
 1015a78:	00800434 	movhi	r2,16
 1015a7c:	10bfffc4 	addi	r2,r2,-1
 1015a80:	1808d53a 	srli	r4,r3,20
 1015a84:	180cd7fa 	srli	r6,r3,31
 1015a88:	1894703a 	and	r10,r3,r2
 1015a8c:	2201ffcc 	andi	r8,r4,2047
 1015a90:	281b883a 	mov	r13,r5
 1015a94:	4817883a 	mov	r11,r9
 1015a98:	29800115 	stw	r6,4(r5)
 1015a9c:	5019883a 	mov	r12,r10
 1015aa0:	40001e1e 	bne	r8,zero,1015b1c <__unpack_d+0xac>
 1015aa4:	4a84b03a 	or	r2,r9,r10
 1015aa8:	10001926 	beq	r2,zero,1015b10 <__unpack_d+0xa0>
 1015aac:	4804d63a 	srli	r2,r9,24
 1015ab0:	500c923a 	slli	r6,r10,8
 1015ab4:	013f0084 	movi	r4,-1022
 1015ab8:	00c40034 	movhi	r3,4096
 1015abc:	18ffffc4 	addi	r3,r3,-1
 1015ac0:	118cb03a 	or	r6,r2,r6
 1015ac4:	008000c4 	movi	r2,3
 1015ac8:	480a923a 	slli	r5,r9,8
 1015acc:	68800015 	stw	r2,0(r13)
 1015ad0:	69000215 	stw	r4,8(r13)
 1015ad4:	19800b36 	bltu	r3,r6,1015b04 <__unpack_d+0x94>
 1015ad8:	200f883a 	mov	r7,r4
 1015adc:	1811883a 	mov	r8,r3
 1015ae0:	2945883a 	add	r2,r5,r5
 1015ae4:	1149803a 	cmpltu	r4,r2,r5
 1015ae8:	3187883a 	add	r3,r6,r6
 1015aec:	20c9883a 	add	r4,r4,r3
 1015af0:	100b883a 	mov	r5,r2
 1015af4:	200d883a 	mov	r6,r4
 1015af8:	39ffffc4 	addi	r7,r7,-1
 1015afc:	413ff82e 	bgeu	r8,r4,1015ae0 <__unpack_d+0x70>
 1015b00:	69c00215 	stw	r7,8(r13)
 1015b04:	69800415 	stw	r6,16(r13)
 1015b08:	69400315 	stw	r5,12(r13)
 1015b0c:	f800283a 	ret
 1015b10:	00800084 	movi	r2,2
 1015b14:	28800015 	stw	r2,0(r5)
 1015b18:	f800283a 	ret
 1015b1c:	0081ffc4 	movi	r2,2047
 1015b20:	40800f26 	beq	r8,r2,1015b60 <__unpack_d+0xf0>
 1015b24:	480cd63a 	srli	r6,r9,24
 1015b28:	5006923a 	slli	r3,r10,8
 1015b2c:	4804923a 	slli	r2,r9,8
 1015b30:	0009883a 	mov	r4,zero
 1015b34:	30c6b03a 	or	r3,r6,r3
 1015b38:	01440034 	movhi	r5,4096
 1015b3c:	110cb03a 	or	r6,r2,r4
 1015b40:	423f0044 	addi	r8,r8,-1023
 1015b44:	194eb03a 	or	r7,r3,r5
 1015b48:	008000c4 	movi	r2,3
 1015b4c:	69c00415 	stw	r7,16(r13)
 1015b50:	6a000215 	stw	r8,8(r13)
 1015b54:	68800015 	stw	r2,0(r13)
 1015b58:	69800315 	stw	r6,12(r13)
 1015b5c:	f800283a 	ret
 1015b60:	4a84b03a 	or	r2,r9,r10
 1015b64:	1000031e 	bne	r2,zero,1015b74 <__unpack_d+0x104>
 1015b68:	00800104 	movi	r2,4
 1015b6c:	28800015 	stw	r2,0(r5)
 1015b70:	f800283a 	ret
 1015b74:	0009883a 	mov	r4,zero
 1015b78:	01400234 	movhi	r5,8
 1015b7c:	4904703a 	and	r2,r9,r4
 1015b80:	5146703a 	and	r3,r10,r5
 1015b84:	10c4b03a 	or	r2,r2,r3
 1015b88:	10000526 	beq	r2,zero,1015ba0 <__unpack_d+0x130>
 1015b8c:	00800044 	movi	r2,1
 1015b90:	68800015 	stw	r2,0(r13)
 1015b94:	6b000415 	stw	r12,16(r13)
 1015b98:	6ac00315 	stw	r11,12(r13)
 1015b9c:	f800283a 	ret
 1015ba0:	68000015 	stw	zero,0(r13)
 1015ba4:	003ffb06 	br	1015b94 <__unpack_d+0x124>

01015ba8 <__fpcmp_parts_d>:
 1015ba8:	21800017 	ldw	r6,0(r4)
 1015bac:	00c00044 	movi	r3,1
 1015bb0:	19800a2e 	bgeu	r3,r6,1015bdc <__fpcmp_parts_d+0x34>
 1015bb4:	28800017 	ldw	r2,0(r5)
 1015bb8:	1880082e 	bgeu	r3,r2,1015bdc <__fpcmp_parts_d+0x34>
 1015bbc:	00c00104 	movi	r3,4
 1015bc0:	30c02626 	beq	r6,r3,1015c5c <__fpcmp_parts_d+0xb4>
 1015bc4:	10c02226 	beq	r2,r3,1015c50 <__fpcmp_parts_d+0xa8>
 1015bc8:	00c00084 	movi	r3,2
 1015bcc:	30c00526 	beq	r6,r3,1015be4 <__fpcmp_parts_d+0x3c>
 1015bd0:	10c0071e 	bne	r2,r3,1015bf0 <__fpcmp_parts_d+0x48>
 1015bd4:	20800117 	ldw	r2,4(r4)
 1015bd8:	1000091e 	bne	r2,zero,1015c00 <__fpcmp_parts_d+0x58>
 1015bdc:	00800044 	movi	r2,1
 1015be0:	f800283a 	ret
 1015be4:	10c01a1e 	bne	r2,r3,1015c50 <__fpcmp_parts_d+0xa8>
 1015be8:	0005883a 	mov	r2,zero
 1015bec:	f800283a 	ret
 1015bf0:	22000117 	ldw	r8,4(r4)
 1015bf4:	28800117 	ldw	r2,4(r5)
 1015bf8:	40800326 	beq	r8,r2,1015c08 <__fpcmp_parts_d+0x60>
 1015bfc:	403ff726 	beq	r8,zero,1015bdc <__fpcmp_parts_d+0x34>
 1015c00:	00bfffc4 	movi	r2,-1
 1015c04:	f800283a 	ret
 1015c08:	20c00217 	ldw	r3,8(r4)
 1015c0c:	28800217 	ldw	r2,8(r5)
 1015c10:	10fffa16 	blt	r2,r3,1015bfc <__fpcmp_parts_d+0x54>
 1015c14:	18800916 	blt	r3,r2,1015c3c <__fpcmp_parts_d+0x94>
 1015c18:	21c00417 	ldw	r7,16(r4)
 1015c1c:	28c00417 	ldw	r3,16(r5)
 1015c20:	21800317 	ldw	r6,12(r4)
 1015c24:	28800317 	ldw	r2,12(r5)
 1015c28:	19fff436 	bltu	r3,r7,1015bfc <__fpcmp_parts_d+0x54>
 1015c2c:	38c00526 	beq	r7,r3,1015c44 <__fpcmp_parts_d+0x9c>
 1015c30:	38c00236 	bltu	r7,r3,1015c3c <__fpcmp_parts_d+0x94>
 1015c34:	19ffec1e 	bne	r3,r7,1015be8 <__fpcmp_parts_d+0x40>
 1015c38:	30bfeb2e 	bgeu	r6,r2,1015be8 <__fpcmp_parts_d+0x40>
 1015c3c:	403fe71e 	bne	r8,zero,1015bdc <__fpcmp_parts_d+0x34>
 1015c40:	003fef06 	br	1015c00 <__fpcmp_parts_d+0x58>
 1015c44:	11bffa2e 	bgeu	r2,r6,1015c30 <__fpcmp_parts_d+0x88>
 1015c48:	403fe426 	beq	r8,zero,1015bdc <__fpcmp_parts_d+0x34>
 1015c4c:	003fec06 	br	1015c00 <__fpcmp_parts_d+0x58>
 1015c50:	28800117 	ldw	r2,4(r5)
 1015c54:	103fe11e 	bne	r2,zero,1015bdc <__fpcmp_parts_d+0x34>
 1015c58:	003fe906 	br	1015c00 <__fpcmp_parts_d+0x58>
 1015c5c:	11bfdd1e 	bne	r2,r6,1015bd4 <__fpcmp_parts_d+0x2c>
 1015c60:	28c00117 	ldw	r3,4(r5)
 1015c64:	20800117 	ldw	r2,4(r4)
 1015c68:	1885c83a 	sub	r2,r3,r2
 1015c6c:	f800283a 	ret

01015c70 <__pack_f>:
 1015c70:	20c00017 	ldw	r3,0(r4)
 1015c74:	01c00044 	movi	r7,1
 1015c78:	21800317 	ldw	r6,12(r4)
 1015c7c:	21400117 	ldw	r5,4(r4)
 1015c80:	38c02d2e 	bgeu	r7,r3,1015d38 <__pack_f+0xc8>
 1015c84:	00800104 	movi	r2,4
 1015c88:	18802826 	beq	r3,r2,1015d2c <__pack_f+0xbc>
 1015c8c:	00800084 	movi	r2,2
 1015c90:	18800126 	beq	r3,r2,1015c98 <__pack_f+0x28>
 1015c94:	3000101e 	bne	r6,zero,1015cd8 <__pack_f+0x68>
 1015c98:	000d883a 	mov	r6,zero
 1015c9c:	0007883a 	mov	r3,zero
 1015ca0:	19003fcc 	andi	r4,r3,255
 1015ca4:	200895fa 	slli	r4,r4,23
 1015ca8:	00c02034 	movhi	r3,128
 1015cac:	18ffffc4 	addi	r3,r3,-1
 1015cb0:	30c6703a 	and	r3,r6,r3
 1015cb4:	10a0002c 	andhi	r2,r2,32768
 1015cb8:	10c4b03a 	or	r2,r2,r3
 1015cbc:	280a97fa 	slli	r5,r5,31
 1015cc0:	1104b03a 	or	r2,r2,r4
 1015cc4:	00e00034 	movhi	r3,32768
 1015cc8:	18ffffc4 	addi	r3,r3,-1
 1015ccc:	10c4703a 	and	r2,r2,r3
 1015cd0:	1144b03a 	or	r2,r2,r5
 1015cd4:	f800283a 	ret
 1015cd8:	21000217 	ldw	r4,8(r4)
 1015cdc:	00bfe084 	movi	r2,-126
 1015ce0:	20801b16 	blt	r4,r2,1015d50 <__pack_f+0xe0>
 1015ce4:	00801fc4 	movi	r2,127
 1015ce8:	11001016 	blt	r2,r4,1015d2c <__pack_f+0xbc>
 1015cec:	308e703a 	and	r7,r6,r2
 1015cf0:	2087883a 	add	r3,r4,r2
 1015cf4:	00801004 	movi	r2,64
 1015cf8:	38800526 	beq	r7,r2,1015d10 <__pack_f+0xa0>
 1015cfc:	31800fc4 	addi	r6,r6,63
 1015d00:	30000716 	blt	r6,zero,1015d20 <__pack_f+0xb0>
 1015d04:	300490ba 	slli	r2,r6,2
 1015d08:	100cd27a 	srli	r6,r2,9
 1015d0c:	003fe406 	br	1015ca0 <__pack_f+0x30>
 1015d10:	3080200c 	andi	r2,r6,128
 1015d14:	103ffa26 	beq	r2,zero,1015d00 <__pack_f+0x90>
 1015d18:	31cd883a 	add	r6,r6,r7
 1015d1c:	003ff806 	br	1015d00 <__pack_f+0x90>
 1015d20:	300cd07a 	srli	r6,r6,1
 1015d24:	18c00044 	addi	r3,r3,1
 1015d28:	003ff606 	br	1015d04 <__pack_f+0x94>
 1015d2c:	000d883a 	mov	r6,zero
 1015d30:	00ffffc4 	movi	r3,-1
 1015d34:	003fda06 	br	1015ca0 <__pack_f+0x30>
 1015d38:	31800434 	orhi	r6,r6,16
 1015d3c:	00802034 	movhi	r2,128
 1015d40:	10bfffc4 	addi	r2,r2,-1
 1015d44:	308c703a 	and	r6,r6,r2
 1015d48:	00ffffc4 	movi	r3,-1
 1015d4c:	003fd406 	br	1015ca0 <__pack_f+0x30>
 1015d50:	1109c83a 	sub	r4,r2,r4
 1015d54:	00800644 	movi	r2,25
 1015d58:	11001216 	blt	r2,r4,1015da4 <__pack_f+0x134>
 1015d5c:	3904983a 	sll	r2,r7,r4
 1015d60:	3106d83a 	srl	r3,r6,r4
 1015d64:	10bfffc4 	addi	r2,r2,-1
 1015d68:	3084703a 	and	r2,r6,r2
 1015d6c:	1004c03a 	cmpne	r2,r2,zero
 1015d70:	1886b03a 	or	r3,r3,r2
 1015d74:	19001fcc 	andi	r4,r3,127
 1015d78:	00801004 	movi	r2,64
 1015d7c:	20800c26 	beq	r4,r2,1015db0 <__pack_f+0x140>
 1015d80:	18c00fc4 	addi	r3,r3,63
 1015d84:	00900034 	movhi	r2,16384
 1015d88:	10bfffc4 	addi	r2,r2,-1
 1015d8c:	180cd1fa 	srli	r6,r3,7
 1015d90:	10c7803a 	cmpltu	r3,r2,r3
 1015d94:	00802034 	movhi	r2,128
 1015d98:	10bfffc4 	addi	r2,r2,-1
 1015d9c:	308c703a 	and	r6,r6,r2
 1015da0:	003fbf06 	br	1015ca0 <__pack_f+0x30>
 1015da4:	0007883a 	mov	r3,zero
 1015da8:	000d883a 	mov	r6,zero
 1015dac:	003ff906 	br	1015d94 <__pack_f+0x124>
 1015db0:	1880200c 	andi	r2,r3,128
 1015db4:	10000126 	beq	r2,zero,1015dbc <__pack_f+0x14c>
 1015db8:	1907883a 	add	r3,r3,r4
 1015dbc:	180cd1fa 	srli	r6,r3,7
 1015dc0:	00900034 	movhi	r2,16384
 1015dc4:	10bfffc4 	addi	r2,r2,-1
 1015dc8:	10c7803a 	cmpltu	r3,r2,r3
 1015dcc:	003ff106 	br	1015d94 <__pack_f+0x124>

01015dd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1015dd0:	defff804 	addi	sp,sp,-32
 1015dd4:	dfc00715 	stw	ra,28(sp)
 1015dd8:	df000615 	stw	fp,24(sp)
 1015ddc:	df000604 	addi	fp,sp,24
 1015de0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1015de4:	e0bffc17 	ldw	r2,-16(fp)
 1015de8:	1004803a 	cmplt	r2,r2,zero
 1015dec:	1000081e 	bne	r2,zero,1015e10 <close+0x40>
 1015df0:	e0bffc17 	ldw	r2,-16(fp)
 1015df4:	10800324 	muli	r2,r2,12
 1015df8:	1007883a 	mov	r3,r2
 1015dfc:	008040b4 	movhi	r2,258
 1015e00:	10ad6104 	addi	r2,r2,-19068
 1015e04:	1887883a 	add	r3,r3,r2
 1015e08:	e0ffff15 	stw	r3,-4(fp)
 1015e0c:	00000106 	br	1015e14 <close+0x44>
 1015e10:	e03fff15 	stw	zero,-4(fp)
 1015e14:	e0bfff17 	ldw	r2,-4(fp)
 1015e18:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1015e1c:	e0bffb17 	ldw	r2,-20(fp)
 1015e20:	1005003a 	cmpeq	r2,r2,zero
 1015e24:	10001d1e 	bne	r2,zero,1015e9c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1015e28:	e0bffb17 	ldw	r2,-20(fp)
 1015e2c:	10800017 	ldw	r2,0(r2)
 1015e30:	10800417 	ldw	r2,16(r2)
 1015e34:	1005003a 	cmpeq	r2,r2,zero
 1015e38:	1000071e 	bne	r2,zero,1015e58 <close+0x88>
 1015e3c:	e0bffb17 	ldw	r2,-20(fp)
 1015e40:	10800017 	ldw	r2,0(r2)
 1015e44:	10800417 	ldw	r2,16(r2)
 1015e48:	e13ffb17 	ldw	r4,-20(fp)
 1015e4c:	103ee83a 	callr	r2
 1015e50:	e0bffe15 	stw	r2,-8(fp)
 1015e54:	00000106 	br	1015e5c <close+0x8c>
 1015e58:	e03ffe15 	stw	zero,-8(fp)
 1015e5c:	e0bffe17 	ldw	r2,-8(fp)
 1015e60:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1015e64:	e13ffc17 	ldw	r4,-16(fp)
 1015e68:	10169f40 	call	10169f4 <alt_release_fd>
    if (rval < 0)
 1015e6c:	e0bffa17 	ldw	r2,-24(fp)
 1015e70:	1004403a 	cmpge	r2,r2,zero
 1015e74:	1000071e 	bne	r2,zero,1015e94 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1015e78:	1015ecc0 	call	1015ecc <alt_get_errno>
 1015e7c:	e0fffa17 	ldw	r3,-24(fp)
 1015e80:	00c7c83a 	sub	r3,zero,r3
 1015e84:	10c00015 	stw	r3,0(r2)
      return -1;
 1015e88:	00bfffc4 	movi	r2,-1
 1015e8c:	e0bffd15 	stw	r2,-12(fp)
 1015e90:	00000806 	br	1015eb4 <close+0xe4>
    }
    return 0;
 1015e94:	e03ffd15 	stw	zero,-12(fp)
 1015e98:	00000606 	br	1015eb4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1015e9c:	1015ecc0 	call	1015ecc <alt_get_errno>
 1015ea0:	1007883a 	mov	r3,r2
 1015ea4:	00801444 	movi	r2,81
 1015ea8:	18800015 	stw	r2,0(r3)
    return -1;
 1015eac:	00bfffc4 	movi	r2,-1
 1015eb0:	e0bffd15 	stw	r2,-12(fp)
 1015eb4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1015eb8:	e037883a 	mov	sp,fp
 1015ebc:	dfc00117 	ldw	ra,4(sp)
 1015ec0:	df000017 	ldw	fp,0(sp)
 1015ec4:	dec00204 	addi	sp,sp,8
 1015ec8:	f800283a 	ret

01015ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1015ecc:	defffd04 	addi	sp,sp,-12
 1015ed0:	dfc00215 	stw	ra,8(sp)
 1015ed4:	df000115 	stw	fp,4(sp)
 1015ed8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1015edc:	008040b4 	movhi	r2,258
 1015ee0:	10b26004 	addi	r2,r2,-13952
 1015ee4:	10800017 	ldw	r2,0(r2)
 1015ee8:	1005003a 	cmpeq	r2,r2,zero
 1015eec:	1000061e 	bne	r2,zero,1015f08 <alt_get_errno+0x3c>
 1015ef0:	008040b4 	movhi	r2,258
 1015ef4:	10b26004 	addi	r2,r2,-13952
 1015ef8:	10800017 	ldw	r2,0(r2)
 1015efc:	103ee83a 	callr	r2
 1015f00:	e0bfff15 	stw	r2,-4(fp)
 1015f04:	00000306 	br	1015f14 <alt_get_errno+0x48>
 1015f08:	008040b4 	movhi	r2,258
 1015f0c:	10ba4204 	addi	r2,r2,-5880
 1015f10:	e0bfff15 	stw	r2,-4(fp)
 1015f14:	e0bfff17 	ldw	r2,-4(fp)
}
 1015f18:	e037883a 	mov	sp,fp
 1015f1c:	dfc00117 	ldw	ra,4(sp)
 1015f20:	df000017 	ldw	fp,0(sp)
 1015f24:	dec00204 	addi	sp,sp,8
 1015f28:	f800283a 	ret

01015f2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1015f2c:	defffc04 	addi	sp,sp,-16
 1015f30:	df000315 	stw	fp,12(sp)
 1015f34:	df000304 	addi	fp,sp,12
 1015f38:	e13ffd15 	stw	r4,-12(fp)
 1015f3c:	e17ffe15 	stw	r5,-8(fp)
 1015f40:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1015f44:	e0bfff17 	ldw	r2,-4(fp)
}
 1015f48:	e037883a 	mov	sp,fp
 1015f4c:	df000017 	ldw	fp,0(sp)
 1015f50:	dec00104 	addi	sp,sp,4
 1015f54:	f800283a 	ret

01015f58 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1015f58:	defffd04 	addi	sp,sp,-12
 1015f5c:	df000215 	stw	fp,8(sp)
 1015f60:	df000204 	addi	fp,sp,8
 1015f64:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1015f68:	e0bfff17 	ldw	r2,-4(fp)
 1015f6c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1015f70:	e0bffe17 	ldw	r2,-8(fp)
 1015f74:	1005003a 	cmpeq	r2,r2,zero
 1015f78:	1000021e 	bne	r2,zero,1015f84 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1015f7c:	002af070 	cmpltui	zero,zero,43969
 1015f80:	00000106 	br	1015f88 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1015f84:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1015f88:	e037883a 	mov	sp,fp
 1015f8c:	df000017 	ldw	fp,0(sp)
 1015f90:	dec00104 	addi	sp,sp,4
 1015f94:	f800283a 	ret

01015f98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1015f98:	defffd04 	addi	sp,sp,-12
 1015f9c:	dfc00215 	stw	ra,8(sp)
 1015fa0:	df000115 	stw	fp,4(sp)
 1015fa4:	df000104 	addi	fp,sp,4
 1015fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1015fac:	e13fff17 	ldw	r4,-4(fp)
 1015fb0:	1015f580 	call	1015f58 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1015fb4:	003fff06 	br	1015fb4 <_exit+0x1c>

01015fb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1015fb8:	defff904 	addi	sp,sp,-28
 1015fbc:	dfc00615 	stw	ra,24(sp)
 1015fc0:	df000515 	stw	fp,20(sp)
 1015fc4:	df000504 	addi	fp,sp,20
 1015fc8:	e13ffc15 	stw	r4,-16(fp)
 1015fcc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1015fd0:	e0bffc17 	ldw	r2,-16(fp)
 1015fd4:	1004803a 	cmplt	r2,r2,zero
 1015fd8:	1000081e 	bne	r2,zero,1015ffc <fstat+0x44>
 1015fdc:	e0bffc17 	ldw	r2,-16(fp)
 1015fe0:	10800324 	muli	r2,r2,12
 1015fe4:	1007883a 	mov	r3,r2
 1015fe8:	008040b4 	movhi	r2,258
 1015fec:	10ad6104 	addi	r2,r2,-19068
 1015ff0:	1887883a 	add	r3,r3,r2
 1015ff4:	e0ffff15 	stw	r3,-4(fp)
 1015ff8:	00000106 	br	1016000 <fstat+0x48>
 1015ffc:	e03fff15 	stw	zero,-4(fp)
 1016000:	e0bfff17 	ldw	r2,-4(fp)
 1016004:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1016008:	e0bffb17 	ldw	r2,-20(fp)
 101600c:	1005003a 	cmpeq	r2,r2,zero
 1016010:	1000121e 	bne	r2,zero,101605c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1016014:	e0bffb17 	ldw	r2,-20(fp)
 1016018:	10800017 	ldw	r2,0(r2)
 101601c:	10800817 	ldw	r2,32(r2)
 1016020:	1005003a 	cmpeq	r2,r2,zero
 1016024:	1000081e 	bne	r2,zero,1016048 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1016028:	e0bffb17 	ldw	r2,-20(fp)
 101602c:	10800017 	ldw	r2,0(r2)
 1016030:	10800817 	ldw	r2,32(r2)
 1016034:	e13ffb17 	ldw	r4,-20(fp)
 1016038:	e17ffd17 	ldw	r5,-12(fp)
 101603c:	103ee83a 	callr	r2
 1016040:	e0bffe15 	stw	r2,-8(fp)
 1016044:	00000b06 	br	1016074 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1016048:	e0fffd17 	ldw	r3,-12(fp)
 101604c:	00880004 	movi	r2,8192
 1016050:	18800115 	stw	r2,4(r3)
      return 0;
 1016054:	e03ffe15 	stw	zero,-8(fp)
 1016058:	00000606 	br	1016074 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 101605c:	101608c0 	call	101608c <alt_get_errno>
 1016060:	1007883a 	mov	r3,r2
 1016064:	00801444 	movi	r2,81
 1016068:	18800015 	stw	r2,0(r3)
    return -1;
 101606c:	00bfffc4 	movi	r2,-1
 1016070:	e0bffe15 	stw	r2,-8(fp)
 1016074:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1016078:	e037883a 	mov	sp,fp
 101607c:	dfc00117 	ldw	ra,4(sp)
 1016080:	df000017 	ldw	fp,0(sp)
 1016084:	dec00204 	addi	sp,sp,8
 1016088:	f800283a 	ret

0101608c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101608c:	defffd04 	addi	sp,sp,-12
 1016090:	dfc00215 	stw	ra,8(sp)
 1016094:	df000115 	stw	fp,4(sp)
 1016098:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101609c:	008040b4 	movhi	r2,258
 10160a0:	10b26004 	addi	r2,r2,-13952
 10160a4:	10800017 	ldw	r2,0(r2)
 10160a8:	1005003a 	cmpeq	r2,r2,zero
 10160ac:	1000061e 	bne	r2,zero,10160c8 <alt_get_errno+0x3c>
 10160b0:	008040b4 	movhi	r2,258
 10160b4:	10b26004 	addi	r2,r2,-13952
 10160b8:	10800017 	ldw	r2,0(r2)
 10160bc:	103ee83a 	callr	r2
 10160c0:	e0bfff15 	stw	r2,-4(fp)
 10160c4:	00000306 	br	10160d4 <alt_get_errno+0x48>
 10160c8:	008040b4 	movhi	r2,258
 10160cc:	10ba4204 	addi	r2,r2,-5880
 10160d0:	e0bfff15 	stw	r2,-4(fp)
 10160d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10160d8:	e037883a 	mov	sp,fp
 10160dc:	dfc00117 	ldw	ra,4(sp)
 10160e0:	df000017 	ldw	fp,0(sp)
 10160e4:	dec00204 	addi	sp,sp,8
 10160e8:	f800283a 	ret

010160ec <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 10160ec:	deffff04 	addi	sp,sp,-4
 10160f0:	df000015 	stw	fp,0(sp)
 10160f4:	d839883a 	mov	fp,sp
  return 0;
 10160f8:	0005883a 	mov	r2,zero
}
 10160fc:	e037883a 	mov	sp,fp
 1016100:	df000017 	ldw	fp,0(sp)
 1016104:	dec00104 	addi	sp,sp,4
 1016108:	f800283a 	ret

0101610c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 101610c:	deffef04 	addi	sp,sp,-68
 1016110:	df001015 	stw	fp,64(sp)
 1016114:	df001004 	addi	fp,sp,64
 1016118:	e13ffc15 	stw	r4,-16(fp)
 101611c:	e17ffd15 	stw	r5,-12(fp)
 1016120:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1016124:	00bffa84 	movi	r2,-22
 1016128:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 101612c:	e0bffc17 	ldw	r2,-16(fp)
 1016130:	10800828 	cmpgeui	r2,r2,32
 1016134:	1000601e 	bne	r2,zero,10162b8 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016138:	0005303a 	rdctl	r2,status
 101613c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016140:	e0fff917 	ldw	r3,-28(fp)
 1016144:	00bfff84 	movi	r2,-2
 1016148:	1884703a 	and	r2,r3,r2
 101614c:	1001703a 	wrctl	status,r2
  
  return context;
 1016150:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1016154:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1016158:	e0bffc17 	ldw	r2,-16(fp)
 101615c:	00c040b4 	movhi	r3,258
 1016160:	18c0a104 	addi	r3,r3,644
 1016164:	100490fa 	slli	r2,r2,3
 1016168:	10c7883a 	add	r3,r2,r3
 101616c:	e0bffe17 	ldw	r2,-8(fp)
 1016170:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1016174:	e0bffc17 	ldw	r2,-16(fp)
 1016178:	00c040b4 	movhi	r3,258
 101617c:	18c0a104 	addi	r3,r3,644
 1016180:	100490fa 	slli	r2,r2,3
 1016184:	10c5883a 	add	r2,r2,r3
 1016188:	10c00104 	addi	r3,r2,4
 101618c:	e0bffd17 	ldw	r2,-12(fp)
 1016190:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1016194:	e0bffe17 	ldw	r2,-8(fp)
 1016198:	1005003a 	cmpeq	r2,r2,zero
 101619c:	1000201e 	bne	r2,zero,1016220 <alt_irq_register+0x114>
 10161a0:	e0bffc17 	ldw	r2,-16(fp)
 10161a4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10161a8:	0005303a 	rdctl	r2,status
 10161ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10161b0:	e0fff617 	ldw	r3,-40(fp)
 10161b4:	00bfff84 	movi	r2,-2
 10161b8:	1884703a 	and	r2,r3,r2
 10161bc:	1001703a 	wrctl	status,r2
  
  return context;
 10161c0:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10161c4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 10161c8:	e0fff717 	ldw	r3,-36(fp)
 10161cc:	00800044 	movi	r2,1
 10161d0:	10c4983a 	sll	r2,r2,r3
 10161d4:	1007883a 	mov	r3,r2
 10161d8:	008040b4 	movhi	r2,258
 10161dc:	10ba4604 	addi	r2,r2,-5864
 10161e0:	10800017 	ldw	r2,0(r2)
 10161e4:	1886b03a 	or	r3,r3,r2
 10161e8:	008040b4 	movhi	r2,258
 10161ec:	10ba4604 	addi	r2,r2,-5864
 10161f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10161f4:	008040b4 	movhi	r2,258
 10161f8:	10ba4604 	addi	r2,r2,-5864
 10161fc:	10800017 	ldw	r2,0(r2)
 1016200:	100170fa 	wrctl	ienable,r2
 1016204:	e0bff817 	ldw	r2,-32(fp)
 1016208:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101620c:	e0bff517 	ldw	r2,-44(fp)
 1016210:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1016214:	0005883a 	mov	r2,zero
 1016218:	e0bfff15 	stw	r2,-4(fp)
 101621c:	00002006 	br	10162a0 <alt_irq_register+0x194>
 1016220:	e0bffc17 	ldw	r2,-16(fp)
 1016224:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016228:	0005303a 	rdctl	r2,status
 101622c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016230:	e0fff217 	ldw	r3,-56(fp)
 1016234:	00bfff84 	movi	r2,-2
 1016238:	1884703a 	and	r2,r3,r2
 101623c:	1001703a 	wrctl	status,r2
  
  return context;
 1016240:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1016244:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1016248:	e0fff317 	ldw	r3,-52(fp)
 101624c:	00800044 	movi	r2,1
 1016250:	10c4983a 	sll	r2,r2,r3
 1016254:	0084303a 	nor	r2,zero,r2
 1016258:	1007883a 	mov	r3,r2
 101625c:	008040b4 	movhi	r2,258
 1016260:	10ba4604 	addi	r2,r2,-5864
 1016264:	10800017 	ldw	r2,0(r2)
 1016268:	1886703a 	and	r3,r3,r2
 101626c:	008040b4 	movhi	r2,258
 1016270:	10ba4604 	addi	r2,r2,-5864
 1016274:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1016278:	008040b4 	movhi	r2,258
 101627c:	10ba4604 	addi	r2,r2,-5864
 1016280:	10800017 	ldw	r2,0(r2)
 1016284:	100170fa 	wrctl	ienable,r2
 1016288:	e0bff417 	ldw	r2,-48(fp)
 101628c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016290:	e0bff117 	ldw	r2,-60(fp)
 1016294:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1016298:	0005883a 	mov	r2,zero
 101629c:	e0bfff15 	stw	r2,-4(fp)
 10162a0:	e0bfff17 	ldw	r2,-4(fp)
 10162a4:	e0bffb15 	stw	r2,-20(fp)
 10162a8:	e0bffa17 	ldw	r2,-24(fp)
 10162ac:	e0bff015 	stw	r2,-64(fp)
 10162b0:	e0bff017 	ldw	r2,-64(fp)
 10162b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 10162b8:	e0bffb17 	ldw	r2,-20(fp)
}
 10162bc:	e037883a 	mov	sp,fp
 10162c0:	df000017 	ldw	fp,0(sp)
 10162c4:	dec00104 	addi	sp,sp,4
 10162c8:	f800283a 	ret

010162cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10162cc:	deffeb04 	addi	sp,sp,-84
 10162d0:	dfc01415 	stw	ra,80(sp)
 10162d4:	df001315 	stw	fp,76(sp)
 10162d8:	df001304 	addi	fp,sp,76
 10162dc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10162e0:	e0bffd17 	ldw	r2,-12(fp)
 10162e4:	1004803a 	cmplt	r2,r2,zero
 10162e8:	1000081e 	bne	r2,zero,101630c <isatty+0x40>
 10162ec:	e0bffd17 	ldw	r2,-12(fp)
 10162f0:	10800324 	muli	r2,r2,12
 10162f4:	1007883a 	mov	r3,r2
 10162f8:	008040b4 	movhi	r2,258
 10162fc:	10ad6104 	addi	r2,r2,-19068
 1016300:	1887883a 	add	r3,r3,r2
 1016304:	e0ffff15 	stw	r3,-4(fp)
 1016308:	00000106 	br	1016310 <isatty+0x44>
 101630c:	e03fff15 	stw	zero,-4(fp)
 1016310:	e0bfff17 	ldw	r2,-4(fp)
 1016314:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1016318:	e0bfed17 	ldw	r2,-76(fp)
 101631c:	1005003a 	cmpeq	r2,r2,zero
 1016320:	10000f1e 	bne	r2,zero,1016360 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1016324:	e0bfed17 	ldw	r2,-76(fp)
 1016328:	10800017 	ldw	r2,0(r2)
 101632c:	10800817 	ldw	r2,32(r2)
 1016330:	1004c03a 	cmpne	r2,r2,zero
 1016334:	1000031e 	bne	r2,zero,1016344 <isatty+0x78>
    {
      return 1;
 1016338:	00800044 	movi	r2,1
 101633c:	e0bffe15 	stw	r2,-8(fp)
 1016340:	00000c06 	br	1016374 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1016344:	e17fee04 	addi	r5,fp,-72
 1016348:	e13ffd17 	ldw	r4,-12(fp)
 101634c:	1015fb80 	call	1015fb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1016350:	e0bfef17 	ldw	r2,-68(fp)
 1016354:	10880020 	cmpeqi	r2,r2,8192
 1016358:	e0bffe15 	stw	r2,-8(fp)
 101635c:	00000506 	br	1016374 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1016360:	101638c0 	call	101638c <alt_get_errno>
 1016364:	1007883a 	mov	r3,r2
 1016368:	00801444 	movi	r2,81
 101636c:	18800015 	stw	r2,0(r3)
    return 0;
 1016370:	e03ffe15 	stw	zero,-8(fp)
 1016374:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1016378:	e037883a 	mov	sp,fp
 101637c:	dfc00117 	ldw	ra,4(sp)
 1016380:	df000017 	ldw	fp,0(sp)
 1016384:	dec00204 	addi	sp,sp,8
 1016388:	f800283a 	ret

0101638c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101638c:	defffd04 	addi	sp,sp,-12
 1016390:	dfc00215 	stw	ra,8(sp)
 1016394:	df000115 	stw	fp,4(sp)
 1016398:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101639c:	008040b4 	movhi	r2,258
 10163a0:	10b26004 	addi	r2,r2,-13952
 10163a4:	10800017 	ldw	r2,0(r2)
 10163a8:	1005003a 	cmpeq	r2,r2,zero
 10163ac:	1000061e 	bne	r2,zero,10163c8 <alt_get_errno+0x3c>
 10163b0:	008040b4 	movhi	r2,258
 10163b4:	10b26004 	addi	r2,r2,-13952
 10163b8:	10800017 	ldw	r2,0(r2)
 10163bc:	103ee83a 	callr	r2
 10163c0:	e0bfff15 	stw	r2,-4(fp)
 10163c4:	00000306 	br	10163d4 <alt_get_errno+0x48>
 10163c8:	008040b4 	movhi	r2,258
 10163cc:	10ba4204 	addi	r2,r2,-5880
 10163d0:	e0bfff15 	stw	r2,-4(fp)
 10163d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10163d8:	e037883a 	mov	sp,fp
 10163dc:	dfc00117 	ldw	ra,4(sp)
 10163e0:	df000017 	ldw	fp,0(sp)
 10163e4:	dec00204 	addi	sp,sp,8
 10163e8:	f800283a 	ret

010163ec <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 10163ec:	defffa04 	addi	sp,sp,-24
 10163f0:	dfc00515 	stw	ra,20(sp)
 10163f4:	df000415 	stw	fp,16(sp)
 10163f8:	df000404 	addi	fp,sp,16
 10163fc:	e13ffd15 	stw	r4,-12(fp)
 1016400:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1016404:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1016408:	e0bffd17 	ldw	r2,-12(fp)
 101640c:	10800048 	cmpgei	r2,r2,1
 1016410:	1000301e 	bne	r2,zero,10164d4 <kill+0xe8>
  {
    switch (sig)
 1016414:	e0bffe17 	ldw	r2,-8(fp)
 1016418:	10800828 	cmpgeui	r2,r2,32
 101641c:	10002a1e 	bne	r2,zero,10164c8 <kill+0xdc>
 1016420:	e0bffe17 	ldw	r2,-8(fp)
 1016424:	1085883a 	add	r2,r2,r2
 1016428:	1087883a 	add	r3,r2,r2
 101642c:	00804074 	movhi	r2,257
 1016430:	10991004 	addi	r2,r2,25664
 1016434:	1885883a 	add	r2,r3,r2
 1016438:	10800017 	ldw	r2,0(r2)
 101643c:	1000683a 	jmp	r2
 1016440:	010164e8 	cmpgeui	r4,zero,1427
 1016444:	010164c8 	cmpgei	r4,zero,1427
 1016448:	010164c8 	cmpgei	r4,zero,1427
 101644c:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016450:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016454:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016458:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 101645c:	010164c8 	cmpgei	r4,zero,1427
 1016460:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016464:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016468:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 101646c:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016470:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016474:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016478:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 101647c:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 1016480:	010164e8 	cmpgeui	r4,zero,1427
 1016484:	010164c8 	cmpgei	r4,zero,1427
 1016488:	010164c8 	cmpgei	r4,zero,1427
 101648c:	010164c8 	cmpgei	r4,zero,1427
 1016490:	010164e8 	cmpgeui	r4,zero,1427
 1016494:	010164c8 	cmpgei	r4,zero,1427
 1016498:	010164c8 	cmpgei	r4,zero,1427
 101649c:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164a0:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164a4:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164a8:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164ac:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164b0:	010164c8 	cmpgei	r4,zero,1427
 10164b4:	010164c8 	cmpgei	r4,zero,1427
 10164b8:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
 10164bc:	010164c0 	call	10164c <__alt_mem_onchip+0x10164c>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 10164c0:	0009883a 	mov	r4,zero
 10164c4:	1015f980 	call	1015f98 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 10164c8:	00800584 	movi	r2,22
 10164cc:	e0bffc15 	stw	r2,-16(fp)
 10164d0:	00000506 	br	10164e8 <kill+0xfc>
    }
  }

  else if (pid > 0)
 10164d4:	e0bffd17 	ldw	r2,-12(fp)
 10164d8:	10800050 	cmplti	r2,r2,1
 10164dc:	1000021e 	bne	r2,zero,10164e8 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 10164e0:	008000c4 	movi	r2,3
 10164e4:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 10164e8:	e0bffc17 	ldw	r2,-16(fp)
 10164ec:	1005003a 	cmpeq	r2,r2,zero
 10164f0:	1000071e 	bne	r2,zero,1016510 <kill+0x124>
  {
    ALT_ERRNO = status;
 10164f4:	101652c0 	call	101652c <alt_get_errno>
 10164f8:	1007883a 	mov	r3,r2
 10164fc:	e0bffc17 	ldw	r2,-16(fp)
 1016500:	18800015 	stw	r2,0(r3)
    return -1;
 1016504:	00bfffc4 	movi	r2,-1
 1016508:	e0bfff15 	stw	r2,-4(fp)
 101650c:	00000106 	br	1016514 <kill+0x128>
  }

  return 0;
 1016510:	e03fff15 	stw	zero,-4(fp)
 1016514:	e0bfff17 	ldw	r2,-4(fp)
}
 1016518:	e037883a 	mov	sp,fp
 101651c:	dfc00117 	ldw	ra,4(sp)
 1016520:	df000017 	ldw	fp,0(sp)
 1016524:	dec00204 	addi	sp,sp,8
 1016528:	f800283a 	ret

0101652c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101652c:	defffd04 	addi	sp,sp,-12
 1016530:	dfc00215 	stw	ra,8(sp)
 1016534:	df000115 	stw	fp,4(sp)
 1016538:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101653c:	008040b4 	movhi	r2,258
 1016540:	10b26004 	addi	r2,r2,-13952
 1016544:	10800017 	ldw	r2,0(r2)
 1016548:	1005003a 	cmpeq	r2,r2,zero
 101654c:	1000061e 	bne	r2,zero,1016568 <alt_get_errno+0x3c>
 1016550:	008040b4 	movhi	r2,258
 1016554:	10b26004 	addi	r2,r2,-13952
 1016558:	10800017 	ldw	r2,0(r2)
 101655c:	103ee83a 	callr	r2
 1016560:	e0bfff15 	stw	r2,-4(fp)
 1016564:	00000306 	br	1016574 <alt_get_errno+0x48>
 1016568:	008040b4 	movhi	r2,258
 101656c:	10ba4204 	addi	r2,r2,-5880
 1016570:	e0bfff15 	stw	r2,-4(fp)
 1016574:	e0bfff17 	ldw	r2,-4(fp)
}
 1016578:	e037883a 	mov	sp,fp
 101657c:	dfc00117 	ldw	ra,4(sp)
 1016580:	df000017 	ldw	fp,0(sp)
 1016584:	dec00204 	addi	sp,sp,8
 1016588:	f800283a 	ret

0101658c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 101658c:	defffe04 	addi	sp,sp,-8
 1016590:	dfc00115 	stw	ra,4(sp)
 1016594:	df000015 	stw	fp,0(sp)
 1016598:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 101659c:	010040b4 	movhi	r4,258
 10165a0:	21326404 	addi	r4,r4,-13936
 10165a4:	014040b4 	movhi	r5,258
 10165a8:	296a9b04 	addi	r5,r5,-21908
 10165ac:	018040b4 	movhi	r6,258
 10165b0:	31b26404 	addi	r6,r6,-13936
 10165b4:	101660c0 	call	101660c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10165b8:	01004034 	movhi	r4,256
 10165bc:	21000804 	addi	r4,r4,32
 10165c0:	01404034 	movhi	r5,256
 10165c4:	29400804 	addi	r5,r5,32
 10165c8:	01804034 	movhi	r6,256
 10165cc:	31807104 	addi	r6,r6,452
 10165d0:	101660c0 	call	101660c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10165d4:	010040b4 	movhi	r4,258
 10165d8:	2126e704 	addi	r4,r4,-25700
 10165dc:	014040b4 	movhi	r5,258
 10165e0:	2966e704 	addi	r5,r5,-25700
 10165e4:	018040b4 	movhi	r6,258
 10165e8:	31aa9b04 	addi	r6,r6,-21908
 10165ec:	101660c0 	call	101660c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10165f0:	1018ecc0 	call	1018ecc <alt_dcache_flush_all>
  alt_icache_flush_all();
 10165f4:	10191800 	call	1019180 <alt_icache_flush_all>
}
 10165f8:	e037883a 	mov	sp,fp
 10165fc:	dfc00117 	ldw	ra,4(sp)
 1016600:	df000017 	ldw	fp,0(sp)
 1016604:	dec00204 	addi	sp,sp,8
 1016608:	f800283a 	ret

0101660c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 101660c:	defffc04 	addi	sp,sp,-16
 1016610:	df000315 	stw	fp,12(sp)
 1016614:	df000304 	addi	fp,sp,12
 1016618:	e13ffd15 	stw	r4,-12(fp)
 101661c:	e17ffe15 	stw	r5,-8(fp)
 1016620:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1016624:	e0fffe17 	ldw	r3,-8(fp)
 1016628:	e0bffd17 	ldw	r2,-12(fp)
 101662c:	18800e26 	beq	r3,r2,1016668 <alt_load_section+0x5c>
  {
    while( to != end )
 1016630:	00000a06 	br	101665c <alt_load_section+0x50>
    {
      *to++ = *from++;
 1016634:	e0bffd17 	ldw	r2,-12(fp)
 1016638:	10c00017 	ldw	r3,0(r2)
 101663c:	e0bffe17 	ldw	r2,-8(fp)
 1016640:	10c00015 	stw	r3,0(r2)
 1016644:	e0bffe17 	ldw	r2,-8(fp)
 1016648:	10800104 	addi	r2,r2,4
 101664c:	e0bffe15 	stw	r2,-8(fp)
 1016650:	e0bffd17 	ldw	r2,-12(fp)
 1016654:	10800104 	addi	r2,r2,4
 1016658:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 101665c:	e0fffe17 	ldw	r3,-8(fp)
 1016660:	e0bfff17 	ldw	r2,-4(fp)
 1016664:	18bff31e 	bne	r3,r2,1016634 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1016668:	e037883a 	mov	sp,fp
 101666c:	df000017 	ldw	fp,0(sp)
 1016670:	dec00104 	addi	sp,sp,4
 1016674:	f800283a 	ret

01016678 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1016678:	defff804 	addi	sp,sp,-32
 101667c:	dfc00715 	stw	ra,28(sp)
 1016680:	df000615 	stw	fp,24(sp)
 1016684:	df000604 	addi	fp,sp,24
 1016688:	e13ffc15 	stw	r4,-16(fp)
 101668c:	e17ffd15 	stw	r5,-12(fp)
 1016690:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1016694:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1016698:	e0bffc17 	ldw	r2,-16(fp)
 101669c:	1004803a 	cmplt	r2,r2,zero
 10166a0:	1000081e 	bne	r2,zero,10166c4 <lseek+0x4c>
 10166a4:	e0bffc17 	ldw	r2,-16(fp)
 10166a8:	10800324 	muli	r2,r2,12
 10166ac:	1007883a 	mov	r3,r2
 10166b0:	008040b4 	movhi	r2,258
 10166b4:	10ad6104 	addi	r2,r2,-19068
 10166b8:	1887883a 	add	r3,r3,r2
 10166bc:	e0ffff15 	stw	r3,-4(fp)
 10166c0:	00000106 	br	10166c8 <lseek+0x50>
 10166c4:	e03fff15 	stw	zero,-4(fp)
 10166c8:	e0bfff17 	ldw	r2,-4(fp)
 10166cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 10166d0:	e0bffb17 	ldw	r2,-20(fp)
 10166d4:	1005003a 	cmpeq	r2,r2,zero
 10166d8:	1000111e 	bne	r2,zero,1016720 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10166dc:	e0bffb17 	ldw	r2,-20(fp)
 10166e0:	10800017 	ldw	r2,0(r2)
 10166e4:	10800717 	ldw	r2,28(r2)
 10166e8:	1005003a 	cmpeq	r2,r2,zero
 10166ec:	1000091e 	bne	r2,zero,1016714 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10166f0:	e0bffb17 	ldw	r2,-20(fp)
 10166f4:	10800017 	ldw	r2,0(r2)
 10166f8:	10800717 	ldw	r2,28(r2)
 10166fc:	e13ffb17 	ldw	r4,-20(fp)
 1016700:	e17ffd17 	ldw	r5,-12(fp)
 1016704:	e1bffe17 	ldw	r6,-8(fp)
 1016708:	103ee83a 	callr	r2
 101670c:	e0bffa15 	stw	r2,-24(fp)
 1016710:	00000506 	br	1016728 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1016714:	00bfde84 	movi	r2,-134
 1016718:	e0bffa15 	stw	r2,-24(fp)
 101671c:	00000206 	br	1016728 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1016720:	00bfebc4 	movi	r2,-81
 1016724:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1016728:	e0bffa17 	ldw	r2,-24(fp)
 101672c:	1004403a 	cmpge	r2,r2,zero
 1016730:	1000071e 	bne	r2,zero,1016750 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 1016734:	10167680 	call	1016768 <alt_get_errno>
 1016738:	1007883a 	mov	r3,r2
 101673c:	e0bffa17 	ldw	r2,-24(fp)
 1016740:	0085c83a 	sub	r2,zero,r2
 1016744:	18800015 	stw	r2,0(r3)
    rc = -1;
 1016748:	00bfffc4 	movi	r2,-1
 101674c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1016750:	e0bffa17 	ldw	r2,-24(fp)
}
 1016754:	e037883a 	mov	sp,fp
 1016758:	dfc00117 	ldw	ra,4(sp)
 101675c:	df000017 	ldw	fp,0(sp)
 1016760:	dec00204 	addi	sp,sp,8
 1016764:	f800283a 	ret

01016768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016768:	defffd04 	addi	sp,sp,-12
 101676c:	dfc00215 	stw	ra,8(sp)
 1016770:	df000115 	stw	fp,4(sp)
 1016774:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1016778:	008040b4 	movhi	r2,258
 101677c:	10b26004 	addi	r2,r2,-13952
 1016780:	10800017 	ldw	r2,0(r2)
 1016784:	1005003a 	cmpeq	r2,r2,zero
 1016788:	1000061e 	bne	r2,zero,10167a4 <alt_get_errno+0x3c>
 101678c:	008040b4 	movhi	r2,258
 1016790:	10b26004 	addi	r2,r2,-13952
 1016794:	10800017 	ldw	r2,0(r2)
 1016798:	103ee83a 	callr	r2
 101679c:	e0bfff15 	stw	r2,-4(fp)
 10167a0:	00000306 	br	10167b0 <alt_get_errno+0x48>
 10167a4:	008040b4 	movhi	r2,258
 10167a8:	10ba4204 	addi	r2,r2,-5880
 10167ac:	e0bfff15 	stw	r2,-4(fp)
 10167b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10167b4:	e037883a 	mov	sp,fp
 10167b8:	dfc00117 	ldw	ra,4(sp)
 10167bc:	df000017 	ldw	fp,0(sp)
 10167c0:	dec00204 	addi	sp,sp,8
 10167c4:	f800283a 	ret

010167c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10167c8:	defffd04 	addi	sp,sp,-12
 10167cc:	dfc00215 	stw	ra,8(sp)
 10167d0:	df000115 	stw	fp,4(sp)
 10167d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10167d8:	0009883a 	mov	r4,zero
 10167dc:	1016cc00 	call	1016cc0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10167e0:	1016cf40 	call	1016cf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10167e4:	010040b4 	movhi	r4,258
 10167e8:	212a5404 	addi	r4,r4,-22192
 10167ec:	014040b4 	movhi	r5,258
 10167f0:	296a5404 	addi	r5,r5,-22192
 10167f4:	018040b4 	movhi	r6,258
 10167f8:	31aa5404 	addi	r6,r6,-22192
 10167fc:	10192740 	call	1019274 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1016800:	10190240 	call	1019024 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1016804:	010040b4 	movhi	r4,258
 1016808:	21242204 	addi	r4,r4,-28536
 101680c:	10199dc0 	call	10199dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1016810:	d127fe17 	ldw	r4,-24584(gp)
 1016814:	d167ff17 	ldw	r5,-24580(gp)
 1016818:	d1a80017 	ldw	r6,-24576(gp)
 101681c:	10002700 	call	1000270 <main>
 1016820:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1016824:	01000044 	movi	r4,1
 1016828:	1015dd00 	call	1015dd0 <close>
  exit (result);
 101682c:	e13fff17 	ldw	r4,-4(fp)
 1016830:	10058040 	call	1005804 <exit>

01016834 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1016834:	defffe04 	addi	sp,sp,-8
 1016838:	df000115 	stw	fp,4(sp)
 101683c:	df000104 	addi	fp,sp,4
 1016840:	e13fff15 	stw	r4,-4(fp)
}
 1016844:	e037883a 	mov	sp,fp
 1016848:	df000017 	ldw	fp,0(sp)
 101684c:	dec00104 	addi	sp,sp,4
 1016850:	f800283a 	ret

01016854 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1016854:	defffe04 	addi	sp,sp,-8
 1016858:	df000115 	stw	fp,4(sp)
 101685c:	df000104 	addi	fp,sp,4
 1016860:	e13fff15 	stw	r4,-4(fp)
}
 1016864:	e037883a 	mov	sp,fp
 1016868:	df000017 	ldw	fp,0(sp)
 101686c:	dec00104 	addi	sp,sp,4
 1016870:	f800283a 	ret

01016874 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1016874:	defff704 	addi	sp,sp,-36
 1016878:	dfc00815 	stw	ra,32(sp)
 101687c:	df000715 	stw	fp,28(sp)
 1016880:	df000704 	addi	fp,sp,28
 1016884:	e13ffb15 	stw	r4,-20(fp)
 1016888:	e17ffc15 	stw	r5,-16(fp)
 101688c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1016890:	e0bffb17 	ldw	r2,-20(fp)
 1016894:	1004803a 	cmplt	r2,r2,zero
 1016898:	1000081e 	bne	r2,zero,10168bc <read+0x48>
 101689c:	e0bffb17 	ldw	r2,-20(fp)
 10168a0:	10800324 	muli	r2,r2,12
 10168a4:	1007883a 	mov	r3,r2
 10168a8:	008040b4 	movhi	r2,258
 10168ac:	10ad6104 	addi	r2,r2,-19068
 10168b0:	1887883a 	add	r3,r3,r2
 10168b4:	e0ffff15 	stw	r3,-4(fp)
 10168b8:	00000106 	br	10168c0 <read+0x4c>
 10168bc:	e03fff15 	stw	zero,-4(fp)
 10168c0:	e0bfff17 	ldw	r2,-4(fp)
 10168c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10168c8:	e0bffa17 	ldw	r2,-24(fp)
 10168cc:	1005003a 	cmpeq	r2,r2,zero
 10168d0:	1000241e 	bne	r2,zero,1016964 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10168d4:	e0bffa17 	ldw	r2,-24(fp)
 10168d8:	10800217 	ldw	r2,8(r2)
 10168dc:	108000cc 	andi	r2,r2,3
 10168e0:	10800060 	cmpeqi	r2,r2,1
 10168e4:	10001a1e 	bne	r2,zero,1016950 <read+0xdc>
 10168e8:	e0bffa17 	ldw	r2,-24(fp)
 10168ec:	10800017 	ldw	r2,0(r2)
 10168f0:	10800517 	ldw	r2,20(r2)
 10168f4:	1005003a 	cmpeq	r2,r2,zero
 10168f8:	1000151e 	bne	r2,zero,1016950 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 10168fc:	e0bffa17 	ldw	r2,-24(fp)
 1016900:	10800017 	ldw	r2,0(r2)
 1016904:	10800517 	ldw	r2,20(r2)
 1016908:	e17ffc17 	ldw	r5,-16(fp)
 101690c:	e1bffd17 	ldw	r6,-12(fp)
 1016910:	e13ffa17 	ldw	r4,-24(fp)
 1016914:	103ee83a 	callr	r2
 1016918:	e0bff915 	stw	r2,-28(fp)
 101691c:	e0bff917 	ldw	r2,-28(fp)
 1016920:	1004403a 	cmpge	r2,r2,zero
 1016924:	1000071e 	bne	r2,zero,1016944 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1016928:	10169940 	call	1016994 <alt_get_errno>
 101692c:	e0fff917 	ldw	r3,-28(fp)
 1016930:	00c7c83a 	sub	r3,zero,r3
 1016934:	10c00015 	stw	r3,0(r2)
          return -1;
 1016938:	00bfffc4 	movi	r2,-1
 101693c:	e0bffe15 	stw	r2,-8(fp)
 1016940:	00000e06 	br	101697c <read+0x108>
        }
        return rval;
 1016944:	e0bff917 	ldw	r2,-28(fp)
 1016948:	e0bffe15 	stw	r2,-8(fp)
 101694c:	00000b06 	br	101697c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1016950:	10169940 	call	1016994 <alt_get_errno>
 1016954:	1007883a 	mov	r3,r2
 1016958:	00800344 	movi	r2,13
 101695c:	18800015 	stw	r2,0(r3)
 1016960:	00000406 	br	1016974 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1016964:	10169940 	call	1016994 <alt_get_errno>
 1016968:	1007883a 	mov	r3,r2
 101696c:	00801444 	movi	r2,81
 1016970:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1016974:	00bfffc4 	movi	r2,-1
 1016978:	e0bffe15 	stw	r2,-8(fp)
 101697c:	e0bffe17 	ldw	r2,-8(fp)
}
 1016980:	e037883a 	mov	sp,fp
 1016984:	dfc00117 	ldw	ra,4(sp)
 1016988:	df000017 	ldw	fp,0(sp)
 101698c:	dec00204 	addi	sp,sp,8
 1016990:	f800283a 	ret

01016994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016994:	defffd04 	addi	sp,sp,-12
 1016998:	dfc00215 	stw	ra,8(sp)
 101699c:	df000115 	stw	fp,4(sp)
 10169a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10169a4:	008040b4 	movhi	r2,258
 10169a8:	10b26004 	addi	r2,r2,-13952
 10169ac:	10800017 	ldw	r2,0(r2)
 10169b0:	1005003a 	cmpeq	r2,r2,zero
 10169b4:	1000061e 	bne	r2,zero,10169d0 <alt_get_errno+0x3c>
 10169b8:	008040b4 	movhi	r2,258
 10169bc:	10b26004 	addi	r2,r2,-13952
 10169c0:	10800017 	ldw	r2,0(r2)
 10169c4:	103ee83a 	callr	r2
 10169c8:	e0bfff15 	stw	r2,-4(fp)
 10169cc:	00000306 	br	10169dc <alt_get_errno+0x48>
 10169d0:	008040b4 	movhi	r2,258
 10169d4:	10ba4204 	addi	r2,r2,-5880
 10169d8:	e0bfff15 	stw	r2,-4(fp)
 10169dc:	e0bfff17 	ldw	r2,-4(fp)
}
 10169e0:	e037883a 	mov	sp,fp
 10169e4:	dfc00117 	ldw	ra,4(sp)
 10169e8:	df000017 	ldw	fp,0(sp)
 10169ec:	dec00204 	addi	sp,sp,8
 10169f0:	f800283a 	ret

010169f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10169f4:	defffe04 	addi	sp,sp,-8
 10169f8:	df000115 	stw	fp,4(sp)
 10169fc:	df000104 	addi	fp,sp,4
 1016a00:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1016a04:	e0bfff17 	ldw	r2,-4(fp)
 1016a08:	108000d0 	cmplti	r2,r2,3
 1016a0c:	10000d1e 	bne	r2,zero,1016a44 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1016a10:	e0bfff17 	ldw	r2,-4(fp)
 1016a14:	00c040b4 	movhi	r3,258
 1016a18:	18ed6104 	addi	r3,r3,-19068
 1016a1c:	10800324 	muli	r2,r2,12
 1016a20:	10c5883a 	add	r2,r2,r3
 1016a24:	10800204 	addi	r2,r2,8
 1016a28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1016a2c:	e0bfff17 	ldw	r2,-4(fp)
 1016a30:	00c040b4 	movhi	r3,258
 1016a34:	18ed6104 	addi	r3,r3,-19068
 1016a38:	10800324 	muli	r2,r2,12
 1016a3c:	10c5883a 	add	r2,r2,r3
 1016a40:	10000015 	stw	zero,0(r2)
  }
}
 1016a44:	e037883a 	mov	sp,fp
 1016a48:	df000017 	ldw	fp,0(sp)
 1016a4c:	dec00104 	addi	sp,sp,4
 1016a50:	f800283a 	ret

01016a54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1016a54:	defff804 	addi	sp,sp,-32
 1016a58:	df000715 	stw	fp,28(sp)
 1016a5c:	df000704 	addi	fp,sp,28
 1016a60:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1016a64:	0005303a 	rdctl	r2,status
 1016a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1016a6c:	e0fffb17 	ldw	r3,-20(fp)
 1016a70:	00bfff84 	movi	r2,-2
 1016a74:	1884703a 	and	r2,r3,r2
 1016a78:	1001703a 	wrctl	status,r2
  
  return context;
 1016a7c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1016a80:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1016a84:	d0a01817 	ldw	r2,-32672(gp)
 1016a88:	10c000c4 	addi	r3,r2,3
 1016a8c:	00bfff04 	movi	r2,-4
 1016a90:	1884703a 	and	r2,r3,r2
 1016a94:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1016a98:	d0e01817 	ldw	r3,-32672(gp)
 1016a9c:	e0bffe17 	ldw	r2,-8(fp)
 1016aa0:	1887883a 	add	r3,r3,r2
 1016aa4:	00806034 	movhi	r2,384
 1016aa8:	10be0004 	addi	r2,r2,-2048
 1016aac:	10c0072e 	bgeu	r2,r3,1016acc <sbrk+0x78>
 1016ab0:	e0bffd17 	ldw	r2,-12(fp)
 1016ab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1016ab8:	e0bffa17 	ldw	r2,-24(fp)
 1016abc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1016ac0:	00bfffc4 	movi	r2,-1
 1016ac4:	e0bfff15 	stw	r2,-4(fp)
 1016ac8:	00000c06 	br	1016afc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1016acc:	d0a01817 	ldw	r2,-32672(gp)
 1016ad0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1016ad4:	d0e01817 	ldw	r3,-32672(gp)
 1016ad8:	e0bffe17 	ldw	r2,-8(fp)
 1016adc:	1885883a 	add	r2,r3,r2
 1016ae0:	d0a01815 	stw	r2,-32672(gp)
 1016ae4:	e0bffd17 	ldw	r2,-12(fp)
 1016ae8:	e0bff915 	stw	r2,-28(fp)
 1016aec:	e0bff917 	ldw	r2,-28(fp)
 1016af0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1016af4:	e0bffc17 	ldw	r2,-16(fp)
 1016af8:	e0bfff15 	stw	r2,-4(fp)
 1016afc:	e0bfff17 	ldw	r2,-4(fp)
} 
 1016b00:	e037883a 	mov	sp,fp
 1016b04:	df000017 	ldw	fp,0(sp)
 1016b08:	dec00104 	addi	sp,sp,4
 1016b0c:	f800283a 	ret

01016b10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1016b10:	defffd04 	addi	sp,sp,-12
 1016b14:	dfc00215 	stw	ra,8(sp)
 1016b18:	df000115 	stw	fp,4(sp)
 1016b1c:	df000104 	addi	fp,sp,4
 1016b20:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1016b24:	e13fff17 	ldw	r4,-4(fp)
 1016b28:	1018d800 	call	1018d80 <alt_busy_sleep>
}
 1016b2c:	e037883a 	mov	sp,fp
 1016b30:	dfc00117 	ldw	ra,4(sp)
 1016b34:	df000017 	ldw	fp,0(sp)
 1016b38:	dec00204 	addi	sp,sp,8
 1016b3c:	f800283a 	ret

01016b40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1016b40:	defff704 	addi	sp,sp,-36
 1016b44:	dfc00815 	stw	ra,32(sp)
 1016b48:	df000715 	stw	fp,28(sp)
 1016b4c:	df000704 	addi	fp,sp,28
 1016b50:	e13ffb15 	stw	r4,-20(fp)
 1016b54:	e17ffc15 	stw	r5,-16(fp)
 1016b58:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1016b5c:	e0bffb17 	ldw	r2,-20(fp)
 1016b60:	1004803a 	cmplt	r2,r2,zero
 1016b64:	1000081e 	bne	r2,zero,1016b88 <write+0x48>
 1016b68:	e0bffb17 	ldw	r2,-20(fp)
 1016b6c:	10800324 	muli	r2,r2,12
 1016b70:	1007883a 	mov	r3,r2
 1016b74:	008040b4 	movhi	r2,258
 1016b78:	10ad6104 	addi	r2,r2,-19068
 1016b7c:	1887883a 	add	r3,r3,r2
 1016b80:	e0ffff15 	stw	r3,-4(fp)
 1016b84:	00000106 	br	1016b8c <write+0x4c>
 1016b88:	e03fff15 	stw	zero,-4(fp)
 1016b8c:	e0bfff17 	ldw	r2,-4(fp)
 1016b90:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1016b94:	e0bffa17 	ldw	r2,-24(fp)
 1016b98:	1005003a 	cmpeq	r2,r2,zero
 1016b9c:	1000241e 	bne	r2,zero,1016c30 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1016ba0:	e0bffa17 	ldw	r2,-24(fp)
 1016ba4:	10800217 	ldw	r2,8(r2)
 1016ba8:	108000cc 	andi	r2,r2,3
 1016bac:	1005003a 	cmpeq	r2,r2,zero
 1016bb0:	10001a1e 	bne	r2,zero,1016c1c <write+0xdc>
 1016bb4:	e0bffa17 	ldw	r2,-24(fp)
 1016bb8:	10800017 	ldw	r2,0(r2)
 1016bbc:	10800617 	ldw	r2,24(r2)
 1016bc0:	1005003a 	cmpeq	r2,r2,zero
 1016bc4:	1000151e 	bne	r2,zero,1016c1c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1016bc8:	e0bffa17 	ldw	r2,-24(fp)
 1016bcc:	10800017 	ldw	r2,0(r2)
 1016bd0:	10800617 	ldw	r2,24(r2)
 1016bd4:	e17ffc17 	ldw	r5,-16(fp)
 1016bd8:	e1bffd17 	ldw	r6,-12(fp)
 1016bdc:	e13ffa17 	ldw	r4,-24(fp)
 1016be0:	103ee83a 	callr	r2
 1016be4:	e0bff915 	stw	r2,-28(fp)
 1016be8:	e0bff917 	ldw	r2,-28(fp)
 1016bec:	1004403a 	cmpge	r2,r2,zero
 1016bf0:	1000071e 	bne	r2,zero,1016c10 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1016bf4:	1016c600 	call	1016c60 <alt_get_errno>
 1016bf8:	e0fff917 	ldw	r3,-28(fp)
 1016bfc:	00c7c83a 	sub	r3,zero,r3
 1016c00:	10c00015 	stw	r3,0(r2)
        return -1;
 1016c04:	00bfffc4 	movi	r2,-1
 1016c08:	e0bffe15 	stw	r2,-8(fp)
 1016c0c:	00000e06 	br	1016c48 <write+0x108>
      }
      return rval;
 1016c10:	e0bff917 	ldw	r2,-28(fp)
 1016c14:	e0bffe15 	stw	r2,-8(fp)
 1016c18:	00000b06 	br	1016c48 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1016c1c:	1016c600 	call	1016c60 <alt_get_errno>
 1016c20:	1007883a 	mov	r3,r2
 1016c24:	00800344 	movi	r2,13
 1016c28:	18800015 	stw	r2,0(r3)
 1016c2c:	00000406 	br	1016c40 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1016c30:	1016c600 	call	1016c60 <alt_get_errno>
 1016c34:	1007883a 	mov	r3,r2
 1016c38:	00801444 	movi	r2,81
 1016c3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1016c40:	00bfffc4 	movi	r2,-1
 1016c44:	e0bffe15 	stw	r2,-8(fp)
 1016c48:	e0bffe17 	ldw	r2,-8(fp)
}
 1016c4c:	e037883a 	mov	sp,fp
 1016c50:	dfc00117 	ldw	ra,4(sp)
 1016c54:	df000017 	ldw	fp,0(sp)
 1016c58:	dec00204 	addi	sp,sp,8
 1016c5c:	f800283a 	ret

01016c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1016c60:	defffd04 	addi	sp,sp,-12
 1016c64:	dfc00215 	stw	ra,8(sp)
 1016c68:	df000115 	stw	fp,4(sp)
 1016c6c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1016c70:	008040b4 	movhi	r2,258
 1016c74:	10b26004 	addi	r2,r2,-13952
 1016c78:	10800017 	ldw	r2,0(r2)
 1016c7c:	1005003a 	cmpeq	r2,r2,zero
 1016c80:	1000061e 	bne	r2,zero,1016c9c <alt_get_errno+0x3c>
 1016c84:	008040b4 	movhi	r2,258
 1016c88:	10b26004 	addi	r2,r2,-13952
 1016c8c:	10800017 	ldw	r2,0(r2)
 1016c90:	103ee83a 	callr	r2
 1016c94:	e0bfff15 	stw	r2,-4(fp)
 1016c98:	00000306 	br	1016ca8 <alt_get_errno+0x48>
 1016c9c:	008040b4 	movhi	r2,258
 1016ca0:	10ba4204 	addi	r2,r2,-5880
 1016ca4:	e0bfff15 	stw	r2,-4(fp)
 1016ca8:	e0bfff17 	ldw	r2,-4(fp)
}
 1016cac:	e037883a 	mov	sp,fp
 1016cb0:	dfc00117 	ldw	ra,4(sp)
 1016cb4:	df000017 	ldw	fp,0(sp)
 1016cb8:	dec00204 	addi	sp,sp,8
 1016cbc:	f800283a 	ret

01016cc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1016cc0:	defffd04 	addi	sp,sp,-12
 1016cc4:	dfc00215 	stw	ra,8(sp)
 1016cc8:	df000115 	stw	fp,4(sp)
 1016ccc:	df000104 	addi	fp,sp,4
 1016cd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_SYSTEM, nios2_system);
 1016cd4:	10197540 	call	1019754 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1016cd8:	00800044 	movi	r2,1
 1016cdc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1016ce0:	e037883a 	mov	sp,fp
 1016ce4:	dfc00117 	ldw	ra,4(sp)
 1016ce8:	df000017 	ldw	fp,0(sp)
 1016cec:	dec00204 	addi	sp,sp,8
 1016cf0:	f800283a 	ret

01016cf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1016cf4:	defffd04 	addi	sp,sp,-12
 1016cf8:	dfc00215 	stw	ra,8(sp)
 1016cfc:	df000115 	stw	fp,4(sp)
 1016d00:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( SDCARD_TIMER, sdcard_timer);
 1016d04:	00c040b4 	movhi	r3,258
 1016d08:	18fa4a04 	addi	r3,r3,-5848
 1016d0c:	00920804 	movi	r2,18464
 1016d10:	18800015 	stw	r2,0(r3)
 1016d14:	00c040b4 	movhi	r3,258
 1016d18:	18fa4b04 	addi	r3,r3,-5844
 1016d1c:	0080bef4 	movhi	r2,763
 1016d20:	10bc2004 	addi	r2,r2,-3968
 1016d24:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
 1016d28:	010040b4 	movhi	r4,258
 1016d2c:	212dcb04 	addi	r4,r4,-18644
 1016d30:	000b883a 	mov	r5,zero
 1016d34:	000d883a 	mov	r6,zero
 1016d38:	10171f00 	call	10171f0 <altera_avalon_jtag_uart_init>
 1016d3c:	010040b4 	movhi	r4,258
 1016d40:	212dc104 	addi	r4,r4,-18684
 1016d44:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 1016d48:	010040b4 	movhi	r4,258
 1016d4c:	2131d904 	addi	r4,r4,-14492
 1016d50:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 1016d54:	010040b4 	movhi	r4,258
 1016d58:	2131e504 	addi	r4,r4,-14444
 1016d5c:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1016d60:	010040b4 	movhi	r4,258
 1016d64:	2131f104 	addi	r4,r4,-14396
 1016d68:	1017d680 	call	1017d68 <alt_up_character_lcd_init>
 1016d6c:	010040b4 	movhi	r4,258
 1016d70:	2131f104 	addi	r4,r4,-14396
 1016d74:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_0, ps2_0);
 1016d78:	010040b4 	movhi	r4,258
 1016d7c:	2131fc04 	addi	r4,r4,-14352
 1016d80:	10183140 	call	1018314 <alt_up_ps2_init>
 1016d84:	010040b4 	movhi	r4,258
 1016d88:	2131fc04 	addi	r4,r4,-14352
 1016d8c:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB_0, usb_0);
 1016d90:	010040b4 	movhi	r4,258
 1016d94:	21320a04 	addi	r4,r4,-14296
 1016d98:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 1016d9c:	008040b4 	movhi	r2,258
 1016da0:	10b21704 	addi	r2,r2,-14244
 1016da4:	10800a17 	ldw	r2,40(r2)
 1016da8:	10800104 	addi	r2,r2,4
 1016dac:	10800017 	ldw	r2,0(r2)
 1016db0:	10ffffcc 	andi	r3,r2,65535
 1016db4:	008040b4 	movhi	r2,258
 1016db8:	10b21704 	addi	r2,r2,-14244
 1016dbc:	10c00c15 	stw	r3,48(r2)
 1016dc0:	008040b4 	movhi	r2,258
 1016dc4:	10b21704 	addi	r2,r2,-14244
 1016dc8:	10800a17 	ldw	r2,40(r2)
 1016dcc:	10800104 	addi	r2,r2,4
 1016dd0:	10800017 	ldw	r2,0(r2)
 1016dd4:	1005d43a 	srai	r2,r2,16
 1016dd8:	10ffffcc 	andi	r3,r2,65535
 1016ddc:	008040b4 	movhi	r2,258
 1016de0:	10b21704 	addi	r2,r2,-14244
 1016de4:	10c00d15 	stw	r3,52(r2)
 1016de8:	008040b4 	movhi	r2,258
 1016dec:	10b21704 	addi	r2,r2,-14244
 1016df0:	10800c17 	ldw	r2,48(r2)
 1016df4:	10801068 	cmpgeui	r2,r2,65
 1016df8:	1000081e 	bne	r2,zero,1016e1c <alt_sys_init+0x128>
 1016dfc:	00c040b4 	movhi	r3,258
 1016e00:	18f21704 	addi	r3,r3,-14244
 1016e04:	00800fc4 	movi	r2,63
 1016e08:	18800f15 	stw	r2,60(r3)
 1016e0c:	00c040b4 	movhi	r3,258
 1016e10:	18f21704 	addi	r3,r3,-14244
 1016e14:	00800184 	movi	r2,6
 1016e18:	18801015 	stw	r2,64(r3)
 1016e1c:	008040b4 	movhi	r2,258
 1016e20:	10b21704 	addi	r2,r2,-14244
 1016e24:	10800d17 	ldw	r2,52(r2)
 1016e28:	10800868 	cmpgeui	r2,r2,33
 1016e2c:	1000041e 	bne	r2,zero,1016e40 <alt_sys_init+0x14c>
 1016e30:	00c040b4 	movhi	r3,258
 1016e34:	18f21704 	addi	r3,r3,-14244
 1016e38:	008007c4 	movi	r2,31
 1016e3c:	18801115 	stw	r2,68(r3)
 1016e40:	010040b4 	movhi	r4,258
 1016e44:	21321704 	addi	r4,r4,-14244
 1016e48:	10189280 	call	1018928 <alt_up_char_buffer_init>
 1016e4c:	010040b4 	movhi	r4,258
 1016e50:	21321704 	addi	r4,r4,-14244
 1016e54:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
 1016e58:	008040b4 	movhi	r2,258
 1016e5c:	10b22904 	addi	r2,r2,-14172
 1016e60:	10800a17 	ldw	r2,40(r2)
 1016e64:	10800017 	ldw	r2,0(r2)
 1016e68:	1007883a 	mov	r3,r2
 1016e6c:	008040b4 	movhi	r2,258
 1016e70:	10b22904 	addi	r2,r2,-14172
 1016e74:	10c00b15 	stw	r3,44(r2)
 1016e78:	008040b4 	movhi	r2,258
 1016e7c:	10b22904 	addi	r2,r2,-14172
 1016e80:	10800a17 	ldw	r2,40(r2)
 1016e84:	10800104 	addi	r2,r2,4
 1016e88:	10800017 	ldw	r2,0(r2)
 1016e8c:	1007883a 	mov	r3,r2
 1016e90:	008040b4 	movhi	r2,258
 1016e94:	10b22904 	addi	r2,r2,-14172
 1016e98:	10c00c15 	stw	r3,48(r2)
 1016e9c:	008040b4 	movhi	r2,258
 1016ea0:	10b22904 	addi	r2,r2,-14172
 1016ea4:	10800a17 	ldw	r2,40(r2)
 1016ea8:	10800204 	addi	r2,r2,8
 1016eac:	10800017 	ldw	r2,0(r2)
 1016eb0:	10ffffcc 	andi	r3,r2,65535
 1016eb4:	008040b4 	movhi	r2,258
 1016eb8:	10b22904 	addi	r2,r2,-14172
 1016ebc:	10c00f15 	stw	r3,60(r2)
 1016ec0:	008040b4 	movhi	r2,258
 1016ec4:	10b22904 	addi	r2,r2,-14172
 1016ec8:	10800a17 	ldw	r2,40(r2)
 1016ecc:	10800204 	addi	r2,r2,8
 1016ed0:	10800017 	ldw	r2,0(r2)
 1016ed4:	1005d43a 	srai	r2,r2,16
 1016ed8:	10ffffcc 	andi	r3,r2,65535
 1016edc:	008040b4 	movhi	r2,258
 1016ee0:	10b22904 	addi	r2,r2,-14172
 1016ee4:	10c01015 	stw	r3,64(r2)
 1016ee8:	008040b4 	movhi	r2,258
 1016eec:	10b22904 	addi	r2,r2,-14172
 1016ef0:	10800a17 	ldw	r2,40(r2)
 1016ef4:	10800304 	addi	r2,r2,12
 1016ef8:	10800017 	ldw	r2,0(r2)
 1016efc:	1005d07a 	srai	r2,r2,1
 1016f00:	10c0004c 	andi	r3,r2,1
 1016f04:	008040b4 	movhi	r2,258
 1016f08:	10b22904 	addi	r2,r2,-14172
 1016f0c:	10c00d15 	stw	r3,52(r2)
 1016f10:	008040b4 	movhi	r2,258
 1016f14:	10b22904 	addi	r2,r2,-14172
 1016f18:	10800a17 	ldw	r2,40(r2)
 1016f1c:	10800304 	addi	r2,r2,12
 1016f20:	10800017 	ldw	r2,0(r2)
 1016f24:	1005d13a 	srai	r2,r2,4
 1016f28:	10c003cc 	andi	r3,r2,15
 1016f2c:	008040b4 	movhi	r2,258
 1016f30:	10b22904 	addi	r2,r2,-14172
 1016f34:	10c00e15 	stw	r3,56(r2)
 1016f38:	008040b4 	movhi	r2,258
 1016f3c:	10b22904 	addi	r2,r2,-14172
 1016f40:	10800a17 	ldw	r2,40(r2)
 1016f44:	10800304 	addi	r2,r2,12
 1016f48:	10800017 	ldw	r2,0(r2)
 1016f4c:	1005d43a 	srai	r2,r2,16
 1016f50:	1007883a 	mov	r3,r2
 1016f54:	00bfffc4 	movi	r2,-1
 1016f58:	1884703a 	and	r2,r3,r2
 1016f5c:	e0bfff45 	stb	r2,-3(fp)
 1016f60:	008040b4 	movhi	r2,258
 1016f64:	10b22904 	addi	r2,r2,-14172
 1016f68:	10800a17 	ldw	r2,40(r2)
 1016f6c:	10800304 	addi	r2,r2,12
 1016f70:	10800017 	ldw	r2,0(r2)
 1016f74:	1005d63a 	srai	r2,r2,24
 1016f78:	1007883a 	mov	r3,r2
 1016f7c:	00bfffc4 	movi	r2,-1
 1016f80:	1884703a 	and	r2,r3,r2
 1016f84:	e0bfff05 	stb	r2,-4(fp)
 1016f88:	008040b4 	movhi	r2,258
 1016f8c:	10b22904 	addi	r2,r2,-14172
 1016f90:	10800e17 	ldw	r2,56(r2)
 1016f94:	10800058 	cmpnei	r2,r2,1
 1016f98:	1000041e 	bne	r2,zero,1016fac <alt_sys_init+0x2b8>
 1016f9c:	008040b4 	movhi	r2,258
 1016fa0:	10b22904 	addi	r2,r2,-14172
 1016fa4:	10001115 	stw	zero,68(r2)
 1016fa8:	00000e06 	br	1016fe4 <alt_sys_init+0x2f0>
 1016fac:	008040b4 	movhi	r2,258
 1016fb0:	10b22904 	addi	r2,r2,-14172
 1016fb4:	10800e17 	ldw	r2,56(r2)
 1016fb8:	10800098 	cmpnei	r2,r2,2
 1016fbc:	1000051e 	bne	r2,zero,1016fd4 <alt_sys_init+0x2e0>
 1016fc0:	00c040b4 	movhi	r3,258
 1016fc4:	18f22904 	addi	r3,r3,-14172
 1016fc8:	00800044 	movi	r2,1
 1016fcc:	18801115 	stw	r2,68(r3)
 1016fd0:	00000406 	br	1016fe4 <alt_sys_init+0x2f0>
 1016fd4:	00c040b4 	movhi	r3,258
 1016fd8:	18f22904 	addi	r3,r3,-14172
 1016fdc:	00800084 	movi	r2,2
 1016fe0:	18801115 	stw	r2,68(r3)
 1016fe4:	e0ffff43 	ldbu	r3,-3(fp)
 1016fe8:	00800804 	movi	r2,32
 1016fec:	10c7c83a 	sub	r3,r2,r3
 1016ff0:	00bfffc4 	movi	r2,-1
 1016ff4:	10c6d83a 	srl	r3,r2,r3
 1016ff8:	008040b4 	movhi	r2,258
 1016ffc:	10b22904 	addi	r2,r2,-14172
 1017000:	10c01215 	stw	r3,72(r2)
 1017004:	e0ffff43 	ldbu	r3,-3(fp)
 1017008:	008040b4 	movhi	r2,258
 101700c:	10b22904 	addi	r2,r2,-14172
 1017010:	10801117 	ldw	r2,68(r2)
 1017014:	1887883a 	add	r3,r3,r2
 1017018:	008040b4 	movhi	r2,258
 101701c:	10b22904 	addi	r2,r2,-14172
 1017020:	10c01315 	stw	r3,76(r2)
 1017024:	e0ffff03 	ldbu	r3,-4(fp)
 1017028:	00800804 	movi	r2,32
 101702c:	10c7c83a 	sub	r3,r2,r3
 1017030:	00bfffc4 	movi	r2,-1
 1017034:	10c6d83a 	srl	r3,r2,r3
 1017038:	008040b4 	movhi	r2,258
 101703c:	10b22904 	addi	r2,r2,-14172
 1017040:	10c01415 	stw	r3,80(r2)
 1017044:	010040b4 	movhi	r4,258
 1017048:	21322904 	addi	r4,r4,-14172
 101704c:	10170700 	call	1017070 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1017050:	010040b4 	movhi	r4,258
 1017054:	21323e04 	addi	r4,r4,-14088
 1017058:	10170700 	call	1017070 <alt_dev_reg>
}
 101705c:	e037883a 	mov	sp,fp
 1017060:	dfc00117 	ldw	ra,4(sp)
 1017064:	df000017 	ldw	fp,0(sp)
 1017068:	dec00204 	addi	sp,sp,8
 101706c:	f800283a 	ret

01017070 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1017070:	defffd04 	addi	sp,sp,-12
 1017074:	dfc00215 	stw	ra,8(sp)
 1017078:	df000115 	stw	fp,4(sp)
 101707c:	df000104 	addi	fp,sp,4
 1017080:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1017084:	e13fff17 	ldw	r4,-4(fp)
 1017088:	014040b4 	movhi	r5,258
 101708c:	29725d04 	addi	r5,r5,-13964
 1017090:	1018f100 	call	1018f10 <alt_dev_llist_insert>
}
 1017094:	e037883a 	mov	sp,fp
 1017098:	dfc00117 	ldw	ra,4(sp)
 101709c:	df000017 	ldw	fp,0(sp)
 10170a0:	dec00204 	addi	sp,sp,8
 10170a4:	f800283a 	ret

010170a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10170a8:	defffa04 	addi	sp,sp,-24
 10170ac:	dfc00515 	stw	ra,20(sp)
 10170b0:	df000415 	stw	fp,16(sp)
 10170b4:	df000404 	addi	fp,sp,16
 10170b8:	e13ffd15 	stw	r4,-12(fp)
 10170bc:	e17ffe15 	stw	r5,-8(fp)
 10170c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10170c4:	e0bffd17 	ldw	r2,-12(fp)
 10170c8:	10800017 	ldw	r2,0(r2)
 10170cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10170d0:	e0bffc17 	ldw	r2,-16(fp)
 10170d4:	11000a04 	addi	r4,r2,40
 10170d8:	e0bffd17 	ldw	r2,-12(fp)
 10170dc:	11c00217 	ldw	r7,8(r2)
 10170e0:	e17ffe17 	ldw	r5,-8(fp)
 10170e4:	e1bfff17 	ldw	r6,-4(fp)
 10170e8:	10176ec0 	call	10176ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10170ec:	e037883a 	mov	sp,fp
 10170f0:	dfc00117 	ldw	ra,4(sp)
 10170f4:	df000017 	ldw	fp,0(sp)
 10170f8:	dec00204 	addi	sp,sp,8
 10170fc:	f800283a 	ret

01017100 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1017100:	defffa04 	addi	sp,sp,-24
 1017104:	dfc00515 	stw	ra,20(sp)
 1017108:	df000415 	stw	fp,16(sp)
 101710c:	df000404 	addi	fp,sp,16
 1017110:	e13ffd15 	stw	r4,-12(fp)
 1017114:	e17ffe15 	stw	r5,-8(fp)
 1017118:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101711c:	e0bffd17 	ldw	r2,-12(fp)
 1017120:	10800017 	ldw	r2,0(r2)
 1017124:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1017128:	e0bffc17 	ldw	r2,-16(fp)
 101712c:	11000a04 	addi	r4,r2,40
 1017130:	e0bffd17 	ldw	r2,-12(fp)
 1017134:	11c00217 	ldw	r7,8(r2)
 1017138:	e17ffe17 	ldw	r5,-8(fp)
 101713c:	e1bfff17 	ldw	r6,-4(fp)
 1017140:	10179100 	call	1017910 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1017144:	e037883a 	mov	sp,fp
 1017148:	dfc00117 	ldw	ra,4(sp)
 101714c:	df000017 	ldw	fp,0(sp)
 1017150:	dec00204 	addi	sp,sp,8
 1017154:	f800283a 	ret

01017158 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1017158:	defffc04 	addi	sp,sp,-16
 101715c:	dfc00315 	stw	ra,12(sp)
 1017160:	df000215 	stw	fp,8(sp)
 1017164:	df000204 	addi	fp,sp,8
 1017168:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101716c:	e0bfff17 	ldw	r2,-4(fp)
 1017170:	10800017 	ldw	r2,0(r2)
 1017174:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1017178:	e0bffe17 	ldw	r2,-8(fp)
 101717c:	11000a04 	addi	r4,r2,40
 1017180:	e0bfff17 	ldw	r2,-4(fp)
 1017184:	11400217 	ldw	r5,8(r2)
 1017188:	10175840 	call	1017584 <altera_avalon_jtag_uart_close>
}
 101718c:	e037883a 	mov	sp,fp
 1017190:	dfc00117 	ldw	ra,4(sp)
 1017194:	df000017 	ldw	fp,0(sp)
 1017198:	dec00204 	addi	sp,sp,8
 101719c:	f800283a 	ret

010171a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10171a0:	defffa04 	addi	sp,sp,-24
 10171a4:	dfc00515 	stw	ra,20(sp)
 10171a8:	df000415 	stw	fp,16(sp)
 10171ac:	df000404 	addi	fp,sp,16
 10171b0:	e13ffd15 	stw	r4,-12(fp)
 10171b4:	e17ffe15 	stw	r5,-8(fp)
 10171b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10171bc:	e0bffd17 	ldw	r2,-12(fp)
 10171c0:	10800017 	ldw	r2,0(r2)
 10171c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10171c8:	e0bffc17 	ldw	r2,-16(fp)
 10171cc:	11000a04 	addi	r4,r2,40
 10171d0:	e17ffe17 	ldw	r5,-8(fp)
 10171d4:	e1bfff17 	ldw	r6,-4(fp)
 10171d8:	10175f80 	call	10175f8 <altera_avalon_jtag_uart_ioctl>
}
 10171dc:	e037883a 	mov	sp,fp
 10171e0:	dfc00117 	ldw	ra,4(sp)
 10171e4:	df000017 	ldw	fp,0(sp)
 10171e8:	dec00204 	addi	sp,sp,8
 10171ec:	f800283a 	ret

010171f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10171f0:	defffb04 	addi	sp,sp,-20
 10171f4:	dfc00415 	stw	ra,16(sp)
 10171f8:	df000315 	stw	fp,12(sp)
 10171fc:	df000304 	addi	fp,sp,12
 1017200:	e13ffd15 	stw	r4,-12(fp)
 1017204:	e17ffe15 	stw	r5,-8(fp)
 1017208:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 101720c:	e0fffd17 	ldw	r3,-12(fp)
 1017210:	00800044 	movi	r2,1
 1017214:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1017218:	e0bffd17 	ldw	r2,-12(fp)
 101721c:	10800017 	ldw	r2,0(r2)
 1017220:	11000104 	addi	r4,r2,4
 1017224:	e0bffd17 	ldw	r2,-12(fp)
 1017228:	10800817 	ldw	r2,32(r2)
 101722c:	1007883a 	mov	r3,r2
 1017230:	2005883a 	mov	r2,r4
 1017234:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1017238:	e13fff17 	ldw	r4,-4(fp)
 101723c:	e17ffd17 	ldw	r5,-12(fp)
 1017240:	01804074 	movhi	r6,257
 1017244:	319caa04 	addi	r6,r6,29352
 1017248:	101610c0 	call	101610c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 101724c:	e0bffd17 	ldw	r2,-12(fp)
 1017250:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1017254:	e0bffd17 	ldw	r2,-12(fp)
 1017258:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 101725c:	008040b4 	movhi	r2,258
 1017260:	10ba4c04 	addi	r2,r2,-5840
 1017264:	10800017 	ldw	r2,0(r2)
 1017268:	100b883a 	mov	r5,r2
 101726c:	01804074 	movhi	r6,257
 1017270:	319d3504 	addi	r6,r6,29908
 1017274:	e1fffd17 	ldw	r7,-12(fp)
 1017278:	1018c2c0 	call	1018c2c <alt_alarm_start>
 101727c:	1004403a 	cmpge	r2,r2,zero
 1017280:	1000041e 	bne	r2,zero,1017294 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1017284:	e0fffd17 	ldw	r3,-12(fp)
 1017288:	00a00034 	movhi	r2,32768
 101728c:	10bfffc4 	addi	r2,r2,-1
 1017290:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1017294:	e037883a 	mov	sp,fp
 1017298:	dfc00117 	ldw	ra,4(sp)
 101729c:	df000017 	ldw	fp,0(sp)
 10172a0:	dec00204 	addi	sp,sp,8
 10172a4:	f800283a 	ret

010172a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10172a8:	defff704 	addi	sp,sp,-36
 10172ac:	df000815 	stw	fp,32(sp)
 10172b0:	df000804 	addi	fp,sp,32
 10172b4:	e13ffe15 	stw	r4,-8(fp)
 10172b8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10172bc:	e0bffe17 	ldw	r2,-8(fp)
 10172c0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 10172c4:	e0bffd17 	ldw	r2,-12(fp)
 10172c8:	10800017 	ldw	r2,0(r2)
 10172cc:	e0bffc15 	stw	r2,-16(fp)
 10172d0:	00000006 	br	10172d4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10172d4:	e0bffc17 	ldw	r2,-16(fp)
 10172d8:	10800104 	addi	r2,r2,4
 10172dc:	10800037 	ldwio	r2,0(r2)
 10172e0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10172e4:	e0bffb17 	ldw	r2,-20(fp)
 10172e8:	1080c00c 	andi	r2,r2,768
 10172ec:	1005003a 	cmpeq	r2,r2,zero
 10172f0:	1000741e 	bne	r2,zero,10174c4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10172f4:	e0bffb17 	ldw	r2,-20(fp)
 10172f8:	1080400c 	andi	r2,r2,256
 10172fc:	1005003a 	cmpeq	r2,r2,zero
 1017300:	1000351e 	bne	r2,zero,10173d8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1017304:	00800074 	movhi	r2,1
 1017308:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101730c:	e0bffd17 	ldw	r2,-12(fp)
 1017310:	10800a17 	ldw	r2,40(r2)
 1017314:	10800044 	addi	r2,r2,1
 1017318:	1081ffcc 	andi	r2,r2,2047
 101731c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1017320:	e0bffd17 	ldw	r2,-12(fp)
 1017324:	10c00b17 	ldw	r3,44(r2)
 1017328:	e0bff917 	ldw	r2,-28(fp)
 101732c:	18801626 	beq	r3,r2,1017388 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1017330:	e0bffc17 	ldw	r2,-16(fp)
 1017334:	10800037 	ldwio	r2,0(r2)
 1017338:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 101733c:	e0bffa17 	ldw	r2,-24(fp)
 1017340:	10a0000c 	andi	r2,r2,32768
 1017344:	1005003a 	cmpeq	r2,r2,zero
 1017348:	10000f1e 	bne	r2,zero,1017388 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 101734c:	e0bffd17 	ldw	r2,-12(fp)
 1017350:	10c00a17 	ldw	r3,40(r2)
 1017354:	e0bffa17 	ldw	r2,-24(fp)
 1017358:	1009883a 	mov	r4,r2
 101735c:	e0bffd17 	ldw	r2,-12(fp)
 1017360:	1885883a 	add	r2,r3,r2
 1017364:	10800e04 	addi	r2,r2,56
 1017368:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101736c:	e0bffd17 	ldw	r2,-12(fp)
 1017370:	10800a17 	ldw	r2,40(r2)
 1017374:	10800044 	addi	r2,r2,1
 1017378:	10c1ffcc 	andi	r3,r2,2047
 101737c:	e0bffd17 	ldw	r2,-12(fp)
 1017380:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1017384:	003fe106 	br	101730c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1017388:	e0bffa17 	ldw	r2,-24(fp)
 101738c:	10bfffec 	andhi	r2,r2,65535
 1017390:	1005003a 	cmpeq	r2,r2,zero
 1017394:	1000101e 	bne	r2,zero,10173d8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1017398:	e0bffd17 	ldw	r2,-12(fp)
 101739c:	10c00817 	ldw	r3,32(r2)
 10173a0:	00bfff84 	movi	r2,-2
 10173a4:	1886703a 	and	r3,r3,r2
 10173a8:	e0bffd17 	ldw	r2,-12(fp)
 10173ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10173b0:	e0bffc17 	ldw	r2,-16(fp)
 10173b4:	11000104 	addi	r4,r2,4
 10173b8:	e0bffd17 	ldw	r2,-12(fp)
 10173bc:	10800817 	ldw	r2,32(r2)
 10173c0:	1007883a 	mov	r3,r2
 10173c4:	2005883a 	mov	r2,r4
 10173c8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10173cc:	e0bffc17 	ldw	r2,-16(fp)
 10173d0:	10800104 	addi	r2,r2,4
 10173d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10173d8:	e0bffb17 	ldw	r2,-20(fp)
 10173dc:	1080800c 	andi	r2,r2,512
 10173e0:	1005003a 	cmpeq	r2,r2,zero
 10173e4:	103fbb1e 	bne	r2,zero,10172d4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10173e8:	e0bffb17 	ldw	r2,-20(fp)
 10173ec:	10bfffec 	andhi	r2,r2,65535
 10173f0:	1004d43a 	srli	r2,r2,16
 10173f4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10173f8:	00001506 	br	1017450 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10173fc:	e13ffc17 	ldw	r4,-16(fp)
 1017400:	e0bffd17 	ldw	r2,-12(fp)
 1017404:	10c00d17 	ldw	r3,52(r2)
 1017408:	e0bffd17 	ldw	r2,-12(fp)
 101740c:	1885883a 	add	r2,r3,r2
 1017410:	10820e04 	addi	r2,r2,2104
 1017414:	10800003 	ldbu	r2,0(r2)
 1017418:	10c03fcc 	andi	r3,r2,255
 101741c:	18c0201c 	xori	r3,r3,128
 1017420:	18ffe004 	addi	r3,r3,-128
 1017424:	2005883a 	mov	r2,r4
 1017428:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101742c:	e0bffd17 	ldw	r2,-12(fp)
 1017430:	10800d17 	ldw	r2,52(r2)
 1017434:	10800044 	addi	r2,r2,1
 1017438:	10c1ffcc 	andi	r3,r2,2047
 101743c:	e0bffd17 	ldw	r2,-12(fp)
 1017440:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1017444:	e0bff817 	ldw	r2,-32(fp)
 1017448:	10bfffc4 	addi	r2,r2,-1
 101744c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1017450:	e0bff817 	ldw	r2,-32(fp)
 1017454:	1005003a 	cmpeq	r2,r2,zero
 1017458:	1000051e 	bne	r2,zero,1017470 <altera_avalon_jtag_uart_irq+0x1c8>
 101745c:	e0bffd17 	ldw	r2,-12(fp)
 1017460:	10c00d17 	ldw	r3,52(r2)
 1017464:	e0bffd17 	ldw	r2,-12(fp)
 1017468:	10800c17 	ldw	r2,48(r2)
 101746c:	18bfe31e 	bne	r3,r2,10173fc <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1017470:	e0bff817 	ldw	r2,-32(fp)
 1017474:	1005003a 	cmpeq	r2,r2,zero
 1017478:	103f961e 	bne	r2,zero,10172d4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101747c:	e0bffd17 	ldw	r2,-12(fp)
 1017480:	10c00817 	ldw	r3,32(r2)
 1017484:	00bfff44 	movi	r2,-3
 1017488:	1886703a 	and	r3,r3,r2
 101748c:	e0bffd17 	ldw	r2,-12(fp)
 1017490:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017494:	e0bffd17 	ldw	r2,-12(fp)
 1017498:	10800017 	ldw	r2,0(r2)
 101749c:	11000104 	addi	r4,r2,4
 10174a0:	e0bffd17 	ldw	r2,-12(fp)
 10174a4:	10800817 	ldw	r2,32(r2)
 10174a8:	1007883a 	mov	r3,r2
 10174ac:	2005883a 	mov	r2,r4
 10174b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10174b4:	e0bffc17 	ldw	r2,-16(fp)
 10174b8:	10800104 	addi	r2,r2,4
 10174bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10174c0:	003f8406 	br	10172d4 <altera_avalon_jtag_uart_irq+0x2c>
}
 10174c4:	e037883a 	mov	sp,fp
 10174c8:	df000017 	ldw	fp,0(sp)
 10174cc:	dec00104 	addi	sp,sp,4
 10174d0:	f800283a 	ret

010174d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10174d4:	defffc04 	addi	sp,sp,-16
 10174d8:	df000315 	stw	fp,12(sp)
 10174dc:	df000304 	addi	fp,sp,12
 10174e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10174e4:	e0bfff17 	ldw	r2,-4(fp)
 10174e8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10174ec:	e0bffe17 	ldw	r2,-8(fp)
 10174f0:	10800017 	ldw	r2,0(r2)
 10174f4:	10800104 	addi	r2,r2,4
 10174f8:	10800037 	ldwio	r2,0(r2)
 10174fc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1017500:	e0bffd17 	ldw	r2,-12(fp)
 1017504:	1081000c 	andi	r2,r2,1024
 1017508:	1005003a 	cmpeq	r2,r2,zero
 101750c:	10000c1e 	bne	r2,zero,1017540 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1017510:	e0bffe17 	ldw	r2,-8(fp)
 1017514:	10800017 	ldw	r2,0(r2)
 1017518:	11000104 	addi	r4,r2,4
 101751c:	e0bffe17 	ldw	r2,-8(fp)
 1017520:	10800817 	ldw	r2,32(r2)
 1017524:	10810014 	ori	r2,r2,1024
 1017528:	1007883a 	mov	r3,r2
 101752c:	2005883a 	mov	r2,r4
 1017530:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1017534:	e0bffe17 	ldw	r2,-8(fp)
 1017538:	10000915 	stw	zero,36(r2)
 101753c:	00000a06 	br	1017568 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1017540:	e0bffe17 	ldw	r2,-8(fp)
 1017544:	10c00917 	ldw	r3,36(r2)
 1017548:	00a00034 	movhi	r2,32768
 101754c:	10bfff04 	addi	r2,r2,-4
 1017550:	10c00536 	bltu	r2,r3,1017568 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1017554:	e0bffe17 	ldw	r2,-8(fp)
 1017558:	10800917 	ldw	r2,36(r2)
 101755c:	10c00044 	addi	r3,r2,1
 1017560:	e0bffe17 	ldw	r2,-8(fp)
 1017564:	10c00915 	stw	r3,36(r2)
 1017568:	008040b4 	movhi	r2,258
 101756c:	10ba4c04 	addi	r2,r2,-5840
 1017570:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1017574:	e037883a 	mov	sp,fp
 1017578:	df000017 	ldw	fp,0(sp)
 101757c:	dec00104 	addi	sp,sp,4
 1017580:	f800283a 	ret

01017584 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1017584:	defffc04 	addi	sp,sp,-16
 1017588:	df000315 	stw	fp,12(sp)
 101758c:	df000304 	addi	fp,sp,12
 1017590:	e13ffd15 	stw	r4,-12(fp)
 1017594:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1017598:	00000706 	br	10175b8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 101759c:	e0bffe17 	ldw	r2,-8(fp)
 10175a0:	1090000c 	andi	r2,r2,16384
 10175a4:	1005003a 	cmpeq	r2,r2,zero
 10175a8:	1000031e 	bne	r2,zero,10175b8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10175ac:	00bffd44 	movi	r2,-11
 10175b0:	e0bfff15 	stw	r2,-4(fp)
 10175b4:	00000b06 	br	10175e4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10175b8:	e0bffd17 	ldw	r2,-12(fp)
 10175bc:	10c00d17 	ldw	r3,52(r2)
 10175c0:	e0bffd17 	ldw	r2,-12(fp)
 10175c4:	10800c17 	ldw	r2,48(r2)
 10175c8:	18800526 	beq	r3,r2,10175e0 <altera_avalon_jtag_uart_close+0x5c>
 10175cc:	e0bffd17 	ldw	r2,-12(fp)
 10175d0:	10c00917 	ldw	r3,36(r2)
 10175d4:	e0bffd17 	ldw	r2,-12(fp)
 10175d8:	10800117 	ldw	r2,4(r2)
 10175dc:	18bfef36 	bltu	r3,r2,101759c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10175e0:	e03fff15 	stw	zero,-4(fp)
 10175e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10175e8:	e037883a 	mov	sp,fp
 10175ec:	df000017 	ldw	fp,0(sp)
 10175f0:	dec00104 	addi	sp,sp,4
 10175f4:	f800283a 	ret

010175f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10175f8:	defff804 	addi	sp,sp,-32
 10175fc:	df000715 	stw	fp,28(sp)
 1017600:	df000704 	addi	fp,sp,28
 1017604:	e13ffb15 	stw	r4,-20(fp)
 1017608:	e17ffc15 	stw	r5,-16(fp)
 101760c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1017610:	00bff9c4 	movi	r2,-25
 1017614:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1017618:	e0bffc17 	ldw	r2,-16(fp)
 101761c:	e0bfff15 	stw	r2,-4(fp)
 1017620:	e0ffff17 	ldw	r3,-4(fp)
 1017624:	189a8060 	cmpeqi	r2,r3,27137
 1017628:	1000041e 	bne	r2,zero,101763c <altera_avalon_jtag_uart_ioctl+0x44>
 101762c:	e0ffff17 	ldw	r3,-4(fp)
 1017630:	189a80a0 	cmpeqi	r2,r3,27138
 1017634:	10001b1e 	bne	r2,zero,10176a4 <altera_avalon_jtag_uart_ioctl+0xac>
 1017638:	00002706 	br	10176d8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101763c:	e0bffb17 	ldw	r2,-20(fp)
 1017640:	10c00117 	ldw	r3,4(r2)
 1017644:	00a00034 	movhi	r2,32768
 1017648:	10bfffc4 	addi	r2,r2,-1
 101764c:	18802226 	beq	r3,r2,10176d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1017650:	e0bffd17 	ldw	r2,-12(fp)
 1017654:	10800017 	ldw	r2,0(r2)
 1017658:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 101765c:	e0bff917 	ldw	r2,-28(fp)
 1017660:	10800090 	cmplti	r2,r2,2
 1017664:	1000071e 	bne	r2,zero,1017684 <altera_avalon_jtag_uart_ioctl+0x8c>
 1017668:	e0fff917 	ldw	r3,-28(fp)
 101766c:	00a00034 	movhi	r2,32768
 1017670:	10bfffc4 	addi	r2,r2,-1
 1017674:	18800326 	beq	r3,r2,1017684 <altera_avalon_jtag_uart_ioctl+0x8c>
 1017678:	e0bff917 	ldw	r2,-28(fp)
 101767c:	e0bffe15 	stw	r2,-8(fp)
 1017680:	00000306 	br	1017690 <altera_avalon_jtag_uart_ioctl+0x98>
 1017684:	00e00034 	movhi	r3,32768
 1017688:	18ffff84 	addi	r3,r3,-2
 101768c:	e0fffe15 	stw	r3,-8(fp)
 1017690:	e0bffb17 	ldw	r2,-20(fp)
 1017694:	e0fffe17 	ldw	r3,-8(fp)
 1017698:	10c00115 	stw	r3,4(r2)
      rc = 0;
 101769c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10176a0:	00000d06 	br	10176d8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10176a4:	e0bffb17 	ldw	r2,-20(fp)
 10176a8:	10c00117 	ldw	r3,4(r2)
 10176ac:	00a00034 	movhi	r2,32768
 10176b0:	10bfffc4 	addi	r2,r2,-1
 10176b4:	18800826 	beq	r3,r2,10176d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10176b8:	e13ffd17 	ldw	r4,-12(fp)
 10176bc:	e0bffb17 	ldw	r2,-20(fp)
 10176c0:	10c00917 	ldw	r3,36(r2)
 10176c4:	e0bffb17 	ldw	r2,-20(fp)
 10176c8:	10800117 	ldw	r2,4(r2)
 10176cc:	1885803a 	cmpltu	r2,r3,r2
 10176d0:	20800015 	stw	r2,0(r4)
      rc = 0;
 10176d4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10176d8:	e0bffa17 	ldw	r2,-24(fp)
}
 10176dc:	e037883a 	mov	sp,fp
 10176e0:	df000017 	ldw	fp,0(sp)
 10176e4:	dec00104 	addi	sp,sp,4
 10176e8:	f800283a 	ret

010176ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10176ec:	defff204 	addi	sp,sp,-56
 10176f0:	dfc00d15 	stw	ra,52(sp)
 10176f4:	df000c15 	stw	fp,48(sp)
 10176f8:	df000c04 	addi	fp,sp,48
 10176fc:	e13ffb15 	stw	r4,-20(fp)
 1017700:	e17ffc15 	stw	r5,-16(fp)
 1017704:	e1bffd15 	stw	r6,-12(fp)
 1017708:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 101770c:	e0bffc17 	ldw	r2,-16(fp)
 1017710:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1017714:	00004806 	br	1017838 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1017718:	e0bffb17 	ldw	r2,-20(fp)
 101771c:	10800a17 	ldw	r2,40(r2)
 1017720:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1017724:	e0bffb17 	ldw	r2,-20(fp)
 1017728:	10800b17 	ldw	r2,44(r2)
 101772c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1017730:	e0fff717 	ldw	r3,-36(fp)
 1017734:	e0bff617 	ldw	r2,-40(fp)
 1017738:	18800536 	bltu	r3,r2,1017750 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 101773c:	e0bff717 	ldw	r2,-36(fp)
 1017740:	e0fff617 	ldw	r3,-40(fp)
 1017744:	10c5c83a 	sub	r2,r2,r3
 1017748:	e0bff815 	stw	r2,-32(fp)
 101774c:	00000406 	br	1017760 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1017750:	00820004 	movi	r2,2048
 1017754:	e0fff617 	ldw	r3,-40(fp)
 1017758:	10c5c83a 	sub	r2,r2,r3
 101775c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1017760:	e0bff817 	ldw	r2,-32(fp)
 1017764:	1005003a 	cmpeq	r2,r2,zero
 1017768:	10001f1e 	bne	r2,zero,10177e8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 101776c:	e0fffd17 	ldw	r3,-12(fp)
 1017770:	e0bff817 	ldw	r2,-32(fp)
 1017774:	1880022e 	bgeu	r3,r2,1017780 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1017778:	e0bffd17 	ldw	r2,-12(fp)
 101777c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1017780:	e0bffb17 	ldw	r2,-20(fp)
 1017784:	10c00e04 	addi	r3,r2,56
 1017788:	e0bff617 	ldw	r2,-40(fp)
 101778c:	1887883a 	add	r3,r3,r2
 1017790:	e0bffa17 	ldw	r2,-24(fp)
 1017794:	1009883a 	mov	r4,r2
 1017798:	180b883a 	mov	r5,r3
 101779c:	e1bff817 	ldw	r6,-32(fp)
 10177a0:	10060100 	call	1006010 <memcpy>
      ptr   += n;
 10177a4:	e0fff817 	ldw	r3,-32(fp)
 10177a8:	e0bffa17 	ldw	r2,-24(fp)
 10177ac:	10c5883a 	add	r2,r2,r3
 10177b0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 10177b4:	e0fffd17 	ldw	r3,-12(fp)
 10177b8:	e0bff817 	ldw	r2,-32(fp)
 10177bc:	1885c83a 	sub	r2,r3,r2
 10177c0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10177c4:	e0fff617 	ldw	r3,-40(fp)
 10177c8:	e0bff817 	ldw	r2,-32(fp)
 10177cc:	1885883a 	add	r2,r3,r2
 10177d0:	10c1ffcc 	andi	r3,r2,2047
 10177d4:	e0bffb17 	ldw	r2,-20(fp)
 10177d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10177dc:	e0bffd17 	ldw	r2,-12(fp)
 10177e0:	10800048 	cmpgei	r2,r2,1
 10177e4:	103fcc1e 	bne	r2,zero,1017718 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10177e8:	e0fffa17 	ldw	r3,-24(fp)
 10177ec:	e0bffc17 	ldw	r2,-16(fp)
 10177f0:	1880141e 	bne	r3,r2,1017844 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10177f4:	e0bffe17 	ldw	r2,-8(fp)
 10177f8:	1090000c 	andi	r2,r2,16384
 10177fc:	1004c03a 	cmpne	r2,r2,zero
 1017800:	1000101e 	bne	r2,zero,1017844 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1017804:	e0bffb17 	ldw	r2,-20(fp)
 1017808:	10c00a17 	ldw	r3,40(r2)
 101780c:	e0bff717 	ldw	r2,-36(fp)
 1017810:	1880051e 	bne	r3,r2,1017828 <altera_avalon_jtag_uart_read+0x13c>
 1017814:	e0bffb17 	ldw	r2,-20(fp)
 1017818:	10c00917 	ldw	r3,36(r2)
 101781c:	e0bffb17 	ldw	r2,-20(fp)
 1017820:	10800117 	ldw	r2,4(r2)
 1017824:	18bff736 	bltu	r3,r2,1017804 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1017828:	e0bffb17 	ldw	r2,-20(fp)
 101782c:	10c00a17 	ldw	r3,40(r2)
 1017830:	e0bff717 	ldw	r2,-36(fp)
 1017834:	18800326 	beq	r3,r2,1017844 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1017838:	e0bffd17 	ldw	r2,-12(fp)
 101783c:	10800048 	cmpgei	r2,r2,1
 1017840:	103fb51e 	bne	r2,zero,1017718 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1017844:	e0fffa17 	ldw	r3,-24(fp)
 1017848:	e0bffc17 	ldw	r2,-16(fp)
 101784c:	18801926 	beq	r3,r2,10178b4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017850:	0005303a 	rdctl	r2,status
 1017854:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017858:	e0fff517 	ldw	r3,-44(fp)
 101785c:	00bfff84 	movi	r2,-2
 1017860:	1884703a 	and	r2,r3,r2
 1017864:	1001703a 	wrctl	status,r2
  
  return context;
 1017868:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 101786c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1017870:	e0bffb17 	ldw	r2,-20(fp)
 1017874:	10800817 	ldw	r2,32(r2)
 1017878:	10c00054 	ori	r3,r2,1
 101787c:	e0bffb17 	ldw	r2,-20(fp)
 1017880:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017884:	e0bffb17 	ldw	r2,-20(fp)
 1017888:	10800017 	ldw	r2,0(r2)
 101788c:	11000104 	addi	r4,r2,4
 1017890:	e0bffb17 	ldw	r2,-20(fp)
 1017894:	10800817 	ldw	r2,32(r2)
 1017898:	1007883a 	mov	r3,r2
 101789c:	2005883a 	mov	r2,r4
 10178a0:	10c00035 	stwio	r3,0(r2)
 10178a4:	e0bff917 	ldw	r2,-28(fp)
 10178a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10178ac:	e0bff417 	ldw	r2,-48(fp)
 10178b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10178b4:	e0fffa17 	ldw	r3,-24(fp)
 10178b8:	e0bffc17 	ldw	r2,-16(fp)
 10178bc:	18800526 	beq	r3,r2,10178d4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10178c0:	e0fffa17 	ldw	r3,-24(fp)
 10178c4:	e0bffc17 	ldw	r2,-16(fp)
 10178c8:	1887c83a 	sub	r3,r3,r2
 10178cc:	e0ffff15 	stw	r3,-4(fp)
 10178d0:	00000906 	br	10178f8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10178d4:	e0bffe17 	ldw	r2,-8(fp)
 10178d8:	1090000c 	andi	r2,r2,16384
 10178dc:	1005003a 	cmpeq	r2,r2,zero
 10178e0:	1000031e 	bne	r2,zero,10178f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10178e4:	00bffd44 	movi	r2,-11
 10178e8:	e0bfff15 	stw	r2,-4(fp)
 10178ec:	00000206 	br	10178f8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 10178f0:	00bffec4 	movi	r2,-5
 10178f4:	e0bfff15 	stw	r2,-4(fp)
 10178f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10178fc:	e037883a 	mov	sp,fp
 1017900:	dfc00117 	ldw	ra,4(sp)
 1017904:	df000017 	ldw	fp,0(sp)
 1017908:	dec00204 	addi	sp,sp,8
 101790c:	f800283a 	ret

01017910 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1017910:	defff204 	addi	sp,sp,-56
 1017914:	dfc00d15 	stw	ra,52(sp)
 1017918:	df000c15 	stw	fp,48(sp)
 101791c:	df000c04 	addi	fp,sp,48
 1017920:	e13ffb15 	stw	r4,-20(fp)
 1017924:	e17ffc15 	stw	r5,-16(fp)
 1017928:	e1bffd15 	stw	r6,-12(fp)
 101792c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1017930:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1017934:	e0bffc17 	ldw	r2,-16(fp)
 1017938:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 101793c:	00003a06 	br	1017a28 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1017940:	e0bffb17 	ldw	r2,-20(fp)
 1017944:	10800c17 	ldw	r2,48(r2)
 1017948:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 101794c:	e0bffb17 	ldw	r2,-20(fp)
 1017950:	10800d17 	ldw	r2,52(r2)
 1017954:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1017958:	e0fffa17 	ldw	r3,-24(fp)
 101795c:	e0bff917 	ldw	r2,-28(fp)
 1017960:	1880062e 	bgeu	r3,r2,101797c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1017964:	e0fff917 	ldw	r3,-28(fp)
 1017968:	e0bffa17 	ldw	r2,-24(fp)
 101796c:	1885c83a 	sub	r2,r3,r2
 1017970:	10bfffc4 	addi	r2,r2,-1
 1017974:	e0bff815 	stw	r2,-32(fp)
 1017978:	00000c06 	br	10179ac <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 101797c:	e0bff917 	ldw	r2,-28(fp)
 1017980:	1005003a 	cmpeq	r2,r2,zero
 1017984:	1000051e 	bne	r2,zero,101799c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1017988:	00820004 	movi	r2,2048
 101798c:	e0fffa17 	ldw	r3,-24(fp)
 1017990:	10c5c83a 	sub	r2,r2,r3
 1017994:	e0bff815 	stw	r2,-32(fp)
 1017998:	00000406 	br	10179ac <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101799c:	0081ffc4 	movi	r2,2047
 10179a0:	e0fffa17 	ldw	r3,-24(fp)
 10179a4:	10c5c83a 	sub	r2,r2,r3
 10179a8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10179ac:	e0bff817 	ldw	r2,-32(fp)
 10179b0:	1005003a 	cmpeq	r2,r2,zero
 10179b4:	10001f1e 	bne	r2,zero,1017a34 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10179b8:	e0fffd17 	ldw	r3,-12(fp)
 10179bc:	e0bff817 	ldw	r2,-32(fp)
 10179c0:	1880022e 	bgeu	r3,r2,10179cc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10179c4:	e0bffd17 	ldw	r2,-12(fp)
 10179c8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10179cc:	e0bffb17 	ldw	r2,-20(fp)
 10179d0:	10c20e04 	addi	r3,r2,2104
 10179d4:	e0bffa17 	ldw	r2,-24(fp)
 10179d8:	1885883a 	add	r2,r3,r2
 10179dc:	e0fffc17 	ldw	r3,-16(fp)
 10179e0:	1009883a 	mov	r4,r2
 10179e4:	180b883a 	mov	r5,r3
 10179e8:	e1bff817 	ldw	r6,-32(fp)
 10179ec:	10060100 	call	1006010 <memcpy>
      ptr   += n;
 10179f0:	e0fff817 	ldw	r3,-32(fp)
 10179f4:	e0bffc17 	ldw	r2,-16(fp)
 10179f8:	10c5883a 	add	r2,r2,r3
 10179fc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1017a00:	e0fffd17 	ldw	r3,-12(fp)
 1017a04:	e0bff817 	ldw	r2,-32(fp)
 1017a08:	1885c83a 	sub	r2,r3,r2
 1017a0c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1017a10:	e0fffa17 	ldw	r3,-24(fp)
 1017a14:	e0bff817 	ldw	r2,-32(fp)
 1017a18:	1885883a 	add	r2,r3,r2
 1017a1c:	10c1ffcc 	andi	r3,r2,2047
 1017a20:	e0bffb17 	ldw	r2,-20(fp)
 1017a24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1017a28:	e0bffd17 	ldw	r2,-12(fp)
 1017a2c:	10800048 	cmpgei	r2,r2,1
 1017a30:	103fc31e 	bne	r2,zero,1017940 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017a34:	0005303a 	rdctl	r2,status
 1017a38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017a3c:	e0fff517 	ldw	r3,-44(fp)
 1017a40:	00bfff84 	movi	r2,-2
 1017a44:	1884703a 	and	r2,r3,r2
 1017a48:	1001703a 	wrctl	status,r2
  
  return context;
 1017a4c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1017a50:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1017a54:	e0bffb17 	ldw	r2,-20(fp)
 1017a58:	10800817 	ldw	r2,32(r2)
 1017a5c:	10c00094 	ori	r3,r2,2
 1017a60:	e0bffb17 	ldw	r2,-20(fp)
 1017a64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017a68:	e0bffb17 	ldw	r2,-20(fp)
 1017a6c:	10800017 	ldw	r2,0(r2)
 1017a70:	11000104 	addi	r4,r2,4
 1017a74:	e0bffb17 	ldw	r2,-20(fp)
 1017a78:	10800817 	ldw	r2,32(r2)
 1017a7c:	1007883a 	mov	r3,r2
 1017a80:	2005883a 	mov	r2,r4
 1017a84:	10c00035 	stwio	r3,0(r2)
 1017a88:	e0bff717 	ldw	r2,-36(fp)
 1017a8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017a90:	e0bff417 	ldw	r2,-48(fp)
 1017a94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1017a98:	e0bffd17 	ldw	r2,-12(fp)
 1017a9c:	10800050 	cmplti	r2,r2,1
 1017aa0:	1000111e 	bne	r2,zero,1017ae8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1017aa4:	e0bffe17 	ldw	r2,-8(fp)
 1017aa8:	1090000c 	andi	r2,r2,16384
 1017aac:	1004c03a 	cmpne	r2,r2,zero
 1017ab0:	1000101e 	bne	r2,zero,1017af4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1017ab4:	e0bffb17 	ldw	r2,-20(fp)
 1017ab8:	10c00d17 	ldw	r3,52(r2)
 1017abc:	e0bff917 	ldw	r2,-28(fp)
 1017ac0:	1880051e 	bne	r3,r2,1017ad8 <altera_avalon_jtag_uart_write+0x1c8>
 1017ac4:	e0bffb17 	ldw	r2,-20(fp)
 1017ac8:	10c00917 	ldw	r3,36(r2)
 1017acc:	e0bffb17 	ldw	r2,-20(fp)
 1017ad0:	10800117 	ldw	r2,4(r2)
 1017ad4:	18bff736 	bltu	r3,r2,1017ab4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1017ad8:	e0bffb17 	ldw	r2,-20(fp)
 1017adc:	10c00d17 	ldw	r3,52(r2)
 1017ae0:	e0bff917 	ldw	r2,-28(fp)
 1017ae4:	18800326 	beq	r3,r2,1017af4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1017ae8:	e0bffd17 	ldw	r2,-12(fp)
 1017aec:	10800048 	cmpgei	r2,r2,1
 1017af0:	103fcd1e 	bne	r2,zero,1017a28 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1017af4:	e0fffc17 	ldw	r3,-16(fp)
 1017af8:	e0bff617 	ldw	r2,-40(fp)
 1017afc:	18800526 	beq	r3,r2,1017b14 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1017b00:	e0fffc17 	ldw	r3,-16(fp)
 1017b04:	e0bff617 	ldw	r2,-40(fp)
 1017b08:	1887c83a 	sub	r3,r3,r2
 1017b0c:	e0ffff15 	stw	r3,-4(fp)
 1017b10:	00000906 	br	1017b38 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1017b14:	e0bffe17 	ldw	r2,-8(fp)
 1017b18:	1090000c 	andi	r2,r2,16384
 1017b1c:	1005003a 	cmpeq	r2,r2,zero
 1017b20:	1000031e 	bne	r2,zero,1017b30 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1017b24:	00bffd44 	movi	r2,-11
 1017b28:	e0bfff15 	stw	r2,-4(fp)
 1017b2c:	00000206 	br	1017b38 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1017b30:	00bffec4 	movi	r2,-5
 1017b34:	e0bfff15 	stw	r2,-4(fp)
 1017b38:	e0bfff17 	ldw	r2,-4(fp)
}
 1017b3c:	e037883a 	mov	sp,fp
 1017b40:	dfc00117 	ldw	ra,4(sp)
 1017b44:	df000017 	ldw	fp,0(sp)
 1017b48:	dec00204 	addi	sp,sp,8
 1017b4c:	f800283a 	ret

01017b50 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 1017b50:	defffd04 	addi	sp,sp,-12
 1017b54:	df000215 	stw	fp,8(sp)
 1017b58:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 1017b5c:	008040b4 	movhi	r2,258
 1017b60:	10ba4a04 	addi	r2,r2,-5848
 1017b64:	10800017 	ldw	r2,0(r2)
 1017b68:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 1017b6c:	008040b4 	movhi	r2,258
 1017b70:	10ba4b04 	addi	r2,r2,-5844
 1017b74:	10800017 	ldw	r2,0(r2)
 1017b78:	1004c03a 	cmpne	r2,r2,zero
 1017b7c:	1000031e 	bne	r2,zero,1017b8c <alt_timestamp_start+0x3c>
  {
    return -1;
 1017b80:	00bfffc4 	movi	r2,-1
 1017b84:	e0bfff15 	stw	r2,-4(fp)
 1017b88:	00001506 	br	1017be0 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 1017b8c:	e0bffe17 	ldw	r2,-8(fp)
 1017b90:	10800104 	addi	r2,r2,4
 1017b94:	1007883a 	mov	r3,r2
 1017b98:	00800204 	movi	r2,8
 1017b9c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 1017ba0:	e0bffe17 	ldw	r2,-8(fp)
 1017ba4:	10800204 	addi	r2,r2,8
 1017ba8:	1007883a 	mov	r3,r2
 1017bac:	00bfffd4 	movui	r2,65535
 1017bb0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 1017bb4:	e0bffe17 	ldw	r2,-8(fp)
 1017bb8:	10800304 	addi	r2,r2,12
 1017bbc:	1007883a 	mov	r3,r2
 1017bc0:	00bfffd4 	movui	r2,65535
 1017bc4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 1017bc8:	e0bffe17 	ldw	r2,-8(fp)
 1017bcc:	10800104 	addi	r2,r2,4
 1017bd0:	1007883a 	mov	r3,r2
 1017bd4:	00800104 	movi	r2,4
 1017bd8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 1017bdc:	e03fff15 	stw	zero,-4(fp)
 1017be0:	e0bfff17 	ldw	r2,-4(fp)
}
 1017be4:	e037883a 	mov	sp,fp
 1017be8:	df000017 	ldw	fp,0(sp)
 1017bec:	dec00104 	addi	sp,sp,4
 1017bf0:	f800283a 	ret

01017bf4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 1017bf4:	defffb04 	addi	sp,sp,-20
 1017bf8:	df000415 	stw	fp,16(sp)
 1017bfc:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
 1017c00:	008040b4 	movhi	r2,258
 1017c04:	10ba4a04 	addi	r2,r2,-5848
 1017c08:	10800017 	ldw	r2,0(r2)
 1017c0c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 1017c10:	008040b4 	movhi	r2,258
 1017c14:	10ba4b04 	addi	r2,r2,-5844
 1017c18:	10800017 	ldw	r2,0(r2)
 1017c1c:	1004c03a 	cmpne	r2,r2,zero
 1017c20:	1000031e 	bne	r2,zero,1017c30 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
 1017c24:	00bfffc4 	movi	r2,-1
 1017c28:	e0bfff15 	stw	r2,-4(fp)
 1017c2c:	00001306 	br	1017c7c <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 1017c30:	e0bffe17 	ldw	r2,-8(fp)
 1017c34:	10800404 	addi	r2,r2,16
 1017c38:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 1017c3c:	e0bffe17 	ldw	r2,-8(fp)
 1017c40:	10800404 	addi	r2,r2,16
 1017c44:	10800037 	ldwio	r2,0(r2)
 1017c48:	10bfffcc 	andi	r2,r2,65535
 1017c4c:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 1017c50:	e0bffe17 	ldw	r2,-8(fp)
 1017c54:	10800504 	addi	r2,r2,20
 1017c58:	10800037 	ldwio	r2,0(r2)
 1017c5c:	10bfffcc 	andi	r2,r2,65535
 1017c60:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 1017c64:	e0bffc17 	ldw	r2,-16(fp)
 1017c68:	1006943a 	slli	r3,r2,16
 1017c6c:	e0bffd17 	ldw	r2,-12(fp)
 1017c70:	1884b03a 	or	r2,r3,r2
 1017c74:	0084303a 	nor	r2,zero,r2
 1017c78:	e0bfff15 	stw	r2,-4(fp)
 1017c7c:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
 1017c80:	e037883a 	mov	sp,fp
 1017c84:	df000017 	ldw	fp,0(sp)
 1017c88:	dec00104 	addi	sp,sp,4
 1017c8c:	f800283a 	ret

01017c90 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 1017c90:	deffff04 	addi	sp,sp,-4
 1017c94:	df000015 	stw	fp,0(sp)
 1017c98:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 1017c9c:	008040b4 	movhi	r2,258
 1017ca0:	10ba4b04 	addi	r2,r2,-5844
 1017ca4:	10800017 	ldw	r2,0(r2)
}
 1017ca8:	e037883a 	mov	sp,fp
 1017cac:	df000017 	ldw	fp,0(sp)
 1017cb0:	dec00104 	addi	sp,sp,4
 1017cb4:	f800283a 	ret

01017cb8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1017cb8:	defffc04 	addi	sp,sp,-16
 1017cbc:	df000315 	stw	fp,12(sp)
 1017cc0:	df000304 	addi	fp,sp,12
 1017cc4:	e13ffe15 	stw	r4,-8(fp)
 1017cc8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1017ccc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1017cd0:	e0bfff17 	ldw	r2,-4(fp)
 1017cd4:	1004c03a 	cmpne	r2,r2,zero
 1017cd8:	1000061e 	bne	r2,zero,1017cf4 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1017cdc:	e0bffe17 	ldw	r2,-8(fp)
 1017ce0:	1007883a 	mov	r3,r2
 1017ce4:	e0bffd03 	ldbu	r2,-12(fp)
 1017ce8:	10c4b03a 	or	r2,r2,r3
 1017cec:	e0bffd05 	stb	r2,-12(fp)
 1017cf0:	00000806 	br	1017d14 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1017cf4:	e0bffe17 	ldw	r2,-8(fp)
 1017cf8:	1007883a 	mov	r3,r2
 1017cfc:	e0bffd03 	ldbu	r2,-12(fp)
 1017d00:	10c4b03a 	or	r2,r2,r3
 1017d04:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1017d08:	e0bffd03 	ldbu	r2,-12(fp)
 1017d0c:	10801014 	ori	r2,r2,64
 1017d10:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1017d14:	e0fffd03 	ldbu	r3,-12(fp)
 1017d18:	00bfe004 	movi	r2,-128
 1017d1c:	1884b03a 	or	r2,r3,r2
 1017d20:	10803fcc 	andi	r2,r2,255
}
 1017d24:	e037883a 	mov	sp,fp
 1017d28:	df000017 	ldw	fp,0(sp)
 1017d2c:	dec00104 	addi	sp,sp,4
 1017d30:	f800283a 	ret

01017d34 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1017d34:	defffd04 	addi	sp,sp,-12
 1017d38:	df000215 	stw	fp,8(sp)
 1017d3c:	df000204 	addi	fp,sp,8
 1017d40:	e13ffe15 	stw	r4,-8(fp)
 1017d44:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1017d48:	e0bffe17 	ldw	r2,-8(fp)
 1017d4c:	10800a17 	ldw	r2,40(r2)
 1017d50:	e0ffff03 	ldbu	r3,-4(fp)
 1017d54:	10c00025 	stbio	r3,0(r2)
}
 1017d58:	e037883a 	mov	sp,fp
 1017d5c:	df000017 	ldw	fp,0(sp)
 1017d60:	dec00104 	addi	sp,sp,4
 1017d64:	f800283a 	ret

01017d68 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1017d68:	defffe04 	addi	sp,sp,-8
 1017d6c:	df000115 	stw	fp,4(sp)
 1017d70:	df000104 	addi	fp,sp,4
 1017d74:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1017d78:	e0bfff17 	ldw	r2,-4(fp)
 1017d7c:	10800a17 	ldw	r2,40(r2)
 1017d80:	1007883a 	mov	r3,r2
 1017d84:	00800044 	movi	r2,1
 1017d88:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1017d8c:	e037883a 	mov	sp,fp
 1017d90:	df000017 	ldw	fp,0(sp)
 1017d94:	dec00104 	addi	sp,sp,4
 1017d98:	f800283a 	ret

01017d9c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1017d9c:	defffc04 	addi	sp,sp,-16
 1017da0:	dfc00315 	stw	ra,12(sp)
 1017da4:	df000215 	stw	fp,8(sp)
 1017da8:	df000204 	addi	fp,sp,8
 1017dac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1017db0:	e13fff17 	ldw	r4,-4(fp)
 1017db4:	014040b4 	movhi	r5,258
 1017db8:	29725d04 	addi	r5,r5,-13964
 1017dbc:	10190ec0 	call	10190ec <alt_find_dev>
 1017dc0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1017dc4:	e0bffe17 	ldw	r2,-8(fp)
}
 1017dc8:	e037883a 	mov	sp,fp
 1017dcc:	dfc00117 	ldw	ra,4(sp)
 1017dd0:	df000017 	ldw	fp,0(sp)
 1017dd4:	dec00204 	addi	sp,sp,8
 1017dd8:	f800283a 	ret

01017ddc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1017ddc:	defffb04 	addi	sp,sp,-20
 1017de0:	df000415 	stw	fp,16(sp)
 1017de4:	df000404 	addi	fp,sp,16
 1017de8:	e13ffd15 	stw	r4,-12(fp)
 1017dec:	e17ffe15 	stw	r5,-8(fp)
 1017df0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1017df4:	e03ffc15 	stw	zero,-16(fp)
 1017df8:	00000f06 	br	1017e38 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1017dfc:	e0bffd17 	ldw	r2,-12(fp)
 1017e00:	10800a17 	ldw	r2,40(r2)
 1017e04:	11000044 	addi	r4,r2,1
 1017e08:	e0fffc17 	ldw	r3,-16(fp)
 1017e0c:	e0bffe17 	ldw	r2,-8(fp)
 1017e10:	1885883a 	add	r2,r3,r2
 1017e14:	10800003 	ldbu	r2,0(r2)
 1017e18:	10c03fcc 	andi	r3,r2,255
 1017e1c:	18c0201c 	xori	r3,r3,128
 1017e20:	18ffe004 	addi	r3,r3,-128
 1017e24:	2005883a 	mov	r2,r4
 1017e28:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1017e2c:	e0bffc17 	ldw	r2,-16(fp)
 1017e30:	10800044 	addi	r2,r2,1
 1017e34:	e0bffc15 	stw	r2,-16(fp)
 1017e38:	e0fffc17 	ldw	r3,-16(fp)
 1017e3c:	e0bfff17 	ldw	r2,-4(fp)
 1017e40:	18bfee36 	bltu	r3,r2,1017dfc <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1017e44:	e037883a 	mov	sp,fp
 1017e48:	df000017 	ldw	fp,0(sp)
 1017e4c:	dec00104 	addi	sp,sp,4
 1017e50:	f800283a 	ret

01017e54 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1017e54:	defffd04 	addi	sp,sp,-12
 1017e58:	df000215 	stw	fp,8(sp)
 1017e5c:	df000204 	addi	fp,sp,8
 1017e60:	e13ffe15 	stw	r4,-8(fp)
 1017e64:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1017e68:	00000d06 	br	1017ea0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1017e6c:	e0bffe17 	ldw	r2,-8(fp)
 1017e70:	10800a17 	ldw	r2,40(r2)
 1017e74:	11000044 	addi	r4,r2,1
 1017e78:	e0bfff17 	ldw	r2,-4(fp)
 1017e7c:	10800003 	ldbu	r2,0(r2)
 1017e80:	10c03fcc 	andi	r3,r2,255
 1017e84:	18c0201c 	xori	r3,r3,128
 1017e88:	18ffe004 	addi	r3,r3,-128
 1017e8c:	2005883a 	mov	r2,r4
 1017e90:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1017e94:	e0bfff17 	ldw	r2,-4(fp)
 1017e98:	10800044 	addi	r2,r2,1
 1017e9c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1017ea0:	e0bfff17 	ldw	r2,-4(fp)
 1017ea4:	10800003 	ldbu	r2,0(r2)
 1017ea8:	10803fcc 	andi	r2,r2,255
 1017eac:	1080201c 	xori	r2,r2,128
 1017eb0:	10bfe004 	addi	r2,r2,-128
 1017eb4:	1004c03a 	cmpne	r2,r2,zero
 1017eb8:	103fec1e 	bne	r2,zero,1017e6c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1017ebc:	e037883a 	mov	sp,fp
 1017ec0:	df000017 	ldw	fp,0(sp)
 1017ec4:	dec00104 	addi	sp,sp,4
 1017ec8:	f800283a 	ret

01017ecc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1017ecc:	defffb04 	addi	sp,sp,-20
 1017ed0:	dfc00415 	stw	ra,16(sp)
 1017ed4:	df000315 	stw	fp,12(sp)
 1017ed8:	df000304 	addi	fp,sp,12
 1017edc:	e13ffd15 	stw	r4,-12(fp)
 1017ee0:	e17ffe15 	stw	r5,-8(fp)
 1017ee4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1017ee8:	e0bffd17 	ldw	r2,-12(fp)
 1017eec:	10800017 	ldw	r2,0(r2)
 1017ef0:	1009883a 	mov	r4,r2
 1017ef4:	e1bfff17 	ldw	r6,-4(fp)
 1017ef8:	e17ffe17 	ldw	r5,-8(fp)
 1017efc:	1017ddc0 	call	1017ddc <alt_up_character_lcd_write>
	return 0;
 1017f00:	0005883a 	mov	r2,zero
}
 1017f04:	e037883a 	mov	sp,fp
 1017f08:	dfc00117 	ldw	ra,4(sp)
 1017f0c:	df000017 	ldw	fp,0(sp)
 1017f10:	dec00204 	addi	sp,sp,8
 1017f14:	f800283a 	ret

01017f18 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1017f18:	defff904 	addi	sp,sp,-28
 1017f1c:	dfc00615 	stw	ra,24(sp)
 1017f20:	df000515 	stw	fp,20(sp)
 1017f24:	df000504 	addi	fp,sp,20
 1017f28:	e13ffc15 	stw	r4,-16(fp)
 1017f2c:	e17ffd15 	stw	r5,-12(fp)
 1017f30:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1017f34:	e0bffd17 	ldw	r2,-12(fp)
 1017f38:	10800a28 	cmpgeui	r2,r2,40
 1017f3c:	1000031e 	bne	r2,zero,1017f4c <alt_up_character_lcd_set_cursor_pos+0x34>
 1017f40:	e0bffe17 	ldw	r2,-8(fp)
 1017f44:	108000b0 	cmpltui	r2,r2,2
 1017f48:	1000031e 	bne	r2,zero,1017f58 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1017f4c:	00bfffc4 	movi	r2,-1
 1017f50:	e0bfff15 	stw	r2,-4(fp)
 1017f54:	00000806 	br	1017f78 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1017f58:	e13ffd17 	ldw	r4,-12(fp)
 1017f5c:	e17ffe17 	ldw	r5,-8(fp)
 1017f60:	1017cb80 	call	1017cb8 <get_DDRAM_addr>
 1017f64:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1017f68:	e17ffb03 	ldbu	r5,-20(fp)
 1017f6c:	e13ffc17 	ldw	r4,-16(fp)
 1017f70:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
	return 0;
 1017f74:	e03fff15 	stw	zero,-4(fp)
 1017f78:	e0bfff17 	ldw	r2,-4(fp)
}
 1017f7c:	e037883a 	mov	sp,fp
 1017f80:	dfc00117 	ldw	ra,4(sp)
 1017f84:	df000017 	ldw	fp,0(sp)
 1017f88:	dec00204 	addi	sp,sp,8
 1017f8c:	f800283a 	ret

01017f90 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1017f90:	defff904 	addi	sp,sp,-28
 1017f94:	dfc00615 	stw	ra,24(sp)
 1017f98:	df000515 	stw	fp,20(sp)
 1017f9c:	df000504 	addi	fp,sp,20
 1017fa0:	e13ffc15 	stw	r4,-16(fp)
 1017fa4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1017fa8:	e0bffd17 	ldw	r2,-12(fp)
 1017fac:	1005003a 	cmpeq	r2,r2,zero
 1017fb0:	10001e1e 	bne	r2,zero,101802c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1017fb4:	e0bffd17 	ldw	r2,-12(fp)
 1017fb8:	10800050 	cmplti	r2,r2,1
 1017fbc:	1000031e 	bne	r2,zero,1017fcc <alt_up_character_lcd_shift_cursor+0x3c>
 1017fc0:	00800504 	movi	r2,20
 1017fc4:	e0bfff05 	stb	r2,-4(fp)
 1017fc8:	00000206 	br	1017fd4 <alt_up_character_lcd_shift_cursor+0x44>
 1017fcc:	00c00404 	movi	r3,16
 1017fd0:	e0ffff05 	stb	r3,-4(fp)
 1017fd4:	e0bfff03 	ldbu	r2,-4(fp)
 1017fd8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1017fdc:	e0fffd17 	ldw	r3,-12(fp)
 1017fe0:	e0fffe15 	stw	r3,-8(fp)
 1017fe4:	e0fffe17 	ldw	r3,-8(fp)
 1017fe8:	1804403a 	cmpge	r2,r3,zero
 1017fec:	1000031e 	bne	r2,zero,1017ffc <alt_up_character_lcd_shift_cursor+0x6c>
 1017ff0:	e0bffe17 	ldw	r2,-8(fp)
 1017ff4:	0085c83a 	sub	r2,zero,r2
 1017ff8:	e0bffe15 	stw	r2,-8(fp)
 1017ffc:	e0fffe17 	ldw	r3,-8(fp)
 1018000:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1018004:	00000306 	br	1018014 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1018008:	e17ffb43 	ldbu	r5,-19(fp)
 101800c:	e13ffc17 	ldw	r4,-16(fp)
 1018010:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1018014:	e0bffb03 	ldbu	r2,-20(fp)
 1018018:	10bfffc4 	addi	r2,r2,-1
 101801c:	e0bffb05 	stb	r2,-20(fp)
 1018020:	e0bffb03 	ldbu	r2,-20(fp)
 1018024:	10803fd8 	cmpnei	r2,r2,255
 1018028:	103ff71e 	bne	r2,zero,1018008 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 101802c:	e037883a 	mov	sp,fp
 1018030:	dfc00117 	ldw	ra,4(sp)
 1018034:	df000017 	ldw	fp,0(sp)
 1018038:	dec00204 	addi	sp,sp,8
 101803c:	f800283a 	ret

01018040 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1018040:	defff904 	addi	sp,sp,-28
 1018044:	dfc00615 	stw	ra,24(sp)
 1018048:	df000515 	stw	fp,20(sp)
 101804c:	df000504 	addi	fp,sp,20
 1018050:	e13ffc15 	stw	r4,-16(fp)
 1018054:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1018058:	e0bffd17 	ldw	r2,-12(fp)
 101805c:	1005003a 	cmpeq	r2,r2,zero
 1018060:	10001e1e 	bne	r2,zero,10180dc <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1018064:	e0bffd17 	ldw	r2,-12(fp)
 1018068:	10800050 	cmplti	r2,r2,1
 101806c:	1000031e 	bne	r2,zero,101807c <alt_up_character_lcd_shift_display+0x3c>
 1018070:	00800704 	movi	r2,28
 1018074:	e0bfff05 	stb	r2,-4(fp)
 1018078:	00000206 	br	1018084 <alt_up_character_lcd_shift_display+0x44>
 101807c:	00c00604 	movi	r3,24
 1018080:	e0ffff05 	stb	r3,-4(fp)
 1018084:	e0bfff03 	ldbu	r2,-4(fp)
 1018088:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 101808c:	e0fffd17 	ldw	r3,-12(fp)
 1018090:	e0fffe15 	stw	r3,-8(fp)
 1018094:	e0fffe17 	ldw	r3,-8(fp)
 1018098:	1804403a 	cmpge	r2,r3,zero
 101809c:	1000031e 	bne	r2,zero,10180ac <alt_up_character_lcd_shift_display+0x6c>
 10180a0:	e0bffe17 	ldw	r2,-8(fp)
 10180a4:	0085c83a 	sub	r2,zero,r2
 10180a8:	e0bffe15 	stw	r2,-8(fp)
 10180ac:	e0fffe17 	ldw	r3,-8(fp)
 10180b0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10180b4:	00000306 	br	10180c4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10180b8:	e17ffb43 	ldbu	r5,-19(fp)
 10180bc:	e13ffc17 	ldw	r4,-16(fp)
 10180c0:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10180c4:	e0bffb03 	ldbu	r2,-20(fp)
 10180c8:	10bfffc4 	addi	r2,r2,-1
 10180cc:	e0bffb05 	stb	r2,-20(fp)
 10180d0:	e0bffb03 	ldbu	r2,-20(fp)
 10180d4:	10803fd8 	cmpnei	r2,r2,255
 10180d8:	103ff71e 	bne	r2,zero,10180b8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10180dc:	e037883a 	mov	sp,fp
 10180e0:	dfc00117 	ldw	ra,4(sp)
 10180e4:	df000017 	ldw	fp,0(sp)
 10180e8:	dec00204 	addi	sp,sp,8
 10180ec:	f800283a 	ret

010180f0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 10180f0:	defff904 	addi	sp,sp,-28
 10180f4:	dfc00615 	stw	ra,24(sp)
 10180f8:	df000515 	stw	fp,20(sp)
 10180fc:	df000504 	addi	fp,sp,20
 1018100:	e13ffc15 	stw	r4,-16(fp)
 1018104:	e17ffd15 	stw	r5,-12(fp)
 1018108:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 101810c:	e0bffd17 	ldw	r2,-12(fp)
 1018110:	10800a28 	cmpgeui	r2,r2,40
 1018114:	1000031e 	bne	r2,zero,1018124 <alt_up_character_lcd_erase_pos+0x34>
 1018118:	e0bffe17 	ldw	r2,-8(fp)
 101811c:	108000b0 	cmpltui	r2,r2,2
 1018120:	1000031e 	bne	r2,zero,1018130 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1018124:	00bfffc4 	movi	r2,-1
 1018128:	e0bfff15 	stw	r2,-4(fp)
 101812c:	00000e06 	br	1018168 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1018130:	e13ffd17 	ldw	r4,-12(fp)
 1018134:	e17ffe17 	ldw	r5,-8(fp)
 1018138:	1017cb80 	call	1017cb8 <get_DDRAM_addr>
 101813c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1018140:	e17ffb03 	ldbu	r5,-20(fp)
 1018144:	e13ffc17 	ldw	r4,-16(fp)
 1018148:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 101814c:	e0bffc17 	ldw	r2,-16(fp)
 1018150:	10800a17 	ldw	r2,40(r2)
 1018154:	10800044 	addi	r2,r2,1
 1018158:	1007883a 	mov	r3,r2
 101815c:	00800084 	movi	r2,2
 1018160:	18800025 	stbio	r2,0(r3)
	return 0;
 1018164:	e03fff15 	stw	zero,-4(fp)
 1018168:	e0bfff17 	ldw	r2,-4(fp)
}
 101816c:	e037883a 	mov	sp,fp
 1018170:	dfc00117 	ldw	ra,4(sp)
 1018174:	df000017 	ldw	fp,0(sp)
 1018178:	dec00204 	addi	sp,sp,8
 101817c:	f800283a 	ret

01018180 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1018180:	defffd04 	addi	sp,sp,-12
 1018184:	dfc00215 	stw	ra,8(sp)
 1018188:	df000115 	stw	fp,4(sp)
 101818c:	df000104 	addi	fp,sp,4
 1018190:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1018194:	e13fff17 	ldw	r4,-4(fp)
 1018198:	01400304 	movi	r5,12
 101819c:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
}
 10181a0:	e037883a 	mov	sp,fp
 10181a4:	dfc00117 	ldw	ra,4(sp)
 10181a8:	df000017 	ldw	fp,0(sp)
 10181ac:	dec00204 	addi	sp,sp,8
 10181b0:	f800283a 	ret

010181b4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 10181b4:	defffd04 	addi	sp,sp,-12
 10181b8:	dfc00215 	stw	ra,8(sp)
 10181bc:	df000115 	stw	fp,4(sp)
 10181c0:	df000104 	addi	fp,sp,4
 10181c4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 10181c8:	e13fff17 	ldw	r4,-4(fp)
 10181cc:	014003c4 	movi	r5,15
 10181d0:	1017d340 	call	1017d34 <alt_up_character_lcd_send_cmd>
}
 10181d4:	e037883a 	mov	sp,fp
 10181d8:	dfc00117 	ldw	ra,4(sp)
 10181dc:	df000017 	ldw	fp,0(sp)
 10181e0:	dec00204 	addi	sp,sp,8
 10181e4:	f800283a 	ret

010181e8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
 10181e8:	defffd04 	addi	sp,sp,-12
 10181ec:	df000215 	stw	fp,8(sp)
 10181f0:	df000204 	addi	fp,sp,8
 10181f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
 10181f8:	e0bfff17 	ldw	r2,-4(fp)
 10181fc:	1080400c 	andi	r2,r2,256
 1018200:	1004d23a 	srli	r2,r2,8
 1018204:	e0bffe05 	stb	r2,-8(fp)
	return ri;
 1018208:	e0bffe03 	ldbu	r2,-8(fp)
}
 101820c:	e037883a 	mov	sp,fp
 1018210:	df000017 	ldw	fp,0(sp)
 1018214:	dec00104 	addi	sp,sp,4
 1018218:	f800283a 	ret

0101821c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
 101821c:	defffd04 	addi	sp,sp,-12
 1018220:	df000215 	stw	fp,8(sp)
 1018224:	df000204 	addi	fp,sp,8
 1018228:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
 101822c:	e0bfff17 	ldw	r2,-4(fp)
 1018230:	1080004c 	andi	r2,r2,1
 1018234:	e0bffe05 	stb	r2,-8(fp)
	return re;
 1018238:	e0bffe03 	ldbu	r2,-8(fp)
}
 101823c:	e037883a 	mov	sp,fp
 1018240:	df000017 	ldw	fp,0(sp)
 1018244:	dec00104 	addi	sp,sp,4
 1018248:	f800283a 	ret

0101824c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
 101824c:	defffd04 	addi	sp,sp,-12
 1018250:	df000215 	stw	fp,8(sp)
 1018254:	df000204 	addi	fp,sp,8
 1018258:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
 101825c:	e0bfff17 	ldw	r2,-4(fp)
 1018260:	1081000c 	andi	r2,r2,1024
 1018264:	1004d2ba 	srli	r2,r2,10
 1018268:	e0bffe05 	stb	r2,-8(fp)
	return re;
 101826c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1018270:	e037883a 	mov	sp,fp
 1018274:	df000017 	ldw	fp,0(sp)
 1018278:	dec00104 	addi	sp,sp,4
 101827c:	f800283a 	ret

01018280 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
 1018280:	defffd04 	addi	sp,sp,-12
 1018284:	df000215 	stw	fp,8(sp)
 1018288:	df000204 	addi	fp,sp,8
 101828c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
 1018290:	e0bfff17 	ldw	r2,-4(fp)
 1018294:	10bfffec 	andhi	r2,r2,65535
 1018298:	1004d43a 	srli	r2,r2,16
 101829c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
 10182a0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10182a4:	e037883a 	mov	sp,fp
 10182a8:	df000017 	ldw	fp,0(sp)
 10182ac:	dec00104 	addi	sp,sp,4
 10182b0:	f800283a 	ret

010182b4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
 10182b4:	defffd04 	addi	sp,sp,-12
 10182b8:	df000215 	stw	fp,8(sp)
 10182bc:	df000204 	addi	fp,sp,8
 10182c0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
 10182c4:	e0bfff17 	ldw	r2,-4(fp)
 10182c8:	10a0000c 	andi	r2,r2,32768
 10182cc:	1004d3fa 	srli	r2,r2,15
 10182d0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
 10182d4:	e0bffe03 	ldbu	r2,-8(fp)
}
 10182d8:	e037883a 	mov	sp,fp
 10182dc:	df000017 	ldw	fp,0(sp)
 10182e0:	dec00104 	addi	sp,sp,4
 10182e4:	f800283a 	ret

010182e8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
 10182e8:	defffd04 	addi	sp,sp,-12
 10182ec:	df000215 	stw	fp,8(sp)
 10182f0:	df000204 	addi	fp,sp,8
 10182f4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
 10182f8:	e0bfff17 	ldw	r2,-4(fp)
 10182fc:	e0bffe05 	stb	r2,-8(fp)
	return data;
 1018300:	e0bffe03 	ldbu	r2,-8(fp)
}
 1018304:	e037883a 	mov	sp,fp
 1018308:	df000017 	ldw	fp,0(sp)
 101830c:	dec00104 	addi	sp,sp,4
 1018310:	f800283a 	ret

01018314 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
 1018314:	defffb04 	addi	sp,sp,-20
 1018318:	dfc00415 	stw	ra,16(sp)
 101831c:	df000315 	stw	fp,12(sp)
 1018320:	df000304 	addi	fp,sp,12
 1018324:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
 1018328:	e13fff17 	ldw	r4,-4(fp)
 101832c:	01403fc4 	movi	r5,255
 1018330:	10185740 	call	1018574 <alt_up_ps2_write_data_byte_with_ack>
 1018334:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
 1018338:	e0bffd17 	ldw	r2,-12(fp)
 101833c:	1004c03a 	cmpne	r2,r2,zero
 1018340:	1000221e 	bne	r2,zero,10183cc <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1018344:	e17ffe04 	addi	r5,fp,-8
 1018348:	e13fff17 	ldw	r4,-4(fp)
 101834c:	10185e00 	call	10185e0 <alt_up_ps2_read_data_byte_timeout>
 1018350:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
 1018354:	e0bffd17 	ldw	r2,-12(fp)
 1018358:	1004c03a 	cmpne	r2,r2,zero
 101835c:	10001b1e 	bne	r2,zero,10183cc <alt_up_ps2_init+0xb8>
 1018360:	e0bffe03 	ldbu	r2,-8(fp)
 1018364:	10803fcc 	andi	r2,r2,255
 1018368:	10802a98 	cmpnei	r2,r2,170
 101836c:	1000171e 	bne	r2,zero,10183cc <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
 1018370:	e17ffe04 	addi	r5,fp,-8
 1018374:	e13fff17 	ldw	r4,-4(fp)
 1018378:	10185e00 	call	10185e0 <alt_up_ps2_read_data_byte_timeout>
 101837c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
 1018380:	e0bffd17 	ldw	r2,-12(fp)
 1018384:	10bfe318 	cmpnei	r2,r2,-116
 1018388:	1000041e 	bne	r2,zero,101839c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
 101838c:	e0ffff17 	ldw	r3,-4(fp)
 1018390:	00800044 	movi	r2,1
 1018394:	18800d15 	stw	r2,52(r3)
 1018398:	00000c06 	br	10183cc <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
 101839c:	e0bffd17 	ldw	r2,-12(fp)
 10183a0:	1004c03a 	cmpne	r2,r2,zero
 10183a4:	1000091e 	bne	r2,zero,10183cc <alt_up_ps2_init+0xb8>
 10183a8:	e0bffe03 	ldbu	r2,-8(fp)
 10183ac:	10803fcc 	andi	r2,r2,255
 10183b0:	1004c03a 	cmpne	r2,r2,zero
 10183b4:	1000051e 	bne	r2,zero,10183cc <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
 10183b8:	e0bfff17 	ldw	r2,-4(fp)
 10183bc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
 10183c0:	e13fff17 	ldw	r4,-4(fp)
 10183c4:	01403d04 	movi	r5,244
 10183c8:	101848c0 	call	101848c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
 10183cc:	e037883a 	mov	sp,fp
 10183d0:	dfc00117 	ldw	ra,4(sp)
 10183d4:	df000017 	ldw	fp,0(sp)
 10183d8:	dec00204 	addi	sp,sp,8
 10183dc:	f800283a 	ret

010183e0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
 10183e0:	defffd04 	addi	sp,sp,-12
 10183e4:	df000215 	stw	fp,8(sp)
 10183e8:	df000204 	addi	fp,sp,8
 10183ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 10183f0:	e0bfff17 	ldw	r2,-4(fp)
 10183f4:	10800a17 	ldw	r2,40(r2)
 10183f8:	10800104 	addi	r2,r2,4
 10183fc:	10800037 	ldwio	r2,0(r2)
 1018400:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1018404:	e0bffe17 	ldw	r2,-8(fp)
 1018408:	10800054 	ori	r2,r2,1
 101840c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1018410:	e0bfff17 	ldw	r2,-4(fp)
 1018414:	10800a17 	ldw	r2,40(r2)
 1018418:	10800104 	addi	r2,r2,4
 101841c:	e0fffe17 	ldw	r3,-8(fp)
 1018420:	10c00035 	stwio	r3,0(r2)
}
 1018424:	e037883a 	mov	sp,fp
 1018428:	df000017 	ldw	fp,0(sp)
 101842c:	dec00104 	addi	sp,sp,4
 1018430:	f800283a 	ret

01018434 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
 1018434:	defffd04 	addi	sp,sp,-12
 1018438:	df000215 	stw	fp,8(sp)
 101843c:	df000204 	addi	fp,sp,8
 1018440:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
 1018444:	e0bfff17 	ldw	r2,-4(fp)
 1018448:	10800a17 	ldw	r2,40(r2)
 101844c:	10800104 	addi	r2,r2,4
 1018450:	10800037 	ldwio	r2,0(r2)
 1018454:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
 1018458:	e0fffe17 	ldw	r3,-8(fp)
 101845c:	00bfff84 	movi	r2,-2
 1018460:	1884703a 	and	r2,r3,r2
 1018464:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
 1018468:	e0bfff17 	ldw	r2,-4(fp)
 101846c:	10800a17 	ldw	r2,40(r2)
 1018470:	10800104 	addi	r2,r2,4
 1018474:	e0fffe17 	ldw	r3,-8(fp)
 1018478:	10c00035 	stwio	r3,0(r2)
}
 101847c:	e037883a 	mov	sp,fp
 1018480:	df000017 	ldw	fp,0(sp)
 1018484:	dec00104 	addi	sp,sp,4
 1018488:	f800283a 	ret

0101848c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
 101848c:	defffa04 	addi	sp,sp,-24
 1018490:	dfc00515 	stw	ra,20(sp)
 1018494:	df000415 	stw	fp,16(sp)
 1018498:	df000404 	addi	fp,sp,16
 101849c:	e13ffd15 	stw	r4,-12(fp)
 10184a0:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
 10184a4:	e0bffd17 	ldw	r2,-12(fp)
 10184a8:	10800a17 	ldw	r2,40(r2)
 10184ac:	e0fffe03 	ldbu	r3,-8(fp)
 10184b0:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
 10184b4:	e0bffd17 	ldw	r2,-12(fp)
 10184b8:	10800a17 	ldw	r2,40(r2)
 10184bc:	10800104 	addi	r2,r2,4
 10184c0:	10800037 	ldwio	r2,0(r2)
 10184c4:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
 10184c8:	e13ffc17 	ldw	r4,-16(fp)
 10184cc:	101824c0 	call	101824c <read_CE_bit>
 10184d0:	10803fcc 	andi	r2,r2,255
 10184d4:	1005003a 	cmpeq	r2,r2,zero
 10184d8:	1000031e 	bne	r2,zero,10184e8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
 10184dc:	00bffec4 	movi	r2,-5
 10184e0:	e0bfff15 	stw	r2,-4(fp)
 10184e4:	00000106 	br	10184ec <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
 10184e8:	e03fff15 	stw	zero,-4(fp)
 10184ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10184f0:	e037883a 	mov	sp,fp
 10184f4:	dfc00117 	ldw	ra,4(sp)
 10184f8:	df000017 	ldw	fp,0(sp)
 10184fc:	dec00204 	addi	sp,sp,8
 1018500:	f800283a 	ret

01018504 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
 1018504:	defffb04 	addi	sp,sp,-20
 1018508:	dfc00415 	stw	ra,16(sp)
 101850c:	df000315 	stw	fp,12(sp)
 1018510:	df000304 	addi	fp,sp,12
 1018514:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
 1018518:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
 101851c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
 1018520:	e17ffd44 	addi	r5,fp,-11
 1018524:	e13ffe17 	ldw	r4,-8(fp)
 1018528:	10185e00 	call	10185e0 <alt_up_ps2_read_data_byte_timeout>
 101852c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
 1018530:	e0bffd03 	ldbu	r2,-12(fp)
 1018534:	1004c03a 	cmpne	r2,r2,zero
 1018538:	1000061e 	bne	r2,zero,1018554 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
 101853c:	e0bffd43 	ldbu	r2,-11(fp)
 1018540:	10803fcc 	andi	r2,r2,255
 1018544:	10803e98 	cmpnei	r2,r2,250
 1018548:	103ff51e 	bne	r2,zero,1018520 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
 101854c:	e03fff15 	stw	zero,-4(fp)
 1018550:	00000206 	br	101855c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
 1018554:	e0bffd03 	ldbu	r2,-12(fp)
 1018558:	e0bfff15 	stw	r2,-4(fp)
 101855c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
 1018560:	e037883a 	mov	sp,fp
 1018564:	dfc00117 	ldw	ra,4(sp)
 1018568:	df000017 	ldw	fp,0(sp)
 101856c:	dec00204 	addi	sp,sp,8
 1018570:	f800283a 	ret

01018574 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
 1018574:	defff904 	addi	sp,sp,-28
 1018578:	dfc00615 	stw	ra,24(sp)
 101857c:	df000515 	stw	fp,20(sp)
 1018580:	df000504 	addi	fp,sp,20
 1018584:	e13ffd15 	stw	r4,-12(fp)
 1018588:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
 101858c:	e17ffe03 	ldbu	r5,-8(fp)
 1018590:	e13ffd17 	ldw	r4,-12(fp)
 1018594:	101848c0 	call	101848c <alt_up_ps2_write_data_byte>
 1018598:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
 101859c:	e0bffc17 	ldw	r2,-16(fp)
 10185a0:	1005003a 	cmpeq	r2,r2,zero
 10185a4:	1000031e 	bne	r2,zero,10185b4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
 10185a8:	e0bffc17 	ldw	r2,-16(fp)
 10185ac:	e0bfff15 	stw	r2,-4(fp)
 10185b0:	00000506 	br	10185c8 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
 10185b4:	e13ffd17 	ldw	r4,-12(fp)
 10185b8:	10185040 	call	1018504 <alt_up_ps2_wait_for_ack>
 10185bc:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
 10185c0:	e0bffb17 	ldw	r2,-20(fp)
 10185c4:	e0bfff15 	stw	r2,-4(fp)
 10185c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10185cc:	e037883a 	mov	sp,fp
 10185d0:	dfc00117 	ldw	ra,4(sp)
 10185d4:	df000017 	ldw	fp,0(sp)
 10185d8:	dec00204 	addi	sp,sp,8
 10185dc:	f800283a 	ret

010185e0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 10185e0:	defff904 	addi	sp,sp,-28
 10185e4:	dfc00615 	stw	ra,24(sp)
 10185e8:	df000515 	stw	fp,20(sp)
 10185ec:	df000504 	addi	fp,sp,20
 10185f0:	e13ffd15 	stw	r4,-12(fp)
 10185f4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 10185f8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
 10185fc:	e03ffb15 	stw	zero,-20(fp)
 1018600:	00000006 	br	1018604 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
 1018604:	e0bffb17 	ldw	r2,-20(fp)
 1018608:	10800044 	addi	r2,r2,1
 101860c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1018610:	e0bffd17 	ldw	r2,-12(fp)
 1018614:	10800a17 	ldw	r2,40(r2)
 1018618:	10800037 	ldwio	r2,0(r2)
 101861c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
 1018620:	e13ffc17 	ldw	r4,-16(fp)
 1018624:	10182b40 	call	10182b4 <read_data_valid>
 1018628:	10803fcc 	andi	r2,r2,255
 101862c:	1005003a 	cmpeq	r2,r2,zero
 1018630:	1000071e 	bne	r2,zero,1018650 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
 1018634:	e13ffc17 	ldw	r4,-16(fp)
 1018638:	10182e80 	call	10182e8 <read_data_byte>
 101863c:	1007883a 	mov	r3,r2
 1018640:	e0bffe17 	ldw	r2,-8(fp)
 1018644:	10c00005 	stb	r3,0(r2)
			return 0;
 1018648:	e03fff15 	stw	zero,-4(fp)
 101864c:	00000a06 	br	1018678 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
 1018650:	e0bffd17 	ldw	r2,-12(fp)
 1018654:	10800c17 	ldw	r2,48(r2)
 1018658:	1005003a 	cmpeq	r2,r2,zero
 101865c:	103fe91e 	bne	r2,zero,1018604 <alt_up_ps2_read_data_byte_timeout+0x24>
 1018660:	e0bffd17 	ldw	r2,-12(fp)
 1018664:	10c00c17 	ldw	r3,48(r2)
 1018668:	e0bffb17 	ldw	r2,-20(fp)
 101866c:	18bfe52e 	bgeu	r3,r2,1018604 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
 1018670:	00bfe304 	movi	r2,-116
 1018674:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
 1018678:	e0bfff17 	ldw	r2,-4(fp)
}
 101867c:	e037883a 	mov	sp,fp
 1018680:	dfc00117 	ldw	ra,4(sp)
 1018684:	df000017 	ldw	fp,0(sp)
 1018688:	dec00204 	addi	sp,sp,8
 101868c:	f800283a 	ret

01018690 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
 1018690:	defffa04 	addi	sp,sp,-24
 1018694:	dfc00515 	stw	ra,20(sp)
 1018698:	df000415 	stw	fp,16(sp)
 101869c:	df000404 	addi	fp,sp,16
 10186a0:	e13ffd15 	stw	r4,-12(fp)
 10186a4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
 10186a8:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 10186ac:	e0bffd17 	ldw	r2,-12(fp)
 10186b0:	10800a17 	ldw	r2,40(r2)
 10186b4:	10800037 	ldwio	r2,0(r2)
 10186b8:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
 10186bc:	e13ffc17 	ldw	r4,-16(fp)
 10186c0:	10182b40 	call	10182b4 <read_data_valid>
 10186c4:	10803fcc 	andi	r2,r2,255
 10186c8:	1005003a 	cmpeq	r2,r2,zero
 10186cc:	1000071e 	bne	r2,zero,10186ec <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
 10186d0:	e13ffc17 	ldw	r4,-16(fp)
 10186d4:	10182e80 	call	10182e8 <read_data_byte>
 10186d8:	1007883a 	mov	r3,r2
 10186dc:	e0bffe17 	ldw	r2,-8(fp)
 10186e0:	10c00005 	stb	r3,0(r2)
		return 0;
 10186e4:	e03fff15 	stw	zero,-4(fp)
 10186e8:	00000206 	br	10186f4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
 10186ec:	00bfffc4 	movi	r2,-1
 10186f0:	e0bfff15 	stw	r2,-4(fp)
 10186f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10186f8:	e037883a 	mov	sp,fp
 10186fc:	dfc00117 	ldw	ra,4(sp)
 1018700:	df000017 	ldw	fp,0(sp)
 1018704:	dec00204 	addi	sp,sp,8
 1018708:	f800283a 	ret

0101870c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
 101870c:	defffb04 	addi	sp,sp,-20
 1018710:	dfc00415 	stw	ra,16(sp)
 1018714:	df000315 	stw	fp,12(sp)
 1018718:	df000304 	addi	fp,sp,12
 101871c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
 1018720:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
 1018724:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
 1018728:	e0bfff17 	ldw	r2,-4(fp)
 101872c:	10800a17 	ldw	r2,40(r2)
 1018730:	10800037 	ldwio	r2,0(r2)
 1018734:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
 1018738:	e13ffd17 	ldw	r4,-12(fp)
 101873c:	10182800 	call	1018280 <read_num_bytes_available>
 1018740:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
 1018744:	e0bffe0b 	ldhu	r2,-8(fp)
 1018748:	1004c03a 	cmpne	r2,r2,zero
 101874c:	103ff61e 	bne	r2,zero,1018728 <alt_up_ps2_clear_fifo+0x1c>
}
 1018750:	e037883a 	mov	sp,fp
 1018754:	dfc00117 	ldw	ra,4(sp)
 1018758:	df000017 	ldw	fp,0(sp)
 101875c:	dec00204 	addi	sp,sp,8
 1018760:	f800283a 	ret

01018764 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
 1018764:	defff704 	addi	sp,sp,-36
 1018768:	dfc00815 	stw	ra,32(sp)
 101876c:	df000715 	stw	fp,28(sp)
 1018770:	df000704 	addi	fp,sp,28
 1018774:	e13ffc15 	stw	r4,-16(fp)
 1018778:	e17ffd15 	stw	r5,-12(fp)
 101877c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 1018780:	e0bffc17 	ldw	r2,-16(fp)
 1018784:	10800017 	ldw	r2,0(r2)
 1018788:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 101878c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 1018790:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
 1018794:	e0fff917 	ldw	r3,-28(fp)
 1018798:	e0bffe17 	ldw	r2,-8(fp)
 101879c:	18bffd16 	blt	r3,r2,1018794 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
 10187a0:	e17ffd17 	ldw	r5,-12(fp)
 10187a4:	e0bffd17 	ldw	r2,-12(fp)
 10187a8:	10800044 	addi	r2,r2,1
 10187ac:	e0bffd15 	stw	r2,-12(fp)
 10187b0:	e13ffb17 	ldw	r4,-20(fp)
 10187b4:	10185e00 	call	10185e0 <alt_up_ps2_read_data_byte_timeout>
 10187b8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 10187bc:	e0bffa17 	ldw	r2,-24(fp)
 10187c0:	1005003a 	cmpeq	r2,r2,zero
 10187c4:	1000031e 	bne	r2,zero,10187d4 <alt_up_ps2_read_fd+0x70>
			return count;
 10187c8:	e0bff917 	ldw	r2,-28(fp)
 10187cc:	e0bfff15 	stw	r2,-4(fp)
 10187d0:	00000506 	br	10187e8 <alt_up_ps2_read_fd+0x84>
		count++;
 10187d4:	e0bff917 	ldw	r2,-28(fp)
 10187d8:	10800044 	addi	r2,r2,1
 10187dc:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
 10187e0:	e0bff917 	ldw	r2,-28(fp)
 10187e4:	e0bfff15 	stw	r2,-4(fp)
 10187e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10187ec:	e037883a 	mov	sp,fp
 10187f0:	dfc00117 	ldw	ra,4(sp)
 10187f4:	df000017 	ldw	fp,0(sp)
 10187f8:	dec00204 	addi	sp,sp,8
 10187fc:	f800283a 	ret

01018800 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1018800:	defff704 	addi	sp,sp,-36
 1018804:	dfc00815 	stw	ra,32(sp)
 1018808:	df000715 	stw	fp,28(sp)
 101880c:	df000704 	addi	fp,sp,28
 1018810:	e13ffc15 	stw	r4,-16(fp)
 1018814:	e17ffd15 	stw	r5,-12(fp)
 1018818:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
 101881c:	e0bffc17 	ldw	r2,-16(fp)
 1018820:	10800017 	ldw	r2,0(r2)
 1018824:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
 1018828:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
 101882c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
 1018830:	00001206 	br	101887c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
 1018834:	e0bffd17 	ldw	r2,-12(fp)
 1018838:	10800003 	ldbu	r2,0(r2)
 101883c:	11403fcc 	andi	r5,r2,255
 1018840:	e0bffd17 	ldw	r2,-12(fp)
 1018844:	10800044 	addi	r2,r2,1
 1018848:	e0bffd15 	stw	r2,-12(fp)
 101884c:	e13ffb17 	ldw	r4,-20(fp)
 1018850:	101848c0 	call	101848c <alt_up_ps2_write_data_byte>
 1018854:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
 1018858:	e0bffa17 	ldw	r2,-24(fp)
 101885c:	1005003a 	cmpeq	r2,r2,zero
 1018860:	1000031e 	bne	r2,zero,1018870 <alt_up_ps2_write_fd+0x70>
			return count;
 1018864:	e0bff917 	ldw	r2,-28(fp)
 1018868:	e0bfff15 	stw	r2,-4(fp)
 101886c:	00000806 	br	1018890 <alt_up_ps2_write_fd+0x90>
		count++;
 1018870:	e0bff917 	ldw	r2,-28(fp)
 1018874:	10800044 	addi	r2,r2,1
 1018878:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
 101887c:	e0fff917 	ldw	r3,-28(fp)
 1018880:	e0bffe17 	ldw	r2,-8(fp)
 1018884:	18bfeb16 	blt	r3,r2,1018834 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
 1018888:	e0bff917 	ldw	r2,-28(fp)
 101888c:	e0bfff15 	stw	r2,-4(fp)
 1018890:	e0bfff17 	ldw	r2,-4(fp)
}
 1018894:	e037883a 	mov	sp,fp
 1018898:	dfc00117 	ldw	ra,4(sp)
 101889c:	df000017 	ldw	fp,0(sp)
 10188a0:	dec00204 	addi	sp,sp,8
 10188a4:	f800283a 	ret

010188a8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
 10188a8:	defffc04 	addi	sp,sp,-16
 10188ac:	dfc00315 	stw	ra,12(sp)
 10188b0:	df000215 	stw	fp,8(sp)
 10188b4:	df000204 	addi	fp,sp,8
 10188b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
 10188bc:	e13fff17 	ldw	r4,-4(fp)
 10188c0:	014040b4 	movhi	r5,258
 10188c4:	29725d04 	addi	r5,r5,-13964
 10188c8:	10190ec0 	call	10190ec <alt_find_dev>
 10188cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10188d0:	e0bffe17 	ldw	r2,-8(fp)
}
 10188d4:	e037883a 	mov	sp,fp
 10188d8:	dfc00117 	ldw	ra,4(sp)
 10188dc:	df000017 	ldw	fp,0(sp)
 10188e0:	dec00204 	addi	sp,sp,8
 10188e4:	f800283a 	ret

010188e8 <alt_up_usb_open_dev>:
#include <priv/alt_file.h>

#include "altera_up_avalon_usb.h"
#include "altera_up_avalon_usb_regs.h"

alt_up_usb_dev* alt_up_usb_open_dev(const char* name) {
 10188e8:	defffc04 	addi	sp,sp,-16
 10188ec:	dfc00315 	stw	ra,12(sp)
 10188f0:	df000215 	stw	fp,8(sp)
 10188f4:	df000204 	addi	fp,sp,8
 10188f8:	e13fff15 	stw	r4,-4(fp)
    // find the device from the device list 
    // (see altera_hal/HAL/inc/priv/alt_file.h 
    // and altera_hal/HAL/src/alt_find_dev.c 
    // for details)
    alt_up_usb_dev *dev = (alt_up_usb_dev*) alt_find_dev(name, &alt_dev_list);
 10188fc:	e13fff17 	ldw	r4,-4(fp)
 1018900:	014040b4 	movhi	r5,258
 1018904:	29725d04 	addi	r5,r5,-13964
 1018908:	10190ec0 	call	10190ec <alt_find_dev>
 101890c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 1018910:	e0bffe17 	ldw	r2,-8(fp)
}
 1018914:	e037883a 	mov	sp,fp
 1018918:	dfc00117 	ldw	ra,4(sp)
 101891c:	df000017 	ldw	fp,0(sp)
 1018920:	dec00204 	addi	sp,sp,8
 1018924:	f800283a 	ret

01018928 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 1018928:	defffc04 	addi	sp,sp,-16
 101892c:	dfc00315 	stw	ra,12(sp)
 1018930:	df000215 	stw	fp,8(sp)
 1018934:	df000204 	addi	fp,sp,8
 1018938:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 101893c:	e0bfff17 	ldw	r2,-4(fp)
 1018940:	10800217 	ldw	r2,8(r2)
 1018944:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 1018948:	00000c06 	br	101897c <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 101894c:	e13ffe17 	ldw	r4,-8(fp)
 1018950:	014040b4 	movhi	r5,258
 1018954:	296a9404 	addi	r5,r5,-21936
 1018958:	10063840 	call	1006384 <strcmp>
 101895c:	1004c03a 	cmpne	r2,r2,zero
 1018960:	1000031e 	bne	r2,zero,1018970 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 1018964:	e0bffe17 	ldw	r2,-8(fp)
 1018968:	10000005 	stb	zero,0(r2)
			break;
 101896c:	00000a06 	br	1018998 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 1018970:	e0bffe17 	ldw	r2,-8(fp)
 1018974:	10800044 	addi	r2,r2,1
 1018978:	e0bffe15 	stw	r2,-8(fp)
 101897c:	e0bffe17 	ldw	r2,-8(fp)
 1018980:	10800003 	ldbu	r2,0(r2)
 1018984:	10803fcc 	andi	r2,r2,255
 1018988:	1080201c 	xori	r2,r2,128
 101898c:	10bfe004 	addi	r2,r2,-128
 1018990:	1004c03a 	cmpne	r2,r2,zero
 1018994:	103fed1e 	bne	r2,zero,101894c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 1018998:	e037883a 	mov	sp,fp
 101899c:	dfc00117 	ldw	ra,4(sp)
 10189a0:	df000017 	ldw	fp,0(sp)
 10189a4:	dec00204 	addi	sp,sp,8
 10189a8:	f800283a 	ret

010189ac <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 10189ac:	defffc04 	addi	sp,sp,-16
 10189b0:	dfc00315 	stw	ra,12(sp)
 10189b4:	df000215 	stw	fp,8(sp)
 10189b8:	df000204 	addi	fp,sp,8
 10189bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 10189c0:	e13fff17 	ldw	r4,-4(fp)
 10189c4:	014040b4 	movhi	r5,258
 10189c8:	29725d04 	addi	r5,r5,-13964
 10189cc:	10190ec0 	call	10190ec <alt_find_dev>
 10189d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10189d4:	e0bffe17 	ldw	r2,-8(fp)
}
 10189d8:	e037883a 	mov	sp,fp
 10189dc:	dfc00117 	ldw	ra,4(sp)
 10189e0:	df000017 	ldw	fp,0(sp)
 10189e4:	dec00204 	addi	sp,sp,8
 10189e8:	f800283a 	ret

010189ec <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 10189ec:	defff904 	addi	sp,sp,-28
 10189f0:	df000615 	stw	fp,24(sp)
 10189f4:	df000604 	addi	fp,sp,24
 10189f8:	e13ffb15 	stw	r4,-20(fp)
 10189fc:	e1bffd15 	stw	r6,-12(fp)
 1018a00:	e1fffe15 	stw	r7,-8(fp)
 1018a04:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1018a08:	e0bffb17 	ldw	r2,-20(fp)
 1018a0c:	10c00c17 	ldw	r3,48(r2)
 1018a10:	e0bffd17 	ldw	r2,-12(fp)
 1018a14:	10c0042e 	bgeu	r2,r3,1018a28 <alt_up_char_buffer_draw+0x3c>
 1018a18:	e0bffb17 	ldw	r2,-20(fp)
 1018a1c:	10c00d17 	ldw	r3,52(r2)
 1018a20:	e0bffe17 	ldw	r2,-8(fp)
 1018a24:	10c00336 	bltu	r2,r3,1018a34 <alt_up_char_buffer_draw+0x48>
		return -1;
 1018a28:	00bfffc4 	movi	r2,-1
 1018a2c:	e0bfff15 	stw	r2,-4(fp)
 1018a30:	00001d06 	br	1018aa8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1018a34:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1018a38:	e0bffb17 	ldw	r2,-20(fp)
 1018a3c:	10c00f17 	ldw	r3,60(r2)
 1018a40:	e0bffd17 	ldw	r2,-12(fp)
 1018a44:	1886703a 	and	r3,r3,r2
 1018a48:	e0bffb17 	ldw	r2,-20(fp)
 1018a4c:	10800e17 	ldw	r2,56(r2)
 1018a50:	1886983a 	sll	r3,r3,r2
 1018a54:	e0bffa17 	ldw	r2,-24(fp)
 1018a58:	10c4b03a 	or	r2,r2,r3
 1018a5c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 1018a60:	e0bffb17 	ldw	r2,-20(fp)
 1018a64:	10c01117 	ldw	r3,68(r2)
 1018a68:	e0bffe17 	ldw	r2,-8(fp)
 1018a6c:	1886703a 	and	r3,r3,r2
 1018a70:	e0bffb17 	ldw	r2,-20(fp)
 1018a74:	10801017 	ldw	r2,64(r2)
 1018a78:	1886983a 	sll	r3,r3,r2
 1018a7c:	e0bffa17 	ldw	r2,-24(fp)
 1018a80:	10c4b03a 	or	r2,r2,r3
 1018a84:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 1018a88:	e0bffb17 	ldw	r2,-20(fp)
 1018a8c:	10800b17 	ldw	r2,44(r2)
 1018a90:	1007883a 	mov	r3,r2
 1018a94:	e0bffa17 	ldw	r2,-24(fp)
 1018a98:	1885883a 	add	r2,r3,r2
 1018a9c:	e0fffc03 	ldbu	r3,-16(fp)
 1018aa0:	10c00025 	stbio	r3,0(r2)

	return 0;
 1018aa4:	e03fff15 	stw	zero,-4(fp)
 1018aa8:	e0bfff17 	ldw	r2,-4(fp)
}
 1018aac:	e037883a 	mov	sp,fp
 1018ab0:	df000017 	ldw	fp,0(sp)
 1018ab4:	dec00104 	addi	sp,sp,4
 1018ab8:	f800283a 	ret

01018abc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1018abc:	defff904 	addi	sp,sp,-28
 1018ac0:	df000615 	stw	fp,24(sp)
 1018ac4:	df000604 	addi	fp,sp,24
 1018ac8:	e13ffb15 	stw	r4,-20(fp)
 1018acc:	e17ffc15 	stw	r5,-16(fp)
 1018ad0:	e1bffd15 	stw	r6,-12(fp)
 1018ad4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1018ad8:	e0bffb17 	ldw	r2,-20(fp)
 1018adc:	10c00c17 	ldw	r3,48(r2)
 1018ae0:	e0bffd17 	ldw	r2,-12(fp)
 1018ae4:	10c0042e 	bgeu	r2,r3,1018af8 <alt_up_char_buffer_string+0x3c>
 1018ae8:	e0bffb17 	ldw	r2,-20(fp)
 1018aec:	10c00d17 	ldw	r3,52(r2)
 1018af0:	e0bffe17 	ldw	r2,-8(fp)
 1018af4:	10c00336 	bltu	r2,r3,1018b04 <alt_up_char_buffer_string+0x48>
		return -1;
 1018af8:	00bfffc4 	movi	r2,-1
 1018afc:	e0bfff15 	stw	r2,-4(fp)
 1018b00:	00002e06 	br	1018bbc <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1018b04:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 1018b08:	e0bffb17 	ldw	r2,-20(fp)
 1018b0c:	10801017 	ldw	r2,64(r2)
 1018b10:	1007883a 	mov	r3,r2
 1018b14:	e0bffe17 	ldw	r2,-8(fp)
 1018b18:	10c6983a 	sll	r3,r2,r3
 1018b1c:	e0bffd17 	ldw	r2,-12(fp)
 1018b20:	1885883a 	add	r2,r3,r2
 1018b24:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 1018b28:	00001c06 	br	1018b9c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 1018b2c:	e0bffb17 	ldw	r2,-20(fp)
 1018b30:	10800b17 	ldw	r2,44(r2)
 1018b34:	1007883a 	mov	r3,r2
 1018b38:	e0bffa17 	ldw	r2,-24(fp)
 1018b3c:	1889883a 	add	r4,r3,r2
 1018b40:	e0bffc17 	ldw	r2,-16(fp)
 1018b44:	10800003 	ldbu	r2,0(r2)
 1018b48:	10c03fcc 	andi	r3,r2,255
 1018b4c:	18c0201c 	xori	r3,r3,128
 1018b50:	18ffe004 	addi	r3,r3,-128
 1018b54:	2005883a 	mov	r2,r4
 1018b58:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1018b5c:	e0bffc17 	ldw	r2,-16(fp)
 1018b60:	10800044 	addi	r2,r2,1
 1018b64:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 1018b68:	e0bffd17 	ldw	r2,-12(fp)
 1018b6c:	10800044 	addi	r2,r2,1
 1018b70:	e0bffd15 	stw	r2,-12(fp)
 1018b74:	e0bffb17 	ldw	r2,-20(fp)
 1018b78:	10c00c17 	ldw	r3,48(r2)
 1018b7c:	e0bffd17 	ldw	r2,-12(fp)
 1018b80:	10c00336 	bltu	r2,r3,1018b90 <alt_up_char_buffer_string+0xd4>
			return -1;
 1018b84:	00bfffc4 	movi	r2,-1
 1018b88:	e0bfff15 	stw	r2,-4(fp)
 1018b8c:	00000b06 	br	1018bbc <alt_up_char_buffer_string+0x100>
		++offset;
 1018b90:	e0bffa17 	ldw	r2,-24(fp)
 1018b94:	10800044 	addi	r2,r2,1
 1018b98:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 1018b9c:	e0bffc17 	ldw	r2,-16(fp)
 1018ba0:	10800003 	ldbu	r2,0(r2)
 1018ba4:	10803fcc 	andi	r2,r2,255
 1018ba8:	1080201c 	xori	r2,r2,128
 1018bac:	10bfe004 	addi	r2,r2,-128
 1018bb0:	1004c03a 	cmpne	r2,r2,zero
 1018bb4:	103fdd1e 	bne	r2,zero,1018b2c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1018bb8:	e03fff15 	stw	zero,-4(fp)
 1018bbc:	e0bfff17 	ldw	r2,-4(fp)
}
 1018bc0:	e037883a 	mov	sp,fp
 1018bc4:	df000017 	ldw	fp,0(sp)
 1018bc8:	dec00104 	addi	sp,sp,4
 1018bcc:	f800283a 	ret

01018bd0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 1018bd0:	defffe04 	addi	sp,sp,-8
 1018bd4:	df000115 	stw	fp,4(sp)
 1018bd8:	df000104 	addi	fp,sp,4
 1018bdc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 1018be0:	e0bfff17 	ldw	r2,-4(fp)
 1018be4:	10800a17 	ldw	r2,40(r2)
 1018be8:	10800084 	addi	r2,r2,2
 1018bec:	1007883a 	mov	r3,r2
 1018bf0:	00800044 	movi	r2,1
 1018bf4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 1018bf8:	e0bfff17 	ldw	r2,-4(fp)
 1018bfc:	10800a17 	ldw	r2,40(r2)
 1018c00:	10800084 	addi	r2,r2,2
 1018c04:	10800023 	ldbuio	r2,0(r2)
 1018c08:	1080004c 	andi	r2,r2,1
 1018c0c:	10803fcc 	andi	r2,r2,255
 1018c10:	1004c03a 	cmpne	r2,r2,zero
 1018c14:	103ff81e 	bne	r2,zero,1018bf8 <alt_up_char_buffer_clear+0x28>
	return 0;
 1018c18:	0005883a 	mov	r2,zero
}
 1018c1c:	e037883a 	mov	sp,fp
 1018c20:	df000017 	ldw	fp,0(sp)
 1018c24:	dec00104 	addi	sp,sp,4
 1018c28:	f800283a 	ret

01018c2c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1018c2c:	defff404 	addi	sp,sp,-48
 1018c30:	df000b15 	stw	fp,44(sp)
 1018c34:	df000b04 	addi	fp,sp,44
 1018c38:	e13ffb15 	stw	r4,-20(fp)
 1018c3c:	e17ffc15 	stw	r5,-16(fp)
 1018c40:	e1bffd15 	stw	r6,-12(fp)
 1018c44:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1018c48:	e03ff915 	stw	zero,-28(fp)
 1018c4c:	008040b4 	movhi	r2,258
 1018c50:	10ba4c04 	addi	r2,r2,-5840
 1018c54:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1018c58:	1005003a 	cmpeq	r2,r2,zero
 1018c5c:	1000411e 	bne	r2,zero,1018d64 <alt_alarm_start+0x138>
  {
    if (alarm)
 1018c60:	e0bffb17 	ldw	r2,-20(fp)
 1018c64:	1005003a 	cmpeq	r2,r2,zero
 1018c68:	10003b1e 	bne	r2,zero,1018d58 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1018c6c:	e0fffb17 	ldw	r3,-20(fp)
 1018c70:	e0bffd17 	ldw	r2,-12(fp)
 1018c74:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1018c78:	e0fffb17 	ldw	r3,-20(fp)
 1018c7c:	e0bffe17 	ldw	r2,-8(fp)
 1018c80:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1018c84:	0005303a 	rdctl	r2,status
 1018c88:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018c8c:	e0fff817 	ldw	r3,-32(fp)
 1018c90:	00bfff84 	movi	r2,-2
 1018c94:	1884703a 	and	r2,r3,r2
 1018c98:	1001703a 	wrctl	status,r2
  
  return context;
 1018c9c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1018ca0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1018ca4:	008040b4 	movhi	r2,258
 1018ca8:	10ba4d04 	addi	r2,r2,-5836
 1018cac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1018cb0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1018cb4:	e0fffc17 	ldw	r3,-16(fp)
 1018cb8:	e0bff917 	ldw	r2,-28(fp)
 1018cbc:	1885883a 	add	r2,r3,r2
 1018cc0:	10c00044 	addi	r3,r2,1
 1018cc4:	e0bffb17 	ldw	r2,-20(fp)
 1018cc8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1018ccc:	e0bffb17 	ldw	r2,-20(fp)
 1018cd0:	10c00217 	ldw	r3,8(r2)
 1018cd4:	e0bff917 	ldw	r2,-28(fp)
 1018cd8:	1880042e 	bgeu	r3,r2,1018cec <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1018cdc:	e0fffb17 	ldw	r3,-20(fp)
 1018ce0:	00800044 	movi	r2,1
 1018ce4:	18800405 	stb	r2,16(r3)
 1018ce8:	00000206 	br	1018cf4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1018cec:	e0bffb17 	ldw	r2,-20(fp)
 1018cf0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1018cf4:	e0fffb17 	ldw	r3,-20(fp)
 1018cf8:	008040b4 	movhi	r2,258
 1018cfc:	10b26204 	addi	r2,r2,-13944
 1018d00:	e0bff615 	stw	r2,-40(fp)
 1018d04:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1018d08:	e0fff717 	ldw	r3,-36(fp)
 1018d0c:	e0bff617 	ldw	r2,-40(fp)
 1018d10:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1018d14:	e0bff617 	ldw	r2,-40(fp)
 1018d18:	10c00017 	ldw	r3,0(r2)
 1018d1c:	e0bff717 	ldw	r2,-36(fp)
 1018d20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1018d24:	e0bff617 	ldw	r2,-40(fp)
 1018d28:	10c00017 	ldw	r3,0(r2)
 1018d2c:	e0bff717 	ldw	r2,-36(fp)
 1018d30:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1018d34:	e0fff617 	ldw	r3,-40(fp)
 1018d38:	e0bff717 	ldw	r2,-36(fp)
 1018d3c:	18800015 	stw	r2,0(r3)
 1018d40:	e0bffa17 	ldw	r2,-24(fp)
 1018d44:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018d48:	e0bff517 	ldw	r2,-44(fp)
 1018d4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1018d50:	e03fff15 	stw	zero,-4(fp)
 1018d54:	00000506 	br	1018d6c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1018d58:	00bffa84 	movi	r2,-22
 1018d5c:	e0bfff15 	stw	r2,-4(fp)
 1018d60:	00000206 	br	1018d6c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1018d64:	00bfde84 	movi	r2,-134
 1018d68:	e0bfff15 	stw	r2,-4(fp)
 1018d6c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1018d70:	e037883a 	mov	sp,fp
 1018d74:	df000017 	ldw	fp,0(sp)
 1018d78:	dec00104 	addi	sp,sp,4
 1018d7c:	f800283a 	ret

01018d80 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1018d80:	defffa04 	addi	sp,sp,-24
 1018d84:	dfc00515 	stw	ra,20(sp)
 1018d88:	df000415 	stw	fp,16(sp)
 1018d8c:	df000404 	addi	fp,sp,16
 1018d90:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1018d94:	008000c4 	movi	r2,3
 1018d98:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 1018d9c:	e0fffc17 	ldw	r3,-16(fp)
 1018da0:	008003f4 	movhi	r2,15
 1018da4:	10909004 	addi	r2,r2,16960
 1018da8:	188b383a 	mul	r5,r3,r2
 1018dac:	0100bef4 	movhi	r4,763
 1018db0:	213c2004 	addi	r4,r4,-3968
 1018db4:	10155300 	call	1015530 <__udivsi3>
 1018db8:	100b883a 	mov	r5,r2
 1018dbc:	01200034 	movhi	r4,32768
 1018dc0:	213fffc4 	addi	r4,r4,-1
 1018dc4:	10155300 	call	1015530 <__udivsi3>
 1018dc8:	100b883a 	mov	r5,r2
 1018dcc:	e13fff17 	ldw	r4,-4(fp)
 1018dd0:	10155300 	call	1015530 <__udivsi3>
 1018dd4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1018dd8:	e0bffd17 	ldw	r2,-12(fp)
 1018ddc:	1005003a 	cmpeq	r2,r2,zero
 1018de0:	1000281e 	bne	r2,zero,1018e84 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 1018de4:	e03ffe15 	stw	zero,-8(fp)
 1018de8:	00001606 	br	1018e44 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1018dec:	00a00034 	movhi	r2,32768
 1018df0:	10bfffc4 	addi	r2,r2,-1
 1018df4:	10bfffc4 	addi	r2,r2,-1
 1018df8:	103ffe1e 	bne	r2,zero,1018df4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1018dfc:	e0fffc17 	ldw	r3,-16(fp)
 1018e00:	008003f4 	movhi	r2,15
 1018e04:	10909004 	addi	r2,r2,16960
 1018e08:	188b383a 	mul	r5,r3,r2
 1018e0c:	0100bef4 	movhi	r4,763
 1018e10:	213c2004 	addi	r4,r4,-3968
 1018e14:	10155300 	call	1015530 <__udivsi3>
 1018e18:	100b883a 	mov	r5,r2
 1018e1c:	01200034 	movhi	r4,32768
 1018e20:	213fffc4 	addi	r4,r4,-1
 1018e24:	10155300 	call	1015530 <__udivsi3>
 1018e28:	1007883a 	mov	r3,r2
 1018e2c:	e0bfff17 	ldw	r2,-4(fp)
 1018e30:	10c5c83a 	sub	r2,r2,r3
 1018e34:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1018e38:	e0bffe17 	ldw	r2,-8(fp)
 1018e3c:	10800044 	addi	r2,r2,1
 1018e40:	e0bffe15 	stw	r2,-8(fp)
 1018e44:	e0fffe17 	ldw	r3,-8(fp)
 1018e48:	e0bffd17 	ldw	r2,-12(fp)
 1018e4c:	18bfe716 	blt	r3,r2,1018dec <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1018e50:	e0fffc17 	ldw	r3,-16(fp)
 1018e54:	008003f4 	movhi	r2,15
 1018e58:	10909004 	addi	r2,r2,16960
 1018e5c:	188b383a 	mul	r5,r3,r2
 1018e60:	0100bef4 	movhi	r4,763
 1018e64:	213c2004 	addi	r4,r4,-3968
 1018e68:	10155300 	call	1015530 <__udivsi3>
 1018e6c:	1007883a 	mov	r3,r2
 1018e70:	e0bfff17 	ldw	r2,-4(fp)
 1018e74:	1885383a 	mul	r2,r3,r2
 1018e78:	10bfffc4 	addi	r2,r2,-1
 1018e7c:	103ffe1e 	bne	r2,zero,1018e78 <alt_busy_sleep+0xf8>
 1018e80:	00000c06 	br	1018eb4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1018e84:	e0fffc17 	ldw	r3,-16(fp)
 1018e88:	008003f4 	movhi	r2,15
 1018e8c:	10909004 	addi	r2,r2,16960
 1018e90:	188b383a 	mul	r5,r3,r2
 1018e94:	0100bef4 	movhi	r4,763
 1018e98:	213c2004 	addi	r4,r4,-3968
 1018e9c:	10155300 	call	1015530 <__udivsi3>
 1018ea0:	1007883a 	mov	r3,r2
 1018ea4:	e0bfff17 	ldw	r2,-4(fp)
 1018ea8:	1885383a 	mul	r2,r3,r2
 1018eac:	10bfffc4 	addi	r2,r2,-1
 1018eb0:	00bffe16 	blt	zero,r2,1018eac <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1018eb4:	0005883a 	mov	r2,zero
}
 1018eb8:	e037883a 	mov	sp,fp
 1018ebc:	dfc00117 	ldw	ra,4(sp)
 1018ec0:	df000017 	ldw	fp,0(sp)
 1018ec4:	dec00204 	addi	sp,sp,8
 1018ec8:	f800283a 	ret

01018ecc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1018ecc:	defffe04 	addi	sp,sp,-8
 1018ed0:	df000115 	stw	fp,4(sp)
 1018ed4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1018ed8:	e03fff15 	stw	zero,-4(fp)
 1018edc:	00000506 	br	1018ef4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1018ee0:	e0bfff17 	ldw	r2,-4(fp)
 1018ee4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1018ee8:	e0bfff17 	ldw	r2,-4(fp)
 1018eec:	10800804 	addi	r2,r2,32
 1018ef0:	e0bfff15 	stw	r2,-4(fp)
 1018ef4:	e0bfff17 	ldw	r2,-4(fp)
 1018ef8:	10820030 	cmpltui	r2,r2,2048
 1018efc:	103ff81e 	bne	r2,zero,1018ee0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1018f00:	e037883a 	mov	sp,fp
 1018f04:	df000017 	ldw	fp,0(sp)
 1018f08:	dec00104 	addi	sp,sp,4
 1018f0c:	f800283a 	ret

01018f10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1018f10:	defff904 	addi	sp,sp,-28
 1018f14:	dfc00615 	stw	ra,24(sp)
 1018f18:	df000515 	stw	fp,20(sp)
 1018f1c:	df000504 	addi	fp,sp,20
 1018f20:	e13ffd15 	stw	r4,-12(fp)
 1018f24:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1018f28:	e0bffd17 	ldw	r2,-12(fp)
 1018f2c:	1005003a 	cmpeq	r2,r2,zero
 1018f30:	1000041e 	bne	r2,zero,1018f44 <alt_dev_llist_insert+0x34>
 1018f34:	e0bffd17 	ldw	r2,-12(fp)
 1018f38:	10800217 	ldw	r2,8(r2)
 1018f3c:	1004c03a 	cmpne	r2,r2,zero
 1018f40:	1000071e 	bne	r2,zero,1018f60 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1018f44:	1018fc40 	call	1018fc4 <alt_get_errno>
 1018f48:	1007883a 	mov	r3,r2
 1018f4c:	00800584 	movi	r2,22
 1018f50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1018f54:	00bffa84 	movi	r2,-22
 1018f58:	e0bfff15 	stw	r2,-4(fp)
 1018f5c:	00001306 	br	1018fac <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1018f60:	e0fffd17 	ldw	r3,-12(fp)
 1018f64:	e0bffe17 	ldw	r2,-8(fp)
 1018f68:	e0bffb15 	stw	r2,-20(fp)
 1018f6c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1018f70:	e0fffc17 	ldw	r3,-16(fp)
 1018f74:	e0bffb17 	ldw	r2,-20(fp)
 1018f78:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1018f7c:	e0bffb17 	ldw	r2,-20(fp)
 1018f80:	10c00017 	ldw	r3,0(r2)
 1018f84:	e0bffc17 	ldw	r2,-16(fp)
 1018f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1018f8c:	e0bffb17 	ldw	r2,-20(fp)
 1018f90:	10c00017 	ldw	r3,0(r2)
 1018f94:	e0bffc17 	ldw	r2,-16(fp)
 1018f98:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1018f9c:	e0fffb17 	ldw	r3,-20(fp)
 1018fa0:	e0bffc17 	ldw	r2,-16(fp)
 1018fa4:	18800015 	stw	r2,0(r3)

  return 0;  
 1018fa8:	e03fff15 	stw	zero,-4(fp)
 1018fac:	e0bfff17 	ldw	r2,-4(fp)
}
 1018fb0:	e037883a 	mov	sp,fp
 1018fb4:	dfc00117 	ldw	ra,4(sp)
 1018fb8:	df000017 	ldw	fp,0(sp)
 1018fbc:	dec00204 	addi	sp,sp,8
 1018fc0:	f800283a 	ret

01018fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1018fc4:	defffd04 	addi	sp,sp,-12
 1018fc8:	dfc00215 	stw	ra,8(sp)
 1018fcc:	df000115 	stw	fp,4(sp)
 1018fd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1018fd4:	008040b4 	movhi	r2,258
 1018fd8:	10b26004 	addi	r2,r2,-13952
 1018fdc:	10800017 	ldw	r2,0(r2)
 1018fe0:	1005003a 	cmpeq	r2,r2,zero
 1018fe4:	1000061e 	bne	r2,zero,1019000 <alt_get_errno+0x3c>
 1018fe8:	008040b4 	movhi	r2,258
 1018fec:	10b26004 	addi	r2,r2,-13952
 1018ff0:	10800017 	ldw	r2,0(r2)
 1018ff4:	103ee83a 	callr	r2
 1018ff8:	e0bfff15 	stw	r2,-4(fp)
 1018ffc:	00000306 	br	101900c <alt_get_errno+0x48>
 1019000:	008040b4 	movhi	r2,258
 1019004:	10ba4204 	addi	r2,r2,-5880
 1019008:	e0bfff15 	stw	r2,-4(fp)
 101900c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019010:	e037883a 	mov	sp,fp
 1019014:	dfc00117 	ldw	ra,4(sp)
 1019018:	df000017 	ldw	fp,0(sp)
 101901c:	dec00204 	addi	sp,sp,8
 1019020:	f800283a 	ret

01019024 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1019024:	defffd04 	addi	sp,sp,-12
 1019028:	dfc00215 	stw	ra,8(sp)
 101902c:	df000115 	stw	fp,4(sp)
 1019030:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1019034:	00bfff04 	movi	r2,-4
 1019038:	00c040b4 	movhi	r3,258
 101903c:	18e6e704 	addi	r3,r3,-25700
 1019040:	1885883a 	add	r2,r3,r2
 1019044:	e0bfff15 	stw	r2,-4(fp)
 1019048:	00000606 	br	1019064 <_do_ctors+0x40>
        (*ctor) (); 
 101904c:	e0bfff17 	ldw	r2,-4(fp)
 1019050:	10800017 	ldw	r2,0(r2)
 1019054:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1019058:	e0bfff17 	ldw	r2,-4(fp)
 101905c:	10bfff04 	addi	r2,r2,-4
 1019060:	e0bfff15 	stw	r2,-4(fp)
 1019064:	e0ffff17 	ldw	r3,-4(fp)
 1019068:	008040b4 	movhi	r2,258
 101906c:	10a6e604 	addi	r2,r2,-25704
 1019070:	18bff62e 	bgeu	r3,r2,101904c <_do_ctors+0x28>
        (*ctor) (); 
}
 1019074:	e037883a 	mov	sp,fp
 1019078:	dfc00117 	ldw	ra,4(sp)
 101907c:	df000017 	ldw	fp,0(sp)
 1019080:	dec00204 	addi	sp,sp,8
 1019084:	f800283a 	ret

01019088 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1019088:	defffd04 	addi	sp,sp,-12
 101908c:	dfc00215 	stw	ra,8(sp)
 1019090:	df000115 	stw	fp,4(sp)
 1019094:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1019098:	00bfff04 	movi	r2,-4
 101909c:	00c040b4 	movhi	r3,258
 10190a0:	18e6e704 	addi	r3,r3,-25700
 10190a4:	1885883a 	add	r2,r3,r2
 10190a8:	e0bfff15 	stw	r2,-4(fp)
 10190ac:	00000606 	br	10190c8 <_do_dtors+0x40>
        (*dtor) (); 
 10190b0:	e0bfff17 	ldw	r2,-4(fp)
 10190b4:	10800017 	ldw	r2,0(r2)
 10190b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10190bc:	e0bfff17 	ldw	r2,-4(fp)
 10190c0:	10bfff04 	addi	r2,r2,-4
 10190c4:	e0bfff15 	stw	r2,-4(fp)
 10190c8:	e0ffff17 	ldw	r3,-4(fp)
 10190cc:	008040b4 	movhi	r2,258
 10190d0:	10a6e704 	addi	r2,r2,-25700
 10190d4:	18bff62e 	bgeu	r3,r2,10190b0 <_do_dtors+0x28>
        (*dtor) (); 
}
 10190d8:	e037883a 	mov	sp,fp
 10190dc:	dfc00117 	ldw	ra,4(sp)
 10190e0:	df000017 	ldw	fp,0(sp)
 10190e4:	dec00204 	addi	sp,sp,8
 10190e8:	f800283a 	ret

010190ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10190ec:	defff904 	addi	sp,sp,-28
 10190f0:	dfc00615 	stw	ra,24(sp)
 10190f4:	df000515 	stw	fp,20(sp)
 10190f8:	df000504 	addi	fp,sp,20
 10190fc:	e13ffd15 	stw	r4,-12(fp)
 1019100:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1019104:	e0bffe17 	ldw	r2,-8(fp)
 1019108:	10800017 	ldw	r2,0(r2)
 101910c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1019110:	e13ffd17 	ldw	r4,-12(fp)
 1019114:	10064cc0 	call	10064cc <strlen>
 1019118:	10800044 	addi	r2,r2,1
 101911c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1019120:	00000d06 	br	1019158 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1019124:	e0bffc17 	ldw	r2,-16(fp)
 1019128:	11000217 	ldw	r4,8(r2)
 101912c:	e1bffb17 	ldw	r6,-20(fp)
 1019130:	e17ffd17 	ldw	r5,-12(fp)
 1019134:	10199f00 	call	10199f0 <memcmp>
 1019138:	1004c03a 	cmpne	r2,r2,zero
 101913c:	1000031e 	bne	r2,zero,101914c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1019140:	e0bffc17 	ldw	r2,-16(fp)
 1019144:	e0bfff15 	stw	r2,-4(fp)
 1019148:	00000706 	br	1019168 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 101914c:	e0bffc17 	ldw	r2,-16(fp)
 1019150:	10800017 	ldw	r2,0(r2)
 1019154:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1019158:	e0fffe17 	ldw	r3,-8(fp)
 101915c:	e0bffc17 	ldw	r2,-16(fp)
 1019160:	10fff01e 	bne	r2,r3,1019124 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1019164:	e03fff15 	stw	zero,-4(fp)
 1019168:	e0bfff17 	ldw	r2,-4(fp)
}
 101916c:	e037883a 	mov	sp,fp
 1019170:	dfc00117 	ldw	ra,4(sp)
 1019174:	df000017 	ldw	fp,0(sp)
 1019178:	dec00204 	addi	sp,sp,8
 101917c:	f800283a 	ret

01019180 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1019180:	defffe04 	addi	sp,sp,-8
 1019184:	dfc00115 	stw	ra,4(sp)
 1019188:	df000015 	stw	fp,0(sp)
 101918c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1019190:	0009883a 	mov	r4,zero
 1019194:	01440004 	movi	r5,4096
 1019198:	101994c0 	call	101994c <alt_icache_flush>
#endif
}
 101919c:	e037883a 	mov	sp,fp
 10191a0:	dfc00117 	ldw	ra,4(sp)
 10191a4:	df000017 	ldw	fp,0(sp)
 10191a8:	dec00204 	addi	sp,sp,8
 10191ac:	f800283a 	ret

010191b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10191b0:	defff904 	addi	sp,sp,-28
 10191b4:	dfc00615 	stw	ra,24(sp)
 10191b8:	df000515 	stw	fp,20(sp)
 10191bc:	df000504 	addi	fp,sp,20
 10191c0:	e13ffc15 	stw	r4,-16(fp)
 10191c4:	e17ffd15 	stw	r5,-12(fp)
 10191c8:	e1bffe15 	stw	r6,-8(fp)
 10191cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10191d0:	e13ffd17 	ldw	r4,-12(fp)
 10191d4:	e17ffe17 	ldw	r5,-8(fp)
 10191d8:	e1bfff17 	ldw	r6,-4(fp)
 10191dc:	10193c80 	call	10193c8 <open>
 10191e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10191e4:	e0bffb17 	ldw	r2,-20(fp)
 10191e8:	1004803a 	cmplt	r2,r2,zero
 10191ec:	10001c1e 	bne	r2,zero,1019260 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10191f0:	e0bffb17 	ldw	r2,-20(fp)
 10191f4:	00c040b4 	movhi	r3,258
 10191f8:	18ed6104 	addi	r3,r3,-19068
 10191fc:	10800324 	muli	r2,r2,12
 1019200:	10c5883a 	add	r2,r2,r3
 1019204:	10c00017 	ldw	r3,0(r2)
 1019208:	e0bffc17 	ldw	r2,-16(fp)
 101920c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1019210:	e0bffb17 	ldw	r2,-20(fp)
 1019214:	00c040b4 	movhi	r3,258
 1019218:	18ed6104 	addi	r3,r3,-19068
 101921c:	10800324 	muli	r2,r2,12
 1019220:	10c5883a 	add	r2,r2,r3
 1019224:	10800104 	addi	r2,r2,4
 1019228:	10c00017 	ldw	r3,0(r2)
 101922c:	e0bffc17 	ldw	r2,-16(fp)
 1019230:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1019234:	e0bffb17 	ldw	r2,-20(fp)
 1019238:	00c040b4 	movhi	r3,258
 101923c:	18ed6104 	addi	r3,r3,-19068
 1019240:	10800324 	muli	r2,r2,12
 1019244:	10c5883a 	add	r2,r2,r3
 1019248:	10800204 	addi	r2,r2,8
 101924c:	10c00017 	ldw	r3,0(r2)
 1019250:	e0bffc17 	ldw	r2,-16(fp)
 1019254:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1019258:	e13ffb17 	ldw	r4,-20(fp)
 101925c:	10169f40 	call	10169f4 <alt_release_fd>
  }
} 
 1019260:	e037883a 	mov	sp,fp
 1019264:	dfc00117 	ldw	ra,4(sp)
 1019268:	df000017 	ldw	fp,0(sp)
 101926c:	dec00204 	addi	sp,sp,8
 1019270:	f800283a 	ret

01019274 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1019274:	defffb04 	addi	sp,sp,-20
 1019278:	dfc00415 	stw	ra,16(sp)
 101927c:	df000315 	stw	fp,12(sp)
 1019280:	df000304 	addi	fp,sp,12
 1019284:	e13ffd15 	stw	r4,-12(fp)
 1019288:	e17ffe15 	stw	r5,-8(fp)
 101928c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1019290:	010040b4 	movhi	r4,258
 1019294:	212d6404 	addi	r4,r4,-19056
 1019298:	e17ffd17 	ldw	r5,-12(fp)
 101929c:	01800044 	movi	r6,1
 10192a0:	01c07fc4 	movi	r7,511
 10192a4:	10191b00 	call	10191b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10192a8:	010040b4 	movhi	r4,258
 10192ac:	212d6104 	addi	r4,r4,-19068
 10192b0:	e17ffe17 	ldw	r5,-8(fp)
 10192b4:	000d883a 	mov	r6,zero
 10192b8:	01c07fc4 	movi	r7,511
 10192bc:	10191b00 	call	10191b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10192c0:	010040b4 	movhi	r4,258
 10192c4:	212d6704 	addi	r4,r4,-19044
 10192c8:	e17fff17 	ldw	r5,-4(fp)
 10192cc:	01800044 	movi	r6,1
 10192d0:	01c07fc4 	movi	r7,511
 10192d4:	10191b00 	call	10191b0 <alt_open_fd>
}  
 10192d8:	e037883a 	mov	sp,fp
 10192dc:	dfc00117 	ldw	ra,4(sp)
 10192e0:	df000017 	ldw	fp,0(sp)
 10192e4:	dec00204 	addi	sp,sp,8
 10192e8:	f800283a 	ret

010192ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10192ec:	defffc04 	addi	sp,sp,-16
 10192f0:	df000315 	stw	fp,12(sp)
 10192f4:	df000304 	addi	fp,sp,12
 10192f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10192fc:	e0bffe17 	ldw	r2,-8(fp)
 1019300:	10800217 	ldw	r2,8(r2)
 1019304:	10d00034 	orhi	r3,r2,16384
 1019308:	e0bffe17 	ldw	r2,-8(fp)
 101930c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1019310:	e03ffd15 	stw	zero,-12(fp)
 1019314:	00002006 	br	1019398 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1019318:	e0bffd17 	ldw	r2,-12(fp)
 101931c:	00c040b4 	movhi	r3,258
 1019320:	18ed6104 	addi	r3,r3,-19068
 1019324:	10800324 	muli	r2,r2,12
 1019328:	10c5883a 	add	r2,r2,r3
 101932c:	10c00017 	ldw	r3,0(r2)
 1019330:	e0bffe17 	ldw	r2,-8(fp)
 1019334:	10800017 	ldw	r2,0(r2)
 1019338:	1880141e 	bne	r3,r2,101938c <alt_file_locked+0xa0>
 101933c:	e0bffd17 	ldw	r2,-12(fp)
 1019340:	00c040b4 	movhi	r3,258
 1019344:	18ed6104 	addi	r3,r3,-19068
 1019348:	10800324 	muli	r2,r2,12
 101934c:	10c5883a 	add	r2,r2,r3
 1019350:	10800204 	addi	r2,r2,8
 1019354:	10800017 	ldw	r2,0(r2)
 1019358:	1004403a 	cmpge	r2,r2,zero
 101935c:	10000b1e 	bne	r2,zero,101938c <alt_file_locked+0xa0>
 1019360:	e0bffd17 	ldw	r2,-12(fp)
 1019364:	10800324 	muli	r2,r2,12
 1019368:	1007883a 	mov	r3,r2
 101936c:	008040b4 	movhi	r2,258
 1019370:	10ad6104 	addi	r2,r2,-19068
 1019374:	1887883a 	add	r3,r3,r2
 1019378:	e0bffe17 	ldw	r2,-8(fp)
 101937c:	18800326 	beq	r3,r2,101938c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1019380:	00bffcc4 	movi	r2,-13
 1019384:	e0bfff15 	stw	r2,-4(fp)
 1019388:	00000a06 	br	10193b4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101938c:	e0bffd17 	ldw	r2,-12(fp)
 1019390:	10800044 	addi	r2,r2,1
 1019394:	e0bffd15 	stw	r2,-12(fp)
 1019398:	008040b4 	movhi	r2,258
 101939c:	10b25f04 	addi	r2,r2,-13956
 10193a0:	10800017 	ldw	r2,0(r2)
 10193a4:	1007883a 	mov	r3,r2
 10193a8:	e0bffd17 	ldw	r2,-12(fp)
 10193ac:	18bfda2e 	bgeu	r3,r2,1019318 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10193b0:	e03fff15 	stw	zero,-4(fp)
 10193b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10193b8:	e037883a 	mov	sp,fp
 10193bc:	df000017 	ldw	fp,0(sp)
 10193c0:	dec00104 	addi	sp,sp,4
 10193c4:	f800283a 	ret

010193c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10193c8:	defff404 	addi	sp,sp,-48
 10193cc:	dfc00b15 	stw	ra,44(sp)
 10193d0:	df000a15 	stw	fp,40(sp)
 10193d4:	df000a04 	addi	fp,sp,40
 10193d8:	e13ffb15 	stw	r4,-20(fp)
 10193dc:	e17ffc15 	stw	r5,-16(fp)
 10193e0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10193e4:	00bfffc4 	movi	r2,-1
 10193e8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10193ec:	00bffb44 	movi	r2,-19
 10193f0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10193f4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10193f8:	e13ffb17 	ldw	r4,-20(fp)
 10193fc:	014040b4 	movhi	r5,258
 1019400:	29725d04 	addi	r5,r5,-13964
 1019404:	10190ec0 	call	10190ec <alt_find_dev>
 1019408:	e0bffa15 	stw	r2,-24(fp)
 101940c:	e0bffa17 	ldw	r2,-24(fp)
 1019410:	1004c03a 	cmpne	r2,r2,zero
 1019414:	1000051e 	bne	r2,zero,101942c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1019418:	e13ffb17 	ldw	r4,-20(fp)
 101941c:	10197740 	call	1019774 <alt_find_file>
 1019420:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1019424:	00800044 	movi	r2,1
 1019428:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 101942c:	e0bffa17 	ldw	r2,-24(fp)
 1019430:	1005003a 	cmpeq	r2,r2,zero
 1019434:	1000301e 	bne	r2,zero,10194f8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1019438:	e13ffa17 	ldw	r4,-24(fp)
 101943c:	10198940 	call	1019894 <alt_get_fd>
 1019440:	e0bff815 	stw	r2,-32(fp)
 1019444:	e0bff817 	ldw	r2,-32(fp)
 1019448:	1004403a 	cmpge	r2,r2,zero
 101944c:	1000031e 	bne	r2,zero,101945c <open+0x94>
    {
      status = index;
 1019450:	e0bff817 	ldw	r2,-32(fp)
 1019454:	e0bff715 	stw	r2,-36(fp)
 1019458:	00002906 	br	1019500 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 101945c:	e0bff817 	ldw	r2,-32(fp)
 1019460:	10800324 	muli	r2,r2,12
 1019464:	1007883a 	mov	r3,r2
 1019468:	008040b4 	movhi	r2,258
 101946c:	10ad6104 	addi	r2,r2,-19068
 1019470:	1885883a 	add	r2,r3,r2
 1019474:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1019478:	e0fffc17 	ldw	r3,-16(fp)
 101947c:	00900034 	movhi	r2,16384
 1019480:	10bfffc4 	addi	r2,r2,-1
 1019484:	1886703a 	and	r3,r3,r2
 1019488:	e0bff917 	ldw	r2,-28(fp)
 101948c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1019490:	e0bff617 	ldw	r2,-40(fp)
 1019494:	1004c03a 	cmpne	r2,r2,zero
 1019498:	1000061e 	bne	r2,zero,10194b4 <open+0xec>
 101949c:	e13ff917 	ldw	r4,-28(fp)
 10194a0:	10192ec0 	call	10192ec <alt_file_locked>
 10194a4:	e0bff715 	stw	r2,-36(fp)
 10194a8:	e0bff717 	ldw	r2,-36(fp)
 10194ac:	1004803a 	cmplt	r2,r2,zero
 10194b0:	1000131e 	bne	r2,zero,1019500 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10194b4:	e0bffa17 	ldw	r2,-24(fp)
 10194b8:	10800317 	ldw	r2,12(r2)
 10194bc:	1005003a 	cmpeq	r2,r2,zero
 10194c0:	1000091e 	bne	r2,zero,10194e8 <open+0x120>
 10194c4:	e0bffa17 	ldw	r2,-24(fp)
 10194c8:	10800317 	ldw	r2,12(r2)
 10194cc:	e13ff917 	ldw	r4,-28(fp)
 10194d0:	e17ffb17 	ldw	r5,-20(fp)
 10194d4:	e1bffc17 	ldw	r6,-16(fp)
 10194d8:	e1fffd17 	ldw	r7,-12(fp)
 10194dc:	103ee83a 	callr	r2
 10194e0:	e0bfff15 	stw	r2,-4(fp)
 10194e4:	00000106 	br	10194ec <open+0x124>
 10194e8:	e03fff15 	stw	zero,-4(fp)
 10194ec:	e0bfff17 	ldw	r2,-4(fp)
 10194f0:	e0bff715 	stw	r2,-36(fp)
 10194f4:	00000206 	br	1019500 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10194f8:	00bffb44 	movi	r2,-19
 10194fc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1019500:	e0bff717 	ldw	r2,-36(fp)
 1019504:	1004403a 	cmpge	r2,r2,zero
 1019508:	1000091e 	bne	r2,zero,1019530 <open+0x168>
  {
    alt_release_fd (index);  
 101950c:	e13ff817 	ldw	r4,-32(fp)
 1019510:	10169f40 	call	10169f4 <alt_release_fd>
    ALT_ERRNO = -status;
 1019514:	10195500 	call	1019550 <alt_get_errno>
 1019518:	e0fff717 	ldw	r3,-36(fp)
 101951c:	00c7c83a 	sub	r3,zero,r3
 1019520:	10c00015 	stw	r3,0(r2)
    return -1;
 1019524:	00bfffc4 	movi	r2,-1
 1019528:	e0bffe15 	stw	r2,-8(fp)
 101952c:	00000206 	br	1019538 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1019530:	e0bff817 	ldw	r2,-32(fp)
 1019534:	e0bffe15 	stw	r2,-8(fp)
 1019538:	e0bffe17 	ldw	r2,-8(fp)
}
 101953c:	e037883a 	mov	sp,fp
 1019540:	dfc00117 	ldw	ra,4(sp)
 1019544:	df000017 	ldw	fp,0(sp)
 1019548:	dec00204 	addi	sp,sp,8
 101954c:	f800283a 	ret

01019550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1019550:	defffd04 	addi	sp,sp,-12
 1019554:	dfc00215 	stw	ra,8(sp)
 1019558:	df000115 	stw	fp,4(sp)
 101955c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1019560:	008040b4 	movhi	r2,258
 1019564:	10b26004 	addi	r2,r2,-13952
 1019568:	10800017 	ldw	r2,0(r2)
 101956c:	1005003a 	cmpeq	r2,r2,zero
 1019570:	1000061e 	bne	r2,zero,101958c <alt_get_errno+0x3c>
 1019574:	008040b4 	movhi	r2,258
 1019578:	10b26004 	addi	r2,r2,-13952
 101957c:	10800017 	ldw	r2,0(r2)
 1019580:	103ee83a 	callr	r2
 1019584:	e0bfff15 	stw	r2,-4(fp)
 1019588:	00000306 	br	1019598 <alt_get_errno+0x48>
 101958c:	008040b4 	movhi	r2,258
 1019590:	10ba4204 	addi	r2,r2,-5880
 1019594:	e0bfff15 	stw	r2,-4(fp)
 1019598:	e0bfff17 	ldw	r2,-4(fp)
}
 101959c:	e037883a 	mov	sp,fp
 10195a0:	dfc00117 	ldw	ra,4(sp)
 10195a4:	df000017 	ldw	fp,0(sp)
 10195a8:	dec00204 	addi	sp,sp,8
 10195ac:	f800283a 	ret

010195b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10195b0:	defffa04 	addi	sp,sp,-24
 10195b4:	df000515 	stw	fp,20(sp)
 10195b8:	df000504 	addi	fp,sp,20
 10195bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10195c0:	0005303a 	rdctl	r2,status
 10195c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10195c8:	e0fffd17 	ldw	r3,-12(fp)
 10195cc:	00bfff84 	movi	r2,-2
 10195d0:	1884703a 	and	r2,r3,r2
 10195d4:	1001703a 	wrctl	status,r2
  
  return context;
 10195d8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10195dc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10195e0:	e0bfff17 	ldw	r2,-4(fp)
 10195e4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10195e8:	e0bffc17 	ldw	r2,-16(fp)
 10195ec:	10c00017 	ldw	r3,0(r2)
 10195f0:	e0bffc17 	ldw	r2,-16(fp)
 10195f4:	10800117 	ldw	r2,4(r2)
 10195f8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10195fc:	e0bffc17 	ldw	r2,-16(fp)
 1019600:	10c00117 	ldw	r3,4(r2)
 1019604:	e0bffc17 	ldw	r2,-16(fp)
 1019608:	10800017 	ldw	r2,0(r2)
 101960c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1019610:	e0fffc17 	ldw	r3,-16(fp)
 1019614:	e0bffc17 	ldw	r2,-16(fp)
 1019618:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 101961c:	e0fffc17 	ldw	r3,-16(fp)
 1019620:	e0bffc17 	ldw	r2,-16(fp)
 1019624:	18800015 	stw	r2,0(r3)
 1019628:	e0bffe17 	ldw	r2,-8(fp)
 101962c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1019630:	e0bffb17 	ldw	r2,-20(fp)
 1019634:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1019638:	e037883a 	mov	sp,fp
 101963c:	df000017 	ldw	fp,0(sp)
 1019640:	dec00104 	addi	sp,sp,4
 1019644:	f800283a 	ret

01019648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1019648:	defffb04 	addi	sp,sp,-20
 101964c:	dfc00415 	stw	ra,16(sp)
 1019650:	df000315 	stw	fp,12(sp)
 1019654:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1019658:	d0a01917 	ldw	r2,-32668(gp)
 101965c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1019660:	d0a80417 	ldw	r2,-24560(gp)
 1019664:	10800044 	addi	r2,r2,1
 1019668:	d0a80415 	stw	r2,-24560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101966c:	00003106 	br	1019734 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1019670:	e0bffe17 	ldw	r2,-8(fp)
 1019674:	10800017 	ldw	r2,0(r2)
 1019678:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 101967c:	e0bffe17 	ldw	r2,-8(fp)
 1019680:	10800403 	ldbu	r2,16(r2)
 1019684:	10803fcc 	andi	r2,r2,255
 1019688:	1005003a 	cmpeq	r2,r2,zero
 101968c:	1000051e 	bne	r2,zero,10196a4 <alt_tick+0x5c>
 1019690:	d0a80417 	ldw	r2,-24560(gp)
 1019694:	1004c03a 	cmpne	r2,r2,zero
 1019698:	1000021e 	bne	r2,zero,10196a4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 101969c:	e0bffe17 	ldw	r2,-8(fp)
 10196a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10196a4:	e0bffe17 	ldw	r2,-8(fp)
 10196a8:	10c00217 	ldw	r3,8(r2)
 10196ac:	d0a80417 	ldw	r2,-24560(gp)
 10196b0:	10c01e36 	bltu	r2,r3,101972c <alt_tick+0xe4>
 10196b4:	e0bffe17 	ldw	r2,-8(fp)
 10196b8:	10800403 	ldbu	r2,16(r2)
 10196bc:	10803fcc 	andi	r2,r2,255
 10196c0:	1004c03a 	cmpne	r2,r2,zero
 10196c4:	1000191e 	bne	r2,zero,101972c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10196c8:	e0bffe17 	ldw	r2,-8(fp)
 10196cc:	10c00317 	ldw	r3,12(r2)
 10196d0:	e0bffe17 	ldw	r2,-8(fp)
 10196d4:	11000517 	ldw	r4,20(r2)
 10196d8:	183ee83a 	callr	r3
 10196dc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10196e0:	e0bffd17 	ldw	r2,-12(fp)
 10196e4:	1004c03a 	cmpne	r2,r2,zero
 10196e8:	1000031e 	bne	r2,zero,10196f8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10196ec:	e13ffe17 	ldw	r4,-8(fp)
 10196f0:	10195b00 	call	10195b0 <alt_alarm_stop>
 10196f4:	00000d06 	br	101972c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10196f8:	e0bffe17 	ldw	r2,-8(fp)
 10196fc:	10c00217 	ldw	r3,8(r2)
 1019700:	e0bffd17 	ldw	r2,-12(fp)
 1019704:	1887883a 	add	r3,r3,r2
 1019708:	e0bffe17 	ldw	r2,-8(fp)
 101970c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1019710:	e0bffe17 	ldw	r2,-8(fp)
 1019714:	10c00217 	ldw	r3,8(r2)
 1019718:	d0a80417 	ldw	r2,-24560(gp)
 101971c:	1880032e 	bgeu	r3,r2,101972c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1019720:	e0fffe17 	ldw	r3,-8(fp)
 1019724:	00800044 	movi	r2,1
 1019728:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 101972c:	e0bfff17 	ldw	r2,-4(fp)
 1019730:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1019734:	d0e01904 	addi	r3,gp,-32668
 1019738:	e0bffe17 	ldw	r2,-8(fp)
 101973c:	10ffcc1e 	bne	r2,r3,1019670 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1019740:	e037883a 	mov	sp,fp
 1019744:	dfc00117 	ldw	ra,4(sp)
 1019748:	df000017 	ldw	fp,0(sp)
 101974c:	dec00204 	addi	sp,sp,8
 1019750:	f800283a 	ret

01019754 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1019754:	deffff04 	addi	sp,sp,-4
 1019758:	df000015 	stw	fp,0(sp)
 101975c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1019760:	000170fa 	wrctl	ienable,zero
}
 1019764:	e037883a 	mov	sp,fp
 1019768:	df000017 	ldw	fp,0(sp)
 101976c:	dec00104 	addi	sp,sp,4
 1019770:	f800283a 	ret

01019774 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1019774:	defffa04 	addi	sp,sp,-24
 1019778:	dfc00515 	stw	ra,20(sp)
 101977c:	df000415 	stw	fp,16(sp)
 1019780:	df000404 	addi	fp,sp,16
 1019784:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1019788:	008040b4 	movhi	r2,258
 101978c:	10b25b04 	addi	r2,r2,-13972
 1019790:	10800017 	ldw	r2,0(r2)
 1019794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019798:	00003306 	br	1019868 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 101979c:	e0bffd17 	ldw	r2,-12(fp)
 10197a0:	11000217 	ldw	r4,8(r2)
 10197a4:	10064cc0 	call	10064cc <strlen>
 10197a8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10197ac:	e0bffd17 	ldw	r2,-12(fp)
 10197b0:	10c00217 	ldw	r3,8(r2)
 10197b4:	e0bffc17 	ldw	r2,-16(fp)
 10197b8:	1885883a 	add	r2,r3,r2
 10197bc:	10bfffc4 	addi	r2,r2,-1
 10197c0:	10800003 	ldbu	r2,0(r2)
 10197c4:	10803fcc 	andi	r2,r2,255
 10197c8:	1080201c 	xori	r2,r2,128
 10197cc:	10bfe004 	addi	r2,r2,-128
 10197d0:	10800bd8 	cmpnei	r2,r2,47
 10197d4:	1000031e 	bne	r2,zero,10197e4 <alt_find_file+0x70>
    {
      len -= 1;
 10197d8:	e0bffc17 	ldw	r2,-16(fp)
 10197dc:	10bfffc4 	addi	r2,r2,-1
 10197e0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10197e4:	e0bffc17 	ldw	r2,-16(fp)
 10197e8:	1007883a 	mov	r3,r2
 10197ec:	e0bffe17 	ldw	r2,-8(fp)
 10197f0:	1885883a 	add	r2,r3,r2
 10197f4:	10800003 	ldbu	r2,0(r2)
 10197f8:	10803fcc 	andi	r2,r2,255
 10197fc:	1080201c 	xori	r2,r2,128
 1019800:	10bfe004 	addi	r2,r2,-128
 1019804:	10800be0 	cmpeqi	r2,r2,47
 1019808:	10000a1e 	bne	r2,zero,1019834 <alt_find_file+0xc0>
 101980c:	e0bffc17 	ldw	r2,-16(fp)
 1019810:	1007883a 	mov	r3,r2
 1019814:	e0bffe17 	ldw	r2,-8(fp)
 1019818:	1885883a 	add	r2,r3,r2
 101981c:	10800003 	ldbu	r2,0(r2)
 1019820:	10803fcc 	andi	r2,r2,255
 1019824:	1080201c 	xori	r2,r2,128
 1019828:	10bfe004 	addi	r2,r2,-128
 101982c:	1004c03a 	cmpne	r2,r2,zero
 1019830:	10000a1e 	bne	r2,zero,101985c <alt_find_file+0xe8>
 1019834:	e0bffd17 	ldw	r2,-12(fp)
 1019838:	11000217 	ldw	r4,8(r2)
 101983c:	e1bffc17 	ldw	r6,-16(fp)
 1019840:	e17ffe17 	ldw	r5,-8(fp)
 1019844:	10199f00 	call	10199f0 <memcmp>
 1019848:	1004c03a 	cmpne	r2,r2,zero
 101984c:	1000031e 	bne	r2,zero,101985c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1019850:	e0bffd17 	ldw	r2,-12(fp)
 1019854:	e0bfff15 	stw	r2,-4(fp)
 1019858:	00000806 	br	101987c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101985c:	e0bffd17 	ldw	r2,-12(fp)
 1019860:	10800017 	ldw	r2,0(r2)
 1019864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1019868:	00c040b4 	movhi	r3,258
 101986c:	18f25b04 	addi	r3,r3,-13972
 1019870:	e0bffd17 	ldw	r2,-12(fp)
 1019874:	10ffc91e 	bne	r2,r3,101979c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1019878:	e03fff15 	stw	zero,-4(fp)
 101987c:	e0bfff17 	ldw	r2,-4(fp)
}
 1019880:	e037883a 	mov	sp,fp
 1019884:	dfc00117 	ldw	ra,4(sp)
 1019888:	df000017 	ldw	fp,0(sp)
 101988c:	dec00204 	addi	sp,sp,8
 1019890:	f800283a 	ret

01019894 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1019894:	defffc04 	addi	sp,sp,-16
 1019898:	df000315 	stw	fp,12(sp)
 101989c:	df000304 	addi	fp,sp,12
 10198a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10198a4:	00bffa04 	movi	r2,-24
 10198a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10198ac:	e03ffe15 	stw	zero,-8(fp)
 10198b0:	00001e06 	br	101992c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 10198b4:	e0bffe17 	ldw	r2,-8(fp)
 10198b8:	00c040b4 	movhi	r3,258
 10198bc:	18ed6104 	addi	r3,r3,-19068
 10198c0:	10800324 	muli	r2,r2,12
 10198c4:	10c5883a 	add	r2,r2,r3
 10198c8:	10800017 	ldw	r2,0(r2)
 10198cc:	1004c03a 	cmpne	r2,r2,zero
 10198d0:	1000131e 	bne	r2,zero,1019920 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 10198d4:	e0bffe17 	ldw	r2,-8(fp)
 10198d8:	00c040b4 	movhi	r3,258
 10198dc:	18ed6104 	addi	r3,r3,-19068
 10198e0:	10800324 	muli	r2,r2,12
 10198e4:	10c7883a 	add	r3,r2,r3
 10198e8:	e0bfff17 	ldw	r2,-4(fp)
 10198ec:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10198f0:	008040b4 	movhi	r2,258
 10198f4:	10b25f04 	addi	r2,r2,-13956
 10198f8:	10c00017 	ldw	r3,0(r2)
 10198fc:	e0bffe17 	ldw	r2,-8(fp)
 1019900:	1880040e 	bge	r3,r2,1019914 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1019904:	00c040b4 	movhi	r3,258
 1019908:	18f25f04 	addi	r3,r3,-13956
 101990c:	e0bffe17 	ldw	r2,-8(fp)
 1019910:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1019914:	e0bffe17 	ldw	r2,-8(fp)
 1019918:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 101991c:	00000606 	br	1019938 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1019920:	e0bffe17 	ldw	r2,-8(fp)
 1019924:	10800044 	addi	r2,r2,1
 1019928:	e0bffe15 	stw	r2,-8(fp)
 101992c:	e0bffe17 	ldw	r2,-8(fp)
 1019930:	10800810 	cmplti	r2,r2,32
 1019934:	103fdf1e 	bne	r2,zero,10198b4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1019938:	e0bffd17 	ldw	r2,-12(fp)
}
 101993c:	e037883a 	mov	sp,fp
 1019940:	df000017 	ldw	fp,0(sp)
 1019944:	dec00104 	addi	sp,sp,4
 1019948:	f800283a 	ret

0101994c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 101994c:	defffb04 	addi	sp,sp,-20
 1019950:	df000415 	stw	fp,16(sp)
 1019954:	df000404 	addi	fp,sp,16
 1019958:	e13ffe15 	stw	r4,-8(fp)
 101995c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1019960:	e0bfff17 	ldw	r2,-4(fp)
 1019964:	10840070 	cmpltui	r2,r2,4097
 1019968:	1000021e 	bne	r2,zero,1019974 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 101996c:	00840004 	movi	r2,4096
 1019970:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1019974:	e0fffe17 	ldw	r3,-8(fp)
 1019978:	e0bfff17 	ldw	r2,-4(fp)
 101997c:	1885883a 	add	r2,r3,r2
 1019980:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1019984:	e0bffe17 	ldw	r2,-8(fp)
 1019988:	e0bffd15 	stw	r2,-12(fp)
 101998c:	00000506 	br	10199a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1019990:	e0bffd17 	ldw	r2,-12(fp)
 1019994:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1019998:	e0bffd17 	ldw	r2,-12(fp)
 101999c:	10800804 	addi	r2,r2,32
 10199a0:	e0bffd15 	stw	r2,-12(fp)
 10199a4:	e0fffd17 	ldw	r3,-12(fp)
 10199a8:	e0bffc17 	ldw	r2,-16(fp)
 10199ac:	18bff836 	bltu	r3,r2,1019990 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 10199b0:	e0bffe17 	ldw	r2,-8(fp)
 10199b4:	108007cc 	andi	r2,r2,31
 10199b8:	1005003a 	cmpeq	r2,r2,zero
 10199bc:	1000021e 	bne	r2,zero,10199c8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10199c0:	e0bffd17 	ldw	r2,-12(fp)
 10199c4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10199c8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10199cc:	e037883a 	mov	sp,fp
 10199d0:	df000017 	ldw	fp,0(sp)
 10199d4:	dec00104 	addi	sp,sp,4
 10199d8:	f800283a 	ret

010199dc <atexit>:
 10199dc:	200b883a 	mov	r5,r4
 10199e0:	000d883a 	mov	r6,zero
 10199e4:	0009883a 	mov	r4,zero
 10199e8:	000f883a 	mov	r7,zero
 10199ec:	1019a641 	jmpi	1019a64 <__register_exitproc>

010199f0 <memcmp>:
 10199f0:	00c000c4 	movi	r3,3
 10199f4:	1980032e 	bgeu	r3,r6,1019a04 <memcmp+0x14>
 10199f8:	2144b03a 	or	r2,r4,r5
 10199fc:	10c4703a 	and	r2,r2,r3
 1019a00:	10000f26 	beq	r2,zero,1019a40 <memcmp+0x50>
 1019a04:	31ffffc4 	addi	r7,r6,-1
 1019a08:	3000061e 	bne	r6,zero,1019a24 <memcmp+0x34>
 1019a0c:	00000a06 	br	1019a38 <memcmp+0x48>
 1019a10:	39ffffc4 	addi	r7,r7,-1
 1019a14:	00bfffc4 	movi	r2,-1
 1019a18:	21000044 	addi	r4,r4,1
 1019a1c:	29400044 	addi	r5,r5,1
 1019a20:	38800526 	beq	r7,r2,1019a38 <memcmp+0x48>
 1019a24:	20c00003 	ldbu	r3,0(r4)
 1019a28:	28800003 	ldbu	r2,0(r5)
 1019a2c:	18bff826 	beq	r3,r2,1019a10 <memcmp+0x20>
 1019a30:	1885c83a 	sub	r2,r3,r2
 1019a34:	f800283a 	ret
 1019a38:	0005883a 	mov	r2,zero
 1019a3c:	f800283a 	ret
 1019a40:	180f883a 	mov	r7,r3
 1019a44:	20c00017 	ldw	r3,0(r4)
 1019a48:	28800017 	ldw	r2,0(r5)
 1019a4c:	18bfed1e 	bne	r3,r2,1019a04 <memcmp+0x14>
 1019a50:	31bfff04 	addi	r6,r6,-4
 1019a54:	21000104 	addi	r4,r4,4
 1019a58:	29400104 	addi	r5,r5,4
 1019a5c:	39bff936 	bltu	r7,r6,1019a44 <memcmp+0x54>
 1019a60:	003fe806 	br	1019a04 <memcmp+0x14>

01019a64 <__register_exitproc>:
 1019a64:	defffa04 	addi	sp,sp,-24
 1019a68:	008040b4 	movhi	r2,258
 1019a6c:	10b25504 	addi	r2,r2,-13996
 1019a70:	dc000015 	stw	r16,0(sp)
 1019a74:	14000017 	ldw	r16,0(r2)
 1019a78:	dd000415 	stw	r20,16(sp)
 1019a7c:	2829883a 	mov	r20,r5
 1019a80:	81405217 	ldw	r5,328(r16)
 1019a84:	dcc00315 	stw	r19,12(sp)
 1019a88:	dc800215 	stw	r18,8(sp)
 1019a8c:	dc400115 	stw	r17,4(sp)
 1019a90:	dfc00515 	stw	ra,20(sp)
 1019a94:	2023883a 	mov	r17,r4
 1019a98:	3027883a 	mov	r19,r6
 1019a9c:	3825883a 	mov	r18,r7
 1019aa0:	28002526 	beq	r5,zero,1019b38 <__register_exitproc+0xd4>
 1019aa4:	29000117 	ldw	r4,4(r5)
 1019aa8:	008007c4 	movi	r2,31
 1019aac:	11002716 	blt	r2,r4,1019b4c <__register_exitproc+0xe8>
 1019ab0:	8800101e 	bne	r17,zero,1019af4 <__register_exitproc+0x90>
 1019ab4:	2105883a 	add	r2,r4,r4
 1019ab8:	1085883a 	add	r2,r2,r2
 1019abc:	20c00044 	addi	r3,r4,1
 1019ac0:	1145883a 	add	r2,r2,r5
 1019ac4:	0009883a 	mov	r4,zero
 1019ac8:	15000215 	stw	r20,8(r2)
 1019acc:	28c00115 	stw	r3,4(r5)
 1019ad0:	2005883a 	mov	r2,r4
 1019ad4:	dfc00517 	ldw	ra,20(sp)
 1019ad8:	dd000417 	ldw	r20,16(sp)
 1019adc:	dcc00317 	ldw	r19,12(sp)
 1019ae0:	dc800217 	ldw	r18,8(sp)
 1019ae4:	dc400117 	ldw	r17,4(sp)
 1019ae8:	dc000017 	ldw	r16,0(sp)
 1019aec:	dec00604 	addi	sp,sp,24
 1019af0:	f800283a 	ret
 1019af4:	29802204 	addi	r6,r5,136
 1019af8:	00800044 	movi	r2,1
 1019afc:	110e983a 	sll	r7,r2,r4
 1019b00:	30c04017 	ldw	r3,256(r6)
 1019b04:	2105883a 	add	r2,r4,r4
 1019b08:	1085883a 	add	r2,r2,r2
 1019b0c:	1185883a 	add	r2,r2,r6
 1019b10:	19c6b03a 	or	r3,r3,r7
 1019b14:	14802015 	stw	r18,128(r2)
 1019b18:	14c00015 	stw	r19,0(r2)
 1019b1c:	00800084 	movi	r2,2
 1019b20:	30c04015 	stw	r3,256(r6)
 1019b24:	88bfe31e 	bne	r17,r2,1019ab4 <__register_exitproc+0x50>
 1019b28:	30804117 	ldw	r2,260(r6)
 1019b2c:	11c4b03a 	or	r2,r2,r7
 1019b30:	30804115 	stw	r2,260(r6)
 1019b34:	003fdf06 	br	1019ab4 <__register_exitproc+0x50>
 1019b38:	008040b4 	movhi	r2,258
 1019b3c:	1080e104 	addi	r2,r2,900
 1019b40:	100b883a 	mov	r5,r2
 1019b44:	80805215 	stw	r2,328(r16)
 1019b48:	003fd606 	br	1019aa4 <__register_exitproc+0x40>
 1019b4c:	00804034 	movhi	r2,256
 1019b50:	10962f04 	addi	r2,r2,22716
 1019b54:	1000021e 	bne	r2,zero,1019b60 <__register_exitproc+0xfc>
 1019b58:	013fffc4 	movi	r4,-1
 1019b5c:	003fdc06 	br	1019ad0 <__register_exitproc+0x6c>
 1019b60:	01006404 	movi	r4,400
 1019b64:	103ee83a 	callr	r2
 1019b68:	1007883a 	mov	r3,r2
 1019b6c:	103ffa26 	beq	r2,zero,1019b58 <__register_exitproc+0xf4>
 1019b70:	80805217 	ldw	r2,328(r16)
 1019b74:	180b883a 	mov	r5,r3
 1019b78:	18000115 	stw	zero,4(r3)
 1019b7c:	18800015 	stw	r2,0(r3)
 1019b80:	80c05215 	stw	r3,328(r16)
 1019b84:	18006215 	stw	zero,392(r3)
 1019b88:	18006315 	stw	zero,396(r3)
 1019b8c:	0009883a 	mov	r4,zero
 1019b90:	883fc826 	beq	r17,zero,1019ab4 <__register_exitproc+0x50>
 1019b94:	003fd706 	br	1019af4 <__register_exitproc+0x90>
 1019b98:	01009d40 	call	1009d4 <__alt_mem_onchip+0x1009d4>
